package com.notenoughrunes;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NotEnoughRunesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NotEnoughRunesPlugin.class);
		RuneLite.main(args);
	}
}
package com.notenoughrunes;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.notenoughrunes.ui.NERPanel;
import java.awt.Cursor;
import java.awt.Insets;
import java.lang.reflect.InvocationTargetException;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import net.runelite.client.ui.ContainableFrame;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.skin.SubstanceRuneLiteLookAndFeel;
import net.runelite.client.util.SwingUtil;

public class NotEnoughRunesUITest
{

	public static void main(String[] args) throws InterruptedException, InvocationTargetException
	{
		Injector testInjector = Guice.createInjector(i ->
		{
		});

		SwingUtilities.invokeAndWait(() ->
		{
			// roughly copied from RuneLite's ClientUI.java init()
			SwingUtil.setupDefaults();
			SwingUtil.setTheme(new SubstanceRuneLiteLookAndFeel());
			SwingUtil.setFont(FontManager.getRunescapeFont());

			ContainableFrame frame = new ContainableFrame();
			frame.getLayeredPane().setCursor(Cursor.getDefaultCursor());

			NERPanel pluginPanel = testInjector.getInstance(NERPanel.class);
			frame.add(pluginPanel);

			Insets insets = frame.getInsets(); // non-frame border (os elements)
			frame.setSize(242 + insets.left + insets.right, 800 + insets.top + insets.bottom);
			
			frame.setResizable(true);
			frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
			frame.setVisible(true);
		});
	}
	
}

package com.notenoughrunes;

import com.notenoughrunes.config.MenuLookupMode;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("notenoughrunes")
public interface NotEnoughRunesConfig extends Config
{
	@ConfigItem(
		keyName = "invLookupMode",
		name = "Inventory Lookup",
		description = "Whether to show a NER Lookup option on inventory items, and when",
		position = 0
	)
	default MenuLookupMode invLookupMode()
	{
		return MenuLookupMode.RIGHT;
	}

	@ConfigItem(
		keyName = "bankLookupMode",
		name = "Bank Lookup",
		description = "Whether to show a NER Lookup option on bank items, and when",
		position = 1
	)
	default MenuLookupMode bankLookupMode()
	{
		return MenuLookupMode.RIGHT;
	}


}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERProductionMaterial;
import com.notenoughrunes.types.NERProductionRecipe;
import com.notenoughrunes.types.NERProductionSkill;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemProducesQuery extends ModeledQuery<NERProductionRecipe>
{

	private final int itemID;

	@Override
	public String getSql()
	{
		//language=SQL
		return "SELECT PR.*, PS.*, PM.*, PR.ID AS PR_ID, PS.ID AS PS_ID, PM.ID AS PM_ID " +
			"FROM PRODUCTION_MATERIALS PM_QUERY " +
			"JOIN PRODUCTION_RECIPES PR ON PM_QUERY.RECIPE_ID = PR.ID " +
			"LEFT JOIN PRODUCTION_SKILLS PS ON PR.ID = PS.RECIPE_ID " +
			"LEFT JOIN PRODUCTION_MATERIALS PM ON PR.ID = PM.RECIPE_ID " +
			"WHERE PM_QUERY.ITEM_ID = ? " +
			"LIMIT 100";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setInt(1, itemID);
	}

	@Override
	public NERProductionRecipe convertRow(ResultSet rs) throws SQLException
	{
		int id = rs.getInt("PR_ID");
		NERProductionRecipe res = new NERProductionRecipe(
			rs.getString("TICKS"),
			new ArrayList<>(),
			rs.getString("FACILITIES"),
			rs.getString("TOOLS"),
			new ArrayList<>(),
			rs.getBoolean("IS_MEMBERS"),
			rs.getString("OUTPUT_ITEM_NAME"),
			rs.getString("OUTPUT_ITEM_VERSION"),
			rs.getInt("OUTPUT_ITEM_ID"),
			rs.getString("OUTPUT_QUANTITY"),
			rs.getString("OUTPUT_QUANTITY_NOTE"),
			rs.getString("OUTPUT_SUBTEXT")
		);

		do
		{
			if (rs.getInt("PM_ID") != 0)
			{
				NERProductionMaterial material = new NERProductionMaterial(
					rs.getString("ITEM_NAME"),
					rs.getString("ITEM_VERSION"),
					rs.getInt("ITEM_ID"),
					rs.getString("QUANTITY")
				);

				if (!res.getMaterials().contains(material)) {
					res.getMaterials().add(material);
				}
			}

			if (rs.getInt("PS_ID") != 0)
			{
				NERProductionSkill skill = new NERProductionSkill(
					rs.getString("NAME"),
					rs.getString("LEVEL"),
					rs.getString("EXPERIENCE"),
					rs.getBoolean("IS_BOOSTABLE")
				);

				if (!res.getSkills().contains(skill)) {
					res.getSkills().add(skill);
				}
			}
		} while (rs.next() && rs.getInt("PR_ID") == id);

		return res;
	}
}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERProductionMaterial;
import com.notenoughrunes.types.NERProductionRecipe;
import com.notenoughrunes.types.NERProductionSkill;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemProducedByQuery extends ModeledQuery<NERProductionRecipe>
{

	private final int itemID;

	@Override
	public String getSql()
	{
		//language=SQL
		return "SELECT *, PR.ID AS PR_ID, PM.ID AS PM_ID, PS.ID AS PS_ID " +
			"FROM PRODUCTION_RECIPES PR " +
			"LEFT JOIN PRODUCTION_MATERIALS PM ON PR.ID = PM.RECIPE_ID " +
			"LEFT JOIN PRODUCTION_SKILLS PS ON PR.ID = PS.RECIPE_ID " +
			"WHERE PR.OUTPUT_ITEM_ID = ? " +
			"ORDER BY PR.ID " +
			"LIMIT 100";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setInt(1, itemID);
	}

	@Override
	public NERProductionRecipe convertRow(ResultSet rs) throws SQLException
	{
		int id = rs.getInt("PR_ID");
		NERProductionRecipe res = new NERProductionRecipe(
			rs.getString("TICKS"),
			new ArrayList<>(),
			rs.getString("FACILITIES"),
			rs.getString("TOOLS"),
			new ArrayList<>(),
			rs.getBoolean("IS_MEMBERS"),
			rs.getString("OUTPUT_ITEM_NAME"),
			rs.getString("OUTPUT_ITEM_VERSION"),
			rs.getInt("OUTPUT_ITEM_ID"),
			rs.getString("OUTPUT_QUANTITY"),
			rs.getString("OUTPUT_QUANTITY_NOTE"),
			rs.getString("OUTPUT_SUBTEXT")
		);

		do
		{
			if (rs.getInt("PM_ID") != 0)
			{
				NERProductionMaterial material = new NERProductionMaterial(
					rs.getString("ITEM_NAME"),
					rs.getString("ITEM_VERSION"),
					rs.getInt("ITEM_ID"),
					rs.getString("QUANTITY")
				);

				if (!res.getMaterials().contains(material)) {
					res.getMaterials().add(material);
				}
			}

			if (rs.getInt("PS_ID") != 0)
			{
				NERProductionSkill skill = new NERProductionSkill(
					rs.getString("NAME"),
					rs.getString("LEVEL"),
					rs.getString("EXPERIENCE"),
					rs.getBoolean("IS_BOOSTABLE")
				);

				if (!res.getSkills().contains(skill)) {
					res.getSkills().add(skill);
				}
			}
		} while (rs.next() && rs.getInt("PR_ID") == id);

		return res;
	}
}

package com.notenoughrunes.db.queries;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public abstract class ModeledQuery<T>
{
	
	public abstract String getSql();
	
	public abstract void setParams(PreparedStatement ps) throws SQLException;

	public abstract T convertRow(ResultSet rs) throws SQLException;

}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERShop;
import com.notenoughrunes.types.NERShopItem;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemSoldAtQuery extends ModeledQuery<NERShop>
{
	
	private final int itemID;

	@Override
	public String getSql()
	{
		//language=SQL
		return "SELECT S.*, SI.*, S.ID AS SHOP_ID, S.NAME AS SHOP_NAME, SI.ID AS SHOP_ITEM_ID FROM SHOPS S " +
			"JOIN SHOP_ITEMS SI ON S.ID = SI.SHOP_ID " +
//			"WHERE EXISTS (" +
//			"	SELECT 1 FROM SHOP_ITEMS SI " +
//			"	WHERE S.ID = SI.SHOP_ID " +
//			"		AND SI.ITEM_NAME = ?" +
//			"		AND (SI.ITEM_VERSION IS NULL OR ? IS NULL OR SI.ITEM_VERSION = ?))";
			// don't *need* all shop items, just matching ones
			"WHERE SI.ITEM_ID = ?";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setInt(1, itemID);
	}

	@Override
	public NERShop convertRow(ResultSet rs) throws SQLException
	{
		int id = rs.getInt("SHOP_ID");
		NERShop res = new NERShop(
			rs.getString("SHOP_NAME"),
			rs.getString("SELL_MULTIPLIER"),
			rs.getString("LOCATION"),
			rs.getBoolean("IS_MEMBERS"),
			new ArrayList<>()
		);

		do
		{
			if (rs.getInt("SHOP_ITEM_ID") != 0)
			{
				NERShopItem shopItem = new NERShopItem(
					rs.getString("ITEM_NAME"),
					rs.getString("ITEM_VERSION"),
					rs.getInt("ITEM_ID"),
					rs.getString("CURRENCY"),
					rs.getString("STOCK"),
					rs.getString("BUY_PRICE"),
					rs.getString("SELL_PRICE")
				);

				if (!res.getItems().contains(shopItem))
				{
					res.getItems().add(shopItem);
				}
			}
		} while (rs.next() && rs.getInt("SHOP_ID") == id);

		return res;
	}
}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERShop;
import com.notenoughrunes.types.NERShopItem;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemCurrencyQuery extends ModeledQuery<NERShop>
{
	
	private final String name;

	@Override
	public String getSql()
	{
		//language=SQL
		return "SELECT S.*, SI.*, S.ID AS SHOP_ID, S.NAME AS SHOP_NAME, SI.ID AS SHOP_ITEM_ID FROM SHOPS S " +
			"JOIN SHOP_ITEMS SI ON S.ID = SI.SHOP_ID " +
//			"WHERE EXISTS (" +
//			"	SELECT 1 FROM SHOP_ITEMS SI " +
//			"	WHERE S.ID = SI.SHOP_ID " +
//			"		AND SI.CURRENCY = ?)";
			// don't *need* all shop items, just matching ones
			"WHERE SI.CURRENCY = ?";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setString(1, name);
	}

	@Override
	public NERShop convertRow(ResultSet rs) throws SQLException
	{
		int id = rs.getInt("SHOP_ID");
		NERShop res = new NERShop(
			rs.getString("SHOP_NAME"),
			rs.getString("SELL_MULTIPLIER"),
			rs.getString("LOCATION"),
			rs.getBoolean("IS_MEMBERS"),
			new ArrayList<>()
		);

		do
		{
			if (rs.getInt("SHOP_ITEM_ID") != 0)
			{
				NERShopItem shopItem = new NERShopItem(
					rs.getString("ITEM_NAME"),
					rs.getString("ITEM_VERSION"),
					rs.getInt("ITEM_ID"),
					rs.getString("CURRENCY"),
					rs.getString("STOCK"),
					rs.getString("BUY_PRICE"),
					rs.getString("SELL_PRICE")
				);

				if (!res.getItems().contains(shopItem))
				{
					res.getItems().add(shopItem);
				}
			}
		} while (rs.next() && rs.getInt("SHOP_ID") == id);

		return res;
	}
}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERInfoItem;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemByIDQuery extends ModeledQuery<NERInfoItem>
{

	private final int itemID;

	@Override
	public String getSql()
	{
		//language=SQL
		return "SELECT I.*, IG.NAME AS GROUP_NAME FROM ITEMS I " +
			"LEFT JOIN ITEM_GROUPS IG on IG.ID = I.GROUP_ID " +
			"WHERE I.ID = ? " +
			"LIMIT 200";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setInt(1, itemID);
	}

	@Override
	public NERInfoItem convertRow(ResultSet rs) throws SQLException
	{
		try
		{
			return new NERInfoItem(
				rs.getInt("ID"),
				rs.getString("NAME"),
				rs.getString("EXAMINE_TEXT"),
				rs.getString("GROUP_NAME"),
				rs.getString("VERSION"),
				rs.getString("URL"),
				rs.getBoolean("IS_MEMBERS"),
				rs.getBoolean("IS_TRADEABLE")
			);
		}
		finally
		{
			rs.next();
		}
	}
}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERDropSource;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemDropSourcesQuery extends ModeledQuery<NERDropSource>
{

	private final String itemName;

	@Override
	public String getSql()
	{
		//language=SQL	
		return "SELECT * FROM DROP_SOURCES DS " +
			"WHERE ITEM_NAME = ?";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setString(1, itemName);
	}

	@Override
	public NERDropSource convertRow(ResultSet rs) throws SQLException
	{
		try
		{
			return new NERDropSource(
				rs.getString("SOURCE"),
				rs.getInt("QUANTITY_LOW"),
				rs.getInt("QUANTITY_HIGH"),
				rs.getString("RARITY"),
				rs.getString("DROP_LEVEL"),
				rs.getString("DROP_TYPE")
			);
		}
		finally
		{
			rs.next();
		}
	}
}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERSpawnItem;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ItemSpawnQuery extends ModeledQuery<NERSpawnItem>
{

	private final String itemName;

	private final String groupName;

	@Override
	public String getSql()
	{
		//language=SQL	
		return "SELECT IG.NAME AS ITEM_GROUP_NAME, SI.* FROM ITEM_GROUPS IG " +
			"JOIN SPAWN_ITEMS SI ON IG.ID = SI.GROUP_ID " +
			"WHERE SI.NAME = ?" +
			"	AND IG.NAME = ?";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setString(1, itemName);
		ps.setString(2, groupName);
	}

	@Override
	public NERSpawnItem convertRow(ResultSet rs) throws SQLException
	{
		try
		{
			return new NERSpawnItem(
				rs.getString("ITEM_GROUP_NAME"),
				rs.getString("NAME"),
				rs.getString("COORDS"),
				rs.getString("LOCATION"),
				rs.getBoolean("IS_MEMBERS")
			);
		}
		finally
		{
			rs.next();
		}
	}
}

package com.notenoughrunes.db.queries;

import com.notenoughrunes.types.NERInfoItem;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class SearchItemsQuery extends ModeledQuery<NERInfoItem>
{

	private final String searchTerms;

	@Override
	public String getSql()
	{
		//language=SQL
		return "SELECT I.*, IG.NAME AS GROUP_NAME FROM ITEMS I " +
			"LEFT JOIN ITEM_GROUPS IG on IG.ID = I.GROUP_ID " +
			"WHERE I.SEARCH_NAME LIKE ? " +
			"LIMIT 200";
	}

	@Override
	public void setParams(PreparedStatement ps) throws SQLException
	{
		ps.setString(1, "%" + searchTerms.toLowerCase() + "%");
	}

	@Override
	public NERInfoItem convertRow(ResultSet rs) throws SQLException
	{
		try
		{
			return new NERInfoItem(
				rs.getInt("ID"),
				rs.getString("NAME"),
				rs.getString("EXAMINE_TEXT"),
				rs.getString("GROUP_NAME"),
				rs.getString("VERSION"),
				rs.getString("URL"),
				rs.getBoolean("IS_MEMBERS"),
				rs.getBoolean("IS_TRADEABLE")
			);
		}
		finally
		{
			rs.next();
		}
	}
}

package com.notenoughrunes.db;

import com.google.common.hash.Funnels;
import com.google.common.hash.Hasher;
import com.google.common.hash.Hashing;
import com.google.common.io.ByteStreams;
import com.notenoughrunes.NotEnoughRunesPlugin;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
@Slf4j
public class H2DbFetcher
{

	private static final String dbFileName = "data.sqlite";
	private static final String remoteUrl = "https://raw.githubusercontent.com/Hannah-GBS/runelite-wiki-scraper/wiki-data/output/" + dbFileName;
	public static final File dbFile = new File(NotEnoughRunesPlugin.NER_DATA_DIR, dbFileName);

	private final OkHttpClient httpClient;

	public void fetch(Runnable callback)
	{
		downloadDbChecksum(callback);
		// todo checksum

	}

	private void downloadDbChecksum(Runnable callback) {
		Request req = new Request.Builder()
			.get()
			.url(remoteUrl + ".sha256")
			.build();

		httpClient.newCall(req).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.error("Failed to download remote checksum for database file");
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				assert response.body() != null;
				InputStream remoteBytes = response.body().byteStream();
				ByteArrayOutputStream into = new ByteArrayOutputStream();
				byte[] buf = new byte[4096];
				for (int n; 0 < (n = remoteBytes.read(buf));) {
					into.write(buf, 0, n);
				}
				into.close();
				String checksum = into.toString(StandardCharsets.UTF_8).trim();

				if (!dbFile.exists() || !checksumMatches(checksum))
				{
					log.debug("Missing db or checksum mismatch. Downloading db");
					downloadRemoteDb(callback);
				} else {
					callback.run();
				}
			}
		});
	}

	private void downloadRemoteDb(Runnable callback)
	{
		Request req = new Request.Builder()
			.get()
			.url(remoteUrl)
			.build();
		
		httpClient.newCall(req).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.error("Failed to download remote database file");
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				assert response.body() != null;
				InputStream remoteBytes = response.body().byteStream();

				try (FileOutputStream fos = new FileOutputStream(dbFile))
				{
					remoteBytes.transferTo(fos);
				}
				
				callback.run();
			}
		});
	}

	private boolean checksumMatches(String remote) throws IOException
	{
		boolean matches;
		if (dbFile.exists())
		{
			FileInputStream is = new FileInputStream(dbFile);
			Hasher hasher = Hashing.sha256().newHasher();
			ByteStreams.copy(is, Funnels.asOutputStream(hasher));
			String hash = hasher.hash().toString();
			matches = hash.equals(remote);
		} else {
			matches = false;
		}

		return matches;
	}

}

package com.notenoughrunes.db;

import com.google.common.base.Stopwatch;
import com.notenoughrunes.db.queries.ModeledQuery;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
@Slf4j
public class H2DataProvider implements AutoCloseable
{

	private static final ExecutorService DB_THREAD = Executors.newSingleThreadExecutor();

	private final H2DbFetcher dbFetcher;

	private Connection db;
	private boolean initialized = false;

	public void init()
	{
		initialized = false;

		dbFetcher.fetch(() ->
			DB_THREAD.submit(() ->
			{
				try
				{
					Class.forName("org.sqlite.JDBC");
					String dbPath = H2DbFetcher.dbFile.getAbsolutePath();
					log.debug("Creating db connection to {}", dbPath);
					db = DriverManager.getConnection(buildConnectionString(dbPath));
				}
				catch (ClassNotFoundException e)
				{
					log.error("Failed to load SQLite JDBC driver class", e);
				}
				catch (SQLException e)
				{
					log.error("Failed to open connection to database file", e);
				}

				initialized = true;
			}));
	}

	@Override
	public void close() throws Exception
	{
		initialized = false;
		db.close();
	}

	private static String buildConnectionString(String fileName)
	{
		return "jdbc:sqlite:" + fileName;
	}

	public <T> void executeSingle(ModeledQuery<T> query, Consumer<T> callback)
	{
		executeMany(query, res ->
			callback.accept(res.isEmpty() ? null : res.get(0)));
	}

	public <T> void executeMany(ModeledQuery<T> query, Consumer<List<T>> callback)
	{
		if (!initialized)
		{
			callback.accept(Collections.emptyList());
		}

		DB_THREAD.submit(() ->
		{
			Stopwatch sw = Stopwatch.createStarted();
			try (PreparedStatement ps = createStatement(query.getSql()))
			{
				query.setParams(ps);

				try (ResultSet rs = ps.executeQuery())
				{
					List<T> res = new ArrayList<>();
					if (rs.next())
					{
						while (!rs.isAfterLast())
						{
							res.add(query.convertRow(rs));
						}
					}

					callback.accept(res);
				}
			}
			catch (Exception e)
			{
				log.warn("Query failed in wrapMany", e);
				callback.accept(Collections.emptyList());
			}
			finally
			{
				log.debug("[{}μs] Query {}", sw.elapsed(TimeUnit.MICROSECONDS), query.getSql());
			}
		});
	}

	private PreparedStatement createStatement(String sql) throws SQLException
	{
		if (!initialized)
		{
			throw new IllegalStateException("Cannot createStatement on a closed connection");
		}

		return db.prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
	}

}

package com.notenoughrunes.types;

import java.util.List;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERShop
{
	private final String name;
	private final String sellMultiplier;
	private final String location;
	private final boolean isMembers;
	private final List<NERShopItem> items;
}

package com.notenoughrunes.types;

import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERDropSource
{
	private final String source;
	private final int quantityLow;
	private final int quantityHigh;
	private final String rarity;
	private final String dropLevel;
	private final String dropType;
}

package com.notenoughrunes.types;

import com.google.gson.annotations.SerializedName;
import java.util.List;
import javax.annotation.Nullable;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERProductionRecipe
{
	private final String ticks;
	private final List<NERProductionMaterial> materials;

	@Nullable
	private final String facilities;

	@Nullable
	private final String tools;

	private final List<NERProductionSkill> skills;

	@SerializedName("members")
	private final boolean isMembers;

	private final String outputItemName;
	private final String outputItemVersion;
	private final int outputItemID;
	private final String outputQuantity;
	private final String outputQuantityNote;
	private final String outputSubtext;

}

package com.notenoughrunes.types;

import java.util.List;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERDropItem
{
	private final String name;

	private final List<NERDropSource> dropSources;
}

package com.notenoughrunes.types;

import com.google.gson.annotations.SerializedName;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERProductionSkill
{
	private final String name;
	private final String level;
	private final String experience;

	@SerializedName("boostable")
	private final boolean isBoostable;
}

package com.notenoughrunes.types;

import java.util.List;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERSpawnGroup
{
	private final String group;
	private final List<NERSpawnItem> spawns;
}

package com.notenoughrunes.types;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Nullable;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERInfoItem
{
	private final int itemID;
	private final String name;
	private final String examineText;
	private final String group;

	@Nullable
	private final String version;

	private final String url;
	private final boolean isMembers;
	private final boolean isTradeable;

	public static NERInfoItem fromResultSet(ResultSet rs, boolean expand) throws SQLException
	{
		NERInfoItem res = new NERInfoItem(
			rs.getInt("I.ID"),
			rs.getString("I.NAME"),
			rs.getString("I.EXAMINE_TEXT"),
			rs.getString("IG.NAME"),
			rs.getString("I.VERSION"),
			rs.getString("I.URL"),
			rs.getBoolean("I.IS_MEMBERS"),
			rs.getBoolean("I.IS_TRADEABLE")
		);

		return res;
	}
}

package com.notenoughrunes.types;

import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERSpawnItem
{
	private final String group;
	private final String name;
	private final String coords;
	private final String location;
	private final boolean isMembers;
}

package com.notenoughrunes.types;

import javax.annotation.Nullable;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERShopItem
{
	private final String name;

	@Nullable
	private final String version;

	private final int itemID;
	private final String currency;
	private final String stock;

	@Nullable
	private final String buyPrice;

	@Nullable
	private final String sellPrice;
}

package com.notenoughrunes.types;

import javax.annotation.Nullable;
import lombok.Data;
import lombok.RequiredArgsConstructor;

@Data
@RequiredArgsConstructor
public class NERProductionMaterial
{
	private final String name;

	@Nullable
	private final String version;

	private final int itemID;

	@Nullable
	private final String quantity;
}

package com.notenoughrunes.types;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import java.lang.reflect.Type;

public class BooleanTypeAdapter implements JsonDeserializer<Boolean>
{
	public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
	{
		if (((JsonPrimitive) json).isBoolean())
		{
			return json.getAsBoolean();
		}

		if (((JsonPrimitive) json).isString())
		{
			String jsonValue = json.getAsString();
			if (jsonValue.equalsIgnoreCase("yes"))
			{
				return true;
			}
			else if (jsonValue.equalsIgnoreCase("no"))
			{
				return false;
			}
			else
			{
				return null;
			}
		}

		int code = json.getAsInt();
		return code != 0 && (code == 1 ? true : null);
	}
}

package com.notenoughrunes;

import com.google.gson.Gson;
import com.google.inject.Provides;
import com.notenoughrunes.config.MenuLookupMode;
import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.ui.NERPanel;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Not Enough Runes",
	description = "Shows wiki-sourced information where items can be found and what they're used for",
	tags = {"recipe", "crafting", "sources", "Uses", "wiki", "ner"}
)
public class NotEnoughRunesPlugin extends Plugin
{

	public static final File NER_DATA_DIR = new File(RuneLite.RUNELITE_DIR, "not-enough-runes");

	@Inject
	private Client client;

	@Inject
	private NotEnoughRunesConfig config;


	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private Gson gson;

	@Inject
	private H2DataProvider dataProvider;

	@Getter(AccessLevel.PACKAGE)
	private NavigationButton navButton;

	@Getter(AccessLevel.PACKAGE)
	@Setter(AccessLevel.PACKAGE)
	private NERPanel nerPanel;

	@Override
	protected void startUp() throws Exception
	{
		if (!NER_DATA_DIR.exists())
		{
			NER_DATA_DIR.mkdirs();
			dataProvider.init(); // async
		}
		else
		{
			dataProvider.init(); // async
		}


		nerPanel = injector.getInstance(NERPanel.class);
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");

		navButton = NavigationButton.builder()
			.tooltip("Not Enough Runes")
			.icon(icon)
			.priority(5)
			.panel(nerPanel)
			.build();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown() throws Exception
	{
		nerPanel = null;
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onMenuOpened(final MenuOpened event)
	{
		final MenuEntry[] entries = event.getMenuEntries();
		for (int idx = entries.length - 1; idx >= 0; --idx)
		{
			final MenuEntry entry = entries[idx];
			final Widget w = entry.getWidget();

			boolean shouldAddInv = w != null && (WidgetUtil.componentToInterface(w.getId()) == InterfaceID.INVENTORY
					|| WidgetUtil.componentToInterface(w.getId()) == InterfaceID.BANK_INVENTORY)
				&& config.invLookupMode() != MenuLookupMode.DISABLED
					&& !(config.invLookupMode() == MenuLookupMode.SHIFT && !client.isKeyPressed(KeyCode.KC_SHIFT));

			boolean shouldAddBank = w != null && WidgetUtil.componentToInterface(w.getId()) == InterfaceID.BANK
				&& config.bankLookupMode() != MenuLookupMode.DISABLED
				&& !(config.bankLookupMode() == MenuLookupMode.SHIFT && !client.isKeyPressed(KeyCode.KC_SHIFT));

			if (w != null && (shouldAddInv || shouldAddBank)
				&& "Examine".equals(entry.getOption()) && entry.getIdentifier() == 10)
			{
				final int itemId = w.getItemId();
				client.createMenuEntry(idx)
					.setOption("NER Lookup")
					.setTarget(entry.getTarget())
					.setType(MenuAction.RUNELITE)
					.onClick(e ->
					{
						nerPanel.displayItemById(itemId);
						SwingUtilities.invokeLater(() -> clientToolbar.openPanel(navButton));

					});
			}
		}

	}

	@Provides
	NotEnoughRunesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NotEnoughRunesConfig.class);
	}
}

package com.notenoughrunes.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum MenuLookupMode
{
	DISABLED("Disabled"),
	RIGHT("Right click"),
	SHIFT("Shift-right click");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

package com.notenoughrunes;

import com.google.common.collect.ImmutableMap;
import com.notenoughrunes.types.NERDropSource;
import java.util.Map;
import lombok.experimental.UtilityClass;

@UtilityClass
public class RarityParser
{
	
	private final Map<String, Double> PRESET_RARITY_NAMES = ImmutableMap.<String, Double>builder()
		.put("Always", 1D)
		.put("Common", 1 / 16D)
		.put("Uncommon", 1 / 64D)
		.put("Rare", 1 / 256D)
		.put("Very rare", 1 / 1024D)
		.put("Random", 1 / 4096D)
		.put("Varies", 1 / 4096D)
		.build();
	
	public double calculateRarity(NERDropSource dropSource)
	{
		return calculateRarity(dropSource.getRarity());
	}
	
	public double calculateRarity(String rarityString)
	{
		if (PRESET_RARITY_NAMES.containsKey(rarityString))
		{
			return PRESET_RARITY_NAMES.get(rarityString);
		}
			
		try
		{
			String[] fractionComponents = rarityString.split("/");
			return Double.parseDouble(fractionComponents[0].trim().replace(",","")) / Double.parseDouble(fractionComponents[1].trim().replace(",",""));
		}
		catch (NumberFormatException | ArithmeticException | ArrayIndexOutOfBoundsException e)
		{
			return 1 / 65536D;
		}
	}
	
}

package com.notenoughrunes.ui;

import com.notenoughrunes.types.NERSpawnItem;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;

public class NERSpawnPanel extends JPanel
{
	
	private static final BufferedImage MEMBERS_ICON = ImageUtil.loadImageResource(NERSpawnPanel.class, "members.png");
	private static final BufferedImage F2P_ICON = ImageUtil.loadImageResource(NERSpawnPanel.class, "free_to_play.png");
	
	public NERSpawnPanel(NERSpawnItem spawn)
	{
		setMaximumSize(new Dimension(PluginPanel.PANEL_WIDTH, 200));
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setBorder(new EmptyBorder(7, 7, 6, 7));
		setLayout(new BorderLayout());

		JLabel membersLabel = new JLabel(new ImageIcon(spawn.isMembers() ? MEMBERS_ICON : F2P_ICON));
		membersLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 5));
		add(membersLabel, BorderLayout.WEST);
		JLabel location = new JLabel(spawn.getLocation());
		location.setPreferredSize(new Dimension(0, 20));
		location.setToolTipText(spawn.getLocation());
		add(location, BorderLayout.CENTER);
		// maybe this panel could have a link to show on the world map?
	}
	
}

package com.notenoughrunes.ui;

import com.notenoughrunes.types.NERShop;
import com.notenoughrunes.types.NERShopItem;
import static com.notenoughrunes.ui.NERPanel.MAX_ENTRIES;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import static java.awt.GridBagConstraints.BOTH;
import static java.awt.GridBagConstraints.LINE_END;
import static java.awt.GridBagConstraints.LINE_START;
import static java.awt.GridBagConstraints.NONE;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;

@Slf4j
public class NERShopsPanel extends JPanel
{

	private static final Insets NO_INSETS = new Insets(0, 0, 0, 0);

	public NERShopsPanel(List<NERShop> shops, NERItem nerItem, ItemManager itemManager, ClientThread clientThread, boolean isCurrency, NERPanel mainPanel)
	{

		String useName = nerItem.getInfoItem().getName().length() > nerItem.getInfoItem().getGroup().length()
			? nerItem.getInfoItem().getName()
			: nerItem.getInfoItem().getGroup();

		setMaximumSize(new Dimension(220, 80));
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
//		setBorder(BorderFactory.createLineBorder(ColorScheme.LIGHT_GRAY_COLOR, 1));

		int row = 0;
		int entries = 0;

		shopLoop:
		for (NERShop shop : shops)
		{
			List<NERShopItem> shopItems;
			shopItems = shop.getItems();

			for (NERShopItem shopItem : shopItems)
			{
				if (entries >= MAX_ENTRIES)
				{
					break shopLoop;
				}
				JPanel container = new JPanel(new BorderLayout());
				container.setBorder(new EmptyBorder(0, 0, 7, 0));
				JPanel shopPanel = new JPanel(new GridBagLayout());
				shopPanel.setBorder(new EmptyBorder(7, 7, 6, 7));
				shopPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

				JLabel shopName = new JLabel();
				shopName.setMaximumSize(new Dimension(0, 20));
				shopName.setPreferredSize(new Dimension(0, 20));
				shopName.setText(shop.getName());
				shopName.setToolTipText(shop.getName());

				if (shop.isMembers())
				{
					shopName.setForeground(new Color(209, 174, 59));
				}

				shopPanel.add(shopName, new GridBagConstraints(0, row, 1, 1, 1.0, 0.0, LINE_START, BOTH, new Insets(0, 4, 0, 0), 4, 4));
				int finalRow = row;
				clientThread.invokeLater(() ->
				{
					String sellPrice;
					if (shop.getSellMultiplier() != null)
					{
						if (isCurrency) {
							sellPrice = String.valueOf(itemManager.getItemComposition(
								itemManager.canonicalize(
									shopItem.getItemID()))
								.getPrice() * (Integer.parseInt(shop.getSellMultiplier()) / 1000));
						}
						else
						{
							sellPrice = String.valueOf(itemManager.getItemComposition(
								itemManager.canonicalize(
									nerItem.getInfoItem().getItemID()))
								.getPrice() * (Integer.parseInt(shop.getSellMultiplier())) / 1000);
						}
					}
					else
					{
						sellPrice = shopItem.getSellPrice();
					}

					if (shopItem.getCurrency().equals("Coins"))
					{
						sellPrice += "gp";
					}
					else
					{
						sellPrice += " " + shopItem.getCurrency();
					}
					String finalSellPrice = sellPrice;
					SwingUtilities.invokeLater(() ->
						shopPanel.add(new JLabel(finalSellPrice), new GridBagConstraints(1, finalRow, 1, 1, 0.1, 0.0, LINE_END, NONE, NO_INSETS, 4, 4)));
				});
				row++;

				if (isCurrency)
				{
					shopPanel.add(new JLabel(shopItem.getName()), new GridBagConstraints(0, row, 2, 1, 0.0, 0.0, LINE_END, NONE, NO_INSETS, 4, 4));
					row++;
				}

				JLabel location = new JLabel();
				location.setMaximumSize(new Dimension(0, 20));
				location.setPreferredSize(new Dimension(0, 20));
				location.setText(shop.getLocation());
				location.setToolTipText(shop.getLocation());
				shopPanel.add(location, new GridBagConstraints(0, row, 1, 1, 1.0, 0.0, LINE_START, BOTH, new Insets(0, 4, 0, 0), 4, 4));
				shopPanel.add(new JLabel("x" + shopItem.getStock()), new GridBagConstraints(1, row++, 1, 1, 0.1, 0.0, LINE_END, NONE, NO_INSETS, 4, 4));

				container.add(shopPanel);
				add(container);

				entries++;

//				JSeparator actionSeparator = new JSeparator(JSeparator.HORIZONTAL);
//				actionSeparator.setBackground(ColorScheme.LIGHT_GRAY_COLOR);
//				actionSeparator.setPreferredSize(new Dimension(1, 2));
////				add(actionSeparator, new GridBagConstraints(0, row++, 4, 1, 1.0, 0.0, CENTER, HORIZONTAL, NO_INSETS, 0, 0));
//				add(actionSeparator);

			}
		}
	}
}

package com.notenoughrunes.ui;

import com.google.common.base.Strings;
import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.db.queries.SearchItemsQuery;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.AsyncBufferedImage;
import org.apache.commons.text.similarity.LevenshteinDistance;

@Slf4j
class NERSearchResultsPanel extends JPanel
{
	private static final int MAX_RESULTS = 200;
	private static final String ERROR_PANEL = "ERROR_PANEL";
	private static final String RESULTS_PANEL = "RESULTS_PANEL";

	private final GridBagConstraints constraints = new GridBagConstraints();
	private final CardLayout cardLayout = new CardLayout();

	private final JPanel searchItemsPanel = new JPanel();
	private final JPanel centerPanel = new JPanel(cardLayout);
	private final PluginErrorPanel errorPanel = new PluginErrorPanel();

	private List<NERItem> results = new ArrayList<>();
	private final ClientThread clientThread;
	private final ItemManager itemManager;
	private final H2DataProvider dataProvider;
	private final NERPanel parentPanel;

	NERSearchResultsPanel(
		ClientThread clientThread,
		ItemManager itemManager,
		H2DataProvider dataProvider,
		NERPanel parentPanel
	)
	{
		this.clientThread = clientThread;
		this.itemManager = itemManager;
		this.dataProvider = dataProvider;
		this.parentPanel = parentPanel;
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARK_GRAY_COLOR);

		JPanel container = new JPanel();
		container.setLayout(new BorderLayout(5, 5));
		container.setBorder(new EmptyBorder(5, 2, 0, 2));
		container.setBackground(ColorScheme.DARK_GRAY_COLOR);

		searchItemsPanel.setLayout(new GridBagLayout());
		searchItemsPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.weightx = 1;
		constraints.gridx = 0;
		constraints.gridy = 0;

		/* This panel wraps the results panel and guarantees the scrolling behaviour */
		JPanel wrapper = new JPanel(new BorderLayout());
		wrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
		wrapper.add(searchItemsPanel, BorderLayout.NORTH);

		/*  The results wrapper, this scrolling panel wraps the results container */
		JScrollPane resultsWrapper = new JScrollPane(wrapper);
		resultsWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
		resultsWrapper.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
		resultsWrapper.getVerticalScrollBar().setBorder(new EmptyBorder(0, 5, 0, 0));
		resultsWrapper.setVisible(false);

		/* This panel wraps the error panel and limits its height */
		JPanel errorWrapper = new JPanel(new BorderLayout());
		errorWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
		errorWrapper.add(errorPanel, BorderLayout.NORTH);

		errorPanel.setContent(
			"Not Enough Runes Search",
			"Here you can search an item by its name to find its sources and uses"
		);

		centerPanel.add(resultsWrapper, RESULTS_PANEL);
		centerPanel.add(errorWrapper, ERROR_PANEL);

		cardLayout.show(centerPanel, ERROR_PANEL);

		container.add(centerPanel, BorderLayout.CENTER);

		add(container, BorderLayout.CENTER);
	}

	boolean updateSearch(IconTextField searchBar)
	{
		String lookup = searchBar.getText();

		if (Strings.isNullOrEmpty(lookup))
		{
			searchItemsPanel.removeAll();
			errorPanel.setContent(
				"Not Enough Runes Search",
				"Here you can search an item by its name to find its sources and uses"
			);
			cardLayout.show(centerPanel, ERROR_PANEL);
			searchBar.setIcon(IconTextField.Icon.SEARCH);
			SwingUtilities.invokeLater(searchItemsPanel::updateUI);
			return false;
		}

		searchItemsPanel.removeAll();
		searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		searchBar.setEditable(false);
		searchBar.setIcon(IconTextField.Icon.LOADING);
		return true;
	}

	void itemSearch(IconTextField searchBar)
	{
		if (!updateSearch(searchBar))
		{
			return;
		}

		String search = searchBar.getText();
		results.clear();

		this.dataProvider.executeMany(new SearchItemsQuery(search), searchResults ->
			this.clientThread.invokeLater(() ->
			{
				searchResults.forEach((itemInfo) ->
				{
					AsyncBufferedImage itemImage = this.itemManager.getImage(itemManager.canonicalize(itemInfo.getItemID()));
					results.add(new NERItem(itemImage, itemInfo));
				});

				if (results.isEmpty())
				{
					searchBar.setIcon(IconTextField.Icon.ERROR);
					errorPanel.setContent("No results found", "No items were found with that name, please try again.");
					cardLayout.show(centerPanel, ERROR_PANEL);
					searchBar.setEditable(true);
					return;
				}

				results = results.stream()
					.sorted(compareNameAndGroup(search))
					.collect(Collectors.toList());

				SwingUtilities.invokeLater(this::processResult);
				searchBar.setIcon(IconTextField.Icon.SEARCH);
			}));
	}

	void processResult()
	{

		cardLayout.show(centerPanel, RESULTS_PANEL);
		int index = 0;
		if (results.isEmpty())
		{
//			log.info("No results found");
			return;
		}
		for (NERItem nerItem : results)
		{
			if ((index + 1) > MAX_RESULTS)
			{
				break;
			}

			NERSearchItemPanel panel = new NERSearchItemPanel(nerItem, parentPanel);
			if (index++ > 0)
			{
				JPanel marginWrapper = new JPanel(new BorderLayout());
				marginWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
				marginWrapper.setBorder(new EmptyBorder(5, 0, 0, 0));
				marginWrapper.add(panel, BorderLayout.NORTH);
				searchItemsPanel.add(marginWrapper, constraints);
			}
			else
			{
				searchItemsPanel.add(panel, constraints);
			}
			searchItemsPanel.updateUI();

			constraints.gridy++;
		}
	}

	private Comparator<NERItem> compareNameAndGroup(String itemName)
	{
		return Comparator.comparing((NERItem item) -> new LevenshteinDistance().apply(item.getInfoItem().getName(), itemName))
			.thenComparing(item -> new LevenshteinDistance().apply(item.getInfoItem().getGroup(), itemName));

	}
}

package com.notenoughrunes.ui;

import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.db.queries.ItemByIDQuery;
import com.notenoughrunes.types.NERInfoItem;
import com.notenoughrunes.types.NERProductionMaterial;
import com.notenoughrunes.types.NERProductionRecipe;
import com.notenoughrunes.types.NERProductionSkill;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import static java.awt.GridBagConstraints.BOTH;
import static java.awt.GridBagConstraints.CENTER;
import static java.awt.GridBagConstraints.EAST;
import static java.awt.GridBagConstraints.LINE_END;
import static java.awt.GridBagConstraints.LINE_START;
import static java.awt.GridBagConstraints.NONE;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ImageUtil;

@Slf4j
public class NERRecipePanel extends JPanel
{

	private static final Map<String, BufferedImage> facilityImages = Stream.of(
		"Anvil",
		"Apothecary",
		"Banner easel",
		"Barbarian anvil",
		"Big compost bin",
		"Blast furnace",
		"Brewery",
		"Clay oven",
		"Compost bin",
		"Cooking range",
		"Cooking range (2018 Easter event)",
		"Crafting table 1",
		"Crafting table 2",
		"Crafting table 3",
		"Crafting table 4",
		"Dairy churn",
		"Dairy cow",
		"Demon lectern",
		"Eagle lectern",
		"Eodan",
		"Fancy Clothes Store",
		"Farming patch",
		"Furnace",
		"Loom",
		"Mahogany demon lectern",
		"Mahogany eagle lectern",
		"Metal press",
		"Oak lectern",
		"Pluming stand",
		"Pottery wheel",
		"Sandpit",
		"Sawmill",
		"Sbott",
		"Shield easel",
		"Singing bowl",
		"Spinning wheel",
		"Tannery",
		"Taxidermist",
		"Teak demon lectern",
		"Teak eagle lectern",
		"Thakkrad Sigmundson",
		"Water",
		"Whetstone",
		"Windmill",
		"Woodcutting stump",
		"Workbench"
	).collect(Collectors.toMap(
		Function.identity(),
		name ->
		{
			try
			{
				return ImageUtil.loadImageResource(NERRecipePanel.class, "recipe_facility_icons/" + name + ".png");
			}
			catch (Exception e)
			{
				return new BufferedImage(20, 20, BufferedImage.TYPE_INT_ARGB);
			}
		}
	));

	private static final Insets NO_INSETS = new Insets(0, 0, 0, 0);
	private final ItemManager itemManager;
	private final ClientThread clientThread;
	private final NERPanel mainPanel;
	private final H2DataProvider dataProvider;

	public NERRecipePanel(NERProductionRecipe recipe, ItemManager itemManager, ClientThread clientThread, NERPanel mainPanel, String useName, H2DataProvider dataProvider)
	{
		this.itemManager = itemManager;
		this.clientThread = clientThread;
		this.mainPanel = mainPanel;
		this.dataProvider = dataProvider;
		// client would be used for images

		setMaximumSize(new Dimension(PluginPanel.PANEL_WIDTH, 800));
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setLayout(new GridBagLayout());
		setBorder(new EmptyBorder(7, 7, 6, 7));
		int row = 0;

		if (recipe.getFacilities() != null)
		{
			JLabel facilityLabel = new JLabel(recipe.getFacilities());
			facilityLabel.setMaximumSize(new Dimension(0, 20));
			facilityLabel.setPreferredSize(new Dimension(0, 20));
			facilityLabel.setHorizontalAlignment(SwingConstants.CENTER);

			if (facilityImages.containsKey(recipe.getFacilities()))
			{
				facilityLabel.setIcon(new ImageIcon(facilityImages.get(recipe.getFacilities())));
			}

			add(facilityLabel, new GridBagConstraints(0, row++, 4, 1, 1.0, 0.0, CENTER, BOTH, NO_INSETS, 4, 4));
		}

		JPanel skillsPanel = new JPanel(new GridBagLayout());
		skillsPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		int skillsRow = 0;

		for (NERProductionSkill skill : recipe.getSkills())
		{
			String iconPath = "/skill_icons/" + skill.getName().toLowerCase() + ".png";

			skillsPanel.add(new JLabel(new ImageIcon(ImageUtil.loadImageResource(getClass(), iconPath))), new GridBagConstraints(0, skillsRow, 1, 1, 0.0, 0.0, CENTER, NONE, NO_INSETS, 4, 4));
			skillsPanel.add(new JLabel(skill.getName()), new GridBagConstraints(1, skillsRow, 1, 1, 1.0, 0.0, LINE_START, NONE, NO_INSETS, 4, 4));
			skillsPanel.add(new JLabel("<html><body style=\"text-align:right\">Lv" + skill.getLevel() + "</body></html>"), new GridBagConstraints(2, skillsRow, 1, 1, 0.2, 0.0, LINE_END, NONE, NO_INSETS, 4, 4));
			skillsPanel.add(new JLabel(skill.getExperience() + "xp"), new GridBagConstraints(3, skillsRow++, 1, 1, 0.0, 0.0, LINE_END, NONE, NO_INSETS, 4, 4));
		}

		add(skillsPanel, new GridBagConstraints(0, row++, 4, 1, 0.0, 0.0, LINE_START, BOTH, NO_INSETS, 4, 4));

		JLabel materialHeader = new JLabel("Materials");
		add(materialHeader, new GridBagConstraints(0, row++, 4, 1, 1.0, 0.0, CENTER, NONE, NO_INSETS, 4, 4));

		if (recipe.getTools() != null)
		{
			addTooltip(materialHeader, "Tools: " + recipe.getTools());
		}

		for (NERProductionMaterial material : recipe.getMaterials())
		{
			JPanel materialRow = new JPanel(new GridBagLayout());
			materialRow.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			JLabel materialLabel = new JLabel();
			setItemImage(materialLabel, material.getItemID());
			materialLabel.setText(material.getName());
			materialLabel.setToolTipText(material.getName());
			materialLabel.setMaximumSize(new Dimension(0, 30));
			materialLabel.setPreferredSize(new Dimension(0, 30));
			materialRow.add(materialLabel, new GridBagConstraints(0, 0, 3, 1, 1.0, 0.0, LINE_START, BOTH, NO_INSETS, 4, 4));

			materialRow.add(new JLabel("x" + material.getQuantity()), new GridBagConstraints(3, 0, 1, 1, 0.0, 0.0, EAST, NONE, new Insets(0, 8, 0, 0), 4, 4));

			addMouseAdapter(materialLabel, material.getItemID(), useName);

			add(materialRow, new GridBagConstraints(0, row++, 4, 1, 0.0, 0.0, CENTER, BOTH, NO_INSETS, 4, 4));
		}



		add(new JLabel("Output"), new GridBagConstraints(0, row++, 4, 1, 1.0, 0.0, CENTER, NONE, NO_INSETS, 4, 4));
		JLabel outputLabel = new JLabel();
		setItemImage(outputLabel, recipe.getOutputItemID());
		outputLabel.setText(recipe.getOutputItemName());
		outputLabel.setToolTipText(recipe.getOutputItemName());
		outputLabel.setMaximumSize(new Dimension(0, 20));
		outputLabel.setPreferredSize(new Dimension(0, 20));

		add(outputLabel, new GridBagConstraints(0, row, 3, 1, 1.0, 0.0, LINE_START, BOTH, NO_INSETS, 4, 4));

		addMouseAdapter(outputLabel, recipe.getOutputItemID(), useName);

		JLabel quantityLabel = new JLabel("x" + recipe.getOutputQuantity());
		add(quantityLabel, new GridBagConstraints(3, row, 1, 1, 0.0, 0.0, LINE_END, NONE, new Insets(0, 4, 0, 0), 4, 4));
		if (recipe.getOutputQuantityNote() != null)
		{
			quantityLabel.setText("<html><body style=\"border-bottom: 1px dotted #ffffff\">" + quantityLabel.getText() + "*");
			String tooltipText = recipe.getOutputQuantityNote().replaceAll("[\\[\\]]|<[^>]*>", "");
			quantityLabel.setToolTipText(String.format("<html><p width=\"%d\">%s</p></html>", 200, tooltipText));
		}
	}

	private void setItemImage(JLabel label, int itemId)
	{
		clientThread.invokeLater(() ->
		{
			AsyncBufferedImage itemImage = this.itemManager.getImage(itemManager.canonicalize(itemId));
			SwingUtilities.invokeLater(() -> label.setIcon(new ImageIcon(itemImage)));
		});
	}

	private void displayItem(NERInfoItem itemInfo)
	{
		clientThread.invokeLater(() -> {
			AsyncBufferedImage icon = this.itemManager.getImage(itemManager.canonicalize(itemInfo.getItemID()));
			NERItem nerItem = new NERItem(icon, itemInfo);

			SwingUtilities.invokeLater(() -> mainPanel.displayItem(nerItem));
		});

	}

	private void addTooltip(JLabel toUnderline, String tooltip)
	{
		// add underline to text
		Font f = toUnderline.getFont();
		Map<TextAttribute, Object> attributes = new HashMap<>(f.getAttributes());
		attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
		toUnderline.setFont(f.deriveFont(attributes));
		toUnderline.setText(toUnderline.getText());

		// create hover tooltip
		toUnderline.setToolTipText(tooltip);
	}

	private void addMouseAdapter(JLabel materialLabel, int itemID, String useName)
	{
		materialLabel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				dataProvider.executeSingle(new ItemByIDQuery(itemID), itemInfo ->
					SwingUtilities.invokeLater(() ->
					{
						if (itemInfo.getName().equals(useName) || itemInfo.getGroup().equals(useName)) {
							return;
						}
						displayItem(itemInfo);
					}));
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
		});
	}
}

package com.notenoughrunes.ui;

import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.types.NERInfoItem;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import static java.awt.GridBagConstraints.BOTH;
import static java.awt.GridBagConstraints.LINE_END;
import static java.awt.GridBagConstraints.LINE_START;
import static java.awt.GridBagConstraints.NONE;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.materialtabs.MaterialTab;
import net.runelite.client.ui.components.materialtabs.MaterialTabGroup;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.LinkBrowser;
import net.runelite.client.util.QuantityFormatter;

@Slf4j
class NERItemPanel extends JPanel
{
	private static final Dimension ICON_SIZE = new Dimension(38, 32);

	private static final BufferedImage WIKI_ICON_DESELECTED = ImageUtil.loadImageResource(NERItemPanel.class, "wiki_icon_deselected.png");
	private static final BufferedImage WIKI_ICON_SELECTED = ImageUtil.loadImageResource(NERItemPanel.class, "wiki_icon_selected.png");
	private static final BufferedImage GE_ICON = ImageUtil.loadImageResource(NERItemPanel.class, "ge_icon.png");
	private static final BufferedImage HA_ICON = ImageUtil.loadImageResource(NERItemPanel.class, "ha_icon.png");

	@Getter
	private final NERSourcesPanel sourcesPanel;

	@Getter
	private final NERUsesPanel usesPanel;
	public NERItem item;
	private final ClientThread clientThread;

	private final ItemManager itemManager;


	NERItemPanel(NERItem item, ItemManager itemManager, H2DataProvider dataProvider, ClientThread clientThread, NERPanel mainPanel)
	{
		this.item = item;
		this.sourcesPanel = new NERSourcesPanel(item, itemManager, dataProvider, clientThread, mainPanel);
		this.usesPanel = new NERUsesPanel(item, itemManager, dataProvider, clientThread, mainPanel);
		this.clientThread = clientThread;
		this.itemManager = itemManager;

		log.debug("Creating item panel: " + item.getInfoItem().getName());

		String useName = item.getInfoItem().getName().length() > item.getInfoItem().getGroup().length()
			? item.getInfoItem().getName()
			: item.getInfoItem().getGroup();

		setLayout(new BorderLayout());
		setBorder(new EmptyBorder(0, 0, 10, 0));
		setBackground(ColorScheme.DARK_GRAY_COLOR);

		JLabel itemIcon = new JLabel(new ImageIcon(item.getIcon()), SwingConstants.RIGHT);
		itemIcon.setPreferredSize(ICON_SIZE);

		JLabel wikiIcon = new JLabel(new ImageIcon(WIKI_ICON_DESELECTED));
		wikiIcon.setPreferredSize(new Dimension(40, 20));
		wikiIcon.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent mouseEvent)
			{
				LinkBrowser.browse(item.getInfoItem().getUrl());
			}

			@Override
			public void mouseEntered(MouseEvent mouseEvent)
			{
				wikiIcon.setIcon(new ImageIcon(WIKI_ICON_SELECTED));
			}

			@Override
			public void mouseExited(MouseEvent mouseEvent)
			{
				wikiIcon.setIcon(new ImageIcon(WIKI_ICON_DESELECTED));
			}
		});

		JPanel itemInfoRight = new JPanel(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1;
		JLabel itemNameLabel = new JLabel();
		itemNameLabel.setForeground(ColorScheme.BRAND_ORANGE);
		itemNameLabel.setHorizontalAlignment(JLabel.CENTER);
		Font nameFont = FontManager.getRunescapeBoldFont();
		Map<TextAttribute, Object> attributes = new HashMap<>(nameFont.getAttributes());
		attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
		itemNameLabel.setFont(FontManager.getRunescapeBoldFont().deriveFont(attributes).deriveFont(20f));
		itemNameLabel.setText(useName);
		itemInfoRight.add(itemNameLabel, gbc);
		gbc.gridy++;

		JLabel itemDesc = new JLabel();
		itemDesc.setForeground(Color.WHITE);
		itemDesc.setFont(FontManager.getRunescapeSmallFont());
		itemDesc.setHorizontalAlignment(JLabel.CENTER);
		itemDesc.setVerticalAlignment(JLabel.TOP);
		itemDesc.setText(String.format("<html><body style=\"text-justify: none; text-align: center; overflow: clip;\">%s</body></html>", item.getInfoItem().getExamineText()));
		itemInfoRight.add(itemDesc, gbc);
		gbc.gridy++;
		itemInfoRight.setBackground(getBackground());


		JLabel geIcon = new JLabel(new ImageIcon(GE_ICON));
		geIcon.setPreferredSize(new Dimension(15, 15));
		JLabel geLabel = new JLabel("GE Price:");
		geLabel.setForeground(Color.WHITE);
		geLabel.setHorizontalAlignment(JLabel.LEFT);
		JLabel gePriceLabel = new JLabel();
		gePriceLabel.setForeground(Color.WHITE);
		gePriceLabel.setHorizontalAlignment(JLabel.RIGHT);

		JPanel itemGEPriceInfo = new JPanel(new GridBagLayout());
		itemGEPriceInfo.setVisible(false);
		itemGEPriceInfo.add(geIcon, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, LINE_START, NONE, new Insets(0, 3, 0, 0), 4, 4));
		itemGEPriceInfo.add(geLabel, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, LINE_START, NONE, new Insets(0, 0, 0, 0), 4, 4));
		itemGEPriceInfo.add(gePriceLabel, new GridBagConstraints(2, 0, 1, 1, 1.0, 0.0, LINE_END, BOTH, new Insets(0, 0, 0, 0), 4, 4));

		JLabel haIcon = new JLabel(new ImageIcon(HA_ICON));
		haIcon.setPreferredSize(new Dimension(20, 18));
		JLabel haLabel = new JLabel("High Alch:");
		haLabel.setForeground(Color.WHITE);
		haLabel.setHorizontalAlignment(JLabel.LEFT);
		JLabel haPriceLabel = new JLabel();
		haPriceLabel.setForeground(Color.WHITE);
		haPriceLabel.setHorizontalAlignment(JLabel.RIGHT);

		JPanel itemHAPriceInfo = new JPanel(new GridBagLayout());
		itemHAPriceInfo.setVisible(false);
		itemHAPriceInfo.add(haIcon, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, LINE_START, NONE, new Insets(0, 0, 0, 0), 4, 4));
		itemHAPriceInfo.add(haLabel, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, LINE_START, NONE, new Insets(0, 0, 0, 0), 4, 4));
		itemHAPriceInfo.add(haPriceLabel, new GridBagConstraints(2, 0, 1, 1, 1.0, 0.0, LINE_END, BOTH, new Insets(0, 0, 0, 0), 4, 4));

		setItemPrices(item.getInfoItem(), itemGEPriceInfo, gePriceLabel, itemHAPriceInfo, haPriceLabel);

		JPanel itemInfo = new JPanel();
		itemInfo.setLayout(new GridBagLayout());
		itemInfo.setBorder(new EmptyBorder(5, 5, 0, 0));
		itemInfo.add(itemIcon, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, LINE_START, NONE, new Insets(0, 0, 0, 0), 4, 4));
		itemInfo.add(wikiIcon, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, LINE_START, NONE, new Insets(0, 0, 0, 0), 4, 10));
		itemInfo.add(itemInfoRight, new GridBagConstraints(1, 0, 1, 2, 1.0, 0.0, LINE_END, BOTH, new Insets(0, 0, 0, 0), 4, 4));
		itemInfo.add(itemGEPriceInfo, new GridBagConstraints(0, 2, 2, 1, 0.0, 0.0, LINE_START, BOTH, new Insets(0, 20, 0, 20), 4, 4));
		itemInfo.add(itemHAPriceInfo, new GridBagConstraints(0, 3, 2, 1, 0.0, 0.0, LINE_START, BOTH, new Insets(0, 20, 0, 20), 4, 4));


		JPanel tabDisplay = new JPanel();
		MaterialTabGroup tabGroup = new MaterialTabGroup(tabDisplay);
		MaterialTab sourcesTab = new MaterialTab("Sources", tabGroup, sourcesPanel);
		MaterialTab usesTab = new MaterialTab("Uses", tabGroup, usesPanel);

		tabGroup.setBorder(new EmptyBorder(0, 0, 0, 0));
		tabGroup.addTab(sourcesTab);
		tabGroup.addTab(usesTab);
		tabGroup.select(sourcesTab);

		JPanel tabContainer = new JPanel();
		tabContainer.setLayout(new BorderLayout());
		tabContainer.add(tabGroup, BorderLayout.NORTH);
		tabContainer.add(tabDisplay, BorderLayout.CENTER);

		add(itemInfo, BorderLayout.NORTH);
		add(tabContainer, BorderLayout.CENTER);
	}

	void setItemPrices(NERInfoItem infoItem, JPanel geRow, JLabel geLabel, JPanel haRow, JLabel haLabel)
	{
		clientThread.invokeLater(() ->
		{
			int gePrice = itemManager.getItemPrice(infoItem.getItemID());
			int haPrice = itemManager.getItemComposition(infoItem.getItemID()).getHaPrice();

			SwingUtilities.invokeLater(() ->
			{
				if (gePrice > 0)
				{
					geLabel.setText(QuantityFormatter.formatNumber(gePrice) + "gp");
					geRow.setVisible(true);
				}

				if (haPrice > 0)
				{
					haLabel.setText(QuantityFormatter.formatNumber(haPrice) + "gp");
					haRow.setVisible(true);
				}
			});
		});
	}
}

package com.notenoughrunes.ui;

import com.notenoughrunes.RarityParser;
import com.notenoughrunes.types.NERDropItem;
import com.notenoughrunes.types.NERDropSource;
import static com.notenoughrunes.ui.NERPanel.MAX_ENTRIES;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

@Slf4j
public class NERDropsPanel extends JPanel
{
	
	private static final DecimalFormat PERCENT_FORMAT = new DecimalFormat("#.##%");

	private static final String[] dropTypes = {
		"agility",
		"combat",
		"farming",
		"firemaking",
		"fishing",
		"hunter",
		"mining",
		"reward",
		"smithing",
		"woodcutting",
		"thieving",
		""
	};
	private static final Map<String, BufferedImage> dropTypeImages = Stream.of(
		dropTypes
	).collect(Collectors.toMap(
		Function.identity(),
		name ->
		{
			try
			{
				if (name.equals(""))
				{
					return ImageUtil.loadImageResource(NERDropsPanel.class, "drop_source_types/combat.png");
				}
				else
				{
					return ImageUtil.loadImageResource(NERDropsPanel.class, "drop_source_types/" + name + ".png");
				}
			}
			catch (Exception e)
			{
				return new BufferedImage(20, 20, BufferedImage.TYPE_INT_ARGB);
			}
		}
	));

	public NERDropsPanel(NERDropItem dropItem)
	{
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

		dropItem.getDropSources().stream()
			.sorted(Comparator.comparing(RarityParser::calculateRarity, Comparator.reverseOrder()))
			.limit(MAX_ENTRIES)
			.forEachOrdered(dropSource ->
			{
				JPanel container = new JPanel(new BorderLayout());
				container.setBorder(new EmptyBorder(0, 0, 7, 0));
				JPanel dropPanel = new JPanel(new GridBagLayout());
				dropPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
				dropPanel.setBorder(new EmptyBorder(7, 7, 6, 7));

				GridBagConstraints gbc = new GridBagConstraints();
				gbc.gridy = 0;
				gbc.gridx = 0;
				gbc.anchor = GridBagConstraints.LINE_START;
				gbc.gridwidth = 3;
				gbc.fill = GridBagConstraints.BOTH;
				gbc.weightx = 1.0;
				gbc.insets = new Insets(0, 4, 0, 4);
				JLabel dropName = new JLabel(dropSource.getSource());
				dropName.setPreferredSize(new Dimension(0, 20));
				dropPanel.add(dropName, gbc);

				gbc.gridx = 0;
				gbc.gridy++;
				gbc.gridwidth = 1;
				gbc.weightx = 0.0;
				gbc.fill = GridBagConstraints.NONE;
				dropPanel.add(new JLabel(buildQuantityString(dropSource)), gbc);

				JLabel dropType = new JLabel(dropSource.getDropLevel() + " " + dropSource.getDropType(), SwingConstants.CENTER);
				ImageIcon dropTypeIcon = new ImageIcon(new BufferedImage(1, 20, BufferedImage.TYPE_INT_ARGB));
				if (Arrays.asList(dropTypes).contains(dropSource.getDropType())) {
					dropTypeIcon = new ImageIcon(dropTypeImages.get(dropSource.getDropType()));
					dropType.setText(dropSource.getDropLevel());
				}
				dropType.setIcon(dropTypeIcon);
				dropType.setToolTipText(dropSource.getDropLevel());
				dropType.setPreferredSize(new Dimension(20, 20));
				gbc.gridx = 1;
				gbc.weightx = 1.0;
				gbc.anchor = GridBagConstraints.CENTER;
				gbc.fill = GridBagConstraints.BOTH;
				dropPanel.add(dropType, gbc);
				
				JLabel rarityLabel = new JLabel(dropSource.getRarity());
				if (dropSource.getRarity().contains("/"))
					addTooltip(rarityLabel, PERCENT_FORMAT.format(RarityParser.calculateRarity(dropSource)));
				gbc.gridx = 2;
				gbc.anchor = GridBagConstraints.LINE_END;
				gbc.fill = GridBagConstraints.NONE;
				gbc.weightx = 0.0;
				dropPanel.add(rarityLabel, gbc);

				gbc.gridx = 0;
				gbc.gridy++;
				gbc.gridwidth = 3;
				gbc.anchor = GridBagConstraints.CENTER;
				gbc.fill = GridBagConstraints.BOTH;
				gbc.insets = new Insets(4, 0, 4, 0);

//				JSeparator separator = new JSeparator(JSeparator.HORIZONTAL);
//				separator.setBackground(ColorScheme.LIGHT_GRAY_COLOR);
//				separator.setPreferredSize(new Dimension(1, 2));
//
//				dropPanel.add(separator, gbc);
//				gbc.gridy++;

				container.add(dropPanel);
				add(container);
			});
		
	}

	private String buildQuantityString(NERDropSource dropSource)
	{
		if (dropSource.getQuantityLow() == dropSource.getQuantityHigh())
		{
			return "x" + dropSource.getQuantityLow();
		}

		return "x" + dropSource.getQuantityLow() + "-" + dropSource.getQuantityHigh();
	}

	private void addTooltip(JLabel toUnderline, String tooltip)
	{
		// add underline to text
		Font f = toUnderline.getFont();
		Map<TextAttribute, Object> attributes = new HashMap<>(f.getAttributes());
		attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
		toUnderline.setFont(f.deriveFont(attributes));
		toUnderline.setText(toUnderline.getText());

		// create hover tooltip
		toUnderline.setToolTipText(tooltip);
	}

}

package com.notenoughrunes.ui;

import com.notenoughrunes.NotEnoughRunesPlugin;
import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.db.queries.ItemCurrencyQuery;
import com.notenoughrunes.db.queries.ItemProducesQuery;
import com.notenoughrunes.types.NERProductionRecipe;
import com.notenoughrunes.types.NERShop;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import lombok.AllArgsConstructor;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.SwingUtil;

class NERUsesPanel extends JPanel
{
	private static final ImageIcon SECTION_EXPAND_ICON;
	private static final ImageIcon SECTION_EXPAND_ICON_HOVER;
	private static final ImageIcon SECTION_RETRACT_ICON;
	private static final ImageIcon SECTION_RETRACT_ICON_HOVER;

	static final ImageIcon BACK_ICON;
	static final ImageIcon BACK_ICON_HOVER;

	private final NERItem nerItem;
	private final H2DataProvider dataProvider;
	private final ItemManager itemManager;
	private final ClientThread clientThread;
	private final String useName;
	private final NERPanel mainPanel;

	@AllArgsConstructor
	enum SectionType
	{
		RECIPES("Recipes", "Item recipe uses"),
		SHOPS("Shops", "Item shop uses");

		private final String sectionName;
		private final String sectionDesc;
	}

	static
	{
		final BufferedImage backIcon = ImageUtil.loadImageResource(NotEnoughRunesPlugin.class, "ui/config_back_icon.png");
		BACK_ICON = new ImageIcon(backIcon);
		BACK_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(backIcon, -100));

		BufferedImage sectionRetractIcon = ImageUtil.loadImageResource(NotEnoughRunesPlugin.class, "ui/arrow_right.png");
		sectionRetractIcon = ImageUtil.luminanceOffset(sectionRetractIcon, -121);
		SECTION_EXPAND_ICON = new ImageIcon(sectionRetractIcon);
		SECTION_EXPAND_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(sectionRetractIcon, -100));
		final BufferedImage sectionExpandIcon = ImageUtil.rotateImage(sectionRetractIcon, Math.PI / 2);
		SECTION_RETRACT_ICON = new ImageIcon(sectionExpandIcon);
		SECTION_RETRACT_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(sectionExpandIcon, -100));
	}

	NERUsesPanel(NERItem nerItem, ItemManager itemManager, H2DataProvider dataProvider, ClientThread clientThread, NERPanel mainPanel)
	{
		this.nerItem = nerItem;
		this.dataProvider = dataProvider;
		this.itemManager = itemManager;
		this.clientThread = clientThread;
		this.mainPanel = mainPanel;

		this.useName = nerItem.getInfoItem().getName().length() > nerItem.getInfoItem().getGroup().length()
			? nerItem.getInfoItem().getName()
			: nerItem.getInfoItem().getGroup();

		setLayout(new BorderLayout());

		dataProvider.executeMany(new ItemProducesQuery(nerItem.getInfoItem().getItemID()), recipes ->
			dataProvider.executeMany(new ItemCurrencyQuery(useName), shops ->
				SwingUtilities.invokeLater(() ->
					buildPanel(recipes, shops))));
	}

	private void buildPanel(List<NERProductionRecipe> recipes, List<NERShop> shops)
	{
		GridBagConstraints containerGbc = new GridBagConstraints(
			0,
			0,
			1,
			1,
			1.0,
			1.0,
			GridBagConstraints.LINE_START,
			GridBagConstraints.BOTH,
			new Insets(0, 0, 0, 0),
			0,
			0
		);
		JPanel recipeSection = createSection(SectionType.RECIPES, recipes, shops);
		JPanel container = new JPanel(new GridBagLayout());
		container.add(recipeSection, containerGbc);
		containerGbc.gridy++;
		JPanel shopsSection = createSection(SectionType.SHOPS, recipes, shops);
		container.add(shopsSection, containerGbc);
		containerGbc.gridy++;

		JPanel wrapper = new JPanel(new BorderLayout());

		wrapper.setMaximumSize(new Dimension(220, Integer.MAX_VALUE));
		wrapper.add(container, BorderLayout.NORTH);

		JScrollPane scrollWrapper = new JScrollPane(wrapper);
		scrollWrapper.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
		scrollWrapper.getVerticalScrollBar().setBorder(new EmptyBorder(0, 5, 0, 0));
		scrollWrapper.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH, 1000));
		scrollWrapper.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		add(scrollWrapper, BorderLayout.CENTER);
	}

	private JPanel createSection(SectionType sectionType, List<NERProductionRecipe> recipes, List<NERShop> shops)
	{
		ArrayList<JPanel> sectionItems = new ArrayList<>();
		switch (sectionType)
		{
			case RECIPES:
				recipes.forEach((recipe) ->
					sectionItems.add(new NERRecipePanel(recipe, itemManager, clientThread, mainPanel, useName, dataProvider)));
				break;

			case SHOPS:
				if (!shops.isEmpty())
				{
					sectionItems.add(new NERShopsPanel(shops, nerItem, itemManager, clientThread, true, mainPanel));
				}
				break;
		}

		if (sectionItems.isEmpty())
		{
			return new JPanel();
		}

		final JPanel section = new JPanel();
		section.setLayout(new BoxLayout(section, BoxLayout.Y_AXIS));
		section.setMinimumSize(new Dimension(210, 0));
		section.setMaximumSize(new Dimension(220, 0));


		final JPanel sectionHeader = new JPanel();
		sectionHeader.setLayout(new BorderLayout());
		sectionHeader.setMinimumSize(new Dimension(220, 0));
		// For whatever reason, the header extends out by a single pixel when closed. Adding a single pixel of
		// border on the right only affects the width when closed, fixing the issue.
		sectionHeader.setBorder(new CompoundBorder(
			new MatteBorder(0, 0, 1, 0, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(0, 0, 3, 1)
		));
		section.add(sectionHeader, BorderLayout.NORTH);

		final JButton sectionToggle = new JButton(SECTION_EXPAND_ICON);
		sectionToggle.setRolloverIcon(SECTION_EXPAND_ICON_HOVER);
		sectionToggle.setPreferredSize(new Dimension(18, 0));
		sectionToggle.setBorder(new EmptyBorder(0, 0, 0, 5));
		sectionToggle.setToolTipText("Expand");
		SwingUtil.removeButtonDecorations(sectionToggle);
		sectionHeader.add(sectionToggle, BorderLayout.WEST);

		final JLabel sectionName = new JLabel(sectionType.sectionName);
		sectionName.setForeground(ColorScheme.BRAND_ORANGE);
		sectionName.setFont(FontManager.getRunescapeBoldFont());
		sectionName.setToolTipText(sectionType.sectionDesc);
		sectionHeader.add(sectionName, BorderLayout.CENTER);

		final JPanel sectionContents = new JPanel();
		sectionContents.setLayout(new DynamicGridLayout(0, 1, 0, 10));
		sectionContents.setMinimumSize(new Dimension(220, 0));
		sectionContents.setBorder(new CompoundBorder(
			new MatteBorder(0, 0, 1, 0, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(PluginPanel.BORDER_OFFSET, 0, PluginPanel.BORDER_OFFSET, 0)
		));
		sectionContents.setVisible(false);
		section.add(sectionContents, BorderLayout.SOUTH);

		final MouseAdapter sectionAdapter = new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				toggleSection(sectionToggle, sectionContents);
			}
		};
		sectionToggle.addActionListener(actionEvent -> toggleSection(sectionToggle, sectionContents));
		sectionName.addMouseListener(sectionAdapter);
		sectionHeader.addMouseListener(sectionAdapter);

		sectionItems.forEach(sectionContents::add);

		return section;
	}

	private void toggleSection(JButton button, JPanel contents)
	{
		boolean newState = !contents.isVisible();
		contents.setVisible(newState);
		button.setIcon(newState ? SECTION_RETRACT_ICON : SECTION_EXPAND_ICON);
		button.setRolloverIcon(newState ? SECTION_RETRACT_ICON_HOVER : SECTION_EXPAND_ICON_HOVER);
		button.setToolTipText(newState ? "Retract" : "Expand");
		SwingUtilities.invokeLater(contents::revalidate);
	}
}

package com.notenoughrunes.ui;

import com.notenoughrunes.NotEnoughRunesPlugin;
import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.db.queries.ItemDropSourcesQuery;
import com.notenoughrunes.db.queries.ItemProducedByQuery;
import com.notenoughrunes.db.queries.ItemSoldAtQuery;
import com.notenoughrunes.db.queries.ItemSpawnQuery;
import com.notenoughrunes.types.NERDropItem;
import com.notenoughrunes.types.NERDropSource;
import com.notenoughrunes.types.NERProductionRecipe;
import com.notenoughrunes.types.NERShop;
import com.notenoughrunes.types.NERSpawnItem;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.SwingUtil;

@Slf4j
class NERSourcesPanel extends JPanel
{
	private static final ImageIcon SECTION_EXPAND_ICON;
	private static final ImageIcon SECTION_EXPAND_ICON_HOVER;
	private static final ImageIcon SECTION_RETRACT_ICON;
	private static final ImageIcon SECTION_RETRACT_ICON_HOVER;

	static final ImageIcon BACK_ICON;
	static final ImageIcon BACK_ICON_HOVER;

	private final NERItem nerItem;
	private final H2DataProvider dataProvider;
	private final ItemManager itemManager;
	private final ClientThread clientThread;
	private final String useName;
	private final NERPanel mainPanel;


	@AllArgsConstructor
	enum SectionType
	{
		RECIPES("Recipes", "Item recipes"),
		DROPS("Drops", "Item drop sources"),
		SHOPS("Shops", "Item shop sources"),
		SPAWNS("Spawns", "Item world spawns");

		private final String sectionName;
		private final String sectionDesc;
	}

	static
	{
		final BufferedImage backIcon = ImageUtil.loadImageResource(NotEnoughRunesPlugin.class, "ui/config_back_icon.png");
		BACK_ICON = new ImageIcon(backIcon);
		BACK_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(backIcon, -100));

		BufferedImage sectionRetractIcon = ImageUtil.loadImageResource(NotEnoughRunesPlugin.class, "ui/arrow_right.png");
		sectionRetractIcon = ImageUtil.luminanceOffset(sectionRetractIcon, -121);
		SECTION_EXPAND_ICON = new ImageIcon(sectionRetractIcon);
		SECTION_EXPAND_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(sectionRetractIcon, -100));
		final BufferedImage sectionExpandIcon = ImageUtil.rotateImage(sectionRetractIcon, Math.PI / 2);
		SECTION_RETRACT_ICON = new ImageIcon(sectionExpandIcon);
		SECTION_RETRACT_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(sectionExpandIcon, -100));
	}

	NERSourcesPanel(NERItem nerItem, ItemManager itemManager, H2DataProvider dataProvider, ClientThread clientThread, NERPanel mainPanel)
	{
		this.nerItem = nerItem;
		this.dataProvider = dataProvider;
		this.itemManager = itemManager;
		this.clientThread = clientThread;
		this.mainPanel = mainPanel;

		this.useName = nerItem.getInfoItem().getName().length() > nerItem.getInfoItem().getGroup().length()
			? nerItem.getInfoItem().getName()
			: nerItem.getInfoItem().getGroup();

		setLayout(new BorderLayout());

		dataProvider.executeMany(new ItemProducedByQuery(nerItem.getInfoItem().getItemID()), recipes ->
			dataProvider.executeMany(new ItemDropSourcesQuery(useName), dropSources ->
				dataProvider.executeMany(new ItemSoldAtQuery(nerItem.getInfoItem().getItemID()), shops ->
					dataProvider.executeMany(new ItemSpawnQuery(nerItem.getInfoItem().getName(), nerItem.getInfoItem().getGroup()), spawns ->
						SwingUtilities.invokeLater(() ->
							buildPanel(recipes, dropSources, shops, spawns))))));
	}

	private void buildPanel(List<NERProductionRecipe> recipes, List<NERDropSource> dropSources, List<NERShop> shops, List<NERSpawnItem> spawns)
	{
		GridBagConstraints containerGbc = new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.LINE_START, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0);
		JPanel recipeSection = createSection(SectionType.RECIPES, recipes, dropSources, shops, spawns);
		JPanel container = new JPanel(new GridBagLayout());
		container.add(recipeSection, containerGbc);
		containerGbc.gridy++;
		JPanel dropsSection = createSection(SectionType.DROPS, recipes, dropSources, shops, spawns);
		container.add(dropsSection, containerGbc);
		containerGbc.gridy++;
		JPanel shopsSection = createSection(SectionType.SHOPS, recipes, dropSources, shops, spawns);
		container.add(shopsSection, containerGbc);
		containerGbc.gridy++;
		JPanel spawnsSection = createSection(SectionType.SPAWNS, recipes, dropSources, shops, spawns);
		container.add(spawnsSection, containerGbc);
		containerGbc.gridy++;


		JPanel wrapper = new JPanel(new BorderLayout());

		wrapper.setMaximumSize(new Dimension(220, Integer.MAX_VALUE));
		wrapper.add(container, BorderLayout.NORTH);

		JScrollPane scrollWrapper = new JScrollPane(wrapper);
		scrollWrapper.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
		scrollWrapper.getVerticalScrollBar().setBorder(new EmptyBorder(0, 5, 0, 0));
		scrollWrapper.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH, 1000));
		scrollWrapper.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		add(scrollWrapper, BorderLayout.CENTER);
		revalidate();
	}

	private JPanel createSection(SectionType sectionType, List<NERProductionRecipe> recipes, List<NERDropSource> dropSources, List<NERShop> shops, List<NERSpawnItem> spawns)
	{
		ArrayList<JPanel> sectionItems = new ArrayList<>();
		switch (sectionType)
		{
			case RECIPES:
				recipes.forEach((recipe) ->
						sectionItems.add(new NERRecipePanel(recipe, itemManager, clientThread, mainPanel, useName, dataProvider)));
				break;

			case DROPS:
				if (!dropSources.isEmpty()) {
					sectionItems.add(new NERDropsPanel(new NERDropItem(useName, dropSources)));
				}
				break;

			case SHOPS:
				if (!shops.isEmpty()) {
					sectionItems.add(new NERShopsPanel(shops, nerItem, itemManager, clientThread, false, mainPanel));
				}
				break;

			case SPAWNS:
				spawns.forEach((spawnItem) ->
						sectionItems.add(new NERSpawnPanel(spawnItem)));
//					.limit(MAX_ENTRIES)

				break;
		}

		if (sectionItems.isEmpty())
		{
			JPanel emptyPanel = new JPanel();
			emptyPanel.setMinimumSize(new Dimension(0, 0));
			emptyPanel.setMaximumSize(new Dimension(0, 0));
			emptyPanel.setPreferredSize(new Dimension(0, 0));
			return emptyPanel;
		}

		final JPanel section = new JPanel();
		section.setLayout(new BoxLayout(section, BoxLayout.Y_AXIS));
		section.setMinimumSize(new Dimension(210, 0));
		section.setMaximumSize(new Dimension(220, 0));


		final JPanel sectionHeader = new JPanel();
		sectionHeader.setLayout(new BorderLayout());
		sectionHeader.setMinimumSize(new Dimension(220, 0));
		// For whatever reason, the header extends out by a single pixel when closed. Adding a single pixel of
		// border on the right only affects the width when closed, fixing the issue.
		sectionHeader.setBorder(new CompoundBorder(
			new MatteBorder(0, 0, 1, 0, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(0, 0, 3, 1)));
		section.add(sectionHeader, BorderLayout.NORTH);

		final JButton sectionToggle = new JButton(SECTION_EXPAND_ICON);
		sectionToggle.setRolloverIcon(SECTION_EXPAND_ICON_HOVER);
		sectionToggle.setPreferredSize(new Dimension(18, 0));
		sectionToggle.setBorder(new EmptyBorder(0, 0, 0, 5));
		sectionToggle.setToolTipText("Expand");
		SwingUtil.removeButtonDecorations(sectionToggle);
		sectionHeader.add(sectionToggle, BorderLayout.WEST);

		final JLabel sectionName = new JLabel(sectionType.sectionName);
		sectionName.setForeground(ColorScheme.BRAND_ORANGE);
		sectionName.setFont(FontManager.getRunescapeBoldFont());
		sectionName.setToolTipText(sectionType.sectionDesc);
		sectionHeader.add(sectionName, BorderLayout.CENTER);

		final JPanel sectionContents = new JPanel();
		sectionContents.setLayout(new DynamicGridLayout(0, 1, 0, 10));
		sectionContents.setMinimumSize(new Dimension(220, 0));
		sectionContents.setBorder(new CompoundBorder(
			new MatteBorder(0, 0, 1, 0, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(PluginPanel.BORDER_OFFSET, 0, PluginPanel.BORDER_OFFSET, 0)));
		sectionContents.setVisible(false);
		section.add(sectionContents, BorderLayout.SOUTH);

		final MouseAdapter sectionAdapter = new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				toggleSection(sectionToggle, sectionContents);
			}
		};
		sectionToggle.addActionListener(actionEvent -> toggleSection(sectionToggle, sectionContents));
		sectionName.addMouseListener(sectionAdapter);
		sectionHeader.addMouseListener(sectionAdapter);

		sectionItems.forEach(sectionContents::add);

		return section;
	}

	private void toggleSection(JButton button, JPanel contents)
	{
		boolean newState = !contents.isVisible();
		contents.setVisible(newState);
		button.setIcon(newState ? SECTION_RETRACT_ICON : SECTION_EXPAND_ICON);
		button.setRolloverIcon(newState ? SECTION_RETRACT_ICON_HOVER : SECTION_EXPAND_ICON_HOVER);
		button.setToolTipText(newState ? "Retract" : "Expand");
		SwingUtilities.invokeLater(contents::revalidate);
	}
}

package com.notenoughrunes.ui;

import com.google.common.base.Strings;
import com.notenoughrunes.NotEnoughRunesPlugin;
import com.notenoughrunes.db.H2DataProvider;
import com.notenoughrunes.db.queries.ItemByIDQuery;
import com.notenoughrunes.types.NERInfoItem;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.concurrent.ScheduledExecutorService;
import javax.inject.Inject;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.util.AsyncBufferedImage;

@Slf4j
public class NERPanel extends PluginPanel
{
	private final IconTextField searchBar = new IconTextField();
	private final ClientThread clientThread;
	private final ItemManager itemManager;
	private final H2DataProvider dataProvider;

	public final static int MAX_ENTRIES = 100;

	private NERItemPanel itemPanel;
//	private NERItemPanel prevItemPanel;

	private JPanel currentPanel;

	@Getter
	private final NERSearchResultsPanel searchResultsPanel;

	@Inject
	private NERPanel(
		NotEnoughRunesPlugin plugin,
		ClientThread clientThread,
		ItemManager itemManager,
		H2DataProvider dataProvider,
		ScheduledExecutorService executor
	)
	{
		super(false);
		this.searchResultsPanel = new NERSearchResultsPanel(clientThread, itemManager, dataProvider, this);
		this.clientThread = clientThread;
		this.itemManager = itemManager;
		this.dataProvider = dataProvider;

		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setBorder(new EmptyBorder(5, 5, 5, 5));

		searchBar.setIcon(IconTextField.Icon.SEARCH);
		searchBar.setPreferredSize(new Dimension(100, 30));
		searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
		searchBar.addActionListener(e -> executor.execute(this::itemSearch));
		searchBar.addClearListener(this::updateSearch);

		add(searchBar, BorderLayout.NORTH);
		add(searchResultsPanel);
		currentPanel = searchResultsPanel;
	}

	private void updateSearch()
	{
		searchResultsPanel.updateSearch(searchBar);

//		if (prevItemPanel != null)
//		{
//			log.info("previous item exists");
//			SwingUtilities.invokeLater(() ->
//			{
//				itemPanel = new NERItemPanel(prevItemPanel.item, itemManager, nerData, clientThread, this);
//				remove(searchResultsPanel);
//				add(itemPanel, BorderLayout.CENTER);
//				this.updateUI();
//				prevItemPanel = null;
//			});
//
//		}
	}

	private void itemSearch()
	{
		if (Strings.isNullOrEmpty(searchBar.getText()))
		{
			updateSearch();
			return;
		}

		if (itemPanel != null)
		{
			remove(itemPanel);
			SwingUtilities.invokeLater(() ->
			{
//				prevItemPanel = new NERItemPanel(itemPanel.item, itemManager, nerData, clientThread, this);
				this.updateUI();
				itemPanel = null;
			});
		}
		currentPanel = searchResultsPanel;
		add(searchResultsPanel);
		searchResultsPanel.itemSearch(searchBar);
		searchBar.setEditable(true);
	}

	void displayItem(NERItem item)
	{
		itemPanel = new NERItemPanel(item, itemManager, dataProvider, clientThread, this);
		remove(currentPanel);
		currentPanel = itemPanel;
		add(itemPanel, BorderLayout.CENTER);
		updateUI();
	}

	public void displayItemById(int rawItemId)
	{
		clientThread.invokeLater(() ->
		{
			int itemId = itemManager.canonicalize(rawItemId);
			dataProvider.executeSingle(new ItemByIDQuery(itemId), this::getNerItem);
		});
	}

	void getNerItem(NERInfoItem itemInfo)
	{
		clientThread.invokeLater(() ->
		{
			AsyncBufferedImage icon = itemManager.getImage(itemManager.canonicalize(itemInfo.getItemID()));
			NERItem nerItem = new NERItem(icon, itemInfo);

			SwingUtilities.invokeLater(() -> displayItem(nerItem));
		});
	}

//	public NERInfoItem getItemByNameAndVersion(String itemName, String version)
//	{
//		List<NERInfoItem> matchedItems = dataProvider.executeMany(new WideSearchItemsQuery(itemName));
//
//		return matchedItems.stream()
//			.min(compareNameAndGroup(itemName, version))
//			.orElse(new NERInfoItem(0, "", "", "", "", "", false, false));
//	}
//
//	private static Comparator<NERInfoItem> compareNameAndGroup(String itemName, String version)
//	{
//		return Comparator.comparing((NERInfoItem item) -> new LevenshteinDistance().apply(item.getName(), itemName))
//			.thenComparing(item -> new LevenshteinDistance().apply(item.getGroup(), itemName))
//			.thenComparing(item -> new LevenshteinDistance().apply(item.getVersion() != null ? item.getVersion() : "", version != null ? version : ""));
//
//	}
}

package com.notenoughrunes.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;

@Slf4j
class NERSearchItemPanel extends JPanel
{
	private static final Dimension ICON_SIZE = new Dimension(32, 32);

	NERSearchItemPanel(NERItem item, NERPanel mainPanel)
	{
		BorderLayout layout = new BorderLayout();
		layout.setHgap(5);
		setLayout(layout);
		setToolTipText(item.getInfoItem().getGroup() + (item.getInfoItem().getVersion() != null && !item.getInfoItem().getVersion().isEmpty()  ? (" - " + item.getInfoItem().getVersion()) : ""));
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		Color background = getBackground();
		List<JPanel> panels = new ArrayList<>();
		panels.add(this);

		MouseAdapter itemPanelMouseListener = new MouseAdapter()
		{
			@Override
			public void mouseEntered(MouseEvent e)
			{
				for (JPanel panel : panels)
				{
					matchComponentBackground(panel, ColorScheme.DARK_GRAY_HOVER_COLOR);
				}
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				for (JPanel panel : panels)
				{
					matchComponentBackground(panel, background);
				}
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}

			@Override
			public void mouseClicked(MouseEvent e)
			{
//				log.info("Clicked " + item.getInfoItem().getName());
				mainPanel.displayItem(item);
			}

		};

		addMouseListener(itemPanelMouseListener);

		setBorder(new EmptyBorder(5, 5, 5, 0));

		JLabel itemIcon = new JLabel();
		itemIcon.setPreferredSize(ICON_SIZE);
		if (item.getIcon() != null)
		{
			item.getIcon().addTo(itemIcon);
		}
		add(itemIcon, BorderLayout.LINE_START);

		// Item details panel
		JPanel rightPanel = new JPanel(new GridLayout(1, 1));
		panels.add(rightPanel);
		rightPanel.setBackground(background);

		JLabel itemName = new JLabel();
		itemName.setForeground(Color.WHITE);
		itemName.setMaximumSize(new Dimension(0, 0));
		itemName.setPreferredSize(new Dimension(0, 0));
		itemName.setText(item.getInfoItem().getName());
		rightPanel.add(itemName);

		add(rightPanel, BorderLayout.CENTER);
	}

	private void matchComponentBackground(JPanel panel, Color color)
	{
		panel.setBackground(color);
		for (Component c : panel.getComponents())
		{
			c.setBackground(color);
		}
	}
}

package com.notenoughrunes.ui;

import com.notenoughrunes.types.NERInfoItem;
import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.client.util.AsyncBufferedImage;

@Data
@AllArgsConstructor
class NERItem
{
	private AsyncBufferedImage icon;

	private final NERInfoItem infoItem;
}

