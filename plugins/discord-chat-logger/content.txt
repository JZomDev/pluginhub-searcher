package com.discordchatlogger;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DiscordChatLoggerPlugin.class);
		RuneLite.main(args);
	}
}
package com.discordchatlogger;

import com.google.common.base.Strings;
import com.google.inject.Provides;

import java.io.IOException;

import net.runelite.api.*;

import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.DrawManager;

import static net.runelite.http.api.RuneLiteAPI.GSON;

import net.runelite.client.util.Text;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.HttpUrl;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;


@Slf4j
@PluginDescriptor(
        name = "Discord Chat Logger"
)
public class DiscordChatLoggerPlugin extends Plugin {
    @Inject
    private DiscordChatLoggerConfig config;
    @Inject
    private ItemManager itemManager;
    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private Client client;


    @Override
    protected void startUp()
    {
    }

    @Override
    protected void shutDown()
    {
    }

    @Provides
    DiscordChatLoggerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(DiscordChatLoggerConfig.class);
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE || chatMessage.getType() == ChatMessageType.SPAM) {
            return;
        }
        String sender = chatMessage.getName().replaceAll("\\<.*?>", "").replaceAll("[^0-9a-zA-Z ]+", " ");
        String receiver;
        String inputMessage = chatMessage.getMessage();
        String outputMessage = Text.removeTags(inputMessage);
        if(chatMessage.getType() == ChatMessageType.PRIVATECHATOUT || chatMessage.getType() == ChatMessageType.PRIVATECHAT) {
            if (config.usePrivate()) {
                if (chatMessage.getType() == ChatMessageType.PRIVATECHATOUT && config.logSelf()){
                    receiver = sender;
                    sender = getPlayerName();
                    processPrivate(outputMessage,sender,receiver);
                }
                if (chatMessage.getType() == ChatMessageType.PRIVATECHAT && config.logOthers()){
                    receiver = getPlayerName();
                    processPrivate(outputMessage,sender,receiver);
                }
            }
        }
        if(chatMessage.getType() == ChatMessageType.CLAN_GIM_CHAT){
            String groupName = chatMessage.getSender().replaceAll("\\<.*?>", "").replaceAll("[^0-9a-zA-Z ]+", " ");
            if (config.useGroup()){
                if((sender.equals(getPlayerName()) && config.logSelf()) || (!sender.equals(getPlayerName()) && config.logOthers())) {
                    processGroup(outputMessage, sender, groupName);
                }
            }
        }
        if(chatMessage.getType() == ChatMessageType.FRIENDSCHAT){
            String friendsName = chatMessage.getSender().replaceAll("\\<.*?>", "").replaceAll("[^0-9a-zA-Z ]+", " ");
            if (config.usefriendsChat()){
                if((sender.equals(getPlayerName()) && config.logSelf()) || (!sender.equals(getPlayerName()) && config.logOthers())) {
                    processFriendsChat(outputMessage, sender, friendsName);
                }
            }
        }
    }

    private String getPlayerName()
    {
        return client.getLocalPlayer().getName();
    }

    private void processPrivate(String outputText,String senderName, String receiverName){
        WebhookBody webhookBody = new WebhookBody();
        StringBuilder stringBuilder = new StringBuilder();
        if(config.includeOtherUsername()) {
            if (senderName.equals(getPlayerName())) {
                stringBuilder.append("To **").append(receiverName).append("**").append(" : ");
            }
            if (receiverName.equals(getPlayerName())) {
                stringBuilder.append("From **").append(senderName).append("**").append(" : ");
            }
        }
        stringBuilder.append(outputText);
        webhookBody.setContent(stringBuilder.toString());
        sendWebhookPrivate(webhookBody);
    }

    private void sendWebhookPrivate(WebhookBody webhookBody)
    {
        String configUrl = config.webhookPrivate();
        if (Strings.isNullOrEmpty(configUrl))
        {
            return;
        }

        HttpUrl url = HttpUrl.parse(configUrl);
        MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("payload_json", GSON.toJson(webhookBody));

        buildRequestAndSend(url, requestBodyBuilder);
    }

    private void processGroup(String outputText,String senderName, String groupName){
        WebhookBody webhookBody = new WebhookBody();
        StringBuilder stringBuilder = new StringBuilder();
        if (config.useGroupName())
        {
            stringBuilder.append("**[").append(groupName).append("]** ");
        }
        if ((senderName.equals(getPlayerName()) && config.includeUsername()) || (!senderName.equals(getPlayerName()) && config.includeOtherUsername()))
        {
            stringBuilder.append("**").append(senderName).append("**").append(" : ");
        }
        stringBuilder.append(outputText);
        webhookBody.setContent(stringBuilder.toString());
        sendWebhookGroup(webhookBody);
    }

    private void sendWebhookGroup(WebhookBody webhookBody)
    {
        String configUrl = config.webhookGroup();
        if (Strings.isNullOrEmpty(configUrl))
        {
            return;
        }

        HttpUrl url = HttpUrl.parse(configUrl);
        MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("payload_json", GSON.toJson(webhookBody));

        buildRequestAndSend(url, requestBodyBuilder);
    }

    private void processFriendsChat(String outputText,String senderName, String friendsChatName){
        WebhookBody webhookBody = new WebhookBody();
        StringBuilder stringBuilder = new StringBuilder();
        if (config.usefriendsChat())
        {
            stringBuilder.append("**[").append(friendsChatName).append("]** ");
        }
        if ((senderName.equals(getPlayerName()) && config.includeUsername()) || (!senderName.equals(getPlayerName()) && config.includeOtherUsername()))
        {
            stringBuilder.append("**").append(senderName).append("**").append(" : ");
        }
        stringBuilder.append(outputText);
        webhookBody.setContent(stringBuilder.toString());
        sendWebhookFriends(webhookBody);
    }

    private void sendWebhookFriends(WebhookBody webhookBody)
    {
        String configUrl = config.webhookFriendsChat();
        if (Strings.isNullOrEmpty(configUrl))
        {
            return;
        }

        HttpUrl url = HttpUrl.parse(configUrl);
        MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("payload_json", GSON.toJson(webhookBody));

        buildRequestAndSend(url, requestBodyBuilder);
    }

    private void buildRequestAndSend(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
    {
        RequestBody requestBody = requestBodyBuilder.build();
        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .build();
        sendRequest(request);
    }

    private void sendRequest(Request request)
    {
        okHttpClient.newCall(request).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                log.debug("Error submitting webhook", e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException
            {
                response.close();
            }
        });
    }
}
package com.discordchatlogger;

import java.util.ArrayList;
import java.util.List;
import lombok.Data;

@Data
class WebhookBody
{
    private String content;
    private List<Embed> embeds = new ArrayList<>();

    @Data
    static class Embed
    {
        final UrlEmbed image;
    }

    @Data
    static class UrlEmbed
    {
        final String url;
    }
}

package com.discordchatlogger;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(DiscordChatLoggerConfig.GROUP)
public interface DiscordChatLoggerConfig extends Config{
    String GROUP = "discordchatlogger";

    @ConfigSection(
            name = "Private",
            description = "Options for private message logging",
            position = 100
    )
    String privateOptions = "privateOptions";

    @ConfigItem(
            keyName = "useprivate",
            name = "Send Private Messages",
            description = "Send private messages to discord webhook",
            position = 1,
            section = privateOptions
    )
    default boolean usePrivate()
    {
        return false;
    }

    @ConfigItem(
            keyName = "webhookprivate",
            name = "Webhook URL",
            description = "The Discord Webhook URL for private messages",
            position = 2,
            section = privateOptions
    )
    String webhookPrivate();

    @ConfigSection(
            name = "Group",
            description = "Options for group message logging",
            position = 300
    )
    String groupOptions = "groupOptions";

    @ConfigItem(
            keyName = "usegroup",
            name = "Send Group Messages",
            description = "Send group messages to discord webhook",
            position = 1,
            section = groupOptions
    )
    default boolean useGroup()
    {
        return false;
    }

    @ConfigItem(
            keyName = "webhookgroup",
            name = "Webhook URL",
            description = "Send group messages to discord webhook",
            position = 2,
            section = groupOptions
    )

    String webhookGroup();    @ConfigItem(
            keyName = "usegroupname",
            name = "Include Group Name",
            description = "Include group name in discord message",
            position = 3,
            section = groupOptions
    )
    default boolean useGroupName()
    {
        return true;
    }

    @ConfigSection(
            name = "Friends Chat",
            description = "Options for friends chat message logging",
            position = 200
    )
    String friendsChatOptions = "friendsChatOptions";

    @ConfigItem(
            keyName = "usefriendsChat",
            name = "Send friends chat Messages",
            description = "Send friends chat messages to discord webhook",
            position = 1,
            section = friendsChatOptions
    )
    default boolean usefriendsChat()
    {
        return false;
    }

    @ConfigItem(
            keyName = "webhookfriendsChat",
            name = "Webhook URL",
            description = "Send friends chat messages to discord webhook",
            position = 2,
            section = friendsChatOptions
    )

    String webhookFriendsChat();

    @ConfigSection(
            name = "Logging",
            description = "General options for logging",
            position = 400
    )
    String loggingOptions = "logginOptions";

    @ConfigItem(
            keyName = "logself",
            name = "Log Self",
            description = "Include messages sent",
            position = 1,
            section = loggingOptions
    )
    default boolean logSelf()
    {
        return true;
    }

    @ConfigItem(
            keyName = "logOthers",
            name = "Log Others",
            description = "Include messages received",
            position = 2,
            section = loggingOptions
    )
    default boolean logOthers()
    {
        return true;
    }

    @ConfigItem(
            keyName = "includeusername",
            name = "Include Username",
            description = "Include own RSN in the post",
            position = 3,
            section = loggingOptions
    )
    default boolean includeUsername()
    {
        return true;
    }

    @ConfigItem(
            keyName = "includeotherusername",
            name = "Include Other's Username",
            description = "Include Other's RSN in the post",
            position = 4,
            section = loggingOptions
    )
    default boolean includeOtherUsername()
    {
        return true;
    }
}
