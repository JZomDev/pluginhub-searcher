package com.dice;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DicePluginTest {
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(DicePlugin.class);
    RuneLite.main(args);
  }
}

package com.dice;

public enum DiceType {
    BASIC,
    MAGIC,
    FISHING,
    JESTER,
    METALS,
    COMBAT_SKILLS,
    SKILLS,
}

package com.dice;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.Comparator;
import java.util.List;

@Slf4j
@PluginDescriptor(name = "Dice")
public class DicePlugin extends Plugin {
  @Inject
  private Client client;

  @Inject
  private ClientThread clientThread;

  @Inject
  private DiceConfig config;

  @Inject
  private DiceOverlay overlay;

  @Inject
  private OverlayManager overlayManager;

  public boolean ROLL_DICE = false;
  private Widget button = null;
  private Widget parent = null;

  @Override
  protected void startUp() throws Exception {
    log.info("Dice started!");
    overlayManager.add(overlay);
    clientThread.invokeLater(this::createButton);
  }

  @Override
  protected void shutDown() throws Exception {
    overlayManager.remove(overlay);
    clientThread.invoke(this::hideButton);
    log.info("Dice stopped!");
  }

  @Provides
  DiceConfig provideConfig(ConfigManager configManager) {
    return configManager.getConfig(DiceConfig.class);
  }

  @Subscribe
  public void onWidgetLoaded(WidgetLoaded event) {
    if (event.getGroupId() != WidgetID.EQUIPMENT_GROUP_ID) {
      return;
    }

    createButton();
  }

  protected void trigger() {
    ROLL_DICE = !ROLL_DICE;
    if (ROLL_DICE) {
      button.setSpriteId(SpriteID.OPTIONS_ROUND_CHECK_BOX_CROSSED);
      button.setAction(0, "Put away dice");
    } else {
      button.setSpriteId(573);
      button.setAction(0, "Roll dice");
    }
  }

  protected void sayTotal(List<Dice> dices) {
    int total = 0;
    String message = "";
    int i = 0;

    boolean containsNonNumeric = false;

    dices.sort(Comparator.comparing(Dice::getX));

    for (Dice dice : dices) {
      total += dice.result;

      if (dice.diceType == DiceType.BASIC || dice.diceType == DiceType.MAGIC) {
        message = message + dice.result;
      } else {
        containsNonNumeric = true;
        message = message + dice.specialOutcomes.get(dice.result - 1).getName();
      }

      if(i < dices.size() - 1) {
        message = message + " + ";
      }

      i++;
    }

    if (containsNonNumeric) {
      total = 0;
    }

    client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "You rolled " + (total > 0 ? total : "") + " (" + message + ")", null);
  }

  private void hideButton() {
    if (button == null) {
      return;
    }

    button.setHidden(true);
    try {
      parent.getChildren()[button.getIndex()] = null;
    } catch (NullPointerException e) {
      // .. this shouldn't happen, but catch just incase.
    }
    button = null;
  }

  private void createButton() {
    parent = client.getWidget(WidgetInfo.EQUIPMENT);
    if (parent == null) {
      return;
    }

    hideButton();

    button = parent.createChild(-1, WidgetType.GRAPHIC);
    button.setOriginalHeight(20);
    button.setOriginalWidth(20);
    button.setOriginalX(124);
    button.setOriginalY(14);
    button.setSpriteId(573);
    button.setAction(0, "Roll dice");
    button.setOnOpListener((JavaScriptCallback) (e) -> clientThread.invokeLater(this::trigger));
    button.setHasListener(true);
    button.revalidate();
  }
}

package com.dice;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("Dice")
public interface DiceConfig extends Config {


  @Range(
          min = 1
  )
  @ConfigItem(keyName = "diceCount", name = "Number of Dice", description = "Too many dice may prevent them ever settling!")
  default int diceCount() {
    return 5;
  }


  // APPEARANCE
  @ConfigSection(name = "Appearance", description = "How the dice will appear on screen", position = 1, closedByDefault = false)
  String AppearanceSettings = "AppearanceSettings";

  @Range(
          min = 1,
          max = 100
  )
  @Units(Units.PERCENT)
  @ConfigItem(section = AppearanceSettings, position = 1, keyName = "diceOpacity", name = "Dice opacity", description = "Do you want the dice see-through?")
  default int diceOpacity() {
    return 100;
  }

  @ConfigItem(section = AppearanceSettings, position = 2, keyName = "flashResults", name = "Flash Results", description = "Flash Dice when they stop?")
  default boolean flashResults() {
    return false;
  }

  @ConfigItem(section = AppearanceSettings, position = 3, keyName = "diceColor", name = "Dice Color", description = "The color of the dice.")
  default Color diceColor() {
    return new Color(240, 231, 186);
  }

  @ConfigItem(section = AppearanceSettings, position = 5, keyName = "autoPutAway", name = "Auto tidy", description = "Put away dice after a few moments automatically?")
  default boolean autoPutAway() { return true; }

  @Units(Units.TICKS)
  @ConfigItem(section = AppearanceSettings, position = 6, keyName = "autoPutAwayTicks", name = "Auto tidy delay", description = "How quickly to auto tidy?")
  default int autoPutAwayTicks() {
    return 120;
  }

  @ConfigItem(section = AppearanceSettings, position = 7, keyName = "labelDice", name = "Label Dice", description = "Show labels next to each dice?")
  default boolean labelDice() { return true; }

  @ConfigItem(section = AppearanceSettings, position = 8, keyName = "diceDigitColor", name = "Dice Digit Color", description = "The color of the dice digits if using Advanced Notation.")
  default Color diceDigitColor() {
    return new Color(255, 255, 255);
  }


  // SPECIAL DICE SETTINGS
  @ConfigSection(name = "Special Dice", description = "Special dice you can use, these are divided evenly as possible.", position = 2, closedByDefault = false)
  String SpecialDiceSettings = "SpecialDiceSettings";

  @ConfigItem(section = SpecialDiceSettings, position = 9, keyName = "basicDice", name = "Basic Dice (D6)", description = "Use basic dice?")
  default boolean basicDice() { return false; }

  @ConfigItem(section = SpecialDiceSettings, position = 10, keyName = "fishingDice", name = "Fishing Dice (D19)", description = "Use fishing dice?")
  default boolean fishingDice() { return false; }

  @ConfigItem(section = SpecialDiceSettings, position = 11, keyName = "jesterDice", name = "Jester Dice (D6)", description = "Use jester dice?")
  default boolean jesterDice() { return false; }

  @ConfigItem(section = SpecialDiceSettings, position = 12, keyName = "metalDice", name = "Metal Dice (D9)", description = "Use metal dice?")
  default boolean metalDice() { return false; }

  @ConfigItem(section = SpecialDiceSettings, position = 13, keyName = "skillDice", name = "Skill Dice (D23)", description = "Use skill dice?")
  default boolean skillDice() { return false; }

  @ConfigItem(section = SpecialDiceSettings, position = 14, keyName = "combatSkillDice", name = "Combat Skill Dice (D4)", description = "Use combat skill dice?")
  default boolean combatSkillDice() { return false; }

  @ConfigItem(
          section = SpecialDiceSettings,
          position = 99,
          keyName = "diceAdvancedNotation",
          name = "Advanced Notation (optional)",
          description = "Separate by spaces eg. D6 D6 D10 D20 D20<br><br>This overrides the above number of dice.<br><br>Leave blank if unsure!")
  default String diceAdvancedNotation() {
    return "";
  }

}

package com.dice;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

class Dice {
  private Random r;

  DiceType diceType;
  int x;
  int y;
  int life;
  int col;
  int row;
  int finalRow; // row to flash to
  final int minLife = 30;
  final int maxLife = 80;
  private final int bezel = 100; // prevent dice being too near edge at spawn
  int xDrift;
  int yDrift;
  int ticks;
  int speed;
  final int minSpeed = 3;
  final int maxSpeed = 10;
  int canvasWidth;
  int canvasHeight;
  boolean altFrame = false;
  int magicSides;
  List<SpecialDice> specialOutcomes;

  int result = -1;
  boolean dead = false;

  public Dice(DiceType diceType, int canvasWidth, int canvasHeight, int magicSides) {
    this.diceType = diceType;
    this.r = new Random();
    this.canvasWidth = canvasWidth;
    this.canvasHeight = canvasHeight;
    this.x = canvasWidth / 2;
    this.y = canvasHeight / 2;
    this.x = bezel + r.nextInt((canvasWidth - bezel) - bezel + 1);
    this.y = bezel + r.nextInt((canvasHeight - bezel) - bezel + 1);
    this.life = minLife + r.nextInt(maxLife - minLife + 1);
    this.speed = minSpeed + r.nextInt(maxSpeed - minSpeed + 1);
    this.ticks = speed;
    this.col = 1 + r.nextInt(6 - 1 + 1);
    this.row = 15;
    this.finalRow = 2 + r.nextInt(11 - 1 + 1);
    this.xDrift = -15 + r.nextInt(1 - -15 + 1);
    this.yDrift = -15 + r.nextInt(1 - -15 + 1);
    this.magicSides = magicSides;

    // if it's a special dice, then affect the magicSides count to save code
    this.specialOutcomes = new ArrayList<>();
    if (this.diceType != DiceType.BASIC && this.diceType != DiceType.MAGIC) {
      for (SpecialDice sp: SpecialDice.values()) {
        if (sp.getDiceType() == this.diceType) {
          this.specialOutcomes.add(sp);
        }
      }

      this.magicSides = this.specialOutcomes.size();
    }
  }

  public int getX() {
    return this.x;
  }

  // drifts dice to mimic movement
  private void drift() {
    if (x < 0 || x > canvasWidth - 32) {
      xDrift = -xDrift;
    }
    x += xDrift;

    if (y < 0 || y > canvasHeight - 32) {
      yDrift = -yDrift;
    }
    y += yDrift;
  }

  private void uncollide(List<Dice> siblings) {
    for (Dice sibling : siblings) {
      if (this != sibling && this.life <= 0 && sibling.life <= 0 && overlaps(sibling)) {
        this.life = 10;
        this.speed = 5;
        this.row = 15; // revive the rolling
      }
    }
  }

  public boolean overlaps (Dice r) {
    return x < r.x + 32 && x + 32 > r.x && y < r.y + 32 && y + 32 > r.y;
  }

  // moves to next frame (col in spritesheet)
  public void next(List<Dice> siblings) {
    if (life > 0) {
      drift();
      life--;
    } else if (!dead){
      uncollide(siblings);
    }

    if (ticks > 0) { // idle on current anim frame
      ticks--;
    } else {
      altFrame = !altFrame; // flag an advance

      if (speed < maxSpeed) { // slow gradually
        speed++;
      }

      if (life > 0) {
        ticks = speed;
        col++;
        if (col > 6) {
          col = 1;
        }
      } else {
        ticks = speed * 2; // slow things down now
        if (this.magicSides > 0 && this.diceType != DiceType.BASIC) {  // its not a basic dice, use a blank base
          row = 13;
          col = 1;
          if (result == -1) {
            result = 1 + r.nextInt(magicSides - 1 + 1);
          }
        } else {
          row = 1; // its a normal dice use a dotted base..
          result = col;
        }
      }
    }
  }
}

package com.dice;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import net.runelite.client.ui.FontManager;

@Slf4j
public class DiceOverlay extends Overlay {

  // general
  private final Client client;
  private final DicePlugin plugin;
  private final DiceConfig config;
  private final ItemManager itemManager;
  private final SkillIconManager iconManager;

  // relatively unchanging
  private BufferedImage spritesheet;
  FontMetrics metrics;
  private Font font;
  private Font fontSmall;
  Dimension dims;

  // changing
  private final List<Dice> dices = new LinkedList<>();
  private boolean init = false;
  private boolean unannounced = true;
  private int putAwayTimer;

  @Inject
  DiceOverlay(Client client, DicePlugin plugin, DiceConfig config, ItemManager itemManager, SkillIconManager iconManager) {
    super(plugin);
    setPosition(OverlayPosition.DYNAMIC);
    setLayer(OverlayLayer.ALWAYS_ON_TOP);
    this.plugin = plugin;
    this.client = client;
    this.config = config;
    this.itemManager = itemManager;
    this.iconManager = iconManager;
    spritesheet = ImageUtil.loadImageResource(DicePlugin.class, "/spritesheet.png");
    font = FontManager.getRunescapeBoldFont();
    fontSmall = FontManager.getRunescapeSmallFont();
  }

  /**
   * Clear current roll
   */
  public void reset() {
    dices.clear();
    init = false;
  }

  /**
   * Initialise a roll
   */
  public void init(Graphics2D g) {
    putAwayTimer = config.autoPutAwayTicks();

    g.setFont(font);
    metrics = g.getFontMetrics(font);
    init = true;
    unannounced = true;
    dims = client.getRealDimensions();
    int diceCount = config.diceCount();

    int specialsActive = countTrue(
            config.basicDice(),
            config.fishingDice(),
            config.jesterDice(),
            config.metalDice(),
            config.combatSkillDice(),
            config.skillDice()
    );

    if (specialsActive > 0) {
      Map<DiceType, Boolean> specialDiceMap = new HashMap<DiceType, Boolean>(){{
        put(DiceType.BASIC, config.basicDice());
        put(DiceType.FISHING, config.fishingDice());
        put(DiceType.JESTER, config.jesterDice());
        put(DiceType.METALS, config.metalDice());
        put(DiceType.COMBAT_SKILLS, config.combatSkillDice());
        put(DiceType.SKILLS, config.skillDice());
      }};

      while (diceCount > 0) {
        for (Map.Entry<DiceType, Boolean> entry : specialDiceMap.entrySet()) {
          DiceType diceType = entry.getKey();
          Boolean diceActive = entry.getValue();
          if (!diceActive) continue;
          if (diceCount <= 0) break;

          dices.add(new Dice(diceType, dims.width, dims.height, 0));
          diceCount--;
        }
      }

    }
    else if (config.diceAdvancedNotation().length() > 0) {
      String[] notation = config.diceAdvancedNotation().split("\\s+");
      for (String notedDice : notation) {
        try {
          int magicSides = Integer.valueOf(notedDice.substring(1));
          dices.add(new Dice(DiceType.MAGIC, dims.width, dims.height, magicSides));
        } catch (Exception e) {
          // fail silent..
        }
      }
    } else { // add normal dice
      for (int i = 0; i < diceCount; i++) {
        dices.add(new Dice(DiceType.BASIC, dims.width, dims.height, 0));
      }
    }
  }

  /**
   * Count trues of given args
   */
  protected int countTrue(boolean... vars) {
    int count = 0;
    for (boolean var : vars) {
      count += (var ? 1 : 0);
    }
    return count;
  }

  /**
   * Sprite plucking method
   */
  public BufferedImage getSprite(int col, int row, int width, int height) {
    BufferedImage img = spritesheet.getSubimage((col * 16) - 16, (row * 16) - 16, width, height);
    return img;
  }

  /**
   * Tint a plucked sprite
   */
  protected BufferedImage tint(float r, float g, float b, float a,
      BufferedImage sprite) {
    BufferedImage tintedSprite = new BufferedImage(sprite.getWidth(), sprite.getHeight(), BufferedImage.TRANSLUCENT);
    Graphics2D graphics = tintedSprite.createGraphics();
    graphics.drawImage(sprite, 0, 0, null);
    graphics.dispose();

    for (int i = 0; i < tintedSprite.getWidth(); i++) {
      for (int j = 0; j < tintedSprite.getHeight(); j++) {
        int ax = tintedSprite.getColorModel().getAlpha(tintedSprite.getRaster().getDataElements(i, j, null));
        int rx = tintedSprite.getColorModel().getRed(tintedSprite.getRaster().getDataElements(i, j, null));
        int gx = tintedSprite.getColorModel().getGreen(tintedSprite.getRaster().getDataElements(i, j, null));
        int bx = tintedSprite.getColorModel().getBlue(tintedSprite.getRaster().getDataElements(i, j, null));
        rx *= r;
        gx *= g;
        bx *= b;
        ax *= a;
        tintedSprite.setRGB(i, j, (ax << 24) | (rx << 16) | (gx << 8) | (bx));
      }
    }
    return tintedSprite;
  }

  /**
   * Affect alpha of sprite
   */
  protected BufferedImage alpha(float a, BufferedImage sprite) {
    BufferedImage alphaSprite = new BufferedImage(sprite.getWidth(), sprite.getHeight(), BufferedImage.TRANSLUCENT);
    Graphics2D graphics = alphaSprite.createGraphics();
    graphics.drawImage(sprite, 0, 0, null);
    graphics.dispose();

    for (int i = 0; i < alphaSprite.getWidth(); i++) {
      for (int j = 0; j < alphaSprite.getHeight(); j++) {
        int ax = alphaSprite.getColorModel().getAlpha(alphaSprite.getRaster().getDataElements(i, j, null));
        int rx = alphaSprite.getColorModel().getRed(alphaSprite.getRaster().getDataElements(i, j, null));
        int gx = alphaSprite.getColorModel().getGreen(alphaSprite.getRaster().getDataElements(i, j, null));
        int bx = alphaSprite.getColorModel().getBlue(alphaSprite.getRaster().getDataElements(i, j, null));
        ax *= a;
        alphaSprite.setRGB(i, j, (ax << 24) | (rx << 16) | (gx << 8) | (bx));
      }
    }
    return alphaSprite;
  }

  /**
   * Resize a given sprite
   */
  public static BufferedImage resize(BufferedImage sprite, int newW, int newH) {
    Image tmp = sprite.getScaledInstance(newW, newH, Image.SCALE_SMOOTH);
    BufferedImage newSprite = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);

    Graphics2D g2d = newSprite.createGraphics();
    g2d.drawImage(tmp, 0, 0, null);
    g2d.dispose();

    return newSprite;
  }

  /**
   * Draw a String centered in the middle of a Rectangle.
   */
  public void drawCenteredString(Graphics g, String text, Dice dice, int offsetx, int offsety) {
    int x = (dice.x + (32 - metrics.stringWidth(text)) / 2) + offsetx;
    int y = (dice.y + ((32 - metrics.getHeight()) / 2) + metrics.getAscent()) + offsety;
    g.drawString(text, x, y);
  }

  /**
   * Render method
   */
  @Override
  public Dimension render(Graphics2D g) {
    if (init && plugin.ROLL_DICE) {

      boolean allDiceDead = true;
      boolean allDiceFallen = true;

      for (Dice dice : dices) {

        dice.next(dices);

        BufferedImage sprite = getSprite(dice.col, dice.row, 16, 16);

        Color tint = config.diceColor();

        float tintR = (tint.getRed() / 255.0f);
        float tintG = (tint.getGreen() / 255.0f);
        float tintB = (tint.getBlue() / 255.0f);

        if (!config.flashResults() || (config.flashResults() && dice.life > 0)
            || (config.flashResults() && dice.altFrame)) {
          sprite = tint(tintR, tintG, tintB, ((float)config.diceOpacity() / 100), sprite);
        }

        g.drawImage(sprite, dice.x, dice.y, 32, 32, null);

        // draw special sides result on dice
        if (dice.life <= 0 && dice.magicSides > 0 && dice.diceType != DiceType.BASIC && dice.diceType != DiceType.MAGIC) {
          if (dice.result > 0) { // prevent flash of -1 sprite (we subtract later)

            BufferedImage spriteImage = null;

            if (dice.specialOutcomes.get(dice.result - 1).getSpecialSpriteId() > 0) {
              spriteImage = itemManager.getImage(dice.specialOutcomes.get(dice.result - 1).getSpecialSpriteId());
            }
            else if (dice.specialOutcomes.get(dice.result - 1).getSpecialSkill() != null) {
              spriteImage = iconManager.getSkillImage(dice.specialOutcomes.get(dice.result - 1).getSpecialSkill());
            }

            if (spriteImage != null) {
              spriteImage = alpha(((float) config.diceOpacity() / 100), spriteImage);
              spriteImage = resize(spriteImage, 24, 24);
              g.drawImage(spriteImage, dice.x + 4, dice.y + 4, 24, 24, null);
            }
          }
        }
        // draw magic sides result on dice
        else if (dice.life <= 0 && dice.magicSides > 0 && dice.diceType == DiceType.MAGIC) {
          if (dice.result > -1) { // prevent flash of -1
            g.setFont(font);
            g.setColor(Color.BLACK);
            drawCenteredString(g, "" + dice.result, dice, -1, -1);
            drawCenteredString(g, "" + dice.result, dice, -1, 1);
            drawCenteredString(g, "" + dice.result, dice, 1, 1);
            drawCenteredString(g, "" + dice.result, dice, 1, -1);
            g.setColor(config.diceDigitColor());
            drawCenteredString(g, "" + dice.result, dice, 0, 0);
          }
        }

        if (dice.life <= 0 && dice.result > -1 && config.labelDice()) {
          g.setFont(fontSmall);

          if (dice.magicSides > 0 && dice.diceType != DiceType.MAGIC && dice.diceType != DiceType.BASIC && dice.result > 0) {
            g.setColor(Color.BLACK);
            String specialDiceName = dice.specialOutcomes.get(dice.result - 1).getName();
            g.drawString(specialDiceName, dice.x + 35, dice.y + 35);
            g.drawString(specialDiceName, dice.x + 35, dice.y + 37);
            g.drawString(specialDiceName, dice.x + 37, dice.y + 37);
            g.drawString(specialDiceName, dice.x + 37, dice.y + 35);
            g.setColor(Color.WHITE);
            g.drawString(specialDiceName, dice.x + 36, dice.y + 36);
          }
          else if (dice.magicSides > 0 && dice.diceType == DiceType.MAGIC) {
            g.setColor(Color.BLACK);
            g.drawString("D"+dice.magicSides, dice.x + 35, dice.y + 35);
            g.drawString("D"+dice.magicSides, dice.x + 35, dice.y + 37);
            g.drawString("D"+dice.magicSides, dice.x + 37, dice.y + 37);
            g.drawString("D"+dice.magicSides, dice.x + 37, dice.y + 35);
            g.setColor(Color.WHITE);
            g.drawString("D"+dice.magicSides, dice.x + 36, dice.y + 36);
          } else {
            g.setColor(Color.BLACK);
            g.drawString("D6", dice.x + 35, dice.y + 35);
            g.drawString("D6", dice.x + 35, dice.y + 37);
            g.drawString("D6", dice.x + 37, dice.y + 37);
            g.drawString("D6", dice.x + 37, dice.y + 35);
            g.setColor(Color.WHITE);
            g.drawString("D6", dice.x + 36, dice.y + 36);
          }
        }

        if (dice.life > 0 || dice.result == -1) {
          allDiceDead = false;
          allDiceFallen = false;
        } else {
          if (config.autoPutAway() && putAwayTimer < 0) {
            dice.dead = true;

            if (dice.y < dims.height + 100) {
              allDiceFallen = false;
              dice.y += Math.abs(dice.yDrift) + 13; // fall down!
            }
          } else {
            allDiceFallen = false;
          }
        }
      }

      if (allDiceDead) {
        putAwayTimer--;

        if(unannounced) {
          unannounced = false;
          plugin.sayTotal(dices);
        }
      }

      if (config.autoPutAway() && allDiceDead && allDiceFallen) {
        plugin.trigger(); // auto reset, like the player toggled manually
      }

    } else if (!init && plugin.ROLL_DICE) {
      init(g);
    } else {
      reset();
    }
    return null;
  }
}

package com.dice;

import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.Skill;


import java.util.Map;

@Getter
public enum SpecialDice
{
    // FISH
    SHRIMP(DiceType.FISHING, "Shrimp", ItemID.RAW_SHRIMPS),
    LOBSTER(DiceType.FISHING, "Lobster", ItemID.RAW_LOBSTER),
    MONKFISH(DiceType.FISHING, "Monkfish", ItemID.RAW_MONKFISH),
    SALMON(DiceType.FISHING, "Salmon", ItemID.RAW_SALMON),
    LAVA_EEL(DiceType.FISHING, "Lava eel", ItemID.LAVA_EEL),
    BARB_FISH(DiceType.FISHING, "Sturgeon", ItemID.LEAPING_STURGEON),
    ANGLERFISH(DiceType.FISHING, "Anglerfish", ItemID.RAW_ANGLERFISH),
    MINNOW(DiceType.FISHING, "Minnow", ItemID.MINNOW),
    HARPOONFISH(DiceType.FISHING, "Harpoonfish", ItemID.RAW_HARPOONFISH),
    INFERNAL_EEL(DiceType.FISHING, "Infernal Eel", ItemID.INFERNAL_EEL),
    KARAMBWAN(DiceType.FISHING, "Karambwan", ItemID.RAW_KARAMBWAN),
    KARAMBWANJI(DiceType.FISHING, "Karambwanji", ItemID.KARAMBWANJI),
    SACRED_EEL(DiceType.FISHING, "Sacred eel", ItemID.SACRED_EEL),
    CAVE_EEL(DiceType.FISHING, "Frog spawn", ItemID.RAW_CAVE_EEL),
    SLIMY_EEL(DiceType.FISHING, "Slimy eel", ItemID.RAW_SLIMY_EEL),
    DARK_CRAB(DiceType.FISHING, "Dark Crab", ItemID.RAW_DARK_CRAB),
    COMMON_TENCH(DiceType.FISHING, "Common tench", ItemID.COMMON_TENCH),
    QUEST_RUM_DEAL(DiceType.FISHING, "Sluglings", ItemID.SLUGLINGS),
    QUEST_FISHING_CONTEST(DiceType.FISHING, "Giant carp", ItemID.GIANT_CARP),

    // JESTER
    SILLY_JESTER_HAT(DiceType.JESTER, "Hat", ItemID.SILLY_JESTER_HAT),
    SILLY_JESTER_TOP(DiceType.JESTER, "Top", ItemID.SILLY_JESTER_TOP),
    SILLY_JESTER_TIGHTS(DiceType.JESTER, "Tights", ItemID.SILLY_JESTER_TIGHTS),
    SILLY_JESTER_BOOTS(DiceType.JESTER, "Boots", ItemID.SILLY_JESTER_BOOTS),
    A_JESTER_STICK(DiceType.JESTER, "Stick", ItemID.A_JESTER_STICK),
    JESTER_SCARF(DiceType.JESTER, "Scarf", ItemID.JESTER_SCARF),

    // METALS
    BRONZE_BAR(DiceType.METALS, "Bronze", ItemID.BRONZE_BAR),
    IRON_BAR(DiceType.METALS, "Iron", ItemID.IRON_BAR),
    STEEL_BAR(DiceType.METALS, "Steel", ItemID.STEEL_BAR),
    SILVER_BAR(DiceType.METALS, "Silver", ItemID.SILVER_BAR),
    GOLD_BAR(DiceType.METALS, "Gold", ItemID.GOLD_BAR),
    MITHRIL_BAR(DiceType.METALS, "Mithril", ItemID.MITHRIL_BAR),
    ADAMANTITE_BAR(DiceType.METALS, "Adamant", ItemID.ADAMANTITE_BAR),
    RUNITE_BAR(DiceType.METALS, "Rune", ItemID.RUNITE_BAR),
    PERFECT_GOLD_BAR(DiceType.METALS, "Perfect Gold", ItemID.PERFECT_GOLD_BAR),


    // COMBAT SKILLS
    COMBAT_SKILL_ATTACK(DiceType.COMBAT_SKILLS, "Attack", Skill.ATTACK),
    COMBAT_SKILL_STRENGTH(DiceType.COMBAT_SKILLS, "Strength", Skill.STRENGTH),
    COMBAT_SKILL_DEFENCE(DiceType.COMBAT_SKILLS, "Defence", Skill.DEFENCE),
    COMBAT_SKILL_RANGED(DiceType.COMBAT_SKILLS, "Ranged", Skill.RANGED),
    COMBAT_SKILL_MAGIC(DiceType.COMBAT_SKILLS, "Magic", Skill.MAGIC),

    // SKILLS
    SKILL_ATTACK(DiceType.SKILLS, "Attack", Skill.ATTACK),
    SKILL_STRENGTH(DiceType.SKILLS, "Strength", Skill.STRENGTH),
    SKILL_DEFENCE(DiceType.SKILLS, "Defence", Skill.DEFENCE),
    SKILL_RANGED(DiceType.SKILLS, "Ranged", Skill.RANGED),
    SKILL_PRAYER(DiceType.SKILLS, "Prayer", Skill.PRAYER),
    SKILL_MAGIC(DiceType.SKILLS, "Magic", Skill.MAGIC),
    SKILL_HITPOINTS(DiceType.SKILLS, "Hitpoints", Skill.HITPOINTS),
    SKILL_AGILITY(DiceType.SKILLS, "Agility", Skill.AGILITY),
    SKILL_HERBLORE(DiceType.SKILLS, "Herblore", Skill.HERBLORE),
    SKILL_THIEVING(DiceType.SKILLS, "Thieving", Skill.THIEVING),
    SKILL_CRAFTING(DiceType.SKILLS, "Crafting", Skill.CRAFTING),
    SKILL_FLETCHING(DiceType.SKILLS, "Fletching", Skill.FLETCHING),
    SKILL_MINING(DiceType.SKILLS, "Mining", Skill.MINING),
    SKILL_SMITHING(DiceType.SKILLS, "Smithing", Skill.SMITHING),
    SKILL_FISHING(DiceType.SKILLS, "Fishing", Skill.FISHING),
    SKILL_COOKING(DiceType.SKILLS, "Cooking", Skill.COOKING),
    SKILL_FIREMAKING(DiceType.SKILLS, "Firemaking", Skill.FIREMAKING),
    SKILL_WOODCUTTING(DiceType.SKILLS, "Woodcutting", Skill.WOODCUTTING),
    SKILL_RUNECRAFT(DiceType.SKILLS, "Runecraft", Skill.RUNECRAFT),
    SKILL_SLAYER(DiceType.SKILLS, "Slayer", Skill.SLAYER),
    SKILL_FARMING(DiceType.SKILLS, "Farming", Skill.FARMING),
    SKILL_HUNTER(DiceType.SKILLS, "Hunter", Skill.HUNTER),
    SKILL_CONSTRUCTION(DiceType.SKILLS, "Construction", Skill.CONSTRUCTION),
    ;

    private final DiceType diceType;
    private final String name;
    private final int specialSpriteId;
    private final Skill specialSkill;

    SpecialDice(DiceType diceType, String name, int specialSpriteId)
    {
        this.diceType = diceType;
        this.name = name;
        this.specialSpriteId = specialSpriteId;
        this.specialSkill = null;
    }

    SpecialDice(DiceType diceType, String name, Skill specialSkill)
    {
        this.diceType = diceType;
        this.name = name;
        this.specialSpriteId = 0;
        this.specialSkill = specialSkill;
    }
}

