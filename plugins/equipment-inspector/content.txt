package com.equipmentinspector;

import equipmentinspector.EquipmentInspectorPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EquipmentInspectorTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EquipmentInspectorPlugin.class);
		RuneLite.main(args);
	}
}
package equipmentinspector;

import java.awt.image.BufferedImage;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.stream.Stream;
import javax.annotation.Nullable;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.inject.Provider;
import javax.inject.Singleton;
import javax.swing.SwingUtilities;

import com.google.inject.Provides;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Player;
import net.runelite.api.PlayerComposition;
import net.runelite.api.SpriteID;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.kit.KitType;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;

@PluginDescriptor(
		name = "Equipment Inspector"
)

@Slf4j
@Singleton
public class EquipmentInspectorPlugin extends Plugin
{
	static final String CONFIG_GROUP = "equipmentinspector";
	private static final String INSPECT_EQUIPMENT = "Equipment";
	private static final String KICK_OPTION = "Kick";

	@Inject
	@Nullable
	private Client client;

	@Inject
	private Provider<MenuManager> menuManager;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private ClientToolbar pluginToolbar;

	private NavigationButton navButton;
	private EquipmentInspectorPanel equipmentInspectorPanel;

	@Inject
	private Notifier notifier;

	@Inject
	private ItemManager itemManager;

	@Inject
	private EquipmentInspectorConfig config;
	@Inject
	private SpriteManager spriteManager;
	@Provides
	EquipmentInspectorConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EquipmentInspectorConfig.class);
	}

	private final Map<Integer, PlayerInfo> storedPlayers = new HashMap<>();

	@Override
	protected void startUp() throws Exception
	{
		equipmentInspectorPanel = injector.getInstance(EquipmentInspectorPanel.class);

		BufferedImage icon;
		synchronized (ImageIO.class)
		{
			icon = ImageIO.read(getClass().getResourceAsStream("normal.png"));
		}

		navButton = NavigationButton.builder()
				.tooltip("Equipment Inspector")
				.icon(icon)
				.priority(5)
				.panel(equipmentInspectorPanel)
				.build();
	}

	@Override
	protected void shutDown() throws Exception
	{
		removeMenuItem();
		pluginToolbar.removeNavigation(navButton);
	}

	private synchronized void removeMenuItem() {
		menuManager.get().removePlayerMenuItem(INSPECT_EQUIPMENT);
	}

	private synchronized void addMenuItem() {
		if (client == null) return;
		if (Arrays.stream(client.getPlayerOptions()).noneMatch(INSPECT_EQUIPMENT::equals)) {
			menuManager.get().addPlayerMenuItem(INSPECT_EQUIPMENT);
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event) {
		if (!config.holdShift() || client.isKeyPressed(KeyCode.KC_SHIFT)) {
			addMenuItem();
		} else {
			removeMenuItem();
		}
	}
	@Subscribe
	public void onMenuOpened(MenuOpened event)
	{
		Stream.of(event.getMenuEntries()).map(MenuEntry::getActor)
				.filter(a -> a instanceof Player)
				.map(Player.class::cast)
				.distinct()
				.map(p -> new PlayerInfo(p. getId(), p.getName(), p.getPlayerComposition()))
				.forEach(playerInfo -> storedPlayers.put(playerInfo.getId(), playerInfo));
	}
	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		equipmentInspectorPanel.setMembersImage(spriteManager.getSprite(SpriteID.WORLD_SWITCHER_STAR_MEMBERS, 0));
		if (event.getMenuAction() == MenuAction.RUNELITE_PLAYER && event.getMenuOption().equals(INSPECT_EQUIPMENT))
		{
			pluginToolbar.addNavigation(navButton);
			try
			{
				SwingUtilities.invokeAndWait(() -> pluginToolbar.openPanel(navButton));
			}
			catch (InterruptedException | InvocationTargetException e)
			{
				throw new RuntimeException(e);
			}
			PlayerInfo p = getPlayerInfo(event.getId());
			if (p == null)
			{
				return;
			}

			Map<KitType, ItemComposition> playerEquipment = new HashMap<>();
			Map<KitType, Integer> equipmentPrices = new HashMap<>();

			for (KitType kitType : KitType.values())
			{
				int itemId = p.getPlayerComposition().getEquipmentId(kitType);
				if (itemId != -1)
				{
					ItemComposition itemComposition = client.getItemDefinition(itemId);
					playerEquipment.put(kitType, itemComposition);
					equipmentPrices.put(kitType, itemManager.getItemPrice(itemId));
				}
			}
			equipmentInspectorPanel.update(playerEquipment, equipmentPrices, p.getName());
		}
		storedPlayers.clear();
	}

	private PlayerInfo getPlayerInfo(int id)
	{
		Player p = client.getCachedPlayers()[id];
		if (p != null)
		{
			return new PlayerInfo(p.getId(), p.getName(), p.getPlayerComposition());
		}
		else
		{
			return storedPlayers.getOrDefault(id, null);
		}
	}

	@Value
	private static class PlayerInfo
	{
		int id;
		String name;
		PlayerComposition playerComposition;
	}
}

package equipmentinspector;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("equipmentinspector")
public interface EquipmentInspectorConfig extends Config
{
    @ConfigItem(
            keyName = "holdShift",
            name = "Hold Shift",
            description = "Configures whether you need to hold shift to inspect equipment",
            position = 1
    )
    default boolean holdShift()
    {
        return false;
    }
}

package equipmentinspector;

import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemComposition;
import net.runelite.api.kit.KitType;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import net.runelite.api.Client;

@Slf4j
@Singleton
public class EquipmentInspectorPanel extends PluginPanel
{
    private final static String NO_PLAYER_SELECTED = "No player selected";

    private GridBagConstraints c;
    private JPanel equipmentPanels;
    private JPanel header;
    public JLabel nameLabel;

    @Inject
    private Client client;
    @Setter
    private BufferedImage membersImage;
    @Inject
    private ItemManager itemManager;

    public EquipmentInspectorPanel()
    {

        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        setBorder(new EmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        equipmentPanels = new JPanel(new GridBagLayout());
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 0;

        header = new JPanel();
        header.setLayout(new BorderLayout());
        header.setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(58, 58, 58)),
                BorderFactory.createEmptyBorder(0, 0, 10, 0)));

        nameLabel = new JLabel(NO_PLAYER_SELECTED);
        nameLabel.setForeground(Color.WHITE);

        header.add(nameLabel, BorderLayout.CENTER);

        layout.setHorizontalGroup(layout.createParallelGroup()
                .addComponent(equipmentPanels)
                .addComponent(header)
        );
        layout.setVerticalGroup(layout.createSequentialGroup()
                .addComponent(header)
                .addGap(10)
                .addComponent(equipmentPanels)
        );

        update(new HashMap<>(), new HashMap<>(), "");
    }

    public void update(Map<KitType, ItemComposition> playerEquipment, Map<KitType, Integer> equipmentPrices, String playerName)
    {

        if (playerName.isEmpty() || playerName == null)
        {
            nameLabel.setText(NO_PLAYER_SELECTED);
        }
        else
        {
            nameLabel.setText("Player: " + playerName);
        }

        SwingUtilities.invokeLater(() ->
                {
                    equipmentPanels.removeAll();
                    AtomicLong totalItemPrice= new AtomicLong();
                    playerEquipment.forEach((kitType, itemComposition) ->
                    {
                        AsyncBufferedImage itemImage = itemManager.getImage(itemComposition.getId());
                        int itemPrice = equipmentPrices.get(kitType);
                        totalItemPrice.addAndGet(itemPrice);
                        equipmentPanels.add(new ItemPanel(itemComposition, kitType, itemImage, itemPrice, membersImage), c);
                        c.gridy++;

                    });
                    if(!nameLabel.getText().equals(NO_PLAYER_SELECTED)) {
                        equipmentPanels.add(new TotalPanel(totalItemPrice.get()), c);
                        c.gridy++;
                    }
                    header.revalidate();
                    header.repaint();
                }
        );
    }
}
package equipmentinspector;

import net.runelite.api.ItemComposition;
import net.runelite.api.kit.KitType;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.LinkBrowser;
import net.runelite.client.util.QuantityFormatter;
import okhttp3.HttpUrl;
import org.apache.commons.lang3.StringUtils;

import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;
import java.util.Locale;

class ItemPanel extends JPanel
{

    ItemPanel(ItemComposition item, KitType kitType, AsyncBufferedImage icon, Integer itemPrice, BufferedImage membersImage)
    {
        setBorder(new EmptyBorder(3, 3, 3, 3));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);

        boolean membersItem = item.getName().endsWith("(Members)");
        JLabel name = new JLabel(item.getName().replace(" (Members)", ""));
        name.setFont(FontManager.getRunescapeFont());
        if (membersItem) {
            name.setIcon(new ImageIcon(membersImage));
            name.setHorizontalTextPosition(SwingConstants.LEFT);
        }
        JMenuItem wiki = new JMenuItem("Wiki");

        HttpUrl WIKI_BASE = HttpUrl.parse("https://oldschool.runescape.wiki");
        String UTM_SORUCE_KEY = "utm_source";
        String UTM_SORUCE_VALUE = "runelite";

        HttpUrl.Builder urlBuilder = WIKI_BASE.newBuilder();
        urlBuilder.addPathSegments("w/Special:Lookup")
                .addQueryParameter("type", "item")
                .addQueryParameter("id", "" + item.getId())
                .addQueryParameter("name", item.getName())
                .addQueryParameter(UTM_SORUCE_KEY, UTM_SORUCE_VALUE);

        HttpUrl url = urlBuilder.build();
        wiki.addActionListener(e-> LinkBrowser.browse(url.toString()));

        JLabel location = new JLabel(StringUtils.capitalize(kitType.toString().toLowerCase()));
        location.setFont(FontManager.getRunescapeSmallFont());
        location.setForeground(Color.GRAY);
        JLabel price = getPriceLabel(itemPrice);

        JLabel imageLabel = new JLabel();
        icon.addTo(imageLabel);

        JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
        popupMenu.add(wiki);


        layout.setVerticalGroup(layout.createParallelGroup()
                .addComponent(imageLabel)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(name)
                        .addComponent(location)
                        .addComponent(price)
                )

        );

        layout.setHorizontalGroup(layout.createSequentialGroup()
                .addComponent(imageLabel)
                .addGap(8)
                .addGroup(layout.createParallelGroup()
                        .addComponent(name)
                        .addComponent(location)
                        .addComponent(price)
                )
        );

        // AWT's Z order is weird. This put image at the back of the stack
        setComponentZOrder(imageLabel, getComponentCount() - 1);
        setComponentPopupMenu(popupMenu);
    }
    public static JLabel getPriceLabel(long amount) {
        String itemPriceString = QuantityFormatter.quantityToStackSize(amount);
        JLabel price = new JLabel(StringUtils.capitalize(itemPriceString));
        if (amount > 10000000) {
            price.setForeground(Color.GREEN);
        } else if (amount > 100000) {
            price.setForeground(Color.WHITE);
        } else if (amount == 0) {
            price.setForeground(Color.LIGHT_GRAY);
        } else {
            price.setForeground(Color.YELLOW);
        }
        price.setFont(FontManager.getRunescapeFont());
        price.setToolTipText(NumberFormat.getNumberInstance(Locale.US).format(amount));
        return price;
    }
}
class TotalPanel extends JPanel {

    TotalPanel(long total) {
        setBorder(new EmptyBorder(3, 3, 3, 3));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);

        JLabel name = new JLabel("Total: ");
        JLabel price = ItemPanel.getPriceLabel(total);
        name.setFont(FontManager.getRunescapeFont());

        layout.setVerticalGroup(layout.createParallelGroup()
                .addComponent(name)
                .addComponent(price)
        );
        layout.setHorizontalGroup(layout.createSequentialGroup()
                .addGap(8)
                .addComponent(name)
                .addComponent(price)
        );
    }
}

