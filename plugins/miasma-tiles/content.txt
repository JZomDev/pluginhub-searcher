package de0;

import de0.miasmatiles.MiasmaTilesPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MiasmaTilesPluginTest {

  @SuppressWarnings("unchecked")
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(MiasmaTilesPlugin.class);
    RuneLite.main(args);
  }

}

package de0.miasmatiles;

import java.awt.Color;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("miasmatiles")
public interface MiasmaTilesConfig extends Config {
  
  @ConfigItem(name = "Show burn tiles", description = "", keyName = "burnTiles")
  default boolean showBurnTiles() {
    return true;
  }
  
  @Alpha
  @ConfigItem(name = "Burn tile color", description = "", keyName = "burnTileColor")
  default Color burnTileColor() {
    return new Color(0x96CB2929, true);
  }

  @ConfigItem(name = "Show Olm tiles", description = "", keyName = "olmTiles")
  default boolean showOlmTiles() {
    return true;
  }
  
  @Alpha
  @ConfigItem(name = "Olm tile color", description = "", keyName = "olmTileColor")
  default Color olmTileColor() {
    return new Color(0xffB8C7CB, true);
  }

  @ConfigItem(name = "Thin outline", description = "Draw 1px non-AA outline instead of RuneLite default", keyName = "thinOutline")
  default boolean thinOutline() {
    return false;
  }

}

package de0.miasmatiles;

class MiasmaTilesData {

  static final int REGION_ID = 12889;

  static final int BURN = 0, OLM = 1;

  static final int[][] TILES = new int[][] { { 33, 34, BURN }, { 31, 34, BURN },
      { 35, 35, BURN }, { 37, 35, BURN }, { 33, 36, BURN }, { 31, 36, BURN },
      { 29, 35, BURN }, { 29, 37, BURN }, { 31, 38, BURN }, { 33, 38, BURN },
      { 35, 37, BURN }, { 37, 37, BURN }, { 35, 39, BURN }, { 37, 39, BURN },
      { 37, 41, OLM }, { 35, 41, BURN }, { 33, 40, BURN }, { 31, 40, BURN },
      { 29, 39, BURN }, { 33, 42, BURN }, { 31, 42, BURN }, { 29, 41, BURN },
      { 28, 52, BURN }, { 30, 52, BURN }, { 34, 52, BURN }, { 32, 52, BURN },
      { 36, 52, BURN }, { 30, 50, BURN }, { 32, 50, BURN }, { 34, 50, BURN },
      { 28, 48, BURN }, { 30, 48, BURN }, { 32, 48, BURN }, { 34, 48, BURN },
      { 36, 48, BURN }, { 28, 46, BURN }, { 30, 46, BURN }, { 32, 46, BURN },
      { 34, 46, BURN }, { 36, 46, BURN }, { 35, 45, OLM }, { 35, 43, OLM },
      { 30, 45, OLM }, { 30, 43, OLM }, { 28, 50, OLM }, { 37, 50, OLM },
      { 37, 38, OLM }, { 28, 38, OLM }, { 36, 50, BURN }, { 37, 43, BURN },
      { 33, 44, BURN }, { 31, 44, BURN }, { 29, 44, BURN }, { 28, 47, OLM } };

}

package de0.miasmatiles;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class MiasmaTilesOverlay extends Overlay {

  private Client client;
  private MiasmaTilesConfig config;

  @Inject
  MiasmaTilesOverlay(Client client, MiasmaTilesConfig config) {
    this.client = client;
    this.config = config;
    setPosition(OverlayPosition.DYNAMIC);
    setLayer(OverlayLayer.ABOVE_SCENE);
  }

  @Override
  public Dimension render(Graphics2D g) {
    WorldPoint wp = client.getLocalPlayer().getWorldLocation();
    int region = WorldPoint.fromLocalInstance(client, LocalPoint.fromWorld(client, wp)).getRegionID();
    
    if (region != MiasmaTilesData.REGION_ID)
      return null;

    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
        config.thinOutline() ? RenderingHints.VALUE_ANTIALIAS_OFF
            : RenderingHints.VALUE_ANTIALIAS_ON);
    g.setStroke(new BasicStroke(config.thinOutline() ? 1 : 2));

    for (int[] tile_data : MiasmaTilesData.TILES) {
      int x = tile_data[0] + 16;
      int y = tile_data[1] + 32;
      int color = tile_data[2];
      
      if (color == MiasmaTilesData.BURN && config.showBurnTiles()) {
        draw_tile(g, x, y, config.burnTileColor());
      } else if (color == MiasmaTilesData.OLM && config.showOlmTiles()) {
        draw_tile(g, x, y, config.olmTileColor());
      }
    }

    return null;
  }

  private void draw_tile(Graphics2D g, int x, int y, Color c) {
    g.setColor(c);
    // West
    line(g, x, y, x, y + 1);
    // East
    line(g, x + 1, y, x + 1, y + 1);
    // South
    line(g, x, y, x + 1, y);
    // North
    line(g, x, y + 1, x + 1, y + 1);
  }

  private void line(Graphics g, int x0, int y0, int x1, int y1) {
    if (x0 < 0 || y0 < 0 || x1 < 0 || y1 < 0)
      return;

    if (x0 >= 104 || y0 >= 104 || x1 >= 104 || y1 >= 104)
      return;

    int p = client.getPlane();
    int[][][] h = client.getTileHeights();

    Point p0 = Perspective.localToCanvas(client, x0 << 7, y0 << 7,
        h[p][x0][y0]);
    Point p1 = Perspective.localToCanvas(client, x1 << 7, y1 << 7,
        h[p][x1][y1]);

    if (p0 != null && p1 != null)
      g.drawLine(p0.getX(), p0.getY(), p1.getX(), p1.getY());
  }

}

package de0.miasmatiles;

import javax.inject.Inject;

import com.google.inject.Provides;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(name = "Miasma Tiles", description = "Displays burn tiles for use in Olm masses")
public class MiasmaTilesPlugin extends Plugin {

  @Inject
  private OverlayManager overlayManager;

  @Inject
  private MiasmaTilesOverlay overlay;

  @Provides
  MiasmaTilesConfig provideConfig(ConfigManager configManager) {
    return configManager.getConfig(MiasmaTilesConfig.class);
  }

  @Override
  protected void startUp() throws Exception {
    overlayManager.add(overlay);
  }

  @Override
  protected void shutDown() throws Exception {
    overlayManager.remove(overlay);
  }

}

