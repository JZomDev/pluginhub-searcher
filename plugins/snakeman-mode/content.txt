package com.snakemanmode;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SnakemanModePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SnakemanModePlugin.class);
		RuneLite.main(args);
	}
}
package com.snakemanmode;

import com.google.common.base.Strings;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Inject;
import com.google.inject.Provides;
import java.awt.Color;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.GameState;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Model;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.Skill;
import net.runelite.api.SpriteID;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.StatChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
	name = "Snakeman Mode",
	description = "The snake game with chunks. Find fruits to grow bigger, or get stuck",
	tags = {"snake", "game", "mode", "chunk", "fruit"}
)
public class SnakemanModePlugin extends Plugin
{
	public static final String CONFIG_GROUP = "snakemanmode";
	public static final String CONFIG_RESET_KEY = "lastUnlockXp";
	public static final int CONFIG_RESET_VALUE = 0;
	private static final String CONFIG_KEY_FRUIT_CHUNK = "fruit_chunk";
	private static final String CONFIG_KEY_CHUNKS = "chunks";
	private static final String CHUNK = ColorUtil.wrapWithColorTag("Chunk", JagexColors.MENU_TARGET);
	private static final String PATH_FRUIT_IMAGE = "fruit_image.png";
	private static final String PATH_FRUIT_IMAGE_ICON = "fruit_image_icon.png";
	private static final String UNLOCK = "Unlock";
	private static final String WALK_HERE = "Walk here";
	private static final int FRUIT_MODEL_ID = 30124;
	private static final WorldPoint FIRST_FRUIT_LOCATION = new WorldPoint(3227, 3244, 0);
	private static final WorldPoint LUMBRIDGE_SPAWN_POINT = new WorldPoint(3221, 3219, 0);

	@Getter(AccessLevel.PACKAGE)
	private final List<SnakemanModeChunk> chunks = new ArrayList<>();

	@Getter(AccessLevel.PACKAGE)
	private SnakemanModeChunk fruitChunk;
	private BufferedImage fruitImage;
	private BufferedImage fruitImageIcon;
	private BufferedImage minimapSpriteFixed;
	private BufferedImage minimapSpriteResizeable;
	private Area minimapClipFixed;
	private Area minimapClipResizeable;
	private RuneLiteObject fruit;
	private long lastOverallExperience;
	private int startTickCount;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private SnakemanModeConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private Gson gson;

	@Inject
	private SnakemanModeInfoOverlay infoOverlay;

	@Inject
	private ItemManager itemManager;

	@Inject
	private SnakemanModeMinimapOverlay minimapOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private SnakemanModeSceneOverlay sceneOverlay;

	@Inject
	private SpriteManager spriteManager;

	@Inject
	private SnakemanModeWorldMapOverlay worldMapOverlay;

	@Inject
	private WorldMapPointManager worldMapPointManager;

	@Provides
	SnakemanModeConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SnakemanModeConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		loadChunks();
		loadFruitChunk();

		clientThread.invokeLater(this::showFruit);

		overlayManager.add(infoOverlay);
		overlayManager.add(minimapOverlay);
		overlayManager.add(sceneOverlay);
		overlayManager.add(worldMapOverlay);

		if (lastOverallExperience == 0)
		{
			lastOverallExperience = client.getOverallExperience();
		}

		startTickCount = client.getTickCount();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(infoOverlay);
		overlayManager.remove(minimapOverlay);
		overlayManager.remove(sceneOverlay);
		overlayManager.remove(worldMapOverlay);

		worldMapPointManager.removeIf(SnakemanModeWorldMapPoint.class::isInstance);
		clientThread.invokeLater(this::removeFruit);

		chunks.clear();
	}

	@Subscribe
	public void onMenuEntryAdded(final MenuEntryAdded event)
	{
		if (client.isKeyPressed(KeyCode.KC_SHIFT) &&
			event.getOption().equals(WALK_HERE) &&
			event.getTarget().isEmpty() &&
			getAvailableUnlocks() >= 1 &&
			isNearbyChunk() &&
			!isUnlockedChunk())
		{
			client.createMenuEntry(-1)
				.setOption(UNLOCK)
				.setTarget(CHUNK)
				.setParam0(event.getActionParam0())
				.setParam1(event.getActionParam1())
				.setIdentifier(event.getIdentifier())
				.setType(MenuAction.RUNELITE)
				.onClick(this::unlockChunk);
		}
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event)
	{
		if (GameState.LOGGED_IN.equals(event.getGameState()))
		{
			showFruit();

			if (lastOverallExperience == 0)
			{
				lastOverallExperience = client.getOverallExperience();
			}
		}
	}

	@Subscribe
	public void onGameTick(final GameTick event)
	{
		if (client.getLocalPlayer() == null || fruitChunk == null)
		{
			return;
		}

		// Unlock chunks automatically when walking into not yet unlocked chunks with enough xp gained
		SnakemanModeChunk chunk = new SnakemanModeChunk(client, client.getLocalPlayer().getWorldLocation());
		if (getAvailableUnlocks() >= 1)
		{
			addChunk(chunk);
		}
	}

	@Subscribe
	public void onStatChanged(final StatChanged event)
	{
		if (client.getLocalPlayer() == null || !GameState.LOGGED_IN.equals(client.getGameState()))
		{
			return;
		}

		Skill skill = event.getSkill();

		long xpGained = client.getOverallExperience() - lastOverallExperience;

		// Do not progress the xp until the next unlock if the skill has been excluded by the user,
		// and only account for xp gained in your unlocked chunks
		if (xpGained > 0 &&
			startTickCount != client.getTickCount() &&
			((Skill.AGILITY.equals(skill) && !config.excludeAgility()) ||
			(Skill.ATTACK.equals(skill) && !config.excludeAttack()) ||
			(Skill.CONSTRUCTION.equals(skill) && !config.excludeConstruction()) ||
			(Skill.COOKING.equals(skill) && !config.excludeCooking()) ||
			(Skill.CRAFTING.equals(skill) && !config.excludeCrafting()) ||
			(Skill.DEFENCE.equals(skill) && !config.excludeDefence()) ||
			(Skill.FARMING.equals(skill) && !config.excludeFarming()) ||
			(Skill.FIREMAKING.equals(skill) && !config.excludeFiremaking()) ||
			(Skill.FISHING.equals(skill) && !config.excludeFishing()) ||
			(Skill.FLETCHING.equals(skill) && !config.excludeFletching()) ||
			(Skill.HERBLORE.equals(skill) && !config.excludeHerblore()) ||
			(Skill.HITPOINTS.equals(skill) && !config.excludeHitpoints()) ||
			(Skill.HUNTER.equals(skill) && !config.excludeHunter()) ||
			(Skill.MAGIC.equals(skill) && !config.excludeMagic()) ||
			(Skill.MINING.equals(skill) && !config.excludeMining()) ||
			(Skill.PRAYER.equals(skill) && !config.excludePrayer()) ||
			(Skill.RANGED.equals(skill) && !config.excludeRanged()) ||
			(Skill.RUNECRAFT.equals(skill) && !config.excludeRunecraft()) ||
			(Skill.SLAYER.equals(skill) && !config.excludeSlayer()) ||
			(Skill.SMITHING.equals(skill) && !config.excludeSmithing()) ||
			(Skill.STRENGTH.equals(skill) && !config.excludeStrength()) ||
			(Skill.THIEVING.equals(skill) && !config.excludeThieving()) ||
			(Skill.WOODCUTTING.equals(skill) && !config.excludeWoodcutting())) &&
			chunks.contains(new SnakemanModeChunk(client, client.getLocalPlayer().getWorldLocation())))
		{
			config.unlockProgress(config.unlockProgress() + xpGained);
		}

		lastOverallExperience = client.getOverallExperience();
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event)
	{
		if (!CONFIG_GROUP.equals(event.getGroup()))
		{
			return;
		}

		// Toggle the fruit indicator on the world map
		worldMapPointManager.removeIf(SnakemanModeWorldMapPoint.class::isInstance);
		if (config.showFruitIndicator() && fruitChunk != null)
		{
			worldMapPointManager.add(new SnakemanModeWorldMapPoint(fruitChunk.getCenter(), getFruitImage()));
		}

		// Add additional plugin resetting to the config reset button
		if (CONFIG_RESET_KEY.equals(event.getKey()))
		{
			if (Integer.toString(CONFIG_RESET_VALUE).equals(event.getNewValue()))
			{
				lastOverallExperience = client.getOverallExperience();
				config.unlockProgress(0);
				config.lastUnlockXp(lastOverallExperience);

				// Reset all unlocked chunks and restart in Lumbridge
				chunks.clear();
				saveChunks(null);
				loadChunks();

				// Reset to initial fruit chunk in Lumbridge
				removeFruit();
				saveFruitChunk();
				loadFruitChunk();
				showFruit();
			}
		}
	}

	public long getXpToUnlock()
	{
		int unlockXp = config.unlockXp();
		long unlockProgress = config.unlockProgress();
		return Math.min(Math.max(unlockXp - unlockProgress, 0), config.unlockXp());
	}

	public long getAvailableUnlocks()
	{
		long unlockProgress = config.unlockProgress();
		int unlockXp = config.unlockXp();
		if (unlockXp <= 0)
		{
			return Integer.MAX_VALUE;
		}

		return unlockProgress / unlockXp;
	}

	public BufferedImage getFruitImageIcon()
	{
		if (fruitImageIcon != null)
		{
			return fruitImageIcon;
		}

		fruitImageIcon = ImageUtil.loadImageResource(getClass(), PATH_FRUIT_IMAGE_ICON);

		return  fruitImageIcon;
	}

	public Widget getMinimapDrawWidget()
	{
		if (client.isResized())
		{
			if (client.getVar(Varbits.SIDE_PANELS) == 1)
			{
				return client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_DRAW_AREA);
			}
			return client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_STONES_DRAW_AREA);
		}
		return client.getWidget(WidgetInfo.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
	}

	public Area getMinimapClipArea()
	{
		if (client.isResized())
		{
			if (minimapClipResizeable != null)
			{
				return minimapClipResizeable;
			}
			minimapClipResizeable = new Area(bufferedImageToPolygon(getMinimapSprite()));
			return minimapClipResizeable;
		}
		if (minimapClipFixed != null)
		{
			return minimapClipFixed;
		}
		minimapClipFixed = new Area(bufferedImageToPolygon(getMinimapSprite()));
		return minimapClipFixed;
	}

	public boolean isUnlockedChunk(WorldPoint worldPoint, boolean includeWhitelistedAreas)
	{
		if (includeWhitelistedAreas)
		{
			for (WorldArea area : SnakemanModeAreas.WHITELISTED_AREA)
			{
				if (includeWhitelistedAreas = area.distanceTo(worldPoint) == 0)
				{
					break;
				}
			}
		}
		return includeWhitelistedAreas || chunks.contains(new SnakemanModeChunk(client, worldPoint));
	}

	private void loadChunks()
	{
		chunks.clear();
		chunks.addAll(getChunkIds().stream().map(SnakemanModeChunk::new).collect(Collectors.toList()));
		if (chunks.isEmpty())
		{
			chunks.add(new SnakemanModeChunk(client, LUMBRIDGE_SPAWN_POINT));
		}
	}

	private void saveChunks()
	{
		saveChunks(getChunkIds());
	}

	private void saveChunks(List<Integer> chunkIds)
	{
		if (chunkIds == null || chunkIds.isEmpty())
		{
			configManager.unsetConfiguration(CONFIG_GROUP, CONFIG_KEY_CHUNKS);
			return;
		}

		configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_CHUNKS, gson.toJson(chunkIds));
	}

	private void loadFruitChunk()
	{
		String json = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_FRUIT_CHUNK);

		if (Strings.isNullOrEmpty(json))
		{
			fruitChunk = new SnakemanModeChunk(client, FIRST_FRUIT_LOCATION);
			saveFruitChunk();
			return;
		}

		fruitChunk = gson.fromJson(json, new TypeToken<SnakemanModeChunk>(){}.getType());
	}

	private void saveFruitChunk()
	{
		if (fruitChunk == null)
		{
			configManager.unsetConfiguration(CONFIG_GROUP, CONFIG_KEY_FRUIT_CHUNK);
			return;
		}
		configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_FRUIT_CHUNK, gson.toJson(fruitChunk));
	}

	private void unlockChunk(MenuEntry menuEntry)
	{
		if (client.getSelectedSceneTile() == null)
		{
			return;
		}

		addChunk(new SnakemanModeChunk(client, client.getSelectedSceneTile().getWorldLocation()));
	}

	private void addChunk(SnakemanModeChunk chunk)
	{
		if (chunks.contains(chunk))
		{
			return;
		}

		chunks.add(0, chunk);
		config.unlockProgress(0);
		config.lastUnlockXp(client.getOverallExperience());
		if (chunk.equals(fruitChunk))
		{
			rollFruitChunk();
		}
		else
		{
			chunks.remove(chunks.size() - 1);
		}

		saveChunks();
	}

	private void showFruit()
	{
		if (client.getLocalPlayer() == null || fruitChunk == null)
		{
			return;
		}

		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		WorldPoint fruitChunkCenter = fruitChunk.getCenter();

		// Display a fruit on the world map
		if (config.showFruitIndicator())
		{
			worldMapPointManager.removeIf(SnakemanModeWorldMapPoint.class::isInstance);
			worldMapPointManager.add(new SnakemanModeWorldMapPoint(fruitChunkCenter, getFruitImage()));
		}

		// Display a fruit in the fruit chunk when the player is nearby
		if (playerLocation.distanceTo(fruitChunkCenter) < Constants.SCENE_SIZE)
		{
			fruit = client.createRuneLiteObject();

			LocalPoint fruitLocation = LocalPoint.fromWorld(client, fruitChunkCenter);
			if (fruitLocation == null)
			{
				return;
			}
			fruitLocation = new LocalPoint(fruitLocation.getX() + 64, fruitLocation.getY() + 64);

			Model model = client.loadModel(FRUIT_MODEL_ID);

			if (model == null)
			{
				final Instant loadTimeOutInstant = Instant.now().plus(Duration.ofSeconds(5));

				clientThread.invoke(() ->
				{
					if (Instant.now().isAfter(loadTimeOutInstant))
					{
						return true;
					}

					Model reloadedModel = client.loadModel(FRUIT_MODEL_ID);

					if (reloadedModel == null)
					{
						return false;
					}

					fruit.setModel(reloadedModel);

					return true;
				});
			}
			else
			{
				fruit.setModel(model);
			}

			fruit.setLocation(fruitLocation, fruitChunkCenter.getPlane());
			fruit.setActive(true);
		}
	}

	private void removeFruit()
	{
		if (fruit != null)
		{
			fruit.setActive(false);
		}
		fruit = null;
		fruitChunk = null;
	}

	private void rollFruitChunk()
	{
		int lastId = -1;
		if (fruitChunk != null)
		{
			lastId = fruitChunk.getId();
		}

		removeFruit();

		Random random = new Random();

		List<Integer> fruitChunks = config.onlyFreeToPlay() ? SnakemanModeAreas.FREE_TO_PLAY : SnakemanModeAreas.FRUIT_AREA;

		int idx = 0;
		int size = fruitChunks.size();
		while (++idx < Integer.MAX_VALUE)
		{
			int i = random.nextInt(size);

			int id = fruitChunks.get(i);

			if (id == lastId || (config.onlyFreeToPlay() && !SnakemanModeAreas.FRUIT_AREA.contains(id)))
			{
				continue;
			}

			SnakemanModeChunk chunk = new SnakemanModeChunk(id);

			if (!chunks.contains(chunk))
			{
				fruitChunk = chunk;
				break;
			}
		}

		if (fruitChunk == null)
		{
			fruitChunk = new SnakemanModeChunk(client, FIRST_FRUIT_LOCATION);
		}

		saveFruitChunk();
		showFruit();
	}

	private boolean isNearbyChunk()
	{
		if (client.getSelectedSceneTile() == null || client.getLocalPlayer() == null)
		{
			return false;
		}

		SnakemanModeChunk selectedChunk = new SnakemanModeChunk(client, client.getSelectedSceneTile().getWorldLocation());
		SnakemanModeChunk playerChunk = new SnakemanModeChunk(client, client.getLocalPlayer().getWorldLocation());

		List<SnakemanModeChunk> nearbyChunks = playerChunk.getNeighbourChunks(client);
		nearbyChunks.add(playerChunk);

		return nearbyChunks.contains(selectedChunk) && chunks.contains(playerChunk);
	}

	private boolean isUnlockedChunk()
	{
		if (client.getSelectedSceneTile() == null)
		{
			return true;
		}
		return isUnlockedChunk(client.getSelectedSceneTile().getWorldLocation(), false);
	}

	private BufferedImage getFruitImage()
	{
		if (fruitImage != null)
		{
			return fruitImage;
		}

		fruitImage = ImageUtil.loadImageResource(getClass(), PATH_FRUIT_IMAGE);

		return fruitImage;
	}

	private List<Integer> getChunkIds()
	{
		if (!chunks.isEmpty())
		{
			return chunks.stream().map(SnakemanModeChunk::getId).collect(Collectors.toList());
		}

		String json = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_CHUNKS);

		if (Strings.isNullOrEmpty(json))
		{
			return new ArrayList<>();
		}

		return gson.fromJson(json, new TypeToken<List<Integer>>(){}.getType());
	}

	private BufferedImage getMinimapSprite()
	{
		if (client.isResized())
		{
			if (minimapSpriteResizeable != null)
			{
				return minimapSpriteResizeable;
			}
			minimapSpriteResizeable = spriteManager.getSprite(SpriteID.RESIZEABLE_MODE_MINIMAP_ALPHA_MASK, 0);
			return minimapSpriteResizeable;
		}
		if (minimapSpriteFixed != null)
		{
			return minimapSpriteFixed;
		}
		minimapSpriteFixed = spriteManager.getSprite(SpriteID.FIXED_MODE_MINIMAP_ALPHA_MASK, 0);
		return minimapSpriteFixed;
	}

	private Polygon bufferedImageToPolygon(BufferedImage image)
	{
		Color outsideColour = null;
		Color previousColour;
		final int width = image.getWidth();
		final int height = image.getHeight();
		List<Point> points = new ArrayList<>();
		for (int y = 0; y < height; y++)
		{
			previousColour = outsideColour;
			for (int x = 0; x < width; x++)
			{
				int rgb = image.getRGB(x, y);
				int a = (rgb & 0xff000000) >>> 24;
				int r   = (rgb & 0x00ff0000) >> 16;
				int g = (rgb & 0x0000ff00) >> 8;
				int b  = (rgb & 0x000000ff) >> 0;
				Color colour = new Color(r, g, b, a);
				if (x == 0 && y == 0)
				{
					outsideColour = colour;
					previousColour = colour;
				}
				if (!colour.equals(outsideColour) && previousColour.equals(outsideColour))
				{
					points.add(new Point(x, y));
				}
				if ((colour.equals(outsideColour) || x == (width - 1)) && !previousColour.equals(outsideColour))
				{
					points.add(0, new Point(x, y));
				}
				previousColour = colour;
			}
		}
		int offsetX = 0;
		int offsetY = 0;
		Widget minimapDrawWidget = getMinimapDrawWidget();
		if (minimapDrawWidget != null)
		{
			offsetX = minimapDrawWidget.getBounds().x;
			offsetY = minimapDrawWidget.getBounds().y;
		}
		Polygon polygon = new Polygon();
		for (Point point : points)
		{
			polygon.addPoint(point.x + offsetX, point.y + offsetY);
		}
		return polygon;
	}
}

package com.snakemanmode;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(SnakemanModePlugin.CONFIG_GROUP)
public interface SnakemanModeConfig extends Config
{
	@ConfigSection(
		name = "Gameplay settings",
		description = "Settings for the gameplay",
		position = 0
	)
	String sectionGameplay = "sectionGameplay";

	@ConfigSection(
		name = "Skill settings",
		description = "Settings for the permitted skills to gain XP in",
		position = 1,
		closedByDefault = true
	)
	String sectionSkills = "sectionSkills";

	@ConfigSection(
		name = "Display settings",
		description = "Settings for the visual elements",
		position = 2
	)
	String sectionDisplay = "sectionDisplay";

	@ConfigSection(
		name = "Scene settings",
		description = "Settings for colouring the visual elements in the game scene",
		position = 3,
		closedByDefault = true
	)
	String sectionScene = "sectionScene";

	@ConfigSection(
		name = "Minimap settings",
		description = "Settings for colouring the visual elements on the minimap",
		position = 4,
		closedByDefault = true
	)
	String sectionMinimap = "sectionMinimap";

	@ConfigSection(
		name = "World map settings",
		description = "Settings for colouring the visual elements on the world map",
		position = 5,
		closedByDefault = true
	)
	String sectionWorldmap = "sectionWorldmap";

	@Range(
		min = 1000
	)
	@ConfigItem(
		keyName = "unlockXp",
		name = "Unlock xp",
		description = "The amount of experience required to unlock a new chunk",
		section = sectionGameplay,
		position = 6
	)
	default int unlockXp()
	{
		return 1000;
	}

	@ConfigItem(
		keyName = "onlyFreeToPlay",
		name = "Free-to-play only",
		description = "Whether to restrict fruit chunk generation to the free-to-play part of the world map",
		section = sectionGameplay,
		position = 7
	)
	default boolean onlyFreeToPlay()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeAgility",
		name = "Exclude Agility XP",
		description = "Whether to disallow XP gained in the Agility skill towards a new chunk unlock",
		section = sectionSkills,
		position = 8
	)
	default boolean excludeAgility()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeAttack",
		name = "Exclude Attack XP",
		description = "Whether to disallow XP gained in the Attack skill towards a new chunk unlock",
		section = sectionSkills,
		position = 9
	)
	default boolean excludeAttack()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeConstruction",
		name = "Exclude Construction XP",
		description = "Whether to disallow XP gained in the Construction skill towards a new chunk unlock",
		section = sectionSkills,
		position = 10
	)
	default boolean excludeConstruction()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeCooking",
		name = "Exclude Cooking XP",
		description = "Whether to disallow XP gained in the Cooking skill towards a new chunk unlock",
		section = sectionSkills,
		position = 11
	)
	default boolean excludeCooking()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeCrafting",
		name = "Exclude Crafting XP",
		description = "Whether to disallow XP gained in the Crafting skill towards a new chunk unlock",
		section = sectionSkills,
		position = 12
	)
	default boolean excludeCrafting()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeDefence",
		name = "Exclude Defence XP",
		description = "Whether to disallow XP gained in the Defence skill towards a new chunk unlock",
		section = sectionSkills,
		position = 13
	)
	default boolean excludeDefence()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeFarming",
		name = "Exclude Farming XP",
		description = "Whether to disallow XP gained in the Farming skill towards a new chunk unlock",
		section = sectionSkills,
		position = 14
	)
	default boolean excludeFarming()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeFiremaking",
		name = "Exclude Firemaking XP",
		description = "Whether to disallow XP gained in the Firemaking skill towards a new chunk unlock",
		section = sectionSkills,
		position = 15
	)
	default boolean excludeFiremaking()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeFishing",
		name = "Exclude Fishing XP",
		description = "Whether to disallow XP gained in the Fishing skill towards a new chunk unlock",
		section = sectionSkills,
		position = 16
	)
	default boolean excludeFishing()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeFletching",
		name = "Exclude Fletching XP",
		description = "Whether to disallow XP gained in the Fletching skill towards a new chunk unlock",
		section = sectionSkills,
		position = 17
	)
	default boolean excludeFletching()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeHerblore",
		name = "Exclude Herblore XP",
		description = "Whether to disallow XP gained in the Herblore skill towards a new chunk unlock",
		section = sectionSkills,
		position = 18
	)
	default boolean excludeHerblore()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeHitpoints",
		name = "Exclude Hitpoints XP",
		description = "Whether to disallow XP gained in the Hitpoints skill towards a new chunk unlock",
		section = sectionSkills,
		position = 19
	)
	default boolean excludeHitpoints()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeHunter",
		name = "Exclude Hunter XP",
		description = "Whether to disallow XP gained in the Hunter skill towards a new chunk unlock",
		section = sectionSkills,
		position = 20
	)
	default boolean excludeHunter()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeMagic",
		name = "Exclude Magic XP",
		description = "Whether to disallow XP gained in the Magic skill towards a new chunk unlock",
		section = sectionSkills,
		position = 21
	)
	default boolean excludeMagic()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeMining",
		name = "Exclude Mining XP",
		description = "Whether to disallow XP gained in the Mining skill towards a new chunk unlock",
		section = sectionSkills,
		position = 22
	)
	default boolean excludeMining()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludePrayer",
		name = "Exclude Prayer XP",
		description = "Whether to disallow XP gained in the Prayer skill towards a new chunk unlock",
		section = sectionSkills,
		position = 23
	)
	default boolean excludePrayer()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeRanged",
		name = "Exclude Ranged XP",
		description = "Whether to disallow XP gained in the Ranged skill towards a new chunk unlock",
		section = sectionSkills,
		position = 24
	)
	default boolean excludeRanged()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeRunecraft",
		name = "Exclude Runecraft XP",
		description = "Whether to disallow XP gained in the Runecraft skill towards a new chunk unlock",
		section = sectionSkills,
		position = 25
	)
	default boolean excludeRunecraft()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeSlayer",
		name = "Exclude Slayer XP",
		description = "Whether to disallow XP gained in the Slayer skill towards a new chunk unlock",
		section = sectionSkills,
		position = 26
	)
	default boolean excludeSlayer()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeSmithing",
		name = "Exclude Smithing XP",
		description = "Whether to disallow XP gained in the Smithing skill towards a new chunk unlock",
		section = sectionSkills,
		position = 27
	)
	default boolean excludeSmithing()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeStrength",
		name = "Exclude Strength XP",
		description = "Whether to disallow XP gained in the Strength skill towards a new chunk unlock",
		section = sectionSkills,
		position = 28
	)
	default boolean excludeStrength()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeThieving",
		name = "Exclude Thieving XP",
		description = "Whether to disallow XP gained in the Thieving skill towards a new chunk unlock",
		section = sectionSkills,
		position = 29
	)
	default boolean excludeThieving()
	{
		return false;
	}

	@ConfigItem(
		keyName = "excludeWoodcutting",
		name = "Exclude Woodcutting XP",
		description = "Whether to disallow XP gained in the Woodcutting skill towards a new chunk unlock",
		section = sectionSkills,
		position = 30
	)
	default boolean excludeWoodcutting()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showChunkNumber",
		name = "Show chunk number",
		description = "Whether to display a number on the world map indicating the order in which the chunk was unlocked",
		section = sectionDisplay,
		position = 31
	)
	default boolean showChunkNumber()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showFruitMapIndicator",
		name = "Show fruit map indicator",
		description = "Whether to display a focus point indicator for the fruit chunk on the world map",
		section = sectionDisplay,
		position = 32
	)
	default boolean showFruitIndicator()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showInfo",
		name = "Show info box",
		description = "Whether to display info about number of unlocked chunks and xp until next unlock in an overlay",
		section = sectionDisplay,
		position = 33
	)
	default boolean showInfo()
	{
		return true;
	}

	@ConfigItem(
		keyName = "drawOutlineOnly",
		name = "Draw only outline",
		description = "Whether to only draw the combined chunk border outline and not individual chunk borders",
		section = sectionDisplay,
		position = 34
	)
	default boolean drawOutlineOnly()
	{
		return false;
	}

	@ConfigItem(
		keyName = "chunkBorderWidth",
		name = "Chunk border width",
		description = "The width of the chunk border in the game scene",
		section = sectionDisplay,
		position = 35
	)
	default double chunkBorderWidth()
	{
		return 2;
	}

	@Alpha
	@ConfigItem(
		keyName = "unlockedBorderColourScene",
		name = "Unlocked border",
		description = "The colour of the unlocked chunk borders in the game scene",
		section = sectionScene,
		position = 36
	)
	default Color unlockedBorderColourScene()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
		keyName = "unlockedFillColourScene",
		name = "Unlocked fill",
		description = "The fill colour of the unlocked chunks in the game scene",
		section = sectionScene,
		position = 37
	)
	default Color unlockedFillColourScene()
	{
		return new Color(0, 255, 0, 0);
	}

	@Alpha
	@ConfigItem(
		keyName = "lockedFillColourScene",
		name = "Locked fill",
		description = "The fill colour of the locked chunks in the game scene",
		section = sectionScene,
		position = 38
	)
	default Color lockedFillColourScene()
	{
		return new Color(20, 40, 80, 128);
	}

	@Alpha
	@ConfigItem(
		keyName = "fruitChunkBorderColourScene",
		name = "Fruit chunk border",
		description = "The colour of the snake fruit chunk borders in the game scene",
		section = sectionScene,
		position = 39
	)
	default Color fruitChunkBorderColourScene()
	{
		return Color.MAGENTA;
	}

	@Alpha
	@ConfigItem(
		keyName = "fruitChunkFillColourScene",
		name = "Fruit chunk fill",
		description = "The fill colour of the snake fruit chunks in the game scene",
		section = sectionScene,
		position = 40
	)
	default Color fruitChunkFillColourScene()
	{
		return new Color(255, 0, 255, 64);
	}

	@Alpha
	@ConfigItem(
		keyName = "unlockedBorderColourMinimap",
		name = "Unlocked border",
		description = "The colour of the unlocked chunk borders on the minimap",
		section = sectionMinimap,
		position = 41
	)
	default Color unlockedBorderColourMinimap()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
		keyName = "unlockedFillColourMinimap",
		name = "Unlocked fill",
		description = "The fill colour of the unlocked chunks on the minimap",
		section = sectionMinimap,
		position = 42
	)
	default Color unlockedFillColourMinimap()
	{
		return new Color(0, 255, 0, 0);
	}

	@Alpha
	@ConfigItem(
		keyName = "lockedFillColourMinimap",
		name = "Locked fill",
		description = "The fill colour of the locked chunks on the minimap",
		section = sectionMinimap,
		position = 43
	)
	default Color lockedFillColourMinimap()
	{
		return new Color(20, 40, 80, 128);
	}

	@Alpha
	@ConfigItem(
		keyName = "fruitChunkBorderColourMinimap",
		name = "Fruit chunk border",
		description = "The colour of the snake fruit chunk borders on the minimap",
		section = sectionMinimap,
		position = 44
	)
	default Color fruitChunkBorderColourMinimap()
	{
		return Color.MAGENTA;
	}

	@Alpha
	@ConfigItem(
		keyName = "fruitChunkFillColourMinimap",
		name = "Fruit chunk fill",
		description = "The fill colour of the snake fruit chunks on the minimap",
		section = sectionMinimap,
		position = 45
	)
	default Color fruitChunkFillColourMinimap()
	{
		return new Color(255, 0, 255, 64);
	}

	@Alpha
	@ConfigItem(
		keyName = "unlockedBorderColourWorldmap",
		name = "Unlocked border",
		description = "The colour of the unlocked chunk borders on the world map",
		section = sectionWorldmap,
		position = 46
	)
	default Color unlockedBorderColourWorldmap()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
		keyName = "unlockedFillColourWorldmap",
		name = "Unlocked fill",
		description = "The fill colour of the unlocked chunks on the world map",
		section = sectionWorldmap,
		position = 47
	)
	default Color unlockedFillColourWorldmap()
	{
		return new Color(0, 255, 0, 0);
	}

	@Alpha
	@ConfigItem(
		keyName = "lockedFillColourWorldmap",
		name = "Locked fill",
		description = "The fill colour of the locked chunks on the world map",
		section = sectionWorldmap,
		position = 48
	)
	default Color lockedFillColourWorldmap()
	{
		return new Color(20, 40, 80, 128);
	}

	@Alpha
	@ConfigItem(
		keyName = "fruitChunkBorderColourWorldmap",
		name = "Fruit chunk border",
		description = "The colour of the snake fruit chunk borders on the world map",
		section = sectionWorldmap,
		position = 49
	)
	default Color fruitChunkBorderColourWorldmap()
	{
		return Color.MAGENTA;
	}

	@Alpha
	@ConfigItem(
		keyName = "fruitChunkFillColourWorldmap",
		name = "Fruit chunk fill",
		description = "The fill colour of the snake fruit chunks on the world map",
		section = sectionWorldmap,
		position = 50
	)
	default Color fruitChunkFillColourWorldmap()
	{
		return new Color(255, 0, 255, 64);
	}

	@ConfigItem(
		keyName = SnakemanModePlugin.CONFIG_RESET_KEY,
		name = "Last unlock xp",
		description = "The number of overall experience at the time of the last unlock",
		position = 51,
		hidden = true
	)
	default long lastUnlockXp()
	{
		return SnakemanModePlugin.CONFIG_RESET_VALUE;
	}

	@ConfigItem(
		keyName = "lastUnlockXp",
		name = "Set last unlock xp",
		description = "",
		position = 52
	)
	void lastUnlockXp(long xp);

	@ConfigItem(
		keyName = "unlockProgress",
		name = "Unlock progress",
		description = "The number of experience gained towards the next unlock",
		position = 53,
		hidden = true
	)
	default long unlockProgress()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "unlockProgress",
		name = "Set unlock progress",
		description = "",
		position = 54
	)
	void unlockProgress(long xp);
}

package com.snakemanmode;

import java.util.ArrayList;
import java.util.List;
import lombok.EqualsAndHashCode;
import net.runelite.api.Client;
import static net.runelite.api.Constants.CHUNK_SIZE;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;

@EqualsAndHashCode
public class SnakemanModeChunk
{
	private final int z;
	private final int i;
	private final int j;
	private final int x;
	private final int y;

	SnakemanModeChunk(Client client, WorldPoint worldPoint)
	{
		if (client.isInInstancedRegion())
		{
			LocalPoint localPoint = LocalPoint.fromWorld(client, worldPoint);
			if (localPoint != null)
			{
				worldPoint = WorldPoint.fromLocalInstance(client, localPoint);
			}
		}
		z = worldPoint.getPlane();
		i = worldPoint.getX() >> 6;
		j = worldPoint.getY() >> 6;
		x = worldPoint.getRegionX() / CHUNK_SIZE;
		y = worldPoint.getRegionY() / CHUNK_SIZE;
	}

	SnakemanModeChunk(int id)
	{
		z = (id >> (32 - 9 - 2)) & (4 - 1);
		i = (id >> (32 - 9 - 2 - 7)) & (128 - 1);
		j = (id >> (32 - 9 - 2 - 7 - 8)) & (256 - 1);
		x = (id >> (32 - 9 - 2 - 7 - 8 - 3)) & (8 - 1);
		y = (id >> (32 - 9 - 2 - 7 - 8 - 3 - 3)) & (8 - 1);
	}

	int getId()
	{
		return getId(z, i, j, x, y);
	}

	static int getId(int z, int i, int j, int x, int y)
	{
		int Z = (z << (32 - 9 - 2));
		int I = (i << (32 - 9 - 2 - 7));
		int J = (j << (32 - 9 - 2 - 7 - 8));
		int X = (x << (32 - 9 - 2 - 7 - 8 - 3));
		int Y = (y << (32 - 9 - 2 - 7 - 8 - 3 - 3));
		return Z | I | J | X | Y;
	}

	int getSize()
	{
		return CHUNK_SIZE;
	}

	WorldPoint getBottomLeft()
	{
		return new WorldPoint((i << 6) + x * getSize(), (j << 6) + y * getSize(), z);
	}

	WorldPoint getCenter()
	{
		int offset = getSize() / 2 - (getSize() % 2 == 0 ? 1 : 0);
		return getBottomLeft().dx(offset).dy(offset);
	}

	List<SnakemanModeChunk> getNeighbourChunks(Client client)
	{
		List<SnakemanModeChunk> neighbours = new ArrayList<>();
		int offset = getSize();
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dx(-offset).dy(offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dy(offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dx(offset).dy(offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dx(-offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dx(offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dx(-offset).dy(-offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dy(-offset)));
		neighbours.add(new SnakemanModeChunk(client, getBottomLeft().dx(offset).dy(-offset)));
		return neighbours;
	}
}

package com.snakemanmode;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Area;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.worldmap.WorldMapOverlay;

public class SnakemanModeWorldMapOverlay extends Overlay
{
	private final Client client;
	private final SnakemanModeConfig config;
	private final SnakemanModePlugin plugin;

	@Inject
	private WorldMapOverlay worldMapOverlay;

	@Inject
	SnakemanModeWorldMapOverlay(Client client, SnakemanModeConfig config, SnakemanModePlugin plugin)
	{
		this.client = client;
		this.config = config;
		this.plugin = plugin;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.LOW);
		setLayer(OverlayLayer.MANUAL);
		drawAfterLayer(WidgetInfo.WORLD_MAP_VIEW);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		final Widget worldMapView = client.getWidget(WidgetInfo.WORLD_MAP_VIEW);
		if (worldMapView == null || worldMapView.isHidden() || worldMapView.getBounds() == null)
		{
			return null;
		}

		Area lockedArea = getWorldMapClipArea(worldMapView.getBounds());

		graphics.setClip(lockedArea);

		List<SnakemanModeChunk> chunks = plugin.getChunks();

		final boolean fillUnlocked = config.unlockedFillColourWorldmap().getAlpha() > 0;
		final boolean fillLocked = config.lockedFillColourWorldmap().getAlpha() > 0;
		final boolean fillFruitChunk = config.fruitChunkFillColourWorldmap().getAlpha() > 0;

		final boolean outlineUnlocked = config.unlockedBorderColourWorldmap().getAlpha() > 0;
		final boolean outlineFruitChunk = config.fruitChunkBorderColourWorldmap().getAlpha() > 0;

		Area chunkArea = new Area();
		for (SnakemanModeChunk chunk : chunks)
		{
			drawChunk(graphics, chunk.getBottomLeft(), chunk.getSize(), chunkArea,
				config.unlockedFillColourWorldmap(), config.unlockedBorderColourWorldmap(), chunks.indexOf(chunk));
		}
		if (config.drawOutlineOnly())
		{
			if (fillUnlocked)
			{
				graphics.setColor(config.unlockedFillColourWorldmap());
				graphics.fill(chunkArea);
			}
			if (outlineUnlocked)
			{
				graphics.setColor(config.unlockedBorderColourWorldmap());
				graphics.draw(chunkArea);
			}
		}

		lockedArea.subtract(chunkArea);
		for (WorldArea worldArea : SnakemanModeAreas.WHITELISTED_AREA)
		{
			lockedArea.subtract(getArea(worldArea.toWorldPoint(), worldArea.getWidth(), worldArea.getHeight()));
		}

		SnakemanModeChunk fruitChunk = plugin.getFruitChunk();
		if (fruitChunk != null)
		{
			Area fruitChunkArea = new Area();
			drawChunk(graphics, fruitChunk.getBottomLeft(), fruitChunk.getSize(), fruitChunkArea,
				config.fruitChunkFillColourWorldmap(), config.fruitChunkBorderColourWorldmap(), -1);
			if (config.drawOutlineOnly())
			{
				if (fillFruitChunk)
				{
					graphics.setColor(config.fruitChunkFillColourWorldmap());
					graphics.fill(fruitChunkArea);
				}
				if (outlineFruitChunk)
				{
					graphics.setColor(config.fruitChunkBorderColourWorldmap());
					graphics.draw(fruitChunkArea);
				}
			}
			lockedArea.subtract(fruitChunkArea);
		}

		if (fillLocked)
		{
			graphics.setColor(config.lockedFillColourWorldmap());
			graphics.fill(lockedArea);
		}

		return null;
	}

	private void drawChunk(Graphics2D graphics, WorldPoint bottomLeft, int diameter, Area outline, Color fillColour, Color borderColour, int idx)
	{
		if (client.getPlane() != bottomLeft.getPlane())
		{
			return;
		}

		boolean drawFill = fillColour.getAlpha() > 0;
		boolean drawOutline = borderColour.getAlpha() > 0;

		Area chunk = getArea(bottomLeft, diameter, diameter);
		if (!config.drawOutlineOnly())
		{
			if (drawFill)
			{
				graphics.setColor(fillColour);
				graphics.fill(chunk);
			}
			if (drawOutline)
			{
				graphics.setColor(borderColour);
				graphics.draw(chunk);
			}
		}
		if (config.showChunkNumber() && idx >= 0)
		{
			String s = "" + (idx + 1);
			int x = (int) (chunk.getBounds().getCenterX() - graphics.getFontMetrics().getStringBounds(s, graphics).getWidth() / 2 + 1);
			int y = (int) (chunk.getBounds().getCenterY() + graphics.getFontMetrics().getStringBounds(s, graphics).getHeight() / 2);
			graphics.setColor(Color.WHITE);
			graphics.drawString(s, x, y);
		}
		outline.add(chunk);
	}

	private Area getArea(WorldPoint bottomLeft, int width, int height)
	{
		final Point start = worldMapOverlay.mapWorldPointToGraphicsPoint(bottomLeft.dy(height));
		final Point end = worldMapOverlay.mapWorldPointToGraphicsPoint(bottomLeft.dx(width));

		if (start == null || end == null)
		{
			return new Area();
		}

		final int tileSize = (int) client.getRenderOverview().getWorldMapZoom();

		int x = start.getX();
		int y = start.getY();
		final int rectWidth = end.getX() - x;
		final int rectHeight = end.getY() - y;
		x -= tileSize / 2;
		y += tileSize / 2;

		return new Area(new Rectangle(x, y, rectWidth, rectHeight));
	}

	private Area getWorldMapClipArea(Rectangle baseRectangle)
	{
		final Widget overview = client.getWidget(WidgetInfo.WORLD_MAP_OVERVIEW_MAP);
		final Widget surfaceSelector = client.getWidget(WidgetInfo.WORLD_MAP_SURFACE_SELECTOR);

		Area clipArea = new Area(baseRectangle);

		if (overview != null && !overview.isHidden())
		{
			clipArea.subtract(new Area(overview.getBounds()));
		}
		if (surfaceSelector != null && !surfaceSelector.isHidden())
		{
			clipArea.subtract(new Area(surfaceSelector.getBounds()));
		}

		return clipArea;
	}
}

package com.snakemanmode;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class SnakemanModeMinimapOverlay extends Overlay
{
	private static final int TILE_SIZE = 4;

	private final Client client;
	private final SnakemanModeConfig config;
	private final SnakemanModePlugin plugin;

	@Inject
	SnakemanModeMinimapOverlay(Client client, SnakemanModeConfig config, SnakemanModePlugin plugin)
	{
		this.client = client;
		this.config = config;
		this.plugin = plugin;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.LOW);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
		graphics.setClip(plugin.getMinimapClipArea());

		SnakemanModeChunk fruitChunk = plugin.getFruitChunk();
		BufferedImage fruitImageIcon = plugin.getFruitImageIcon();
		if (fruitImageIcon != null && fruitChunk != null)
		{
			Point minimapPoint = worldToMinimap(fruitChunk.getCenter().dx(1).dy(1));
			if (minimapPoint != null)
			{
				Point offsetPoint = new Point(
					minimapPoint.getX() - fruitImageIcon.getWidth() / 2,
					minimapPoint.getY() - fruitImageIcon.getHeight() / 2);
				graphics.drawImage(fruitImageIcon, offsetPoint.getX(), offsetPoint.getY(), null);
			}
		}

		List<SnakemanModeChunk> unlockedChunks = plugin.getChunks();
		List<Area> unlockAreas = getAreas(unlockedChunks);

		List<SnakemanModeChunk> fruitChunks = new ArrayList<>();
		fruitChunks.add(plugin.getFruitChunk());
		List<Area> fruitChunkAreas = getAreas(fruitChunks);

		final boolean fillUnlocked = config.unlockedFillColourMinimap().getAlpha() > 0;
		final boolean fillLocked = config.lockedFillColourMinimap().getAlpha() > 0;
		final boolean fillFruitChunk = config.fruitChunkFillColourMinimap().getAlpha() > 0;
		final boolean outlineUnlocked = config.unlockedBorderColourMinimap().getAlpha() > 0;
		final boolean outlineFruitChunk = config.fruitChunkBorderColourMinimap().getAlpha() > 0;

		if (fillLocked)
		{
			Area lockedArea = new Area(plugin.getMinimapDrawWidget().getBounds());
			for (WorldArea worldArea : SnakemanModeAreas.WHITELISTED_AREA)
			{
				lockedArea.subtract(getArea(worldArea.toWorldPoint(), worldArea.getWidth(), worldArea.getHeight()));
			}
			for (Area area : fruitChunkAreas)
			{
				lockedArea.subtract(area);
			}
			for (Area area : unlockAreas)
			{
				lockedArea.subtract(area);
			}

			graphics.setColor(config.lockedFillColourMinimap());
			graphics.fill(lockedArea);
		}

		if (fillFruitChunk)
		{
			graphics.setColor(config.fruitChunkFillColourMinimap());
			for (Area area : fruitChunkAreas)
			{
				graphics.fill(area);
			}
		}

		if (fillUnlocked)
		{
			graphics.setColor(config.unlockedFillColourMinimap());
			for (Area area : unlockAreas)
			{
				graphics.fill(area);
			}
		}

		if (outlineFruitChunk)
		{
			graphics.setColor(config.fruitChunkBorderColourMinimap());
			for (Area area : fruitChunkAreas)
			{
				graphics.draw(area);
			}
		}

		if (outlineUnlocked)
		{
			graphics.setColor(config.unlockedBorderColourMinimap());
			for (Area area : unlockAreas)
			{
				graphics.draw(area);
			}
		}

		if (config.showChunkNumber() && !config.drawOutlineOnly())
		{
			int idx = 1;
			graphics.setColor(Color.WHITE);
			for (Area area : unlockAreas)
			{
				String s = "" + idx++;
				int x = (int) (area.getBounds().getCenterX() - graphics.getFontMetrics().getStringBounds(s, graphics).getWidth() / 2 + 1);
				int y = (int) (area.getBounds().getCenterY() + graphics.getFontMetrics().getStringBounds(s, graphics).getHeight() / 2);
				graphics.drawString(s, x, y);
			}
		}

		return null;
	}

	private List<Area> getAreas(List<SnakemanModeChunk> chunks)
	{
		List<Area> areas = new ArrayList<>();
		Area outline = new Area();
		for (SnakemanModeChunk chunk : chunks)
		{
			if (client == null) // todo: remove these 3
			{
				System.out.println("client == null");
			}
			if (chunk == null)
			{
				System.out.println("chunk == null");
			}
			else if (chunk.getBottomLeft() == null)
			{
				System.out.println("bottom left == null");
			}
			if (client.getPlane() != chunk.getBottomLeft().getPlane())
			{
				continue;
			}
			Area chunkArea = getArea(chunk.getBottomLeft(), chunk.getSize(), chunk.getSize());
			areas.add(chunkArea);
			if (config.drawOutlineOnly())
			{
				outline.add(chunkArea);
			}
		}
		if (config.drawOutlineOnly())
		{
			areas.clear();
			areas.add(outline);
		}
		return areas;
	}

	private Area getArea(WorldPoint bottomLeft, int width, int height)
	{
		final Point nw = worldToMinimap(bottomLeft.dy(height));
		final Point ne = worldToMinimap(bottomLeft.dx(width).dy(height));
		final Point sw = worldToMinimap(bottomLeft);
		final Point se = worldToMinimap(bottomLeft.dx(width));

		if (nw == null || ne == null || sw == null || se == null)
		{
			return new Area();
		}

		Polygon polygon = new Polygon(
			new int[] { sw.getX(), se.getX(), ne.getX(), nw.getX() },
			new int[] { sw.getY(), se.getY(), ne.getY(), nw.getY() },
			4
		);

		return new Area(polygon);
	}

	private Point worldToMinimap(final WorldPoint worldPoint)
	{
		if (client.getLocalPlayer() == null)
		{
			return null;
		}

		final WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		final LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
		final LocalPoint playerLocalPoint = LocalPoint.fromWorld(client, playerLocation);

		if (playerLocalPoint == null)
		{
			return null;
		}

		final int offsetX = playerLocalPoint.getX() - localLocation.getX();
		final int offsetY = playerLocalPoint.getY() - localLocation.getY();

		final int x = (worldPoint.getX() - playerLocation.getX()) * TILE_SIZE + offsetX / 32 - TILE_SIZE / 2;
		final int y = (worldPoint.getY() - playerLocation.getY()) * TILE_SIZE + offsetY / 32 - TILE_SIZE / 2 + 1;

		final int angle = client.getMapAngle() & 0x7FF;

		final int sin = (int) (65536.0D * Math.sin((double) angle * Perspective.UNIT));
		final int cos = (int) (65536.0D * Math.cos((double) angle * Perspective.UNIT));

		final Widget minimapDrawWidget = plugin.getMinimapDrawWidget();
		if (minimapDrawWidget == null || minimapDrawWidget.isHidden())
		{
			return null;
		}

		final int xx = y * sin + cos * x >> 16;
		final int yy = sin * x - y * cos >> 16;

		final Point loc = minimapDrawWidget.getCanvasLocation();
		final int minimapX = loc.getX() + xx + minimapDrawWidget.getWidth() / 2;
		final int minimapY = loc.getY() + yy + minimapDrawWidget.getHeight() / 2;

		return new Point(minimapX, minimapY);
	}
}

package com.snakemanmode;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import net.runelite.api.Constants;
import net.runelite.api.coords.WorldArea;

public class SnakemanModeAreas
{
	public static final List<Integer> FREE_TO_PLAY = new ArrayList<>();
	public static final List<Integer> FRUIT_AREA = new ArrayList<>();
	public static final WorldArea[] WHITELISTED_AREA = new WorldArea[]
	{
		new WorldArea(3008, 3008, 128, 128, 0),
		new WorldArea(3136, 3072, 64, 64, 0),
		new WorldArea(3072, 9472, 64, 64, 0),
		new WorldArea(1600, 6016, 192, 192, 0),
		new WorldArea(1664, 12480, 64, 64, 0)
	};

	static
	{
		resourceToChunks(FREE_TO_PLAY, "free-to-play_area.txt");
		resourceToChunks(FRUIT_AREA, "fruit_area.txt");
	}

	private static void resourceToChunks(List<Integer> chunks, String path)
	{
		chunks.clear();

		Scanner scanner = new Scanner(SnakemanModePlugin.class.getResourceAsStream(path));
		while (scanner.hasNextLine())
		{
			String line = scanner.nextLine();

			if (line.isEmpty() || line.startsWith("#"))
			{
				continue;
			}

			if (line.contains(","))
			{
				String[] parts = line.replace(",", "").split(" ");

				if (parts.length != 2)
				{
					continue;
				}

				int i = Integer.parseInt(parts[0]);
				int j = Integer.parseInt(parts[1]);
				regionToChunks(chunks, i, j);
			}
			else
			{
				String[] parts = line.split(" ");

				for (String s : parts)
				{
					chunks.add(Integer.parseInt(s));
				}
			}
		}
	}

	private static void regionToChunks(List<Integer> ids, int i, int j)
	{
		for (int y = 0; y < Constants.CHUNK_SIZE; y++)
		{
			for (int x = 0; x < Constants.CHUNK_SIZE; x++)
			{
				ids.add(SnakemanModeChunk.getId(0, i, j, x, y));
			}
		}
	}
}

package com.snakemanmode;

import com.google.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.GeneralPath;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class SnakemanModeSceneOverlay extends Overlay
{
	private static final int MAX_DRAW_DISTANCE = 32;
	private static final int LOCAL_TILE_SIZE = Perspective.LOCAL_TILE_SIZE;

	private final Client client;
	private final SnakemanModeConfig config;
	private final SnakemanModePlugin plugin;

	@Inject
	SnakemanModeSceneOverlay(Client client, SnakemanModeConfig config, SnakemanModePlugin plugin)
	{
		this.client = client;
		this.config = config;
		this.plugin = plugin;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.LOW);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		List<SnakemanModeChunk> chunks = plugin.getChunks();

		if (chunks.isEmpty())
		{
			return null;
		}

		final boolean fillUnlocked = config.unlockedFillColourScene().getAlpha() > 0;
		final boolean fillLocked = config.lockedFillColourScene().getAlpha() > 0;
		final boolean fillFruitChunk = config.fruitChunkFillColourScene().getAlpha() > 0;

		if (fillUnlocked || fillLocked || fillFruitChunk)
		{
			Tile[][] tiles = client.getScene().getTiles()[client.getPlane()];

			for (Tile[] tileRow : tiles)
			{
				for (Tile tile : tileRow)
				{
					if (tile == null || tile.getLocalLocation() == null)
					{
						continue;
					}
					Polygon tilePolygon = Perspective.getCanvasTilePoly(client, tile.getLocalLocation());
					if (tilePolygon == null)
					{
						continue;
					}

					SnakemanModeChunk chunk = new SnakemanModeChunk(client, tile.getWorldLocation());
					final boolean isUnlocked = chunks.contains(chunk);
					final boolean isFruitChunk = chunk.equals(plugin.getFruitChunk());

					if (!isUnlocked && plugin.isUnlockedChunk(tile.getWorldLocation(), true))
					{
						continue;
					}

					if (fillUnlocked && isUnlocked)
					{
						graphics.setColor(config.unlockedFillColourScene());
						graphics.fill(tilePolygon);
					}
					else if (fillLocked && !isUnlocked && !isFruitChunk)
					{
						graphics.setColor(config.lockedFillColourScene());
						graphics.fill(tilePolygon);
					}
					else if (fillFruitChunk && isFruitChunk)
					{
						graphics.setColor(config.fruitChunkFillColourScene());
						graphics.fill(tilePolygon);
					}
				}
			}
		}

		graphics.setStroke(new BasicStroke((float) config.chunkBorderWidth()));

		final boolean outlineUnlocked = config.unlockedBorderColourScene().getAlpha() > 0;
		final boolean outlineFruitChunk = config.fruitChunkBorderColourScene().getAlpha() > 0;

		if (outlineUnlocked)
		{
			for (SnakemanModeChunk chunk : chunks)
			{
				List<SnakemanModeChunk> neighbourChunks = chunk.getNeighbourChunks(client);
				boolean[] neighbours = new boolean[]
				{
					chunks.contains(neighbourChunks.get(6)), chunks.contains(neighbourChunks.get(4)),
					chunks.contains(neighbourChunks.get(1)), chunks.contains(neighbourChunks.get(3))
				};
				drawChunk(graphics, chunk.getBottomLeft(), chunk.getSize(), config.unlockedBorderColourScene(), neighbours);
			}
		}

		if (outlineFruitChunk)
		{
			SnakemanModeChunk fruitChunk = plugin.getFruitChunk();
			if (fruitChunk != null)
			{
				List<SnakemanModeChunk> neighbourChunks = fruitChunk.getNeighbourChunks(client);
				boolean[] neighbours = new boolean[]
				{
					chunks.contains(neighbourChunks.get(6)), chunks.contains(neighbourChunks.get(4)),
					chunks.contains(neighbourChunks.get(1)), chunks.contains(neighbourChunks.get(3))
				};
				drawChunk(graphics, fruitChunk.getBottomLeft(), fruitChunk.getSize(), config.fruitChunkBorderColourScene(), neighbours);
			}
		}

		return null;
	}

	private void drawChunk(Graphics2D graphics, WorldPoint bottomLeft, int diameter, Color borderColour, boolean[] neighbours)
	{
		if (client.getPlane() != bottomLeft.getPlane() || client.getLocalPlayer() == null)
		{
			return;
		}

		GeneralPath path = new GeneralPath();

		int startX = bottomLeft.getX();
		int startY = bottomLeft.getY();
		final int z = bottomLeft.getPlane();

		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		if (client.isInInstancedRegion())
		{
			LocalPoint localPoint = LocalPoint.fromWorld(client, playerLocation);
			if (localPoint != null)
			{
				WorldPoint templatePlayerLocation = WorldPoint.fromLocalInstance(client, localPoint);
				startX += playerLocation.getX() - templatePlayerLocation.getX();
				startY += playerLocation.getY() - templatePlayerLocation.getY();
			}
		}

		int x = startX;
		int y = startY;

		final int[] xs = new int[4 * diameter + 1];
		final int[] ys = new int[xs.length];

		for (int i = 0; i < xs.length; i++)
		{
			if (i < diameter)
			{
				xs[0 * diameter + i] = startX + i;
				xs[1 * diameter + i] = startX + diameter;
				xs[2 * diameter + i] = startX + diameter - i;
				xs[3 * diameter + i] = startX;
				ys[0 * diameter + i] = startY;
				ys[1 * diameter + i] = startY + i;
				ys[2 * diameter + i] = startY + diameter;
				ys[3 * diameter + i] = startY + diameter - i;
			}
			else if (i == diameter)
			{
				xs[xs.length - 1] = xs[0];
				ys[ys.length - 1] = ys[0];
			}

			boolean hasFirst = false;
			if (playerLocation.distanceTo(new WorldPoint(x, y, z)) < MAX_DRAW_DISTANCE)
			{
				hasFirst = moveTo(path, x, y, z);
			}

			x = xs[i];
			y = ys[i];

			if (config.drawOutlineOnly())
			{
				int side = (i - 1) / diameter;
				if ((side == 0 && neighbours[0]) || (side == 1 && neighbours[1]) ||
					(side == 2 && neighbours[2]) || (side == 3 && neighbours[3]))
				{
					continue;
				}
			}

			if (hasFirst && playerLocation.distanceTo(new WorldPoint(x, y, z)) < MAX_DRAW_DISTANCE)
			{
				lineTo(path, x, y, z);
			}
		}

		graphics.setColor(borderColour);
		graphics.draw(path);
	}

	private boolean moveTo(GeneralPath path, int x, int y, int z)
	{
		Point point = XYToPoint(x, y, z);
		if (point != null)
		{
			path.moveTo(point.getX(), point.getY());
			return true;
		}
		return false;
	}

	private void lineTo(GeneralPath path, int x, int y, int z)
	{
		Point point = XYToPoint(x, y, z);
		if (point != null)
		{
			path.lineTo(point.getX(), point.getY());
		}
	}

	private Point XYToPoint(int x, int y, int z)
	{
		LocalPoint localPoint = LocalPoint.fromWorld(client, x, y);

		if (localPoint == null)
		{
			return null;
		}

		return Perspective.localToCanvas(
			client,
			new LocalPoint(localPoint.getX() - LOCAL_TILE_SIZE / 2, localPoint.getY() - LOCAL_TILE_SIZE / 2),
			z);
	}
}

package com.snakemanmode;

import java.awt.image.BufferedImage;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.worldmap.WorldMapPoint;

public class SnakemanModeWorldMapPoint extends WorldMapPoint
{
	SnakemanModeWorldMapPoint(WorldPoint worldPoint, BufferedImage image)
	{
		super(worldPoint, image);

		this.setSnapToEdge(true);
		this.setJumpOnClick(true);
		this.setName("Snake fruit");
	}
}

package com.snakemanmode;

import com.google.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;

public class SnakemanModeInfoOverlay extends OverlayPanel
{
	private static final String LABEL_LOCKED_AREA = "Go to your unlocked area!";
	private static final String LABEL_UNLOCKED = "Unlocked:";
	private static final String LABEL_XP_TO_UNLOCK = "XP to unlock:";

	private final Client client;
	private final SnakemanModeConfig config;
	private final SnakemanModePlugin plugin;

	@Inject
	SnakemanModeInfoOverlay(Client client, SnakemanModeConfig config, SnakemanModePlugin plugin)
	{
		this.client = client;
		this.config = config;
		this.plugin = plugin;

		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(OverlayPriority.LOW);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!config.showInfo() || client.getLocalPlayer() == null)
		{
			return null;
		}

		if (!plugin.isUnlockedChunk(client.getLocalPlayer().getWorldLocation(), false))
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left(LABEL_LOCKED_AREA)
				.build());
		}
		else
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left(LABEL_XP_TO_UNLOCK)
				.right("" + plugin.getXpToUnlock())
				.build());

			panelComponent.getChildren().add(LineComponent.builder()
				.left(LABEL_UNLOCKED)
				.right("" + plugin.getChunks().size())
				.build());
		}

		return super.render(graphics);
	}
}

