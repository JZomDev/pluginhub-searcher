package net.clanhalls.plugin;

import net.clanhalls.plugin.beans.*;
import net.clanhalls.plugin.web.APIResponse;
import net.clanhalls.plugin.web.ClanHallsClient;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.clan.*;
import net.runelite.api.events.ClanChannelChanged;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.menus.WidgetMenuOption;
import net.runelite.client.plugins.PluginDescriptor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Clan Halls Plugin",
	description = "Automatically send your clan online members to any webhook url."
)
public class ClanHallsPlugin extends net.runelite.client.plugins.Plugin
{
  static final String CONFIG_GROUP = "clanhalls";

	@Inject
	private Client client;

	@Inject
	private ClanHallsChatMessenger messenger;

	@Inject
	private MenuManager menuManager;

	@Inject
	private ClanHallsConfig config;

	@Inject
	private ClanHallsClient clanHallsClient;

	private final int RESIZABLE_VIEWPORT_BOTTOM_LINE_FRIEND_CHAT_TAB_ID = 10747942;
	private final int[] WIDGET_IDS = new int[] {
			RESIZABLE_VIEWPORT_BOTTOM_LINE_FRIEND_CHAT_TAB_ID,
			ComponentID.RESIZABLE_VIEWPORT_FRIENDS_CHAT_TAB,
			ComponentID.FIXED_VIEWPORT_FRIENDS_CHAT_TAB,
	};

    private final List<WidgetMenuOption> widgetMenuOptions = new ArrayList<>();

	@Override
	protected void startUp() throws Exception
	{
		for (var widgetId : WIDGET_IDS)
		{
            var sendSettingsOption = new WidgetMenuOption("Send", "Settings", widgetId);
            var sendMembersListOption = new WidgetMenuOption("Send", "Members List", widgetId);
            var sendMemberActivityOption = new WidgetMenuOption("Send", "Member Activity", widgetId);

			widgetMenuOptions.add(sendSettingsOption);
			widgetMenuOptions.add(sendMembersListOption);
			widgetMenuOptions.add(sendMemberActivityOption);

			menuManager.addManagedCustomMenu(sendSettingsOption, (entry) -> { sendSettingsReport(entry); });
			menuManager.addManagedCustomMenu(sendMembersListOption, (entry) -> { sendMembersListReport(entry); });
			menuManager.addManagedCustomMenu(sendMemberActivityOption, (entry) -> { sendMemberActivityReport(entry); });
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		for (WidgetMenuOption option : widgetMenuOptions) {
			menuManager.removeManagedCustomMenu(option);
		}
	}

	@Subscribe
	public void onClanChannelChanged(ClanChannelChanged event) throws IOException
	{
		if (event.getClanChannel() == null || event.getClanId() != 0) return;

		APIResponse<ClanInfo> clanResponse = clanHallsClient.getClan();
		if (clanResponse.getError() != null) {
			messenger.send("Unable to retrieve clan information.", ClanHallsChatMessenger.ERROR);
		} else {
			ClanInfo clanInfo = clanResponse.getData();
			if (clanInfo != null && clanInfo.getLastSyncedAt() == null) {
				sendSettingsReport(null);
			}
		}

		if (config.sendActivityOnJoined()) {
			sendMemberActivityReport(null);
		}
	}

	@Provides
	ClanHallsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClanHallsConfig.class);
	}

	public void sendSettingsReport(MenuEntry entry) {
		if (!validateWebhookConfig()) return;

		ClanSettings clanSettings = client.getClanSettings();
		if (clanSettings == null) {
			messenger.send("Please join your clan's channel before sending a settings report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		List<RankTitle> rankTitles = new ArrayList<>();
		ClanTitle firstTitle = null;
		for (int i = 0; i < 127; i++) {
			ClanTitle title = clanSettings.titleForRank(new ClanRank(i));
			if (title == null) continue;

			if (i == 0) firstTitle = title;
			else if (firstTitle != null && title.getName().equals(firstTitle.getName())) continue;

			RankTitle rankTitle = new RankTitle(i, title.getName());
			rankTitles.add(rankTitle);
		}

		SettingsReport report = new SettingsReport(clanSettings.getName(), rankTitles);

		APIResponse<ReportInfo> response = clanHallsClient.sendSettingsReport(report);
		if (response.getError() != null) {
			messenger.send("Unexpected error while sending settings report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		messenger.send("Settings report sent successfully!", ClanHallsChatMessenger.SUCCESS);
	}

	public void sendMembersListReport(MenuEntry entry) {
		if (!validateWebhookConfig()) return;

		ClanSettings settings = client.getClanSettings();
		if (settings == null) {
			messenger.send("Please join your clan's channel before sending a members list report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		List<ListMember> members = new ArrayList<>();
		for (ClanMember member : settings.getMembers()) {
			members.add(new ListMember(member.getName(), member.getRank().getRank()));
		}

		MembersListReport membersListReport = new MembersListReport(members);
		APIResponse<ReportInfo> response = clanHallsClient.sendMembersListReport(membersListReport);
		if (response.getError() != null) {
			messenger.send("Unexpected error while sending members list report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		messenger.send("Members list report sent successfully!", ClanHallsChatMessenger.SUCCESS);
	}

	public void sendMemberActivityReport(MenuEntry entry) {
		if (!validateWebhookConfig()) return;

		ClanChannel channel = client.getClanChannel();
		if (channel == null) {
			messenger.send("Please join your clan's channel before sending a members list report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		List<MemberActivity> members = new ArrayList<>();
		for (ClanChannelMember member : channel.getMembers()) {
			members.add(new MemberActivity(member.getName(), member.getRank().getRank()));
		}

		MemberActivityReport memberActivityReport = new MemberActivityReport(members);

		APIResponse<ReportInfo> response = clanHallsClient.sendMemberActivityReport(memberActivityReport);
		if (response.getError() != null) {
			messenger.send("Unexpected error while sending member activity report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		messenger.send("Member activity report sent successfully!", ClanHallsChatMessenger.SUCCESS);
	}

	private boolean validateWebhookConfig()
	{
		var clientId = config.clientId();
		if (clientId == null || clientId.isEmpty())
		{
			messenger.send("Client ID is null or empty. Please update your config.", ClanHallsChatMessenger.ERROR);
			return false;
		}

		var clientSecret = config.clientSecret();
		if (clientSecret == null || clientSecret.isEmpty())
		{
			messenger.send("Client secret is null or empty. Please update your config.", ClanHallsChatMessenger.ERROR);
			return false;
		}

		var apiBaseUrl = config.apiBaseUrl();
		if (apiBaseUrl == null || apiBaseUrl.isEmpty())
		{
			messenger.send("API base URL is null or empty. Please update your config.", ClanHallsChatMessenger.ERROR);
			return false;
		}

		return true;
	}
}

package net.clanhalls.plugin.web;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public class APIResponse<T> {
    private final APIError error;
    private final T data;

    public static <T> APIResponse<T> success(T data) {
        return new APIResponse<>(null, data);
    }

    public static <T> APIResponse<T> failure(int status, String message) {
        return new APIResponse<>(new APIError(status, message), null);
    }

    @Getter
    @RequiredArgsConstructor
    public static class APIError {
        private final int status;
        private final String message;
    }
}
package net.clanhalls.plugin.web;

import net.clanhalls.plugin.ClanHallsConfig;
import net.clanhalls.plugin.beans.*;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.clanhalls.plugin.beans.Credentials;
import okhttp3.*;

import javax.inject.Inject;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Map;

@Slf4j
public class ClanHallsClient {
    @Inject
    private OkHttpClient okHttpClient;

    private Gson gson;

    private String accessToken;
    private String refreshToken;

    private Long accessTokenExpiresAt;
    private Long refreshTokenExpiresAt;

    @Inject
    private ClanHallsConfig config;

    @Inject
    public ClanHallsClient(Gson gson)
    {
        this.gson = gson.newBuilder()
                .setDateFormat(DateFormat.FULL, DateFormat.FULL)
                .create();
    }

    private boolean isAccessTokenExpired() {
        long timeWithBuffer = (System.currentTimeMillis() / 1000) + 60;
        return (accessToken == null || accessTokenExpiresAt == null || timeWithBuffer >= accessTokenExpiresAt);
    }

    private boolean isRefreshTokenExpired() {
        long timeWithBuffer = (System.currentTimeMillis() / 1000) + 60;
        return (refreshToken == null || refreshTokenExpiresAt == null || timeWithBuffer >= refreshTokenExpiresAt);
    }

    private void applyTokenData(TokenData data) {
        accessToken = data.getAccessToken();
        refreshToken = data.getRefreshToken();
        accessTokenExpiresAt = data.getAccessTokenExpiresAt();
        refreshTokenExpiresAt = data.getRefreshTokenExpiresAt();
    }

    private boolean getToken() {
        Credentials credentials = new Credentials(config.clientId(), config.clientSecret());
        Request request = createRequest(credentials, HttpMethod.POST, "oauth", "tokens");

        var response = sendRequest(request, TokenData.class);
        if (response.getError() != null) {
            return false;
        }

        applyTokenData(response.getData());
        return true;
    }

    private boolean refreshToken() {
        if (isRefreshTokenExpired()) return false;

        Object payload = Map.of("refreshToken", refreshToken);
        Request request = createRequest(payload, HttpMethod.PUT, "oauth", "tokens");

        var response = sendRequest(request, TokenData.class);
        if (response.getError() != null) {
            return false;
        }

        applyTokenData(response.getData());
        return true;
    }

    public APIResponse<ClanInfo> getClan() {
        Request request = createRequest(HttpMethod.GET, "webhooks", "clans");
        return sendAuthenticatedRequest(request, ClanInfo.class);
    }

    public APIResponse<ReportInfo> sendSettingsReport(SettingsReport settingsReport) {
        Request request = createRequest(settingsReport, HttpMethod.POST, "webhooks", "clans", "settings-report");
        return sendAuthenticatedRequest(request, ReportInfo.class);
    }

    public APIResponse<ReportInfo> sendMembersListReport(MembersListReport membersListReport) {
        Request request = createRequest(membersListReport, HttpMethod.POST, "webhooks", "clans", "members-list-report");
        return sendAuthenticatedRequest(request, ReportInfo.class);
    }

    public APIResponse<ReportInfo> sendMemberActivityReport(MemberActivityReport memberActivityReport) {
        Request request = createRequest(memberActivityReport, HttpMethod.POST, "webhooks", "clans", "member-activity-report");
        return sendAuthenticatedRequest(request, ReportInfo.class);
    }

    private <T> APIResponse<T> sendRequest(Request request, Class<T> responseType) {
        if (request.body() != null) {
            log.info(request.body().toString());
        }

        try (Response response = okHttpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                return APIResponse.failure(response.code(), "HTTP Error: " + response.code());
            }

            if (response.body() == null || response.body().contentLength() == 0) {
                return APIResponse.success(null);
            }

            String responseBody = response.body().string();
            T data = gson.fromJson(responseBody, responseType);
            return APIResponse.success(data);
        } catch (IOException e) {
            return APIResponse.failure(500, "Network error: " + e.getMessage());
        }
    }

    private <T> APIResponse<T> sendAuthenticatedRequest(Request request, Class<T> responseType) {
        boolean authenticated;

        if (accessToken == null) {
            authenticated = getToken();
        } else if (isAccessTokenExpired()) {
            authenticated = refreshToken() || getToken();
        } else {
            authenticated = true;
        }

        if (authenticated) {
            Request finalRequest = request.newBuilder()
                    .header("Authorization", "Bearer " + accessToken)
                    .build();

            return sendRequest(finalRequest, responseType);
        }

        return sendRequest(request, responseType);
    }

    private Request createRequest(HttpMethod method, String... pathSegments) {
        HttpUrl url = buildUrl(pathSegments);

        Request.Builder requestBuilder = new Request.Builder()
                .url(url)
                .header("User-Agent", "ClanHalls RuneLite Plugin")
                .header("Content-Type", "application/json");

        if (accessToken != null) {
            requestBuilder.header("Authorization", "Bearer " + accessToken);
        }

        switch (method) {
            case GET:
                return requestBuilder.get().build();
            case DELETE:
                return requestBuilder.delete().build();
            default:
                throw new IllegalArgumentException("Invalid http method specified!");
        }
    }

    private Request createRequest(Object payload, HttpMethod method, String... pathSegments) {
        HttpUrl url = buildUrl(pathSegments);

        RequestBody body = RequestBody.create(
                MediaType.parse("application/json charset=utf-8"),
                gson.toJson(payload)
        );

        Request.Builder requestBuilder = new Request.Builder()
                .url(url)
                .header("User-Agent", "ClanHalls RuneLite Plugin")
                .header("Content-Type", "application/json");

        switch (method) {
            case POST:
                return requestBuilder.post(body).build();
            case PUT:
                return requestBuilder.put(body).build();
            case PATCH:
                return requestBuilder.patch(body).build();
            case DELETE:
                return requestBuilder.delete(body).build();
            default:
                throw new IllegalArgumentException("Invalid http method specified!");
        }
    }

    private HttpUrl buildUrl(String... pathSegments) {
        String apiBaseUrl = config.apiBaseUrl();
        HttpUrl parsedUrl = HttpUrl.parse(apiBaseUrl);
        if (parsedUrl == null) {
            throw new IllegalArgumentException("Invalid api base url: " + apiBaseUrl);
        }

        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
                .scheme(parsedUrl.scheme())
                .host(parsedUrl.host());

        if (parsedUrl.port() != HttpUrl.defaultPort(parsedUrl.scheme())) {
            urlBuilder.port(parsedUrl.port());
        }

        for (String pathSegment : parsedUrl.pathSegments())
        {
            urlBuilder.addPathSegment(pathSegment);
        }

        for (String pathSegment : pathSegments)
        {
            if (pathSegment.startsWith("?"))
            {
                String[] kv = pathSegment.substring(1).split("=");
                urlBuilder.addQueryParameter(kv[0], kv[1]);
            }
            else
            {
                urlBuilder.addPathSegment(pathSegment);
            }
        }

        return urlBuilder.build();
    }
}

package net.clanhalls.plugin.web;

public enum HttpMethod {
    GET,
    POST,
    PUT,
    PATCH,
    DELETE
}

package net.clanhalls.plugin;

import net.runelite.api.ChatMessageType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;

import javax.inject.Inject;
import java.awt.*;

public class ClanHallsChatMessenger {
    @Inject
    private ChatMessageManager chatMessageManager;

    public static final Color SUCCESS = new Color(34, 197, 94);
    public static final Color ERROR = new Color(239, 68, 68);
    public static final Color INFO = new Color(14, 165, 233);

    public void send(String message, Color color) {
        ChatMessageBuilder cmb = new ChatMessageBuilder();
        cmb.append("[ClanHalls] ");
        cmb.append(color, message);

        chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(cmb.build())
                .build());
    }
}

package net.clanhalls.plugin;

import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(ClanHallsPlugin.CONFIG_GROUP)
public interface ClanHallsConfig extends net.runelite.client.config.Config
{
	@ConfigItem(
		keyName = "clientID",
		name = "Client ID",
		description = "The ID of the client that will be used to authenticate to the webhook."
	)
	default String clientId() { return ""; }

	@ConfigItem(
		keyName = "clientSecret",
		name = "Client Secret",
		description = "The secret of the client that will be used to authenticate to the webhook."
	)
	default String clientSecret() { return ""; }

	@ConfigItem(
		keyName = "apiBaseUrl",
		name = "API Base URL",
		description = "The base URL of the webhook that will be used to send the data."
	)
	default String apiBaseUrl() { return "https://app.clanhalls.net/api"; }

	@ConfigItem(
		keyName = "sendActivityOnJoined",
		name = "Send member activity on join",
		description = "Automatically send the list of currently connected members when you join your clan's channel."
	)
	default boolean sendActivityOnJoined() { return false; }
}

package net.clanhalls.plugin.beans;

import lombok.Value;

import java.util.List;

@Value
public class MemberActivityReport {
    List<MemberActivity> members;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class ListMember {
    String name;
    int rank;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class RankTitle {
    int rank;
    String title;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

import java.util.List;

@Value
public class MembersListReport {
    List<ListMember> members;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class MemberActivity {
    String name;
    int rank;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class Credentials {
    String clientId;
    String clientSecret;
}

package net.clanhalls.plugin.beans;

import lombok.Data;

@Data
public class ClanInfo {
    private String uuid;
    private String name;
    private String nameInGame;
    private String lastSyncedAt;
    private boolean isAdmin;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

import java.util.List;

@Value
public class SettingsReport {
    String name;
    List<RankTitle> ranks;
}

package net.clanhalls.plugin.beans;

import lombok.Data;

@Data
public class TokenData {
    private String accessToken;
    private String refreshToken;
    private long accessTokenExpiresAt;
    private long refreshTokenExpiresAt;
}

package net.clanhalls.plugin.beans;

import lombok.Data;

@Data
public class ReportInfo {
    private String uuid;
}

package net.clanhalls.plugin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClanHallsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClanHallsPlugin.class);
		RuneLite.main(args);
	}
}
