package net.clanhalls.plugin;

import net.clanhalls.plugin.beans.*;
import net.clanhalls.plugin.web.ClanHallsClient;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.clan.*;
import net.runelite.api.events.ClanChannelChanged;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.menus.WidgetMenuOption;
import net.runelite.client.plugins.PluginDescriptor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Clan Halls Plugin",
	description = "Automatically send your clan online members to any webhook url."
)
public class ClanHallsPlugin extends net.runelite.client.plugins.Plugin
{
  static final String CONFIG_GROUP = "clanhalls";

	@Inject
	private Client client;

	@Inject
	private ClanHallsChatMessenger messenger;

	@Inject
	private MenuManager menuManager;

	@Inject
	private ClanHallsConfig config;

	@Inject
	private ClanHallsClient clanHallsClient;

	private final int RESIZABLE_VIEWPORT_BOTTOM_LINE_FRIEND_CHAT_TAB_ID = 10747942;
	private final int[] WIDGET_IDS = new int[] {
			RESIZABLE_VIEWPORT_BOTTOM_LINE_FRIEND_CHAT_TAB_ID,
			ComponentID.RESIZABLE_VIEWPORT_FRIENDS_CHAT_TAB,
			ComponentID.FIXED_VIEWPORT_FRIENDS_CHAT_TAB,
	};

    private final List<WidgetMenuOption> widgetMenuOptions = new ArrayList<>();

	@Override
	protected void startUp() throws Exception
	{
		for (var widgetId : WIDGET_IDS)
		{
            var sendSettingsOption = new WidgetMenuOption("Send", "Settings", widgetId);
            var sendMembersListOption = new WidgetMenuOption("Send", "Members List", widgetId);
            var sendMemberActivityOption = new WidgetMenuOption("Send", "Member Activity", widgetId);

			widgetMenuOptions.add(sendSettingsOption);
			widgetMenuOptions.add(sendMembersListOption);
			widgetMenuOptions.add(sendMemberActivityOption);

			menuManager.addManagedCustomMenu(sendSettingsOption, (entry) -> { sendSettingsReport(entry); });
			menuManager.addManagedCustomMenu(sendMembersListOption, (entry) -> { sendMembersListReport(entry); });
			menuManager.addManagedCustomMenu(sendMemberActivityOption, (entry) -> { sendMemberActivityReport(entry); });
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		for (WidgetMenuOption option : widgetMenuOptions) {
			menuManager.removeManagedCustomMenu(option);
		}
	}

	@Subscribe
	public void onClanChannelChanged(ClanChannelChanged event) throws IOException
	{
		if (event.getClanChannel() == null || event.getClanId() != 0 || !config.sendActivityOnJoined()) return;

		sendMemberActivityReport(null);
	}

	@Provides
	ClanHallsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClanHallsConfig.class);
	}

	public void sendSettingsReport(MenuEntry entry) {
		if (!validateWebhookConfig()) return;

		ClanSettings clanSettings = client.getClanSettings();
		if (clanSettings == null) {
			messenger.send("Please join your clan's channel before sending a settings report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		List<RankTitle> rankTitles = new ArrayList<>();
		ClanTitle firstTitle = null;
		for (int i = 0; i < 127; i++) {
			ClanTitle title = clanSettings.titleForRank(new ClanRank(i));
			if (title == null) continue;

			if (i == 0) firstTitle = title;
			else if (firstTitle != null && title.getName().equals(firstTitle.getName())) continue;

			RankTitle rankTitle = new RankTitle(i, title.getName());
			rankTitles.add(rankTitle);
		}

		Settings settings = new Settings(clanSettings.getName(), rankTitles);
		SettingsReport report = new SettingsReport(config.clientId(), config.clientSecret(), settings);
		clanHallsClient.sendSettingsReport(report);
	}

	public void sendMembersListReport(MenuEntry entry) {
		if (!validateWebhookConfig()) return;

		ClanSettings settings = client.getClanSettings();
		if (settings == null) {
			messenger.send("Please join your clan's channel before sending a members list report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		List<ListMember> members = new ArrayList<>();
		for (ClanMember member : settings.getMembers()) {
			members.add(new ListMember(member.getName(), member.getRank().getRank()));
		}

		MembersListReport membersListReport = new MembersListReport(config.clientId(), config.clientSecret(), members);
		clanHallsClient.sendMembersListReport(membersListReport);
	}

	public void sendMemberActivityReport(MenuEntry entry) {
		if (!validateWebhookConfig()) return;

		ClanChannel channel = client.getClanChannel();
		if (channel == null) {
			messenger.send("Please join your clan's channel before sending a members list report.", ClanHallsChatMessenger.ERROR);
			return;
		}

		List<MemberActivity> members = new ArrayList<>();
		for (ClanChannelMember member : channel.getMembers()) {
			members.add(new MemberActivity(member.getName(), member.getRank().getRank()));
		}

		MemberActivityReport memberActivityReport = new MemberActivityReport(config.clientId(), config.clientSecret(), members);
		clanHallsClient.sendMemberActivityReport(memberActivityReport);
	}

	private boolean validateWebhookConfig()
	{
		var clientId = config.clientId();
		if (clientId == null || clientId.isEmpty())
		{
			messenger.send("Client ID is null or empty. Please update your config.", ClanHallsChatMessenger.ERROR);
			return false;
		}

		var clientSecret = config.clientSecret();
		if (clientSecret == null || clientSecret.isEmpty())
		{
			messenger.send("Client secret is null or empty. Please update your config.", ClanHallsChatMessenger.ERROR);
			return false;
		}

		var apiBaseUrl = config.apiBaseUrl();
		if (apiBaseUrl == null || apiBaseUrl.isEmpty())
		{
			messenger.send("API base URL is null or empty. Please update your config.", ClanHallsChatMessenger.ERROR);
			return false;
		}

		return true;
	}
}

package net.clanhalls.plugin.web;

import java.io.IOException;
import java.util.function.Consumer;
import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Response;

@Slf4j
@RequiredArgsConstructor
@AllArgsConstructor
public class ClanHallsCallback implements Callback {
    @Override
    public void onFailure(Call call, IOException e)
    {
        if (failureConsumer == null)
        {
            log.warn("Error submitting request, caused by {}.", e.getMessage());
        }
        else
        {
            failureConsumer.accept(e);
        }
    }

    @Override
    public void onResponse(Call call, Response response)
    {
        try
        {
            responseConsumer.accept(response);
        }
        catch (Throwable e)
        {
            log.warn("Error when handling response, caused by {}.", e.getMessage());
        }
        finally
        {
            response.close();
        }
    }

    private final Consumer<Response> responseConsumer;
    private Consumer<Exception> failureConsumer;
}
package net.clanhalls.plugin.web;

import net.clanhalls.plugin.ClanHallsConfig;
import net.clanhalls.plugin.beans.MemberActivityReport;
import net.clanhalls.plugin.beans.MembersListReport;
import net.clanhalls.plugin.beans.SettingsReport;
import net.clanhalls.plugin.ClanHallsChatMessenger;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import okhttp3.*;

import javax.inject.Inject;
import java.text.DateFormat;
import java.util.function.Consumer;

@Slf4j
public class ClanHallsClient {
    @Inject
    private OkHttpClient okHttpClient;

    private Gson gson;

    @Inject
    private Client client;

    @Inject
    private ClanHallsConfig config;

    @Inject
    private ClanHallsChatMessenger messenger;

    @Inject
    public ClanHallsClient(Gson gson)
    {
        this.gson = gson.newBuilder()
                .setDateFormat(DateFormat.FULL, DateFormat.FULL)
                .create();
    }

    public void sendSettingsReport(SettingsReport settingsReport) {
        Request request = createRequest(settingsReport, HttpMethod.POST, "webhooks", "clans", "settings-report");
        sendRequest(request, this::sendSettingsReportCallback);
    }

    public void sendMembersListReport(MembersListReport membersListReport) {
        Request request = createRequest(membersListReport, HttpMethod.POST, "webhooks", "clans", "members-list-report");
        sendRequest(request, this::sendMembersListReportCallback);
    }

    public void sendMemberActivityReport(MemberActivityReport memberActivityReport) {
        Request request = createRequest(memberActivityReport, HttpMethod.POST, "webhooks", "clans", "member-activity-report");
        sendRequest(request, this::sendMemberActivityReportCallback);
    }

    private void sendSettingsReportCallback(Response response) {
        if (!response.isSuccessful()) {
            if (genericErrorsCallback(response)) return;

            messenger.send("Unexpected error while sending settings report.", ClanHallsChatMessenger.ERROR);
            return;
        }

        messenger.send("Settings report sent successfully!", ClanHallsChatMessenger.SUCCESS);
    }

    private void sendMembersListReportCallback(Response response) {
        if (!response.isSuccessful()) {
            if (genericErrorsCallback(response)) return;

            messenger.send("Unexpected error while sending members list report.", ClanHallsChatMessenger.ERROR);
            return;
        }

        messenger.send("Members list report sent successfully!", ClanHallsChatMessenger.SUCCESS);
    }

    private void sendMemberActivityReportCallback(Response response) {
        if (!response.isSuccessful()) {
            if (genericErrorsCallback(response)) return;

            messenger.send("Unexpected error while sending member activity report.", ClanHallsChatMessenger.ERROR);
            return;
        }

        messenger.send("Member activity report sent successfully!", ClanHallsChatMessenger.SUCCESS);
    }

    private boolean genericErrorsCallback(Response response) {
        switch (response.code()) {
            case 401:
                messenger.send("Invalid credentials. Please verify your configuration.", ClanHallsChatMessenger.ERROR);
                return true;

            case 500:
                messenger.send("A server error has occured. Please try again later.", ClanHallsChatMessenger.ERROR);
                return true;

            default:
                return false;
        }
    }

    private void sendRequest(Request request, Consumer<Response> consumer) {
        sendRequest(request, new ClanHallsCallback(consumer));
    }

    void sendRequest(Request request, Callback callback)
    {
        okHttpClient.newCall(request).enqueue(callback);
    }

    private Request createRequest(Object payload, HttpMethod method, String... pathSegments) {
        HttpUrl url = buildUrl(pathSegments);

        RequestBody body = RequestBody.create(
                MediaType.parse("application/json charset=utf-8"),
                gson.toJson(payload)
        );

        Request.Builder requestBuilder = new Request.Builder()
                .header("User-Agent", "ClanHalls RuneLite Plugin")
                .header("Content-Type", "application/json")
                .url(url);

        switch (method) {
            case POST:
                return requestBuilder.post(body).build();
            default:
                throw new IllegalArgumentException("Invalid http method specified!");
        }
    }

    private HttpUrl buildUrl(String... pathSegments) {
        String apiBaseUrl = config.apiBaseUrl();
        HttpUrl parsedUrl = HttpUrl.parse(apiBaseUrl);
        if (parsedUrl == null) {
            throw new IllegalArgumentException("Invalid api base url: " + apiBaseUrl);
        }

        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
                .scheme(parsedUrl.scheme())
                .host(parsedUrl.host());

        if (parsedUrl.port() != HttpUrl.defaultPort(parsedUrl.scheme())) {
            urlBuilder.port(parsedUrl.port());
        }

        for (String pathSegment : parsedUrl.pathSegments())
        {
            urlBuilder.addPathSegment(pathSegment);
        }

        for (String pathSegment : pathSegments)
        {
            if (pathSegment.startsWith("?"))
            {
                String[] kv = pathSegment.substring(1).split("=");
                urlBuilder.addQueryParameter(kv[0], kv[1]);
            }
            else
            {
                urlBuilder.addPathSegment(pathSegment);
            }
        }

        return urlBuilder.build();
    }
}

package net.clanhalls.plugin.web;

public enum HttpMethod {
    POST,
}

package net.clanhalls.plugin;

import net.runelite.api.ChatMessageType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;

import javax.inject.Inject;
import java.awt.*;

public class ClanHallsChatMessenger {
    @Inject
    private ChatMessageManager chatMessageManager;

    public static final Color SUCCESS = new Color(34, 197, 94);
    public static final Color ERROR = new Color(239, 68, 68);
    public static final Color INFO = new Color(14, 165, 233);

    public void send(String message, Color color) {
        ChatMessageBuilder cmb = new ChatMessageBuilder();
        cmb.append("[ClanHalls] ");
        cmb.append(color, message);

        chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(cmb.build())
                .build());
    }
}

package net.clanhalls.plugin;

import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(ClanHallsPlugin.CONFIG_GROUP)
public interface ClanHallsConfig extends net.runelite.client.config.Config
{
	@ConfigItem(
		keyName = "clientID",
		name = "Client ID",
		description = "The ID of the client that will be used to authenticate to the webhook."
	)
	default String clientId() { return ""; }

	@ConfigItem(
		keyName = "clientSecret",
		name = "Client Secret",
		description = "The secret of the client that will be used to authenticate to the webhook."
	)
	default String clientSecret() { return ""; }

	@ConfigItem(
		keyName = "apiBaseUrl",
		name = "API Base URL",
		description = "The base URL of the webhook that will be used to send the data."
	)
	default String apiBaseUrl() { return "https://app.clanhalls.net/api"; }

	@ConfigItem(
		keyName = "sendActivityOnJoined",
		name = "Send member activity on join",
		description = "Automatically send the list of currently connected members when you join your clan's channel."
	)
	default boolean sendActivityOnJoined() { return false; }
}

package net.clanhalls.plugin.beans;

import lombok.Value;

import java.util.List;

@Value
public class MemberActivityReport {
    String clientId;
    String clientSecret;
    List<MemberActivity> members;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

import java.util.List;

@Value
public class Settings {
    String name;
    List<RankTitle> ranks;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class ListMember {
    String name;
    int rank;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class RankTitle {
    int rank;
    String title;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

import java.util.List;

@Value
public class MembersListReport {
    String clientId;
    String clientSecret;
    List<ListMember> members;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class MemberActivity {
    String name;
    int rank;
}

package net.clanhalls.plugin.beans;

import lombok.Value;

@Value
public class SettingsReport {
    String clientId;
    String clientSecret;
    Settings settings;
}

package net.clanhalls.plugin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClanHallsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClanHallsPlugin.class);
		RuneLite.main(args);
	}
}
