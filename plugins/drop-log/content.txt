package org.woikaz;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DropLogPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DropLogPlugin.class);
		RuneLite.main(args);
	}
}
package org.woikaz;

import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import org.woikaz.localstorage.DropDataStorage;
import org.woikaz.localstorage.DroppedItem;
import org.woikaz.ui.DropLogPanel;

import java.awt.image.BufferedImage;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
	name = "Drop Log"
)
public class DropLogPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	public DropLogConfig config;

	@Inject
	private ItemManager itemManager;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private PluginManager pluginManager;

	private DropLogPanel panel;

	private NavigationButton navButton;
	private DropDataStorage dropDataStorage = new DropDataStorage();

	private List<Integer> pendingDrops = new ArrayList<Integer>();
	private List<Integer> pendingTakes = new ArrayList<>();

	@Provides
	DropLogConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DropLogConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		panel = new DropLogPanel(this);
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/woikaz/droplog/droppings.png");
		navButton = NavigationButton.builder()
				.tooltip("Drop Log")
				.icon(icon)
				.priority(6)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);
		// DropDataStorage dropDataStorage = new DropDataStorage();
		getInjector().injectMembers(dropDataStorage);
		List<DroppedItem> loadedItems = dropDataStorage.loadAllItems();
		panel.populateAllRows(loadedItems);
		getInjector().injectMembers(panel);

		final Optional<Plugin> mainPlugin = pluginManager.getPlugins().stream().filter(p -> p.getName().equals("Drop Log")).findFirst();
		if (mainPlugin.isPresent() && !pluginManager.isPluginEnabled(mainPlugin.get()))
		{
			pluginManager.setPluginEnabled(mainPlugin.get(), true);
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGING_IN) {
			getInjector().injectMembers(dropDataStorage);
			List<DroppedItem> loadedItems = dropDataStorage.loadAllItems();
			for (DroppedItem item : loadedItems) {
				int price = itemManager.getItemPrice(item.getId());
				item.setValue(price);
			}
			panel.populateAllRows(loadedItems);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		String menuOption = event.getMenuOption();
		if (!"Drop".equalsIgnoreCase(menuOption) && !"Take".equalsIgnoreCase(menuOption)) {
			return;
		}
		String itemName = client.getItemDefinition(event.getItemId()).getName();
		if (isItemBlacklisted(itemName, config.blackListedItems())) {
			return;
		}
		switch (event.getMenuOption()) {
			case "Drop":
				pendingDrops.add(event.getItemId());
				break;
			case "Take":
				if (!config.removeOnPickUp()) {
					return;
				}
				pendingTakes.add(event.getId());
				break;
		}
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned event) {
		TileItem item = event.getItem();
		if (pendingDrops.contains(item.getId())) {
			DroppedItem itemWithoutValue = new DroppedItem(item.getId(), item.getQuantity(), client.getItemDefinition(item.getId()).getName());
			DroppedItem itemWithValue = new DroppedItem(item.getId(), item.getQuantity(), client.getItemDefinition(item.getId()).getName(), itemManager.getItemPrice(item.getId()));
			SwingUtilities.invokeLater(() -> panel.droppedItem(itemWithValue));
			getInjector().injectMembers(dropDataStorage);
			dropDataStorage.saveItem(itemWithoutValue);

			pendingDrops.remove(Integer.valueOf(item.getId()));
		}
	}

	@Subscribe
	public void onItemDespawned(ItemDespawned event) {
		TileItem item = event.getItem();
		String itemName = client.getItemDefinition(item.getId()).getName();

		if (pendingTakes.contains(item.getId())) {
			getInjector().injectMembers(dropDataStorage);
			dropDataStorage.decreaseItemQuantity(itemName, item.getQuantity());

			DroppedItem itemToUpdate = new DroppedItem(item.getId(), item.getQuantity(), itemName); // Create a DroppedItem with quantity to decrease
			panel.removeDroppedItem(itemToUpdate);

			pendingTakes.remove(Integer.valueOf(item.getId()));
		}
	}

	public boolean isItemBlacklisted(String itemToCheck, String blacklistedItems) {
		String itemToCheckLower = itemToCheck.trim().toLowerCase();

		List<String> blackList = Arrays.stream(blacklistedItems.split(","))
				.map(String::trim)
				.map(String::toLowerCase)
				.collect(Collectors.toList());

		return blackList.contains(itemToCheckLower);
	}
}

package org.woikaz.ui;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.PluginPanel;
import org.woikaz.DropLogPlugin;
import org.woikaz.localstorage.DropDataStorage;
import org.woikaz.localstorage.DroppedItem;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import static net.runelite.client.RuneLite.getInjector;

public class DropLogPanel  extends PluginPanel {
    private final DropLogPlugin plugin;

    private static final Color ODD_ROW = new Color(44, 44, 44);

    private final JPanel listContainer = new JPanel();

    private DropLogHeader countHeader;
    private DropLogHeader valueHeader;
    private DropLogHeader nameHeader;

    private SortOrder orderIndex = SortOrder.VALUE;
    private boolean ascendingOrder = false;

    private ArrayList<DropLogTableRow> rows = new ArrayList<>();
    private List<DropLogTableRow> allRows = new ArrayList<>(); // For all items loaded from the file
    private List<DropLogTableRow> sessionRows = new ArrayList<>(); // For items dropped in the current session
    private boolean showingAllItems = true;

    private DropDataStorage dropDataStorage;

    public DropLogPanel(DropLogPlugin plugin) {
        this.plugin = plugin;
        dropDataStorage = new DropDataStorage();
        getInjector().injectMembers(dropDataStorage);

        setBorder(null);
        setLayout(new DynamicGridLayout(0, 1));

        JPanel headerContainer = buildHeader();

        listContainer.setLayout(new GridLayout(0, 1));

        JPanel controlPanel = new JPanel(new BorderLayout());
        JButton toggleButton = new JButton("Show Current Session");
        // toggleButton.setMargin(new Insets(10, 20, 10, 20));
        toggleButton.addActionListener(e -> {
            toggleViewMode();
            if (showingAllItems) {
                toggleButton.setText("Show Current Session");
            } else {
                toggleButton.setText("Show All Time");
            }
        });
        JPanel buttonPanel = new JPanel(new BorderLayout());
        buttonPanel.add(toggleButton, BorderLayout.CENTER);
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));

        controlPanel.add(buttonPanel, BorderLayout.CENTER);

        add(controlPanel, BorderLayout.NORTH);

        add(headerContainer);
        add(listContainer);
    }

    private JPanel buildHeader()
    {
        JPanel header = new JPanel(new BorderLayout());
        JPanel leftSide = new JPanel(new BorderLayout());
        JPanel rightSide = new JPanel(new BorderLayout());

        nameHeader = new DropLogHeader("Name", orderIndex == SortOrder.NAME, ascendingOrder);
        nameHeader.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent mouseEvent)
            {
                if (SwingUtilities.isRightMouseButton(mouseEvent))
                {
                    return;
                }
                ascendingOrder = orderIndex != SortOrder.NAME || !ascendingOrder;
                orderBy(SortOrder.NAME);
            }
        });

        countHeader = new DropLogHeader("#", orderIndex == SortOrder.COUNT, ascendingOrder);
        countHeader.setPreferredSize(new Dimension(DropLogTableRow.ITEM_COUNT_COLUMN_WIDTH, 0));
        countHeader.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent mouseEvent)
            {
                if (SwingUtilities.isRightMouseButton(mouseEvent))
                {
                    return;
                }
                ascendingOrder = orderIndex != SortOrder.COUNT || !ascendingOrder;
                orderBy(SortOrder.COUNT);
            }
        });

        valueHeader = new DropLogHeader("$", orderIndex == SortOrder.VALUE, ascendingOrder);
        valueHeader.setPreferredSize(new Dimension(DropLogTableRow. ITEM_VALUE_COLUMN_WIDTH, 0));
        valueHeader.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent mouseEvent)
            {
                if (SwingUtilities.isRightMouseButton(mouseEvent))
                {
                    return;
                }
                ascendingOrder = orderIndex != SortOrder.VALUE || !ascendingOrder;
                orderBy(SortOrder.VALUE);
            }
        });


        leftSide.add(nameHeader, BorderLayout.CENTER);
        leftSide.add(countHeader, BorderLayout.EAST);
        rightSide.add(valueHeader, BorderLayout.CENTER);

        header.add(leftSide, BorderLayout.CENTER);
        header.add(rightSide, BorderLayout.EAST);

        return header;
    }

    private void orderBy(SortOrder order)
    {
        nameHeader.highlight(false, ascendingOrder);
        countHeader.highlight(false, ascendingOrder);
        valueHeader.highlight(false, ascendingOrder);

        switch (order)
        {
            case NAME:
                nameHeader.highlight(true, ascendingOrder);
                break;
            case COUNT:
                countHeader.highlight(true, ascendingOrder);
                break;
            case VALUE:
                valueHeader.highlight(true, ascendingOrder);
                break;
        }

        orderIndex = order;
        updateList();
    }

    void updateList()
    {

        List<DropLogTableRow> filteredRows = rows.stream()
                .filter(row -> row.getItemCount() > 0)
                .collect(Collectors.toList());

        filteredRows.sort((r1, r2) ->
        {
            switch (orderIndex)
            {
                case NAME:
                    return r1.getItemName().compareTo(r2.getItemName()) * (ascendingOrder ? 1 : -1);
                case COUNT:
                    return Integer.compare(r1.getItemCount(), r2.getItemCount()) * (ascendingOrder ? 1 : -1);
                case VALUE:
                    return Integer.compare(r1.getPrice(), r2.getPrice()) * (ascendingOrder ? 1 : -1);
                default:
                    return 0;
            }
        });

        listContainer.removeAll();

        for (int i = 0; i < filteredRows.size(); i++)
        {
            DropLogTableRow row = filteredRows.get(i);
            row.setBackground(i % 2 == 0 ? ODD_ROW : ColorScheme.DARK_GRAY_COLOR);
            listContainer.add(row);
        }

        listContainer.revalidate();
        listContainer.repaint();
    }

    public void droppedItem(DroppedItem item) {
        DroppedItem itemClone1 = item.clone();
        updateListWithItem(sessionRows, itemClone1);

        DroppedItem itemClone2 = item.clone();
        updateListWithItem(allRows, itemClone2);

        rows = showingAllItems ? new ArrayList<>(allRows) : new ArrayList<>(sessionRows);
        updateList();
    }

    private boolean updateListWithItem(List<DropLogTableRow> listToUpdate, DroppedItem item) {
        for (DropLogTableRow row : listToUpdate) {
            if (row.getItemName().equals(item.getName().trim())) {
                row.setQuantity(row.getItemCount() + item.getQuantity());
                return true; // Item was found and updated
            }
        }
        DropLogTableRow newRow = buildRow(item, listToUpdate.size() % 2 == 0);
        listToUpdate.add(newRow);
        return false; // A new item was added
    }

    public void removeDroppedItem(DroppedItem item) {
        SwingUtilities.invokeLater(() -> {
            updateListWithItemForRemoval(sessionRows, item);
            updateListWithItemForRemoval(allRows, item);
            rows = showingAllItems ? new ArrayList<>(allRows) : new ArrayList<>(sessionRows);
            updateList();
        });
    }

    private boolean updateListWithItemForRemoval(List<DropLogTableRow> listToUpdate, DroppedItem item) {
        Iterator<DropLogTableRow> iterator = listToUpdate.iterator();
        while (iterator.hasNext()) {
            DropLogTableRow row = iterator.next();
            if (row.getItemName().equals(item.getName().trim())) {
                int newQuantity = row.getItemCount() - item.getQuantity();
                if (newQuantity > 0) {
                    row.setQuantity(newQuantity);
                } else {
                    iterator.remove();
                }
                return true;
            }
        }
        return false;
    }

    public void removeRow(DropLogTableRow row) {
        rows.remove(row);

        listContainer.remove(row);

        listContainer.revalidate();
        listContainer.repaint();

        String itemName = row.getItemName();
        if (showingAllItems) {
            dropDataStorage.removeItem(itemName); // Remove the item from the JSON file
        }
    }

    public void removeQuantity(String itemName, Integer newQuantity) {
        if (showingAllItems) {
            dropDataStorage.setItemQuantity(itemName, newQuantity);
        }
    }


    private DropLogTableRow buildRow(DroppedItem item, boolean stripe)
    {
        DropLogTableRow row = new DropLogTableRow(this, item);
        row.setBackground(stripe ? ODD_ROW : ColorScheme.DARK_GRAY_COLOR);
        return row;
    }

    private enum SortOrder
    {
        COUNT,
        VALUE,
        NAME
    }

    private void toggleViewMode() {
        showingAllItems = !showingAllItems;
        if (showingAllItems) {
            rows = new ArrayList<>(allRows);
        } else {
            rows = new ArrayList<>(sessionRows);
        }
        updateList();
    }

    public void populateAllRows(List<DroppedItem> loadedItems) {
        allRows.clear();
        for (DroppedItem item : loadedItems) {
            allRows.add(buildRow(item, allRows.size() % 2 == 0));
        }

        // Update the display based on the current view mode
        rows = showingAllItems ? new ArrayList<>(allRows) : new ArrayList<>(sessionRows);
        updateList();
    }



}

package org.woikaz.ui;

import net.runelite.client.plugins.worldhopper.WorldHopperPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

public class DropLogHeader extends JPanel {
    private static final ImageIcon ARROW_UP;
    private static final ImageIcon HIGHLIGHT_ARROW_DOWN;
    private static final ImageIcon HIGHLIGHT_ARROW_UP;

    private static final Color ARROW_COLOR = ColorScheme.LIGHT_GRAY_COLOR;
    private static final Color HIGHLIGHT_COLOR = ColorScheme.BRAND_ORANGE;

    static
    {
        final BufferedImage arrowDown = ImageUtil.getResourceStreamFromClass(WorldHopperPlugin.class, "arrow_down.png");
        final BufferedImage arrowUp = ImageUtil.rotateImage(arrowDown, Math.PI);
        final BufferedImage arrowUpFaded = ImageUtil.luminanceOffset(arrowUp, -80);
        ARROW_UP = new ImageIcon(arrowUpFaded);

        final BufferedImage highlightArrowDown = ImageUtil.fillImage(arrowDown, HIGHLIGHT_COLOR);
        final BufferedImage highlightArrowUp = ImageUtil.fillImage(arrowUp, HIGHLIGHT_COLOR);
        HIGHLIGHT_ARROW_DOWN = new ImageIcon(highlightArrowDown);
        HIGHLIGHT_ARROW_UP = new ImageIcon(highlightArrowUp);
    }

    private final JLabel textLabel = new JLabel();
    private final JLabel arrowLabel = new JLabel();
    // Determines if this header column is being used to order the list
    private boolean ordering = false;

    DropLogHeader(String title, boolean ordered, boolean ascending) {
        setLayout(new BorderLayout(5, 0));
        setBorder(new CompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 0, 1, ColorScheme.MEDIUM_GRAY_COLOR),
                new EmptyBorder(0, 5, 0, 2)));
        setBackground(ColorScheme.SCROLL_TRACK_COLOR);

        addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseEntered(MouseEvent mouseEvent)
            {
                textLabel.setForeground(HIGHLIGHT_COLOR);
                if (!ordering)
                {
                    arrowLabel.setIcon(HIGHLIGHT_ARROW_UP);
                }
            }

            @Override
            public void mouseExited(MouseEvent mouseEvent)
            {
                if (!ordering)
                {
                    textLabel.setForeground(ARROW_COLOR);
                    arrowLabel.setIcon(ARROW_UP);
                }
            }
        });

        textLabel.setText(title);
        textLabel.setFont(FontManager.getRunescapeSmallFont());

        highlight(ordered, ascending);

        add(textLabel, BorderLayout.WEST);
        add(arrowLabel, BorderLayout.EAST);
    }

    @Override
    public void addMouseListener(MouseListener mouseListener)
    {
        super.addMouseListener(mouseListener);
        textLabel.addMouseListener(mouseListener);
        arrowLabel.addMouseListener(mouseListener);
    }

    public void highlight(boolean on, boolean ascending)
    {
        ordering = on;
        arrowLabel.setIcon(on ? (ascending ? HIGHLIGHT_ARROW_DOWN : HIGHLIGHT_ARROW_UP) : ARROW_UP);
        textLabel.setForeground(on ? HIGHLIGHT_COLOR : ARROW_COLOR);
    }
}

package org.woikaz.ui;

import lombok.Getter;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.QuantityFormatter;
import org.woikaz.localstorage.DropDataStorage;
import org.woikaz.localstorage.DroppedItem;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class DropLogTableRow extends JPanel {
    static final int ITEM_NAME_COLUMN_WIDTH = 60;
    static final int ITEM_COUNT_COLUMN_WIDTH = 45;
    static final int ITEM_VALUE_COLUMN_WIDTH = 45;

    private JLabel itemName;
    private JLabel itemCount;
    private JLabel value;

    @Getter
    private final DroppedItem item;

    private DropLogPanel parentPanel;

    private Color lastBackground;

    DropLogTableRow(DropLogPanel parentPanel, DroppedItem item)
    {
        this.parentPanel = parentPanel;
        this.item = item;

        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(2, 0, 2, 0));

        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");
        JMenuItem removeXItem = new JMenuItem("Remove X");

        deleteItem.addActionListener(e -> {
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + this.getItemName() + "?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                parentPanel.removeRow(DropLogTableRow.this);
            }
        });


        removeXItem.addActionListener(e -> {
            // Prompt the user to enter the amount to remove
            String amountStr = JOptionPane.showInputDialog(this, "Enter amount to remove:", "Remove Amount", JOptionPane.PLAIN_MESSAGE);
            if (amountStr != null && !amountStr.isEmpty()) {
                try {
                    int amountToRemove = Integer.parseInt(amountStr);
                    if (amountToRemove > 0) {
                        int newQuantity = this.item.getQuantity() - amountToRemove;
                        if (newQuantity < 0) {
                            newQuantity = 0;
                        }
                        this.item.setQuantity(newQuantity);
                        setQuantity(newQuantity);

                        parentPanel.updateList();
                        parentPanel.removeQuantity(this.getItemName(), newQuantity);

                    } else {
                        // Handle invalid input (negative)
                        JOptionPane.showMessageDialog(this, "Invalid amount entered.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });


        // Add items to the popup menu
        popupMenu.add(deleteItem);
        popupMenu.add(removeXItem);

        addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseEntered(MouseEvent mouseEvent)
            {
                DropLogTableRow.this.lastBackground = getBackground();
                setBackground(getBackground().brighter());
            }

            @Override
            public void mouseExited(MouseEvent mouseEvent)
            {
                setBackground(lastBackground);
            }
        });

        JPanel leftSide = new JPanel(new BorderLayout());
        JPanel rightSide = new JPanel(new BorderLayout());
        leftSide.setOpaque(false);
        rightSide.setOpaque(false);

        JPanel itemNameField = buildItemNameField();
        itemNameField.setOpaque(false);

        JPanel itemCountField = buildItemCountField();
        itemCountField.setPreferredSize(new Dimension(ITEM_COUNT_COLUMN_WIDTH, 0));
        itemCountField.setOpaque(false);

        JPanel valueField = buildValueField();
        valueField.setPreferredSize(new Dimension(ITEM_VALUE_COLUMN_WIDTH, 0));
        valueField.setOpaque(false);

        leftSide.add(itemNameField, BorderLayout.CENTER);
        leftSide.add(itemCountField, BorderLayout.EAST);
        rightSide.add(valueField, BorderLayout.CENTER);

        add(leftSide, BorderLayout.CENTER);
        add(rightSide, BorderLayout.EAST);
    }

    private JPanel buildValueField()
    {
        JPanel column = new JPanel(new BorderLayout());
        column.setBorder(new EmptyBorder(0, 5, 0, 5));

        value = new JLabel(QuantityFormatter.quantityToStackSize(getPrice()));
        value.setFont(FontManager.getRunescapeSmallFont());

        column.add(value, BorderLayout.EAST);

        return column;
    }

    int getPrice() {
        return item.getValue() * item.getQuantity();
    }

    private JPanel buildItemCountField()
    {
        JPanel column = new JPanel(new BorderLayout());
        column.setBorder(new EmptyBorder(0, 5, 0, 5));

        itemCount = new JLabel(QuantityFormatter.quantityToStackSize(getItemCount()));
        itemCount.setFont(FontManager.getRunescapeSmallFont());

        column.add(itemCount, BorderLayout.WEST);

        return column;
    }

    int getItemCount() {
        return item.getQuantity();
    }

    void setQuantity(int newQuantity) {
        item.setQuantity(newQuantity);

        itemCount.setText(QuantityFormatter.quantityToStackSize(newQuantity));

        int newPrice = getPrice();
        value.setText(QuantityFormatter.quantityToStackSize(newPrice));
    }

    private JPanel buildItemNameField()
    {
        JPanel column = new JPanel(new BorderLayout());
        column.setBorder(new EmptyBorder(0, 5, 0, 5));

        itemName = new JLabel(getItemName());
        itemName.setFont(FontManager.getRunescapeSmallFont());

        column.add(itemName, BorderLayout.WEST);

        return column;
    }

    String getItemName() {
        return item.getName();
    }
}

package org.woikaz.localstorage;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Inject;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Optional;

public class DropDataStorage {
    private static final String FILE_PATH = "dropLogData.json";
    @Inject
    private Gson gson;

    public void saveItem(DroppedItem item) {
        List<DroppedItem> items = loadAllItems();

        Optional<DroppedItem> existingItemOpt = items.stream()
                .filter(i -> i.getName().equals(item.getName()))
                .findFirst();

        if (existingItemOpt.isPresent()) {
            // If the item exists, update its quantity
            DroppedItem existingItem = existingItemOpt.get();
            int newQuantity = existingItem.getQuantity() + item.getQuantity();
            existingItem.setQuantity(newQuantity);
        } else {
            items.add(item);
        }

        // Save the updated list of items
        try (Writer writer = new FileWriter(FILE_PATH)) {
            gson.toJson(items, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void removeItem(String itemName) {
        List<DroppedItem> items = loadAllItems();

        items.removeIf(item -> item.getName().equals(itemName));

        try (Writer writer = new FileWriter(FILE_PATH)) {
            gson.toJson(items, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void setItemQuantity(String itemName, int newQuantity) {
        List<DroppedItem> items = loadAllItems();

        if (newQuantity > 0) {
            items.forEach(item -> {
                if (item.getName().equals(itemName)) {
                    item.setQuantity(newQuantity);
                }
            });
        } else {
            items.removeIf(item -> item.getName().equals(itemName));
        }

        try (Writer writer = new FileWriter(FILE_PATH)) {
            gson.toJson(items, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void decreaseItemQuantity(String itemName, int decreaseAmount) {
        List<DroppedItem> items = loadAllItems();

        ListIterator<DroppedItem> iterator = items.listIterator();
        while (iterator.hasNext()) {
            DroppedItem item = iterator.next();
            if (item.getName().equals(itemName)) {
                int newQuantity = item.getQuantity() - decreaseAmount;
                if (newQuantity > 0) {
                    item.setQuantity(newQuantity);
                } else {
                    // Remove the item if the new quantity is 0 or less
                    iterator.remove();
                }
                break; // Assuming item names are unique, break after finding the match
            }
        }

        // Save the updated list back to the JSON file
        try (Writer writer = new FileWriter(FILE_PATH)) {
            gson.toJson(items, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }



    public List<DroppedItem> loadAllItems() {
        List<DroppedItem> items = new ArrayList<>();
        File file = new File(FILE_PATH);

        // Check if the file exists, and if not, create it
        if (!file.exists()) {
            try {
                System.out.println("Create new file");
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("New file failed");
            }
        }

        // Proceed with loading items from the file
        try (Reader reader = new FileReader(file)) {
            List<DroppedItem> result = gson.fromJson(reader, new TypeToken<List<DroppedItem>>(){}.getType());
            if (result != null) {
                items = result;
            }
        } catch (FileNotFoundException e) {
            // This exception should not occur since we've just checked/created the file
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return items;
    }
}

package org.woikaz.localstorage;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class DroppedItem implements Cloneable
{
    int id;
    int quantity;
    String name;
    int value;

    public DroppedItem(int id, int quantity, String name) {
        this.id = id;
        this.quantity = quantity;
        this.name = name;
        this.value = 0;
    }

    @Override
    public DroppedItem clone() {
        try {
            return (DroppedItem) super.clone();
        } catch (CloneNotSupportedException e) {
            // This shouldn't happen since we're Cloneable
            throw new AssertionError();
        }
    }
}

package org.woikaz;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("droplog")
public interface DropLogConfig extends Config {
    @ConfigItem(
            keyName = "itemBlackList",
            name = "Black listed items",
            description = "Items that should not be added to the drop log"
    )
    default String blackListedItems() {
        return "";
    }

    @ConfigItem(
            keyName = "removeOnPickUp",
            name = "Remove on pickup",
            description = "If toggled, whenever the player picks up an item, the given items quantity gets decreased in the droplog"
    )
    default boolean removeOnPickUp() {
        return false;
    }
}

