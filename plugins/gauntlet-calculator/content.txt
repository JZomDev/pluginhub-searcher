package com.gauntletcalculator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GauntletCalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GauntletCalculatorPlugin.class);
		RuneLite.main(args);
	}
}
package com.gauntletcalculator;

import lombok.SneakyThrows;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class GauntletCalculatorPanel extends PluginPanel {
    private int shardCount;
    private int oreCount;
    private int linumCount;
    private int phrenCount;
    private int frameCount;
    private int weaponCount;
    private int grymCount;

    private JComboBox weapon1Combo = new JComboBox();
    private JComboBox weapon2Combo = new JComboBox();
    private JComboBox helmCombo = new JComboBox();
    private JComboBox chestCombo = new JComboBox();
    private JComboBox legsCombo = new JComboBox();
    private FlatTextField escapeText = new FlatTextField();
    private FlatTextField teleportText = new FlatTextField();
    private FlatTextField potionText = new FlatTextField();
    private JPanel itemPanel = new JPanel();
    private String[] types = {"None", "Basic", "Attuned", "Perfected"};

    @Inject
    private GauntletCalculatorPanel(){
        shardCount = 0;
        oreCount = 0;
        linumCount = 0;
        phrenCount = 0;
        frameCount = 0;
        weaponCount = 0;
        grymCount = 0;
        this.setPreferredSize(new Dimension(200, 800));
        this.add(createTitleLabel("Gauntlet Calculator"));
        styleBoxes();

        itemPanel.setLayout(new GridLayout(0,4));
        itemPanel.setPreferredSize(new Dimension(200, 100));
        setItemPanel();

        weapon1Combo.setModel(new DefaultComboBoxModel(types));
        weapon2Combo.setModel(new DefaultComboBoxModel(types));
        helmCombo.setModel(new DefaultComboBoxModel(types));
        chestCombo.setModel(new DefaultComboBoxModel(types));
        legsCombo.setModel(new DefaultComboBoxModel(types));

        weapon1Combo.setSelectedIndex(0);
        weapon2Combo.setSelectedIndex(0);
        helmCombo.setSelectedIndex(0);
        chestCombo.setSelectedIndex(0);
        legsCombo.setSelectedIndex(0);

        this.add(getWeapon1());
        this.add(weapon1Combo);
        this.add(getWeapon2());
        this.add(weapon2Combo);
        this.add(getHelm());
        this.add(helmCombo);
        this.add(getBody());
        this.add(chestCombo);
        this.add(getLegs());
        this.add(legsCombo);
        this.add(getPotion());
        this.add(potionText);
        this.add(getTeleport());
        this.add(teleportText);
        this.add(getEscape());
        this.add(escapeText);
        this.add(createEnterButton());
        this.add(itemPanel);

    }

    private JLabel createTitleLabel(String title){
        JLabel label = new JLabel(title, SwingConstants.CENTER);
        label.setPreferredSize(new Dimension(200, 20));
        label.setForeground(Color.yellow);
        return label;
    }

    private void styleBoxes(){
        weapon1Combo.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        weapon2Combo.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        helmCombo.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        chestCombo.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        legsCombo.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        escapeText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        escapeText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        escapeText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        escapeText.setText("0");

        teleportText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        teleportText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        teleportText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        teleportText.setText("0");

        potionText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        potionText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        potionText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        potionText.setText("0");
    }

    private JLabel getWeapon1(){
        JLabel label = new JLabel();
        label.setToolTipText("Weapon 1");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Weapon 1");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Crystal_halberd_(perfected).png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getWeapon2(){
        JLabel label = new JLabel();
        label.setToolTipText("Weapon 2");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Weapon 2");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Crystal_bow_(perfected).png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getHelm(){
        JLabel label = new JLabel();
        label.setToolTipText("Helm");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Helm");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Crystal_helm_(perfected).png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getBody(){
        JLabel label = new JLabel();
        label.setToolTipText("Chest");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Chest Tier");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Crystal_body_(perfected).png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getLegs(){
        JLabel label = new JLabel();
        label.setToolTipText("Legs");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Legs Tier");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Crystal_legs_(perfected).png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getEscape(){
        JLabel label = new JLabel();
        label.setToolTipText("Escape");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Escape Crystals");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Escape_crystal.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getTeleport(){
        JLabel label = new JLabel();
        label.setToolTipText("Teleport");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Teleport Crystals");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Teleport_crystal.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getPotion(){
        JLabel label = new JLabel();
        label.setToolTipText("Potion");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Egniol Potions");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Vial.png")));
        label.setIconTextGap(10);
        return label;
    }

    private void setItemPanel(){
        itemPanel.removeAll();
        itemPanel.add(createItemLabel("Crystal_shard_1", String.valueOf(shardCount)));
        itemPanel.add(createItemLabel("Crystal_ore", String.valueOf(oreCount)));
        itemPanel.add(createItemLabel("Linum_tirinum", String.valueOf(linumCount)));
        itemPanel.add(createItemLabel("Phren_bark", String.valueOf(phrenCount)));
        itemPanel.add(createItemLabel("Grym_leaf", String.valueOf(grymCount)));
        itemPanel.add(createItemLabel("Weapon_frame", String.valueOf(frameCount)));
        itemPanel.add(createItemLabel("Crystal_spike", String.valueOf(weaponCount)));
    }

    private JLabel createItemLabel(String name, String qty){
        JLabel label = new JLabel();
        label.setToolTipText(name);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBorder(BorderFactory.createLineBorder(ColorScheme.DARK_GRAY_COLOR));
        Icon icon = new ImageIcon(ImageUtil.loadImageResource(getClass(), name + ".png"));
        label.setIcon(getLabeledIcon(icon, qty));
        return label;
    }

    private Icon getLabeledIcon(Icon old, String qty){
        int w = old.getIconWidth();
        int h = old.getIconHeight();

        BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = img.createGraphics();
        old.paintIcon(null, g2d, 0, 0);
        g2d.setPaint(Color.white);
        g2d.drawString(qty, 0, 10);
        g2d.dispose();
        return new ImageIcon(img.getScaledInstance(w, h, Image.SCALE_SMOOTH));
    }

    private JButton createEnterButton() {
        final JButton label = new JButton("Calculate");
        label.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        label.setFocusable(false);
        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                label.setBackground(ColorScheme.DARK_GRAY_HOVER_COLOR);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                label.setBackground(ColorScheme.DARK_GRAY_COLOR);
            }

            @SneakyThrows
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    label.setText("Wait...");
                    runCalculation();
                    setItemPanel();
                    label.setText("Calculate");
                }
            }
        });

        return label;
    }

    private void runCalculation() {
        int escapeX, potionX, teleportX;
        try {
            escapeX = Integer.parseInt(escapeText.getText());
        } catch (Exception e) {
            escapeX = 0;
            escapeText.setText("0");
        }
        try {
            potionX = Integer.parseInt(potionText.getText());
        } catch (Exception e) {
            potionX = 0;
            potionText.setText("0");
        }
        try {
            teleportX = Integer.parseInt(teleportText.getText());
        } catch (Exception e) {
            teleportX = 0;
            teleportText.setText("0");
        }

        shardCount = 0;
        oreCount = 0;
        linumCount = 0;
        phrenCount = 0;
        frameCount = 0;
        weaponCount = 0;
        grymCount = 0;
        //weapon 1
        switch (weapon1Combo.getSelectedIndex()) {
            case 3:
                weaponCount += 1;
            case 2:
                shardCount += 60;
            case 1:
                shardCount += 20;
                frameCount += 1;
            default:
                break;
        }
        //weapon 2
        switch (weapon2Combo.getSelectedIndex()) {
            case 3:
                weaponCount += 1;
            case 2:
                shardCount += 60;
            case 1:
                shardCount += 20;
                frameCount += 1;
            default:
                break;
        }
        //helm
        switch (helmCombo.getSelectedIndex()) {
            case 3:
                shardCount += 80;
                oreCount += 2;
                phrenCount += 2;
                linumCount += 2;
            case 2:
                shardCount += 60;
                oreCount += 1;
                phrenCount += 1;
                linumCount += 1;
            case 1:
                shardCount += 40;
                oreCount += 1;
                phrenCount += 1;
                linumCount += 1;
            default:
                break;
        }

        //chest
        switch (chestCombo.getSelectedIndex()) {
            case 3:
                shardCount += 80;
                oreCount += 2;
                phrenCount += 2;
                linumCount += 2;
            case 2:
                shardCount += 60;
                oreCount += 2;
                phrenCount += 2;
                linumCount += 2;
            case 1:
                shardCount += 40;
                oreCount += 1;
                phrenCount += 1;
                linumCount += 1;
            default:
                break;
        }

        //legs
        switch (legsCombo.getSelectedIndex()) {
            case 3:
                shardCount += 80;
                oreCount += 2;
                phrenCount += 2;
                linumCount += 2;
            case 2:
                shardCount += 60;
                oreCount += 1;
                phrenCount += 1;
                linumCount += 1;
            case 1:
                shardCount += 40;
                oreCount += 1;
                phrenCount += 1;
                linumCount += 1;
            default:
                break;
        }

        //escape
        shardCount += escapeX * 200;

        //potion
        grymCount += potionX;
        shardCount += potionX * 20;

        //teleport
        shardCount += teleportX * 40;
    }
}

package com.gauntletcalculator;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
	name = "Gauntlet Calculator",
	description = "Calculates how many crystal shards and resources you need in the Gauntlet",
	tags = {"Corrupted", "Gauntlet", "Bwana Ian", "Resources", "Crystal Shards"}
)
public class GauntletCalculatorPlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	private GauntletCalculatorPanel panel;
	private NavigationButton navButton;

	@Override
	protected void startUp(){
		startPanel();
	}

	@Override
	protected void shutDown(){
		clientToolbar.removeNavigation(navButton);
	}

	private void startPanel(){
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "Crystal_shard.png");
		panel = injector.getInstance(GauntletCalculatorPanel.class);

		navButton = NavigationButton.builder()
				.tooltip("Gauntlet Calculator")
				.icon(icon)
				.priority(6)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);
	}
}

