package com.ImpoliteSlayer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ImpoliteSlayerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ImpoliteSlayerPlugin.class);
		RuneLite.main(args);
	}
}
package com.ImpoliteSlayer;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.slayer.SlayerPlugin;
import net.runelite.client.plugins.slayer.SlayerPluginService;

import java.util.Arrays;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Impolite Slayer"
)
@PluginDependency(SlayerPlugin.class)
public class ImpoliteSlayerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ImpoliteSlayerConfig config;

	@Inject
	private SlayerPluginService slayerPluginService;

	private List<String> badTasks;
	private Widget[] dialogueOptions;

	@Override
	protected void startUp()
	{
		initImpoliteSlayer();
	}

	private void initImpoliteSlayer()
	{
		log.debug("Loading Impolite Slayer config...");
		this.badTasks = Arrays.asList(this.config.badTasks().split(","));
	}

	@Subscribe
	public void onGameTick(GameTick tick) {
		String task = slayerPluginService.getTask();
		if(!badTasks.contains(task) && !config.goodMessageEnabled()) {
			return;
		}
		Widget playerDialogueTextWidget = client.getWidget(ComponentID.DIALOG_PLAYER_TEXT);

		if (playerDialogueTextWidget != null) {
			String playerText = playerDialogueTextWidget.getText();
			if(playerText.equals("Okay, great!")) {
				if (badTasks.contains(task)) {
					playerDialogueTextWidget.setText(config.message());
				} else {
					playerDialogueTextWidget.setText(config.goodMessage());
				}
			}
		}

		Widget playerDialogueOptionsWidget = client.getWidget(InterfaceID.DIALOG_OPTION, 1);
		if (playerDialogueOptionsWidget != null && playerDialogueOptionsWidget.getChildren() != dialogueOptions) {
			dialogueOptions = playerDialogueOptionsWidget.getChildren();
            if (dialogueOptions != null) {
				for (Widget dialogueOption : dialogueOptions) {
					if (dialogueOption.getText().equals("Okay, great!")) {
						if (badTasks.contains(task)) {
							dialogueOption.setText(config.message());
						} else {
							dialogueOption.setText(config.goodMessage());
						}
					}
				}
				dialogueOptions = playerDialogueOptionsWidget.getChildren();
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if(event.getGroup().equals("impolite-slayer"))
		{
			initImpoliteSlayer();
		}
	}

	@Provides
	ImpoliteSlayerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ImpoliteSlayerConfig.class);
	}
}

package com.ImpoliteSlayer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("impolite-slayer")
public interface ImpoliteSlayerConfig extends Config
{
	@ConfigItem(
		keyName = "badTasks",
		name = "Bad Tasks",
		description = "Tasks that make you angry when you are assigned them!"
	)
	default String badTasks()
	{
		return "Waterfiends,Fossil Island Wyverns,Adamant Dragons,Red Dragons,Elves,Steel Dragons,Spiritual Creatures,Iron Dragons";
	}
	@ConfigItem(
			keyName = "message",
			name = "Bad message",
			description = "What you'd like to say to a slayer master when you receive a bad task."
	)
	default String message()
	{
		return "Screw you!";
	}
	@ConfigItem(
			keyName = "goodMessageEnabled",
			name = "Enable good message",
			description = "Enable to also replace the message for good tasks."
	)
	default boolean goodMessageEnabled()
	{
		return false;
	}
	@ConfigItem(
			keyName = "goodMessage",
			name = "Good message",
			description = "What you'd like to say to a slayer master when you receive a good task."
	)
	default String goodMessage() { return "Praise the Sun!"; }
}
