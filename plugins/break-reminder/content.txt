package com.breakreminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BreakReminderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BreakReminderPlugin.class);
		RuneLite.main(args);
	}
}
package com.breakreminder;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.time.Duration;
import java.time.Instant;
import java.util.Objects;

public class TimerTest
{
    @Rule
    public final ExpectedException exception = ExpectedException.none();

    @Test()
    public void startTimerThrowsExceptionWhenEndTimeIsNull()
    {
        exception.expect(NullPointerException.class);
        exception.expectMessage("End time cannot be null");

        new Timer(null);
    }

    @Test
    public void getDurationBetweenSystemClockAndEndTimeReturnsExpectedDuration()
    {
        final int seconds = 123;

        Instant endTime = Instant.now().plusSeconds(seconds);

        Timer timer = new Timer(endTime);

        Duration duration = timer.getDurationBetweenSystemClockAndEndTime();
        Duration expectedDuration = Duration.between(Instant.now(), endTime);

        assert duration.toMinutes() == expectedDuration.toMinutes();
        assert duration.getSeconds() == expectedDuration.getSeconds();
    }

    @Test
    public void formatDurationReturnsExpectedMinutesAndSeconds()
    {
        final int seconds = 123;

        Instant endTime = Instant.now().plusSeconds(seconds);

        Timer timer = new Timer(endTime);

        Duration duration = timer.getDurationBetweenSystemClockAndEndTime();

        String minutesAndSeconds = timer.formatDuration(duration, true);
        String minutes = timer.formatDuration(duration, false);

        assert Objects.equals(minutesAndSeconds, "2:2");
        assert Objects.equals(minutes, "2");
    }

    @Test
    public void roundMinutesRoundsUpWhenDurationIsPositive()
    {
        final int seconds = 61;
        final int expectedMinutes = 2;

        Instant endTime = Instant.now().plusSeconds(seconds);

        Timer timer = new Timer(endTime);

        Duration duration = timer.getDurationBetweenSystemClockAndEndTime();

        Duration roundedDuration = timer.roundMinutes(duration);

        long minutes = roundedDuration.toMinutes();

        assert minutes == expectedMinutes;
    }

    @Test
    public void roundMinutesRoundsDownWhenDurationIsNegative()
    {
        final int seconds = 61;
        final int expectedMinutes = -1;

        Instant endTime = Instant.now().minusSeconds(seconds);

        Timer timer = new Timer(endTime);

        Duration duration = timer.getDurationBetweenSystemClockAndEndTime();

        Duration roundedDuration = timer.roundMinutes(duration);

        long minutes = roundedDuration.toMinutes();

        assert minutes == expectedMinutes;
    }
}

package com.breakreminder;

import com.google.inject.Inject;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;
import java.time.Duration;

public class BreakOverlay extends Overlay
{
    private final PanelComponent panelComponent = new PanelComponent();
    private final BreakReminderPlugin plugin;
    private final BreakConfig config;

    @Inject
    private BreakOverlay(BreakReminderPlugin plugin, BreakConfig config)
    {
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        Timer timer = plugin.getTimer();

        Duration timeRemaining = timer.getDurationBetweenSystemClockAndEndTime();

        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(createTitle(timeRemaining));
        panelComponent.getChildren().add(createTimeDisplay(timeRemaining, timer));

        if (plugin.getCurrentBreakIntervalLength() != config.nextBreakInterval())
        {
            LayoutableRenderableEntity nextInterval = createNextInterval(timer);

            panelComponent.getChildren().add(nextInterval);
        }

        panelComponent.setPreferredSize(new Dimension(105, 0));
        panelComponent.setBorder(new Rectangle(5, 5, 5, 5));

        setPosition(config.overlayPosition());

        return panelComponent.render(graphics);
    }

    private LayoutableRenderableEntity createTitle(Duration timeRemaining)
    {
        return timeRemaining.isNegative()
            ? buildTitle("Take a break", Color.red)
            : buildTitle("Break due", Color.green);
    }

    private LayoutableRenderableEntity createTimeDisplay(Duration timeRemaining, Timer timer)
    {
        String formattedTime = timer.formatDuration(config.DisplaySeconds()
                ? timeRemaining
                : timer.roundMinutes(timeRemaining), config.DisplaySeconds());

        return timeRemaining.isNegative()
                ? buildLine("Overdue:", Color.orange, formattedTime, Color.orange)
                : buildLine("Time:", Color.white, formattedTime, Color.white);
    }

    private LayoutableRenderableEntity createNextInterval(Timer timer)
    {
        Color color = SystemColor.info;
        Duration minutes = Duration.ofMinutes(config.nextBreakInterval());
        String duration = timer.formatDuration(minutes, config.DisplaySeconds());

        return buildLine("Next:", color, duration, color);
    }

    private TitleComponent buildTitle(String text, Color color)
    {
        return TitleComponent.builder()
                .text(text)
                .color(color)
                .build();
    }

    private LineComponent buildLine(String left, Color leftColor, String right, Color rightColor)
    {
        return LineComponent
                .builder()
                .left(left).leftColor(leftColor)
                .right(right).rightColor(rightColor)
                .build();
    }
}

package com.breakreminder;

import com.google.inject.Provides;
import lombok.Getter;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@PluginDescriptor(
        name = "Break Reminder",
        description = "Reminder to take regular breaks"
)
public class BreakReminderPlugin extends Plugin {

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private BreakOverlay breakOverlay;

    @Inject
    private BreakConfig config;

    @Provides
    BreakConfig provideConfig(ConfigManager configManager) { return configManager.getConfig(BreakConfig.class); }

    @Getter
    private Timer timer;

    @Getter
    private int currentBreakIntervalLength;

    private final List<GameState> previousGameStates = new ArrayList<>();

    private final int hoppingStatesQuantity = 3;

    @Override
    protected void startUp()
    {
        currentBreakIntervalLength = config.nextBreakInterval();

        long intervalInSeconds = currentBreakIntervalLength * 60L;
        Instant intervalEndTime = Instant.now().plusSeconds(intervalInSeconds);

        timer = new Timer(intervalEndTime);
        overlayManager.add(breakOverlay);
    }

    @Override
    protected void shutDown()
    {
        overlayManager.remove(breakOverlay);
        previousGameStates.clear();
        timer = null;
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        previousGameStates.add(event.getGameState());

        if (previousGameStates.size() < hoppingStatesQuantity)
        {
            return;
        }

        if (event.getGameState() == GameState.LOGGED_IN && !isWorldHopping())
        {
            currentBreakIntervalLength = config.nextBreakInterval();

            int intervalInSeconds = config.nextBreakInterval() * 60;
            Instant intervalEndTime = Instant.now().plusSeconds(intervalInSeconds);
            
            timer = new Timer(intervalEndTime);
        }
    }

    private boolean isWorldHopping()
    {
        int size = previousGameStates.size();
        List<GameState> states = previousGameStates.subList(size - hoppingStatesQuantity, size);

        return     states.get(0) == GameState.HOPPING
                && states.get(1) == GameState.LOADING
                && states.get(2) == GameState.LOGGED_IN;
    }
}

package com.breakreminder;

import net.runelite.client.config.*;
import net.runelite.client.ui.overlay.OverlayPosition;

@ConfigGroup("break")
public interface BreakConfig extends Config {
    @ConfigItem(
            keyName = "breakInterval",
            name = "Break interval",
            description = "Set the duration of the break reminder"
    )
    @Range(min = 15, max = 90)
    @Units(Units.MINUTES)
    default int nextBreakInterval() { return 45; }

    @ConfigItem(
            keyName = "timeFormat",
            name = "Display seconds",
            description = "Enable / disable seconds displayed on the timer"
    )
    default boolean DisplaySeconds() { return true; }

    @ConfigItem(
            keyName = "breakOverlayPosition",
            name = "Position",
            description = "Overlay position on the screen"
    )
    default OverlayPosition overlayPosition() { return OverlayPosition.ABOVE_CHATBOX_RIGHT; }
}

package com.breakreminder;

import org.apache.commons.lang3.time.DurationFormatUtils;

import java.time.Duration;
import java.time.Instant;

public class Timer
{
    private final Instant endTime;

    public Timer(Instant endTime)
    {
        this.endTime = endTime;

        if (endTime == null)
        {
            throw new NullPointerException("End time cannot be null");
        }
    }

    public Duration getDurationBetweenSystemClockAndEndTime()
    {
        Instant now = Instant.now();

        return Duration.between(now, endTime);
    }

    public String formatDuration(Duration duration, boolean showSeconds)
    {
        long hours = duration.toHours();

        String format;

        if (hours > 0)
        {
            format = showSeconds ? "H:mm:ss" : "H:mm";
        }
        else
        {
            format = showSeconds ? "mm:ss" : "mm";
        }

        long milliseconds = duration.abs().toMillis();

        return DurationFormatUtils.formatDuration(milliseconds, format, false);
    }

    public Duration roundMinutes(Duration duration)
    {
        if (duration.isNegative())
        {
            return duration;
        }

        return duration.plusMinutes(1);
    }
}

