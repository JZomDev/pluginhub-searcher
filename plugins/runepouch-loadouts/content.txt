package com.github.dappermickie.runepouch.loadout.names;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(RunepouchLoadoutNamesConfig.RUNEPOUCH_LOADOUT_CONFIG_GROUP)
public interface RunepouchLoadoutNamesConfig extends Config
{
	String RUNEPOUCH_LOADOUT_CONFIG_GROUP = "RunepouchLoadoutConfig";

	@ConfigSection(
		position = 0,
		name = "Settings",
		description = ""
	)
	String sectionSettings = "sectionSettings";
	
	@ConfigItem(
		position = 0,
		keyName = "hideRunePouchNames",
		name = "Hide Loadout Names",
		description = "",
		section = sectionSettings
	)
	default boolean hideRunePouchNames() {
			return false;
	}
	
	@ConfigItem(
		position = 1,
		keyName = "hideRunePouchLoadoutHeader",
		name = "Hide Load-outs Header Text",
		description = "",
		section = sectionSettings
	)
	default boolean hideRunePouchLoadoutHeader() {
			return true;
	}
}

package com.github.dappermickie.runepouch.loadout.names;

import com.google.common.base.Strings;
import com.google.inject.Provides;
import java.awt.Color;
import java.util.ArrayList;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.FontID;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.api.widgets.WidgetPositionMode;
import net.runelite.api.widgets.WidgetTextAlignment;
import net.runelite.api.widgets.WidgetType;
import net.runelite.api.widgets.WidgetSizeMode;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Rune Pouch Loadouts"
)
public class RunepouchLoadoutNamesPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private RunepouchLoadoutNamesConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ChatboxPanelManager chatboxPanelManager;

	private static final String LOADOUT_PROMPT_FORMAT = "%s<br>" +
		ColorUtil.prependColorTag("(Limit %s Characters)", new Color(0, 0, 170));
	private int lastRunepouchVarbitValue = 0;

	@Override
	protected void shutDown() throws Exception
	{
		clientThread.invokeLater(this::resetRunepouchWidget);
	}

	@Override
	protected void startUp() throws Exception
	{
		clientThread.invokeLater(() -> {
			var runepouchWidget = client.getWidget(InterfaceID.Bankside.RUNEPOUCH_CONTAINER);
			if (runepouchWidget != null && !runepouchWidget.isHidden()) {
				reloadRunepouchLoadout();
			}
		});
	}

	@Subscribe
	public void onMenuOpened(MenuOpened event)
	{
		MenuEntry[] actions = event.getMenuEntries();
		MenuEntry firstEntry = event.getFirstEntry();

		Widget widget = firstEntry.getWidget();
		if (widget == null) return;

		var widgetId = widget.getId();

		switch (widgetId)
		{
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_A:
				setLeftClickMenu(1, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_B:
				setLeftClickMenu(2, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_C:
				setLeftClickMenu(3, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_D:
				setLeftClickMenu(4, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_E:
				setLeftClickMenu(5, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_F:
				setLeftClickMenu(6, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_G:
				setLeftClickMenu(7, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_H:
				setLeftClickMenu(8, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_I:
				setLeftClickMenu(9, actions, firstEntry);
				break;
			case InterfaceID.Bankside.RUNEPOUCH_LOAD_J:
				setLeftClickMenu(10, actions, firstEntry);
				break;
		}
	}

	private void setLeftClickMenu(int loadoutId, MenuEntry[] actions, MenuEntry firstEntry)
	{
		var leftClickMenus = new ArrayList<>(actions.length + 1);
		firstEntry
			.setOption("Load")
			.setTarget(getLoadoutName(loadoutId));

		leftClickMenus.add(client.getMenu().createMenuEntry(1)
			.setOption("Rename")
			.setTarget(getLoadoutName(loadoutId))
			.setType(MenuAction.RUNELITE)
			.onClick((MenuEntry e) -> renameLoadout(loadoutId)));
	}

	private String getLoadoutName(int id)
	{
		String loadoutName = configManager.getRSProfileConfiguration(RunepouchLoadoutNamesConfig.RUNEPOUCH_LOADOUT_CONFIG_GROUP, "runepouch.loadout." + lastRunepouchVarbitValue + "." + id);

		if (loadoutName == null || loadoutName.isEmpty())
		{
			loadoutName = "Loadout " + id;
			configManager.setRSProfileConfiguration(RunepouchLoadoutNamesConfig.RUNEPOUCH_LOADOUT_CONFIG_GROUP, "runepouch.loadout." + lastRunepouchVarbitValue + "." + id, loadoutName);
		}

		return loadoutName;
	}

	private void renameLoadout(int id)
	{
		String oldLoadoutName = getLoadoutName(id);
		chatboxPanelManager.openTextInput(String.format(LOADOUT_PROMPT_FORMAT, "Loadout: ", 40))
			.value(Strings.nullToEmpty(oldLoadoutName))
			.onDone((newLoadoutName) ->
			{
				if (newLoadoutName == null)
				{
					return;
				}

				newLoadoutName = Text.removeTags(newLoadoutName).trim();
				configManager.setRSProfileConfiguration(RunepouchLoadoutNamesConfig.RUNEPOUCH_LOADOUT_CONFIG_GROUP, "runepouch.loadout." + lastRunepouchVarbitValue + "." + id, newLoadoutName);
				clientThread.invokeLater(this::reloadRunepouchLoadout);
			}).build();
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarbitId() == VarbitID.BANK_VIEWCONTAINER)
		{
			final int varbitValue = event.getValue();
			if (varbitValue == 3 || varbitValue == 4)
			{
				lastRunepouchVarbitValue = varbitValue;
				clientThread.invokeLater(this::reloadRunepouchLoadout);
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(RunepouchLoadoutNamesConfig.RUNEPOUCH_LOADOUT_CONFIG_GROUP)) return;

		clientThread.invokeLater(this::reloadRunepouchLoadout);
	}

	private void resetRunepouchWidget()
	{
    // TODO: Implement
		// Closing the bank resets this anyway, so this would be a niece QoL for people toggling this plugin with the rune pouch open
	}

	private void reloadRunepouchLoadout()
	{
		// Hide the header text if configured to do so
		var runepouchLoadoutTextWidget = client.getWidget(InterfaceID.Bankside.RUNEPOUCH_CONTENTS_TEXT1);
		var runepouchLoadoutTextOffset = runepouchLoadoutTextWidget.getHeight();
		if (config.hideRunePouchLoadoutHeader()) {
			runepouchLoadoutTextWidget.setHidden(true);
			runepouchLoadoutTextOffset = 0;
		} else {
			runepouchLoadoutTextWidget.setHidden(false);
		}

		var runepouchTop = client.getWidget(InterfaceID.Bankside.RUNEPOUCH_TOP);
		var runepouchTopOffset = runepouchTop.getRelativeX() + runepouchTop.getHeight() + runepouchLoadoutTextOffset;

		// Move the loadout container up to fill the gap from the header text (if hidden)
		var runepouchLoadoutContainer = client.getWidget(InterfaceID.Bankside.RUNEPOUCH_LOADOUT_CONTAINER);
		runepouchLoadoutContainer.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		runepouchLoadoutContainer.setOriginalY(runepouchTopOffset);
		runepouchLoadoutContainer.setHeightMode(WidgetSizeMode.MINUS);
		runepouchLoadoutContainer.setOriginalHeight(runepouchTopOffset);
		runepouchLoadoutContainer.revalidate();

		int loadoutRowHeight = 0;
		int loadoutWidgetIndex = 0;
		for (var loadoutWidget : runepouchLoadoutContainer.getStaticChildren())
		{
			var loadoutNameWidget = client.getWidget(loadoutWidget.getId() + 1);
			var loadoutNameWidgetHeight = loadoutNameWidget.getHeight();

			if (config.hideRunePouchNames()) {
				// Hide the rename button all together
				loadoutNameWidget.setHidden(true);
				for (var loadoutNameWidgetChild : loadoutNameWidget.getDynamicChildren()) {
					loadoutNameWidgetChild.setHidden(false);
					loadoutNameWidgetChild.revalidate();
				}
			} else {
				loadoutNameWidgetHeight = loadoutNameWidgetHeight - 12;

				// Hide the rename button children
				for (var loadoutNameWidgetChild : loadoutNameWidget.getDynamicChildren()) {
					loadoutNameWidgetChild.setHidden(true);
					loadoutNameWidgetChild.revalidate();
				}

				// Replace the rename button with the custom text
				loadoutNameWidget.setType(WidgetType.TEXT);
				loadoutNameWidget.setFontId(FontID.TAHOMA_11);
				loadoutNameWidget.setTextColor(0xFF981F);
				loadoutNameWidget.setTextShadowed(true);
				loadoutNameWidget.setText(getLoadoutName(loadoutWidgetIndex + 1));
				loadoutNameWidget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
				loadoutNameWidget.setOriginalY(10);
				loadoutNameWidget.setYTextAlignment(WidgetTextAlignment.TOP);
				loadoutNameWidget.setHidden(false);
				loadoutNameWidget.setHasListener(false);
				loadoutNameWidget.clearActions();
			}
			
			loadoutNameWidget.revalidate();

			var newLoadoutHeight = loadoutWidget.getHeight() - loadoutNameWidgetHeight;

		  // Move the loadout widget up to fill the gap
			loadoutWidget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
			loadoutWidget.setOriginalY((newLoadoutHeight * loadoutWidgetIndex - 2 - (2 * loadoutWidgetIndex)) - loadoutNameWidgetHeight);
			loadoutWidget.revalidate();

			for (var loadoutRuneWidget : loadoutWidget.getDynamicChildren())
			{
				if (loadoutRuneWidget.getType() == WidgetType.RECTANGLE) {
					loadoutRuneWidget.setHeightMode(WidgetSizeMode.ABSOLUTE);
					loadoutRuneWidget.setOriginalHeight(newLoadoutHeight - 4);
					loadoutRuneWidget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
					loadoutRuneWidget.setOriginalY(loadoutNameWidgetHeight + 4);
					loadoutRuneWidget.revalidate();

					if (loadoutRowHeight == 0) {
						loadoutRowHeight = loadoutRuneWidget.getHeight() + 2;
					}
					continue;
				}
			}

			loadoutWidgetIndex++;
		}

		// Recalculate how far the container can scroll
		runepouchLoadoutContainer.setScrollHeight(loadoutRowHeight * 10);
		runepouchLoadoutContainer.revalidate();

		// Update the scrollbar
		var runepouchScrollbar = client.getWidget(InterfaceID.Bankside.RUNEPOUCH_LOADOUT_SCROLLBAR);
    if (runepouchScrollbar != null) {
      runepouchScrollbar.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
			runepouchScrollbar.setOriginalY(runepouchTopOffset);

      runepouchScrollbar.setHeightMode(WidgetSizeMode.MINUS);
      runepouchScrollbar.setOriginalHeight(runepouchTopOffset);
      runepouchScrollbar.revalidate();
    }

    var runepouchScrollbarBG = runepouchScrollbar.getChild(0);
    if (runepouchScrollbarBG != null) {
      runepouchScrollbarBG.setHeightMode(WidgetSizeMode.MINUS);
      runepouchScrollbarBG.setOriginalHeight(32);
      runepouchScrollbarBG.revalidate();
    }
    
    var runepouchScrollbarDown = runepouchScrollbar.getChild(5);
    if (runepouchScrollbarDown != null) {
      runepouchScrollbarDown.setYPositionMode(WidgetPositionMode.ABSOLUTE_BOTTOM);
      runepouchScrollbarDown.setOriginalY(0);
      runepouchScrollbarDown.revalidate();
    }
	}

	@Provides
	RunepouchLoadoutNamesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RunepouchLoadoutNamesConfig.class);
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted event) {
		if (event.getCommand().equals("resetrunepouchloadout")) {
			clientThread.invoke(this::resetRunepouchWidget);
		} else if (event.getCommand().equals("reloadrunepouchloadout")) {
			clientThread.invoke(this::reloadRunepouchLoadout);
		}
	}
}

package com.github.dappermickie.runepouch.loadout.names;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RunepouchLoadoutNamesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RunepouchLoadoutNamesPlugin.class);
		RuneLite.main(args);
	}
}
