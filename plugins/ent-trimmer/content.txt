package com.ent;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EntPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EntPlugin.class);
		RuneLite.main(args);
	}
}
package com.ent;

public enum EntClassification
{
	PERFECT,
	PRIORITY,
	NONPRIORITY,
	;
}

package com.ent;

public enum TrimType
{
	TOP(4, "Short on top!", "Top"),
	MULLET(3, "A leafy mullet!", "Top/Sides"),
	BACK_AND_SIDES(2, "Short back and sides!", "Back/Sides"),
	BACK(1, "Breezy at the back!", "Back"),
	;

	final int priority;
	final String overheadText;
	final String shortText;


	TrimType(int priority, String overheadText, String shortText)
	{
		this.priority = priority;
		this.overheadText = overheadText;
		this.shortText = shortText;
	}

	public static final TrimType[] values = TrimType.values();
}

package com.ent.discord;

import com.ent.EntConfig;
import com.google.common.base.Strings;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.ui.DrawManager;
import static net.runelite.http.api.RuneLiteAPI.GSON;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

@Slf4j
public class DiscordWebhook
{
	private final Client client;
	private final EntConfig config;
	private OkHttpClient okHttpClient;
	private DrawManager drawManager;

	@Inject
	DiscordWebhook(Client client, EntConfig config, OkHttpClient okHttpClient, DrawManager drawManager) {
		this.client = client;
		this.config = config;
		this.okHttpClient = okHttpClient;
		this.drawManager = drawManager;
	}

	public void sendWebhook(DiscordWebhookBody discordWebhookBody, boolean sendScreenshot)
	{
		String configUrl = config.discordWebhookUrl();
		if (Strings.isNullOrEmpty(configUrl)) { return; }

		HttpUrl url = HttpUrl.parse(configUrl);
		MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
			.setType(MultipartBody.FORM)
			.addFormDataPart("payload_json", GSON.toJson(discordWebhookBody));

		if (sendScreenshot)
		{
			sendWebhookWithScreenshot(url, requestBodyBuilder);
		}
		else
		{
			buildRequestAndSend(url, requestBodyBuilder);
		}
	}

	void sendWebhookWithScreenshot(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
	{
		drawManager.requestNextFrameListener(image ->
		{
			BufferedImage bufferedImage = (BufferedImage) image;
			byte[] imageBytes;
			try
			{
				imageBytes = convertImageToByteArray(bufferedImage);
			}
			catch (IOException e)
			{
				log.warn("Error converting image to byte array", e);
				return;
			}

			requestBodyBuilder.addFormDataPart("file", "image.png",
				RequestBody.create(MediaType.parse("image/png"), imageBytes));
			buildRequestAndSend(url, requestBodyBuilder);
		});
	}

	private void buildRequestAndSend(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
	{
		RequestBody requestBody = requestBodyBuilder.build();
		Request request = new Request.Builder()
			.url(url)
			.post(requestBody)
			.build();
		sendRequest(request);
	}

	private void sendRequest(Request request)
	{
		okHttpClient.newCall(request).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Error submitting webhook", e);
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				response.close();
			}
		});
	}

	private static byte[] convertImageToByteArray(BufferedImage bufferedImage) throws IOException
	{
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		synchronized (ImageIO.class)
		{
			ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
		}
		return byteArrayOutputStream.toByteArray();
	}

}

package com.ent.discord;

import lombok.Data;

@Data
public
class DiscordWebhookBody
{
	private String content;
	private Embed embed;

	@Data
	static class Embed
	{
		final UrlEmbed image;
	}

	@Data
	static class UrlEmbed
	{
		final String url;
	}
}
package com.ent;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class EntOverlay2D extends OverlayPanel
{
	private final Client client;
	private final EntPlugin plugin;
	private final EntConfig config;

	@Inject
	private EntOverlay2D(Client client, EntPlugin plugin, EntConfig config)
	{
		this.setPosition(OverlayPosition.BOTTOM_LEFT);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (plugin.entStats.ents.isEmpty()) {
			return null;
		}

		panelComponent.getChildren().add(TitleComponent.builder().text("Ent Trimmer").build());
		long perfectCuts = plugin.entStats.getPerfectCutCount();
		panelComponent.getChildren().add(
			LineComponent.builder().left("Perfectly Cut: ").right(perfectCuts + "/5").build()
		);
		panelComponent.getChildren().add(
			LineComponent.builder().left("Ticks seen: ").right(Integer.toString(plugin.entStats.ticksAlive)).build()
		);
		if (plugin.entStats.ttg) {
			panelComponent.getChildren().add(
				LineComponent.builder().left("Almost time to go!").build()
			);
			panelComponent.getChildren().add(
				LineComponent.builder().left("Despawn in: ").right(Integer.toString(plugin.entStats.despawnTime)).build()
			);
		}
		return super.render(graphics);
	}
}

package com.ent;

import com.ent.discord.DiscordWebhook;
import com.ent.discord.DiscordWebhookBody;
import com.google.inject.Provides;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.Player;
import net.runelite.api.Renderable;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.InteractingChanged;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.client.callback.Hooks;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Ent Trimmer"
)
public class EntPlugin extends Plugin
{
	private static final int TRIM_ANIM = 10505;
	private static final int STUN_ANIM = 848;
	private static final int ENT_FINISH_ANIM = 10540;
	private static final String TIME_TO_GO_MSG = "Almost time to go!";
	private static final String PERFECT_MSG = "My cut is perfect, leave it alone!";
	private static final int TTG_DESPAWN_TIME = 45; // 45 ticks
	private static final Pattern pattern = Pattern.compile("Well done, you've given (\\d) entlings haircuts!");
//	private static final String LOGGED_OFF_ENT_MSG = "As you were not present when the entlings appeared you are not eligible for rewards.";

	public EntStats entStats = new EntStats();
	private double lastEntUniqueId;
	private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;

	@Inject

	private Client client;
	@Inject
	private EntConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private EntOverlay3D overlay3D;

	@Inject
	private EntOverlay2D overlay2D;

	@Inject
	private Hooks hooks;

	@Inject
	private DiscordWebhook discordWebhook;

	private boolean shouldDraw(Renderable renderable, boolean drawingUI) {
		if (!(renderable instanceof NPC))
		{
			return true;
		}
		NPC npc = (NPC) renderable;
		Ent ent = entStats.ents.get(npc);
		if (ent == null) {
			return true;
		}

		int highestPriority = 0;
		for (Ent e : entStats.ents.values()) {
			if (e.perfect)
				continue;
			if (e.trimType != null && e.trimType.priority > highestPriority) {
				highestPriority = e.trimType.priority;
			}
		}

		return !hideEnt(ent, highestPriority);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay3D);
		overlayManager.add(overlay2D);
		hooks.registerRenderableDrawListener(drawListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay3D);
		overlayManager.remove(overlay2D);
		hooks.unregisterRenderableDrawListener(drawListener);
		entStats.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged e)
	{
		GameState gameState = e.getGameState();
		if (gameState == GameState.LOGIN_SCREEN || gameState == GameState.CONNECTION_LOST || gameState == GameState.HOPPING)
		{
			entStats.clear();
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned e)
	{
		NPC npc = e.getNpc();
		if (npc.getId() == NpcID.ENTLING || npc.getId() == NpcID.PRUNED_ENTLING)
		{
			entStats.add(npc);
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned e)
	{
		if (entStats.ents.isEmpty())
		{
			return;
		}
		entStats.remove(e.getNpc());
	}

	@Subscribe
	public void onNpcChanged(NpcChanged e)
	{
		if (entStats.ents.isEmpty())
		{
			return;
		}

		if (e.getNpc().getId() == NpcID.PRUNED_ENTLING && entStats.ents.containsKey(e.getNpc()))
		{
			entStats.ents.get(e.getNpc()).perfect = true;
		}
	}

	@Subscribe
	public void onGameTick(GameTick e)
	{
		if (entStats.ticksAlive >= 0)
		{
			entStats.ticksAlive++;
		}
		if (entStats.despawnTime > 0)
		{
			entStats.despawnTime--;
		}
	}

	@Subscribe
	public void onOverheadTextChanged(OverheadTextChanged e)
	{
		if (entStats.ents.isEmpty() || !(e.getActor() instanceof NPC))
		{
			return;
		}

		NPC npc = (NPC) e.getActor();
		Ent ent = entStats.ents.get(npc);
		if (ent == null)
		{
			return;
		}

		String text = Text.removeTags(e.getOverheadText());
		if (text.equals(TIME_TO_GO_MSG))
		{
			entStats.ttg = true;
			entStats.despawnTime = TTG_DESPAWN_TIME;
		}
		else if (text.equals(PERFECT_MSG))
		{
			ent.perfect = true;
		}
		else if (ent.trimType == null)
		{
			for (TrimType trimType : TrimType.values)
			{
				if (text.equals(trimType.overheadText))
				{
					ent.trimType = trimType;
				}
			}
		}
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged e)
	{
		if (entStats.ents.isEmpty())
		{
			return;
		}
		if (e.getSource() instanceof Player && e.getTarget() instanceof NPC)
		{
			NPC target = (NPC) e.getTarget();
			if (target.getId() != NpcID.ENTLING)
			{
				return;
			}

			Ent ent = entStats.ents.get(target);
			if (ent == null)
			{
				return;
			}

			entStats.playerEntMap.put((Player) e.getSource(), ent);
		}
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged e)
	{
		if (entStats.ents.isEmpty())
		{
			return;
		}

		Actor a = e.getActor();

		if (a instanceof NPC) {
			onNpcAnim(a);
		} else if (a instanceof Player) {
			onPlayerAnim(a);
		}
	}

	private void onPlayerAnim(Actor a)
	{
		if (a.getInteracting() != null && a.getInteracting() instanceof Player)
		{
			return;
		}

		Ent ent;
		if (a.getInteracting() == null)
		{
			ent = entStats.playerEntMap.get((Player) a);
		}
		else
		{
			NPC npc = (NPC) a.getInteracting();
			ent = entStats.ents.get(npc);
		}

		if (ent == null)
		{
			return;
		}

		if (a.getAnimation() == TRIM_ANIM)
		{
			ent.trims++;
			if (a == client.getLocalPlayer()) {
				entStats.eligible = true;
			}
		}
		else if (a.getAnimation() == STUN_ANIM && a == client.getLocalPlayer())
		{
			entStats.eligible = true;
		}
	}

	private void onNpcAnim(Actor a)
	{
		NPC npc = (NPC) a;
		if (npc.getId() != NpcID.PRUNED_ENTLING && npc.getId() != NpcID.ENTLING)
		{
			return;
		}

		if (npc.getAnimation() != ENT_FINISH_ANIM) {
			return;
		}

		Ent ent = entStats.ents.get(npc);
		if (ent == null) {
			return;
		}

		if (!entStats.eligible) {
			/*
			preference for waiting for the game chat message.
			Only use anim + perfect npc id count if there won't be a game chat message.
			With a very late final cut close to despawn time it's possible to get the anim before the game chat msg
			which detects 4/5 but is actually 5/5.
			*/
			discordEntStats(entStats.getPerfectCutCount());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage e) {
		if (!e.getType().equals(ChatMessageType.GAMEMESSAGE) || entStats.ents.isEmpty()) {
			return;
		}

		String msg = Text.removeTags(e.getMessage());

		Matcher matcher = pattern.matcher(msg);
		if (matcher.find()) {
			try {
				int count = Integer.parseInt(matcher.group(1));
				discordEntStats(count);
			} catch (NumberFormatException exception) {
				exception.printStackTrace();
			}
		}
	}

	private void discordEntStats(int count)
	{
		if (config.discordWebhookUrl().isEmpty() || lastEntUniqueId == entStats.uniqueId)
		{
			return;
		}
		StringBuffer sb = new StringBuffer();

		// UTC time
		// Get current UTC time
		LocalTime utcTime = LocalTime.now(ZoneOffset.UTC).minusSeconds(entStats.ticksAlive * 6 / 10).truncatedTo(ChronoUnit.SECONDS); // Truncate to seconds to remove fractional seconds
		// Define the desired format
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
		// Format the time as "HH:mm:ss"
		String formattedTime = utcTime.format(formatter);
		// Output the formatted UTC time
		sb.append(formattedTime + "\n");

		// total cut
		sb.append(count + "/" + entStats.ents.size() + "\n");

		// times
		sb.append("Ticks seen: " + entStats.ticksAlive + "\n");
		sb.append(entStats.ttg ? ("TTG reached - Ticks until despawn: " + entStats.despawnTime + "\n") : "TTG/despawn time unknown\n");

		// average ent position
		int x = 0;
		int y = 0;
		for (Ent e : entStats.ents.values()) {
			x += e.npc.getWorldLocation().getX();
			y += e.npc.getWorldLocation().getY();
		}
		x /= entStats.ents.size();
		y /= entStats.ents.size();
		String locUrl = "https://explv.github.io/?centreX="+x+"&centreY="+y+"&centreZ=0&zoom=11";
		sb.append(locUrl).append("\n");

		// Cut types and counts
		for (Ent e : entStats.ents.values()) {
			sb.append(e.trimType == null ? "n/a" : e.trimType.shortText).append(" ")
				.append(e.trims).append(" ")
				.append(e.perfect ? "Yes" : "No").append("\n");
		}

		lastEntUniqueId = entStats.uniqueId;
		DiscordWebhookBody discordWebhookBody = new DiscordWebhookBody();
		discordWebhookBody.setContent(sb.toString());
		discordWebhook.sendWebhook(discordWebhookBody, config.includeScreenshot());
	}

	@Provides
	EntConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EntConfig.class);
	}

	public boolean hideEnt(Ent ent, int highestPriority)
	{
		if (entStats.eligible) {
			// don't hide any ents until player has cut or stalled on at least one
			if (ent.perfect && config.hidePerfect()) {
				return true;
			}
			if (config.hideNonPriority() && (ent.perfect || ent.trimType != null && ent.trimType.priority != highestPriority)) {
				return true;
			}
		}
		return false;
	}
}

package com.ent;

import java.util.HashMap;
import java.util.Map;
import net.runelite.api.NPC;
import net.runelite.api.Player;

public class EntStats
{
	public boolean eligible = false;
	Map<NPC, Ent> ents;
	boolean ttg = false;
	int ticksAlive = -1;
	int despawnTime = -1;
	Map<Player, Ent> playerEntMap;
	double uniqueId;

	public EntStats()
	{
		this.playerEntMap = new HashMap<>();
		this.ents = new HashMap<>();
	}

	public void clear()
	{
		ents.clear();
		ttg = false;
		ticksAlive = -1;
		despawnTime = -1;
		playerEntMap.clear();
		eligible = false;
	}

	public int getPerfectCutCount() {
		return (int) ents.values().stream().filter(ent -> ent.perfect).count();
	}

	public void add(NPC npc)
	{
		if (ents.isEmpty())
		{
			ticksAlive = 0;
			uniqueId = Math.random() * Integer.MAX_VALUE;
		}
		ents.put(npc, new Ent(npc));
	}

	public void remove(NPC npc)
	{
		ents.remove(npc);
		if (ents.isEmpty())
		{
			clear();
		}
	}
}

package com.ent;

import net.runelite.api.NPC;
import net.runelite.api.NpcID;

public class Ent
{
	public int trims;
	public TrimType trimType;
	public boolean perfect;
	public NPC npc;

	public Ent(NPC npc)
	{
		this.trims = 0;
		this.trimType = null;
		this.npc = npc;
		this.perfect = npc.getId() == NpcID.PRUNED_ENTLING;
	}
}

package com.ent;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("ent-trimmer")
public interface EntConfig extends Config
{
	@ConfigItem(
		keyName = "highlightPriority",
		name = "Highlight Priority Ents",
		description = "Established priority order is Top/Mullet/Back and Sides/Back. Top cuts first, then back cuts.",
		position = 0
	)
	default boolean highlightPriority()
	{
		return true;
	}

	@ConfigItem(
		keyName = "priorityColor",
		name = "Priority Highlight Color",
		description = "The color to highlight the priority ents",
		position = 1
	)
	default Color priorityColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
		keyName = "hideNonPriority",
		name = "Hide Non-Priority Ents",
		description = "Hide the NPCs so non-priority ents can't be clicked until priority ents are perfect. No ents are hidden until you cut at least one.",
		position = 2
	)
	default boolean hideNonPriority()
	{
		return true;
	}

	@ConfigItem(
		keyName = "hidePerfect",
		name = "Hide Perfect Ents",
		description = "Hide the NPCs so non-priority ents can't be clicked until priority ents are perfect. No ents are hidden until you cut at least one.",
		position = 3
	)
	default boolean hidePerfect()
	{
		return true;
	}

	@ConfigItem(
		keyName = "displayCutOption",
		name = "Display Trim options",
		description = "Display the correct trim options above ents",
		position = 4
	)
	default boolean displayTrimOptions()
	{
		return true;
	}

	@ConfigItem(
		keyName = "displayTrimCount",
		name = "Display Trim Count",
		description = "Display the number of total trims above ents",
		position = 5
	)
	default boolean displayTrimCount()
	{
		return true;
	}

	@ConfigItem(
		keyName = "displayTextOnHiddenEnts",
		name = "Display Text on Hidden Ents",
		description = "Whether to keep the text display above hidden ents",
		position = 7
	)
	default boolean displayTextOnHiddenEnts()
	{
		return false;
	}

	@ConfigSection(
		name = "Advanced",
		description = "Advanced settings that can be safely ignored",
		position = 8,
		closedByDefault = true
	)
	String advanced = "Advanced";

	@ConfigItem(
		keyName = "discordWebhook",
		name = "Discord webhook url",
		description = "Webhook to post ent statistics too",
		section = advanced,
		position = 9
	)
	default String discordWebhookUrl()
	{
		return "";
	}

	@ConfigItem(
		keyName = "includeScreenshot",
		name = "Include Screenshot",
		description = "Whether to post an ingame screenshot for webhook posts",
		section = advanced,
		position = 10
	)
	default boolean includeScreenshot()
	{
		return false;
	}
}

package com.ent;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class EntOverlay3D extends Overlay
{
	private final Client client;
	private final EntPlugin plugin;
	private final EntConfig config;

	@Inject
	private EntOverlay3D(Client client, EntPlugin plugin, EntConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		int highestPriority = 0;
		for (Ent ent : plugin.entStats.ents.values()) {
			if (!ent.perfect && ent.trimType != null && ent.trimType.priority > highestPriority) {
				highestPriority = ent.trimType.priority;
			}
		}

		for (Ent ent : plugin.entStats.ents.values()) {
			boolean hidden = plugin.hideEnt(ent, highestPriority);

			String text = "";
			if (config.displayTrimOptions()) {
				text = ent.trimType == null ? "n/a" : ent.trimType.shortText;
			}
			if (config.displayTrimCount()) {
				if (!text.isEmpty()) {
					text += ": ";
				}
				text += ent.trims;
			}

			if (!text.isEmpty() && (config.displayTextOnHiddenEnts() || !hidden)) {
				Color color;
				if (ent.perfect) {
					color = Color.RED;
				} else if (config.highlightPriority() && ent.trimType != null && ent.trimType.priority == highestPriority) {
					color = config.priorityColor();
				} else {
					color = Color.GREEN;
				}
				OverlayUtil.renderTextLocation(graphics, ent.npc.getCanvasTextLocation(graphics, text, 0), text, color);
			}

			if (!hidden) {
				if (ent.perfect) {
					OverlayUtil.renderActorOverlay(graphics, ent.npc, "", Color.RED);
				} else if (config.highlightPriority() && ent.trimType != null && ent.trimType.priority == highestPriority) {
					Shape shape = ent.npc.getConvexHull();
					OverlayUtil.renderPolygon(graphics, shape, config.priorityColor());
					OverlayUtil.renderActorOverlay(graphics, ent.npc, "", config.priorityColor());
				} else {
					OverlayUtil.renderActorOverlay(graphics, ent.npc, "", Color.GREEN);
				}
			}
		}
		return null;
	}
}

