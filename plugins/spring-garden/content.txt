package com.majesty373.springgarden;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SpringGardenPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SpringGardenPlugin.class);
		RuneLite.main(args);
	}
}
package com.majesty373.springgarden;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("springgarden")
public interface SpringGardenConfig extends Config {
    @ConfigItem(
            keyName = "garden",
            name = "Garden Type",
            description = "The garden that will be used",
            position = 1
    )
    default SpringGarden garden() { return SpringGarden.SPRING; }

    @ConfigItem(
            keyName = "tilesGood",
            name = "Good Tile Color",
            description = "Color to highlight tiles when it is time to click them.",
            position = 2
    )
    default Color tilesGood() {
        return Color.GREEN;
    }

    @ConfigItem(
            keyName = "tilesBad",
            name = "Bad Tile Color",
            description = "Color to highlight tiles when it is NOT time to click them.",
            position = 3
    )
    default Color tilesBad() {
        return Color.RED;
    }

    @ConfigItem(
            keyName = "staminaWarning",
            name = "Low Stamina Threshold",
            description = "What stamina level to warn to use stamina potion (0 to disable).",
            position = 4
    )
    default int staminaThreshold() { return 25; }
}

package com.majesty373.springgarden;

import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;
import java.util.Objects;

public class SpringGardenOverlayPanel extends OverlayPanel {
    static final int TIMEOUT = 120;
    static final int DRINK_EXP = 1350;

    private final Client client;
    private final SpringGardenPlugin plugin;

    @Inject
    SpringGardenOverlayPanel(Client client, SpringGardenPlugin plugin) {
        super(plugin);
        this.client = client;
        this.plugin = plugin;
        setPosition(OverlayPosition.TOP_LEFT);
    }

    @Override
    public Dimension render (Graphics2D graphics) {
        SpringGardenSession session = plugin.getSession();
        if (session == null) {
            return null;
        }
        if (isDoingMaze() || Duration.between(session.getLastFruitGathered(), Instant.now()).getSeconds() < TIMEOUT) {
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Running")
                    .color(Color.GREEN)
                    .build());
        } else {
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("NOT running")
                    .color(Color.RED)
                    .build());
        }
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Run Time:")
                .right(getFormattedTimeFromStart())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Runs/Fails:")
                .right(session.getTotalRuns() + "/" + session.getFailedRuns())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Success Rate:")
                .right(getSuccessRate() + "%")
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("-----------")
                .right("----------")
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Fruit:")
                .right(Integer.toString(session.getFruitGathered()))
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Drinks:")
                .right(Integer.toString(session.getDrinksMade()))
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("-----------")
                .right("----------")
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Fruit/hr:")
                .right("" + getFruitPerHour())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Drinks/hr:")
                .right("" + getDrinkPerHour())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("XP/hr:")
                .right("" + getExperiencePerHour())
                .build());
        return super.render(graphics);
    }

    private boolean isDoingMaze () {
        return Objects.requireNonNull(client.getLocalPlayer()).getWorldLocation().distanceTo2D(new WorldPoint(2928, 5468, 0)) < 20;
    }

    public String getFormattedTimeFromStart() {
        Duration time = Duration.ofMillis(getTimeFromStart());
        long minutes = time.toMinutes() % 60;
        long seconds = time.getSeconds() % 60;
        long hours = time.toHours();
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    public int getExperiencePerHour() {
        int expGain = plugin.getSession().getDrinksMade() * DRINK_EXP;
        return (int) (3600000d / (long) getTimeFromStart() * (double) (expGain));
    }

    public int getFruitPerHour() {
        int fruit = plugin.getSession().getFruitGathered();
        return (int) (3600000d / (long) getTimeFromStart() * (double) (fruit));
    }

    public int getDrinkPerHour() {
        int drink = plugin.getSession().getDrinksMade();
        return (int) (3600000d / (long) getTimeFromStart() * (double) (drink));
    }

    public int getSuccessRate() {
        SpringGardenSession session = plugin.getSession();
        return (int)(((double)(session.getTotalRuns() - session.getFailedRuns()) / session.getTotalRuns()) * 100);
    }

    public int getTimeFromStart() {
        return (int)(System.currentTimeMillis() - SpringGardenPlugin.START_TIME);
    }
}
package com.majesty373.springgarden;

import lombok.AccessLevel;
import lombok.Getter;

import java.time.Instant;

public class SpringGardenSession {
    @Getter(AccessLevel.PACKAGE)
    private int fruitGathered;

    @Getter(AccessLevel.PACKAGE)
    private int drinksMade;

    @Getter(AccessLevel.PACKAGE)
    private int failedRuns;

    @Getter(AccessLevel.PACKAGE)
    private int totalRuns;

    @Getter(AccessLevel.PACKAGE)
    private Instant lastFruitGathered;

    @Getter(AccessLevel.PACKAGE)
    private Instant lastDrinkMade;

    @Getter(AccessLevel.PACKAGE)
    private Instant lastFailedRun;

    void increaseFruitGathered() {
        fruitGathered++;
        totalRuns++;
        lastFruitGathered = Instant.now();
    }

    void increaseDrinksMade() {
        drinksMade++;
        lastDrinkMade = Instant.now();
    }

    void increaseFailedRuns() {
        failedRuns++;
        totalRuns++;
        lastFailedRun = Instant.now();
    }
}

package com.majesty373.springgarden;

import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.Varbits;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
@PluginDescriptor(
		name = "Spring Garden",
		description = "Helps with the Sorceress's Spring Garden",
		tags = {"Sorceress", "spring", "garden", "thieving", "skilling"}
)
public class SpringGardenPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Notifier notifier;

	@Inject
	private ElementalCollisionDetector collisionDetector;

	@Inject
	private SpringGardenOverlay overlay;

	@Inject
	private SpringGardenOverlayPanel overlayPanel;

	@Inject
	private SpringGardenConfig config;

	@Getter(AccessLevel.PACKAGE)
	private SpringGardenSession session;

	@Getter(AccessLevel.PACKAGE)
	static long START_TIME;

	private static final WorldPoint GARDEN = new WorldPoint(2928, 5468, 0);
	private static final int MAX_DISTANCE = 20;
	private static final String STAMINA_MESSAGE = "[Spring Garden] Low Stamina Warning";
	private boolean sentStaminaNotification = false;


	@Override
	protected void startUp() throws Exception {
		enableOverlay();
	}

	@Override
	protected void shutDown() throws Exception {
		disableOverlay();
	}

	private boolean overlayEnabled = false;
	private void enableOverlay() {
		if (overlayEnabled)
			return;
		overlayEnabled = true;
		overlayManager.add(overlayPanel);
		overlayManager.add(overlay);
		START_TIME = System.currentTimeMillis();
	}

	private void disableOverlay() {
		if (overlayEnabled) {
			overlayManager.remove(overlayPanel);
			overlayManager.remove(overlay);
		}
		overlayEnabled = false;
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (event.getMessage().startsWith("An elemental force emanating from the garden teleports you away")) {
			if (session == null) {
				session = new SpringGardenSession();
			}
			session.increaseFruitGathered();
		}
		else if (event.getMessage().startsWith("You squeeze 4 sq'irks into an empty glass")) {
			if (session == null) {
				session = new SpringGardenSession();
			}
			session.increaseDrinksMade();
		}
		else if (event.getMessage().startsWith("You've been spotted by an elemental and teleported out of its garden")) {
			if (session == null) {
				session = new SpringGardenSession();
			}
			session.increaseFailedRuns();
		}
	}

	@Subscribe
	public void onGameTick(GameTick e) {
		Player p = client.getLocalPlayer();
		if (p == null)
			return;
		if (p.getWorldLocation().distanceTo2D(GARDEN) >= MAX_DISTANCE) {
			disableOverlay();
			return;
		} else if (session == null) {
			session = new SpringGardenSession();
		}
		enableOverlay();
		// check for stamina usage
		int stamThreshold = config.staminaThreshold();
		if (stamThreshold != 0) {
			boolean stamActive = client.getVar(Varbits.RUN_SLOWED_DEPLETION_ACTIVE) != 0;
			if (client.getEnergy() <= stamThreshold && !stamActive && !sentStaminaNotification) {
				notifier.notify(STAMINA_MESSAGE, TrayIcon.MessageType.WARNING);
				sentStaminaNotification = true;
			} else if (client.getEnergy() > stamThreshold) {
				sentStaminaNotification = false;
			}
		}
	}

	@Provides
	SpringGardenConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(SpringGardenConfig.class);
	}
}

package com.majesty373.springgarden;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Singleton
public class SpringGardenOverlay extends Overlay {

	private final Client client;
	private final SpringGardenConfig config;
	private final ElementalCollisionDetector collisionDetector;
	private static final WorldPoint LAUNCH_POINT = new WorldPoint(2921, 5473, 0);

	@Inject
	public SpringGardenOverlay(Client client, SpringGardenConfig config, ElementalCollisionDetector collisionDetector) {
		this.client = client;
		this.config = config;
		this.collisionDetector = collisionDetector;
		setPosition(OverlayPosition.DYNAMIC);
	}

	/**
	 * This method sorts the inputed NPC array and returns it sorted from lowest ID to largest ID
	 * @param npcs The array of NPCs to be sorted
	 * @return NPC array that has been sorted
	 */
	public static NPC[] bubbleSort(NPC[] npcs) {
		int lastPos, index;
		NPC temp;
		for (lastPos = npcs.length - 1; lastPos >= 0; lastPos--) {
			for (index = 0; index < lastPos; index++) {
				if (npcs[index].getId() > npcs[index + 1].getId()) {
					temp = npcs[index];
					npcs[index] = npcs[index + 1];
					npcs[index + 1] = temp;
				}
			}
		}
		return npcs;
	}

	/**
	 * This method renders and colors the run tiles and the start tile
	 * @param graphics Graphics2D from java.awt
	 * @return Null
	 */
	@Override
	public Dimension render(Graphics2D graphics) {
		renderTile(graphics, LAUNCH_POINT, Color.CYAN);
		NPC[] npc = bubbleSort(client.getNpcs().stream().filter(ElementalCollisionDetector::isSpringElemental).sequential().toArray(NPC[]::new));
		for (int i = 0; i < ElementalCollisionDetector.RUNTILES.length; i++)
			renderTile(graphics, ElementalCollisionDetector.RUNTILES[i], (collisionDetector.correctPosition(npc, i) ? config.tilesGood() : config.tilesBad()));
		return null;
	}

	/**
	 * This method takes the WorldPoint of a tile and renders a rectangle on it of the given color
	 * @param graphics Graphics2D from java.awt
	 * @param wp WorldPoint of where the tile is
	 * @param color Color to render the tile
	 */
	private void renderTile(Graphics2D graphics, WorldPoint wp, Color color) {
		LocalPoint lp = LocalPoint.fromWorld(client, wp);
		if (lp != null) {
			Polygon poly = Perspective.getCanvasTilePoly(client, lp);
			if (poly != null)
				OverlayUtil.renderPolygon(graphics, poly, color);
		}
	}
}
package com.majesty373.springgarden;

import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

import javax.inject.Singleton;

@Singleton
public class ElementalCollisionDetector {

    public static final WorldPoint[] RUNTILES = {
            new WorldPoint(2923, 5465, 0), // 0 NPC 0
            new WorldPoint(2923, 5459, 0), // 1 NPC 0
            new WorldPoint(2926, 5468, 0), // 2 NPC 1, 2, 6
            new WorldPoint(2928, 5470, 0), // 3 NPC 6
            new WorldPoint(2930, 5470, 0), // 4 NPC 5, 7
            new WorldPoint(2932, 5466, 0), // 5 NPC 5, 7
    };

    /**
     * This method returns true if the NPC's ID is within the bounds of Spring Elementals
     * @param npc The NPC to be tested
     * @return Boolean on if the NPC is a Spring Elemental or not
     */
    public static boolean isSpringElemental(NPC npc) {
        return npc.getId() >= 2956 && npc.getId() <= 2963;
    }

    /**
     * This method takes a sorted NPC array and the index of the tile t obe tested and returns true if the
     * NPC related to that tile is in the correct position.
     * @param npcs The sorted incrementing array of Elemental NPCs
     * @param runTileIndex The index of the tile that is being tested
     * @return Boolean of if the NPC related to the specific tile index is in the correct position
     */
    public boolean correctPosition(NPC[] npcs, int runTileIndex) {
        try {
            switch (runTileIndex) {
                case 0:
                    if (npcs[0].getOrientation() == 0 && npcs[0].getWorldLocation().getY() > 5460) return true;
                    break;
                case 1:
                    if (npcs[0].getOrientation() == 1024 && npcs[0].getWorldLocation().getY() > 5465) return true;
                    break;
                case 2:
                    if ((npcs[1].getWorldLocation().getX() > 2925 || npcs[1].getWorldLocation().getY() > 5461) &&
                       ((npcs[2].getWorldLocation().getX() > 2925 && npcs[2].getWorldLocation().getY() > 2925) || npcs[2].getWorldLocation().getX() > 2926) &&
                        (npcs[6].getOrientation() == 1024 && (npcs[6].getWorldLocation().getY() < 5472 && npcs[6].getWorldLocation().getY() > 5463)))
                        return true;
                    break;
                case 3:
                    if ((npcs[6].getWorldLocation().getY() < 5467 || npcs[6].getWorldLocation().getY() > 5472) || (npcs[6].getOrientation() == 0 && npcs[6].getWorldLocation().getY() > 5473))
                        return true;
                    break;
                case 4:
                    if ((npcs[5].getOrientation() == 1536 && npcs[5].getWorldLocation().getX() > 2930) &&
                       ((npcs[7].getOrientation() == 0 && npcs[7].getWorldLocation().getY() > 5472) ||
                         npcs[7].getOrientation() == 1024)) return true;
                    break;
                case 5:
                    if (((npcs[5].getOrientation() == 1536 && (npcs[5].getWorldLocation().getX() < 2930 || npcs[5].getWorldLocation().getX() > 2932)) ||
                          npcs[5].getOrientation() == 512 && npcs[5].getWorldLocation().getX() < 2930) &&
                        ((npcs[7].getOrientation() == 0 && npcs[7].getWorldLocation().getY() > 5472) || npcs[7].getOrientation() == 1024)) return true;
                    break;
            }
        } catch (Exception e) { return false; }
        return false;
    }
}

package com.majesty373.springgarden;

public enum SpringGarden {
//    WINTER,
    SPRING
//    SUMMER,
//    AUTUMN
}

