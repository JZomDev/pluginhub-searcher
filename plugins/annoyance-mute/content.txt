/*
 * Copyright (c) 2020, Brooklyn <https://github.com/Broooklyn>
 * Copyright (c) 2018, SomeoneWithAnInternetConnection
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brooklyn.annoyancemute;

public final class SoundEffectID
{
	// Pet sounds
	protected final static int CAT_HISS = 333;
	protected final static int SNAKELING_METAMORPHOSIS = 794;
	protected final static int CLOCKWORK_CAT_CLICK_CLICK = 941;
	protected final static int PET_KREEARRA_WING_FLAP = 3882;
	protected final static int ELECTRIC_HYDRA_IN = 4118;
	protected final static int ELECTRIC_HYDRA_OUT = 4132;
	protected final static int IKKLE_HYDRA_RIGHT_FOOT_LETS_STOMP = 4112;
	protected final static int IKKLE_HYDRA_LEFT_FOOT_LETS_STOMP = 4134;
	protected final static int VETION_JR_RIGHT_FOOT_LETS_STOMP = 6986;
	protected final static int VETION_JR_LEFT_FOOT_LETS_STOMP = 6985;
	protected final static int NOON_FLAP_1 = 9929;
	protected final static int NOON_FLAP_2 = 10002;

	// Pet Thump
	protected final static int PET_WALKING_THUMP = 3834;

	// Town Crier
	protected final static int TOWN_CRIER_BELL_DING = 3813;
	protected final static int TOWN_CRIER_BELL_DONG = 3817;
	protected final static int TOWN_CRIER_SHOUT_SQUEAK = 3816;

	// AOE Spells
	protected final static int HUMIDIFY_SOUND = 3614;

	// Chicken
	protected final static int WHACK = 2257;

	// Snowball
	protected final static int SNOWBALL_HIT = 3292;
	protected final static int SNOWBALL_THROW = 2708;

	// Cannon
	protected final static int CANNON_SPIN = 2877;
	protected final static int SHATTERED_CANNON_SPIN = 2174;

	// ACB
	protected final static int ACB_REEEE = 3892;

	// Thralls
	protected final static int WATER_STRIKE_CAST = 211; // Ghostly Thrall
	protected final static int WATER_STRIKE_LAND = 212;
	protected final static int SKELETON_THRALL_ATTACK = 2700;
	protected final static int ZOMBIE_THRALL_ATTACK = 918;

	// Ice Spells
	protected final static int ICE_BARRAGE_CAST = 168;
	protected final static int ICE_BLITZ_CAST = 169;
	protected final static int ICE_BURST_CAST = 170;
	protected final static int ICE_SPELL_LAND = 171;
	protected final static int ICE_RUSH_CAST = 173;

	// Sire
	protected final static int SIRE_SPAWNS = 236;
	protected final static int SIRE_SPAWNS_DEATH = 237;

	// Wilderness Obelisk
	protected final static int WILDY_OBELISK = 204;

	// Random Events
	protected final static int NPC_TELEPORT_WOOSH = 1930;
	protected final static int DRUNKEN_DWARF = 2297;
	protected final static int EVIL_BOB = 333;

	// Tekton
	protected final static int METEOR = 156;

	// Dense Essence Mine
	protected final static int CHISEL = 1553;

	// Chop Chop
	protected final static int CHOP_CHOP = 2531;

	// Smashing!
	protected final static int SMASHING = 2655;

	// Plank Make
	protected final static int PLANK_MAKE = 3617;

	// Nightmare
	protected final static int NIGHTMARE_SOUND = 4281;

	// Pyramid Plunder Scarabs
	protected final static int SCARAB_SPAWN_SOUND = 1478;
	protected final static int SCARAB_ATTACK_SOUND = 1481;

	// Firemaking
	protected final static int FIREMAKING_LOG_BURN = 2596;
	protected final static int FIREMAKING_LOG_LIGHT = 2597;

	// Fletching
	protected final static int FLETCHING_CUT = 2605;
	protected final static int AMETHYST_FLETCHING = 2586;

	// Fishing
	protected final static int FISHING_SOUND = 2600;

	// Alchemy
	protected final static int LOW_ALCHEMY = 98;
	protected final static int HIGH_ALCHEMY = 97;
	// Trail Blazer's Alchemy
	protected final static int TRAIL_BLAZERS_LOW_ALCHEMY = 7568;
	protected final static int TRAIL_BLAZERS_HIGH_ALCHEMY = 7557;

	// Prayers
	protected final static int THICK_SKIN = 2690;
	protected final static int BURST_OF_STRENGTH = 2688;
	protected final static int CLARITY_OF_THOUGHT = 2664;
	protected final static int ROCK_SKIN = 2684;
	protected final static int SUPERHUMAN_STRENGTH = 2689;
	protected final static int IMPROVED_REFLEXES = 2662;
	protected final static int RAPID_HEAL = 2678;
	protected final static int PROTECT_ITEM = 1982;
	protected final static int HAWK_EYE = 2666;
	protected final static int MYSTIC_LORE = 2668;
	protected final static int STEEL_SKIN = 2687;
	protected final static int ULTIMATE_STRENGTH = 2691;
	protected final static int INCREDIBLE_REFLEXES = 2667;
	protected final static int PROTECT_FROM_MAGIC = 2675;
	protected final static int PROTECT_FROM_RANGE = 2677;
	protected final static int PROTECT_FROM_MELEE = 2676;
	protected final static int EAGLE_EYE = 2665;
	protected final static int MYSTIC_MIGHT = 2669;
	protected final static int RETRIBUTION = 2682;
	protected final static int REDEMPTION = 2680;
	protected final static int SMITE = 2686;
	protected final static int PRESERVE = 2679;
	protected final static int CHIVALRY = 3826;
	protected final static int PIETY = 3825;
	protected final static int RIGOUR = 2685;
	protected final static int AUGURY = 2670;
	protected final static int DEADEYE = 10194 ;
	protected final static int MYSTIC_VIGOUR = 10100;
	protected final static int DEACTIVATE_PRAYER = 2663;

	// Woodcutting
	protected final static int WOODCUTTING_CHOP = 2735;

	// Teleport
	protected static final int TELEPORT_VWOOP = 200;

	// Teleother
	protected static final int TELEOTHER = 199;

	// Pickpocket
	protected static final int PICKPOCKET_PLOP = 2581;
	protected static final int PICKPOCKET_STUN = 2727;

	// NPC Contact
	protected final static int NPC_CONTACT = 3618;

	// Cow
	protected final static int MOO_MOO = 3044;

	// String Jewelery
	protected final static int STRING_JEWELLERY = 2903;

	// Cave Horror
	protected final static int CAVE_HORROR = 497;

	// Fossil Island Wyvern
	protected final static int FOSSIL_ISLAND_WYVERN_69 = 769;
	protected final static int FOSSIL_ISLAND_WYVERN_71 = 771;
	protected final static int FOSSIL_ISLAND_WYVERN_73 = 773;

	// Fishing Explosive
	protected final static int FISHING_EXPLOSIVE = 1487;

	// Heal Other
	protected final static int HEAL_OTHER_2 = 2892;
	protected final static int HEAL_OTHER_3 = 2893;
	protected final static int HEAL_OTHER_4 = 2894;
	protected final static int HEAL_OTHER_5 = 2895;

	// Item Dropping
	protected final static int ITEM_DROP = 2739;

	// Level Up Fireworks
	protected final static int LEVEL_UP_1 = 2396;
	protected final static int LEVEL_UP_2 = 2384;

	// Jellies
	protected final static int JELLY_ATTACK = 547;
	protected final static int JELLY_DEATH = 549;
	protected final static int JELLY_PARRY = 550;

	// Nail Beasts
	protected final static int NAIL_BEAST_ATTACK = 3482;
	protected final static int NAIL_BEAST_DEATH = 3484;
	protected final static int NAIL_BEAST_PARRY = 3485;

	// Demons
	protected final static int GREATER_DEMON_ATTACK = 397;
	protected final static int GREATER_DEMON_DEATH = 398;
	protected final static int GREATER_DEMON_PARRY = 399;
	protected final static int DEMON_ATTACK = 400; // Lesser and Black Demons
	protected final static int DEMON_DEATH = 403;
	protected final static int DEMON_PARRY = 404;

	// Nechryael
	protected static final int NECHRYAEL_ATTACK = 645;
	protected static final int NECHRYAE_DEATH = 646;
	protected static final int NECHRYAEL_PARRY = 647;

	// Dust Devils
	protected static final int DUST_DEVIL_ATTACK = 414;
	protected static final int DUST_DEVIL_DEATH = 415;
	protected static final int DUST_DEVIL_PARRY = 416;

	// Spectres
	protected static final int SPECTRE_ATTACK_SHOOT = 272;
	protected static final int SPECTRE_ATTACK_HIT = 273;
	protected static final int SPECTRE_DEATH = 274;
	protected static final int SPECTRE_PARRY = 275;

	// Mining
	protected static final int MINING_PICK_SWING_1 = 3220;
	protected static final int MINING_PICK_SWING_2 = 3221;

	//Charge Orb spells
	protected static final int CHARGE_EARTH_ORB = 115;
	protected static final int CHARGE_AIR_ORB = 116;
	protected static final int CHARGE_FIRE_ORB = 117;
	protected static final int CHARGE_WATER_ORB = 118;

	// Magic Tree (Ambient Sound)
	protected final static int MAGIC_TREE = 3134;

	// House Portal
	protected final static int HOUSE_PORTAL = 3139;

	// Ambient Static sounds

	protected final static int STATIC_1 = 2185;
	protected final static int STATIC_2 = 2083;
	protected final static int STATIC_3 = 2066;
	protected final static int STATIC_4 = 2169;
	protected final static int STATIC_5 = 2088; // this is some noise in rimmington

	// Ambient Crickets/Birds
	protected final static int CRICKET_1 = 1990;
	protected final static int CRICKET_2 = 1991;
	protected final static int CRICKET_3 = 1992;
	protected final static int CRICKET_4 = 1993;
	protected final static int CRICKET_5 = 1994;
	protected final static int CRICKET_6 = 1995;
	// Water
	protected final static int WATER_1 = 2158;
	protected final static int WATER_2 = 3094;
	protected final static int WATER_3 = 2223; // water 3 is a bubble noise but also white noise
	protected final static int WATER_4 = 2168; // water 4 is waves crashing into shore but also white noise
	protected final static int WATER_5 = 3083;
	protected final static int WATER_6 = 2149; // varrock armor shop fountain
	protected final static int WATER_7 = 2151; // varrock center fountains
	protected final static int WATER_8 = 2150; // lumbridge fountains
	protected final static int WATER_9 = 2147; // barbarian village bridge
	protected final static int WATER_10 = 2170; // barbarian village bridge
	protected final static int WATER_11 = 3087;
	protected final static int WATER_12 = 2041; // lumbridge swamp bubbles


	// Ranges
	protected final static int RANGE_1 = 2199;
	protected final static int RANGE_2 = 2065;
	protected final static int COOKING_POT = 2200;

	// Ambient Static Air 2184 base + modifiers

	protected final static int COMMON_BACKGROUND_1 = 2184;
	protected final static int[] COMMON_BACKGROUND_2184_STATIC_1 = new int[]{2184, 2185, 2073, 2074, 2075};

	protected final static int[] COMMON_BACKGROUND_2184_BIRD_1 = new int[]{1984, 1985, 1986, 1987, 1988};

	protected final static int[] COMMON_BACKGROUND_2184_BIRD_2 = new int[]{2019, 2020, 2013, 2014, 2057, 2076, 2012};
	protected final static int[] COMMON_BACKGROUND_2184_BIRD_3 = new int[]{2010, 2012, 2011, 2073}; // draynor village owls
	protected final static int[] COMMON_BACKGROUND_2184_BIRD_4 = new int[]{2070, 2071, 2073, 2074, 2075, 2072, 2184}; // draynor village owls

	protected final static int[] COMMON_BACKGROUND_2184_WATER_1 = new int[]{3083, 3084, 3085, 3086};
	protected final static int[] COMMON_BACKGROUND_2184_WATER_2 = new int[]{2153, 2154, 2148, 2167};

	// Fortis Colosseum lobby
	protected final static int FORTIS_COLOSSEUM_AMBIENT_1 = 8510;
	protected final static int FORTIS_COLOSSEUM_AMBIENT_2 = 8513;
	protected final static int FORTIS_COLOSSEUM_FIRE = 2065;

	protected final static int COMMON_BACKGROUND_2 = -1;
	protected final static int[] VARDORVIS_AREA = new int[]{3711, 3714, 3712, 3713};
}

/*
 * Copyright (c) 2020, Brooklyn <https://github.com/Broooklyn>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brooklyn.annoyancemute;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("annoyancemute")
public interface AnnoyanceMuteConfig extends Config
{
	@ConfigSection(
		name = "Combat",
		description = "Combat sounds to mute",
		position = 0
	)
	String combatSection = "Combat";

	@ConfigSection(
		name = "NPCs",
		description = "NPC sounds to mute",
		position = 1
	)
	String npcSection = "NPCs";

	@ConfigSection(
		name = "Skilling",
		description = "Skilling sounds to mute",
		position = 2
	)
	String skillingSection = "Skilling";

	@ConfigSection(
		name = "Prayers",
		description = "Pray activation/deactivation sounds to mute",
		position = 3,
		closedByDefault = true
	)
	String prayerSection = "Prayers";

	@ConfigSection(
		name = "Miscellaneous",
		description = "Miscellaneous sounds to mute",
		position = 4
	)
	String miscSection = "Miscellaneous";

	@ConfigSection(
		name = "Ambient",
		description = "Ambient sounds to mute",
		position = 5
	)
	String ambientSection = "Ambient";

	@ConfigItem(
		keyName = "mutePetSounds",
		name = "Pets",
		description = "Mutes the sounds of noise-making pets",
		section = npcSection
	)
	default boolean mutePetSounds()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteAreaOfEffectSpells",
		name = "Humidify",
		description = "Mutes humidify spell sound",
		section = skillingSection
	)
	default boolean muteAOESounds()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteSnowballs",
		name = "Snowballs",
		description = "Mutes the sounds of snowballs being thrown",
		section = miscSection
	)
	default boolean muteSnowballSounds()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteWhack",
		name = "Whack",
		description = "Mutes the Rubber chicken and Stale baguette whack sound",
		section = miscSection
	)
	default boolean muteRubberChickenSounds()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteOthersAreaSounds",
		name = "Others' Area Sounds",
		description = "Mutes other players' area sounds",
		section = miscSection
	)
	default boolean muteOthersAreaSounds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteCrier",
		name = "Town Crier",
		description = "Mutes the sounds of the Town Crier",
		section = npcSection
	)
	default boolean muteTownCrierSounds()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteCannon",
		name = "Cannon spin",
		description = "Mutes the sounds of a cannon spinning",
		section = combatSection
	)
	default boolean muteCannon()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteREEEE",
		name = "Armadyl Crossbow",
		description = "Mutes the REEEEE of the ACB spec",
		section = combatSection
	)
	default boolean muteREEEE()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteIceSpells",
		name = "Ice Spells",
		description = "Mutes the sounds of Ice Barrage, Ice Blitz, etc.",
		section = combatSection
	)
	default boolean muteIceSpells()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteThralls",
		name = "Thralls",
		description = "Mutes the sounds of Thrall attacks",
		section = combatSection
	)
	default boolean muteThralls()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteSire",
		name = "Sire Spawns",
		description = "Mutes the sounds of the Abyssal Sire's spawns",
		section = npcSection
	)
	default boolean muteSire()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteFishingExplosive",
		name = "Fishing Explosive",
		description = "Mutes the sound of Fishing Explosives",
		section = miscSection
	)
	default boolean muteFishingExplosive()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteObelisk",
		name = "Wilderness Obelisk",
		description = "Mutes the sounds of the Wilderness Obelisk",
		section = miscSection
	)
	default boolean muteObelisk()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteNPCContact",
		name = "NPC Contact",
		description = "Mutes the sound of NPC Contact",
		section = miscSection
	)
	default boolean muteNPCContact()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteHealOther",
		name = "Heal Other",
		description = "Mutes the sound of Heal Other and Heal Group",
		section = miscSection
	)
	default boolean muteHealOther()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteItemDrop",
		name = "Item Dropping",
		description = "Mutes the sound that occurs when dropping an item",
		section = miscSection
	)
	default boolean muteItemDrop()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteLevelUp",
		name = "Level Up",
		description = "Mutes the sound of the Level-up fireworks",
		section = miscSection
	)
	default boolean muteLevelUp()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteTeleother",
		name = "Teleother",
		description = "Mutes the sound of the Teleother spell",
		section = miscSection
	)
	default boolean muteTeleother()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteTeleport",
		name = "Teleport",
		description = "Mutes the teleport vwoop sound",
		section = miscSection
	)
	default boolean muteTeleport()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteTeleportOthers",
		name = "Teleport (only others)",
		description = "Mutes the sound of other players' teleports",
		section = miscSection
	)
	default boolean muteTeleportOthers()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteMagicTrees",
		name = "Magic Trees",
		description = "Mutes the sound of Magic Trees",
		section = ambientSection
	)
	default boolean muteMagicTrees()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteHousePortal",
		name = "House Portal",
		description = "Mutes the sound of House Portal",
		section = ambientSection
	)
	default boolean muteHousePortal()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteWhiteNoise",
		name = "White Noise",
		description = "Mutes the white noises/static filler sounds",
		section = ambientSection
	)
	default boolean muteWhiteNoise()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteStranglewoodHowls",
		name = "Mute Stranglewood Howls",
		description = "Mutes the howl sounds around Stranglewood",
		section = ambientSection
	)
	default boolean muteStranglewoodHowls()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteChirps",
		name = "Chirps",
		description = "Mutes the birds and cricket sounds",
		section = ambientSection
	)
	default boolean muteChirps()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteWater",
		name = "Water",
		description = "Mutes the sound of water at shores or fountains",
		section = ambientSection
	)
	default boolean muteWater()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteRanges",
		name = "Ranges",
		description = "Mutes the sound of cooking ranges",
		section = ambientSection
	)
	default boolean muteRanges()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteFortisColosseum",
		name = "Fortis Colosseum",
		description = "Mutes the ambient sounds of Fortis Colosseum",
		section = ambientSection
	)
	default boolean muteFortisColosseum()
	{
		return true;
	}


	@ConfigItem(
		keyName = "muteRandoms",
		name = "Random Events",
		description = "Mutes the sounds produced by random events",
		section = npcSection
	)
	default boolean muteRandoms()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteTekton",
		name = "Tekton meteors",
		description = "Mutes the sound of Tekton's meteor attack",
		section = npcSection
	)
	default boolean muteTekton()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteCows",
		name = "Cows",
		description = "Mutes the sounds of Cows' moomoo",
		section = npcSection
	)
	default boolean muteCows()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteCaveHorrors",
		name = "Cave Horrors",
		description = "Mutes the sound of Cave Horrors",
		section = npcSection
	)
	default boolean muteCaveHorrors()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteWyverns",
		name = "Fossil Island Wyverns",
		description = "Mutes the sounds of Fossil Island Wyverns",
		section = npcSection
	)
	default boolean muteWyverns()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteJellies",
		name = "Jellies",
		description = "Mutes the sounds of Jellies",
		section = npcSection
	)
	default boolean muteJellies()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteNailBeasts",
		name = "Nail Beasts",
		description = "Mutes the sounds of Nail Beasts",
		section = npcSection
	)
	default boolean muteNailBeasts()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteDemons",
		name = "Demons",
		description = "Mutes the sounds of various Demons",
		section = npcSection
	)
	default boolean muteDemons()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteNechryael",
		name = "Nechryael",
		description = "Mutes the sounds of Nechryaels",
		section = npcSection
	)
	default boolean muteNechryael()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteDustDevils",
		name = "Dust Devils",
		description = "Mutes the sounds of Dust Devils",
		section = npcSection
	)
	default boolean muteDustDevils()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteSpectres",
		name = "Spectres",
		description = "Mutes the sounds of Aberrant and Deviant Spectres",
		section = npcSection
	)
	default boolean muteSpectres()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteDenseEssence",
		name = "Dense Essence",
		description = "Mutes the sound of chiseling Dense Essence",
		section = skillingSection
	)
	default boolean muteDenseEssence()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteChopChop",
		name = "Chop Chop!",
		description = "Mutes the sound of the Dragon axe special",
		section = skillingSection
	)
	default boolean muteChopChop()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteSmashing!",
		name = "Smashing!",
		description = "Mutes the sound of the Dragon Pickaxe special",
		section = skillingSection
	)
	default boolean muteSmashing()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteWoodcutting",
		name = "Woodcutting",
		description = "Mutes the sound of Woodcutting",
		section = skillingSection
	)
	default boolean muteWoodcutting()
	{
		return true;
	}

	@ConfigItem(
		keyName = "plankMake",
		name = "Plank Make",
		description = "Mutes the sound of Plank Make",
		section = skillingSection
	)
	default boolean mutePlankMake()
	{
		return true;
	}

	@ConfigItem(
		keyName = "mutePickpocket",
		name = "Pickpocket",
		description = "Mutes the sound of the pickpocket plop",
		section = skillingSection
	)
	default boolean mutePickpocket()
	{
		return false;
	}

	@ConfigItem(
		keyName = "mutePickpocketStun",
		name = "Pickpocket Stun",
		description = "Mutes the sound of the pickpocket stun",
		section = skillingSection
	)
	default boolean mutePickpocketStun()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteStringJewellery",
		name = "String Jewellery",
		description = "Mutes the sound of the String Jewellery spell",
		section = skillingSection
	)
	default boolean muteStringJewellery()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteNightmare",
		name = "Nightmare",
		description = "Mutes the sound of the Nightmare's parry",
		section = npcSection
	)
	default boolean muteNightmare()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteScarabs",
		name = "Scarab Swarm",
		description = "Mutes the sound of the Scarab swarm in Pyramid Plunder",
		section = npcSection
	)
	default boolean muteScarabs()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteFiremaking",
		name = "Firemaking",
		description = "Mutes the sound of burning and lighting logs",
		section = skillingSection
	)
	default boolean muteFiremaking()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteFishing",
		name = "Fishing",
		description = "Mutes the sound of Fishing",
		section = skillingSection
	)
	default boolean muteFishing()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteFletching",
		name = "Fletching",
		description = "Mutes the sound of Fletching",
		section = skillingSection
	)
	default boolean muteFletching()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteMining",
		name = "Mining",
		description = "Mutes the sounds of Mining",
		section = skillingSection
	)
	default boolean muteMining()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteAlchemy",
		name = "Alchemy",
		description = "Mutes the sounds of Low and High Alchemy",
		section = skillingSection
	)
	default boolean muteAlchemy()
	{
		return true;
	}

	@ConfigItem(
		keyName = "muteChargeOrb",
		name = "Charge Orb",
		description = "Mutes the sounds of Charge Orb spells",
		section = skillingSection
	)
	default boolean muteChargeOrb()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteThickSkin",
		name = "Thick Skin",
		description = "Mutes the activation sound of Thick Skin",
		section = prayerSection,
		position = 1
	)
	default boolean muteThickSkin()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteBurstOfStrength",
		name = "Burst of Strength",
		description = "Mutes the activation sound of Burst of Strength",
		section = prayerSection,
		position = 2
	)
	default boolean muteBurstofStrength()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteClarityOfThought",
		name = "Clarity of Thought",
		description = "Mutes the activation sound of Clarity of Thought",
		section = prayerSection,
		position = 3
	)
	default boolean muteClarityOfThought()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteRockSkin",
		name = "Rock Skin",
		description = "Mutes the activation sound of Rock Skin",
		section = prayerSection,
		position = 4
	)
	default boolean muteRockSkin()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteSuperhumanStrength",
		name = "Superhuman Strength",
		description = "Mutes the activation sound of Superhuman Strength",
		section = prayerSection,
		position = 5
	)
	default boolean muteSuperhumanStrength()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteImprovedReflexes",
		name = "Improved Reflexes",
		description = "Mutes the activation sound of Improved Reflexes",
		section = prayerSection,
		position = 6
	)
	default boolean muteImprovedReflexes()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteRapidHeal",
		name = "Rapid Heal",
		description = "Mutes the activation sound of Rapid Heal",
		section = prayerSection,
		position = 7
	)
	default boolean muteRapidHeal()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteProtectItem",
		name = "Protect Item",
		description = "Mutes the activation sound of Protect Item",
		section = prayerSection,
		position = 8
	)
	default boolean muteProtectItem()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteHawkEye",
		name = "Hawk Eye",
		description = "Mutes the activation sound of Hawk Eye",
		section = prayerSection,
		position = 9
	)
	default boolean muteHawkEye()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteMysticLore",
		name = "Mystic Lore",
		description = "Mutes the activation sound of Mystic Lore",
		section = prayerSection,
		position = 10
	)
	default boolean muteMysticLore()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteSteelSkin",
		name = "Steel Skin",
		description = "Mutes the activation sound of Steel Skin",
		section = prayerSection,
		position = 11
	)
	default boolean muteSteelSkin()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteUltimateStrength",
		name = "Ultimate Strength",
		description = "Mutes the activation sound of Ultimate Strength",
		section = prayerSection,
		position = 12
	)
	default boolean muteUltimateStrength()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteIncredibleReflexes",
		name = "Incredible Reflexes",
		description = "Mutes the activation sound of Incredible Reflexes",
		section = prayerSection,
		position = 13
	)
	default boolean muteIncredibleReflexes()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteProtectFromMagic",
		name = "Protect from Magic",
		description = "Mutes the activation sound of Protect from Magic",
		section = prayerSection,
		position = 14
	)
	default boolean muteProtectFromMagic()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteProtectFromRange",
		name = "Protect from Range",
		description = "Mutes the activation sound of Protect from Range",
		section = prayerSection,
		position = 15
	)
	default boolean muteProtectFromRange()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteProtectFromMelee",
		name = "Protect from Melee",
		description = "Mutes the activation sound of Protect from Melee",
		section = prayerSection,
		position = 16
	)
	default boolean muteProtectFromMelee()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteEagleEye",
		name = "Eagle Eye",
		description = "Mutes the activation sound of Eagle Eye",
		section = prayerSection,
		position = 17
	)
	default boolean muteEagleEye()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteMysticMight",
		name = "Mystic Might",
		description = "Mutes the activation sound of Mystic Might",
		section = prayerSection,
		position = 18
	)
	default boolean muteMysticMight()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteRetribution",
		name = "Retribution",
		description = "Mutes the activation sound of Retribution",
		section = prayerSection,
		position = 19
	)
	default boolean muteRetribution()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteRedemption",
		name = "Redemption",
		description = "Mutes the activation sound of Redemption",
		section = prayerSection,
		position = 20
	)
	default boolean muteRedemption()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteSmite",
		name = "Smite",
		description = "Mutes the activation sound of Smite",
		section = prayerSection,
		position = 21
	)
	default boolean muteSmite()
	{
		return false;
	}

	@ConfigItem(
		keyName = "mutePreserve",
		name = "Preserve",
		description = "Mutes the activation sound of Preserve and Rapid Restore",
		section = prayerSection,
		position = 22
	)
	default boolean mutePreserve()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteChivalry",
		name = "Chivalry",
		description = "Mutes the activation sound of Chivalry",
		section = prayerSection,
		position = 23
	)
	default boolean muteChivalry()
	{
		return false;
	}

	@ConfigItem(
		keyName = "mutePiety",
		name = "Piety",
		description = "Mutes the activation sound of Piety",
		section = prayerSection,
		position = 24
	)
	default boolean mutePiety()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteRigour",
		name = "Rigour",
		description = "Mutes the activation sound of Rigour and Sharp Eye",
		section = prayerSection,
		position = 25
	)
	default boolean muteRigour()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteAugury",
		name = "Augury",
		description = "Mutes the activation sound of Augury and Mystic Will",
		section = prayerSection,
		position = 26
	)
	default boolean muteAugury()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteDeadeye",
		name = "Deadeye",
		description = "Mutes the activation sound of Deadeye",
		section = prayerSection,
		position = 27
	)
	default boolean muteDeadeye()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteMysticVigour",
		name = "Mystic Rigour",
		description = "Mutes the activation sound of Mystic Vigour",
		section = prayerSection,
		position = 28
	)
	default boolean muteMysticVigour()
	{
		return false;
	}

	@ConfigItem(
		keyName = "muteDeactivatePrayer",
		name = "Deactivate Prayer",
		description = "Mutes the prayer deactivation sound",
		section = prayerSection,
		position = 27
	)
	default boolean muteDeactivatePrayer()
	{
		return false;
	}

	@ConfigItem(
		keyName = "soundsToMute",
		name = "Muted Sounds",
		description = "Enter IDs of the sounds you wish to mute",
		position = 28
	)
	default String soundsToMute()
	{
		return "";
	}

	@ConfigItem(
		keyName = "ambientSoundsToMute",
		name = "Muted Ambient Sounds",
		description = "Enter IDs of the ambient sounds you wish to mute",
		position = 29
	)
	default String ambientSoundsToMute()
	{
		return "";
	}
}

/*
 * Copyright (c) 2020, Brooklyn <https://github.com/Broooklyn>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brooklyn.annoyancemute;

import com.brooklyn.annoyancemute.soundeffects.ActorCombatSoundEffect;
import com.brooklyn.annoyancemute.soundeffects.AnimationSoundEffect;
import com.brooklyn.annoyancemute.soundeffects.AmbientSoundEffect;
import com.brooklyn.annoyancemute.soundeffects.SoundEffect;
import com.brooklyn.annoyancemute.soundeffects.GenericSoundEffect;
import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.Deque;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.Varbits;
import net.runelite.api.events.AmbientSoundEffectCreated;
import net.runelite.api.events.AreaSoundEffectPlayed;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

@PluginDescriptor(
	name = "Annoyance Mute",
	description = "Selectively mute annoying game sounds",
	tags = {"sound", "volume", "mute", "hub", "brooklyn", "pet", "stomp"}
)
public class AnnoyanceMutePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private AnnoyanceMuteConfig config;

	@VisibleForTesting
	public HashSet<SoundEffect> soundEffects = new HashSet<>();

	@Getter(AccessLevel.PUBLIC)
	public HashSet<SoundEffect> ambientSoundsToMute = new HashSet<>();

	@Provides
	AnnoyanceMuteConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AnnoyanceMuteConfig.class);
	}

	@Override
	public void startUp()
	{
		setUpMutes();

		clientThread.invoke(() ->
		{
			// Reload the scene to reapply ambient sounds
			if (client.getGameState() == GameState.LOGGED_IN)
			{
				client.setGameState(GameState.LOADING);
			}
		});
	}

	@Override
	public void shutDown()
	{
		soundEffects.clear();

		clientThread.invoke(() ->
		{
			// Reload the scene to reapply ambient sounds
			if (client.getGameState() == GameState.LOGGED_IN)
			{
				client.setGameState(GameState.LOADING);
			}
		});
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (configChanged.getGroup().equals("annoyancemute"))
		{
			setUpMutes();

			switch (configChanged.getKey())
			{
				case "muteMagicTrees":
				case "muteHousePortal":
				case "muteWhiteNoise":
				case "muteChirps":
				case "muteWater":
				case "muteRanges":
				case "muteFortisColosseum":
				case "muteStranglewoodHowls":
					clientThread.invoke(() ->
					{
						// Reload the scene to reapply ambient sounds
						if (client.getGameState() == GameState.LOGGED_IN)
						{
							client.setGameState(GameState.LOADING);
						}
					});
			}
		}
	}


	@Subscribe(priority = -2) // priority -2 to run after music plugin
	public void onAmbientSoundEffectCreated(AmbientSoundEffectCreated ambientSoundEffectCreated)
	{
		// if nothing to mute then return
		if (ambientSoundsToMute.isEmpty())
		{
			return;
		}

		List<SoundEffect> mutedAmbientsSameID = ambientSoundsToMute.stream().filter(mutedSounds -> mutedSounds.getId() == ambientSoundEffectCreated.getAmbientSoundEffect().getSoundEffectId()).collect(Collectors.toList());

		// only mute sounds created that should be muted should call the muteAmbientSounds()
		if (mutedAmbientsSameID.size() > 0)
		{
			muteAmbientSounds();
		}
	}

	@Subscribe(priority = -2) // priority -2 to run after music plugin
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		// if nothing to mute then return
		if (ambientSoundsToMute.isEmpty())
		{
			return;
		}

		GameState gameState = gameStateChanged.getGameState();

		// on map load mute ambient sounds
		if (gameState == GameState.LOGGED_IN)
		{
			muteAmbientSounds();
		}
	}

	// Check the ambient sounds currently being played and remove the ones that should be mtued
	private void muteAmbientSounds()
	{
		Deque<net.runelite.api.AmbientSoundEffect> ambientSoundEffects = client.getAmbientSoundEffects();
		ArrayList<net.runelite.api.AmbientSoundEffect> soundsToKeep = new ArrayList<>();

		for (net.runelite.api.AmbientSoundEffect ambientSoundEffect : ambientSoundEffects)
		{
			List<AmbientSoundEffect> mutedAmbientsSameID = ambientSoundsToMute.stream().filter(AmbientSoundEffect.class::isInstance)
				.map(AmbientSoundEffect.class::cast).filter(mutedSounds -> mutedSounds.getId() == ambientSoundEffect.getSoundEffectId()).collect(Collectors.toList());
			boolean muteSound = false;
			for (int i = 0; i < mutedAmbientsSameID.size() && !muteSound; i++)
			{
				int[] backgroundSounds = ambientSoundEffect.getBackgroundSoundEffectIds();
				int[] backgroundSoundsToMute = mutedAmbientsSameID.get(i).getBackgroundSoundEffects();

				if (backgroundSounds == null && backgroundSoundsToMute.length == 0)
				{
					muteSound = true;
				}
				if (backgroundSounds != null && backgroundSoundsToMute.length == 0)
				{
					muteSound = true;
				}
				if (backgroundSounds != null && backgroundSoundsToMute.length != 0 && arraysLikeEnough(backgroundSounds, backgroundSoundsToMute))
				{
					muteSound = true;
				}
			}
			if (!muteSound)
			{
				soundsToKeep.add(ambientSoundEffect);
			}
		}

		// clear the deque (mutes all sounds)
		client.getAmbientSoundEffects().clear();

		// add the sounds not black listed back in
		for (net.runelite.api.AmbientSoundEffect ambientSoundEffect : soundsToKeep)
		{
			client.getAmbientSoundEffects().addLast(ambientSoundEffect);
		}
	}

	// i can't be asked to find every single instance of 2184's ambient sound and all unique arrays
	// so let's find similar ones and include them as mutes
	private boolean arraysLikeEnough(int[] array1, int[] array2)
	{
		int total = 0;
		int totalSimilar = 0;

		for (int int1 : array1)
		{
			total++;
			for (int int2 : array2)
			{
				if (int1 == int2)
				{
					totalSimilar++;
				}
			}
		}

		return ((double) totalSimilar / total > 0.75);
	}

	@VisibleForTesting
	public void setUpMutes()
	{
		soundEffects = new HashSet<>();

		if (config.muteREEEE())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ACB_REEEE, SoundEffectType.EITHER));
		}
		if (config.muteCannon())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CANNON_SPIN, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SHATTERED_CANNON_SPIN, SoundEffectType.EITHER));
		}
		if (config.muteIceSpells())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ICE_BARRAGE_CAST, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ICE_BLITZ_CAST, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ICE_BURST_CAST, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ICE_SPELL_LAND, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ICE_RUSH_CAST, SoundEffectType.EITHER));
		}
		if (config.muteThralls())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.WATER_STRIKE_CAST, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.WATER_STRIKE_LAND, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ZOMBIE_THRALL_ATTACK, SoundEffectType.EITHER));
		}

		// ------- NPCs -------
		if (config.muteCaveHorrors())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CAVE_HORROR, SoundEffectType.EITHER));
		}
		if (config.muteCows())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.MOO_MOO, SoundEffectType.EITHER));
		}
		if (config.muteDemons())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.GREATER_DEMON_ATTACK, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.GREATER_DEMON_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.GREATER_DEMON_PARRY, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DEMON_ATTACK, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DEMON_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DEMON_PARRY, SoundEffectType.EITHER));
		}
		if (config.muteDustDevils())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DUST_DEVIL_ATTACK, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DUST_DEVIL_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DUST_DEVIL_PARRY, SoundEffectType.EITHER));
		}
		if (config.muteWyverns())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FOSSIL_ISLAND_WYVERN_69, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FOSSIL_ISLAND_WYVERN_71, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FOSSIL_ISLAND_WYVERN_73, SoundEffectType.EITHER));
		}
		if (config.muteJellies())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.JELLY_ATTACK, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.JELLY_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.JELLY_PARRY, SoundEffectType.EITHER));
		}
		if (config.muteNailBeasts())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NAIL_BEAST_ATTACK, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NAIL_BEAST_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NAIL_BEAST_PARRY, SoundEffectType.EITHER));
		}
		if (config.muteNechryael())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NECHRYAEL_ATTACK, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NECHRYAE_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NECHRYAEL_PARRY, SoundEffectType.EITHER));
		}
		if (config.muteNightmare())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NIGHTMARE_SOUND, SoundEffectType.EITHER));
		}
		if (config.mutePetSounds())
		{
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.SNAKELING_METAMORPHOSIS, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.CLOCKWORK_CAT_CLICK_CLICK, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.PET_KREEARRA_WING_FLAP, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.ELECTRIC_HYDRA_IN, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.ELECTRIC_HYDRA_OUT, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.IKKLE_HYDRA_RIGHT_FOOT_LETS_STOMP, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.IKKLE_HYDRA_LEFT_FOOT_LETS_STOMP, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.PET_WALKING_THUMP, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.VETION_JR_RIGHT_FOOT_LETS_STOMP, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.VETION_JR_LEFT_FOOT_LETS_STOMP, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.NOON_FLAP_1, SoundEffectType.EITHER, 0));
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.NOON_FLAP_2, SoundEffectType.EITHER, 0));
		}
		if (config.mutePetSounds() || config.muteRandoms())
		{
			soundEffects.add(new ActorCombatSoundEffect(SoundEffectID.CAT_HISS, SoundEffectType.EITHER, 0));
		}

		// Applicable to both pet sounds and random event sounds
		if (config.muteRandoms())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NPC_TELEPORT_WOOSH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DRUNKEN_DWARF, SoundEffectType.EITHER));
		}
		if (config.muteScarabs())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SCARAB_ATTACK_SOUND, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SCARAB_SPAWN_SOUND, SoundEffectType.EITHER));
		}
		if (config.muteSire())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SIRE_SPAWNS, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SIRE_SPAWNS_DEATH, SoundEffectType.EITHER));
		}
		if (config.muteSpectres())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SPECTRE_ATTACK_SHOOT, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SPECTRE_ATTACK_HIT, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SPECTRE_DEATH, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SPECTRE_PARRY, SoundEffectType.EITHER));
		}
		if (config.muteTekton())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.METEOR, SoundEffectType.EITHER));
		}
		if (config.muteTownCrierSounds())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.TOWN_CRIER_BELL_DING, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.TOWN_CRIER_BELL_DONG, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.TOWN_CRIER_SHOUT_SQUEAK, SoundEffectType.EITHER));
		}

		// ------- Skilling -------
		if (config.muteAlchemy())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HIGH_ALCHEMY, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.LOW_ALCHEMY, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.TRAIL_BLAZERS_HIGH_ALCHEMY, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.TRAIL_BLAZERS_LOW_ALCHEMY, SoundEffectType.EITHER));
		}
		if (config.muteChopChop())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHOP_CHOP, SoundEffectType.EITHER));
		}
		if (config.muteSmashing())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SMASHING, SoundEffectType.AREA_SOUND_EFFECT));
		}
		if (config.muteDenseEssence())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHISEL, SoundEffectType.EITHER));
		}
		if (config.muteFiremaking())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FIREMAKING_LOG_BURN, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FIREMAKING_LOG_LIGHT, SoundEffectType.EITHER));
		}
		if (config.muteFishing())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FISHING_SOUND, SoundEffectType.EITHER));
		}
		if (config.muteFletching())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FLETCHING_CUT, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.AMETHYST_FLETCHING, SoundEffectType.EITHER));
		}
		if (config.muteAOESounds())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HUMIDIFY_SOUND, SoundEffectType.EITHER));
		}
		if (config.mutePickpocket())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PICKPOCKET_PLOP, SoundEffectType.EITHER));
		}
		if (config.mutePickpocketStun())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PICKPOCKET_STUN, SoundEffectType.EITHER));
		}
		if (config.muteMining())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.MINING_PICK_SWING_1, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.MINING_PICK_SWING_2, SoundEffectType.EITHER));
		}
		if (config.mutePlankMake())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PLANK_MAKE, SoundEffectType.EITHER));
		}
		if (config.muteStringJewellery())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.STRING_JEWELLERY, SoundEffectType.EITHER));
		}
		if (config.muteWoodcutting())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.WOODCUTTING_CHOP, SoundEffectType.EITHER));
		}
		if (config.muteChargeOrb())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHARGE_EARTH_ORB, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHARGE_AIR_ORB, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHARGE_FIRE_ORB, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHARGE_WATER_ORB, SoundEffectType.EITHER));
		}
		// ------- Prayers -------
		if (config.muteThickSkin())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.THICK_SKIN, SoundEffectType.EITHER));
		}
		if (config.muteBurstofStrength())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.BURST_OF_STRENGTH, SoundEffectType.EITHER));
		}
		if (config.muteClarityOfThought())
		{

			soundEffects.add(new GenericSoundEffect(SoundEffectID.CLARITY_OF_THOUGHT, SoundEffectType.EITHER));
		}
		if (config.muteRockSkin())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ROCK_SKIN, SoundEffectType.EITHER));
		}
		if (config.muteSuperhumanStrength())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SUPERHUMAN_STRENGTH, SoundEffectType.EITHER));
		}
		if (config.muteImprovedReflexes())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.IMPROVED_REFLEXES, SoundEffectType.EITHER));
		}
		if (config.muteRapidHeal())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.RAPID_HEAL, SoundEffectType.EITHER));
		}
		if (config.muteProtectItem())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PROTECT_ITEM, SoundEffectType.EITHER));
		}
		if (config.muteHawkEye())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HAWK_EYE, SoundEffectType.EITHER));
		}
		if (config.muteMysticLore())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.MYSTIC_LORE, SoundEffectType.EITHER));
		}
		if (config.muteSteelSkin())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.STEEL_SKIN, SoundEffectType.EITHER));
		}
		if (config.muteUltimateStrength())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ULTIMATE_STRENGTH, SoundEffectType.EITHER));
		}
		if (config.muteIncredibleReflexes())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.INCREDIBLE_REFLEXES, SoundEffectType.EITHER));
		}
		if (config.muteProtectFromMagic())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PROTECT_FROM_MAGIC, SoundEffectType.EITHER));
		}
		if (config.muteProtectFromRange())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PROTECT_FROM_RANGE, SoundEffectType.EITHER));
		}
		if (config.muteProtectFromMelee())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PROTECT_FROM_MELEE, SoundEffectType.EITHER));
		}
		if (config.muteEagleEye())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.EAGLE_EYE, SoundEffectType.EITHER));
		}
		if (config.muteMysticMight())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.MYSTIC_MIGHT, SoundEffectType.EITHER));
		}
		if (config.muteRetribution())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.RETRIBUTION, SoundEffectType.EITHER));
		}
		if (config.muteRedemption())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.REDEMPTION, SoundEffectType.EITHER));
		}
		if (config.muteSmite())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SMITE, SoundEffectType.EITHER));
		}
		if (config.mutePreserve())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PRESERVE, SoundEffectType.EITHER));
		}
		if (config.muteChivalry())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.CHIVALRY, SoundEffectType.EITHER));
		}
		if (config.mutePiety())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.PIETY, SoundEffectType.EITHER));
		}
		if (config.muteRigour())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.RIGOUR, SoundEffectType.EITHER));
		}
		if (config.muteAugury())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.AUGURY, SoundEffectType.EITHER));
		}
		if (config.muteMysticVigour())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.MYSTIC_VIGOUR, SoundEffectType.EITHER));
		}
		if (config.muteDeadeye())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DEADEYE, SoundEffectType.EITHER));
		}
		if (config.muteDeactivatePrayer())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.DEACTIVATE_PRAYER, SoundEffectType.EITHER));
		}

		// ------- Miscellaneous -------
		if (config.muteFishingExplosive())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.FISHING_EXPLOSIVE, SoundEffectType.EITHER));
		}
		if (config.muteHealOther())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HEAL_OTHER_2, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HEAL_OTHER_3, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HEAL_OTHER_4, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.HEAL_OTHER_5, SoundEffectType.EITHER));
		}
		if (config.muteItemDrop())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.ITEM_DROP, SoundEffectType.EITHER));
		}
		if (config.muteLevelUp())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.LEVEL_UP_1, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.LEVEL_UP_2, SoundEffectType.EITHER));
		}
		if (config.muteNPCContact())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.NPC_CONTACT, SoundEffectType.EITHER));
		}
		if (config.muteSnowballSounds())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SNOWBALL_HIT, SoundEffectType.EITHER));
			soundEffects.add(new GenericSoundEffect(SoundEffectID.SNOWBALL_THROW, SoundEffectType.EITHER));
		}
		if (config.muteTeleother())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.TELEOTHER, SoundEffectType.EITHER));
		}
		if (config.muteTeleport())
		{
			if (config.muteTeleportOthers())
			{
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 714)); // Normal
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 1816)); // Lunar
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3864)); // Scroll
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3865)); // Xeric
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3867)); // Wilderness
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3869)); // Cabbage
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3872)); // Ardougne
				soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3874)); // Burgh
			}
			else
			{
				soundEffects.add(new GenericSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER));
			}
		}
		else if (config.muteTeleportOthers())
		{
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 714)); // Normal
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 1816)); // Lunar
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3864)); // Scroll
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3865)); // Xeric
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3867)); // Wilderness
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3869)); // Cabbage
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3872)); // Ardougne
			soundEffects.add(new AnimationSoundEffect(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, 3874)); // Burgh
		}
		if (config.muteRubberChickenSounds())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.WHACK, SoundEffectType.EITHER));
		}
		if (config.muteObelisk())
		{
			soundEffects.add(new GenericSoundEffect(SoundEffectID.WILDY_OBELISK, SoundEffectType.EITHER));
		}

		// Ambient Sounds
		ambientSoundsToMute = new HashSet<>();

		if (config.muteMagicTrees())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.MAGIC_TREE, SoundEffectType.AMBIENT));
		}
		if (config.muteHousePortal())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.HOUSE_PORTAL, SoundEffectType.AMBIENT));
		}
		if (config.muteWhiteNoise())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_STATIC_1));

			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.STATIC_1, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.STATIC_2, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.STATIC_3, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.STATIC_4, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.STATIC_5, SoundEffectType.AMBIENT));
		}
		if (config.muteChirps())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_BIRD_1));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_BIRD_2));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_BIRD_3));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_BIRD_4));

			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.CRICKET_1, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.CRICKET_2, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.CRICKET_3, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.CRICKET_4, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.CRICKET_5, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.CRICKET_6, SoundEffectType.AMBIENT));
		}
		if (config.muteWater())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_WATER_1));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_1, SoundEffectType.AMBIENT, SoundEffectID.COMMON_BACKGROUND_2184_WATER_2));

			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_1, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_2, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_3, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_4, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_5, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_6, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_7, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_8, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_9, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_10, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_11, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.WATER_12, SoundEffectType.AMBIENT));
		}
		if (config.muteRanges())
		{
			ambientSoundsToMute.add(new GenericSoundEffect(SoundEffectID.RANGE_1, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new GenericSoundEffect(SoundEffectID.RANGE_2, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new GenericSoundEffect(SoundEffectID.COOKING_POT, SoundEffectType.AMBIENT));
		}
		if (config.muteFortisColosseum())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.FORTIS_COLOSSEUM_AMBIENT_1, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.FORTIS_COLOSSEUM_AMBIENT_2, SoundEffectType.AMBIENT));
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.FORTIS_COLOSSEUM_FIRE, SoundEffectType.AMBIENT));
		}

		if (config.muteStranglewoodHowls())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(SoundEffectID.COMMON_BACKGROUND_2, SoundEffectType.AMBIENT, SoundEffectID.VARDORVIS_AREA));
		}

		// add the user defined ambient sounds to mute to the list manually
		for (int i : getSelectedAmbientSounds())
		{
			ambientSoundsToMute.add(new AmbientSoundEffect(i, SoundEffectType.AMBIENT));
		}
	}

	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed areaSoundEffectPlayed)
	{
		Actor source = areaSoundEffectPlayed.getSource();
		int soundId = areaSoundEffectPlayed.getSoundId();
		if (source != client.getLocalPlayer() && source instanceof Player)
		{
			if (config.muteOthersAreaSounds())
			{
				areaSoundEffectPlayed.consume();
			}
			else if (shouldMute(soundId, SoundEffectType.AREA_SOUND_EFFECT, source))
			{
				areaSoundEffectPlayed.consume();
			}
		}
		else if (source == null)
		{
			if (soundId == SoundEffectID.PET_WALKING_THUMP && client.getVarbitValue(Varbits.IN_RAID) == 1)
			{
				return;
			}
			if (soundId == SoundEffectID.SKELETON_THRALL_ATTACK && config.muteThralls())
			{
				areaSoundEffectPlayed.consume();
			}
			if (shouldMute(soundId, SoundEffectType.AREA_SOUND_EFFECT, source))
			{
				areaSoundEffectPlayed.consume();
			}
		}
		else if (shouldMute(soundId, SoundEffectType.AREA_SOUND_EFFECT, source))
		{
			areaSoundEffectPlayed.consume();
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed soundEffectPlayed)
	{
		int soundId = soundEffectPlayed.getSoundId();
		if (shouldMute(soundId, SoundEffectType.SOUND_EFFECT, soundEffectPlayed.getSource()))
		{
			soundEffectPlayed.consume();
		}
	}

	@VisibleForTesting
	public boolean shouldMute(int soundId, SoundEffectType type, @Nullable Actor source)
	{
		if (getSelectedSounds().contains(Integer.toString(soundId)))
		{
			return true;
		}

		// filter to generics
		List<SoundEffect> genericSoundEffects = soundEffects.stream()
			.filter(GenericSoundEffect.class::isInstance)
			.map(GenericSoundEffect.class::cast)
			.filter(s -> s.getId() == soundId
				&& (s.getSoundEffectType() == SoundEffectType.EITHER || s.getSoundEffectType() == type))
			.collect(Collectors.toCollection(ArrayList::new));

		// filter to animations
		List<SoundEffect> animationSoundEffects = soundEffects.stream()
			.filter(AnimationSoundEffect.class::isInstance)
			.map(AnimationSoundEffect.class::cast)
			.filter(s -> s.getId() == soundId
				&& (s.getSoundEffectType() == SoundEffectType.EITHER || s.getSoundEffectType() == type))
			.collect(Collectors.toCollection(ArrayList::new));

		// filter to combat levels
		List<SoundEffect> actorSoundEffects = source != null ? soundEffects.stream()
			.filter(ActorCombatSoundEffect.class::isInstance)
			.map(ActorCombatSoundEffect.class::cast)
			.filter(s -> s.getId() == soundId
				&& (s.getSoundEffectType() == SoundEffectType.EITHER || s.getSoundEffectType() == type)
				&& (s.getActorCombatLevel() == source.getCombatLevel()))
			.collect(Collectors.toCollection(ArrayList::new)) : Collections.emptyList();

		List<SoundEffect> combinedList = new ArrayList<>();
		combinedList.addAll(genericSoundEffects);
		combinedList.addAll(animationSoundEffects);
		combinedList.addAll(actorSoundEffects);

		if (combinedList.isEmpty())
		{
			return false;
		}
		return !genericSoundEffects.isEmpty()
			&& !actorSoundEffects.isEmpty()
			&& animationSoundEffects.stream().filter(AnimationSoundEffect.class::isInstance)
			.map(AnimationSoundEffect.class::cast).anyMatch(s -> s.getAnimationID() == -1) ||
			animationSoundEffects.stream().filter(AnimationSoundEffect.class::isInstance)
			.map(AnimationSoundEffect.class::cast).noneMatch(s -> s.getAnimationID() == client.getLocalPlayer().getAnimation());
	}

	public List<String> getSelectedSounds()
	{
		final String configSounds = config.soundsToMute().toLowerCase();

		if (configSounds.isEmpty())
		{
			return Collections.emptyList();
		}

		return Text.fromCSV(configSounds);
	}

	public List<Integer> getSelectedAmbientSounds()
	{
		final String configSounds = config.ambientSoundsToMute().toLowerCase();

		List<String> configValue = Text.fromCSV(configSounds);

		ArrayList<Integer> returnValues = new ArrayList<>();
		for (String str : configValue)
		{
			if (tryParseInt(str))
			{
				returnValues.add(Integer.parseInt(str));
			}
		}

		return returnValues;
	}

	private boolean tryParseInt(String value)
	{
		try
		{
			Integer.parseInt(value);
			return true;
		}
		catch (NumberFormatException e)
		{
			return false;
		}
	}
}
package com.brooklyn.annoyancemute;


import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum SoundEffectType
{
	EITHER("Either", 0),
	SOUND_EFFECT("Sound Effect", 1),
	AREA_SOUND_EFFECT("Area Sound Effect", 2),

	AMBIENT("Ambient", 3);

	private final String name;
	private final int type;

	@Override
	public String toString()
	{
		return name;
	}
}

package com.brooklyn.annoyancemute.soundeffects;

import com.brooklyn.annoyancemute.SoundEffectType;

public class SoundEffect
{
	int soundID;
	SoundEffectType type;

	public SoundEffect(int soundID, SoundEffectType type)
	{
		this.soundID = soundID;
		this.type = type;
	}

	public int getId()
	{
		return soundID;
	}

	public SoundEffectType getSoundEffectType()
	{
		return type;
	}
}

package com.brooklyn.annoyancemute.soundeffects;

import com.brooklyn.annoyancemute.SoundEffectType;
import lombok.Getter;

@Getter
public class AnimationSoundEffect extends SoundEffect
{
	int animationID;

	public AnimationSoundEffect(int id, SoundEffectType soundEffectType, int animationID)
	{
		super(id, soundEffectType);
		this.animationID = animationID;
	}
}

package com.brooklyn.annoyancemute.soundeffects;

import com.brooklyn.annoyancemute.SoundEffectType;
import lombok.Getter;

@Getter
public class AmbientSoundEffect extends SoundEffect
{
	int[] backgroundSoundEffects;

	public AmbientSoundEffect(int id, SoundEffectType soundEffectType)
	{
		super(id, soundEffectType);
		this.backgroundSoundEffects = new int[]{};
	}

	public AmbientSoundEffect(int id, SoundEffectType soundEffectType, int[] backgroundSoundEffects)
	{
		super(id, soundEffectType);
		this.backgroundSoundEffects = backgroundSoundEffects;
	}
}

package com.brooklyn.annoyancemute.soundeffects;

import com.brooklyn.annoyancemute.SoundEffectType;
import lombok.Getter;

@Getter
public class ActorCombatSoundEffect extends SoundEffect
{
	int actorCombatLevel;

	public ActorCombatSoundEffect(int id, SoundEffectType soundEffectType, int actorCombatLevel)
	{
		super(id, soundEffectType);
		this.actorCombatLevel = actorCombatLevel;
	}
}

package com.brooklyn.annoyancemute.soundeffects;

import com.brooklyn.annoyancemute.SoundEffectType;

public class GenericSoundEffect extends SoundEffect
{
	public GenericSoundEffect(int id, SoundEffectType soundEffectType)
	{
		super(id, soundEffectType);
	}
}

package com.brooklyn.annoyancemute;

import com.brooklyn.annoyancemute.debug.AnnoyanceMutePluginDebug;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AnnoyanceMutePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AnnoyanceMutePlugin.class, AnnoyanceMutePluginDebug.class);
		RuneLite.main(args);
	}
}
package com.brooklyn.annoyancemute.debug;

import com.brooklyn.annoyancemute.AnnoyanceMutePlugin;
import com.brooklyn.annoyancemute.SoundEffectType;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.AreaSoundEffectPlayed;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

class AnnoyanceMuteSoundEffectOverlay extends OverlayPanel
{
	private final static int MAX_LINES = 10;
	private final static Color COLOR_SOUND_EFFECT = Color.WHITE;
	private final static Color COLOR_AREA_SOUND_EFFECT = Color.YELLOW;
	private final static Color COLOR_SILENT_SOUND_EFFECT = Color.GRAY;
	private final static Color COLOR_ALLOWED = Color.GREEN;
	private final static Color COLOR_CONSUMED = Color.RED;
	public static final String ALLOWED = "Allowed";
	public static final String CONSUMED = "Consumed";
	private final Client client;
	private final AnnoyanceMutePlugin plugin;

	@Inject
	AnnoyanceMuteSoundEffectOverlay(Client client, AnnoyanceMutePlugin plugin)
	{
		this.client = client;
		this.plugin = plugin;

		panelComponent.getChildren().add(LineComponent.builder()
			.left("Sound Effects")
			.leftColor(Color.CYAN)
			.build());

		setClearChildren(false);
		setPosition(OverlayPosition.TOP_LEFT);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		return super.render(graphics);
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed event)
	{
		int soundId = event.getSoundId();

		String text = "G: " + soundId +
			" - D: " + event.getDelay();

		String action = ALLOWED;
		Color actionColor = COLOR_ALLOWED;

		if (plugin.shouldMute(soundId, SoundEffectType.SOUND_EFFECT, event.getSource()))
		{
			action = CONSUMED;
			actionColor = COLOR_CONSUMED;
		}

		panelComponent.getChildren().add(LineComponent.builder()
			.left(text)
			.leftColor(COLOR_SOUND_EFFECT)
			.right(action)
			.rightColor(actionColor)
			.build());

		checkMaxLines();
	}

	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed event)
	{
		Color textColor = COLOR_AREA_SOUND_EFFECT;
		Color actionColor = COLOR_ALLOWED;

		int soundId = event.getSoundId();
		String text =
			"Id: " + event.getSoundId() +
				" - S: " + (event.getSource() != null ? event.getSource().getName() : "<none>") +
				" - L: " + event.getSceneX() + "," + event.getSceneY() +
				" - R: " + event.getRange() +
				" - D: " + event.getDelay();
		String action = ALLOWED;

		// Check if the player is within range to hear the sound
		Player localPlayer = client.getLocalPlayer();
		if (localPlayer != null)
		{
			LocalPoint lp = localPlayer.getLocalLocation();
			if (lp != null)
			{
				int sceneX = lp.getSceneX();
				int sceneY = lp.getSceneY();
				int distance = Math.abs(sceneX - event.getSceneX()) + Math.abs(sceneY - event.getSceneY());
				if (distance > event.getRange())
				{
					textColor = COLOR_SILENT_SOUND_EFFECT;
					text = "SA: " + soundId;
				}
			}
		}

		if (plugin.shouldMute(soundId, SoundEffectType.AREA_SOUND_EFFECT, event.getSource()))
		{
			action = CONSUMED;
			actionColor = COLOR_CONSUMED;
		}

		panelComponent.getChildren().add(LineComponent.builder()
			.left(text)
			.leftColor(textColor)
			.right(action)
			.rightColor(actionColor)
			.build());

		checkMaxLines();
	}

	private void checkMaxLines()
	{
		while (panelComponent.getChildren().size() > MAX_LINES)
		{
			panelComponent.getChildren().remove(1);
		}
	}
}
package com.brooklyn.annoyancemute.debug;

import java.awt.Color;
import javax.annotation.Nullable;
import lombok.Value;
import net.runelite.api.coords.WorldPoint;

@Value
class AmbientSoundTileMarker
{
	private WorldPoint worldPoint;
	@Nullable
	private Color color;
	@Nullable
	private String label;
}

package com.brooklyn.annoyancemute.debug;

import com.google.common.base.Strings;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Stroke;
import java.util.Collection;
import javax.annotation.Nullable;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

public class AnnoyanceMuteOverlay extends Overlay
{
	private static final int MAX_DRAW_DISTANCE = 32;

	private final Client client;
	private final AnnoyanceMutePluginDebug plugin;

	@Inject
	private AnnoyanceMuteOverlay(Client client, AnnoyanceMutePluginDebug plugin)
	{
		this.client = client;
		this.plugin = plugin;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.LOW);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		final Collection<AmbientSoundTileMarker> points = plugin.getPoints();
		if (points.isEmpty())
		{
			return null;
		}

		Stroke stroke = new BasicStroke((float) 2);
		for (final AmbientSoundTileMarker point : points)
		{
			WorldPoint worldPoint = point.getWorldPoint();
			if (worldPoint.getPlane() != client.getPlane())
			{
				continue;
			}

			Color tileColor = point.getColor();
			if (tileColor == null)
			{
				// If this is an old tile which has no color, use marker color
				tileColor = Color.RED;
			}

			drawTile(graphics, worldPoint, tileColor, point.getLabel(), stroke);
		}

		return null;
	}

	private void drawTile(Graphics2D graphics, WorldPoint point, Color color, @Nullable String label, Stroke borderStroke)
	{
		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();

		if (point.distanceTo(playerLocation) >= MAX_DRAW_DISTANCE)
		{
			return;
		}

		LocalPoint lp = LocalPoint.fromWorld(client, point);
		if (lp == null)
		{
			return;
		}

		Polygon poly = Perspective.getCanvasTilePoly(client, lp);
		if (poly != null)
		{
			OverlayUtil.renderPolygon(graphics, poly, color, new Color(0, 0, 0, 50), borderStroke);
		}

		if (!Strings.isNullOrEmpty(label))
		{
			Point canvasTextLocation = Perspective.getCanvasTextLocation(client, graphics, lp, label, 0);
			if (canvasTextLocation != null)
			{
				OverlayUtil.renderTextLocation(graphics, canvasTextLocation, label, color);
			}
		}
	}
}

package com.brooklyn.annoyancemute.debug;

import com.brooklyn.annoyancemute.AnnoyanceMutePlugin;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.AmbientSoundEffect;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AmbientSoundEffectCreated;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Annoyance Mute Debug",
	description = "Annoyance Mute Debug mode",
	tags = {"sound", "volume", "mute", "hub", "brooklyn", "pet", "stomp"}
)
@PluginDependency(AnnoyanceMutePlugin.class)
public class AnnoyanceMutePluginDebug extends Plugin
{
	@Inject
	Client client;

	@Inject
	EventBus eventBus;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AnnoyanceMuteOverlay annoyanceMuteOverlay;

	@Inject
	private AnnoyanceMuteSoundEffectOverlay annoyanceMuteSoundEffectOverlay;


	@Getter(AccessLevel.PACKAGE)
	private final List<AmbientSoundTileMarker> points = new ArrayList<>();

	@Getter(AccessLevel.PACKAGE)
	private final List<AmbientSoundPoint> groundMarkerPoints = new ArrayList<>();

	@Override
	protected void startUp()
	{
		overlayManager.add(annoyanceMuteOverlay);
		overlayManager.add(annoyanceMuteSoundEffectOverlay);
		eventBus.register(annoyanceMuteSoundEffectOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(annoyanceMuteOverlay);
		overlayManager.remove(annoyanceMuteSoundEffectOverlay);
		eventBus.unregister(annoyanceMuteSoundEffectOverlay);
	}

	@Subscribe(priority = -3) // priority -3 to run after AnnoyanceMutePlugin
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		GameState gameState = gameStateChanged.getGameState();
		if (gameState == GameState.LOGGED_IN)
		{
			addSounds();
		}
	}

	@Subscribe(priority = -3) // priority -3 to run after AnnoyanceMutePlugin
	public void onAmbientSoundEffectCreated(AmbientSoundEffectCreated ambientSoundEffectCreated)
	{
		addSounds();
	}

	private void addSounds()
	{
		points.clear();
		groundMarkerPoints.clear();
		for (AmbientSoundEffect ambientSoundEffect : client.getAmbientSoundEffects())
		{
			markTile(ambientSoundEffect);
		}

		Collection<AmbientSoundTileMarker> colorTileMarkers = translateToColorTileMarker(groundMarkerPoints);
		points.addAll(colorTileMarkers);
	}

	private void markTile(AmbientSoundEffect ambientSoundEffect)
	{
		if (ambientSoundEffect == null)
		{
			return;
		}

		int[] b = ambientSoundEffect.getBackgroundSoundEffectIds();

		StringBuilder stringBuilder = new StringBuilder();
		if (b == null)
		{
			stringBuilder.append(",");
		}
		else
		{
			for (int i : b)
			{
				stringBuilder.append("," + i);
			}
		}

		markTile(ambientSoundEffect.getMinPosition(), String.valueOf(ambientSoundEffect.getSoundEffectId()) + "min (" + stringBuilder.toString().substring(1) + ")");
		markTile(ambientSoundEffect.getMaxPosition(), String.valueOf(ambientSoundEffect.getSoundEffectId()) + "max (" + stringBuilder.toString().substring(1) + ")");
	}

	private void markTile(LocalPoint localPoint, String label)
	{
		if (localPoint == null)
		{
			return;
		}

		WorldPoint worldPoint = WorldPoint.fromLocalInstance(client, localPoint);

		int regionId = worldPoint.getRegionID();
		AmbientSoundPoint point = new AmbientSoundPoint(regionId, worldPoint.getRegionX(), worldPoint.getRegionY(), worldPoint.getPlane(), Color.RED, label);

		groundMarkerPoints.add(point);
	}

	/**
	 * Translate a collection of ambient sound points to ambient sound tiles, accounting for instances
	 *
	 * @param points {@link AmbientSoundPoint}s to be converted to {@link AmbientSoundTileMarker}s
	 * @return A collection of ambient sound tiles, converted from the passed ambient sound points, accounting for local
	 * instance points. See {@link WorldPoint#toLocalInstance(Client, WorldPoint)}
	 */
	public Collection<AmbientSoundTileMarker> translateToColorTileMarker(Collection<AmbientSoundPoint> points)
	{
		if (points.isEmpty())
		{
			return Collections.emptyList();
		}

		return points.stream()
			.map(point -> new AmbientSoundTileMarker(
				WorldPoint.fromRegion(point.getRegionId(), point.getRegionX(), point.getRegionY(), point.getZ()),
				point.getColor(), point.getLabel()))
			.flatMap(colorTile ->
			{
				final Collection<WorldPoint> localWorldPoints = WorldPoint.toLocalInstance(client, colorTile.getWorldPoint());
				return localWorldPoints.stream().map(wp -> new AmbientSoundTileMarker(wp, colorTile.getColor(), colorTile.getLabel()));
			})
			.collect(Collectors.toList());
	}
}

package com.brooklyn.annoyancemute.debug;

import java.awt.Color;
import javax.annotation.Nullable;
import lombok.Value;

@Value
class AmbientSoundPoint
{
	private int regionId;
	private int regionX;
	private int regionY;
	private int z;
	@Nullable
	private Color color;
	@Nullable
	private String label;
}

package com.brooklyn.annoyancemute;

import com.google.inject.Guice;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Player;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.events.ConfigChanged;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import org.mockito.junit.MockitoJUnitRunner;

@Slf4j
@RunWith(MockitoJUnitRunner.Silent.class)
public class AnnoyanceMuteTests
{
	@Mock
	@Bind
	private Client client;

	@Mock
	@Bind
	private RuneLiteConfig runeLiteConfig;

	@Mock
	@Bind
	private AnnoyanceMuteConfig config;

	@Inject
	private AnnoyanceMutePlugin plugin;

	@Before
	public void before()
	{
		Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);

		when(config.soundsToMute()).thenReturn("");
		when(config.ambientSoundsToMute()).thenReturn("");
	}

	@Test
	public void muteWoodcutting()
	{
		when(config.muteWoodcutting()).thenReturn(true);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		assertTrue(plugin.shouldMute(SoundEffectID.WOODCUTTING_CHOP, SoundEffectType.EITHER, null));
	}

	@Test
	public void muteDemons()
	{
		when(config.muteDemons()).thenReturn(false);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		assertFalse(plugin.shouldMute(SoundEffectID.DEMON_ATTACK, SoundEffectType.EITHER, null));
	}

	@Test
	public void muteNoonPet()
	{
		when(config.mutePetSounds()).thenReturn(true);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		NPC noonpet = mock(NPC.class);
		when(noonpet.getCombatLevel()).thenReturn(0);

		assertTrue(plugin.shouldMute(SoundEffectID.NOON_FLAP_1, SoundEffectType.EITHER, noonpet));
		assertTrue(plugin.shouldMute(SoundEffectID.NOON_FLAP_2, SoundEffectType.EITHER, noonpet));
	}

	@Test
	public void muteNoon()
	{
		when(config.mutePetSounds()).thenReturn(true);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		NPC noon = mock(NPC.class);
		when(noon.getCombatLevel()).thenReturn(222);

		assertFalse(plugin.shouldMute(SoundEffectID.NOON_FLAP_1, SoundEffectType.EITHER, noon));
		assertFalse(plugin.shouldMute(SoundEffectID.NOON_FLAP_2, SoundEffectType.EITHER, noon));
	}

	@Test
	public void muteTeleportOthers()
	{
		// when true/true like this, we only mute the sound when another player is doing it
		when(config.muteTeleport()).thenReturn(true);
		when(config.muteTeleportOthers()).thenReturn(true);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		Player localPlayer = mock(Player.class);
		when(client.getLocalPlayer()).thenReturn(localPlayer);
		when(localPlayer.getAnimation()).thenReturn(7284);

		assertTrue(plugin.shouldMute(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, localPlayer));
	}

	@Test
	public void muteTeleportOthers2()
	{
		// when true/false like this, we only mute the sound when another player is doing it
		when(config.muteTeleport()).thenReturn(false);
		when(config.muteTeleportOthers()).thenReturn(true);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		Player localPlayer = mock(Player.class);
		when(client.getLocalPlayer()).thenReturn(localPlayer);
		when(localPlayer.getAnimation()).thenReturn(7284);

		assertTrue(plugin.shouldMute(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, localPlayer));
	}

	@Test
	public void muteTeleports()
	{
		// when true/false like this, we will always mute the sounds
		when(config.muteTeleport()).thenReturn(true);
		when(config.muteTeleportOthers()).thenReturn(false);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		Player localPlayer = mock(Player.class);
		when(client.getLocalPlayer()).thenReturn(localPlayer);
		when(localPlayer.getAnimation()).thenReturn(714);

		assertTrue(plugin.shouldMute(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, localPlayer));
	}

	@Test
	public void muteTeleports2()
	{
		// when true/false like this, we will always mute the sounds
		when(config.muteTeleport()).thenReturn(true);
		when(config.muteTeleportOthers()).thenReturn(false);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		Player localPlayer = mock(Player.class);
		when(client.getLocalPlayer()).thenReturn(localPlayer);
		when(localPlayer.getAnimation()).thenReturn(9999); // new teleport animation id, same sound so it is muted because this configuration always mutes VWOOP sound

		assertTrue(plugin.shouldMute(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, localPlayer));
	}

	@Test
	public void teleportMakesNoise()
	{
		// when false/false like this, we won't mute
		when(config.muteTeleport()).thenReturn(false);
		when(config.muteTeleportOthers()).thenReturn(false);

		ConfigChanged configChanged = new ConfigChanged();
		configChanged.setGroup("annoyancemute");
		configChanged.setKey("annoyancemute");
		plugin.onConfigChanged(configChanged);

		Player localPlayer = mock(Player.class);
		when(client.getLocalPlayer()).thenReturn(localPlayer);
		when(localPlayer.getAnimation()).thenReturn(7284);

		assertFalse(plugin.shouldMute(SoundEffectID.TELEPORT_VWOOP, SoundEffectType.EITHER, localPlayer));
	}
}

