package com.geel.hamstorerooms;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HAMStoreRoomsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(StoreRoomsPlugin.class);
		RuneLite.main(args);
	}
}
package com.geel.hamstorerooms;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.ObjectID;

import java.util.HashMap;
import java.util.Map;

@AllArgsConstructor
enum Chest {
    STEEL(ObjectID.SMALL_CHEST, ItemID.STEEL_KEY),
    BRONZE(ObjectID.SMALL_CHEST_15723, ItemID.BRONZE_KEY_8867),
    SILVER(ObjectID.SMALL_CHEST_15724, ItemID.SILVER_KEY),
    IRON(ObjectID.SMALL_CHEST_15726, ItemID.IRON_KEY_8869);

    @Getter
    private final int Object;

    @Getter
    private final int Key;

    private final static Map<Integer, Chest> objToChest = new HashMap<Integer, Chest>() {
        {
            put(Chest.STEEL.Object, Chest.STEEL);
            put(Chest.BRONZE.Object, Chest.BRONZE);
            put(Chest.SILVER.Object, Chest.SILVER);
            put(Chest.IRON.Object, Chest.IRON);
        }
    };

    static Chest fromObjectID(int objectID) {
        return objToChest.get(objectID);
    }
}

package com.geel.hamstorerooms;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
class StoreRoomsOverlay extends Overlay {
    private final Client client;
    private final StoreRoomsPlugin plugin;

    @Inject
    private StoreRoomsOverlay(Client client, StoreRoomsPlugin plugin) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
        this.plugin = plugin;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.isInStoreRooms())
            return null;

        final ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
        if (itemContainer == null) {
            return null;
        }

        plugin.getChests().forEach((tileObject, chest) ->
        {
            final int numKeys = itemContainer.count(chest.getKey());

            if (numKeys == 0)
                return;

            final String chestText = chest.name() + " x" + numKeys;

            highlightObject(graphics, tileObject, Color.GREEN);

            Point textLocation = tileObject.getCanvasTextLocation(graphics, chestText, 130);

            if (textLocation != null) {
                OverlayUtil.renderTextLocation(graphics, textLocation, chestText, Color.WHITE);
            }
        });

        return null;
    }

    private void highlightObject(Graphics2D graphics, TileObject object, Color color) {
        Point mousePosition = client.getMouseCanvasPosition();

        Shape objectClickbox = object.getClickbox();
        if (objectClickbox != null) {
            if (objectClickbox.contains(mousePosition.getX(), mousePosition.getY())) {
                graphics.setColor(color.darker());
            } else {
                graphics.setColor(color);
            }

            graphics.draw(objectClickbox);
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 50));
            graphics.fill(objectClickbox);
        }
    }
}

package com.geel.hamstorerooms;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.*;

@PluginDescriptor(
        name = "H.A.M Store Rooms",
        description = "Highlights chests which you have keys for in the H.A.M Store Rooms",
        tags = {"thieving", "ironman", "ham", "h.a.m", "store", "rooms", "storerooms"}
)
@Slf4j
public class StoreRoomsPlugin extends Plugin {
    private static final int HAM_STOREROOM_REGION_ID = 10321;
    private static final int OPEN_CHEST_ID = ObjectID.SMALL_CHEST_15725;

    @Getter
    private final Map<TileObject, Chest> chests = new HashMap<>();

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private StoreRoomsOverlay overlay;

    @Inject
    private Client client;

    private Chest lastChestDespawned = null;
    private LocalPoint lastChestDespawnPoint = null;

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        resetParams();
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        switch (event.getGameState()) {
            case HOPPING:
            case LOGIN_SCREEN:
            case LOADING:
                resetParams();
                break;
            case LOGGED_IN:
                if (!isInStoreRooms()) {
                    resetParams();
                }
                break;
        }
    }


    private void resetParams() {
        chests.clear();
    }

    public boolean isInStoreRooms() {
        Player local = client.getLocalPlayer();
        if (local == null) {
            return false;
        }

        WorldPoint location = local.getWorldLocation();
        int region = location.getRegionID();
        return location.getPlane() == 0 && region == HAM_STOREROOM_REGION_ID;
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        TileObject newObject = event.getGameObject();

        //If the new object is an open chest, then it SHOULD be replacing a chest we just saw despawn
        if (newObject.getId() == OPEN_CHEST_ID && lastChestDespawned != null) {
            //There's no LocalPoint.equals() function for some silly reason.
            if (lastChestDespawnPoint.distanceTo(newObject.getLocalLocation()) == 0) {
                chests.put(newObject, lastChestDespawned);

                lastChestDespawned = null;
                lastChestDespawnPoint = null;
            }
        }

        Chest foundChest = Chest.fromObjectID(newObject.getId());
        if (foundChest == null)
            return;

        chests.put(newObject, foundChest);
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event) {
        TileObject oldObject = event.getGameObject();
        Chest existingChest = chests.get(oldObject);

        //If there was no Chest associated with this object, we don't care about it.
        if (existingChest == null)
            return;

        chests.remove(oldObject);

        //If an open chest is despawning, we don't care.
        if (oldObject.getId() == OPEN_CHEST_ID)
            return;

        //Store the despawned Chest so we know what to attach to the newly-spawned open chest
        lastChestDespawned = existingChest;

        //Store the despawn point to try to avoid concurrent chest fuckery
        lastChestDespawnPoint = oldObject.getLocalLocation();
    }
}

