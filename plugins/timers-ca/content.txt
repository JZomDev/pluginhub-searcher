package com.TimersCA;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TimersCAPlugin.class);
		RuneLite.main(args);
	}
}
package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Grotesque extends Boss {
    private static final List<Integer> DAWN_IDS = List.of(NpcID.DAWN, NpcID.DAWN_7853, NpcID.DAWN_7884, NpcID.DAWN_7885);
    private static final List<Integer> DUSK_IDS = List.of(NpcID.DUSK, NpcID.DUSK_7855, NpcID.DUSK_7854, NpcID.DUSK_7882,NpcID.DUSK_7883);


    @Inject
    public Grotesque(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Grotesque";
        this.regionIDs = List.of(6727);
    }


    @Subscribe
    private void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == 7852) {
            startTick = client.getTickCount();
            onFight = true;
        }

    }

    @Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getOld().getId() == 7888 && event.getNpc().getId() == 7889) {
            onFight = false;
        }
    }

    @Subscribe
    private void onAnimationChanged(AnimationChanged event) {
        if (event.getActor() instanceof NPC) {
            NPC npc = (NPC) event.getActor();
            if (npc.getId() == 7888) {
                if (npc.getAnimation() == 7803) {
                    onFight = false;
                }
            }
        }
    }

    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getName() != null && event.getNpc().getName().equalsIgnoreCase("dusk")) {
            onFight = false;
        }

    }

}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Leviathan extends Boss {

    @Inject
    public Leviathan(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.regionIDs = List.of(8291);
        this.name = "Leviathan";
    }

    @Subscribe
    void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == 12214) {
            startTick = client.getTickCount();
            onFight = true;
        }
    }

    @Subscribe
    void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == 12214) {
            onFight = false;
        }
    }




}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NpcID;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Amoxliatl extends Boss {

    @Inject
    public Amoxliatl(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Amoxliatl";
        this.regionIDs = List.of(5446);
    }

    @Subscribe
    private void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc().getId() == NpcID.AMOXLIATL) {
            this.startTick = client.getTickCount();
            this.onFight = true;
        }
    }

}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;

import javax.inject.Inject;

public class Nex extends Boss {
    @Inject
    public Nex(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
    }
}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcChanged;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Whisperer extends Boss {

    private static final WorldArea AREA_FIGHT = new WorldArea(2640, 6350, 37, 35, 0);
    private static final WorldArea AREA_FIGHT_SHADOW = new WorldArea(2383, 6349, 35, 36, 0);

    @Inject
    public Whisperer(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.regionIDs = List.of(10595, 9571);
        this.name = "Whisperer";
    }

    @Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getOld().getId() == 12203 && event.getNpc().getId() == 12204) {
            startTick = client.getTickCount();
            onFight = true;
        }
    }

    @Subscribe
    private void onGameTick(GameTick event) {
        if (!this.onFight) {
            return;
        }

        WorldPoint realLocalTile = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation());
        if (realLocalTile != null) {
            if (!realLocalTile.isInArea(AREA_FIGHT) && !realLocalTile.isInArea(AREA_FIGHT_SHADOW)) {
                this.onFight = false;
            }
        }
    }



}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NpcID;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Hespori extends Boss {

    @Inject
    public Hespori(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Hespori";
        this.regionIDs = List.of(5021, 4765);
    }

    @Subscribe
    private void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == NpcID.HESPORI) {
            startTick = client.getTickCount() + 1;
            onFight = true;
        }
    }

    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == NpcID.HESPORI) {
            onFight = false;
        }
    }

}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Vorkath extends Boss {
    private static final List<Integer> VORKATH_IDS = List.of(
            NpcID.VORKATH_8061,
            NpcID.VORKATH,
            NpcID.VORKATH_8058,
            NpcID.VORKATH_11959,
            NpcID.VORKATH_8060,
            NpcID.VORKATH_8059);

    @Inject
    public Vorkath(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        name = "Vorkath";
        regionIDs = List.of(9023);
    }

    NPC vorkath = null;

    @Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getOld().getId() == 8058 && event.getNpc().getId() == 8061) {
            startTick = client.getTickCount();
            onFight = true;
            vorkath = event.getNpc();
        }
    }

    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null || event.getNpc().getName() == null) {
            return;
        }
        if (VORKATH_IDS.stream().anyMatch(x->x == event.getNpc().getId())) {
            onFight = false;
        }
    }

    @Subscribe(priority = -10)
    private void onGameTick(GameTick event) {
        if (vorkath != null && vorkath.isDead()) {
            onFight = false;
        }
    }



}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;

public class Duke extends Boss {

    private static final int SLEEPING_DUKE = 12167;
    private static final int ALIVE_DUKE = 12191;
    protected static final int DEATH_DUKE = 12192;

    @Getter
    @Setter
    int ticks2revive = 0;
    private int dukeStart = -1;
    String prepTime = "";
    String dukeTime = "";
    boolean onPrep = false;
    boolean dead = false;

    @Inject
    public Duke(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Duke";
        this.regionIDs = List.of(12132);
    }



    @Subscribe
    private void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getName() != null && event.getNpc().getName().equalsIgnoreCase("duke sucellus")) {
            startTick = client.getTickCount();
            onFight = true;
            ticks2revive = 0;
        }
    }

    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getName() != null && event.getNpc().getName().equalsIgnoreCase("duke sucellus")) {
            ticks2revive = 0;
            onFight = false;
        }
    }

    @Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getNpc() == null) {
            return;
        }

        switch (event.getNpc().getId()) {
            case ALIVE_DUKE:
                prepTime = timeFighting;
                dukeStart = client.getTickCount();
                onPrep = false;
                break;
            case DEATH_DUKE:
                dead = true;
                break;
            case SLEEPING_DUKE:
                onPrep = true;
                dead = false;
                startTick =  client.getTickCount();
                prepTime = "";
                dukeTime = "";
                onFight = true;
                break;
        }
    }

    @Override
    public List<LayoutableRenderableEntity> getLines() {
        List<LayoutableRenderableEntity> lines = new ArrayList<>();
        lines.add(LineComponent.builder().left("Total").right(this.timeFighting).build());
        switch (config.prepTime()) {
            case ALWAYS:
                lines.add(LineComponent.builder().left("Prep").right(this.prepTime).build());
                break;
            case ON_DEATH:
                if (dead) {
                    lines.add(LineComponent.builder().left("Prep").right(this.prepTime).build());
                }
                break;
        }

        switch (config.dukeTime()) {
            case ALWAYS:
                lines.add(LineComponent.builder().left(this.name).right(this.dukeTime).build());
                break;
            case ON_DEATH:
                if (dead) {
                    lines.add(LineComponent.builder().left(this.name).right(this.dukeTime).build());
                }
                break;
        }
        return lines;
    }

    @Override
    public void updateTime() {
        ticks2revive--;
        if (onFight) {
            if (startTick > 0) {
                int ticks = client.getTickCount() - startTick + 1;
                if (ticks > 0) {
                    timeFighting = formatTime(ticks);
                }
            } else {
                timeFighting = formatTime(0);
            }

            if (onPrep) {
                if (startTick > 0) {
                    int ticks = client.getTickCount() - startTick + 1;
                    prepTime = formatTime(Math.max(ticks, 0));
                }
            } else {
                if (dukeStart > 0) {
                    int ticks = client.getTickCount() - dukeStart + 1;
                    dukeTime = formatTime(Math.max(ticks, 0));
                }
            }
        }

    }
}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NpcID;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Muspah extends Boss {

    private static final List<Integer> MUSPAH_IDS = List.of(
            NpcID.MUSPAH,
            NpcID.PHANTOM_MUSPAH,
            NpcID.PHANTOM_MUSPAH_12078,
            NpcID.PHANTOM_MUSPAH_12079,
            NpcID.PHANTOM_MUSPAH_12080,
            NpcID.PHANTOM_MUSPAH_12082
    );


    @Inject
    public Muspah(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Muspah";
        this.regionIDs = List.of(11330);
    }

    @Subscribe
    private void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc() == null || event.getNpc().getName() == null) {
            return;
        }

        if (event.getNpc().getId()==12077 || event.getNpc().getId()==12078 || event.getNpc().getName().contains("Muspah")) {
            this.startTick = client.getTickCount();
            this.onFight = true;
        }
    }

    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null || event.getNpc().getName() == null) {
            return;
        }

        if (MUSPAH_IDS.contains(event.getNpc().getId())) {
            onFight = false;
        }

    }



}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.NpcDespawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Vardorvis extends Boss {

    @Inject
    public Vardorvis(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Vardorvis";
        this.regionIDs = List.of(4405);
    }


    @Subscribe
    private void onHitsplatApplied(HitsplatApplied event) {
        if (!(event.getActor() instanceof NPC)) {
            return;
        }
        NPC npc = (NPC) event.getActor();

        if (!onFight && npc.getId() == 12223) {
            onFight = true;
            startTick = client.getTickCount();
        }
    }

    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == 12223) {
            onFight = false;
        }
    }

    @Subscribe
    private void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState() != GameState.LOGGED_IN) {
            onFight = false;
        }
    }
}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Slf4j
public class Hueycoatl extends Boss {

    private String lastText = null;
    private int lastPoseAnim = -1;
    private final WorldPoint seerInitialLoc = new WorldPoint(1530, 3284, 0);
    private boolean onTail = false;
    private String tailTime = "";
    private String huecoTime = "";
    private int huecoStart = -1;

    @Inject
    public Hueycoatl(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Hueycoatl";
        this.regionIDs = List.of(5939);
    }

    @Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getOld().getId() == NpcID.THE_HUEYCOATL && event.getNpc().getId() == NpcID.THE_HUEYCOATL_14012) {
            onFight = false;
        }
    }

    @Subscribe
    private void onGameTick(GameTick event) {
        WorldPoint localRealTile = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation());

        if (localRealTile.getRegionID() == 5939) {
            Optional<? extends NPC> seer = client.getTopLevelWorldView().npcs().stream().filter(x -> x.getId() == 14008).findFirst();
            if (seer.isPresent()) {

                /*if (seer.get().getPoseAnimation() != lastPoseAnim) {
                    WorldPoint seerRealTile = WorldPoint.fromLocalInstance(client, seer.get().getLocalLocation());
                    if (seer.get().getPoseAnimation() == 819 && Objects.equals(seerRealTile, seerInitialLoc)) {
                        onFight = true;
                        startTick = client.getTickCount()+2;
                    }

                    lastPoseAnim = seer.get().getPoseAnimation();
                }*/

                if (!Objects.equals(seer.get().getOverheadText(), lastText)) {
                    if (seer.get().getOverheadText() != null) {
                        switch (seer.get().getOverheadText()) {
                            case "Let's convince that beastie to move!":
                                onTail = true;
                                onFight = true;
                                startTick = client.getTickCount()-3;
                                break;
                            case "Nicely done!":
                                /*onTail = false;
                                huecoStart = client.getTickCount();*/
                                break;
                            case "Oof!":
                                onFight = false;
                                onTail = false;
                        }
                    }
                    lastText = seer.get().getOverheadText();
                }
            }
        }
    }

    @Override
    public void updateTime() {
        if (onFight) {
            if (startTick > 0) {
                int ticks = client.getTickCount() - startTick + 1;
                if (ticks > 0) {
                    timeFighting = formatTime(ticks);
                }
            } else {
                timeFighting = formatTime(0);
            }

            if (onTail) {
                if (startTick > 0) {
                    int ticks = client.getTickCount() - startTick + 1;
                    tailTime = formatTime(Math.max(ticks, 0));
                }
            } else {
                if (huecoStart > 0) {
                    int ticks = client.getTickCount() - huecoStart + 1;
                    huecoTime = formatTime(Math.max(ticks, 0));
                }
            }
        }

    }

    @Override
    public List<LayoutableRenderableEntity> getLines() {
        List<LayoutableRenderableEntity> lines = new ArrayList<>();
        lines.add(LineComponent.builder().left("Total").right(this.timeFighting).build());
        if (config.hueycoatlSplit()) {
            lines.add(LineComponent.builder().left("Body").right(this.tailTime).build());
            lines.add(LineComponent.builder().left(this.name).right(this.huecoTime).build());
        }
        return lines;
    }

    @Subscribe
    private void onPostAnimation(PostAnimation event) {
        if (event.getAnimation().getId() == 11700) {
            onTail = false;
            huecoStart = client.getTickCount();
        }
    }



}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import javax.sound.sampled.Line;
import java.util.ArrayList;
import java.util.List;

public class Araxxor extends Boss {

    private int lastRegionId = -1;
    private boolean newInstance = false;
    private int startTickCA = -1;
    private int lastAnimID = -1;

    private String timeCA = "";

    private int kills = -1;
    private boolean counting = false;

    @Inject
    public Araxxor(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Araxxor";
        this.regionIDs = List.of(14489);
    }

    //11482 anim

    @Subscribe
    private void onGameTick(GameTick event) {
        WorldPoint localRealTile = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation());

        if (localRealTile.getRegionID() != lastRegionId) {
            if (localRealTile.getRegionID() == 14489) {
                newInstance = true;
                kills = 0;
            } else {
                lastAnimID = -1;
                counting = false;
                newInstance = false;
            }
            lastRegionId = localRealTile.getRegionID();
        }
    }

    @Subscribe
    private void onAnimationChanged(AnimationChanged event) {
        if (!(event.getActor() instanceof NPC)) {
            return;
        }

        if (((NPC) event.getActor()).getId() == NpcID.ARAXXOR) {
            if (event.getActor().getAnimation() != lastAnimID) {
                if (lastAnimID == 11482) {
                    startTick = client.getTickCount()-1;
                    onFight = true;
                    if (newInstance) {
                        startTickCA = client.getTickCount()-1;
                        newInstance = false;
                        counting = true;
                    }
                }
                lastAnimID = event.getActor().getAnimation();
            }
        }
    }

    @Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getOld().getId() == NpcID.ARAXXOR && event.getNpc().getId() == NpcID.ARAXXOR_13669) {
            this.kills++;
            switch (config.araxxorStop()) {
                case SIX_KILLS:
                    if (kills >= 6) {
                        counting = false;
                    }
                    break;
                case FIVE_KILLS:
                    if (kills >= 5) {
                        counting = false;
                    }
                    break;
            }
        }
    }

    @Override
    public void updateTime() {
        super.updateTime();
        if (counting) {
            this.timeCA = formatTime(Math.max(0,client.getTickCount() - this.startTickCA + 1));
        }

    }

    @Override
    public List<LayoutableRenderableEntity> getLines() {
        List<LayoutableRenderableEntity> lines = new ArrayList<>();
        lines.add(LineComponent.builder().left(this.name).right(timeFighting).build());
        if (config.araxxorStop() != TimersCAConfig.AraxxorStop.DONT_SHOW) {
            lines.add(LineComponent.builder().left("C.A.").right(this.timeCA).build());
            lines.add(LineComponent.builder().left("Kills").right(String.valueOf(this.kills)).build());
        }
        return lines;
    }
}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Zulrah extends Boss {
    private static final List<Integer> ZULRAH_IDS = List.of(
            NpcID.ZULRAH,
            NpcID.ZULRAH_2043,
            NpcID.ZULRAH_2044
    );

    private int lastAnimation = -1;

    @Inject
    public Zulrah(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Zulrah";
        this.regionIDs = List.of(9007, 9008);
    }

    @Subscribe
    private void onAnimationChanged(AnimationChanged event) {
        if (event.getActor() instanceof NPC) {
            NPC npc = (NPC) event.getActor();
            if (ZULRAH_IDS.contains(npc.getId())) {
                if (lastAnimation == 5071 && npc.getAnimation() != lastAnimation) {
                    startTick = client.getTickCount()-1;
                    onFight = true;
                } else if (npc.getAnimation() == 5804) {
                    onFight = false;
                }
                lastAnimation = npc.getAnimation();
            }
            
        }
    }

}

package com.TimersCA.Bosses;

import com.TimersCA.Boss;
import com.TimersCA.TimersCAConfig;
import com.TimersCA.TimersCAPlugin;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.List;

public class Hydra extends Boss {

    private static final int HYDRA_POISON_NPC_ID = 8615;
    private static final int HYDRA_DEATH_NPC_ID = 8622;
    private static final WorldArea AREA_HYDRA_ROOM = new WorldArea(1356, 10257, 22, 22, 0);

    private boolean onHydraRoom = false;

    @Inject
    public Hydra(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        super(client, plugin, config);
        this.name = "Hydra";
        this.regionIDs = List.of(5536);
    }

    @Subscribe
    private void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc() == null) {
            return;
        }

        WorldPoint realLocalTile = TimersCAPlugin.toRealWorld(client.getLocalPlayer().getWorldLocation(), client);

        if (realLocalTile != null && realLocalTile.isInArea(AREA_HYDRA_ROOM)) {
            if (event.getNpc().getId() == HYDRA_POISON_NPC_ID) {
                startTick = client.getTickCount()+1;
                onFight = true;
            }
        }
    }

    /*@Subscribe
    private void onNpcChanged(NpcChanged event) {
        if (event.getNpc() == null) {
            return;
        }

        if (event.getNpc().getId() == HYDRA_DEATH_NPC_ID) {
            onFight = false;
        }

    }*/

    @Subscribe(priority = 10)
    private void onGameTick(GameTick event) {
        WorldPoint realLocalTile = TimersCAPlugin.toRealWorld(client.getLocalPlayer().getWorldLocation(), client);
        if (realLocalTile == null) {
            return;
        }

        if (realLocalTile.isInArea(AREA_HYDRA_ROOM)) {
            if (!onHydraRoom) {
                startTick = client.getTickCount()+1;
                onFight = true;
                onHydraRoom = true;
            }
        } else {
            onHydraRoom = false;
        }

    }



    @Subscribe
    private void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == null || event.getNpc().getName() == null) {
            return;
        }

        if (event.getNpc().getName().equalsIgnoreCase("alchemical hydra")) {
            onFight = false;
        }

    }


}

package com.TimersCA;

import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;

public class TimersCAPanelOverlay extends OverlayPanel {
    private final Client client;
    private final TimersCAConfig config;
    private final TimersCAPlugin plugin;
    private final ConfigManager configManager;

    @Inject
    public TimersCAPanelOverlay(Client client, TimersCAConfig config, TimersCAPlugin plugin, ConfigManager configManager) {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.configManager = configManager;

        setLayer(OverlayLayer.UNDER_WIDGETS);
        setPosition(OverlayPosition.TOP_LEFT);
    }


    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.displayTicksRemaining > 0) {
            if (plugin.getLastBoss() != null) {
                if (configManager.getConfiguration(TimersCAConfig.GROUP_NAME,plugin.getLastBoss().getClass().getSimpleName().toLowerCase()+"Show",Boolean.class)) {
                    panelComponent.getChildren().addAll(plugin.getLastBoss().getLines());
                }

            }
        }

        return super.render(graphics);
    }
}

package com.TimersCA;

import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

public abstract class Boss {

    protected static final Pattern KILL_PATTERN = Pattern.compile("Your (?<bossName>[\\w\\s]+) kill count is: (?<kc>\\d+)\\.");

    protected final Client client;
    protected final TimersCAPlugin plugin;
    protected final TimersCAConfig config;

    @Inject
    public Boss(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    protected boolean show = true;
    protected String name = "";
    protected int startTick = -1;
    protected String timeFighting = "";
    protected boolean onFight = false;
    protected List<Integer> regionIDs = new ArrayList<>();
    protected boolean isInstance = true;


    public void reset(){};


    public boolean display(){
        return this.regionIDs.stream().anyMatch(x -> client.getLocalPlayer().getWorldLocation().getRegionID() == x) && (!isInstance || client.getTopLevelWorldView().isInstance());
    }

    public List<LayoutableRenderableEntity> getLines() {
        List<LayoutableRenderableEntity> lines = new ArrayList<>();
        lines.add(LineComponent.builder().left(this.name).right(timeFighting).build());
        return lines;
    }

    public void updateTime() {
        WorldPoint localRealTile = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation());
        if (this.onFight && this.regionIDs.contains(localRealTile.getRegionID())) {
            this.timeFighting = formatTime(Math.max(0, client.getTickCount() - this.startTick + 1));
        }
    }

    public String formatTime(int ticks) {
        int millis = ticks * 600;
        return String.format("%2d:%02d:%s",
                TimeUnit.MILLISECONDS.toMinutes(millis),
                TimeUnit.MILLISECONDS.toSeconds(millis) % 60,
                String.valueOf(millis%1000).charAt(0));
    }

}

package com.TimersCA;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

public class TimersCAOverlay extends Overlay {

    private final Client client;
    private final TimersCAPlugin plugin;
    private final TimersCAConfig config;

    @Inject
    public TimersCAOverlay(Client client, TimersCAPlugin plugin, TimersCAConfig config) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPosition(OverlayPosition.DYNAMIC);
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (config.showDukeTicksToRespawn() && plugin.getDuke().getTicks2revive() > 0 && plugin.getDuke().regionIDs.contains(WorldPoint.fromLocalInstance(client,client.getLocalPlayer().getLocalLocation()).getRegionID())) {
            graphics.setFont(new Font("Arial",Font.BOLD,16));
            Point pt = Perspective.getCanvasTextLocation(client, graphics, client.getLocalPlayer().getLocalLocation(), String.valueOf(plugin.getDuke().getTicks2revive()), 0);
            if (pt == null) {
                return null;
            }

            OverlayUtil.renderTextLocation(graphics, pt, String.valueOf(plugin.getDuke().getTicks2revive()), Color.ORANGE);
        }
        return null;
    }
}

package com.TimersCA;

import com.TimersCA.Bosses.Araxxor;
import lombok.AllArgsConstructor;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.ui.overlay.infobox.Timer;

@ConfigGroup("timersCaKat")
public interface TimersCAConfig extends Config {

    String GROUP_NAME = "timersCaKat";

    @ConfigSection(
            name = "Duke Sucellus",
            description = "",
            position = 3
    )
    String dukeSection = "Duke Sucellus";

    @ConfigItem(
            name = "Ticks to respawn",
            description = "",
            keyName = "showDukeTicksToRespawn",
            section = dukeSection
    )
    default boolean showDukeTicksToRespawn() {
        return true;
    }

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "dukeShow",
            section = dukeSection
    )
    default boolean dukeShow() {
        return true;
    }

    @ConfigItem(
            name = "Duke Time",
            description = "",
            keyName = "dukeTime",
            section = dukeSection
    )
    default DisplayTimer dukeTime() {
        return DisplayTimer.ALWAYS;
    }

    @ConfigItem(
            name = "Prep Time",
            description = "",
            keyName = "prepTime",
            section = dukeSection
    )
    default DisplayTimer prepTime() {
        return DisplayTimer.ALWAYS;
    }


    enum DisplayTimer {
        ALWAYS,
        ON_DEATH,
        NEVER
    }

    //------------------------------------------------------------

    @ConfigSection(
            name = "Leviathan",
            description = "",
            position = 4,
            closedByDefault = true
    )
    String leviathanSection = "Leviathan";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "leviathanShow",
            section = leviathanSection
    )
    default boolean leviathanShow() {
        return true;
    }
    //------------------------------------

    @ConfigSection(
            name = "Vardorvis",
            description = "",
            position = 7,
            closedByDefault = true
    )
    String vardorvisSection = "Vardorvis";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "vardorvisShow",
            section = vardorvisSection
    )
    default boolean vardorvisShow() {
        return true;
    }

    //-------------------------------------------------------------
    @ConfigSection(
            name = "Whisperer",
            description = "",
            position = 5,
            closedByDefault = true
    )
    String whispererSection = "Whisperer";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "whispererShow",
            section = whispererSection
    )
    default boolean whispererShow() {
        return true;
    }

    //-------------------------------------------------------------
    @ConfigSection(
            name = "Muspah",
            description = "",
            position = 7,
            closedByDefault = true
    )
    String muspahSection = "Muspah";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "muspahShow",
            section = muspahSection
    )
    default boolean muspahShow() {
        return true;
    }

    //-------------------------------------------------------------
    /*@ConfigSection(
            name = "Nex",
            description = "",
            position = 7,
            closedByDefault = true
    )
    String nexSection = "Nex";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "nexShow",
            section = nexSection
    )default boolean nexShow(){
        return true;}*/

    //------------------------------------

    @ConfigSection(
            name = "Zulrah",
            description = "",
            position = 7,
            closedByDefault = true
    )
    String zulrahSection = "Zulrah";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "zulrahShow",
            section = zulrahSection
    )
    default boolean zulrahShow() {
        return true;
    }

    //------------------------------------

    @ConfigSection(
            name = "Vorkath",
            description = "",
            position = 7,
            closedByDefault = true
    )
    String vorkathSection = "Vorkath";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "vorkathShow",
            section = vorkathSection
    )
    default boolean vorkathShow() {
        return true;
    }

    //------------------------------------------------------------

    @ConfigSection(
            name = "Hespori",
            description = "",
            position = 4,
            closedByDefault = true
    )
    String hesporiSection = "Hespori";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "hesporiShow",
            section = hesporiSection
    )
    default boolean hesporiShow() {
        return true;
    }


    //-------------------------------------------------------------

    @ConfigSection(
            name = "Grotesque",
            description = "",
            position = 7,
            closedByDefault = true
    )
    String grotesqueSection = "Grotesque";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "grotesqueShow",
            section = grotesqueSection
    )
    default boolean grotesqueShow() {
        return true;
    }

    //----------------------------------------------------------------

    @ConfigSection(
            name = "Hydra",
            description = "",
            position = 8,
            closedByDefault = true
    )
    String hydraSection = "Hydra";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "hydraShow",
            section = hydraSection
    )
    default boolean hydraShow() {
        return true;
    }

    //----------------------------------------------------------------

    @ConfigSection(
            name = "Hueycoatl",
            description = "",
            position = 9,
            closedByDefault = true
    )
    String hueycoatlSection = "Hueycoatl";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "hueycoatlShow",
            section = hueycoatlSection
    )
    default boolean hueycoatlShow() {
        return true;
    }

    @ConfigItem(
            name = "Show split",
            description = "",
            keyName = "hueycoatl",
            section = hueycoatlSection
    )
    default boolean hueycoatlSplit() {
        return true;
    }

    //----------------------------------------------------------------

    @ConfigSection(
            name = "Amoxliatl",
            description = "",
            position = 9,
            closedByDefault = true
    )
    String amoxliatlSection = "Amoxliatl";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "amoxliatlShow",
            section = amoxliatlSection
    )
    default boolean amoxliatlShow() {
        return true;
    }

    //----------------------------------------------------------------

    @ConfigSection(
            name = "Araxxor",
            description = "",
            position = 9,
            closedByDefault = true
    )
    String araxxorSection = "Araxxor";

    @ConfigItem(
            name = "Show",
            description = "",
            keyName = "araxxorShow",
            section = araxxorSection
    )
    default boolean araxxorShow() {
        return true;
    }

    @ConfigItem(
            name = "Stop at",
            description = "",
            keyName = "araxxorStop",
            section = araxxorSection
    )
    default AraxxorStop araxxorStop() {
        return AraxxorStop.SIX_KILLS;
    }

    @AllArgsConstructor
    enum AraxxorStop{
        SIX_KILLS("6 kills"),
        FIVE_KILLS("5 kills"),
        DONT_SHOW("Don't show"),
        NEVER("Never");

        private final String des;

        @Override
        public String toString() {
            return des;
        }
    }


    @AllArgsConstructor
    enum TimerType{
        TIMER("Timer"),
        CHRONOMETER("Chronometer");

        private final String des;

        @Override
        public String toString() {
            return this.des;
        }
    }
}

package com.TimersCA;

import com.TimersCA.Bosses.*;
import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
		name = "Timers CA",
		description = "Shows the current time on some bosses listed in Combat Achievements",
		tags = {"pajau", "nex", "muspah", "zulrah", "vardorvis", "leviathan", "hespori", "vorkath", "whisperer", "duke", "timers", "ca", "combat achievement"}
)
public class TimersCAPlugin extends Plugin
{

	protected static final Pattern KILL_PATTERN = Pattern.compile("Your (?<bossName>[\\w\\s]+) kill count is: (?<kc>[,\\d]+)\\.");

	@Inject
	private Client client;

	@Inject
	private Nex nex;

	@Inject
	private Leviathan leviathan;

	@Inject
	private Muspah muspah;

	@Inject
	private Whisperer whisperer;

	@Inject
	@Getter
	private Duke duke;

	@Inject
	private Vardorvis vardorvis;

	@Inject
	private Zulrah zulrah;

	@Inject
	private Vorkath vorkath;

	@Inject
	private Hespori hespori;

	@Inject
	private Hydra hydra;

	@Inject
	private Grotesque grotesque;

	@Inject
	private Araxxor araxxor;

	@Inject
	private Hueycoatl hueycoatl;

	@Inject
	private Amoxliatl amoxliatl;

	@Inject
	private EventBus eventBus;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TimersCAPanelOverlay timersCAPanelOverlay;

	@Inject
	private TimersCAOverlay overlay;

	@Inject
	private TimersCAConfig config;

	private final Set<Boss> bosses = new HashSet<>();
	protected int displayTicksRemaining = 0;
	private static final HashMap<Integer, Boss> bossMap = new HashMap<>();
	@Getter
	private Boss actualBoss = null;
	@Getter
	private Boss lastBoss = null;


	@Provides
	TimersCAConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(TimersCAConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		bosses.clear();
		bosses.add(nex);
		bosses.add(leviathan);
		bosses.add(muspah);
		bosses.add(whisperer);
		bosses.add(duke);
		bosses.add(zulrah);
		bosses.add(vorkath);
		bosses.add(vardorvis);
		bosses.add(hespori);
		bosses.add(grotesque);
		bosses.add(hydra);
		bosses.add(araxxor);
		bosses.add(hueycoatl);
		bosses.add(amoxliatl);

		this.overlayManager.add(overlay);
		this.overlayManager.add(timersCAPanelOverlay);

		bossMap.clear();

		for (Boss boss : bosses) {
			eventBus.register(boss);
			for (Integer regionID : boss.regionIDs) {
				bossMap.put(regionID, boss);
			}
		}
	}

	@Override
	protected void shutDown() throws Exception {
		this.overlayManager.remove(overlay);
		this.overlayManager.remove(timersCAPanelOverlay);

		for (Boss boss : bosses) {
			eventBus.unregister(boss);
		}
	}

	@Subscribe
	private void onGameTick(GameTick event) {
		displayTicksRemaining--;
		WorldPoint localRealTile = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation());
		actualBoss = bossMap.get(localRealTile.getRegionID());
		if (actualBoss == null || actualBoss != lastBoss) {
			if (lastBoss != null) {
				lastBoss.onFight = false;
				lastBoss.reset();
			}
		}
		if (actualBoss == null) {
			return;
		}
		lastBoss = actualBoss;
		displayTicksRemaining = 500;
		actualBoss.updateTime();
	}

	@Subscribe
	private void onChatMessage(ChatMessage event) {
		Matcher matcher = KILL_PATTERN.matcher(Text.removeTags(event.getMessage()));
		if (matcher.matches()) {
			if (lastBoss != null) {
				lastBoss.onFight = false;
			}
			if (lastBoss instanceof Duke) {
				duke.setTicks2revive(20);
			}
		}
	}

	@Subscribe
	private void onGameStateChanged(GameStateChanged event) {
		if (event.getGameState().getState() == GameState.LOGIN_SCREEN.getState()) {
			for (Boss boss : bosses) {
				boss.onFight = false;
			}
		}
	}

	public static WorldPoint toRealWorld(WorldPoint worldPoint,Client client) {
		LocalPoint lp = LocalPoint.fromWorld(client.getTopLevelWorldView(), worldPoint);
		if (lp == null) {
			return null;
		}
		return WorldPoint.fromLocalInstance(client, lp);
	}


}

