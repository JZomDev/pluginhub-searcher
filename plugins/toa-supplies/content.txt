package com.toasupplies;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToaSuppliesTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToaSuppliesPlugin.class);
		RuneLite.main(args);
	}
}
package com.toasupplies;

import com.google.common.collect.ImmutableMap;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.client.plugins.itemstats.potions.Ambrosia;
import net.runelite.client.plugins.itemstats.potions.AncientBrew;

import javax.annotation.Nullable;
import java.util.Map;

import static net.runelite.api.ItemID.*;

@AllArgsConstructor
@Getter
public enum RaidsPotions
{
    NECT1(NECTAR_4, NECTAR_1, 1),
    NECT2(NECTAR_4, NECTAR_2, 2),
    NECT3(NECTAR_4, NECTAR_3, 3),
    NECT4(NECTAR_4, NECTAR_4, 4),
    TEARS1(TEARS_OF_ELIDINIS_4,TEARS_OF_ELIDINIS_1,1),
    TEARS2(TEARS_OF_ELIDINIS_4,TEARS_OF_ELIDINIS_2,2),
    TEARS3(TEARS_OF_ELIDINIS_4,TEARS_OF_ELIDINIS_3,3),
    TEARS4(TEARS_OF_ELIDINIS_4,TEARS_OF_ELIDINIS_4,4),
    AMBRO1(AMBROSIA_2,AMBROSIA_1,1),
    AMBRO2(AMBROSIA_2,AMBROSIA_2,2),
    ;

    private final int potionType;
    private final int id;
    private final int charges;

    private static final Map<Integer, RaidsPotions> ID_MAP;

    static
    {
        ImmutableMap.Builder<Integer, RaidsPotions> builder = new ImmutableMap.Builder<>();

        for (RaidsPotions itemCharge : values())
        {
            builder.put(itemCharge.getId(), itemCharge);
        }

        ID_MAP = builder.build();
    }

    @Nullable
    static RaidsPotions findItem(int itemId)
    {
        return ID_MAP.get(itemId);
    }
}

package com.toasupplies;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Toa Supplies")
public interface ToaSuppliesConfig extends Config
{
	@ConfigItem(
		keyName = "showSips",
		name = "show sips",
		description = "displays the potion count in amount of sips"
	)
	default boolean showSips()
	{
		return true;
	}
}

package com.toasupplies;

import com.google.inject.Provides;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.*;

@PluginDescriptor(
	name = "Toa Supplies"
)
public class ToaSuppliesPlugin extends Plugin
{
	private final int SUPPLY_ID = 810;
	private boolean checkSnapshot = false;
	private int waitTicks = 1;
	private final Map<Integer, Integer> itemHash = new HashMap<>();
	private final Map<Integer, Integer> inventorySnapshot = new HashMap<>();


	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ToaSuppliesOverlay overlay;

	@Inject
	private Client client;


	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded)
	{
		if (widgetLoaded.getGroupId() != 778)
		{
			return;
		}
		updateValue(itemHash,SUPPLY_ID);
	}
	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() != SUPPLY_ID)
		{
			return;
		}
		updateValue(itemHash,SUPPLY_ID);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (event.getWidget() != null)
		{
			if (event.getWidget().getItemId() == ItemID.SUPPLIES
					&& (event.getMenuOption().equals("Withdraw 1") || event.getMenuOption().equals("Withdraw All") || event.getMenuOption().equals("Resupply")))

			{
				if (updateValue(inventorySnapshot,InventoryID.INVENTORY.getId()))
				{
					checkSnapshot = true;
				}
			}
			else if (event.getMenuOption().equals("Use")
				&& event.getMenuAction() == MenuAction.WIDGET_TARGET_ON_WIDGET
				&& client.getSelectedWidget() != null)
			{
				int firstSelectedItemID = client.getSelectedWidget().getItemId();
				int secondSelectedItemID = event.getWidget().getItemId();

				RaidsPotions raidsPotion = RaidsPotions.findItem(firstSelectedItemID);

				if (raidsPotion != null
						&& secondSelectedItemID == ItemID.SUPPLIES)
				{
					itemHash.merge(raidsPotion.getPotionType(), raidsPotion.getCharges(), Integer::sum);
				}
			}
		}
	}

	@Subscribe
	private void onGameTick(GameTick event){
		if (!checkSnapshot)
		{
			return;
		}

		if (waitTicks > 0)
		{
			waitTicks--;
			return;
		}

		checkSnapshot = false;
		waitTicks = 1;

		Set<Integer> prevInventoryItemIdsSet = inventorySnapshot.keySet();

		Map<Integer,Integer> currentInventoryHash = new LinkedHashMap<>();
		updateValue(currentInventoryHash,InventoryID.INVENTORY.getId());
		Set<Integer> currentInventoryItemIdsSet = currentInventoryHash.keySet();

		Set<Integer> allPossibleItemIds = new HashSet<>();
		allPossibleItemIds.addAll(prevInventoryItemIdsSet);
		allPossibleItemIds.addAll(currentInventoryItemIdsSet);


		for(Integer itemId:allPossibleItemIds)
		{
			int prevAmount = inventorySnapshot.get(itemId) != null ? inventorySnapshot.get(itemId) : 0;
			int currentAmount = currentInventoryHash.get(itemId) != null ? currentInventoryHash.get(itemId) : 0;

			int changeAmount = prevAmount - currentAmount;

			itemHash.merge(itemId, changeAmount, Integer::sum);
		}
	}

	private Boolean updateValue(Map<Integer,Integer> hashMap, int inventoryId)
	{
		ItemContainer itemContainer = client.getItemContainer(inventoryId);

		if (itemContainer == null)
		{
			return false;
		}

		hashMap.clear();

		Arrays.stream(itemContainer.getItems())
				.filter(item -> RaidsPotions.findItem(item.getId()) != null).forEach(i -> hashMap
						.merge(RaidsPotions.findItem(i.getId()).getPotionType(), RaidsPotions.findItem(i.getId()).getCharges(), Integer::sum));
		return true;
	}

	public int getAmount(int id)
	{
		return itemHash.get(id) != null ? itemHash.get(id) : 0;
	}
	@Provides

	ToaSuppliesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ToaSuppliesConfig.class);
	}
}

package com.toasupplies;


import net.runelite.api.*;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import javax.inject.Inject;
import java.awt.*;
import java.math.BigDecimal;


class ToaSuppliesOverlay extends WidgetItemOverlay
{
    private final ToaSuppliesConfig config;
    private final ToaSuppliesPlugin plugin;

    private static final int[] potions = {27315, 27327, 27347};
    private static final int[] potionMax = {4,4,2};
    private static final Color[] potionColors = {Color.yellow,Color.magenta,Color.white};

    @Inject
    ToaSuppliesOverlay(ToaSuppliesConfig config, ToaSuppliesPlugin plugin)
    {
        this.config = config;
        this.plugin = plugin;
        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
        if (itemId != ItemID.SUPPLIES)
        {
            return;
        }

        for (int i = 0; i < potions.length; i++)
        {
            BigDecimal amount = BigDecimal.valueOf(plugin.getAmount(potions[i]));

            if (config.showSips())
            {
                String text = amount + "";
                drawString(graphics, text, widgetItem,potionColors[i], i);
            }
            else
            {
                String text = amount.divide(BigDecimal.valueOf(potionMax[i])) + "";
                drawString(graphics, text, widgetItem,potionColors[i], i);

            }
        }
    }

    private void drawString(Graphics2D graphics, String text,WidgetItem widgetItem,Color color,int i)
    {
        graphics.setColor(color);
        graphics.drawString(text, widgetItem.getCanvasBounds().x, widgetItem.getCanvasBounds().y + 10 + (i*10));
    }
}

