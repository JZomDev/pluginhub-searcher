package com.TrayIndicators;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TrayIndicatorsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TrayIndicatorsPlugin.class);
		RuneLite.main(args);
	}
}
package com.TrayIndicators;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.Varbits;

import java.awt.Color;

@Getter
@AllArgsConstructor
public enum IconType
{
    Health(
            TrayIndicatorsConfig::healthColor,
            TrayIndicatorsConfig::healthTxtColor,
            client -> Integer.toString(client.getBoostedSkillLevel(Skill.HITPOINTS)),
            TrayIndicatorsConfig::health
    ),
    Prayer(
            TrayIndicatorsConfig::prayerColor,
            TrayIndicatorsConfig::prayerTxtColor,
            client -> Integer.toString(client.getBoostedSkillLevel(Skill.PRAYER)),
            TrayIndicatorsConfig::prayer
    ),
    Absorption(
            TrayIndicatorsConfig::absorptionColor,
            TrayIndicatorsConfig::absorptionTxtColor,
            client -> Integer.toString(client.getVarbitValue(Varbits.NMZ_ABSORPTION)),
            TrayIndicatorsConfig::absorption
    );

    private final ColorSupplier bgColorSupplier;
    private final ColorSupplier txtColorSupplier;
    private final TextSupplier textSupplier;
    private final VisibilitySupplier visibilitySupplier;

    public Color getBgColor(TrayIndicatorsConfig config)
    {
        return bgColorSupplier.getColor(config);
    }

    public Color getTxtColor(TrayIndicatorsConfig config)
    {
        return txtColorSupplier.getColor(config);
    }

    public String getTxt(Client client)
    {
        return textSupplier.getText(client);
    }

    public Boolean isActive(TrayIndicatorsConfig config)
    {
        return visibilitySupplier.isActive(config);
    }

    private interface ColorSupplier
    {
        Color getColor(TrayIndicatorsConfig config);
    }

    private interface TextSupplier
    {
        String getText(Client client);
    }

    private interface VisibilitySupplier
    {
        Boolean isActive(TrayIndicatorsConfig config);
    }
}
package com.TrayIndicators;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.util.*;

@Slf4j
@PluginDescriptor(
		name = "Tray Indicators",
		description = "Displays your hitpoints, prayer or absorption in the system tray.",
		tags = {"notifications"}
)
public class TrayIndicatorsPlugin extends Plugin
{
	private static final int[] NMZ_MAP_REGION = {9033};

	private final Map<IconType, Icon> trayIcons = new HashMap<>();

	@Inject
	private Client client;

	@Inject
	private TrayIndicatorsConfig config;

	@Provides
	TrayIndicatorsConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TrayIndicatorsConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		if (trayIcons.isEmpty())
			for(IconType type : IconType.values())
				trayIcons.put(type, new Icon());
	}

	@Override
	protected void shutDown() throws Exception
	{
		trayIcons.forEach((iconType, icon) -> icon.removeIcon());
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		updateAllTrayIcons();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		updateAllTrayIcons();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("Tray Indicators"))
			return;

		updateAllTrayIcons();
	}

	public void updateAllTrayIcons()
	{
		trayIcons.forEach((iconType, icon) -> {
			if (shouldRemoveIcon(iconType)) {
				icon.removeIcon();
				return;
			}

			icon.updateIcon(iconType.getTxt(client), iconType.getBgColor(config), iconType.getTxtColor(config));
		});
	}

	private boolean shouldRemoveIcon(IconType iconType)
	{
		return client.getGameState() != GameState.LOGGED_IN ||
				!iconType.isActive(config) ||
				(iconType == IconType.Absorption && !isInNightmareZone());
	}

	private boolean isInNightmareZone()
	{
		return Arrays.equals(client.getMapRegions(), NMZ_MAP_REGION);
	}
}
package com.TrayIndicators;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.Color;

@ConfigGroup("Tray Indicators")
public interface TrayIndicatorsConfig extends Config {

	//region Health Options
	@ConfigSection(
			name = "Hitpoints",
			description = "",
			position = 0
	)
	String healthSection = "Hitpoints";

	@ConfigItem(
			keyName = "health",
			name = "Enable Hitpoints",
			description = "",
			section = healthSection,
			position = 0
	)
	default boolean health()
	{
		return true;
	}

	@ConfigItem(
			keyName = "healthColor",
			name = "Background Color",
			description = "",
			section = healthSection,
			position = 1
	)
	default Color healthColor() { return Color.decode("#ff0000"); }

	@ConfigItem(
			keyName = "healthTxtColor",
			name = "Text Color",
			description = "",
			section = healthSection,
			position = 2
	)
	default Color healthTxtColor() { return Color.decode("#ffffff"); }
	//endregion

	//region Prayer Options
	@ConfigSection(
			name = "Prayer",
			description = "",
			position = 1
	)
	String prayerSection = "Prayer";

	@ConfigItem(
			keyName = "prayer",
			name = "Enable Prayer",
			description = "",
			section = prayerSection,
			position = 0
	)
	default boolean prayer()
	{
		return true;
	}

	@ConfigItem(
			keyName = "prayerColor",
			name = "Background Color",
			description = "",
			section = prayerSection,
			position = 1
	)
	default Color prayerColor()
	{
		return Color.decode("#00f3ff");
	}

	@ConfigItem(
			keyName = "prayerTxtColor",
			name = "Text Color",
			description = "",
			section = prayerSection,
			position = 2
	)
	default Color prayerTxtColor()
	{
		return Color.decode("#000000");
	}
	//endregion

	//region Absorption Options
	@ConfigSection(
			name = "Absorption",
			description = "",
			position = 2
	)
	String absorptionSection = "Absorption";

	@ConfigItem(
			keyName = "absorption",
			name = "Enable Absorption",
			description = "",
			section = absorptionSection,
			position = 0
	)
	default boolean absorption()
	{
		return true;
	}

	@ConfigItem(
			keyName = "absorptionColor",
			name = "Background Color",
			description = "",
			section = absorptionSection,
			position = 1
	)

	default Color absorptionColor()
	{
		return Color.decode("#ffffff");
	}

	@ConfigItem(
			keyName = "absorptionTxtColor",
			name = "Text Color",
			description = "",
			section = absorptionSection,
			position = 2
	)

	default Color absorptionTxtColor()
	{
		return Color.decode("#000000");
	}
	//endregion
}
package com.TrayIndicators;

import lombok.extern.slf4j.Slf4j;

import java.awt.*;
import java.awt.image.BufferedImage;

@Slf4j
public class Icon
{
    private TrayIcon trayIcon;

    public Icon()
    {
        if (!SystemTray.isSupported())
            log.error("System tray is not supported");
    }

    private void createIcon(String text, Color bgColor, Color txtColor)
    {
        if (trayIcon != null)
            removeIcon();

        trayIcon = new TrayIcon(createImage(text, bgColor, txtColor));
        trayIcon.setImageAutoSize(true);

        try
        {
            SystemTray.getSystemTray().add(trayIcon);
        }
        catch (AWTException ex)
        {
            log.error("Unable to add system tray icon.", ex);
        }
    }

    public void updateIcon(String text, Color bgColor, Color txtColor)
    {
        if (trayIcon == null)
        {
            createIcon(text, bgColor, txtColor);
            return;
        }

        trayIcon.getImage().flush();
        trayIcon.setImage(createImage(text, bgColor, txtColor));
    }

    public void removeIcon()
    {
        if (trayIcon == null)
        {
            return;
        }

        SystemTray.getSystemTray().remove(trayIcon);
        trayIcon = null;
    }

    private BufferedImage createImage(String text, Color bgColor, Color txtColor)
    {
        int size = 16;

        BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_4BYTE_ABGR);
        Graphics2D graphics = image.createGraphics();

        // Draw background
        graphics.setColor(bgColor);
        graphics.fillRect (0, 0, size, size);

        // Draw text
        graphics.setColor(txtColor);

        int fontSize = (text.length() >= 4) ? 8 : (text.length() == 3) ? 9 : 12;
        graphics.setFont(new Font(graphics.getFont().getName(), Font.PLAIN, fontSize));

        FontMetrics metrics = graphics.getFontMetrics();
        int x = (size - metrics.stringWidth(text)) / 2;
        int y = ((size - metrics.getHeight()) / 2) + metrics.getAscent();
        graphics.drawString(text, x, y);

        graphics.dispose();

        return image;
    }
}

