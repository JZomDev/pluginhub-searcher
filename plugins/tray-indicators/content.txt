/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators;

import java.awt.Color;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("Tray Indicators")
public interface TrayIndicatorsConfig extends Config
{

	//region Health Options
	@ConfigSection(
		name = "Hitpoints",
		description = "",
		position = 0
	)
	String healthSection = "Hitpoints";

	@ConfigItem(
		keyName = "health",
		name = "Enable Hitpoints",
		description = "Shows the amount of hitpoints left.",
		section = healthSection,
		position = 0
	)
	default boolean health()
	{
		return true;
	}

	@ConfigItem(
		keyName = "healthColor",
		name = "Background Color",
		description = "",
		section = healthSection,
		position = 1
	)
	default Color healthColor()
	{
		return Color.decode("#ff0000");
	}

	@ConfigItem(
		keyName = "healthTxtColor",
		name = "Text Color",
		description = "",
		section = healthSection,
		position = 2
	)
	default Color healthTxtColor()
	{
		return Color.decode("#ffffff");
	}
	//endregion

	//region Prayer Options
	@ConfigSection(
		name = "Prayer",
		description = "",
		position = 1
	)
	String prayerSection = "Prayer";

	@ConfigItem(
		keyName = "prayer",
		name = "Enable Prayer",
		description = "Shows the amount of prayer points left.",
		section = prayerSection,
		position = 0
	)
	default boolean prayer()
	{
		return true;
	}

	@ConfigItem(
		keyName = "prayerColor",
		name = "Background Color",
		description = "",
		section = prayerSection,
		position = 1
	)
	default Color prayerColor()
	{
		return Color.decode("#00f3ff");
	}

	@ConfigItem(
		keyName = "prayerTxtColor",
		name = "Text Color",
		description = "",
		section = prayerSection,
		position = 2
	)
	default Color prayerTxtColor()
	{
		return Color.decode("#000000");
	}
	//endregion

	//region Absorption Options
	@ConfigSection(
		name = "Absorption",
		description = "",
		position = 2
	)
	String absorptionSection = "Absorption";

	@ConfigItem(
		keyName = "absorption",
		name = "Enable Absorption",
		description = "Shows the amount of absorption points left while in Nightmare Zone.",
		section = absorptionSection,
		position = 0
	)
	default boolean absorption()
	{
		return true;
	}

	@ConfigItem(
		keyName = "absorptionColor",
		name = "Background Color",
		description = "",
		section = absorptionSection,
		position = 1
	)

	default Color absorptionColor()
	{
		return Color.decode("#ffffff");
	}

	@ConfigItem(
		keyName = "absorptionTxtColor",
		name = "Text Color",
		description = "",
		section = absorptionSection,
		position = 2
	)

	default Color absorptionTxtColor()
	{
		return Color.decode("#000000");
	}
	//endregion

	//region Cannonballs Options
	@ConfigSection(
		name = "Cannon",
		description = "",
		position = 3
	)
	String cannonSection = "Cannon";

	@ConfigItem(
		keyName = "cannon",
		name = "Enable Cannon",
		description = "Shows the amount of cannonballs left in your cannon.",
		section = cannonSection,
		position = 0
	)
	default boolean cannon()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cannonColor",
		name = "Background Color",
		description = "",
		section = cannonSection,
		position = 1
	)

	default Color cannonColor()
	{
		return Color.decode("#797979");
	}

	@ConfigItem(
		keyName = "cannonTxtColor",
		name = "Text Color",
		description = "",
		section = cannonSection,
		position = 2
	)

	default Color cannonTxtColor()
	{
		return Color.decode("#ffffff");
	}

	@ConfigItem(
		keyName = "cannonTxtDynamic",
		name = "Dynamic Text Color",
		description = "Changes the text color based on the amount of cannonballs left.",
		section = cannonSection,
		position = 3
	)

	default boolean cannonTxtDynamic()
	{
		return false;
	}
	//endregion

	//region Inventory Options
	@ConfigSection(
		name = "Inventory",
		description = "",
		position = 4
	)

	String inventorySection = "Inventory";

	@ConfigItem(
		keyName = "inventory",
		name = "Enable Inventory Count",
		description = "Shows the amount of filled inventory slots.",
		section = inventorySection,
		position = 0
	)

	default boolean inventory()
	{
		return true;
	}

	@ConfigItem(
		keyName = "inventoryColor",
		name = "Background Color",
		description = "",
		section = inventorySection,
		position = 1
	)

	default Color inventoryColor()
	{
		return Color.decode("#845020");
	}

	@ConfigItem(
		keyName = "inventoryTxtColor",
		name = "Text Color",
		description = "",
		section = inventorySection,
		position = 2
	)

	default Color inventoryTxtColor()
	{
		return Color.decode("#ffffff");
	}

	@ConfigItem(
		keyName = "inventoryThreshold",
		name = "Count Threshold",
		description = "The amount of filled inventory slots at which the text color changes.",
		section = inventorySection,
		position = 3
	)

	default int inventoryThreshold()
	{
		return 20;
	}

	@ConfigItem(
		keyName = "inventoryThresholdTxtColor",
		name = "Threshold Text Color",
		description = "The amount of filled inventory slots at which the text color changes.",
		section = inventorySection,
		position = 4
	)

	default Color inventoryTxtThresholdColor()
	{
		return Color.decode("#ff6a00");
	}

	@ConfigItem(
		keyName = "inventoryFullTxtColor",
		name = "Inventory Full Text Color",
		description = "The color of the text when the inventory is full.",
		section = inventorySection,
		position = 5
	)

	default Color inventoryTxtFullColor()
	{
		return Color.decode("#00ff26");
	}

	@ConfigItem(
		keyName = "inventoryEmptyTxtColor",
		name = "Inventory Empty Text Color",
		description = "The color of the text when the inventory is empty.",
		section = inventorySection,
		position = 6
	)

	default Color inventoryTxtEmptyColor()
	{
		return Color.decode("#ff0000");
	}
	//endregion

	//region Special Attack Options
	@ConfigSection(
		name = "Special Attack",
		description = "",
		position = 5
	)

	String specSection = "Special Attack";

	@ConfigItem(
		keyName = "spec",
		name = "Enable Special Attack",
		description = "Shows the amount of special attack energy left.",
		section = specSection,
		position = 0
	)

	default boolean spec()
	{
		return true;
	}

	@ConfigItem(
		keyName = "specColor",
		name = "Background Color",
		description = "",
		section = specSection,
		position = 1
	)

	default Color specColor()
	{
		return Color.decode("#1b444f");
	}

	@ConfigItem(
		keyName = "specTxtColor",
		name = "Text Color",
		description = "",
		section = specSection,
		position = 2
	)

	default Color specTxtColor()
	{
		return Color.decode("#ffffff");
	}

	@ConfigItem(
		keyName = "specProgress",
		name = "Enable Special Attack Progress",
		description = "Changes the icon background to a progress bar that shows how long it will take to charge the special attack bar.",
		section = specSection,
		position = 3
	)

	default boolean specProgress()
	{
		return true;
	}

	@ConfigItem(
		keyName = "specProgressColor",
		name = "Special Attack Progress Color",
		description = "The color of the special attack progress bar.",
		section = specSection,
		position = 4
	)

	default Color specProgressColor()
	{
		return Color.decode("#4398ae");
	}
	//endregion
}
/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.VarPlayer;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.gameval.ItemID;

public class SpecIcon extends Icon
{
	private static final int SPEC_REGEN_TICKS = 50;
	private static final int LIGHTBEARER_REGEN_TICKS = 25;
	private static final int MAX_SPECIAL_ENERGY = 1000;

	private int ticksSinceSpecRegen;
	private boolean wearingLightbearer;

	public SpecIcon(Client client, TrayIndicatorsConfig config)
	{
		super(IconType.Spec, client, config);
	}

	@Override
	public IconData getIconData()
	{
		return new IconData(
			client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT) / 10,
			config.specColor(),
			config.specTxtColor()
		);
	}

	@Override
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() != InventoryID.EQUIPMENT.getId())
		{
			return;
		}

		ItemContainer equipment = event.getItemContainer();

		if (equipment == null)
		{
			return;
		}

		final boolean hasLightbearer = equipment.contains(ItemID.LIGHTBEARER);

		// Reset some regen progress when equipping/removing Lightbearer
		if (hasLightbearer != wearingLightbearer)
		{
			ticksSinceSpecRegen = Math.max(0, ticksSinceSpecRegen - LIGHTBEARER_REGEN_TICKS);
		}

		wearingLightbearer = hasLightbearer;
	}

	@Override
	public void onGameTick(GameTick event)
	{
		int specialAttackEnergy = client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT);
		int ticksPerSpecRegen = wearingLightbearer ? SPEC_REGEN_TICKS / 2 : SPEC_REGEN_TICKS;

		// Reset ticksSinceSpecRegen if special attack energy is full
		if (specialAttackEnergy >= MAX_SPECIAL_ENERGY)
		{
			ticksSinceSpecRegen = 0;
		}
		else
		{
			ticksSinceSpecRegen = (ticksSinceSpecRegen + 1) % ticksPerSpecRegen;
		}

		// Don't cache the icon if progress is enabled, as the progress bar will change every tick thus requiring a new image.
		// Kinda dirty, but it works.
		cacheImage = !config.specProgress();

		super.onGameTick(event);
	}

	@Override
	protected BufferedImage createImage(int value, Color bgColor, Color txtColor) {
		// Use the default image creation if we don't have to draw the progress bar.
		if (!config.specProgress())
		{
			return super.createImage(value, bgColor, txtColor);
		}

		final int ticksPerSpecRegen = wearingLightbearer ? LIGHTBEARER_REGEN_TICKS : SPEC_REGEN_TICKS;
		int size = 16;
		String text = Integer.toString(value);

		BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D graphics = image.createGraphics();

		float regenPercent = ticksSinceSpecRegen / (float) ticksPerSpecRegen;

		int filledHeight = (int) (size * regenPercent);
		int unfilledHeight = size - filledHeight;

		// Draw unfilled area
		graphics.setColor(bgColor);
		graphics.fillRect(0, 0, size, unfilledHeight);

		// Draw filled regen area
		graphics.setColor(config.specProgressColor());
		graphics.fillRect(0, unfilledHeight, size, filledHeight);

		// Draw text
		graphics.setColor(txtColor);

		int fontSize = (text.length() >= 4) ? 8 : (text.length() == 3) ? 9 : 12;
		graphics.setFont(new Font(graphics.getFont().getName(), Font.PLAIN, fontSize));

		FontMetrics metrics = graphics.getFontMetrics();
		int x = (size - metrics.stringWidth(text)) / 2;
		int y = ((size - metrics.getHeight()) / 2) + metrics.getAscent();
		graphics.drawString(text, x, y);

		graphics.dispose();

		return image;
	}

	@Override
	public boolean isActive()
	{
		return config.spec();
	}
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

public enum IconType
{
	Health,
	Prayer,
	Absorption,
	Cannon,
	Inventory,
	Spec,
}
/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import net.runelite.api.Client;
import net.runelite.api.Skill;

public class PrayerIcon extends Icon
{
	public PrayerIcon(Client client, TrayIndicatorsConfig config)
	{
		super(IconType.Prayer, client, config);
	}

	@Override
	public IconData getIconData()
	{
		return new IconData(
			client.getBoostedSkillLevel(Skill.PRAYER),
			config.prayerColor(),
			config.prayerTxtColor()
		);
	}

	@Override
	public boolean isActive()
	{
		return config.prayer();
	}
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.VarPlayer;
import java.awt.Color;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.eventbus.Subscribe;

public class CannonIcon extends Icon
{
	private boolean cannonPlaced;

	public CannonIcon(Client client, TrayIndicatorsConfig config)
	{
		super(IconType.Cannon, client, config);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.SPAM && event.getType() != ChatMessageType.GAMEMESSAGE)
		{
			return;
		}

		if (event.getMessage().equals("You add the furnace."))
		{
			cannonPlaced = true;
		}
		else if (event.getMessage().contains("You pick up the cannon")
			|| event.getMessage().contains("Your cannon has decayed.")
			|| event.getMessage().contains("Your cannon has been destroyed!"))
		{
			cannonPlaced = false;
		}
	}

	@Override
	public IconData getIconData()
	{
		int value = client.getVarpValue(VarPlayer.CANNON_AMMO);
		Color txtColor = config.cannonTxtDynamic() ? getDynamicTextColor(value) : config.cannonTxtColor();

		return new IconData(
			value,
			config.cannonColor(),
			txtColor
		);
	}

	private Color getDynamicTextColor(int cannonballs)
	{
		if (cannonballs > 15)
		{
			return Color.GREEN;
		}
		else if (cannonballs > 5)
		{
			return Color.ORANGE;
		}

		return Color.RED;
	}

	@Override
	public boolean isActive()
	{
		return config.cannon() && cannonPlaced;
	}
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import java.awt.Color;
import java.util.Arrays;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.InventoryID;

public class InventoryIcon extends Icon
{
	public InventoryIcon(Client client, TrayIndicatorsConfig config)
	{
		super(IconType.Inventory, client, config);
	}

	@Override
	public IconData getIconData()
	{
		int filledSlots = getFilledInventorySlots();
		Color txtColor = config.inventoryTxtColor();

		if (filledSlots <= 0)
		{
			txtColor = config.inventoryTxtEmptyColor();
		}
		else if (filledSlots >= 28)
		{
			txtColor = config.inventoryTxtFullColor();
		}
		else if (filledSlots >= config.inventoryThreshold())
		{
			txtColor = config.inventoryTxtThresholdColor();
		}

		return new IconData(
			filledSlots,
			config.inventoryColor(),
			txtColor
		);
	}

	@Override
	public boolean isActive()
	{
		return config.inventory();
	}

	private int getFilledInventorySlots()
	{
		// Make sure we are on the client thread
		if (!client.isClientThread())
		{
			return 0;
		}

		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

		if (inventory == null)
		{
			return 0;
		}

		return (int)Arrays.stream(inventory.getItems())
			.filter(item -> item.getQuantity() > 0)
			.count();
	}
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;

import java.awt.*;
import java.awt.image.BufferedImage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.events.ConfigChanged;

@Slf4j
public abstract class Icon
{
	public final IconType type;

	protected final Client client;
	protected final TrayIndicatorsConfig config;

	private TrayIcon trayIcon;
	protected IconData lastIconData;
	protected boolean cacheImage = true;

	public Icon(IconType type, Client client, TrayIndicatorsConfig config)
	{
		this.type = type;
		this.client = client;
		this.config = config;
	}

	private void createIcon(int value, Color bgColor, Color txtColor)
	{
		if (trayIcon != null)
		{
			removeIcon();
		}

		trayIcon = new TrayIcon(createImage(value, bgColor, txtColor));
		trayIcon.setImageAutoSize(true);

		try
		{
			SystemTray.getSystemTray().add(trayIcon);
		}
		catch (AWTException ex)
		{
			log.error("Unable to add system tray icon.", ex);
		}
	}

	public void onGameTick(GameTick event)
	{
		updateIcon();
	}

	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN)
		{
			removeIcon();
		}
	}

	public void onConfigChanged(ConfigChanged event)
	{
		updateIcon();
	}

	public void onItemContainerChanged(ItemContainerChanged event)
	{
		// Default implementation does nothing
		// Subclasses can override this method if needed
	}

	public void updateIcon()
	{
		if (!isActive())
		{
			removeIcon();
			return;
		}

		IconData data = getIconData();

		if (cacheImage && trayIcon != null && data.equals(lastIconData))
		{
			return;
		}

		if (trayIcon == null)
		{
			createIcon(data.value, data.bgColor, data.txtColor);
		}
		else
		{
			trayIcon.getImage().flush();
			trayIcon.setImage(createImage(data.value, data.bgColor, data.txtColor));
		}

		if (cacheImage)
		{
			lastIconData = data;
		}
	}

	public void removeIcon()
	{
		if (trayIcon == null)
		{
			return;
		}

		SystemTray.getSystemTray().remove(trayIcon);
		trayIcon = null;
	}

	protected BufferedImage createImage(int value, Color bgColor, Color txtColor)
	{
		int size = 16;
		String text = Integer.toString(value);

		BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D graphics = image.createGraphics();

		// Draw background
		graphics.setColor(bgColor);
		graphics.fillRect(0, 0, size, size);

		// Draw text
		graphics.setColor(txtColor);

		int fontSize = (text.length() >= 4) ? 8 : (text.length() == 3) ? 9 : 12;
		graphics.setFont(new Font(graphics.getFont().getName(), Font.PLAIN, fontSize));

		FontMetrics metrics = graphics.getFontMetrics();
		int x = (size - metrics.stringWidth(text)) / 2;
		int y = ((size - metrics.getHeight()) / 2) + metrics.getAscent();
		graphics.drawString(text, x, y);

		graphics.dispose();

		return image;
	}

	public abstract IconData getIconData();

	public abstract boolean isActive();
}

package com.trayindicators.icons;

import java.awt.Color;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;

@AllArgsConstructor
@EqualsAndHashCode
public class IconData
{
	public int value;
	public Color bgColor;
	public Color txtColor;
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import java.util.Arrays;
import net.runelite.api.Client;
import net.runelite.api.Varbits;

public class AbsorptionIcon extends Icon
{
	private static final int[] NMZ_MAP_REGION = {9033};

	public AbsorptionIcon(Client client, TrayIndicatorsConfig config)
	{
		super(IconType.Absorption, client, config);
	}

	@Override
	public IconData getIconData()
	{
		return new IconData(
			client.getVarbitValue(Varbits.NMZ_ABSORPTION),
			config.absorptionColor(),
			config.absorptionTxtColor()
		);
	}

	@Override
	public boolean isActive()
	{
		return config.absorption() && isInNightmareZone();
	}

	private boolean isInNightmareZone()
	{
		return Arrays.equals(client.getMapRegions(), NMZ_MAP_REGION);
	}
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators.icons;

import com.trayindicators.TrayIndicatorsConfig;
import net.runelite.api.Client;
import net.runelite.api.Skill;

public class HealthIcon extends Icon
{
	public HealthIcon(Client client, TrayIndicatorsConfig config)
	{
		super(IconType.Health, client, config);
	}

	@Override
	public IconData getIconData()
	{
		return new IconData(
			client.getBoostedSkillLevel(Skill.HITPOINTS),
			config.healthColor(),
			config.healthTxtColor()
		);
	}

	@Override
	public boolean isActive()
	{
		return config.health();
	}
}

/*
 * Copyright (c) 2025, DMAD777 <https://github.com/DMAD777>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.trayindicators;

import com.google.inject.Provides;
import com.trayindicators.icons.*;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.awt.*;
import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "Tray Indicators",
	description = "Displays your hitpoints, prayer, absorption, special attack, cannon ammo or inventory count in the system tray.",
	tags = {"notifications"}
)
public class TrayIndicatorsPlugin extends Plugin
{
	private final Map<IconType, Icon> trayIcons = new HashMap<>();

	@Inject
	private Client client;

	@Inject
	private TrayIndicatorsConfig config;

	@Provides
	TrayIndicatorsConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TrayIndicatorsConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		if (!SystemTray.isSupported())
		{
			log.error("System tray is not supported.");
			return;
		}

		if (trayIcons.isEmpty())
		{
			trayIcons.put(IconType.Health, new HealthIcon(client, config));
			trayIcons.put(IconType.Prayer, new PrayerIcon(client, config));
			trayIcons.put(IconType.Absorption, new AbsorptionIcon(client, config));
			trayIcons.put(IconType.Cannon, new CannonIcon(client, config));
			trayIcons.put(IconType.Inventory, new InventoryIcon(client, config));
			trayIcons.put(IconType.Spec, new SpecIcon(client, config));
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		trayIcons.forEach((iconType, icon) -> icon.removeIcon());
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		trayIcons.forEach((iconType, icon) -> icon.onGameTick(event));
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		trayIcons.forEach((iconType, icon) -> icon.onGameStateChanged(event));
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		trayIcons.forEach((iconType, icon) -> icon.onItemContainerChanged(event));
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("Tray Indicators"))
		{
			return;
		}

		trayIcons.forEach((iconType, icon) -> icon.onConfigChanged(event));
	}
}
package com.trayindicators;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TrayIndicatorsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TrayIndicatorsPlugin.class);
		RuneLite.main(args);
	}
}
