package com.skeldoor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MiniBarsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MiniBarsPlugin.class);
		RuneLite.main(args);
	}
}
package com.skeldoor;

import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.ProgressBarComponent;
import java.awt.*;

public class MiniBarsUtils {

    static void buildPanel(PanelComponent panelComponent, int minimum, int maximum, float value, Color foregroundColour, Dimension size, boolean totalLabels, boolean showLabels) {
        ProgressBarComponent progressBar = new ProgressBarComponent();
        progressBar.setMinimum(minimum);
        progressBar.setMaximum(maximum);
        progressBar.setValue(value);
        progressBar.setBackgroundColor(Color.BLACK);
        progressBar.setForegroundColor(foregroundColour);
        progressBar.setFontColor(Color.WHITE);
        progressBar.setLabelDisplayMode(ProgressBarComponent.LabelDisplayMode.FULL);



        if (!showLabels) {
            progressBar.setLabelDisplayMode(ProgressBarComponent.LabelDisplayMode.TEXT_ONLY);
        } else {
            if (!totalLabels){
                progressBar.setLabelDisplayMode(ProgressBarComponent.LabelDisplayMode.TEXT_ONLY);
                progressBar.setCenterLabel(String.valueOf((int) value));
            }
        }


        ProgressBarComponent paddingBar = new ProgressBarComponent();
        paddingBar.setMinimum(minimum);
        paddingBar.setMaximum(maximum);
        paddingBar.setValue(value);
        paddingBar.setBackgroundColor(Color.BLACK);
        paddingBar.setForegroundColor(foregroundColour);
        paddingBar.setFontColor(Color.WHITE);
        paddingBar.setLabelDisplayMode(ProgressBarComponent.LabelDisplayMode.TEXT_ONLY);
        // Set height of bar by padding the top and bottom with empty lines
        for (int i = 0; i < size.height; i++){
            panelComponent.getChildren().add(paddingBar);
        }

        panelComponent.getChildren().add(progressBar);

        for (int i = 0; i < size.height; i++){
            panelComponent.getChildren().add(paddingBar);
        }
    }
}

package com.skeldoor;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class MiniBarsPrayerOverlay extends OverlayPanel{

    @Inject
    private Client client;

    @Inject
    private MiniBarsConfig config;

    @Inject
    MiniBarsPrayerOverlay(
            Client client,
            MiniBarsPlugin plugin)
    {
        super(plugin);
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setPriority(OverlayPriority.LOW);
        setMovable(true);
        this.client = client;
    }


    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.renderPrayer()) renderPrayer();

        return super.render(graphics);
    }

    void renderPrayer(){
        setPreferredSize(new Dimension(
                config.prayerSize().width,
                0));
        MiniBarsUtils.buildPanel(
                panelComponent,
                0,
                client.getRealSkillLevel(Skill.PRAYER),
                client.getBoostedSkillLevel(Skill.PRAYER),
                config.prayerColour(),
                config.prayerSize(),
                config.totalLabels(),
                config.showLabels());
    }
}

package com.skeldoor;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class MiniBarsEnergyOverlay extends OverlayPanel{

    @Inject
    private Client client;

    @Inject
    private MiniBarsConfig config;

    @Inject
    MiniBarsEnergyOverlay(
            Client client,
            MiniBarsPlugin plugin)
    {
        super(plugin);
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setPriority(OverlayPriority.LOW);
        setMovable(true);
        this.client = client;
    }


    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.renderEnergy()) renderEnergy();

        return super.render(graphics);
    }

    void renderEnergy(){
        setPreferredSize(new Dimension(
                config.energySize().width,
                0));
        MiniBarsUtils.buildPanel(
                panelComponent,
                0,
                100,
                (int)(client.getEnergy() / 100f),
                config.energyColour(),
                config.energySize(),
                config.totalLabels(),
                config.showLabels());
    }
}

package com.skeldoor;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Mini Bars"
)
public class MiniBarsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private MiniBarsConfig config;

	@Inject
	private MiniBarsHealthOverlay healthOverlay;

	@Inject
	private MiniBarsPrayerOverlay prayerOverlay;

	@Inject
	private MiniBarsEnergyOverlay energyOverlay;

	@Inject
	private MiniBarsSpecOverlay specOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Override
	protected void startUp()
	{
		overlayManager.add(healthOverlay);
		overlayManager.add(prayerOverlay);
		overlayManager.add(energyOverlay);
		overlayManager.add(specOverlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(healthOverlay);
		overlayManager.remove(prayerOverlay);
		overlayManager.remove(energyOverlay);
		overlayManager.remove(specOverlay);
	}

	@Provides
	MiniBarsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MiniBarsConfig.class);
	}
}

package com.skeldoor;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.VarPlayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class MiniBarsSpecOverlay extends OverlayPanel{

    @Inject
    private MiniBarsConfig config;

    @Inject
    private Client client;

    @Inject
    MiniBarsSpecOverlay(
            Client client,
            MiniBarsPlugin plugin)
    {
        super(plugin);
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setPriority(OverlayPriority.LOW);
        setMovable(true);
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.renderSpec()) renderSpec();

        return super.render(graphics);
    }

    void renderSpec(){
        setPreferredSize(new Dimension(
            config.specSize().width,
            0));
        MiniBarsUtils.buildPanel(
               panelComponent,
               0,
               100,
               client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT)/10f,
               config.specColour(),
               config.specSize(),
                config.totalLabels(),
                config.showLabels());
    }
}

package com.skeldoor;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class MiniBarsHealthOverlay extends OverlayPanel{

    @Inject
    private Client client;

    @Inject
    private MiniBarsConfig config;

    @Inject
    MiniBarsHealthOverlay(
            Client client,
            MiniBarsPlugin plugin)
    {
        super(plugin);
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setPriority(OverlayPriority.LOW);
        setMovable(true);
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.renderHealth()) renderHealth();
        return super.render(graphics);
    }

    void renderHealth(){
        setPreferredSize(new Dimension(
                config.healthSize().width,
                0));
        MiniBarsUtils.buildPanel(
                panelComponent,
                0,
                client.getRealSkillLevel(Skill.HITPOINTS),
                client.getBoostedSkillLevel(Skill.HITPOINTS),
                config.healthColour(),
                config.healthSize(),
                config.totalLabels(),
                config.showLabels());
    }
}

package com.skeldoor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import java.awt.*;

@ConfigGroup("Mini Bars")
public interface MiniBarsConfig extends Config
{

	@ConfigItem
			(
					position = 1,
					keyName = "showHealth",
					name = "Show Health",
					description = "Render Health overlay"
			)

	default boolean renderHealth() { return false; }

	@ConfigItem(
			position = 2,
			keyName = "healthColour",
			name = "Health Colour",
			description = "Choose the background colour of the health bar"
	)
	default Color healthColour() { return Color.RED; }

	@ConfigItem(
			position = 3,
			keyName = "healthSize",
			name = "Health Size",
			description = "Choose the size of the Health bar"
	)
	default Dimension healthSize() { return new Dimension(ComponentConstants.STANDARD_WIDTH, 0); }
	@ConfigItem
			(
					position = 4,
					keyName = "showPrayer",
					name = "Show Prayer",
					description = "Render Prayer overlay"
			)

	default boolean renderPrayer() { return false; }

	@ConfigItem(
			position = 5,
			keyName = "prayerColour",
			name = "Prayer Colour",
			description = "Choose the background colour of the prayer bar"
	)
	default Color prayerColour() { return Color.CYAN; }


	@ConfigItem(
			position = 6,
			keyName = "prayerSize",
			name = "Prayer Size",
			description = "Choose the size of the Prayer bar"
	)
	default Dimension prayerSize() { return new Dimension(ComponentConstants.STANDARD_WIDTH, 0); }


	@ConfigItem
			(
					position = 7,
					keyName = "showEnergy",
					name = "Show Energy",
					description = "Render Run Energy overlay"
			)

	default boolean renderEnergy() { return false; }

	@ConfigItem(
			position = 8,
			keyName = "energyColour",
			name = "Energy Colour",
			description = "Choose the background colour of the run energy bar"
	)
	default Color energyColour() { return Color.orange; }

	@ConfigItem(
			position = 9,
			keyName = "energySize",
			name = "Energy Size",
			description = "Choose the size of the Energy bar"
	)
	default Dimension energySize() { return new Dimension(ComponentConstants.STANDARD_WIDTH, 0); }

	@ConfigItem
			(
					position = 10,
					keyName = "showSpec",
					name = "Show Spec",
					description = "Render Special Attack overlay"
			)

	default boolean renderSpec() { return false; }

	@ConfigItem(
			position = 11,
			keyName = "specColour",
			name = "Spec Colour",
			description = "Choose the background colour of the Spec bar"
	)
	default Color specColour() { return Color.yellow; }

	@ConfigItem(
			position = 12,
			keyName = "specSize",
			name = "Spec Size",
			description = "Choose the size of the Spec bar"
	)
	default Dimension specSize() { return new Dimension(ComponentConstants.STANDARD_WIDTH, 0); }

	@ConfigItem
			(
					position = 13,
					keyName = "totalLabels",
					name = "Total Labels",
					description = "Show the label as a fraction of the whole value"
			)

	default boolean totalLabels() { return true; }

	@ConfigItem
			(
					position = 14,
					keyName = "showLabels",
					name = "Show Labels",
					description = "Show labels on the minibars"
			)

	default boolean showLabels() { return true; }

}

