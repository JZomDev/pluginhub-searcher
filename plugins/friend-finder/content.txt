package com.sololegends.runelite;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FriendsOnMapPluginTest {
  @SuppressWarnings("unchecked")
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(FriendsOnMapPlugin.class);
    RuneLite.main(args);
  }
}
package com.sololegends.runelite.helpers;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

import com.google.gson.*;
import com.sololegends.runelite.data.WorldRegions;

import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;

public class WorldLocations {

  private static final Set<WorldSurface> WORLD_AREAS = ConcurrentHashMap.newKeySet();

  // y and y2 are inverted because RS using a flipped y axis, this is for easy
  // listing
  public static WorldArea fromBounds(int x, int y2, int x2, int y) {
    return new WorldArea(x, y, x2 - x, y2 - y, 0);
  }

  public static WorldSurface surface(String name, int eX, int eY, WorldArea... areas) {
    return new WorldSurface(name, new WorldPoint(eX, eY, 0), areas);
  }

  public static Set<WorldSurface> getSurfaces() {
    return new HashSet<WorldSurface>(WORLD_AREAS);
  }

  static {
    WORLD_AREAS.add(surface("RuneScape Surface", 00, 00, fromBounds(1052, 4132, 3940, 2396)));
    // Ancient Cavern
    WORLD_AREAS.add(surface("Ancient Cavern", 2511, 3508, fromBounds(1733, 5436, 1854, 5318)));
    // Ardougne Underground
    WorldSurface ardougne_ug = surface("Ardougne Underground", 2631, 3294, fromBounds(2513, 9854, 2748, 9599));
    // WORLD_AREAS.add(ardougne_ug);
    WORLD_AREAS.add(surface("Clock Tower Dungeon", 2568, 3229, fromBounds(2560, 9663, 2623, 9600))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Ardougne Rat Pits", 2560, 3320, fromBounds(2640, 9675, 2673, 9617))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Ardougne Sewers North", 2641, 9674, fromBounds(2628, 9727, 2684, 9675))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Ardougne Sewers South", 2586, 3235,
        fromBounds(2536, 9727, 2623, 9664), fromBounds(2513, 9664, 2557, 9638))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Chaos Druid Tower Dungeon", 2561, 3356, fromBounds(2560, 9758, 2593, 9729))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Goblin Cave", 2262, 3393, fromBounds(2561, 9854, 2622, 9793))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Legend's Guild Dungeon", 2723, 3375, fromBounds(2690, 9785, 2739, 9729))
        .setParent(ardougne_ug));
    WORLD_AREAS.add(surface("Wicthaven Dungeon", 2695, 3283, fromBounds(2692, 9719, 2748, 9665))
        .setParent(ardougne_ug));

    // Asgarnia Ice Cave
    WorldSurface asgarnia_ice_cave = surface("Asgarnia Ice Cave", 00, 00, fromBounds(2920, 9660, 3149, 9535));
    // WORLD_AREAS.add(asgarnia_ice_cave);
    WORLD_AREAS.add(surface("Melzar's Maze Basement", 2923, 3250, fromBounds(2920, 9660, 2942, 9638))
        .setParent(asgarnia_ice_cave));
    WORLD_AREAS.add(surface("Port Sarim Rat Pits", 3017, 3232, fromBounds(3016, 9658, 3063, 9623))
        .setParent(asgarnia_ice_cave));
    WORLD_AREAS.add(surface("Asgarnia Ice Dungeon", 3005, 3150, fromBounds(2984, 9601, 3145, 9538))
        .setParent(asgarnia_ice_cave));

    // Braindeath Island
    WORLD_AREAS.add(surface("Braindeath Island", 3680, 3537, fromBounds(2113, 5182, 2174, 5057)));

    // Dorgesh-Kaan
    WORLD_AREAS.add(surface("Dorgesh-Kaan", 3208, 3618, fromBounds(2689, 5502, 2878, 5252)));

    // Dwarven Mines
    WorldSurface dwarven_mines = surface("Dwarven Mines", 00, 00, fromBounds(2962, 9852, 3223, 9664));
    // WORLD_AREAS.add(dwarven_mines);
    WORLD_AREAS.add(surface("Dwarven Mine North", 3017, 3450, fromBounds(2962, 9852, 3060, 9794))
        .setParent(dwarven_mines));
    WORLD_AREAS.add(surface("Dwarven Mine South", 3058, 3376, fromBounds(3031, 9794, 3062, 9756))
        .setParent(dwarven_mines));
    WORLD_AREAS.add(surface("Mining Guild Basement", 3018, 3339, fromBounds(3002, 9756, 3056, 9699))
        .setParent(dwarven_mines));
    WORLD_AREAS.add(surface("Motherload Mine", 3058, 3376, fromBounds(3074, 9725, 3223, 9666))
        .setParent(dwarven_mines));

    // Feldip Hills Underground
    WorldSurface fh_under = surface("Feldip Hills Underground", 00, 00, fromBounds(1669, 9199, 2071, 8860));
    // WORLD_AREAS.add(fh_under);
    WORLD_AREAS.add(surface("Crumbling Tower Basement", 2130, 2994, fromBounds(1671, 9198, 1687, 9189))
        .setParent(fh_under));
    WORLD_AREAS.add(surface("Isle of Souls Dungeon", 3208, 2919, fromBounds(1793, 9149, 1853, 9093))
        .setParent(fh_under));
    WORLD_AREAS.add(surface("Red Chinchompa Hunting Ground", 2525, 2894, fromBounds(2015, 9092, 2038, 9071))
        .setParent(fh_under));
    WORLD_AREAS.add(surface("Myths' Guild Dungeon", 2456, 2847, fromBounds(1883, 9023, 1953, 8963))
        .setParent(fh_under));
    WORLD_AREAS.add(surface("Corsair Cove Dungeon", 2525, 2894,
        fromBounds(1953, 9085, 1987, 8970), fromBounds(1987, 9012, 2072, 8962))
        .setParent(fh_under));

    // Fossil Island Underground
    WorldSurface fi_under = surface("Fossil Island Underground", 00, 00, fromBounds(3585, 10302, 3918, 10113));
    // WORLD_AREAS.add(fi_under);
    WORLD_AREAS.add(surface("Wyvern Cave (Task)", 3677, 3854, fromBounds(3585, 10302, 3645, 10242))
        .setParent(fi_under));
    WORLD_AREAS.add(surface("Wyvern Cave", 3745, 3779, fromBounds(3585, 10237, 3647, 10241))
        .setParent(fi_under));
    WORLD_AREAS.add(surface("Underwater", 3765, 3898, fromBounds(3716, 10301, 3837, 10241))
        .setParent(fi_under));
    WORLD_AREAS.add(surface("Volcanic Mine", 3815, 3808,
        fromBounds(3779, 10229, 3836, 10114), fromBounds(3890, 10239, 3917, 10190))
        .setParent(fi_under));

    // Fremennik Slayer Cave
    WORLD_AREAS.add(surface("Fremennik Slayer Cave", 2796, 3615, fromBounds(2691, 10044, 2811, 9920)));
    // God Wars Dungeon
    WORLD_AREAS.add(surface("God Wars Dungeon", 2917, 3746, fromBounds(2820, 5373, 2962, 5157)));

    // Karamja Underground
    WorldSurface karamja_ug = surface("Karamja Underground", 00, 00, fromBounds(2560, 9662, 2940, 9375));
    // WORLD_AREAS.add(karamja_ug);
    WORLD_AREAS.add(surface("Crandor Dungeon", 2833, 3256, fromBounds(2827, 9661, 2866, 9546))
        .setParent(karamja_ug));
    WORLD_AREAS.add(surface("Jogre Dungeon", 2824, 3118, fromBounds(2822, 9532, 2939, 9414))
        .setParent(karamja_ug));
    WORLD_AREAS.add(surface("Shilo Village Mine", 2824, 2942, fromBounds(2826, 9399, 2858, 9377))
        .setParent(karamja_ug));
    WORLD_AREAS.add(surface("Brimhaven Agility Arena", 2808, 3194, fromBounds(2757, 9594, 2809, 9542))
        .setParent(karamja_ug));
    WORLD_AREAS.add(surface("Brimhaven Dungeon North", 2743, 3154,
        fromBounds(2561, 9598, 2618, 9473), fromBounds(2629, 9598, 2734, 9498))
        .setParent(karamja_ug));
    WORLD_AREAS.add(surface("Brimhaven Dungeon South", 2759, 3062,
        fromBounds(2627, 9498, 2749, 9412), fromBounds(2730, 9510, 2746, 9496))
        .setParent(karamja_ug));

    // Kebos Underground
    WorldSurface kebos_ug = surface("Kebos Underground", 00, 00, fromBounds(1115, 10287, 1380, 9925));
    // WORLD_AREAS.add(kebos_ug);
    WORLD_AREAS.add(surface("Karuulm Slayer Dungeon", 1308, 3807, fromBounds(1117, 10285, 1379, 10129))
        .setParent(kebos_ug));
    WORLD_AREAS.add(surface("Hespori Patch", 1232, 3729, fromBounds(1175, 10079, 1191, 10063))
        .setParent(kebos_ug));
    WORLD_AREAS.add(surface("Lizardman Temple", 1311, 3685, fromBounds(1281, 10063, 1343, 9999))
        .setParent(kebos_ug));
    WORLD_AREAS.add(surface("Lizardman Caves", 1306, 3574, fromBounds(1284, 9958, 1335, 9927))
        .setParent(kebos_ug));

    // Keldagrim
    WORLD_AREAS.add(surface("Keldagrim", 2730, 3713, fromBounds(2816, 10239, 2943, 10079)));

    // Kharidian Desert Underground
    WorldSurface kharidian_ug = surface("Kharidian Desert Underground", 00, 00, fromBounds(1244, 10212, 1956, 9692));
    // WORLD_AREAS.add(kharidian_ug);
    WORLD_AREAS.add(surface("Kalphite Cave", 3319, 3122, fromBounds(3330, 9542, 3404, 9474))
        .setParent(kharidian_ug));
    WORLD_AREAS.add(surface("Kalphite Lair", 3226, 3108, fromBounds(3171, 9530, 3230, 9408))
        .setParent(kharidian_ug));
    WORLD_AREAS.add(surface("Giant's Foundry", 3360, 3150, fromBounds(3432, 9606, 3477, 9578))
        .setParent(kharidian_ug));

    // Kourend Underground
    WorldSurface kourend_ug = surface("Kourend Underground", 00, 00, fromBounds(1347, 10173, 1877, 9793));
    // WORLD_AREAS.add(kourend_ug);
    WORLD_AREAS.add(surface("Kourend Underground", 1470, 3653, fromBounds(1600, 10111, 1729, 9979))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("Chasm of Fire", 1433, 3670, fromBounds(1346, 10107, 1404, 9859))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("Shayzien Crypts", 1482, 3549, fromBounds(1446, 10107, 1497, 9865))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("Giant's Den", 1420, 3588, fromBounds(1413, 9850, 1467, 9795))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("Woodcutting Guild Dungeon", 1603, 3508, fromBounds(1544, 9914, 1598, 9862))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("Crabclaw Caves", 1643, 3449, fromBounds(1644, 9849, 1723, 9792))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("Forthos dungeon", 1701, 3574, fromBounds(1794, 9979, 1854, 9882))
        .setParent(kourend_ug));
    WORLD_AREAS.add(surface("The Warrens", 1812, 3745, fromBounds(1793, 10174, 1876, 10114))
        .setParent(kourend_ug));

    // Lair of Tarn Razorlor
    WORLD_AREAS.add(surface("Lair of Tarn Razorlor", 00, 00, fromBounds(3138, 4637, 3390, 4545)));

    // LMS Desert Island
    WORLD_AREAS.add(surface("LMS Desert Island", 3138, 3635, fromBounds(3392, 5887, 3519, 5760)));

    // LMS Wild Varrock
    WORLD_AREAS.add(surface("LMS Wild Varrock", 3138, 3635, fromBounds(3456, 6206, 3646, 6016)));

    WorldSurface misc_ug = surface("Miscellania Underground", 00, 00, fromBounds(2012, 10468, 2916, 10076));
    // WORLD_AREAS.add(misc_ug);
    WORLD_AREAS.add(surface("Miscellania / Etcetera Dungeon", 2619, 3865, fromBounds(2500, 10301, 2621, 10243))
        .setParent(misc_ug));
    WORLD_AREAS.add(surface("Ice Troll Cave", 2401, 3889, fromBounds(2375, 10302, 2426, 10241))
        .setParent(misc_ug));
    WORLD_AREAS.add(surface("Jormungand's Prison", 2464, 4012, fromBounds(2398, 10467, 2492, 10371))
        .setParent(misc_ug));
    WORLD_AREAS.add(surface("Salt Mine", 2866, 3941, fromBounds(2829, 10354, 2858, 10326))
        .setParent(misc_ug));

    // Misthalin Underground
    WorldSurface mist_ug = surface("Misthalin Underground", 00, 00, fromBounds(2972, 10084, 3364, 9372));
    // WORLD_AREAS.add(mist_ug);
    WORLD_AREAS.add(surface("Edgeville Dungeon", 3115, 3452, fromBounds(3073, 9999, 3152, 9793))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Varrock Sewers", 3241, 3428, fromBounds(3153, 9918, 3287, 9858))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Draynor Manor Basement", 3114, 3357, fromBounds(3075, 9778, 3118, 9744))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Champions' Challenge", 3189, 3355, fromBounds(3150, 9772, 3188, 9743))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("VTAM Corporation", 3244, 3384,
        fromBounds(3230, 9806, 3254, 9761), fromBounds(3187, 9834, 3196, 9818))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Draynor Sewers", 3083, 3272, fromBounds(3081, 9697, 3126, 9643))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Sourhog Cave", 3150, 3347, fromBounds(3153, 9719, 3182, 9670))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Watermill Cellar", 2866, 3941, fromBounds(3206, 9705, 3246, 9662))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("H.A.M. Cult", 2866, 3941, fromBounds(3140, 9658, 3188, 9606))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Lumbridge Castle Cellar", 3209, 3218, fromBounds(3208, 9625, 3219, 9615))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Goblin Mine", 3209, 3218, fromBounds(3309, 9654, 3326, 9600))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Goblin Maze", 3209, 3218, fromBounds(3221, 9658, 3308, 9603))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Lumbridge Swamp Caves", 3168, 3172, fromBounds(3144, 9601, 3261, 9487))
        .setParent(mist_ug));
    WORLD_AREAS.add(surface("Wizard's Tower Basement", 3103, 3162, fromBounds(3096, 9577, 3121, 9555))
        .setParent(mist_ug));

    // Mole Hole
    WORLD_AREAS.add(surface("Mole Hole", 2985, 3387, fromBounds(1732, 5244, 1787, 5132)));

    // TODO: Morytania Underground
    WORLD_AREAS.add(surface("Morytania Underground", 00, 00, fromBounds(3386, 9975, 3903, 9581)));

    // Mos Le'Harmless Cave
    WORLD_AREAS.add(surface("Mos Le'Harmless Cave", 3747, 2973, fromBounds(3716, 9469, 3837, 9348)));

    // Ourania Altar
    WORLD_AREAS.add(surface("Ourania Altar", 2450, 3231, fromBounds(3009, 5630, 3070, 5569)));

    // Stronghold of Security
    WORLD_AREAS.add(surface("Stronghold of Security", 3080, 3421,
        fromBounds(1856, 5247, 1915, 5184),
        fromBounds(1984, 5247, 2042, 5184),
        fromBounds(2113, 5247, 2176, 5184),
        fromBounds(2304, 5247, 2367, 5184)));

    // Stronghold Underground
    WorldSurface strong_ug = surface("Stronghold Underground", 00, 00, fromBounds(2140, 10084, 2596, 9628));
    // WORLD_AREAS.add(strong_ug);
    WORLD_AREAS.add(surface("Kraken Cave", 2277, 3611, fromBounds(2242, 10044, 2301, 9987))
        .setParent(strong_ug));
    WORLD_AREAS.add(surface("Grand Tree Tunnels", 2462, 3496, fromBounds(2433, 9918, 2494, 9858))
        .setParent(strong_ug));
    WORLD_AREAS.add(surface("Brimstail Cave", 2401, 3419,
        fromBounds(2379, 9830, 2396, 9805), fromBounds(2397, 9832, 2414, 9811))
        .setParent(strong_ug));
    WORLD_AREAS.add(surface("Stronghold Slayer Dungeon", 2427, 3424,
        fromBounds(2415, 9838, 2495, 9768), fromBounds(2392, 9806, 2414, 9768),
        fromBounds(2388, 9787, 2392, 9777))
        .setParent(strong_ug));

    // TODO Taverley Underground
    WORLD_AREAS.add(surface("Taverley Underground", 00, 00, fromBounds(2656, 10006, 2994, 9602)));

    // The Abyss
    WORLD_AREAS.add(surface("The Abyss", 3082, 3487, fromBounds(2950, 4924, 3131, 4737)));

    // Tolna's Rift
    WORLD_AREAS.add(surface("Tolna's Rift", 3308, 3449, fromBounds(3266, 9855, 3326, 9793)));

    // Troll Stronghold
    WORLD_AREAS.add(surface("Troll Stronghold", 2738, 3543, fromBounds(2822, 10174, 2990, 10049)));

    // Tutorial Island
    WORLD_AREAS.add(surface("Tutorial Island", 3127, 3037, fromBounds(1640, 6141, 1760, 6057)));

    // ! Waterbirth Dungeon
    // WORLD_AREAS.add(surface("Waterbirth Dungeon", 00, 00,
    // fromBounds(2435, 10174, 2733, 9826), fromBounds(2613, 9790, 2718, 9646)));

    // TODO Wilderness Dungeons
    WORLD_AREAS.add(surface("Wilderness Dungeons", 00, 00, fromBounds(2935, 10369, 3451, 10047)));

    // Yanille Underground
    WorldSurface yanille_ug = surface("Yanille Underground", 00, 00, fromBounds(2204, 9572, 2724, 9308));
    // WORLD_AREAS.add(yanille_ug);
    WORLD_AREAS.add(surface("Smoke Devils Dungeon", 2412, 3061, fromBounds(2347, 9468, 2426, 9415))
        .setParent(yanille_ug));
    WORLD_AREAS.add(surface("Wizard's Guild Basement", 2593, 3085, fromBounds(2582, 9493, 2594, 9484))
        .setParent(yanille_ug));
    WORLD_AREAS.add(surface("Yanille Agility Dungeon", 2603, 3078,
        fromBounds(2595, 9525, 2639, 9474), fromBounds(2561, 9533, 2595, 9496))
        .setParent(yanille_ug));

    // Zanaris
    WORLD_AREAS.add(surface("Zanaris", 3203, 3169, fromBounds(2370, 4478, 2493, 4355)));

    // Temporos
    WORLD_AREAS.add(surface("Temporos", 3136, 2841, fromBounds(12649, 26554478, 12699, 2605)));
  }

  public static WorldSurface getWorldSurface(WorldPoint point) {
    WorldSurface s = getWorldSurface(point.getRegionID());
    if (s != null && !s.name.equals("Unknown")) {
      return s;
    }
    for (WorldSurface surface : WORLD_AREAS) {
      if (surface.contains(point)) {
        return surface;
      }
    }
    return null;
  }

  public static WorldSurface getWorldSurface(int region) {
    if (region != -1) {
      WorldSurface s = WorldRegions.fromRegion(region);
      if (s != null) {
        return s;
      }
    }
    return null;
  }

  public static final class WorldSurface {
    public final String name;
    public final WorldArea[] areas;
    public final WorldPoint entry;
    public WorldSurface parent;

    public WorldSurface(String name, WorldPoint entry, WorldArea... areas) {
      this.name = name;
      this.areas = areas;
      this.entry = entry;
    }

    public WorldSurface setParent(WorldSurface parent) {
      this.parent = parent;
      return this;
    }

    public boolean contains(WorldPoint point) {
      for (WorldArea area : areas) {
        if (area.getX() <= point.getX() && point.getX() <= area.getX() + area.getWidth()
            && area.getY() <= point.getY() && point.getY() <= area.getY() + area.getHeight()) {
          return true;
        }
      }
      return false;
    }
  }

  // Generate java code from json file
  public static final void main(String args[]) {
    try {
      InputStream wis = WorldLocations.class.getResourceAsStream("/map_data.json");
      JsonElement ele = new JsonParser().parse(new String(wis.readAllBytes(), StandardCharsets.UTF_8));
      Iterator<JsonElement> arr = ele.getAsJsonArray().iterator();
      StringBuilder sb = new StringBuilder("static {");
      while (arr.hasNext()) {
        JsonElement e = arr.next();
        JsonArray bounds = e.getAsJsonObject().get("bounds").getAsJsonArray();
        JsonArray b1 = bounds.get(0).getAsJsonArray();
        JsonArray b2 = bounds.get(1).getAsJsonArray();
        sb.append("\r\n  WORLD_AREAS.put(\"" + e.getAsJsonObject().get("name").getAsString()
            + "\", fromBounds("
            + b1.get(0).getAsInt() + ", "
            + b1.get(1).getAsInt() + ", "
            + b2.get(0).getAsInt() + ", "
            + b2.get(1).getAsInt() + "));");
      }
      sb.append("\r\n}");
      System.out.println(sb.toString());
    } catch (JsonSyntaxException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

}

package com.sololegends.runelite.helpers;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.*;

import javax.inject.Inject;

import com.google.gson.*;
import com.google.gson.stream.MalformedJsonException;
import com.sololegends.runelite.*;
import com.sololegends.runelite.data.WorldRegions;
import com.sololegends.runelite.helpers.WorldLocations.WorldSurface;
import com.sololegends.runelite.skills.Health;
import com.sololegends.runelite.skills.Prayer;

import net.runelite.api.Point;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import okhttp3.*;

public class RemoteDataManager {

  private volatile boolean in_progress = false;
  private volatile boolean report_in_progress = false;
  private List<FriendMapPoint> FAKE_FRIENDS = new ArrayList<>();
  private Random rand = new Random();

  @Inject
  private FriendsOnMapPlugin plugin;

  @Inject
  private FriendsOnMapConfig config;

  @Inject
  private OkHttpClient http_client;

  private int errors = 0;
  private int errors_threshold = 10;
  private boolean error_notified = false;

  public void sendReport(JsonObject data, UpdateFlow update) {
    if (report_in_progress) {
      return;
    }
    report_in_progress = true;
    try {
      Request.Builder req_builder = new Request.Builder()
          .url(config.reportLink())
          .post(RequestBody.create(MediaType.get("application/json"), data.toString()));

      // Handle APi key, if present
      if (!config.friendsAPIKey().isBlank()) {
        req_builder.header("Authorization", "Bearer " + config.friendsAPIKey());
      }

      http_client.newCall(req_builder.build()).enqueue(new Callback() {
        @Override
        public void onFailure(Call call, IOException e) {
          update.error("Failed to call API");
          report_in_progress = false;
        }

        @Override
        public void onResponse(Call call, Response resp) throws IOException {
          if (resp.body() != null) {
            resp.body().close();
          }
          if (resp.code() == 200) {
            update.success("Location reported!");
            report_in_progress = false;
            return;
          }
          update.error("Failed to report!");
          report_in_progress = false;
        }
      });
    } catch (IllegalArgumentException e) {
      update.error("Config Error!");
    }
  }

  public void getServerLocations() {
    // Is disabled by config
    if (config.locationsLink() == null || config.locationsLink().isBlank()) {
      return;
    }
    try {
      Request.Builder req_builder = new Request.Builder()
          .url(config.locationsLink())
          .get();

      // Handle APi key, if present
      if (!config.friendsAPIKey().isBlank()) {
        req_builder.header("Authorization", "Bearer " + config.friendsAPIKey());
      }

      http_client.newCall(req_builder.build()).enqueue(new Callback() {
        @Override
        public void onFailure(Call call, IOException e) {
        }

        @Override
        public void onResponse(Call call, Response resp) throws IOException {
          if (resp.body() == null) {
            return;
          }

          if (resp.code() != 200) {
            System.err.println("FFP => Failed to retrieve server registered locations [" + resp.code() + "]");
            return;
          }
          try {
            JsonElement arr = new JsonParser().parse(resp.body().string());
            // Process retrieved locations
            if (arr.isJsonArray()) {
              JsonArray locations = arr.getAsJsonArray();
              if (locations != null && locations.size() > 0) {
                // Add new points
                Iterator<JsonElement> iter = locations.iterator();
                while (iter.hasNext()) {
                  JsonElement e = iter.next();
                  if (!e.isJsonObject()) {
                    continue;
                  }

                  JsonObject f = e.getAsJsonObject();
                  // Validate the friend object
                  try {
                    if (f.has("x") && f.has("y") && f.has("z") &&
                        f.has("location") && f.has("region") && f.has("instance")) {

                      int x = f.get("x").getAsInt();
                      int y = f.get("y").getAsInt();
                      int region = f.get("region").getAsInt();
                      int instance = f.get("instance").getAsInt();
                      if (instance != -1) {
                        region = instance;
                      }
                      String location = f.get("location").getAsString();

                      WorldRegions.addRegion(
                          WorldRegions.surface(location, x, y, WorldRegions.fromBounds(0, 0, 0, 0)),
                          !config.debugMode(),
                          region);
                    }
                  } catch (ClassCastException cce) {
                    // Nothing, just ignore the location
                  }

                }
              }

            }
          } catch (MalformedJsonException e) {
            System.err.println("FFP => Failed to retrieve server registered locations");
            e.printStackTrace();
          }
        }
      });
    } catch (IllegalArgumentException e) {
      System.err.println("FFP => Failed to retrieve server registered locations");
      e.printStackTrace();
    }
  }

  public void sendRequest(JsonObject data) {
    if (in_progress) {
      return;
    }
    in_progress = true;
    Request.Builder req_builder = null;
    try {
      req_builder = new Request.Builder()
          .url(config.friendsAPI())
          .post(RequestBody.create(MediaType.get("application/json"), data.toString()));

      // Handle APi key, if present
      if (!config.friendsAPIKey().isBlank()) {
        req_builder.header("Authorization", "Bearer " + config.friendsAPIKey());
      }
    } catch (IllegalArgumentException e) {
      System.err.println("Failed to setup url: " + e.getMessage());
      e.printStackTrace();
      return;
    }
    if (req_builder == null) {
      return;
    }

    http_client.newCall(req_builder.build()).enqueue(new Callback() {
      @Override
      public void onFailure(Call call, IOException e) {
        in_progress = false;
        if (e instanceof MalformedURLException) {
          plugin.message("Failed to retrieve friends from friends api: Invalid API URL");
          return;
        }
        // plugin.message("Failed to retrieve friends from friends api: API Call
        // Failed");
      }

      @Override
      public void onResponse(Call call, Response resp) throws IOException {
        if (resp.code() != 200 && !error_notified) {
          if (resp.body() != null) {
            resp.body().close();
          }
          if (errors < errors_threshold) {
            errors++;
          }
          errors = 0;
          error_notified = true;
          plugin.message("Failed to retrieve friends from friends api [RC2]");
          plugin.updated(System.currentTimeMillis() + (config.updateInterval().interval() * 9));
          in_progress = false;
          return;
        }
        try {
          JsonElement arr = new JsonParser().parse(resp.body().string());
          if (arr.isJsonArray()) {
            JsonArray my_friends = arr.getAsJsonArray();
            if (my_friends != null && my_friends.size() > 0) {
              // Add new points
              Iterator<JsonElement> iter = my_friends.iterator();
              while (iter.hasNext()) {
                JsonElement e = iter.next();
                if (!e.isJsonObject()) {
                  continue;
                }
                JsonObject f = e.getAsJsonObject();
                // Validate the friend object
                if (f.has("x") && f.has("y") && f.has("z") &&
                    f.has("name") && f.has("w")) {

                  String tool_tip = f.get("name").getAsString() + " -- World: " + f.get("w").getAsString();
                  FriendMapPoint wmp = new FriendMapPoint(
                      new WorldPoint(f.get("x").getAsInt(), f.get("y").getAsInt(), f.get("z").getAsInt()),
                      plugin.getIcon(!plugin.isCurrentWorld(f.get("w").getAsInt()), false, tool_tip,
                          false),
                      f.get("name").getAsString(),
                      f.get("w").getAsInt()) {
                    @Override
                    public void onEdgeSnap() {
                      super.onEdgeSnap();
                      plugin.updateFriendPointIcon(this, true);
                    }

                    @Override
                    public void onEdgeUnsnap() {
                      super.onEdgeUnsnap();
                      plugin.updateFriendPointIcon(this, true);
                    }
                  };

                  int ds = config.dotSize();
                  wmp.setImagePoint(new Point(ds / 2, ds / 2));
                  wmp.setName(f.get("name").getAsString());
                  wmp.setTooltip(tool_tip);
                  wmp.setSnapToEdge(true);
                  if (f.has("r")) {
                    wmp.setRegion(f.get("r").getAsInt());
                  }

                  if (f.has("l") && !f.get("l").isJsonNull()) {
                    WorldPoint entry = new WorldPoint(0, 0, 0);
                    if (f.has("lx") && f.has("ly")) {
                      int lx = f.get("lx").getAsInt();
                      int ly = f.get("ly").getAsInt();
                      int lp = f.has("lp") ? f.get("lp").getAsInt() : 0;
                      entry = new WorldPoint(lx, ly, lp);
                    }
                    WorldSurface loc = new WorldSurface(f.get("l").getAsString(), entry, new WorldArea(0, 0, 0, 0, 0));
                    wmp.setLocation(loc);
                  }

                  // If health set
                  if (f.has("hm") && f.get("hm").getAsInt() != -1 && f.has("hM") && f.get("hM").getAsInt() != -1) {
                    wmp.setHealth(new Health(f.get("hm").getAsInt(), f.get("hM").getAsInt()));
                  }

                  // If prayer set
                  if (f.has("pm") && f.get("pm").getAsInt() != -1 && f.has("pM") && f.get("pM").getAsInt() != -1) {
                    wmp.setPrayer(new Prayer(f.get("pm").getAsInt(), f.get("pM").getAsInt()));
                  }

                  plugin.addPoint(wmp);
                }
              }
            }
          }

        } catch (JsonSyntaxException e) {
          System.err.println("FFP => Malformed JSON from server, likely offline");
          in_progress = false;
        }
        // * If we need to render in some fake friends
        if (config.fakeFriends()) {
          int x = 1052, y2 = 4132, x2 = 3940, y = 2396;
          // Generate a surface world wo
          if (FAKE_FRIENDS.size() == 0) {
            // Generate some friends
            int count = rand.nextInt(15) + 20;
            for (int i = 0; i < count; i++) {
              String name = "Fake Friend #" + i;
              String tool_tip = name + " -- World: 000";
              FriendMapPoint fmp = new FriendMapPoint(
                  new WorldPoint(rand.nextInt(x2 - x) + x, rand.nextInt(y2 - y) + y, 0),
                  plugin.getIcon(!plugin.isCurrentWorld(0), false, tool_tip,
                      false),
                  name, 0);
              int ds = config.dotSize();
              fmp.setImagePoint(new Point(ds / 2, ds / 2));
              fmp.setName(name);
              fmp.setTooltip(tool_tip);
              fmp.setSnapToEdge(true);
              FAKE_FRIENDS.add(fmp);
            }
          }
          // Process moving those friends around a bit
          for (FriendMapPoint mp : FAKE_FRIENDS) {
            WorldPoint wp = mp.getWorldPoint();
            int nx = wp.getX() + (rand.nextInt(20) - 10);
            if (nx < x) {
              nx = x;
            }
            if (nx > x2) {
              nx = x2;
            }
            int ny = wp.getY() + (rand.nextInt(20) - 10);
            if (ny < y) {
              ny = y;
            }
            if (ny > y2) {
              ny = y2;
            }
            mp.setWorldPoint(new WorldPoint(nx, ny, wp.getPlane()));
            plugin.addPoint(mp);
          }
        } else {
          FAKE_FRIENDS.clear();
        }
        plugin.updatePanel();
        plugin.updated(System.currentTimeMillis());
        in_progress = false;
      }
    });
  }

  public abstract static class UpdateFlow {
    public abstract void success(String message);

    public abstract void error(String message);
  }
}

package com.sololegends.runelite.skills;

import net.runelite.api.Skill;

public abstract class PlayerSkill {
	int current, max;
	final Skill skill;

	protected PlayerSkill(Skill skill, int current, int max) {
		this.skill = skill;
		this.current = current;
		this.max = max;
	}

	public int current() {
		return current;
	}

	public Skill type() {
		return skill;
	}

	public int max() {
		return max;
	}

}

package com.sololegends.runelite.skills;

public class Health extends PlayerSkill {

	public Health(int current, int max) {
		super(net.runelite.api.Skill.HITPOINTS, current, max);
	}
}

package com.sololegends.runelite.skills;

public class Prayer extends PlayerSkill {

	public Prayer(int current, int max) {
		super(net.runelite.api.Skill.PRAYER, current, max);
	}
}

package com.sololegends.runelite;

import java.awt.image.BufferedImage;

import com.sololegends.runelite.helpers.WorldLocations;
import com.sololegends.runelite.helpers.WorldLocations.WorldSurface;
import com.sololegends.runelite.skills.Health;
import com.sololegends.runelite.skills.Prayer;

import net.runelite.api.Point;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.worldmap.WorldMapPoint;

public class FriendMapPoint extends WorldMapPoint {

  public static final int LIFETIME = 70_000;

  public final String friend;
  public int world;
  public int region = -1;
  public boolean left_align = false;

  private Health health = new Health(0, 0);
  private Prayer prayer = new Prayer(0, 0);
  private long updated = System.currentTimeMillis();
  private int point_offset = -1;
  private WorldSurface location = null;

  public FriendMapPoint(WorldPoint worldPoint, BufferedImage image, String friend, int world) {
    super(worldPoint, image);
    this.friend = friend;
    this.world = world;
    point_offset = image.getHeight() / 2;
  }

  public void update(FriendMapPoint fmp) {
    world = fmp.world;
    setHealth(fmp.getHealth());
    setPrayer(fmp.getPrayer());
    setWorldPoint(fmp.getWorldPoint());
    setRegion(fmp.getRegion());
    setLocation(fmp.getLocation());
    updated();
  }

  public void updated() {
    updated = System.currentTimeMillis();
  }

  public boolean expired() {
    return System.currentTimeMillis() - updated > LIFETIME;
  }

  public void setPrayer(Prayer prayer) {
    this.prayer = prayer;
  }

  public void setLocation(WorldSurface location) {
    this.location = location;
  }

  public void setHealth(Health health) {
    this.health = health;
  }

  public Prayer getPrayer() {
    return prayer;
  }

  public Health getHealth() {
    return health;
  }

  public void setRegion(int region) {
    this.region = region;
  }

  public int getRegion() {
    return region;
  }

  @Override
  public void onEdgeSnap() {
    super.onEdgeSnap();
    this.setJumpOnClick(true);

    // Setup the display of this icon
    setImagePoint(null);
  }

  @Override
  public void onEdgeUnsnap() {
    super.onEdgeUnsnap();
    this.setJumpOnClick(false);

    // Setup the display of this icon
    setImagePoint(new Point(point_offset, point_offset));
  }

  @Override
  public void setImage(BufferedImage image) {
    super.setImage(image);
    point_offset = image.getHeight() / 2;
    // Update the point
    if (!isCurrentlyEdgeSnapped()) {
      setImagePoint(new Point(point_offset, point_offset));
    }
  }

  public FriendMapPoint asOverworld() {
    return new FriendMapPoint(
        WorldPoint.getMirrorPoint(getWorldPoint(), true),
        getImage(), friend, world);
  }

  public boolean matches(FriendMapPoint fmp) {
    WorldPoint wp = getWorldPoint();
    WorldPoint fwp = fmp.getWorldPoint();
    return wp.getX() == fwp.getX() && wp.getY() == fwp.getY();
  }

  public WorldSurface getLocation() {
    WorldSurface sur = null;
    if (location != null) {
      return location;
    }
    if (getRegion() != -1) {
      sur = WorldLocations.getWorldSurface(getRegion());
    }
    if (sur == null) {
      sur = WorldLocations.getWorldSurface(getWorldPoint());
    }
    if (sur == null) {
      sur = new WorldSurface("Unknown", new WorldPoint(0, 0, 0), new WorldArea(0, 0, 0, 0, 0));

    }
    return sur;
  }

  @Override
  public int hashCode() {
    return -1;
  }

  @Override
  public boolean equals(Object o) {
    return o instanceof FriendMapPoint && ((FriendMapPoint) o).friend.equalsIgnoreCase(friend);
  }
}

package com.sololegends.runelite.data;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.sololegends.runelite.helpers.WorldLocations.WorldSurface;

import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;

public class WorldRegions {

  private static final Map<Integer, WorldSurface> REGIONS = new ConcurrentHashMap<>();

  // y and y2 are inverted because RS using a flipped y axis, this is for easy
  // listing
  public static WorldArea fromBounds(int x, int y2, int x2, int y) {
    return new WorldArea(x, y, x2 - x, y2 - y, 0);
  }

  public static WorldSurface surface(String name, int eX, int eY, WorldArea... areas) {
    return new WorldSurface(name, new WorldPoint(eX, eY, 0), areas);
  }

  public static void addRegion(WorldSurface surface, int... region_ids) {
    addRegion(surface, false, region_ids);
  }

  public static void addRegion(WorldSurface surface, boolean suppress_warning, int... region_ids) {
    for (int i : region_ids) {
      if (REGIONS.containsKey(i) && !suppress_warning) {
        WorldSurface existing = REGIONS.get(i);
        System.out.println(
            "FFP => WARNING: Duplicate Region ID registered [" + existing.name + " -> " + surface.name + ":" + i
                + "]");
      }
      REGIONS.put(i, surface);
    }
  }

  public static WorldSurface fromRegion(int region) {
    return REGIONS.get(region);
  }

  public static boolean hasRegion(int region) {
    return REGIONS.containsKey(region);
  }

  static {
    // Bosses
    addRegion(surface("Abyssal Sire", 0, 0, fromBounds(0, 0, 0, 0)), 11851, 11850, 12363, 12362);
    addRegion(surface("Cerberus", 0, 0, fromBounds(0, 0, 0, 0)), 4883, 5140, 5395);
    addRegion(surface("Commander Zilyana", 0, 0, fromBounds(0, 0, 0, 0)), 11602);
    addRegion(surface("Corporeal Beast", 0, 0, fromBounds(0, 0, 0, 0)), 11842, 11844);
    addRegion(surface("Dagannoth Kings", 0, 0, fromBounds(0, 0, 0, 0)), 11588, 11589);
    addRegion(surface("General Graardor", 0, 0, fromBounds(0, 0, 0, 0)), 11347);
    addRegion(surface("Giant Mole", 0, 0, fromBounds(0, 0, 0, 0)), 6993, 6992);
    addRegion(surface("Grotesque Guardians", 0, 0, fromBounds(0, 0, 0, 0)), 6727);
    addRegion(surface("Hespori", 0, 0, fromBounds(0, 0, 0, 0)), 5021);
    addRegion(surface("Alchemical Hydra", 0, 0, fromBounds(0, 0, 0, 0)), 5536);
    addRegion(surface("Kalphite Queen", 0, 0, fromBounds(0, 0, 0, 0)), 13972);
    addRegion(surface("Kraken", 0, 0, fromBounds(0, 0, 0, 0)), 9116);
    addRegion(surface("Kree'arra", 0, 0, fromBounds(0, 0, 0, 0)), 11346);
    addRegion(surface("K'ril Tsutsaroth", 0, 0, fromBounds(0, 0, 0, 0)), 11603);
    addRegion(surface("Nex", 0, 0, fromBounds(0, 0, 0, 0)), 11601);
    addRegion(surface("Nightmare of Ashihama", 0, 0, fromBounds(0, 0, 0, 0)), 15515);
    addRegion(surface("Sarachnis", 0, 0, fromBounds(0, 0, 0, 0)), 7322);
    addRegion(surface("Skotizo", 0, 0, fromBounds(0, 0, 0, 0)), 6810);
    addRegion(surface("Thermonuclear smoke devil", 0, 0, fromBounds(0, 0, 0, 0)), 9363, 9619);
    addRegion(surface("Tempoross", 0, 0, fromBounds(0, 0, 0, 0)), 12078);
    addRegion(surface("Vorkath", 0, 0, fromBounds(0, 0, 0, 0)), 9023);
    addRegion(surface("Wintertodt", 0, 0, fromBounds(0, 0, 0, 0)), 6462);
    addRegion(surface("Zalcano", 0, 0, fromBounds(0, 0, 0, 0)), 12126);
    addRegion(surface("Zulrah", 0, 0, fromBounds(0, 0, 0, 0)), 9007);
    addRegion(surface("Skotizo", 0, 0, fromBounds(0, 0, 0, 0)), 9048);
    addRegion(surface("Vardorvis", 0, 0, fromBounds(0, 0, 0, 0)), 4405);
    addRegion(surface("Duke Sucellus", 0, 0, fromBounds(0, 0, 0, 0)), 12132);
    addRegion(surface("The Whisper", 0, 0, fromBounds(0, 0, 0, 0)), 10340);

    // Cities
    // !TBD

    // Dungeons (113)
    addRegion(surface("Abandoned Mine", 0, 0, fromBounds(0, 0, 0, 0)), 13618, 13718, 11079, 11078, 11077, 10823, 10822,
        10821);
    addRegion(surface("Ah Za Rhoon", 0, 0, fromBounds(0, 0, 0, 0)), 11666);
    addRegion(surface("Ancient Cavern", 0, 0, fromBounds(0, 0, 0, 0)), 6483, 6995);
    addRegion(surface("Ape Atoll Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 11150, 10894);
    addRegion(surface("Ape Atoll Banana Plantation", 0, 0, fromBounds(0, 0, 0, 0)), 10895);
    addRegion(surface("West Ardougne Basement", 0, 0, fromBounds(0, 0, 0, 0)), 10135);
    addRegion(surface("Ardougne Sewers", 0, 0, fromBounds(0, 0, 0, 0)), 10134, 10136, 10391, 10647);
    addRegion(surface("Asgarnian Ice Caves", 0, 0, fromBounds(0, 0, 0, 0)), 11925, 12181);
    addRegion(surface("Tomb of Bervirius", 0, 0, fromBounds(0, 0, 0, 0)), 11154);
    addRegion(surface("Brimhaven Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10901, 10900, 10899, 10645, 10644, 10643);
    addRegion(surface("Brine Rat Cavern", 0, 0, fromBounds(0, 0, 0, 0)), 10910);
    addRegion(surface("Catacombs of Kourend", 0, 0, fromBounds(0, 0, 0, 0)), 6557, 6556, 6813, 6812);
    addRegion(surface("Champions' Challenge", 0, 0, fromBounds(0, 0, 0, 0)), 12696);
    addRegion(surface("Chaos Druid Tower", 0, 0, fromBounds(0, 0, 0, 0)), 10392);
    addRegion(surface("Chasm of Fire", 0, 0, fromBounds(0, 0, 0, 0)), 5789);
    addRegion(surface("Chasm of Tears", 0, 0, fromBounds(0, 0, 0, 0)), 12948);
    addRegion(surface("Chinchompa Hunting Ground", 0, 0, fromBounds(0, 0, 0, 0)), 10129);
    addRegion(surface("Clock Tower Basement", 0, 0, fromBounds(0, 0, 0, 0)), 10390);
    addRegion(surface("Corsair Cove Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 8076, 8332);
    addRegion(surface("Crabclaw Caves", 0, 0, fromBounds(0, 0, 0, 0)), 6553, 6809);
    addRegion(surface("Crandor Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 11414);
    addRegion(surface("Crash Site Cavern", 0, 0, fromBounds(0, 0, 0, 0)), 8280, 8536);
    addRegion(surface("Crumbling Tower", 0, 0, fromBounds(0, 0, 0, 0)), 7827);
    addRegion(surface("Daeyalt Essence Mine", 0, 0, fromBounds(0, 0, 0, 0)), 14744);
    addRegion(surface("Digsite Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 13464, 13465);
    addRegion(surface("Dorgesh-Kaan South Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10833);
    addRegion(surface("Dorgeshuun Mines", 0, 0, fromBounds(0, 0, 0, 0)), 12950, 13206);
    addRegion(surface("Draynor Sewers", 0, 0, fromBounds(0, 0, 0, 0)), 12439, 12438);
    addRegion(surface("Dwarven Mines", 0, 0, fromBounds(0, 0, 0, 0)), 12185, 12184, 12183);
    addRegion(surface("Eagles' Peak Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 8013);
    addRegion(surface("Ectofuntus", 0, 0, fromBounds(0, 0, 0, 0)), 14746);
    addRegion(surface("Edgeville Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 12441, 12442, 12443, 12698);
    addRegion(surface("Elemental Workshop", 0, 0, fromBounds(0, 0, 0, 0)), 10906, 7760);
    addRegion(surface("Elven rabbit cave", 0, 0, fromBounds(0, 0, 0, 0)), 13252);
    addRegion(surface("Enakhra's Temple", 0, 0, fromBounds(0, 0, 0, 0)), 12423);
    addRegion(surface("Evil Chicken's Lair", 0, 0, fromBounds(0, 0, 0, 0)), 9796);
    addRegion(surface("Experiment Cave", 0, 0, fromBounds(0, 0, 0, 0)), 14235, 13979);
    addRegion(surface("Ferox Enclave Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 12700);
    addRegion(surface("Forthos Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 7323);
    addRegion(surface("Fremennik Slayer Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10907, 10908, 11164);
    addRegion(surface("Glarial's Tomb", 0, 0, fromBounds(0, 0, 0, 0)), 10137);
    addRegion(surface("Goblin Cave", 0, 0, fromBounds(0, 0, 0, 0)), 10393);
    addRegion(surface("Grand Tree Tunnels", 0, 0, fromBounds(0, 0, 0, 0)), 9882);
    addRegion(surface("H.A.M. Hideout", 0, 0, fromBounds(0, 0, 0, 0)), 12694);
    addRegion(surface("H.A.M. Store room", 0, 0, fromBounds(0, 0, 0, 0)), 10321);
    addRegion(surface("Heroes' Guild Mine", 0, 0, fromBounds(0, 0, 0, 0)), 11674);
    addRegion(surface("Iorwerth Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 12737, 12738, 12993, 12994);
    addRegion(surface("Isle of Souls Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 8593);
    addRegion(surface("Jatizso Mines", 0, 0, fromBounds(0, 0, 0, 0)), 9631);
    addRegion(surface("Jiggig Burial Tomb", 0, 0, fromBounds(0, 0, 0, 0)), 9875, 9874);
    addRegion(surface("Jogre Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 11412);
    addRegion(surface("Karamja Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 11413);
    addRegion(surface("Karuulm Slayer Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 5280, 5279, 5023, 5535, 5022, 4766, 4510,
        4511, 4767, 4768, 4512);
    addRegion(surface("KGP Headquarters", 0, 0, fromBounds(0, 0, 0, 0)), 10658);
    addRegion(surface("Kruk's Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 9358, 9359, 9360, 9615, 9616, 9871, 10125, 10126,
        10127, 10128, 10381, 10382, 10383, 10384, 10637, 10638, 10639, 10640);
    addRegion(surface("Legends' Guild Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10904);
    addRegion(surface("Lighthouse", 0, 0, fromBounds(0, 0, 0, 0)), 10140);
    addRegion(surface("Lizardman Caves", 0, 0, fromBounds(0, 0, 0, 0)), 5275);
    addRegion(surface("Lizardman Temple", 0, 0, fromBounds(0, 0, 0, 0)), 5277);
    addRegion(surface("Lumbridge Swamp Caves", 0, 0, fromBounds(0, 0, 0, 0)), 12693, 12949);
    addRegion(surface("Lunar Isle Mine", 0, 0, fromBounds(0, 0, 0, 0)), 9377);
    addRegion(surface("Maniacal Monkey Hunter Area", 0, 0, fromBounds(0, 0, 0, 0)), 11662);
    addRegion(surface("Meiyerditch Mine", 0, 0, fromBounds(0, 0, 0, 0)), 9544);
    addRegion(surface("Miscellania Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10144, 10400);
    addRegion(surface("Mogre Camp", 0, 0, fromBounds(0, 0, 0, 0)), 11924);
    addRegion(surface("Mos Le'Harmless Caves", 0, 0, fromBounds(0, 0, 0, 0)), 14994, 14995, 15251);
    addRegion(surface("Motherlode Mine", 0, 0, fromBounds(0, 0, 0, 0)), 14679, 14680, 14681, 14935, 14936, 14937, 15191,
        15192, 15193);
    addRegion(surface("Mourner Tunnels", 0, 0, fromBounds(0, 0, 0, 0)), 7752, 8008);
    addRegion(surface("Mouse Hole", 0, 0, fromBounds(0, 0, 0, 0)), 9046);
    addRegion(surface("Myreditch Laboratories", 0, 0, fromBounds(0, 0, 0, 0)), 14232, 14233, 14487, 14488);
    addRegion(surface("Myreque Hideout", 0, 0, fromBounds(0, 0, 0, 0)), 13721, 13974, 13977, 13978);
    addRegion(surface("Myths' Guild Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 7564, 7820, 7821);
    addRegion(surface("Observatory Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 9362);
    addRegion(surface("Ogre Enclave", 0, 0, fromBounds(0, 0, 0, 0)), 10387);
    addRegion(surface("Ourania Cave", 0, 0, fromBounds(0, 0, 0, 0)), 12119);
    addRegion(surface("Quidamortem Cave", 0, 0, fromBounds(0, 0, 0, 0)), 4763);
    addRegion(surface("Rashiliyta's Tomb", 0, 0, fromBounds(0, 0, 0, 0)), 11668);
    addRegion(surface("Ruins of Camdozaal", 0, 0, fromBounds(0, 0, 0, 0)), 11609, 11610, 11611, 11865, 11866, 11867,
        12121, 12122, 12123);
    addRegion(surface("Salt Mine", 0, 0, fromBounds(0, 0, 0, 0)), 11425);
    addRegion(surface("Saradomin Shrine (Paterdomus))", 0, 0, fromBounds(0, 0, 0, 0)), 13722);
    addRegion(surface("Shade Catacombs", 0, 0, fromBounds(0, 0, 0, 0)), 13975);
    addRegion(surface("Shadow Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10575, 10831);
    addRegion(surface("Shayzien Crypts", 0, 0, fromBounds(0, 0, 0, 0)), 6043);
    addRegion(surface("Sisterhood Sanctuary", 0, 0, fromBounds(0, 0, 0, 0)), 14999, 15000, 15001, 15255, 15256, 15257,
        15511, 15512, 15513);
    addRegion(surface("Smoke Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 12946, 13202, 12690);
    addRegion(surface("Sophanem Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 13200);
    addRegion(surface("Sourhog Cave", 0, 0, fromBounds(0, 0, 0, 0)), 12695);
    addRegion(surface("Stronghold of Security", 0, 0, fromBounds(0, 0, 0, 0)), 7505, 8017, 8530, 9297);
    addRegion(surface("Stronghold Slayer Cave", 0, 0, fromBounds(0, 0, 0, 0)), 9624, 9625, 9880, 9881);
    addRegion(surface("Tarn's Lair", 0, 0, fromBounds(0, 0, 0, 0)), 12616, 12615);
    addRegion(surface("Taverley Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 11416, 11417, 11671, 11672, 11673, 11928,
        11929);
    addRegion(surface("Temple of Ikov", 0, 0, fromBounds(0, 0, 0, 0)), 10649, 10905, 10650);
    addRegion(surface("Temple of Light", 0, 0, fromBounds(0, 0, 0, 0)), 7496);
    addRegion(surface("Temple of Marimbo", 0, 0, fromBounds(0, 0, 0, 0)), 11151);
    addRegion(surface("The Warrens", 0, 0, fromBounds(0, 0, 0, 0)), 7070, 7326);
    addRegion(surface("Dungeon of Tolna", 0, 0, fromBounds(0, 0, 0, 0)), 13209);
    addRegion(surface("Tower of Life Basement", 0, 0, fromBounds(0, 0, 0, 0)), 12100);
    addRegion(surface("Trahaearn Mine", 0, 0, fromBounds(0, 0, 0, 0)), 13250);
    addRegion(surface("Tunnel of Chaos", 0, 0, fromBounds(0, 0, 0, 0)), 12625);
    addRegion(surface("Underground Pass", 0, 0, fromBounds(0, 0, 0, 0)), 9369, 9370);
    addRegion(surface("Varrock Sewers", 0, 0, fromBounds(0, 0, 0, 0)), 12954, 13210);
    addRegion(surface("Viyeldi Caves", 0, 0, fromBounds(0, 0, 0, 0)), 9545, 11153);
    addRegion(surface("Warriors' Guild Basement", 0, 0, fromBounds(0, 0, 0, 0)), 11675);
    addRegion(surface("Water Ravine", 0, 0, fromBounds(0, 0, 0, 0)), 13461);
    addRegion(surface("Waterbirth Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 9886, 10142, 7492, 7748);
    addRegion(surface("Waterfall Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10394);
    addRegion(surface("Werewolf Agility Course", 0, 0, fromBounds(0, 0, 0, 0)), 14234);
    addRegion(surface("White Wolf Mountain Caves", 0, 0, fromBounds(0, 0, 0, 0)), 11418, 11419);
    addRegion(surface("Witchhaven Shrine Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10903);
    addRegion(surface("Wizards' Tower Basement", 0, 0, fromBounds(0, 0, 0, 0)), 12437);
    addRegion(surface("Woodcutting Guild Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 6298);
    addRegion(surface("Wyvern Cave", 0, 0, fromBounds(0, 0, 0, 0)), 14495, 14496);
    addRegion(surface("Yanille Agility Dungeon", 0, 0, fromBounds(0, 0, 0, 0)), 10388);
    addRegion(surface("Poison Waste Underground", 0, 0, fromBounds(0, 0, 0, 0)), 5954);
    addRegion(surface("The Scar", 0, 0, fromBounds(0, 0, 0, 0)), 8036, 8804, 7012, 7524);
    addRegion(surface("Lassar Undercity", 0, 0, fromBounds(0, 0, 0, 0)), 10596, 10852, 10339, 10338, 10594, 10595,
        10850, 10851);
    addRegion(surface("Lasser - Shadow Realm", 0, 0, fromBounds(0, 0, 0, 0)), 9316, 9315, 9314, 9572, 9571, 9570, 9828,
        9827, 9826);

    // Minigames
    addRegion(surface("Ardougne Rat Pits", 0, 0, fromBounds(0, 0, 0, 0)), 10646);
    addRegion(surface("Barbarian Assault", 0, 0, fromBounds(0, 0, 0, 0)), 7508, 7509, 10322);
    addRegion(surface("Barrows", 0, 0, fromBounds(0, 0, 0, 0)), 14131, 14231);
    addRegion(surface("Blast Furnace", 0, 0, fromBounds(0, 0, 0, 0)), 7757);
    addRegion(surface("Brimhaven Agility Arena", 0, 0, fromBounds(0, 0, 0, 0)), 11157);
    addRegion(surface("Burthorpe Games Room", 0, 0, fromBounds(0, 0, 0, 0)), 8781);
    addRegion(surface("Castle Wars", 0, 0, fromBounds(0, 0, 0, 0)), 9520, 9620);
    addRegion(surface("Clan Wars", 0, 0, fromBounds(0, 0, 0, 0)), 12621, 12622, 12623, 13130, 13131, 13133, 13134,
        13135, 13386, 13387, 13390, 13641, 13642, 13643, 13644, 13645, 13646, 13647, 13899, 13900, 14155, 14156);
    addRegion(surface("PvP Arena", 0, 0, fromBounds(0, 0, 0, 0)), 13362, 13363);
    addRegion(surface("Fishing Trawler", 0, 0, fromBounds(0, 0, 0, 0)), 7499, 8011);
    addRegion(surface("The Gauntlet", 0, 0, fromBounds(0, 0, 0, 0)), 12127, 7512);
    addRegion(surface("Corrupted Gauntlet", 0, 0, fromBounds(0, 0, 0, 0)), 7768);
    addRegion(surface("Hallowed Sepulchre", 0, 0, fromBounds(0, 0, 0, 0)), 8797, 9051, 9052, 9053, 9054, 9309, 9563,
        9565, 9821, 10074, 10075, 10077);
    addRegion(surface("The Inferno", 0, 0, fromBounds(0, 0, 0, 0)), 9043);
    addRegion(surface("Keldagrim Rat Pits", 0, 0, fromBounds(0, 0, 0, 0)), 7753);
    addRegion(surface("LMS - Deserted Island", 0, 0, fromBounds(0, 0, 0, 0)), 13658, 13659, 13660, 13914, 13915, 13916);
    addRegion(surface("LMS - Wild Varrock", 0, 0, fromBounds(0, 0, 0, 0)), 13918, 13919, 13920, 14174, 14175, 14176,
        14430, 14431, 14432);
    addRegion(surface("Mage Training Arena", 0, 0, fromBounds(0, 0, 0, 0)), 13462, 13463);
    addRegion(surface("Nightmare Zone", 0, 0, fromBounds(0, 0, 0, 0)), 9033);
    addRegion(surface("Pest Control", 0, 0, fromBounds(0, 0, 0, 0)), 10536);
    addRegion(surface("Port Sarim Rat Pits", 0, 0, fromBounds(0, 0, 0, 0)), 11926);
    addRegion(surface("Pyramid Plunder", 0, 0, fromBounds(0, 0, 0, 0)), 7749);
    addRegion(surface("Rogues' Den", 0, 0, fromBounds(0, 0, 0, 0)), 11854, 11855, 12109, 12110, 12111);
    addRegion(surface("Sorceress's Garden", 0, 0, fromBounds(0, 0, 0, 0)), 11605);
    addRegion(surface("Soul Wars", 0, 0, fromBounds(0, 0, 0, 0)), 8493, 8748, 8749, 9005);
    addRegion(surface("Temple Trekking", 0, 0, fromBounds(0, 0, 0, 0)), 8014, 8270, 8256, 8782, 9038, 9294, 9550, 9806);
    addRegion(surface("Tithe Farm", 0, 0, fromBounds(0, 0, 0, 0)), 7222);
    addRegion(surface("Trouble Brewing", 0, 0, fromBounds(0, 0, 0, 0)), 15150);
    addRegion(surface("Tzhaar Fight Caves", 0, 0, fromBounds(0, 0, 0, 0)), 9551);
    addRegion(surface("Tzhaar Fight Pits", 0, 0, fromBounds(0, 0, 0, 0)), 9552);
    addRegion(surface("Varrock Rat Pits", 0, 0, fromBounds(0, 0, 0, 0)), 11599);
    addRegion(surface("Volcanic Mine", 0, 0, fromBounds(0, 0, 0, 0)), 15263, 15262);
    addRegion(surface("Guardians of the Rift", 0, 0, fromBounds(0, 0, 0, 0)), 14484);
    addRegion(surface("Giant's Foundry", 0, 0, fromBounds(0, 0, 0, 0)), 13491);

    // Raids
    addRegion(surface("Chambers of Xeric", 0, 0, fromBounds(0, 0, 0, 0)), 12889, 13136, 13137, 13138, 13139, 13140,
        13141, 13145, 13393, 13394, 13395, 13396, 13397, 13401);
    addRegion(surface("Theatre of Blood", 0, 0, fromBounds(0, 0, 0, 0)), 12611, 12612, 12613, 12867, 12869, 13122,
        13123, 13125, 13379);
    addRegion(surface("Tombs of Amascut", 0, 0, fromBounds(0, 0, 0, 0)), 14160, 14672, 13454, 14674, 14676, 15184);

    // Other
    addRegion(surface("Home, Sweet Home", 0, 0, fromBounds(0, 0, 0, 0)), 7513);
    addRegion(surface("Old Man's Maze", 0, 0, fromBounds(0, 0, 0, 0)), 11591);
    addRegion(surface("Osmumten's Tomb", 0, 0, fromBounds(0, 0, 0, 0)), 13712, 13456);
    addRegion(surface("Cosmic Entity's Plane", 0, 0, fromBounds(0, 0, 0, 0)), 8267);
    addRegion(surface("Icyene Graveyard", 0, 0, fromBounds(0, 0, 0, 0)), 14641);
    addRegion(surface("Baba Yaga's House", 0, 0, fromBounds(0, 0, 0, 0)), 9800);
    addRegion(surface("Killerwatt Rift", 0, 0, fromBounds(0, 0, 0, 0)), 10577);
    addRegion(surface("Enchanted Valley", 0, 0, fromBounds(0, 0, 0, 0)), 12102);
    addRegion(surface("Essence Mine", 0, 0, fromBounds(0, 0, 0, 0)), 11595);
    addRegion(surface("Sophanem Bank", 0, 0, fromBounds(0, 0, 0, 0)), 11088);
    addRegion(surface("Puro-Puro", 0, 0, fromBounds(0, 0, 0, 0)), 10307);
    addRegion(surface("Grand Library", 0, 0, fromBounds(0, 0, 0, 0)), 10336, 10335, 10592, 10591);
    addRegion(surface("Burning Lletya", 0, 0, fromBounds(0, 0, 0, 0)), 11103);
    addRegion(surface("Prifddinas", 0, 0, fromBounds(0, 0, 0, 0)), 13150);

    // Rune alters
    addRegion(surface("Air Alter", 0, 0, fromBounds(0, 0, 0, 0)), 11339);
    addRegion(surface("Earth Alter", 0, 0, fromBounds(0, 0, 0, 0)), 10571);
    addRegion(surface("Water Alter", 0, 0, fromBounds(0, 0, 0, 0)), 10827);
    addRegion(surface("Fire Alter", 0, 0, fromBounds(0, 0, 0, 0)), 10315);
    addRegion(surface("Mind Alter", 0, 0, fromBounds(0, 0, 0, 0)), 11083);
    addRegion(surface("Body Alter", 0, 0, fromBounds(0, 0, 0, 0)), 10059);
    addRegion(surface("Chaos Alter", 0, 0, fromBounds(0, 0, 0, 0)), 9035);
    addRegion(surface("Death Alter", 0, 0, fromBounds(0, 0, 0, 0)), 8779);
    // addRegion(surface("Blood Alter", 0, 0, fromBounds(0, 0, 0, 0)), 000);
    addRegion(surface("Law Alter", 0, 0, fromBounds(0, 0, 0, 0)), 9803);
    addRegion(surface("Nature Alter", 0, 0, fromBounds(0, 0, 0, 0)), 9547);
    addRegion(surface("Cosmic Alter", 0, 0, fromBounds(0, 0, 0, 0)), 8523);

    // Surface Areas
    addRegion(surface("Zanaris", 0, 0, fromBounds(0, 0, 0, 0)), 9541, 9797, 9540);
    addRegion(surface("Kalphite Caves", 0, 0, fromBounds(0, 0, 0, 0)), 13461, 13460, 13716);
    addRegion(surface("Mage Arena Basement", 0, 0, fromBounds(0, 0, 0, 0)), 10057);
    addRegion(surface("The Stranglewood", 0, 0, fromBounds(0, 0, 0, 0)), 4661, 4760, 4660, 4404, 4403);

    // Cities
    addRegion(surface("Mor-Ul-Rek", 0, 0, fromBounds(0, 0, 0, 0)), 9808, 10064, 9807, 10069);

    // Events
    addRegion(surface("Mime Show", 0, 0, fromBounds(0, 0, 0, 0)), 8010);

    // Varlamore
    addRegion(surface("Crypt of Ranul", 0, 0, fromBounds(0, 0, 0, 0)), 6804, 6805);
    addRegion(surface("Barracks Basement", 0, 0, fromBounds(0, 0, 0, 0)), 6549);
    addRegion(surface("Cam Torum", 0, 0, fromBounds(0, 0, 0, 0)), 5780, 6036);
    addRegion(surface("Perilous Moons Antechamber", 0, 0, fromBounds(0, 0, 0, 0)), 5781, 5782);
    addRegion(surface("The Blood Moon", 0, 0, fromBounds(0, 0, 0, 0)), 5526);
    addRegion(surface("The Eclipse Moon", 0, 0, fromBounds(0, 0, 0, 0)), 6038);
    addRegion(surface("The Blue Moon", 0, 0, fromBounds(0, 0, 0, 0)), 5783);
    addRegion(surface("Earthbound Cavern", 0, 0, fromBounds(0, 0, 0, 0)), 5527);
    addRegion(surface("Streambound Cavern", 0, 0, fromBounds(0, 0, 0, 0)), 6039);
    addRegion(surface("Ancient Shrine", 0, 0, fromBounds(0, 0, 0, 0)), 6037);
    addRegion(surface("Ancient Prison", 0, 0, fromBounds(0, 0, 0, 0)), 5525);
    addRegion(surface("Fortis Colusseum", 0, 0, fromBounds(0, 0, 0, 0)), 7316);
    addRegion(surface("Hunter Guild Basement", 0, 0, fromBounds(0, 0, 0, 0)), 6291);

  }
}

package com.sololegends.runelite.overlay;

import java.awt.Dimension;
import java.awt.Graphics2D;

import javax.inject.Inject;

import com.sololegends.runelite.FriendsOnMapConfig;
import com.sololegends.runelite.FriendsOnMapPlugin;
import com.sololegends.runelite.helpers.WorldLocations;
import com.sololegends.runelite.helpers.WorldLocations.WorldSurface;

import net.runelite.api.Client;
import net.runelite.api.coords.*;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.components.LineComponent;

public class PlayerLocationOverlayPanel extends OverlayPanel {

  private FriendsOnMapConfig config;
  private FriendsOnMapPlugin plugin;
  private Client client;

  @Inject
  private PlayerLocationOverlayPanel(FriendsOnMapPlugin plugin, FriendsOnMapConfig config, Client client) {
    super(plugin);
    setPosition(OverlayPosition.TOP_LEFT);
    setPriority(Overlay.PRIORITY_LOW);
    this.config = config;
    this.client = client;
    this.plugin = plugin;
  }

  @Override
  public Dimension render(Graphics2D graphics) {
    if (config.yourLocation()) {
      WorldPoint player = client.getLocalPlayer().getWorldLocation();
      LocalPoint local = client.getLocalPlayer().getLocalLocation();
      int region_id = player.getRegionID();
      if (plugin.inInstancedRegion()) {
        region_id = WorldPoint.fromLocalInstance(client, local).getRegionID();
      }
      WorldSurface s = WorldLocations.getWorldSurface(region_id);
      if (s == null || s.name.equals("Unknown")) {
        s = WorldLocations.getWorldSurface(player);
      }
      if (s == null) {
        s = new WorldSurface("Unknown", new WorldPoint(0, 0, 0), new WorldArea(0, 0, 0, 0, 0));
      }
      panelComponent.getChildren().add(LineComponent.builder()
          .left(s.name)
          .right("" + region_id)
          .build());
    }
    return super.render(graphics);
  }
}

package com.sololegends.runelite.overlay;

import java.awt.*;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.util.*;

import com.google.inject.Inject;
import com.sololegends.runelite.*;
import com.sololegends.runelite.helpers.WorldLocations;
import com.sololegends.runelite.helpers.WorldLocations.WorldSurface;

import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.worldmap.WorldMap;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.worldmap.WorldMapOverlay;

public class OtherSurfacePlayersOverlay extends Overlay {

  private static final Font FONT = FontManager.getRunescapeFont().deriveFont(Font.BOLD, 16);
  private final Client client;
  private final FriendsOnMapPlugin plugin;
  private final FriendsOnMapConfig config;

  @Inject
  private WorldMapOverlay map_overlay;

  @Inject
  private OtherSurfacePlayersOverlay(Client client, FriendsOnMapPlugin plugin, FriendsOnMapConfig config) {
    super(plugin);
    this.client = client;
    this.plugin = plugin;
    this.config = config;
    setPosition(OverlayPosition.DYNAMIC);
    setPriority(Overlay.PRIORITY_HIGHEST);
    setLayer(OverlayLayer.ABOVE_WIDGETS);
    drawAfterLayer(ComponentID.WORLD_MAP_MAPVIEW);
  }

  @Override
  public Dimension render(Graphics2D g) {
    Widget parent = client.getWidget(ComponentID.WORLD_MAP_MAPVIEW);
    if (parent == null || parent.isHidden()) {
      return null;
    }
    Point mouse = client.getMouseCanvasPosition();

    Rectangle bounds = parent.getBounds();
    Shape clip = getWorldMapClipArea(bounds);
    g.setClip(clip);

    int y_offset = 10, x = 0, y = 0;
    WorldMap worldMap = client.getWorldMap();

    String draw_tip = null;
    int draw_tip_region = -1;

    ArrayList<FriendMapPoint> points = new ArrayList<>(plugin.currentPoints());
    points.sort(new Comparator<FriendMapPoint>() {
      @Override
      public int compare(FriendMapPoint o1, FriendMapPoint o2) {
        return o1.friend.compareTo(o2.friend);
      }
    });
    for (FriendMapPoint f : points) {
      if (worldMap.getWorldMapData().surfaceContainsPosition(f.getWorldPoint().getX(), f.getWorldPoint().getY())) {
        continue;
      }
      x = bounds.x + 10;
      y = bounds.y + y_offset;
      // Not in the same world surface
      Dimension dim = drawLocationGraphic(g, f, x, y);
      // If mouse is hovering over a friend chip
      if (mouse.getX() > x && mouse.getX() < x + dim.width
          && mouse.getY() > y && mouse.getY() < y + dim.height) {
        // Draw tool tip stating world surface
        WorldSurface loc = f.getLocation();
        draw_tip = loc.name;
        draw_tip_region = f.region;
      }
      y_offset += dim.getHeight() + 5;
    }

    if (config.mapDrawAreas()) {
      drawAreas(g, worldMap);
    }
    // Render tool tip last so it is on top
    if (draw_tip != null) {
      plugin.drawToolTip(g, draw_tip, mouse.getX(), 20 + mouse.getY(), draw_tip_region);
    }
    return null;
  }

  private void drawAreas(Graphics2D g, WorldMap map) {
    Set<WorldSurface> surfaces = WorldLocations.getSurfaces();
    Widget map_w = client.getWidget(ComponentID.WORLD_MAP_MAPVIEW);

    if (map_w == null) {
      return;
    }

    g.setFont(FontManager.getRunescapeFont().deriveFont(Font.PLAIN, 13));
    FontMetrics fm = g.getFontMetrics();
    for (WorldSurface s : surfaces) {
      for (WorldArea a : s.areas) {
        WorldPoint start = new WorldPoint(a.getX(), a.getY(), 0);
        WorldPoint end = new WorldPoint(a.getX() + a.getWidth(), a.getY() + a.getHeight(), 0);
        Point draw_start = map_overlay.mapWorldPointToGraphicsPoint(start);
        Point draw_end = map_overlay.mapWorldPointToGraphicsPoint(end);

        if (draw_start == null || draw_end == null) {
          continue;
        }
        g.setColor(Color.RED);
        g.drawRect(draw_start.getX(), draw_end.getY(), draw_end.getX() - draw_start.getX(),
            draw_start.getY() - draw_end.getY());
        Rectangle2D bounds = fm.getStringBounds(s.name, g);
        g.setColor(Color.BLACK);
        g.drawString(s.name, draw_start.getX() + 4, draw_end.getY() + 2 + (int) bounds.getHeight());
        g.setColor(Color.WHITE);
        g.drawString(s.name, draw_start.getX() + 3, draw_end.getY() + 3 + (int) bounds.getHeight());
      }
    }
  }

  private Dimension drawLocationGraphic(Graphics2D g, FriendMapPoint f, int x_offset, int y_offset) {
    g.setFont(FONT);
    FontMetrics fm = g.getFontMetrics();
    Rectangle2D bounds = fm.getStringBounds(f.getName(), g);

    Dimension dim = plugin.drawIcon(f.world != client.getWorld(), true, g, x_offset, y_offset);

    // Drop shadow
    g.setColor(Color.BLACK);
    g.drawString(f.getName(), x_offset + 6 + dim.width, 1 + y_offset + (int) bounds.getHeight());

    g.setColor(Color.WHITE);
    g.drawString(f.getName(), x_offset + 5 + dim.width, y_offset + (int) bounds.getHeight());

    return new Dimension(dim.width + (int) bounds.getWidth() + 5, (int) bounds.getHeight());
  }

  /**
   * Gets a clip area which excludes the area of widgets which overlay the world
   * map.
   *
   * @param baseRectangle The base area to clip from
   * @return An {@link Area} representing <code>baseRectangle</code>, with the
   *         area
   *         of visible widgets overlaying the world map clipped from it.
   */
  private Shape getWorldMapClipArea(Rectangle baseRectangle) {
    final Widget overview = client.getWidget(ComponentID.WORLD_MAP_OVERVIEW_MAP);
    final Widget surfaceSelector = client.getWidget(ComponentID.WORLD_MAP_SURFACE_SELECTOR);

    Area clipArea = new Area(baseRectangle);
    boolean subtracted = false;

    if (overview != null && !overview.isHidden()) {
      clipArea.subtract(new Area(overview.getBounds()));
      subtracted = true;
    }

    if (surfaceSelector != null && !surfaceSelector.isHidden()) {
      clipArea.subtract(new Area(surfaceSelector.getBounds()));
      subtracted = true;
    }

    // The sun g2d implementation is much more efficient at applying clips which are
    // subclasses of rectangle2d,
    // so use that as the clip shape if possible
    return subtracted ? clipArea : baseRectangle;
  }
}

package com.sololegends.runelite;

import java.awt.Color;

import net.runelite.client.config.*;

@ConfigGroup("Friend Finder")
public interface FriendsOnMapConfig extends Config {

  @ConfigSection(name = "Styling", description = "Stylize it!", position = 10)
  String styling_section = "styling";

  @ConfigSection(name = "Custom API", description = "Set a custom private API", position = 20)
  String custom_section = "custom";

  @ConfigSection(name = "Debug", description = "Debugging", position = 30, closedByDefault = true)
  String debug_section = "debug";

  public static enum UpdateIntervalEnum {
    SECONDS_1("1 Second", 1),
    SECONDS_2("2 Seconds", 2),
    SECONDS_5("5 Seconds", 5),
    SECONDS_10("10 Seconds", 10),
    SECONDS_20("20 Seconds", 20),
    SECONDS_30("30 Seconds", 30),
    SECONDS_60("60 Seconds", 60);

    private final String name;
    private final int interval;

    UpdateIntervalEnum(String name, int interval) {
      this.name = name;
      this.interval = interval;
    }

    public int interval() {
      return interval * 1000;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  @ConfigItem(position = 0, section = "General", keyName = "dbl_click_ch_world", name = "Double Click to change world", description = "When true double clicking a friend's icon will switch to their world")
  default boolean dblClickWorldHop() {
    return false;
  }

  @ConfigItem(position = 3, section = "General", keyName = "update_interval", name = "Update Interval", description = "Interval between sending/receiving your/friends locations")
  default UpdateIntervalEnum updateInterval() {
    return UpdateIntervalEnum.SECONDS_2;
  }

  @ConfigItem(position = 4, section = "General", keyName = "enable_sidebar", name = "Enable Sidebar", description = "Whether to enable the Friends On Map sidebar")
  default boolean showSidebarIcon() {
    return true;
  }

  // STYLING CONFIGURATION

  @ConfigItem(position = 11, section = styling_section, keyName = "style_dot_color", name = "Dot Color", description = "What color the dot is for your friends on the main map")
  default Color dotColor() {
    return Color.GREEN;
  }

  @ConfigItem(position = 12, section = styling_section, keyName = "style_other_world_color", name = "Other World Color", description = "Outline color for the dots when the friend is NOt on your world")
  default Color otherWorldColor() {
    return Color.GREEN.darker().darker().darker();
  }

  @ConfigItem(position = 13, section = styling_section, keyName = "style_link_dot_color", name = "Link Dot Color", description = "What color the dot is for your friends on the main map. Used when the icon links to a sub/dungeon area")
  default Color dotColorLink() {
    return Color.ORANGE;
  }

  @ConfigItem(position = 14, section = styling_section, keyName = "style_link_other_world_color", name = "Link Other World Color", description = "Outline color for the dots when the friend is NOt on your world. Used when the icon links to a sub/dungeon area")
  default Color otherWorldColorLink() {
    return Color.ORANGE.darker().darker().darker();
  }

  @ConfigItem(position = 15, section = styling_section, keyName = "style_dot_size", name = "Dot Size", description = "Pixel size for the dots on the main map")
  @Range(max = 60, min = 5)
  default int dotSize() {
    return 16;
  }

  @ConfigItem(position = 16, section = styling_section, keyName = "off_world_as_outline", name = "Off World as Outline", description = "When set, the off world status will be shown as an outline instead of full color change")
  default boolean offWorldAsOutline() {
    return true;
  }

  @ConfigItem(position = 17, section = styling_section, keyName = "style_outline_size", name = "Outline Size", description = "When off world indication is set to outline, this defines the outline width")
  @Range(max = 30, min = 2)
  default int outlineSize() {
    return 3;
  }

  @ConfigItem(position = 18, section = styling_section, keyName = "always_show_name", name = "Name on World Map", description = "When set, friend's name and world will always be shows on the world map. On hover otherwise")
  default boolean alwaysShowName() {
    return false;
  }

  // CUSTOM API STUFF
  @ConfigItem(position = 21, section = custom_section, keyName = "friend_api", name = "Friends API", description = "What API to send and retrieve location data to/from")
  default String friendsAPI() {
    return "https://runelite.sololegends.com/friends";
  }

  @ConfigItem(position = 22, section = custom_section, keyName = "friend_api_key", name = "Friends API Key", description = "API Key to send as a header to the API on each request, only for private servers")
  default String friendsAPIKey() {
    return "";
  }

  @ConfigItem(position = 23, section = custom_section, keyName = "friend_report_api", name = "Reports Link", description = "API End-point for reporting Missing Locations")
  default String reportLink() {
    return "https://runelite.sololegends.com/location/report";
  }

  @ConfigItem(position = 24, section = custom_section, keyName = "friend_locations_api", name = "Server Locations", description = "API End-point for retrieving server-registered locations (blank to disable)")
  default String locationsLink() {
    return "https://runelite.sololegends.com/locations";
  }

  // DEBUGGING
  @ConfigItem(position = 31, section = debug_section, keyName = "show_self_location_card", name = "Show your location card", description = "Shows your tracked location card at the top left of the game window")
  default boolean yourLocation() {
    return false;
  }

  @ConfigItem(position = 32, section = debug_section, keyName = "map_areas", name = "Map Draw Areas", description = "Turns on drawing every sub area tracked on the map surfaces")
  default boolean mapDrawAreas() {
    return false;
  }

  @ConfigItem(position = 33, section = debug_section, keyName = "fake_friends", name = "Add Fake Friends", description = "Adds some fake friends for debugging when you have no friends")
  default boolean fakeFriends() {
    return false;
  }

  @ConfigItem(position = 34, section = debug_section, keyName = "debug_mode", name = "Debug Mode", description = "Adds extra debugging data to the runelite logs")
  default boolean debugMode() {
    return false;
  }

  @ConfigItem(keyName = "fake_friends", name = "", description = "")
  void fakeFriends(boolean fake_friends);

}

package com.sololegends.runelite;

import java.awt.event.MouseEvent;

import javax.inject.Inject;

import net.runelite.client.input.MouseListener;

public class FriendClickListener implements MouseListener {

  private final FriendsOnMapPlugin plugin;
  private final FriendsOnMapConfig config;

  @Inject
  private FriendClickListener(FriendsOnMapPlugin plugin, FriendsOnMapConfig config) {
    this.plugin = plugin;
    this.config = config;
  }

  @Override
  public MouseEvent mouseClicked(MouseEvent mouseEvent) {
    if (config.dblClickWorldHop() && mouseEvent.getButton() == MouseEvent.BUTTON1
        && mouseEvent.getClickCount() == 2) {
      plugin.worldSwitchClick();
      return mouseEvent;
    }
    return mouseEvent;
  }

  @Override
  public MouseEvent mousePressed(MouseEvent mouseEvent) {
    return mouseEvent;
  }

  @Override
  public MouseEvent mouseReleased(MouseEvent mouseEvent) {
    return mouseEvent;
  }

  @Override
  public MouseEvent mouseEntered(MouseEvent mouseEvent) {
    return mouseEvent;
  }

  @Override
  public MouseEvent mouseExited(MouseEvent mouseEvent) {
    return mouseEvent;
  }

  @Override
  public MouseEvent mouseDragged(MouseEvent mouseEvent) {
    return mouseEvent;
  }

  @Override
  public MouseEvent mouseMoved(MouseEvent mouseEvent) {
    return mouseEvent;
  }

}

package com.sololegends.runelite.panel;

import java.awt.*;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import com.sololegends.runelite.FriendMapPoint;
import com.sololegends.runelite.FriendsOnMapPlugin;
import com.sololegends.runelite.helpers.WorldLocations.WorldSurface;
import com.sololegends.runelite.skills.*;

import net.runelite.client.ui.components.ProgressBar;

public class FriendPanel extends JPanel {

  // Time static
  private static final long EXPIRE_THRESHOLD = 70_000;

  // Color static
  private static final Color HEALTH_FG = new Color(0, 146, 54, 230);
  private static final Color HEALTH_BG = new Color(102, 15, 16, 230);
  private static final Color PRAYER_FG = new Color(0, 149, 151);
  private static final Color PRAYER_BG = Color.black;

  ProgressBar health = buildStatBar(new Health(0, 0));
  ProgressBar prayer = buildStatBar(new Prayer(0, 0));
  TitledBorder border = new TitledBorder("");
  final FriendsPanel parent;
  final String name;
  FriendMapPoint friend;
  final FriendsOnMapPlugin plugin;
  long updated = System.currentTimeMillis();

  public FriendPanel(FriendsPanel parent, FriendsOnMapPlugin plugin, FriendMapPoint friend, ImageIcon h_icon,
      ImageIcon p_icon) {
    border = new TitledBorder(
        BorderFactory.createEtchedBorder(EtchedBorder.RAISED),
        friend.friend);
    name = friend.friend;
    this.setBorder(border);
    this.parent = parent;
    this.plugin = plugin;
    this.friend = friend;

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setAutoCreateGaps(true);
    layout.setAutoCreateContainerGaps(true);

    health = buildStatBar(friend.getHealth());
    prayer = buildStatBar(friend.getPrayer());

    JLabel health_icon = new JLabel(h_icon);
    JLabel prayer_icon = new JLabel(p_icon);

    GroupLayout.SequentialGroup h_group = layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)
            .addGroup(layout.createSequentialGroup()
                .addComponent(health_icon, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, 25)
                .addComponent(health, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(prayer_icon, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, 25)
                .addComponent(prayer, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)));

    GroupLayout.SequentialGroup v_group = layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(health_icon)
            .addComponent(health))
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)
            .addComponent(prayer_icon)
            .addComponent(prayer));

    layout.setHorizontalGroup(h_group);
    layout.setVerticalGroup(v_group);
  }

  public void mouseHoverCheck(Graphics2D g) {
    Point mouse = this.getMousePosition();
    if (mouse != null && mouse.getY() < 25 && plugin.shiftPressed()) {
      String tool_tip = friend.friend + " -- World: " + friend.world;
      plugin.drawToolTip(g, tool_tip, 0, 20 + 0, friend.region);
    }
  }

  @Override
  public void paint(Graphics g) {
    super.paint(g);
    if (g instanceof Graphics2D) {
      mouseHoverCheck((Graphics2D) g);
    }
  }

  public void update(FriendMapPoint friend, WorldSurface surface) {
    this.friend = friend;
    updated = System.currentTimeMillis();
    Health h_skill = friend.getHealth();
    Prayer p_skill = friend.getPrayer();

    health.setValue(h_skill.current());
    health.setMaximumValue(h_skill.max());
    health.setCenterLabel(h_skill.current() + " / " + h_skill.max());

    prayer.setValue(p_skill.current());
    prayer.setMaximumValue(p_skill.max());
    prayer.setCenterLabel(p_skill.current() + " / " + p_skill.max());

    if (surface != null) {
      border.setTitle(friend.friend + ": " + surface.name);
    }
    this.revalidate();
    this.repaint();
  }

  public boolean expired() {
    return System.currentTimeMillis() - updated > EXPIRE_THRESHOLD;
  }

  private ProgressBar buildStatBar(PlayerSkill skill) {
    ProgressBar bar = new ProgressBar();
    bar.setValue(skill.current());
    bar.setMaximumValue(skill.max());
    bar.setCenterLabel(skill.current() + " / " + skill.max());

    if (skill.type() == net.runelite.api.Skill.HITPOINTS) {
      bar.setForeground(HEALTH_FG);
      bar.setBackground(HEALTH_BG);
    } else if (skill.type() == net.runelite.api.Skill.PRAYER) {
      bar.setForeground(PRAYER_FG);
      bar.setBackground(PRAYER_BG);
    }

    return bar;
  }

  public int hashCode() {
    return -1;
  }

  public boolean equals(Object o) {
    if (o instanceof FriendPanel && ((FriendPanel) o).name.equals(name)) {
      return true;
    }
    return false;
  }
}

package com.sololegends.runelite.panel;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.Timer;
import java.util.concurrent.ConcurrentHashMap;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import com.google.gson.JsonObject;
import com.google.inject.Inject;
import com.sololegends.runelite.*;
import com.sololegends.runelite.helpers.RemoteDataManager;
import com.sololegends.runelite.helpers.RemoteDataManager.UpdateFlow;

import net.runelite.api.Skill;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.*;
import net.runelite.client.ui.components.DragAndDropReorderPane;
import net.runelite.client.ui.components.FlatTextField;

public class FriendsPanel extends PluginPanel {

  private final FriendsOnMapPlugin plugin;

  private final JComponent friends = new DragAndDropReorderPane();
  private final Map<String, Component> friend_components = new ConcurrentHashMap<>();

  private final ImageIcon health_icon;
  private final ImageIcon prayer_icon;

  @Inject
  private RemoteDataManager remote;

  @Inject
  FriendsPanel(final FriendsOnMapPlugin plugin, final FriendsOnMapConfig config, final SkillIconManager icon_manager) {
    this.plugin = plugin;
    health_icon = new ImageIcon(icon_manager.getSkillImage(Skill.HITPOINTS, true));
    prayer_icon = new ImageIcon(icon_manager.getSkillImage(Skill.PRAYER, true));

    setBorder(new EmptyBorder(10, 10, 10, 10));
    setBackground(ColorScheme.DARK_GRAY_COLOR);
    setLayout(new BorderLayout());

    // Missing location report panel
    final JPanel report_panel = new JPanel(new BorderLayout());
    report_panel.setLayout(new BorderLayout());
    report_panel.setBorder(new EmptyBorder(10, 10, 10, 10));

    // ===== TITLE =====
    final JLabel report_missing = new JLabel("Report Missing Location");
    report_missing.setFont(FontManager.getRunescapeBoldFont());
    report_missing.setHorizontalAlignment(JLabel.CENTER);

    final JPanel title_panel = new JPanel(new BorderLayout());
    title_panel.add(report_missing, BorderLayout.NORTH);

    // ===== TEXT BLURB =====

    final JPanel report_info_panel = new JPanel(new BorderLayout());
    report_info_panel.setLayout(new BoxLayout(report_info_panel, BoxLayout.Y_AXIS));
    report_info_panel.add(title_panel, BorderLayout.NORTH);
    report_info_panel.add(Box.createRigidArea(new Dimension(0, 3)));
    report_info_panel.add(getJSeparator(ColorScheme.LIGHT_GRAY_COLOR));
    report_info_panel.add(Box.createRigidArea(new Dimension(0, 3)));
    report_info_panel.add(getTextArea(
        "Enter where you are in the field below, then click submit location to submit your report for review and approval"),
        BorderLayout.CENTER);
    report_info_panel.add(Box.createRigidArea(new Dimension(0, 3)));
    report_info_panel.add(getJSeparator(ColorScheme.LIGHT_GRAY_COLOR));

    // REPORT ACTION PANEL

    final JPanel report_action_panel = new JPanel(new BorderLayout());

    JTextField location_input = getTextField(report_action_panel, "Your Location");
    final String SUBMIT_TEXT = "Report Missing Location";
    final JButton submit = new JButton(SUBMIT_TEXT);
    submit.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        if (!submit.getText().equals(SUBMIT_TEXT)) {
          // Reject double clicking
          return;
        }
        submit.setText("Sending report...");
        String location = location_input.getText();
        // Build Payload
        JsonObject payload = plugin.getPlayerLocation();
        payload.addProperty("l", location);
        // Build and send the request
        remote.sendReport(payload, new UpdateFlow() {
          @Override
          public void success(String message) {
            submit.setText(message);
            location_input.setText("");
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
              @Override
              public void run() {
                submit.setText(SUBMIT_TEXT);
              }
            }, 10_000l);

          }

          @Override
          public void error(String message) {
            submit.setText(message);
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
              @Override
              public void run() {
                submit.setText(SUBMIT_TEXT);
              }
            }, 10_000l);

          }

        });
        // Reset no matter what
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
          @Override
          public void run() {
            location_input.setText("");
            submit.setText(SUBMIT_TEXT);
          }
        }, 10_000l);
      }
    });

    report_action_panel.add(submit, BorderLayout.SOUTH);

    // FINAL PANEL

    report_panel.setLayout(new BoxLayout(report_panel, BoxLayout.Y_AXIS));
    report_panel.add(title_panel);
    report_panel.add(Box.createRigidArea(new Dimension(0, 5)));
    report_panel.add(report_info_panel);
    report_panel.add(Box.createRigidArea(new Dimension(0, 10)));
    report_panel.add(report_action_panel);

    // END

    // Info Panel (just header atm)
    final JPanel info_panel = new JPanel();
    info_panel.setBorder(new EmptyBorder(0, 0, 4, 0));
    info_panel.add(new JLabel("Friends Info"));

    add(report_panel, BorderLayout.PAGE_START);
    add(info_panel, BorderLayout.CENTER);
    add(friends, BorderLayout.PAGE_END);

    revalidate();
    repaint();
  }

  public void clear() {
    friends.removeAll();
    friends.revalidate();
  }

  public void prune() {
    Set<String> panels = new HashSet<>(friend_components.keySet());
    for (String s : panels) {
      FriendPanel panel = (FriendPanel) friend_components.get(s);
      if (panel.expired()) {
        friends.remove(friend_components.remove(s));
      }
    }
  }

  public void update() {
    Set<FriendMapPoint> friend_points = plugin.currentPoints();
    for (FriendMapPoint friend : friend_points) {
      // Update
      if (friend_components.containsKey(friend.friend)) {
        FriendPanel panel = (FriendPanel) friend_components.get(friend.friend);
        panel.update(friend, friend.getLocation());
        continue;
      }
      FriendPanel panel = new FriendPanel(this, plugin, friend, health_icon, prayer_icon);
      panel.addMouseListener(new MouseListener() {
        @Override
        public void mouseClicked(MouseEvent e) {
          plugin.focusOn(friend);
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
      });
      friend_components.put(
          friend.friend,
          friends.add(panel));
    }
    prune();
    friends.revalidate();
  }

  private JSeparator getJSeparator(Color color) {
    JSeparator sep = new JSeparator();
    sep.setBackground(color);
    sep.setForeground(color);
    return sep;
  }

  public JTextArea getTextArea(String text) {
    JTextArea text_area = new JTextArea(2, 20);
    text_area.setText(text);
    text_area.setWrapStyleWord(true);
    text_area.setLineWrap(true);
    text_area.setOpaque(false);
    text_area.setEditable(false);
    text_area.setFocusable(false);
    text_area.setBackground(ColorScheme.DARK_GRAY_COLOR);
    Font text_area_font = FontManager.getRunescapeSmallFont();
    text_area_font = text_area_font.deriveFont(text_area_font.getStyle(),
        (float) text_area_font.getSize() - (float) 0.1);
    text_area.setFont(text_area_font);

    text_area.setBorder(new EmptyBorder(0, 0, 0, 0));
    return text_area;
  }

  private JTextField getTextField(JPanel panel, String label) {
    final JPanel container = new JPanel();
    container.setLayout(new BorderLayout());

    final JLabel j_label = new JLabel(label);
    final FlatTextField input = new FlatTextField();

    input.setBackground(ColorScheme.DARKER_GRAY_COLOR);
    input.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
    input.setBorder(new EmptyBorder(5, 7, 5, 7));

    j_label.setFont(FontManager.getRunescapeSmallFont());
    j_label.setBorder(new EmptyBorder(0, 0, 4, 0));
    j_label.setForeground(Color.WHITE);

    container.add(j_label, BorderLayout.NORTH);
    container.add(input, BorderLayout.CENTER);
    container.add(Box.createRigidArea(new Dimension(0, 5)), BorderLayout.SOUTH);

    panel.add(container, BorderLayout.CENTER);

    return input.getTextField();
  }
}

package com.sololegends.runelite;

import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

import javax.inject.Inject;
import javax.swing.SwingUtilities;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.inject.Provides;
import com.sololegends.runelite.helpers.RemoteDataManager;
import com.sololegends.runelite.overlay.OtherSurfacePlayersOverlay;
import com.sololegends.runelite.overlay.PlayerLocationOverlayPanel;
import com.sololegends.runelite.panel.FriendsPanel;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.widgets.*;
import net.runelite.api.worldmap.WorldMap;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.WorldService;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.*;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.worldmap.*;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;

@Slf4j
@PluginDescriptor(name = "Friend Finder")
public class FriendsOnMapPlugin extends Plugin {

  public static final int VARBIT_PRIVATE_CHAT = 13674;
  public static final int VARBIT_PRIVATE_CHAT_ON = 0;
  public static final int VARBIT_PRIVATE_CHAT_FRIENDS = 1;
  public static final int VARBIT_PRIVATE_CHAT_OFF = 2;

  private Set<FriendMapPoint> current_points = ConcurrentHashMap.newKeySet();
  private LinkedBlockingQueue<String> message_queue = new LinkedBlockingQueue<>();

  private long last_update = 0;
  private net.runelite.api.World hop_world = null;
  private int hop_world_attempts = 0;
  private int hop_world_attempts_max = 3;
  private long hop_world_last = 0;
  private int hop_world_interval = 1_500;

  // Every Hour
  private static final long SERVER_UPDATE_INTERVAL = 3600_000;
  private long LAST_SERVER_UPDATE = -1;

  // Player information
  private volatile FriendMapPoint focus_on = null;
  private volatile boolean info_updated = false;
  private int health_last;
  private int prayer_last;

  // UI Elements
  private FriendsPanel panel;
  private NavigationButton side_panel_btn;

  @Inject
  private Client client;

  @Inject
  private ClientThread clientThread;

  @Inject
  private ClientToolbar clientToolbar;

  @Inject
  private FriendsOnMapConfig config;

  @Inject
  private WorldMapPointManager map_point_manager;

  @Inject
  private WorldMapOverlay map_overlay;

  @Inject
  private MouseManager mouse;

  @Inject
  private FriendClickListener mouse_listener;

  @Inject
  private WorldService worldService;

  @Inject
  private RemoteDataManager remote;

  @Inject
  private OtherSurfacePlayersOverlay other_surface_overlay;

  @Inject
  private PlayerLocationOverlayPanel player_location_overlay;

  @Inject
  private OverlayManager overlay_manager;

  @Override
  protected void startUp() throws Exception {
    // ! Always reset this one to false
    config.fakeFriends(false);

    log.info("Starting Friend finder");
    mouse.registerMouseListener(mouse_listener);
    overlay_manager.add(other_surface_overlay);
    overlay_manager.add(player_location_overlay);

    panel = injector.getInstance(FriendsPanel.class);

    final BufferedImage icon = ImageUtil.loadImageResource(FriendsOnMapPlugin.class, "panel_icon_sm.png");

    side_panel_btn = NavigationButton.builder()
        .tooltip("Friends On Map")
        .icon(icon)
        .priority(9)
        .panel(panel)
        .build();

    if (config.showSidebarIcon()) {
      clientToolbar.addNavigation(side_panel_btn);
    }
  }

  @Override
  protected void shutDown() throws Exception {
    log.info("Stopping Friend finder!");
    clientToolbar.removeNavigation(side_panel_btn);
    mouse.unregisterMouseListener(mouse_listener);
    overlay_manager.remove(other_surface_overlay);
    overlay_manager.remove(player_location_overlay);
  }

  public void message(String msg) {
    message_queue.add(msg);
  }

  public void updated(long time) {
    last_update = time;
  }

  @Deprecated
  public void clearPoints() {
    for (WorldMapPoint p : current_points) {
      map_point_manager.remove(p);
    }
    current_points.clear();
  }

  public boolean alignLeft(int x) {
    return client.getWorldMap().getWorldMapPosition().getX() < x;
  }

  public void removePoint(FriendMapPoint fmp) {
    map_point_manager.remove(fmp);
    current_points.remove(fmp);
  }

  public void updateServerLocations() {
    remote.getServerLocations();
  }

  public void addPoint(FriendMapPoint fmp) {
    if (current_points.contains(fmp)) {
      // Already here, just update it
      for (FriendMapPoint fp : current_points) {
        if (fp.equals(fmp)) {
          fp.update(fmp);
          updateFriendPointIcon(fp, true);
          return;
        }
      }
      return;
    }
    map_point_manager.add(fmp);
    current_points.add(fmp);
  }

  public boolean inInstancedRegion() {
    WorldView wv = client.getTopLevelWorldView();
    return wv == null ? false : wv.isInstance();
  }

  public void updatePanel() {
    SwingUtilities.invokeLater(() -> panel.update());
  }

  public boolean isCurrentWorld(int world) {
    return client.getWorld() == world;
  }

  public Set<FriendMapPoint> currentPoints() {
    return current_points;
  }

  public void focusFriendClick() {
    if (isMouseInWorldMap()) {
      final Point mouse_pos = client.getMouseCanvasPosition();
      for (FriendMapPoint point : current_points) {
        if (isWithin(mouse_pos, point.getWorldPoint()) && point.isCurrentlyEdgeSnapped()) {

        }
      }
    }
  }

  public void worldSwitchClick() {
    if (isMouseInWorldMap()) {
      final Point mouse_pos = client.getMouseCanvasPosition();
      for (FriendMapPoint point : current_points) {
        if (isWithin(mouse_pos, point.getWorldPoint())) {
          message_queue.add(
              new ChatMessageBuilder()
                  .append("Attempting to switch to ")
                  .append(ChatColorType.HIGHLIGHT)
                  .append(point.friend)
                  .append(ChatColorType.NORMAL)
                  .append("'s world ")
                  .append(ChatColorType.HIGHLIGHT)
                  .append(Integer.toString(point.world))
                  .append(ChatColorType.NORMAL).build());
          hopToWorld(point.world);
        }
      }
    }
  }

  private boolean isWithin(Point mouse_pos, WorldPoint point) {
    final WorldMap map = client.getWorldMap();
    final float zoom = map.getWorldMapZoom();
    final WorldPoint map_click = calculateMapPoint(map, mouse_pos, zoom);
    return point.distanceTo2D(map_click) < config.dotSize();
  }

  private WorldPoint calculateMapPoint(WorldMap map, Point mousePos, float zoom) {
    final WorldPoint map_point = new WorldPoint(map.getWorldMapPosition().getX(),
        map.getWorldMapPosition().getY(), 0);
    final Point middle = map_overlay.mapWorldPointToGraphicsPoint(map_point);

    final int dx = (int) ((mousePos.getX() - middle.getX()) / zoom);
    final int dy = (int) ((-(mousePos.getY() - middle.getY())) / zoom);

    return map_point.dx(dx).dy(dy);
  }

  private boolean isMouseInWorldMap() {
    final Point mousePos = client.getMouseCanvasPosition();
    final Widget view = client.getWidget(ComponentID.WORLD_MAP_MAPVIEW);
    if (view == null) {
      return false;
    }

    final Rectangle worldMapBounds = view.getBounds();
    return worldMapBounds.contains(mousePos.getX(), mousePos.getY());
  }

  public void hopToWorld(int world_id) {
    World world = worldService.getWorlds().findWorld(world_id);
    if (world == null || client.getWorld() == world_id) {
      message_queue.add(
          new ChatMessageBuilder()
              .append("Failed to load world ")
              .append(ChatColorType.HIGHLIGHT)
              .append(Integer.toString(world_id))
              .append(ChatColorType.NORMAL).build());
      return;
    }
    clientThread.invoke(() -> hop(world));
  }

  public void hop(World world) {
    assert client.isClientThread();
    final net.runelite.api.World rsWorld = client.createWorld();
    rsWorld.setActivity(world.getActivity());
    rsWorld.setAddress(world.getAddress());
    rsWorld.setId(world.getId());
    rsWorld.setPlayerCount(world.getPlayers());
    rsWorld.setLocation(world.getLocation());
    rsWorld.setTypes(WorldUtil.toWorldTypes(world.getTypes()));
    hop_world = rsWorld;
    hop_world_attempts = 0;
  }

  public BufferedImage getIcon(boolean off_world, boolean translated, String label, boolean left) {
    int d_size = config.dotSize();
    BufferedImage icon = new BufferedImage(d_size + 2, d_size + 2, BufferedImage.TYPE_INT_ARGB);
    Graphics2D g = (Graphics2D) icon.getGraphics();
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

    if (!config.alwaysShowName()) {
      drawIcon(off_world, translated, g, 1, 1);
      return icon;
    }
    // If labels always on

    Color owc = translated ? config.otherWorldColorLink() : config.otherWorldColor();
    Color wc = translated ? config.dotColorLink() : config.dotColor();

    Font font = FontManager.getRunescapeFont().deriveFont(Font.BOLD, 13);
    g.setFont(font);
    FontMetrics fm = g.getFontMetrics();
    int n_width = fm.stringWidth(label);
    icon = new BufferedImage(icon.getWidth() + n_width + 10, Math.max(icon.getHeight(), fm.getHeight()) + 2,
        BufferedImage.TYPE_INT_ARGB);
    g = (Graphics2D) icon.getGraphics();
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g.setFont(font);
    g.setColor(new Color(0, 0, 0, 0.15f));
    g.fillRect(0, 0, icon.getWidth(), icon.getHeight());
    int x_off = d_size + 2 + 5;
    if (left) {
      drawIcon(off_world, translated, g, icon.getWidth() - d_size - 1, icon.getHeight() / 2 - d_size / 2);
      x_off = 0;
    } else {
      drawIcon(off_world, translated, g, 1, icon.getHeight() / 2 - d_size / 2);
    }
    int s_y = (icon.getHeight() / 2) + (fm.getAscent() / 2);
    int s_x = x_off;
    // Shadow
    g.setColor(owc);
    g.drawString(label, s_x + 1, s_y + 1);
    // Text
    g.setColor(off_world && !config.offWorldAsOutline() ? owc : wc);
    g.drawString(label, s_x, s_y);
    return icon;
  }

  public Dimension drawIcon(boolean off_world, boolean translated, Graphics2D g, int x, int y) {
    int d_size = config.dotSize();
    Color oc = g.getColor();
    Color owc = translated ? config.otherWorldColorLink() : config.otherWorldColor();
    Color wc = translated ? config.dotColorLink() : config.dotColor();

    if (off_world && config.offWorldAsOutline()) {
      g.setColor(owc);
      g.fillOval(x, y, d_size, d_size);
      g.setColor(wc);
      g.fillOval(x + config.outlineSize(), y + config.outlineSize(), d_size - config.outlineSize() * 2,
          d_size - config.outlineSize() * 2);
    } else {
      g.setColor(off_world && !config.offWorldAsOutline() ? owc : wc);
      g.fillOval(x, y, d_size, d_size);
    }
    g.setColor(oc);
    return new Dimension(d_size, d_size);
  }

  public boolean privateMode() {
    return client.getVarbitValue(VARBIT_PRIVATE_CHAT) == VARBIT_PRIVATE_CHAT_OFF;
  }

  @Subscribe
  public void onGameTick(GameTick event) {
    if (focus_on != null) {
      WorldMap map = client.getWorldMap();
      if (map != null && map.getWorldMapRenderer().isLoaded()) {
        map.setWorldMapPositionTarget(focus_on.getWorldPoint());
        client.playSoundEffect(SoundEffectID.UI_BOOP);
      }
      // Clear regardless
      focus_on = null;
    }
    // Server locations updates
    if (System.currentTimeMillis() - LAST_SERVER_UPDATE > SERVER_UPDATE_INTERVAL) {
      updateServerLocations();
      LAST_SERVER_UPDATE = System.currentTimeMillis();
    }
    String msg = null;
    while ((msg = message_queue.poll()) != null) {
      client.addChatMessage(ChatMessageType.GAMEMESSAGE, "friend-finder",
          msg, "Friend Finder Plugin", true);
    }
    if (hop_world != null && hop_world_attempts < hop_world_attempts_max
        && System.currentTimeMillis() - hop_world_last > hop_world_interval) {
      System.out.println("Attempting hop world: " + hop_world.getId() + " > " + hop_world.getAddress());
      hop_world_last = System.currentTimeMillis();

      if (client.getWidget(ComponentID.WORLD_SWITCHER_WORLD_LIST) == null) {
        client.openWorldHopper();
      } else {
        hop_world_attempts++;
        if (client.getWorld() != hop_world.getId()) {
          client.hopToWorld(hop_world);
        } else {
          hop_world = null;
        }
      }
    } else if (hop_world != null && hop_world_attempts >= hop_world_attempts_max) {
      hop_world = null;
    }
    if (System.currentTimeMillis() - last_update > config.updateInterval().interval() || info_updated) {
      // If friends chat set private don't send locations
      if (privateMode()) {
        return;
      }
      info_updated = false;
      // USE FRIENDS API
      // Send player info to server
      Player player = client.getLocalPlayer();
      if (player == null) {
        // Set updated time
        last_update = System.currentTimeMillis();
      }
      WorldPoint player_location = player.getWorldLocation();
      Friend[] friends = client.getFriendContainer().getMembers();
      // Build the payload
      JsonObject payload = new JsonObject();
      payload.addProperty("name", player.getName());
      payload.addProperty("id", player.getId());
      payload.addProperty("x", player_location.getX());
      payload.addProperty("hm", client.getBoostedSkillLevel(Skill.HITPOINTS));
      payload.addProperty("hM", client.getRealSkillLevel(Skill.HITPOINTS));
      payload.addProperty("pm", client.getBoostedSkillLevel(Skill.PRAYER));
      payload.addProperty("pM", client.getRealSkillLevel(Skill.PRAYER));
      payload.addProperty("y", player_location.getY());
      payload.addProperty("z", player_location.getPlane());

      payload.addProperty("w", client.getWorld());
      // Region of instance or world
      LocalPoint local = player.getLocalLocation();
      int region_id = player_location.getRegionID();
      if (inInstancedRegion()) {
        region_id = WorldPoint.fromLocalInstance(client, local).getRegionID();
      }
      payload.addProperty("r", region_id);
      JsonArray friends_json = new JsonArray();
      if (player_location != null) {
        for (Friend f : friends) {
          friends_json.add(f.getName());
        }
      }
      payload.add("friends", friends_json);

      // Retrieve friends info from server
      remote.sendRequest(payload);
    }
  }

  public JsonObject getPlayerLocation() {
    // USE FRIENDS API
    JsonObject payload = new JsonObject();
    // Send player info to server
    Player player = client.getLocalPlayer();
    if (player == null) {
      return payload;
    }
    WorldPoint player_location = player.getWorldLocation();
    // Build the payload
    payload.addProperty("x", player_location.getX());
    payload.addProperty("y", player_location.getY());
    payload.addProperty("z", player_location.getPlane());

    // Region of instance or world
    LocalPoint local = player.getLocalLocation();
    int region_id = player_location.getRegionID();
    int instance_id = -1;
    if (inInstancedRegion()) {
      instance_id = WorldPoint.fromLocalInstance(client, local).getRegionID();
    }
    payload.addProperty("r", region_id);
    payload.addProperty("i", instance_id);
    return payload;
  }

  @Subscribe
  public void onClientTick(ClientTick clientTick) {
    for (FriendMapPoint mp : current_points) {
      if (mp.expired()) {
        removePoint(mp);
        continue;
      }
      updateFriendPointIcon(mp);
    }
  }

  public void focusOn(FriendMapPoint mp) {
    focus_on = mp;
  }

  public void updateFriendPointIcon(FriendMapPoint mp) {
    updateFriendPointIcon(mp, false);
  }

  public void updateFriendPointIcon(FriendMapPoint mp, boolean force) {
    boolean align_left = mp.isCurrentlyEdgeSnapped() && alignLeft(mp.getWorldPoint().getX());
    if (mp.left_align == align_left && !force) {
      return;
    }
    mp.left_align = align_left;

    mp.setImage(getIcon(!isCurrentWorld(mp.world),
        false,
        (mp.friend + " -- World: " + mp.world),
        mp.left_align));
  }

  @Subscribe
  public void onConfigChanged(ConfigChanged event) {
    if (event.getKey().equals("always_show_name")) {
      for (FriendMapPoint mp : current_points) {
        updateFriendPointIcon(mp, true);
      }
    } else if (event.getKey().equals("enable_sidebar")) {
      if (config.showSidebarIcon()) {
        clientToolbar.addNavigation(side_panel_btn);
      } else {
        clientToolbar.removeNavigation(side_panel_btn);
      }
    }
  }

  @Subscribe
  public void onStatChanged(StatChanged statChanged) {
    Skill skill = statChanged.getSkill();
    int current_value = client.getBoostedSkillLevel(skill);
    switch (skill) {
      case AGILITY:
      case ATTACK:
      case CONSTRUCTION:
      case COOKING:
      case CRAFTING:
      case DEFENCE:
      case FARMING:
      case FIREMAKING:
      case FISHING:
      case FLETCHING:
      case HERBLORE:
      case HUNTER:
      case MAGIC:
      case MINING:
      case RANGED:
      case RUNECRAFT:
      case SLAYER:
      case SMITHING:
      case STRENGTH:
      case THIEVING:
      case WOODCUTTING:
        break;
      case HITPOINTS:
        if (health_last != current_value) {
          info_updated = true;
          health_last = current_value;
        }
        break;
      case PRAYER:
        if (prayer_last != current_value) {
          info_updated = true;
          prayer_last = current_value;
        }
        break;
      default:
        break;
    }
  }

  @Provides
  FriendsOnMapConfig provideConfig(ConfigManager configManager) {
    return configManager.getConfig(FriendsOnMapConfig.class);
  }

  public boolean shiftPressed() {
    return client.isKeyPressed(KeyCode.KC_SHIFT);
  }

  public void drawToolTip(Graphics2D g, String text, int x, int y, int region) {
    if (region != -1 && client.isKeyPressed(KeyCode.KC_SHIFT)) {
      // Add region prefix
      text = "r:" + region + " -- " + text;
    }
    g.setFont(FontManager.getRunescapeFont());
    FontMetrics fm = g.getFontMetrics();
    Rectangle2D bounds = fm.getStringBounds(text, g);
    // Add padding
    Rectangle padded = new Rectangle(x, y, (int) bounds.getWidth() + 6, (int) bounds.getHeight() + 4);
    g.setColor(JagexColors.TOOLTIP_BACKGROUND);
    g.fill(padded);

    g.setStroke(new BasicStroke(1));
    g.setColor(JagexColors.TOOLTIP_BORDER);
    g.draw(padded);

    g.setColor(JagexColors.TOOLTIP_TEXT);
    g.drawString(text, x + 3, y + 1 + (int) bounds.getHeight());
  }
}

