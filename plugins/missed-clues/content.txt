package com.missedclues;

import java.util.Random;

public class RewardItem
{
    private static final Random RANDOM = new Random();
    private int itemId;
    private String itemName;
    private String quantity;
    private String rarity;
    private int weight;

    public RewardItem(int itemId, String itemName, String quantity, String rarity, int weight)
    {
        this.itemId = itemId;
        this.itemName = itemName;
        this.quantity = quantity;
        this.rarity = rarity;
        this.weight = weight;
    }

    public int getItemId()
    {
        return itemId;
    }

    public String getItemName()
    {
        return itemName;
    }

    public String getQuantity()
    {
        return quantity;
    }

    public void setQuantity(String quantity)
    {
        this.quantity = quantity;
    }

    public String getRarity()
    {
        return rarity;
    }

    public int getWeight()
    {
        return weight;
    }

    public int getParsedQuantity()
    {
        if (quantity == null || quantity.trim().isEmpty())
        {
            return 1;
        }

        String normalized = quantity.replace("â€“", "-").trim();

        if (normalized.contains("-"))
        {
            String[] parts = normalized.split("-");
            if (parts.length == 2)
            {
                try
                {
                    int min = Integer.parseInt(parts[0].trim());
                    int max = Integer.parseInt(parts[1].trim());
                    if (max >= min)
                    {
                        return RANDOM.nextInt(max - min + 1) + min;
                    }
                }
                catch (NumberFormatException ignored)
                {
                }
            }
            return 1;
        }
        else
        {
            try
            {
                return Integer.parseInt(normalized);
            }
            catch (NumberFormatException e)
            {
                return 1;
            }
        }
    }
}
package com.missedclues;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Clue Tiers")
public interface MissedCluesConfig extends Config
{
	@ConfigItem(
			keyName = "beginnerToggle",
			name = "Show Missed Beginner Clues",
			description = "Do not show simulated beginner clues on receiving a missed clue message.",
			position = 0
	)
	default boolean beginnerToggle() {
		return true;
	}
	@ConfigItem(
			keyName = "easyToggle",
			name = "Show Missed Easy Clues",
			description = "Do not show simulated easy clues on receiving a missed clue message.",
			position = 1
	)
	default boolean easyToggle() {
		return true;
	}
	@ConfigItem(
			keyName = "mediumToggle",
			name = "Show Missed Medium Clues",
			description = "Do not show simulated medium clues on receiving a missed clue message.",
			position = 2
	)
	default boolean mediumToggle() {
		return true;
	}
	@ConfigItem(
			keyName = "hardToggle",
			name = "Show Missed Hard Clues",
			description = "Do not show simulated hard clues on receiving a missed clue message.",
			position = 3
	)
	default boolean hardToggle() {
		return true;
	}
	@ConfigItem(
			keyName = "eliteToggle",
			name = "Show Missed Elite Clues",
			description = "Do not show simulated elite clues on receiving a missed clue message.",
			position = 4
	)
	default boolean eliteToggle() {
		return true;
	}
	@ConfigItem(
			keyName = "masterToggle",
			name = "Show Missed Master Clues",
			description = "Do not show simulated master clues on receiving a missed clue message.",
			position = 5
	)
	default boolean masterToggle() {
		return true;
	}
}

package com.missedclues;

import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class Overlay extends net.runelite.client.ui.overlay.Overlay
{
    private final Client client;
    private final ItemManager itemManager;
    private final BufferedImage closeButtonImage;
    private final BufferedImage closeButtonHoveredImage;
    private final BufferedImage incineratorImage;
    private Rectangle closeButtonBounds;
    private boolean displayItems;
    private List<ItemStack> itemStacks = new ArrayList<>();

    private static final Set<Integer> NOTED_IDS = Set.of(
            12913, 269, 391, 245, 225, 207, 3049, 3051, 451, 2363,
            1747, 1391, 11951, 3024, 6685, 2444, 7060, 7218, 8778,
            8780, 8782, 3016, 2452, 2436, 379, 385, 373, 333,
            329, 1965, 315, 325, 347
    );

    private static final Set<Integer> QUANTITY_SENSITIVE_IDS = Set.of(
            882, 884, 995, 4561, 9194, 9245, 10476, 5289, 5315, 5316, 617
    );

    @Inject
    public Overlay(Client client, ItemManager itemManager)
    {
        this.client = client;
        this.itemManager = itemManager;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(200.0f);

        incineratorImage = ImageUtil.loadImageResource(getClass(), "/incinerator.png");
        closeButtonImage = ImageUtil.loadImageResource(getClass(), "/closeButton.png");
        closeButtonHoveredImage = ImageUtil.loadImageResource(getClass(), "/closeButtonHovered.png");
    }

    public void displayItems(boolean show)
    {
        this.displayItems = show;
    }

    public boolean isDisplayingItems()
    {
        return this.displayItems;
    }

    public void setItemStacks(List<ItemStack> stacks)
    {
        this.itemStacks = stacks;
    }

    public Rectangle getCloseButtonBounds()
    {
        return closeButtonBounds;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!displayItems || itemStacks.isEmpty())
        {
            return null;
        }

        final int canvasWidth = client.getCanvasWidth();
        final int canvasHeight = client.getCanvasHeight();

        final int startX;
        final int startY;

        if (canvasWidth <= 1000 && canvasHeight <= 650)
        {
            startX = (canvasWidth - 309) / 2;
            startY = (canvasHeight - 296) / 2;
        }
        else
        {
            startX = canvasWidth / 2 - 24;
            startY = canvasHeight / 3 - 24;
        }

        if (incineratorImage != null)
        {
            int incX = startX - 140;
            int incY = startY - 70;
            graphics.drawImage(incineratorImage, incX, incY, null);

            if (closeButtonImage != null)
            {
                int closeX = incX + incineratorImage.getWidth() - closeButtonImage.getWidth() + 40;
                int closeY = incY + 15;

                closeButtonBounds = new Rectangle(
                        closeX,
                        closeY,
                        closeButtonImage.getWidth(),
                        closeButtonImage.getHeight()
                );

                net.runelite.api.Point netMousePos = client.getMouseCanvasPosition();
                Point mousePos = new Point(netMousePos.getX(), netMousePos.getY());

                boolean isHovered = closeButtonBounds.contains(mousePos);
                BufferedImage toDraw = isHovered ? closeButtonHoveredImage : closeButtonImage;
                graphics.drawImage(toDraw, closeX, closeY, null);
            }
        }

        final int itemsPerRow = 3;
        int x = startX;
        int y = startY;

        for (int i = 0; i < itemStacks.size(); i++)
        {
            ItemStack stack = itemStacks.get(i);
            int itemId = stack.getItemId();
            int quantity = stack.getQuantity();

            if (NOTED_IDS.contains(itemId))
            {
                itemId += 1;
            }

            BufferedImage itemImage;
            if (QUANTITY_SENSITIVE_IDS.contains(stack.getItemId()))
            {
                itemImage = itemManager.getImage(itemId, quantity, true);
            }
            else
            {
                itemImage = itemManager.getImage(itemId);
            }

            if (itemImage != null)
            {
                graphics.drawImage(itemImage, x, y, null);

                if (quantity > 1 && !QUANTITY_SENSITIVE_IDS.contains(stack.getItemId()))
                {
                    String qtyText = String.valueOf(quantity);
                    FontMetrics fm = graphics.getFontMetrics();
                    int textX = x;
                    int textY = y + fm.getAscent();
                    graphics.setColor(Color.BLACK);
                    graphics.drawString(qtyText, textX + 1, textY + 1);
                    graphics.setColor(Color.YELLOW);
                    graphics.drawString(qtyText, textX, textY);
                }
                if ((i + 1) % itemsPerRow == 0)
                {
                    x = startX;
                    y += itemImage.getHeight() + 10;
                }
                else
                {
                    x += itemImage.getWidth() + 10;
                }
            }
        }

        return null;
    }
}
package com.missedclues;

public class ClueConfiguration
{
    private String chatTrigger;
    private String jsonResource;
    private int minItems;
    private int maxItems;
    private String tier;

    public String getChatTrigger()
    {
        return chatTrigger;
    }

    public String getJsonResource()
    {
        return jsonResource;
    }

    public int getMinItems()
    {
        return minItems;
    }

    public int getMaxItems()
    {
        return maxItems;
    }

    public String getTier()
    {
        return tier;
    }

}
package com.missedclues;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.MouseAdapter;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.inject.Inject;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
		name = "Missed Clues"
)
public class MissedCluesPlugin extends Plugin
{
	@Inject
	private ItemManager itemManager;

	@Inject
	private Client client;

	@Inject
	private MissedCluesConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Overlay overlay;

	@Inject
	private MouseManager mouseManager;

	@Inject
	private Gson gson;

	private final Random random = new Random();

	private final KeyAdapter escKeyListener = new KeyAdapter()
	{
		@Override
		public void keyPressed(KeyEvent e)
		{
			if (overlay.isDisplayingItems() && e.getKeyCode() == KeyEvent.VK_ESCAPE)
			{
				overlay.displayItems(false);
			}
		}
	};

	private final MouseAdapter mouseListener = new MouseAdapter()
	{
		@Override
		public MouseEvent mousePressed(MouseEvent event)
		{
			if (overlay.isDisplayingItems() && overlay.getCloseButtonBounds() != null)
			{
				if (overlay.getCloseButtonBounds().contains(event.getPoint()))
				{
					overlay.displayItems(false);
					event.consume();
				}
			}
			return event;
		}
	};

	private List<ClueConfiguration> clueConfigs = new ArrayList<>();
	private final Map<String, List<RewardItem>> rewardTables = new HashMap<>();

	@Provides
	MissedCluesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MissedCluesConfig.class);
	}

	@Override
	protected void startUp()
	{
		log.info("Missed Clues plugin started!");

		loadClueConfigs();
		loadAllRewardTables();

		overlayManager.add(overlay);

		mouseManager.registerMouseListener(mouseListener);
		client.getCanvas().addKeyListener(escKeyListener);
	}

	@Override
	protected void shutDown()
	{
		log.info("Missed Clues plugin stopped!");
		overlayManager.remove(overlay);
		mouseManager.unregisterMouseListener(mouseListener);
		client.getCanvas().removeKeyListener(escKeyListener);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		String message = event.getMessage();
		ClueConfiguration clueConfig = clueConfigs.stream()
				.filter(cfg -> message.equals(cfg.getChatTrigger()))
				.findFirst()
				.orElse(null);

		if (clueConfig == null)
		{
			return;
		}

		if (!isTierEnabled(clueConfig.getTier()))
		{
			return;
		}

		List<RewardItem> rewardList = rewardTables.get(clueConfig.getChatTrigger());
		if (rewardList == null || rewardList.isEmpty())
		{
			client.addChatMessage(
					ChatMessageType.GAMEMESSAGE,
					"",
					"No rewards found for " + clueConfig.getChatTrigger(),
					null
			);
			return;
		}

		int minItems = clueConfig.getMinItems();
		int maxItems = clueConfig.getMaxItems();
		int countToPick = random.nextInt(maxItems - minItems + 1) + minItems;

		List<RewardItem> chosenItems = pickWeightedItems(rewardList, countToPick);
		chosenItems = consolidateItems(chosenItems);

		if (chosenItems.isEmpty())
		{
			client.addChatMessage(
					ChatMessageType.GAMEMESSAGE,
					"",
					"Could not select any weighted items.",
					null
			);
			return;
		}

		client.addChatMessage(
				ChatMessageType.GAMEMESSAGE,
				"",
				"You have a funny feeling you would have received:",
				null
		);

		for (RewardItem item : chosenItems)
		{
			client.addChatMessage(
					ChatMessageType.GAMEMESSAGE,
					"",
					item.getQuantity() + "x " + item.getItemName(),
					null
			);
		}

		showItemsInOverlay(chosenItems);
	}

	private boolean isTierEnabled(String tier)
	{
		if (tier == null)
		{
			return false;
		}

		switch (tier.toLowerCase())
		{
			case "beginner":
				return config.beginnerToggle();
			case "easy":
				return config.easyToggle();
			case "medium":
				return config.mediumToggle();
			case "hard":
				return config.hardToggle();
			case "elite":
				return config.eliteToggle();
			case "master":
				return config.masterToggle();
			default:
				return true;
		}
	}

	private void loadClueConfigs()
	{
		try (InputStream is = getClass().getResourceAsStream("/clue_config.json"))
		{
			if (is == null)
			{
				log.warn("Failed to find clue_config.json in resources.");
				return;
			}

			clueConfigs = gson.fromJson(
					new InputStreamReader(is, StandardCharsets.UTF_8),
					new TypeToken<List<ClueConfiguration>>() {}.getType()
			);
			log.info("Loaded {} ClueConfiguration entries.", clueConfigs.size());
		}
		catch (Exception e)
		{
			log.error("Error reading /clue_config.json", e);
		}
	}

	private void loadAllRewardTables()
	{
		for (ClueConfiguration cfg : clueConfigs)
		{
			try (InputStream is = getClass().getResourceAsStream(cfg.getJsonResource()))
			{
				if (is == null)
				{
					log.warn("Failed to locate {}", cfg.getJsonResource());
					continue;
				}
				
				List<RewardItem> items = gson.fromJson(
						new InputStreamReader(is, StandardCharsets.UTF_8),
						new TypeToken<List<RewardItem>>() {}.getType()
				);

				rewardTables.put(cfg.getChatTrigger(), items);
				log.info("Loaded {} items for trigger \"{}\" from {}",
						items.size(),
						cfg.getChatTrigger(),
						cfg.getJsonResource()
				);
			}
			catch (Exception e)
			{
				log.error("Error reading {}", cfg.getJsonResource(), e);
			}
		}
	}

	private RewardItem getWeightedRandomReward(List<RewardItem> items)
	{
		int totalWeight = items.stream().mapToInt(RewardItem::getWeight).sum();
		if (totalWeight <= 0)
		{
			return null;
		}
		int roll = random.nextInt(totalWeight) + 1;
		int runningSum = 0;

		for (RewardItem candidate : items)
		{
			runningSum += candidate.getWeight();
			if (runningSum >= roll)
			{
				return candidate;
			}
		}
		return null;
	}

	private List<RewardItem> pickWeightedItems(List<RewardItem> sourceList, int countToPick)
	{
		List<RewardItem> chosenItems = new ArrayList<>();
		for (int i = 0; i < countToPick; i++)
		{
			RewardItem reward = getWeightedRandomReward(sourceList);
			if (reward != null)
			{
				int parsedQty = reward.getParsedQuantity();
				reward.setQuantity(String.valueOf(parsedQty));
				chosenItems.add(reward);
			}
		}
		return chosenItems;
	}

	private List<RewardItem> consolidateItems(List<RewardItem> items)
	{
		Map<Integer, RewardItem> byItemId = new HashMap<>();
		for (RewardItem item : items)
		{
			int itemId = item.getItemId();
			int parsedQty = item.getParsedQuantity();

			if (!byItemId.containsKey(itemId))
			{
				byItemId.put(itemId, new RewardItem(
						itemId,
						item.getItemName(),
						String.valueOf(parsedQty),
						item.getRarity(),
						item.getWeight()
				));
			}
			else
			{
				RewardItem existing = byItemId.get(itemId);
				int existingQty = existing.getParsedQuantity();
				existing.setQuantity(String.valueOf(existingQty + parsedQty));
			}
		}
		return new ArrayList<>(byItemId.values());
	}

	private void showItemsInOverlay(List<RewardItem> chosenItems)
	{
		long totalPrice = 0;
		for (RewardItem item : chosenItems)
		{
			int gePriceEach = itemManager.getItemPrice(item.getItemId());
			totalPrice += (long) gePriceEach * item.getParsedQuantity();
		}

		String formattedPrice = String.format("%,d", totalPrice);
		client.addChatMessage(
				ChatMessageType.GAMEMESSAGE,
				"",
				"Your loot would have been worth " + formattedPrice + " coins!",
				null
		);

		List<ItemStack> stacks = chosenItems.stream()
				.map(item -> new ItemStack(item.getItemId(), item.getParsedQuantity()))
				.collect(Collectors.toList());

		overlay.displayItems(false);
		overlay.setItemStacks(stacks);
		overlay.displayItems(true);
	}
}

package com.missedclues;

public class ItemStack
{
    private final int itemId;
    private final int quantity;

    public ItemStack(int itemId, int quantity)
    {
        this.itemId = itemId;
        this.quantity = quantity;
    }

    public int getItemId()
    {
        return itemId;
    }

    public int getQuantity()
    {
        return quantity;
    }
}
package com.missedclues;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MissedCluesPlugin.class);
		RuneLite.main(args);
	}
}
