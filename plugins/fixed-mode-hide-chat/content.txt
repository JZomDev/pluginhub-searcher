package io.github.deathbeam.plugins.fixedhidechat;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.*;
import javax.inject.Inject;

import com.google.inject.*;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.*;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.*;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import static io.github.deathbeam.plugins.fixedhidechat.FixedHideChatConstants.*;

@Slf4j
@PluginDescriptor(
	name = "Fixed Mode Hide Chat",
	description = "Hides chatbox in fixed mode and expands the view"
)
public class FixedHideChatPlugin extends Plugin implements KeyListener
{
	@Inject
	private Client client;

	@Inject
	private FixedHideChatConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private KeyManager keyManager;

	@Inject
	private SpriteManager spriteManager;

	private int lastMenu = 0;
	private boolean hideChat = true;
	private boolean hideChatPrevious = hideChat;

	@Override
	protected void startUp() throws Exception
	{
		spriteManager.addSpriteOverrides(FixedHideChatSprites.values());
		// Register listener
		keyManager.registerKeyListener(this);
	}

	@Override
	protected void shutDown() throws Exception
	{
		spriteManager.removeSpriteOverrides(FixedHideChatSprites.values());
		// Unregister listener
		keyManager.unregisterKeyListener(this);

		// Reset menu state
		hideChat = true;
		lastMenu = 0;

		// Reset widgets
		clientThread.invoke(this::resetWidgets);
	}

	@Override
	public void keyTyped(KeyEvent e)
	{
		keyReleased(e);
	}

	@Override
	public void keyPressed(KeyEvent e)
	{
		keyReleased(e);
	}

	@Override
	public void keyReleased(KeyEvent e)
	{
		if (!client.isResized() && e.getKeyCode() == config.hideChatHotkey().getKeyCode() && e.getModifiersEx() == config.hideChatHotkey().getModifiers() && !hideChat)
		{
			hideChat = true;
			e.consume();
		}
	}

	// Recursive function to traverse through widgets & children
	private boolean isWidgetFound(Object object) {
		if (object instanceof Widget) {
			Widget widget = (Widget) object;
			if (!widget.isSelfHidden()) {
				return !widget.isHidden();
			}
		}

		if (object instanceof Widget[]) {
			Widget[] widgetArray = Arrays.copyOf((Widget[]) object, ((Widget[]) object).length);
			for (Object widgetElement : widgetArray) {
				return isWidgetFound(widgetElement);
			}
		}
		return false;
	}

	@Subscribe
	public void onBeforeRender(final BeforeRender event)
	{
		if (client.isResized())
		{
			resetFixedHideChatBorders();
			return;
		}

		// Bank container sometimes moves offscreen on resize and quick inputs, workaround
		final Widget bankWidget = client.getWidget(ComponentID.BANK_CONTAINER);
		if (bankWidget != null && !bankWidget.isSelfHidden())
		{
			// call [clientscript,bankmain_init] because otherwise the tag tabs don't extend properly
			// but don't call it every frame because then performance tanks
			// Causes a very slight flicker of the tag tab above the swap button sadly when opening the bag without the chat hidden
			if (hideChatPrevious != hideChat)
			{
				client.createScriptEvent(bankWidget.getOnLoadListener())
					.setSource(bankWidget)
					.run();
			}
			changeWidgetXY(bankWidget, BANK_X);
		}

		// The seed vault container sometimes moves offscreen on resize and quick inputs, workaround
		final Widget seedVaultWidget = client.getWidget(41353217);
		if (seedVaultWidget != null && !seedVaultWidget.isSelfHidden())
		{
			changeWidgetXY(seedVaultWidget, 6);
		}

		if (!hideChat && config.resizeViewport())
		{
			setViewSizeTo(EXPANDED_VIEW_HEIGHT, DEFAULT_VIEW_HEIGHT);
		} else	{
			// Expand the view height
			setViewSizeTo(DEFAULT_VIEW_HEIGHT, EXPANDED_VIEW_HEIGHT);
		}

		final Widget chatboxMessages = client.getWidget(ComponentID.CHATBOX_FRAME);

		if (chatboxMessages != null)
		{
			boolean found = !hideChat;

			// Check if any auto-expand interface is open
			if (!found) {
				for (final Map.Entry<Integer, Integer> widgets : AUTO_EXPAND_WIDGETS) {
					final Widget fairyRingSearch = client.getWidget(InterfaceID.CHATBOX, 38);
					if (fairyRingSearch != null) {
						Widget[] fairyRingArray = fairyRingSearch.getDynamicChildren();
						if (fairyRingArray.length > 0) {
							if (fairyRingArray[0] != null && fairyRingArray[0].getText().contains("fairy")) {
								found = true;
								break;
							}
						}
					}

					final Widget widget = client.getWidget(widgets.getKey(), widgets.getValue());
					if (widget != null && !widget.isSelfHidden()) {
						final Widget[] nestedChildren = widget.getNestedChildren();
						final Widget[] staticChildren = widget.getStaticChildren();

						if (staticChildren != null && staticChildren.length > 0) {
							found = isWidgetFound(staticChildren);
						}
						else if (nestedChildren != null && nestedChildren.length > 0) {
							found = isWidgetFound(nestedChildren);
						} else {
							found = isWidgetFound(widget);
						}

						if (found) {
							break;
						}
					}
				}
			}
			// Resize some widgets that might interfere with having expanded chat
			setWidgetsSizeTo(
				found ? EXPANDED_VIEW_WIDGET_HEIGHT : DEFAULT_VIEW_WIDGET_HEIGHT,
				found ? DEFAULT_VIEW_WIDGET_HEIGHT : EXPANDED_VIEW_WIDGET_HEIGHT);

			// Hide/show chat messages
			chatboxMessages.setHidden(!found);
		}

		fixedHideChatBorders();

		hideChatPrevious = hideChat;
	}

	@Subscribe
	public void onMenuOptionClicked(final MenuOptionClicked event)
	{
		if (!"Switch tab".equals(event.getMenuOption()))
		{
			return;
		}

		final Widget chatboxMessages = client.getWidget(ComponentID.CHATBOX_FRAME);
		final int newMenu = event.getParam1(); // Param1 is the same as getWidget().getId()
		hideChat = true;

		if (newMenu != lastMenu || (chatboxMessages != null && chatboxMessages.isHidden()))
		{
			hideChat = false;
			lastMenu = newMenu;
		}
	}

	private static void changeWidgetXY(Widget widget, int xPosition)
	{
		widget.setOriginalX(xPosition);
		widget.setOriginalY(BANK_Y);
		widget.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
		widget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		widget.revalidateScroll();
	}

	private static void setWidgetHeight(final Widget widget, final int height)
	{
		widget.setOriginalHeight(height);
		widget.setHeightMode(WidgetSizeMode.ABSOLUTE);
		widget.revalidateScroll();
	}

	private static void changeWidgetHeight(int originalHeight, int newHeight, Widget widget)
	{
		if (widget.getHeight() == originalHeight)
		{
			setWidgetHeight(widget, newHeight);
			final Widget[] nestedChildren = widget.getNestedChildren();

			if (nestedChildren != null)
			{
				for (final Widget nestedChild : nestedChildren)
				{
					if (nestedChild.getHeight() == originalHeight)
					{
						setWidgetHeight(nestedChild, newHeight);
					}
				}
			}

			final Widget[] dynamicChildren = widget.getDynamicChildren();

			if (dynamicChildren != null)
			{
				for (final Widget child : dynamicChildren)
				{
					if (child.getHeight() == originalHeight)
					{
						setWidgetHeight(child, newHeight);
					}
				}
			}
		}
	}

	private void setWidgetsSizeTo(final int originalHeight, final int newHeight)
	{
		for (final Map.Entry<Integer, Integer> widgets : TO_CONTRACT_WIDGETS) // FIXED_VIEWPORT_BANK_POPUP_CONTAINER && FIXED_VIEWPORT_SEED_VAULT_INVENTORY_ITEM_CONTAINER
		{
			final Widget widget = widgets.getValue() == 0 ? client.getWidget(widgets.getKey()) : client.getWidget(widgets.getKey(), widgets.getValue());
			if (widget != null && !widget.isSelfHidden())
			{
				changeWidgetHeight(originalHeight, newHeight, widget);
			}
		}
	}

	private void setViewSizeTo(final int originalHeight, final int newHeight)
	{
		final Widget viewport = client.getWidget(ComponentID.FIXED_VIEWPORT_FIXED_VIEWPORT);

		if (viewport != null)
		{
			setWidgetHeight(viewport, newHeight);
		}

		final Widget fixedMain = client.getWidget(FIXED_MAIN.getKey(), FIXED_MAIN.getValue());

		if (fixedMain != null && fixedMain.getHeight() == originalHeight)
		{
			setWidgetHeight(fixedMain, newHeight);

			final Widget[] staticChildren = fixedMain.getStaticChildren();

			// Expand all children of the main fixed view
			for (final Widget child : staticChildren)
			{
				changeWidgetHeight(originalHeight, newHeight, child);
			}
		}

	}

	private void resetWidgets()
	{
		if (client.isResized())
		{
			return;
		}

		// Contract the view if it is expanded
		setViewSizeTo(EXPANDED_VIEW_HEIGHT, DEFAULT_VIEW_HEIGHT);
		setWidgetsSizeTo(EXPANDED_VIEW_WIDGET_HEIGHT, DEFAULT_VIEW_WIDGET_HEIGHT);

		// Show the chat messages widget again
		final Widget chatboxMessages = client.getWidget(ComponentID.CHATBOX_FRAME);

		if (chatboxMessages != null)
		{
			chatboxMessages.setHidden(false);
			resetFixedHideChatBorders();
		}
	}

	public void fixedHideChatBorders()
	{
		Widget chatboxMessages = client.getWidget(ComponentID.CHATBOX_FRAME);
		if (client.isResized() || chatboxMessages == null || !chatboxMessages.isHidden())
		{
			resetFixedHideChatBorders();
			return;
		}
		Widget chatbox = client.getWidget(ComponentID.CHATBOX_PARENT);
		if (chatbox != null)
		{
			if (chatbox.getChild(1) != null)
			{
				return;
			}

			Widget leftBorder = chatbox.createChild(-1, WidgetType.GRAPHIC);
			leftBorder.setSpriteId(FixedHideChatSprites.FIXED_HIDE_CHAT_LEFT_BORDER.getSpriteId());
			leftBorder.setOriginalWidth(4);
			leftBorder.setOriginalHeight(142);
			leftBorder.setOriginalX(0);
			leftBorder.setOriginalY(0);
			leftBorder.setHidden(false);
			leftBorder.revalidate();

			Widget rightBorder = chatbox.createChild(-1, WidgetType.GRAPHIC);
			rightBorder.setSpriteId(FixedHideChatSprites.FIXED_HIDE_CHAT_RIGHT_BORDER.getSpriteId());
			rightBorder.setOriginalWidth(3);
			rightBorder.setOriginalHeight(142);
			rightBorder.setOriginalX(516);
			rightBorder.setOriginalY(0);
			rightBorder.setHidden(false);
			rightBorder.revalidate();
		}
	}

	public void resetFixedHideChatBorders()
	{
		Widget chatbox = client.getWidget(ComponentID.CHATBOX_PARENT);
		if (chatbox != null)
		{
			if (chatbox.getChild(1) != null)
			{
				chatbox.deleteAllChildren();
			}
		}
	}
	@Provides
	FixedHideChatConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FixedHideChatConfig.class);
	}
}

package io.github.deathbeam.plugins.fixedhidechat;

import com.google.common.collect.ImmutableSet;
import java.util.AbstractMap;
import java.util.Map;
import java.util.Set;

import net.runelite.api.widgets.*;

public class FixedHideChatConstants
{
	// 'Rub' option (S219.0) Duel rings, Slayer Rings, Burning Amulets, etc.
	private static final Map.Entry<Integer, Integer>  CHATBOX_MESSAGES_DIALOG_OPTION = new AbstractMap.SimpleEntry<>(
		InterfaceID.DIALOG_OPTION,
		0
	);

	// A lot of other stuff, we recurse through this, it should catch any messages under (S162.566 ID: 10617398)
	// Wrong PIN popup, Gauntlet Exit Prompt (S229.0 ID: 15007745), NPC Dialog (N231.0 ID: 5138816), Make-X (N270.0 ID: 17694720)... etc.
	private static final Map.Entry<Integer, Integer>  CHATBOX_MESSAGES_SPECIAL = new AbstractMap.SimpleEntry<>(
		InterfaceID.CHATBOX,
		566
	);

//	// Bank Search Container
	private static final Map.Entry<Integer, Integer>  CHATBOX_MESSAGES_CONTAINER = new AbstractMap.SimpleEntry<>(
		InterfaceID.CHATBOX,
		42
	);

	private static final Map.Entry<Integer, Integer>  CHATBOX_GE_SEARCH = new AbstractMap.SimpleEntry<>(
		InterfaceID.CHATBOX,
		43
	);

	private static final Map.Entry<Integer, Integer>  FIXED_VIEWPORT_BANK_POPUP_CONTAINER = new AbstractMap.SimpleEntry<>(
		ComponentID.BANK_CONTAINER,
		0
	);

	private static final Map.Entry<Integer, Integer>  FIXED_VIEWPORT_SEED_VAULT_INVENTORY_ITEM_CONTAINER = new AbstractMap.SimpleEntry<>(
		InterfaceID.SEED_VAULT,
		1
	);

	static final Map.Entry<Integer, Integer>  FIXED_MAIN = new AbstractMap.SimpleEntry<>(
		InterfaceID.FIXED_VIEWPORT,
		9
	);

	static final int DEFAULT_VIEW_HEIGHT = 334;
	static final int EXPANDED_VIEW_HEIGHT = 476;
	static final int BANK_X = 12;
	static final int BANK_Y = 2;
	// This is the VIEW_HEIGHT minus the BANK_Y minus 1 since there is a gap of 1 pixel at the bottom without the plugin.
	static final int DEFAULT_VIEW_WIDGET_HEIGHT = DEFAULT_VIEW_HEIGHT - BANK_Y - 1;
	static final int EXPANDED_VIEW_WIDGET_HEIGHT = EXPANDED_VIEW_HEIGHT - BANK_Y - 1;

	static final Set<Map.Entry<Integer, Integer>> AUTO_EXPAND_WIDGETS = ImmutableSet
		.<Map.Entry<Integer, Integer>>builder()
		.add(CHATBOX_MESSAGES_DIALOG_OPTION)
		.add(CHATBOX_MESSAGES_CONTAINER)
		.add(CHATBOX_MESSAGES_SPECIAL)
		.add(CHATBOX_GE_SEARCH)
		.build();

	static final Set<Map.Entry<Integer, Integer>> TO_CONTRACT_WIDGETS = ImmutableSet
		.<Map.Entry<Integer, Integer>>builder()
		.add(FIXED_VIEWPORT_BANK_POPUP_CONTAINER)
		.add(FIXED_VIEWPORT_SEED_VAULT_INVENTORY_ITEM_CONTAINER)
		.build();
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * Copyright (c) 2018, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.github.deathbeam.plugins.fixedhidechat;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.game.SpriteOverride;

@RequiredArgsConstructor
public enum FixedHideChatSprites implements SpriteOverride
{
	FIXED_HIDE_CHAT_LEFT_BORDER(-206, "/-206.png"),
	FIXED_HIDE_CHAT_RIGHT_BORDER(-207, "/-207.png"),

	;

	@Getter
	private final int spriteId;

	@Getter
	private final String fileName;
}

package io.github.deathbeam.plugins.fixedhidechat;

import net.runelite.client.config.*;
import java.awt.event.*;

@ConfigGroup("FixedHideChat")
public interface FixedHideChatConfig extends Config
{
	@ConfigItem(
			position = 0,
			keyName = "resizeViewport",
			name = "Resize viewport",
			description = "Resize viewport when opening/closing chat"
	)
	default boolean resizeViewport()
	{
		return false;
	}

	@ConfigItem(
			keyName = "hideChatHotkey",
			name = "Hotkey",
			description = "Hotkey used to hide the chat.<br>"
					+ "Can be a combination of keys (e.g. ctrl+L). Set the key to 'Not set' to disable this setting.",
			position = 1
	)
	default Keybind hideChatHotkey() {
		return new Keybind(KeyEvent.VK_ESCAPE, 0);
	}
}

package io.github.deathbeam.plugins.fixedhidechat;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FixedHideChatPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FixedHideChatPlugin.class);
		RuneLite.main(args);
	}
}
