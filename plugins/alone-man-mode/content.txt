package com.alone;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AlonePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AlonePlugin.class);
		RuneLite.main(args);
	}
}
package com.alone;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("example")
public interface AloneConfig extends Config
{
	@Alpha
	@ConfigItem(
			keyName = "overlayColor",
			name = "Notification color",
			description = "Set the notification overlay color",
			position = 1
	)
	default Color overlayColor() {
		return new Color(0.0f, 0.0f, 0.0f, 1.0f);
	}
// TODO
//	@ConfigItem(
//			keyName = "FRIENDS",
//			name = "Allow Friends",
//			description = "Prevents friends list players from forcing you to close your eyes",
//			position = 2
//	)
//	default boolean friends() {
//		return false;
//	}

	@ConfigItem(
			keyName = "NUM_PLAYERS",
			name = "Allowed Players",
			description = "The number of players allowed on screen before you close your eyes (excluding yourself)",
			position = 2
	)
	default int numPlayers() {
		return 0;
	}

}

package com.alone;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.PlayerDespawned;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
@PluginDescriptor(
	name = "Alone Man Mode"
)
public class AlonePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private AloneConfig config;

	@Inject
	OverlayManager overlayManager;

	@Inject
	NotAloneOverlay overlay;

	ThreadPoolExecutor executor;

	private AtomicInteger players;
	private AtomicBoolean alone;

	@Override
	protected void startUp() throws Exception {
		executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();
		players = new AtomicInteger(0);
		alone = new AtomicBoolean(true);
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		executor.shutdown();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
			players.set(0);
			alone.set(true);
		}
	}

	@Subscribe
	public void onPlayerSpawned(PlayerSpawned event) {
		if (event.getPlayer().getId() == client.getLocalPlayer().getId()) return;
		// TODO: Add in friends not counting when config is checked.
//		if (config.friends()) {
//			if(Arrays.stream(client.getFriendContainer().getMembers()).anyMatch(
//					friend -> (friend.equals(event.getPlayer()))))
//				return;
//		}
		executor.execute(() -> {
			if (players.incrementAndGet() > config.numPlayers()) {
				alone.set(false);
			} else {
				alone.set(true);
			}
		});
	}

	@Subscribe
	public void onPlayerDespawned(PlayerDespawned event) {
		if (event.getPlayer().getId() == client.getLocalPlayer().getId()) return;
		executor.execute(() -> {
			if (players.get() != 0 && players.decrementAndGet() > config.numPlayers()) {
				alone.set(false);
			} else {
				alone.set(true);
			}
		});
	}

	@Provides
	AloneConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AloneConfig.class);
	}

	boolean shouldRenderOverlay() {
		return !alone.get();
	}
}

package com.alone;

import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import java.awt.*;

public class NotAloneOverlay extends Overlay {
    private final Client client;
    private final AlonePlugin plugin;
    private final AloneConfig config;

    @Inject
    private NotAloneOverlay(Client client, AlonePlugin plugin, AloneConfig config) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.shouldRenderOverlay()) {
            Color color = graphics.getColor();
            graphics.setColor(config.overlayColor());
            graphics.fill(new Rectangle(client.getCanvas().getSize()));
            graphics.setColor(color);
        }
        return null;
    }
}

