package com.peek;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PeekPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PeekPlugin.class);
		RuneLite.main(args);
	}
}
package com.peek;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("wilderness-boss-peek")
public interface PeekConfig extends Config
{
	@ConfigItem(
		keyName = "activityColour",
		name = "Activity Colour",
		description = "The colour to highlight active boss lairs",
		position = 1
	)
	default Color activityColour()
	{
		return Color.RED;
	}

	@ConfigItem(
		keyName = "emptyColour",
		name = "Empty Colour",
		description = "The colour to highlight empty boss lairs",
		position = 2
	)
	default Color emptyColour()
	{
		return Color.GREEN;
	}

	@ConfigItem(
		keyName = "cutoffTime",
		name = "Cutoff Time",
		description = "The time in seconds to remember peek information",
		position = 3
	)
	default int cutoffTime()
	{
		return 300;
	}

	@ConfigItem(
		keyName = "activityToChatbox",
		name = "Active peeks to Chatbox",
		description = "Add active worlds to game chat preserved across world hops",
		position = 4
	)
	default boolean addActiveScoutsToChat()
	{
		return false;
	}

	@ConfigItem(
		keyName = "emptyToChatbox",
		name = "Empty peeks to Chatbox",
		description = "Add empty worlds to game chat preserved across world hops",
		position = 5
	)
	default boolean addEmptyScoutsToChat()
	{
		return false;
	}
}

package com.peek;

import com.google.inject.Provides;
import java.time.Instant;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.MenuAction;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Wilderness Boss Peek"
)
public class PeekPlugin extends Plugin
{

	public static final String ACTIVITY_MSG = "You peek into the darkness and can make out some movement. There is activity inside.";
	public static final String EMPTY_MSG = "You peek into the darkness and everything seems quiet. The cave is empty.";

	@Inject
	private Client client;

	@Inject
	private PeekConfig config;

	@Inject
	private PeekOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Getter
	private BossLair currentBoss;

	@Getter
	private Map<BossLair, Map<Integer, PeekInfo>> bossToWorlds;

	@Getter
	private final Map<BossLair, GameObject> lairToObject = new EnumMap<>(BossLair.class);

	@Override
	protected void startUp() throws Exception
	{
		bossToWorlds = new EnumMap<>(BossLair.class);
		for (BossLair bossLair : BossLair.values)
		{
			bossToWorlds.put(bossLair, new HashMap<>());
		}
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		for (BossLair bossLair : BossLair.values)
		{
			bossToWorlds.get(bossLair).clear();
		}
		bossToWorlds.clear();
		bossToWorlds = null;
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (!event.getType().equals(ChatMessageType.GAMEMESSAGE))
		{
			return;
		}
		if (ACTIVITY_MSG.equals(event.getMessage()))
		{
			PeekInfo peekInfo = new PeekInfo(Instant.now().toEpochMilli(), true);
			bossToWorlds.get(currentBoss).put(client.getWorld(), peekInfo);
			if (config.addActiveScoutsToChat())
			{
				String msg = "W" + client.getWorld() + " " + currentBoss.name + " Active";
				client.addChatMessage(ChatMessageType.CONSOLE, "", msg, "");
			}
		}
		else if (EMPTY_MSG.equals(event.getMessage()))
		{
			PeekInfo peekInfo = new PeekInfo(Instant.now().toEpochMilli(), false);
			bossToWorlds.get(currentBoss).put(client.getWorld(), peekInfo);
			if (config.addEmptyScoutsToChat())
			{
				String msg = "W" + client.getWorld() + " " + currentBoss.name + " Empty";
				client.addChatMessage(ChatMessageType.CONSOLE, "", msg, "");
			}
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (!event.getMenuAction().equals(MenuAction.GAME_OBJECT_SECOND_OPTION))
		{
			return;
		}
		int objectId = event.getId();
		for (BossLair bossLair : BossLair.values)
		{
			if (bossLair.objectId == objectId)
			{
				currentBoss = bossLair;
				return;
			}
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		int objId = event.getGameObject().getId();
		for (BossLair lair : BossLair.values)
		{
			if (objId == lair.objectId)
			{
				lairToObject.put(lair, event.getGameObject());
				return;
			}
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event)
	{
		int objId = event.getGameObject().getId();
		for (BossLair lair : BossLair.values)
		{
			if (objId == lair.objectId)
			{
				lairToObject.remove(lair);
				return;
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		GameState gameState = gameStateChanged.getGameState();
		if (gameState == GameState.LOADING)
		{
			lairToObject.clear();
		}
	}

	@Provides
	PeekConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PeekConfig.class);
	}
}

package com.peek;

import lombok.AllArgsConstructor;
import net.runelite.api.ObjectID;

@AllArgsConstructor
public enum BossLair
{
	VETION(ObjectID.CREVICE_46995, "Vet'ion"),
	CALLISTO(ObjectID.CAVE_ENTRANCE_47140, "Callisto"),
	VENENATIS(ObjectID.CAVE_ENTRANCE_47077, "Venenatis"),
	CALVARION(ObjectID.MEMORIAL_46996, "Calvar'ion"),
	ARTIO(ObjectID.CAVE_ENTRANCE_47141, "Artio"),
	SPINDEL(ObjectID.CAVE_ENTRANCE_47078, "Spindel"),
	;

	final int objectId;
	final String name;

	public static final BossLair[] values = values();
}

package com.peek;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.Instant;
import java.util.Locale;
import java.util.Map;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ColorUtil;

public class PeekOverlay extends Overlay
{
	private static final NumberFormat TIME_FORMATTER = DecimalFormat.getInstance(Locale.US);

	static
	{
		((DecimalFormat) TIME_FORMATTER).applyPattern("#0.0");
	}

	private final Client client;
	private final PeekPlugin plugin;
	private final PeekConfig config;

	@Inject
	private PeekOverlay(Client client, PeekPlugin plugin, PeekConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		for (Map.Entry<BossLair, GameObject> entry : plugin.getLairToObject().entrySet())
		{
			BossLair lair = entry.getKey();
			GameObject object = entry.getValue();
			int world = client.getWorld();
			PeekInfo peekInfo = plugin.getBossToWorlds().get(lair).get(world);
			if (peekInfo == null)
			{
				continue;
			}

			double timeSince = (Instant.now().toEpochMilli() - peekInfo.timeMs) / 1000.0;
			if (timeSince > config.cutoffTime())
			{
				plugin.getBossToWorlds().get(lair).remove(world);
				continue;
			}

			if (client.getLocalPlayer().getWorldLocation().distanceTo2D(object.getWorldLocation()) > 25)
			{
				continue;
			}

			String s = TIME_FORMATTER.format(timeSince);
			Color color = peekInfo.active ? config.activityColour() : config.emptyColour();

			Shape clickBox = object.getClickbox();
			if (clickBox == null)
			{
				continue;
			}
			OverlayUtil.renderPolygon(graphics, clickBox, color, ColorUtil.colorWithAlpha(color.brighter(), 40), new BasicStroke(1f));

			Point textLocation = object.getCanvasTextLocation(graphics, s, 0);
			if (textLocation == null)
			{
				continue;
			}
			OverlayUtil.renderTextLocation(graphics, textLocation, s, Color.WHITE);
		}
		return null;
	}
}

package com.peek;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public class PeekInfo
{
	final long timeMs;
	final boolean active;
}

