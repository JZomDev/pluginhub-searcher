package com.hpabovehead;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("settings")
public interface HPAboveHeadConfig extends Config
{
	@ConfigItem(
			keyName = "fontSize",
			name = "Font Size",
			description = "Size of the text above the HP bar"
	)
	@Range(min = 8, max = 40)
	default int fontSize()
	{
		return 14;
	}

	public enum FontOption
	{
		ARIAL,
		VERDANA,
		TIMES_NEW_ROMAN,
		MONOSPACED,
		UNICA_ONE,
		TAHOMA,
		CALIBRI,
		COURIER_NEW,
		GEORGIA,
		COMIC_SANS_MS,
		SEGOE_UI,
		LUCIDA_CONSOLE,
		ROBOTO

	}

	@ConfigItem(
			keyName = "font",
			name = "Font",
			description = "Font used for the text"
	)
	default FontOption font()
	{
		return FontOption.VERDANA;
	}

	@ConfigItem(
			keyName = "color",
			name = "Text Colour",
			description = "Colour of the text above the HP bar"
	)
	default Color color()
	{
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "textHeightOffset",
			name = "Text vertical offset",
			description = "How high above the HP bar to render the HP text"
	)
	default int textHeightOffset()
	{
		return 47;
	}

	@ConfigItem(
			keyName = "textXOffset",
			name = "Text horizontal offset",
			description = "Horizontal offset for the HP text relative to the player's centre"
	)
	default int textXOffset()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "showBackground",
			name = "Show Background",
			description = "Draw a background behind the HP text"
	)
	default boolean showBackground()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "backgroundColor",
			name = "Background Colour",
			description = "Colour of the HP text background"
	)
	default Color backgroundColor()
	{
		return new Color(0, 0, 0, 125); // semi-transparent black
	}

}

package com.hpabovehead;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.api.Skill;

import javax.inject.Inject;
import java.awt.*;

public class HPAboveHeadOverlay extends Overlay
{
    private final Client client;
    private final HPAboveHeadConfig config;

    @Inject
    public HPAboveHeadOverlay(Client client, HPAboveHeadConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setPriority(OverlayPriority.MED);
    }

    @Override
    public Dimension render(Graphics2D g)
    {
        Player localPlayer = client.getLocalPlayer();
        if (localPlayer == null || localPlayer.getHealthScale() <= 0)
        {
            return null;
        }

        int maxHp = client.getRealSkillLevel(Skill.HITPOINTS);
        int currentHp = client.getBoostedSkillLevel(Skill.HITPOINTS);
        String text = currentHp + "/" + maxHp;

        // set font
        g.setFont(new Font(config.font().name(), Font.PLAIN, config.fontSize()));
        FontMetrics metrics = g.getFontMetrics();
        int textWidth = metrics.stringWidth(text);
        int textHeight = metrics.getHeight();

        // calc height (player's logical height + offset)
        int height = localPlayer.getLogicalHeight() + config.textHeightOffset();
        net.runelite.api.coords.LocalPoint localLocation = localPlayer.getLocalLocation();
        net.runelite.api.Point canvasPoint = Perspective.localToCanvas(client, localLocation, client.getPlane(), height);

        if (canvasPoint != null)
        {
            // centre the text and apply horizontal offset
            int x = canvasPoint.getX() - (textWidth / 2) + config.textXOffset();
            int y = canvasPoint.getY();

            // optional background box
            if (config.showBackground())
            {
                int padding = 2;
                int boxX = x - padding;
                int boxY = y - textHeight + 4;
                int boxWidth = textWidth + padding * 2;
                int boxHeight = textHeight;

                g.setColor(config.backgroundColor());
                g.fillRect(boxX, boxY, boxWidth, boxHeight);
            }

            // optional shadow
            g.setColor(Color.BLACK);
            g.drawString(text, x + 1, y + 1);

            // HP text
            g.setColor(config.color());
            g.drawString(text, x, y);
        }

        return null;
    }
}

package com.hpabovehead;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "HP Above Head"
)
public class HPAboveHeadPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private HPAboveHeadConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private HPAboveHeadOverlay overlay;

	@Override
	protected void startUp()
	{
		log.info("HP Above Head started!");
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		log.info("HP Above Head stopped!");
		overlayManager.remove(overlay);
	}

	@Provides
	HPAboveHeadConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HPAboveHeadConfig.class);
	}
}
package com.hpabovehead;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HPAboveHeadTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HPAboveHeadPlugin.class);
		RuneLite.main(args);
	}
}
