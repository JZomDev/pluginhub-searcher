package com.sotewallremover;

import com.google.common.collect.ImmutableSet;
import java.util.function.Function;
import lombok.AllArgsConstructor;
import java.util.Set;

@AllArgsConstructor
public enum Bosses {
	NEX(ImmutableSet.of(11600, 11601), 0, 3, false, ImmutableSet.of(26493, 26438, 26435, 37491, 26425, 26423, 42945), ImmutableSet.of(26423, 26425, 26426, 26424, 26435, 26438, 26439, 26437, 26436, 6926), SoteWallConfig::HideNex),
	SOTE(ImmutableSet.of(13123), 0, 1, true, ImmutableSet.of(33044, 33046, 33047, 33048, 33049, 33050, 33051, 33052, 33059, 33058, 33057, 33056, 33055, 33054, 33053), null, SoteWallConfig::HideSote),
	GAUNTLET(ImmutableSet.of(7512), 1, 2, true, ImmutableSet.of(36095, 36097, 36098, 36099, 36100, 36103, 36104, 36105), null, SoteWallConfig::HideGauntlet),
	CORRUPTED_GAUNTLET(ImmutableSet.of(7768), 1, 2, true, ImmutableSet.of(35992, 35994, 35995, 35996, 35997, 36002), null, SoteWallConfig::HideGauntlet);

	private final Set<Integer> regions;
	public final int minZ;
	public final int maxZ;
	public final boolean instanceOnly;
	public final Set<Integer> gameObj;
	public final Set<Integer> wallObj;
	private final Function<SoteWallConfig, Boolean> configChecker;
	
	public boolean isEnabled(SoteWallConfig config) {
		return configChecker.apply(config);
	}
	
	public static Bosses inRegion(int regionId) {
		for (Bosses b : Bosses.values())
		{
			if (b.regions.contains(regionId)) {
				return b;
			}
		}
		return null;
	}

	public static Bosses inRegion(int regionId, SoteWallConfig config) {
		for (Bosses b : Bosses.values())
		{
			if (b.isEnabled(config) && b.regions.contains(regionId)) {
				return b;
			}
		}
		return null;
	}
}

package com.sotewallremover;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
		name = "Boss Wall Remover",
		description = "Removes annoying walls at Sotetseg and Nex",
		tags = {"tob", "theatre of blood", "nex", "bossing"}
)
public class SoteWallPlugin extends Plugin
{
	@Inject
	private Client client;
	
	@Inject
	private SoteWallConfig config;

	@Inject
	private ClientThread clientThread;

	@Override
	protected void startUp() throws Exception
	{
		clientThread.invoke(() ->
		{
			if (client.getGameState() == GameState.LOGGED_IN)
			{
				regionAndWallCheck();
			}
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientThread.invoke(() ->
		{
			if (client.getGameState() == GameState.LOGGED_IN)
			{
				client.setGameState(GameState.LOADING);
			}
		});
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}
		regionAndWallCheck();
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		regionAndSpawnedWallCheck(event.getGameObject());
	}
	
	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(SoteWallConfig.configName))
		{
			int regionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
			Bosses boss = Bosses.inRegion(regionId);
			
			if (boss == null)
			{
				return;
			}
			
			if (event.getNewValue().equals("false"))
			{
				clientThread.invoke(() ->
				{
					if (client.getGameState() == GameState.LOGGED_IN)
					{
						client.setGameState(GameState.LOADING);
					}
				});
			}
			else if (event.getNewValue().equals("true"))
			{
				regionAndWallCheck();
			}
		}
	}

	private void regionAndSpawnedWallCheck(GameObject gameObject)
	{
		int regionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
		Bosses boss = Bosses.inRegion(regionId, config);
		if (boss == null)
		{
			return;
		}
		if (gameObject == null)
		{
			return;
		}
		removeSpawnedWall(boss, gameObject);
	}

	private void regionAndWallCheck()
	{
		int regionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
		Bosses boss = Bosses.inRegion(regionId, config);

		if (boss != null)
		{
			if (boss.instanceOnly && !client.getTopLevelWorldView().isInstance())
			{
				return;
			}
			removeWall(boss);
		}
	}

	private void removeSpawnedWall(Bosses boss, GameObject gameObject)
	{
		Scene scene = client.getTopLevelWorldView().getScene();
		if (gameObject != null && boss.gameObj.contains(gameObject.getId()))
		{
			scene.removeGameObject(gameObject);
		}
	}

	private void removeWall(Bosses boss)
	{
		Scene scene = client.getTopLevelWorldView().getScene();
		Tile[][][] tiles = scene.getTiles();
		for (int z = boss.minZ; z < boss.maxZ; ++z)
		{
			for (int x = 0; x < Constants.SCENE_SIZE; ++x)
			{
				for (int y = 0; y < Constants.SCENE_SIZE; ++y)
				{
					Tile tile = tiles[z][x][y];
					
					if (tile == null)
					{
						continue;
					}
					
					if (boss.gameObj != null)
					{
						GameObject[] gameObjects = tile.getGameObjects();
						if (gameObjects != null)
						{
							for (GameObject gameObject : gameObjects)
							{
								if (gameObject != null && boss.gameObj.contains(gameObject.getId()))
								{
									scene.removeGameObject(gameObject);
									break;
								}
							}
						}
					}
					
					
					if (boss.wallObj != null)
					{
						WallObject wo = tile.getWallObject();
						if (wo != null && boss.wallObj.contains(wo.getId()))
						{
							scene.removeTile(tile);
						}
					}
				}
			}
		}
	}
	
	@Provides
	SoteWallConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(SoteWallConfig.class);
	}
}

package com.sotewallremover;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import static com.sotewallremover.SoteWallConfig.configName;

@ConfigGroup(configName)
public interface SoteWallConfig extends Config
{
	String configName = "BossWallConfig";
	@ConfigItem(
			keyName = "hideSote",
			name = "Hide Walls At Soteseg",
			description = "",
			position = 0
	)
	default boolean HideSote()
	{
		return true;
	}
	@ConfigItem(
			keyName = "hideNex",
			name = "Hide Walls At Nex",
			description = "",
			position = 1
	)
	default boolean HideNex()
	{
		return true;
	}
	@ConfigItem(
			keyName = "hideGauntlet",
			name = "Hide Walls At Gauntlet",
			description = "",
			position = 2
	)
	default boolean HideGauntlet()
	{
		return false;
	}
	
}

package com.sotewallremover;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SoteWallPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SoteWallPlugin.class);
		RuneLite.main(args);
	}
}
