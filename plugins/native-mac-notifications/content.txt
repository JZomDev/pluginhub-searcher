package com.NativeMacNotifications;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NativeMacNotificationsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NativeMacNotificationsPlugin.class);
		RuneLite.main(args);
	}
}
package com.NativeMacNotifications;

import com.NativeMacNotifications.macJna.Foundation;
import static com.NativeMacNotifications.macJna.Foundation.invoke;
import static com.NativeMacNotifications.macJna.Foundation.nsString;
import com.NativeMacNotifications.macJna.ID;


public class Notification
{

	/**
	 * This code is from Intellij-community Github repo. Some has been edited or removed. But all credit goes to those contributors
	 * https://github.com/JetBrains/intellij-community/blob/master/platform/platform-impl/src/com/intellij/ui/MountainLionNotifications.java
	 */
	public static void notify(String title, String description)
	{
		final ID notification = invoke(Foundation.getObjcClass("NSUserNotification"), "new");
		invoke(notification, "setTitle:", nsString(title));
		invoke(notification, "setInformativeText:", nsString(description));
		final ID center = invoke(Foundation.getObjcClass("NSUserNotificationCenter"), "defaultUserNotificationCenter");
		invoke(center, "deliverNotification:", notification);
	}
}



package com.NativeMacNotifications;

import com.google.common.base.Strings;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NotificationFired;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.PluginInstantiationException;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.util.OSType;

@Slf4j
@PluginDescriptor(
        name = "Native Mac Notifications"
)
public class NativeMacNotificationsPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private PluginManager pluginManager;

    @Inject
    private RuneLiteConfig runeLiteConfig;

    @Inject
    private ClientUI clientUI;

    @Inject
    private ConfigManager configManager;

    private Boolean resetTrayNotificationsAtShutDown = false;

    @Subscribe
    public void onNotificationFired(NotificationFired notificationFired) {
        try {
            if (OSType.getOSType() != OSType.MacOS) {
                return;
            }

            if (!runeLiteConfig.sendNotificationsWhenFocused() && clientUI.isFocused()) {
                return;
            }

            Notification.notify(buildTitle(), notificationFired.getMessage());
        } catch (Exception e) {
            stopPlugin();
        }
    }

    @Override
    protected void startUp() {
        if (OSType.getOSType() == OSType.MacOS) {
            if (runeLiteConfig.enableTrayNotifications()) {
                resetTrayNotificationsAtShutDown = true;
                this.setNotificationTray(false);
            }
        }
    }

    @Override
    protected void shutDown() {
        if (resetTrayNotificationsAtShutDown) {
            this.setNotificationTray(true);
        }
    }

    private void stopPlugin() {
        try {
            pluginManager.setPluginEnabled(this, false);
            pluginManager.stopPlugin(this);
        } catch (PluginInstantiationException ex) {
            log.error("error stopping plugin", ex);
        }
    }

    private String buildTitle() {
        String notificationTitle = "RuneLite";

        Player player = client.getLocalPlayer();
        if (player == null) {
            return notificationTitle;
        }

        String name = player.getName();
        if (Strings.isNullOrEmpty(name)) {
            return notificationTitle;
        }

        return notificationTitle + " - " + name;
    }

    private void setNotificationTray(boolean enable) {
        if (OSType.getOSType() == OSType.MacOS) {
            configManager.setConfiguration(RuneLiteConfig.GROUP_NAME, "notificationTray", enable);
        }
    }
}

package com.NativeMacNotifications.macJna;

import com.sun.jna.Function;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import java.nio.charset.StandardCharsets;
import java.lang.reflect.Proxy;
import javax.annotation.Nullable;

/**
 * This code is from Intellij-community Github repo. Some has been edited or removed. But all credit goes to those contributors
 * https://github.com/JetBrains/intellij-community/blob/master/platform/util/ui/src/com/intellij/ui/mac/foundation/Foundation.java
 */
public final class Foundation
{
	private static final FoundationLibrary myFoundationLibrary;
	private static final Function myObjcMsgSend;

	static
	{
		myFoundationLibrary = Native.loadLibrary("Foundation", FoundationLibrary.class);
		NativeLibrary nativeLibrary = ((Library.Handler) Proxy.getInvocationHandler(myFoundationLibrary)).getNativeLibrary();
		myObjcMsgSend = nativeLibrary.getFunction("objc_msgSend");
	}

	public static void init()
	{ /* fake method to init foundation */ }

	private Foundation()
	{
	}

	/**
	 * Get the ID of the NSClass with className
	 */
	public static ID getObjcClass(String className)
	{
		return myFoundationLibrary.objc_getClass(className);
	}

	public static Pointer createSelector(String s)
	{
		return myFoundationLibrary.sel_registerName(s);
	}

	private static Object[] prepInvoke(ID id, Pointer selector, Object[] args)
	{
		Object[] invokArgs = new Object[args.length + 2];
		invokArgs[0] = id;
		invokArgs[1] = selector;
		System.arraycopy(args, 0, invokArgs, 2, args.length);
		return invokArgs;
	}

	public static ID invoke(final ID id, final Pointer selector, Object... args)
	{
		// objc_msgSend is called with the calling convention of the target method
		// on x86_64 this does not make a difference, but arm64 uses a different calling convention for varargs
		// it is therefore important to not call objc_msgSend as a vararg function
		return new ID(myObjcMsgSend.invokeLong(prepInvoke(id, selector, args)));
	}

	public static ID invoke(final String cls, final String selector, Object... args)
	{
		return invoke(getObjcClass(cls), createSelector(selector), args);
	}

	public static ID invoke(final ID id, final String selector, Object... args)
	{
		return invoke(id, createSelector(selector), args);
	}

	private static final class NSString
	{
		private static final ID nsStringCls = getObjcClass("NSString");
		private static final Pointer stringSel = createSelector("string");
		private static final Pointer allocSel = createSelector("alloc");
		private static final Pointer autoreleaseSel = createSelector("autorelease");
		private static final Pointer initWithBytesLengthEncodingSel = createSelector("initWithBytes:length:encoding:");
		private static final long nsEncodingUTF16LE = convertCFEncodingToNS(FoundationLibrary.kCFStringEncodingUTF16LE);

		public static ID create(String s)
		{
			// Use a byte[] rather than letting jna do the String -> char* marshalling itself.
			// Turns out about 10% quicker for long strings.
			if (s.isEmpty())
			{
				return invoke(nsStringCls, stringSel);
			}

			byte[] utf16Bytes = s.getBytes(StandardCharsets.UTF_16LE);
			return invoke(invoke(invoke(nsStringCls, allocSel),
				initWithBytesLengthEncodingSel, utf16Bytes, utf16Bytes.length, nsEncodingUTF16LE),
				autoreleaseSel);
		}
	}

	public static ID nsString(@Nullable String s)
	{
		return s == null ? ID.NIL : NSString.create(s);
	}

	private static long convertCFEncodingToNS(long cfEncoding)
	{
		return myFoundationLibrary.CFStringConvertEncodingToNSStringEncoding(cfEncoding) & 0xffffffffffL;  // trim to C-type limits
	}
}

package com.NativeMacNotifications.macJna;

import com.sun.jna.NativeLong;

/**
 * Could be an address in memory (if pointer to a class or method) or a value (like 0 or 1)
 *
 * This code is from Intellij-community Github repo. Some has been edited or removed. But all credit goes to those contributors
 * https://github.com/JetBrains/intellij-community/blob/master/platform/core-api/src/com/intellij/util/indexing/ID.java
 * User: spLeaner
 */
public class ID extends NativeLong
{

	public ID()
	{
	}

	public ID(long peer)
	{
		super(peer);
	}

	public static final ID NIL = new ID(0L);

	public boolean booleanValue()
	{
		return intValue() != 0;
	}
}
package com.NativeMacNotifications.macJna;

import com.sun.jna.Library;
import com.sun.jna.Pointer;

/**
 * This code is from Intellij-community Github repo. Some has been edited or removed. But all credit goes to those contributors
 * https://github.com/JetBrains/intellij-community/blob/master/platform/util/ui/src/com/intellij/ui/mac/foundation/FoundationLibrary.java
 */
public interface FoundationLibrary extends Library
{
	long CFStringConvertEncodingToNSStringEncoding(long cfEncoding);

	ID objc_getClass(String className);

	Pointer sel_registerName(String selectorName);

	int kCFStringEncodingUTF16LE = 0x14000100;
}

