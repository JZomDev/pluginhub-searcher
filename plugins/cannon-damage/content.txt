package com.cannondamage;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;

public class CannonDamageOverlay extends OverlayPanel
{
    private final CannonDamagePlugin plugin;

    @Inject
    public CannonDamageOverlay(CannonDamagePlugin plugin)
    {
        super(plugin);
        this.plugin = plugin;
        setPosition(OverlayPosition.TOP_LEFT);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!plugin.isPluginEnabled())
        {
            return null;
        }

        panelComponent.getChildren().clear();

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Cannon Damage:")
                .right(String.valueOf(plugin.getTotalDamage()))
                .build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Cannonballs Used:")
                .right(String.valueOf(plugin.getCannonballsUsed()))
                .build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Avg Dmg/Ball:")
                .right(String.format("%.2f", plugin.getAverageDamagePerCannonball()))
                .build());

        return super.render(graphics);
    }
}

package com.cannondamage;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Projectile;
import net.runelite.api.Skill;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.ProjectileMoved;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Set;

@PluginDescriptor(
        name = "Cannon Damage",
        description = "Tracks the amount of damage done from the cannon and the number of cannonballs used.",
        tags = {"cannon", "damage", "tracker"}
)
@Slf4j
public class CannonDamagePlugin extends Plugin {

    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private CannonDamageOverlay cannonDamageOverlay;

    private static final Set<Integer> CANNON_GAME_OBJECT_IDS = Set.of(6, 43027);
    private static final Set<Integer> CANNONBALL_PROJECTILE_IDS = Set.of(53, 2018);
    private static final double XP_PER_DAMAGE = 2.0;

    private final Queue<Projectile> trackedProjectiles = new LinkedList<>();
    private boolean cannonIsPlaced = false;

    private int totalDamage = 0;
    private int cannonballsUsed = 0;

    private double cannonStartRangedXp = 0;
    private double lastRangedXp = 0;
    private boolean hasStartedTrackingXp = false;

    private boolean pluginEnabled = false;

    @Override
    protected void startUp() {
        log.info("Cannon Damage Plugin started.");
        overlayManager.add(cannonDamageOverlay);
        pluginEnabled = true;
    }

    @Override
    protected void shutDown() {
        log.info("Cannon Damage Plugin stopped.");
        overlayManager.remove(cannonDamageOverlay);
        pluginEnabled = false;
        resetTracker();
    }

    public boolean isPluginEnabled() {
        return pluginEnabled;
    }

    private void resetTracker() {
        totalDamage = 0;
        cannonballsUsed = 0;
        cannonIsPlaced = false;
        trackedProjectiles.clear();
        cannonStartRangedXp = 0;
        lastRangedXp = 0;
        hasStartedTrackingXp = false;
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        GameObject spawnedObject = event.getGameObject();

        if (CANNON_GAME_OBJECT_IDS.contains(spawnedObject.getId())) {
            cannonIsPlaced = true;
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event) {
        GameObject despawnedObject = event.getGameObject();

        if (CANNON_GAME_OBJECT_IDS.contains(despawnedObject.getId())) {
            cannonIsPlaced = false;
        }
    }

    @Subscribe
    public void onProjectileMoved(ProjectileMoved event) {
        Projectile projectile = event.getProjectile();

        if (CANNONBALL_PROJECTILE_IDS.contains(projectile.getId()) && !trackedProjectiles.contains(projectile)) {
            if (trackedProjectiles.size() >= 5) {
                trackedProjectiles.poll();
            }

            trackedProjectiles.add(projectile);
            cannonballsUsed++;

            if (!hasStartedTrackingXp) {
                hasStartedTrackingXp = true;
                cannonStartRangedXp = client.getSkillExperience(Skill.RANGED);
                lastRangedXp = cannonStartRangedXp;
            }
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        if (!pluginEnabled || !hasStartedTrackingXp) {
            return;
        }

        double currentRangedXp = client.getSkillExperience(Skill.RANGED);
        double xpGained = currentRangedXp - lastRangedXp;

        if (xpGained > 0) {
            int damageDealt = (int) Math.round(xpGained / XP_PER_DAMAGE);
            totalDamage += damageDealt;
            lastRangedXp = currentRangedXp;
        }
    }

    public int getTotalDamage() {
        return totalDamage;
    }

    public int getCannonballsUsed() {
        return cannonballsUsed;
    }

    public double getAverageDamagePerCannonball() {
        return (cannonballsUsed > 0) ? (double) totalDamage / cannonballsUsed : 0.0;
    }
}

package com.cannondamage;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CannonDamagePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CannonDamagePlugin.class);
		RuneLite.main(args);
	}
}
