package com.visualtimer;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.audio.AudioPlayer;
import net.runelite.client.chat.ChatMessageManager;

import java.awt.image.BufferedImage;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;

@Slf4j
@PluginDescriptor(name = "Visual Timer")
public class VisualTimerPlugin extends Plugin
{
	@Inject
	private AudioPlayer audioPlayer;
	@Inject private Client client;
	@Inject private VisualTimerConfig config;
	@Inject private VisualTimerOverlayManager overlayManager;
	@Inject private VisualTimerPanel visualTimerPanel;
	@Inject private ClientToolbar clientToolbar;
	@Inject private VisualTimerScreenOverlay screenOverlay;
	@Inject private ChatMessageManager chatMessageManager;


	private NavigationButton navButton;

	private boolean screenFlashing = false;
	private boolean screenFlashVisible = false;
	private int flashTickCounter = 0;

	@Override
	protected void startUp() throws Exception
	{
		log.debug("Visual Timer started!");

		BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/panel_icon.png");

		navButton = NavigationButton.builder()
				.tooltip("Visual Timer")
				.icon(icon)
				.panel(visualTimerPanel)
				.build();

		clientToolbar.addNavigation(navButton);
		overlayManager.add(screenOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.debug("Visual Timer stopped!");
		clientToolbar.removeNavigation(navButton);
		overlayManager.removeAllTimers();
		overlayManager.remove(screenOverlay);
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		for (VisualTimerOverlay overlay : overlayManager.getActiveOverlays())
		{
			overlay.getTimer().tick(config);
		}

		if (screenFlashing)
		{
			screenFlashVisible = true;
		}
		else
		{
			screenFlashVisible = false;
			flashTickCounter = 0;
		}

		// âœ… Update the panel preview timer
		visualTimerPanel.updatePreviewTimer();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
//		if (event.getGameState() == GameState.LOGGED_IN)
//		{
//			client.addChatMessage(net.runelite.api.ChatMessageType.GAMEMESSAGE, "", "Visual Timer is ready.", null);
//		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (event.getMenuAction() != RUNELITE_OVERLAY)
			return;

		for (VisualTimerOverlay overlay : overlayManager.getActiveOverlays())
		{
			if (event.getMenuTarget().contains("Timer"))
			{
				switch (event.getMenuEntry().getOption())
				{
					case "Start":
						overlay.getTimer().start();
						break;
					case "Pause":
						overlay.getTimer().pause();
						break;
					case "Stop":
						overlay.getTimer().stop();
						break;
				}
				break;
			}
		}
	}

	public void setScreenFlashing(boolean flashing)
	{
		this.screenFlashing = flashing;
	}

	public boolean isScreenFlashing()
	{
		return screenFlashing;
	}

	public boolean isScreenFlashVisible()
	{
		return screenFlashVisible;
	}

	public Client getClient()
	{
		return client;
	}

	public VisualTimerConfig getConfig()
	{
		return config;
	}

	public AudioPlayer getAudioPlayer()
	{
		return audioPlayer;
	}

	@Provides
	VisualTimerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VisualTimerConfig.class);
	}
}

package com.visualtimer;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPriority;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import java.awt.*;
import java.awt.Dimension;
import java.awt.Graphics2D;

@Slf4j
public class VisualTimerScreenOverlay extends Overlay
{
    private final VisualTimerPlugin plugin;

    @Inject
    public VisualTimerScreenOverlay(VisualTimerPlugin plugin)
    {
        this.plugin = plugin;
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setPriority(OverlayPriority.HIGHEST);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!plugin.isScreenFlashing() || !plugin.isScreenFlashVisible())
        {
            return null;
        }

        // Light red color with ~35% opacity
        Color flashColor = new Color(255, 0, 0, 90);
        graphics.setColor(flashColor);

        Dimension dim = plugin.getClient().getRealDimensions();
        log.debug("Overlay dimensions: width={}, height={}", dim.width, dim.height);
        int width = dim.width;
        int height = dim.height;

        log.debug("Rendering screen flash overlay");
        graphics.fillRect(0, 0, width, height);

        return new Dimension(width, height);
    }
}
package com.visualtimer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("visualtimer")
public interface VisualTimerConfig extends Config
{
	@ConfigItem(
			keyName = "showExpiredTimers",
			name = "Show Expired Timers",
			description = "Whether to show timers after they expire"
	)
	default boolean showExpiredTimers()
	{
		return true;
	}

	@ConfigItem(
			keyName = "expirationEffect",
			name = "Expiration Alert",
			description = "Select how the timer alerts you when expired"
	)
	default ExpirationEffect expirationEffect()
	{
		return ExpirationEffect.FLASH_TEXT_FAST;
	}

	@ConfigItem(
			keyName = "playSoundOnExpire",
			name = "Play Alarm Sound",
			description = "Plays a sound when the timer expires"
	)
	default boolean playSoundOnExpire()
	{
		return false;
	}

	@ConfigItem(
			keyName = "enableWatchdogMessage",
			name = "Enable Watchdog Message",
			description = "When the timer expires, send an in game message which Watchdog can use for custom alerts."
	)
	default boolean enableWatchdogMessage()
	{
		return true;
	}

	enum ExpirationEffect
	{
		FLASH_TEXT_SLOW,
		FLASH_TEXT_FAST,
		FLASH_TIMER,
		FLASH_SCREEN,
		RAVE_TEXT,
		RAVE_TIMER
	}
}
package com.visualtimer;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.audio.AudioPlayer;

import javax.inject.Inject;

import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;

@Slf4j
public class VisualTimer
{
    @Inject private AudioPlayer audioPlayer;
    private final String name;
    private final long durationMillis;
    private final String initialFormattedTime;

    private int remainingTicks;
    private int totalTicks;

    private boolean running = false;
    private boolean expired = false;
    private int flashCounter = 0;

    private VisualTimerPlugin plugin;

    // FLASH_SCREEN state
    private boolean hasFlashed = false;
    private int screenFlashCount = 0;
    private int screenFlashTicks = 0;
    private final ChatMessageManager chatMessageManager;

    public VisualTimer(String name, long durationMillis, VisualTimerPlugin plugin, ChatMessageManager chatMessageManager)
    {
        this.name = name;
        this.durationMillis = durationMillis;
        this.initialFormattedTime = formatTime(durationMillis);
        this.remainingTicks = (int) (durationMillis / 600);
        this.totalTicks = remainingTicks;

        this.plugin = plugin;
        this.chatMessageManager = chatMessageManager;
    }

    public void start()
    {
        if (!running && !expired)
        {
            running = true;
            flashCounter = 0;
            screenFlashCount = 0;
            screenFlashTicks = 0;
            hasFlashed = false;

            remainingTicks = (int)(durationMillis / 600) + 1; // Add 0.6s buffer
            totalTicks = remainingTicks;
        }
    }

    public void pause()
    {
        if (running)
        {
            tick(null);
            running = false;
        }
    }

    public void reset()
    {
        running = false;
        expired = false;
        flashCounter = 0;
        screenFlashCount = 0;
        screenFlashTicks = 0;
        hasFlashed = false;
    }

    public void stop()
    {
        running = false;
        expired = true;
        hasFlashed = false;
    }

    public void setPlugin(VisualTimerPlugin plugin)
    {
        this.plugin = plugin;
    }

    public void tick(VisualTimerConfig config)
    {
        log.debug("Tick Start: expired={}, hasFlashed={}, screenFlashCount={}, screenFlashTicks={}",
                expired, hasFlashed, screenFlashCount, screenFlashTicks);

        if (running)
        {
            remainingTicks = Math.max(0, remainingTicks - 1);
            log.debug("Tick: remainingTicks={}, expired={}", remainingTicks, expired);

            if (remainingTicks == 0 && !expired)
            {
                expired = true;
                running = false;
                hasFlashed = false;
                screenFlashCount = 0;
                screenFlashTicks = 0;
                log.debug("Timer expired, starting screen flash");
                if (plugin.getConfig().playSoundOnExpire())
                {
                    playAlarmSound();
                }
                if (plugin.getConfig().enableWatchdogMessage())
                {
                    sendWatchdogMessage();
                }
            }
        }

        if (expired && !hasFlashed && config.expirationEffect() == VisualTimerConfig.ExpirationEffect.FLASH_SCREEN)
        {
            log.debug("Flash tick {} (flashCount={})", screenFlashTicks, screenFlashCount);

            boolean showFlash = screenFlashTicks % 2 == 0;
            plugin.setScreenFlashing(showFlash);
            log.debug("Flashing screen? {}", showFlash);

            if (!showFlash)
            {
                screenFlashCount++;
                log.debug("Incremented flash count to {}", screenFlashCount);
            }

            screenFlashTicks++;

            if (screenFlashCount >= 3)
            {
                log.debug("Stopping flash after 3 full flashes");
                plugin.setScreenFlashing(false);
                hasFlashed = true;
            }
        }
        else if (hasFlashed || config.expirationEffect() != VisualTimerConfig.ExpirationEffect.FLASH_SCREEN)
        {
            plugin.setScreenFlashing(false);
        }

        flashCounter++;
    }

    public String getFormattedTime()
    {
        long totalMillis = remainingTicks * 600L;
        return formatTime(totalMillis);
    }

    private String formatTime(long totalMillis)
    {
        long hours = totalMillis / (60 * 60 * 1000);
        long minutes = (totalMillis / (60 * 1000)) % 60;
        long seconds = (totalMillis / 1000) % 60;
        long tenths = (totalMillis % 1000) / 100;

        return String.format("%d:%02d:%02d.%d", hours, minutes, seconds, tenths);
    }

    public String getInitialFormattedTime()
    {
        return initialFormattedTime;
    }

    public boolean isRunning() { return running; }
    public boolean isExpired() { return expired; }
    public String getName() { return name; }

    public long getRemainingMillis()
    {
        return remainingTicks * 600L;
    }

    public int getFlashCounter()
    {
        return flashCounter++;
    }

    private void playAlarmSound()
    {
        audioPlayer = plugin.getAudioPlayer();
        if (audioPlayer == null)
        {
            log.error("audioplayer is null");
            return;
        }
        if (!plugin.getConfig().playSoundOnExpire())
        {
            return;
        }

        try
        {
            audioPlayer.play(VisualTimerPlugin.class, "/Alarm.wav", 0.8f);
        }
        catch (Exception e)
        {
            log.error("Failed to play alarm sound", e);
        }
    }

    private void sendWatchdogMessage()
    {
        chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.GAMEMESSAGE)
                .runeLiteFormattedMessage("Visual Timer expired!")
                .build());
    }
}
package com.visualtimer;

import com.google.common.collect.Lists;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.Overlay;

@Singleton
public class VisualTimerOverlayManager
{
    private final OverlayManager overlayManager;
    private final VisualTimerPlugin plugin;

    @Getter
    private final List<VisualTimerOverlay> activeOverlays = Lists.newArrayList();

    @Inject
    public VisualTimerOverlayManager(OverlayManager overlayManager, VisualTimerPlugin plugin)
    {
        this.overlayManager = overlayManager;
        this.plugin = plugin;
    }

    public void add(Overlay overlay)
    {
        overlayManager.add(overlay); // this is the RuneLite OverlayManager
    }
    public void remove(Overlay overlay) { overlayManager.remove(overlay); }


    public void addTimer(VisualTimer timer)
    {
        VisualTimerOverlay overlay = new VisualTimerOverlay(plugin.getClient(), plugin, timer);
        activeOverlays.add(overlay);
        overlayManager.add(overlay);
    }

    public void removeTimer(VisualTimerOverlay overlay)
    {
        activeOverlays.remove(overlay);
        overlayManager.remove(overlay);
    }

    public void removeAllTimers()
    {
        for (VisualTimerOverlay overlay : activeOverlays)
        {
            overlayManager.remove(overlay);
        }
        activeOverlays.clear();
    }
}
package com.visualtimer;

import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.ui.PluginPanel;

import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.List;
import net.runelite.client.chat.ChatMessageManager;

public class VisualTimerPanel extends PluginPanel
{
    private final VisualTimerOverlayManager overlayManager;
    private final VisualTimerPlugin plugin;
    private final JLabel previewLabel = new JLabel("0:00:00.0", SwingConstants.CENTER);
    private final JTextField nameField = new JTextField("Timer");
    private final JTextField hourField = new JTextField("0");
    private final JTextField minField = new JTextField("0");
    private final JTextField secField = new JTextField("0");
    private final JPanel timerListPanel = new JPanel();

    private final Color backgroundColor = new Color(38, 38, 38);
    private final Color inputBackground = new Color(30, 30, 30);
    private final ChatMessageManager chatMessageManager;

    @Inject
    public VisualTimerPanel(VisualTimerOverlayManager overlayManager, VisualTimerPlugin plugin, ChatMessageManager chatMessageManager)
    {
        this.overlayManager = overlayManager;
        this.plugin = plugin;
        this.chatMessageManager = chatMessageManager;

        setLayout(new BorderLayout(0, 10));
        setBorder(new EmptyBorder(10, 10, 10, 10));
        setBackground(backgroundColor);

        add(createTopPanel(), BorderLayout.NORTH);
        add(createInputPanel(), BorderLayout.CENTER);
        add(createTimerListPanel(), BorderLayout.SOUTH);
    }

    private JPanel createTopPanel()
    {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(backgroundColor);

        previewLabel.setFont(new Font("Arial", Font.BOLD, 32));
        previewLabel.setForeground(Color.WHITE);
        panel.add(previewLabel, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createInputPanel()
    {
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.Y_AXIS));
        inputPanel.setBackground(backgroundColor);

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setFont(new Font("Arial", Font.BOLD, 14));
        nameLabel.setForeground(Color.WHITE);
        nameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        styleTextField(nameField);
        nameField.setPreferredSize(new Dimension(200, 28));
        nameField.setMaximumSize(new Dimension(Integer.MAX_VALUE, 28));

        JPanel labelRow = new JPanel(new GridLayout(1, 3, 10, 0));
        labelRow.setBackground(backgroundColor);
        labelRow.add(makeCenteredLabel("H:"));
        labelRow.add(makeCenteredLabel("M:"));
        labelRow.add(makeCenteredLabel("S:"));

        JPanel inputRow = new JPanel(new GridLayout(1, 3, 10, 0));
        inputRow.setBackground(backgroundColor);
        styleTextField(hourField);
        styleTextField(minField);
        styleTextField(secField);
        inputRow.add(hourField);
        inputRow.add(minField);
        inputRow.add(secField);

        JButton addButton = new JButton("Add Timer");
        styleButton(addButton, "#397A66");
        addButton.addActionListener(this::addTimer);
        addButton.setBorderPainted(false);

        JButton clearButton = new JButton("Remove All");
        styleButton(clearButton, "#C21614");
        clearButton.addActionListener(e -> {
            overlayManager.removeAllTimers();
            refreshTimerList();
        });
        clearButton.setBorderPainted(false);

        inputPanel.add(nameLabel);
        inputPanel.add(Box.createVerticalStrut(5));
        inputPanel.add(nameField);
        inputPanel.add(Box.createVerticalStrut(10));
        inputPanel.add(labelRow);
        inputPanel.add(inputRow);
        inputPanel.add(Box.createVerticalStrut(20));
        inputPanel.add(addButton);
        inputPanel.add(Box.createVerticalStrut(10));
        inputPanel.add(clearButton);

        return inputPanel;
    }

    private JPanel createTimerListPanel()
    {
        JPanel wrapper = new JPanel();
        wrapper.setLayout(new BorderLayout());
        wrapper.setBackground(backgroundColor);

        JLabel label = new JLabel("Active Timers", SwingConstants.CENTER);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        label.setForeground(Color.WHITE);

        timerListPanel.setLayout(new BoxLayout(timerListPanel, BoxLayout.Y_AXIS));
        timerListPanel.setBackground(backgroundColor);

        JScrollPane scrollPane = new JScrollPane(timerListPanel);
        scrollPane.setPreferredSize(new Dimension(200, 250));
        scrollPane.setBackground(backgroundColor);
        scrollPane.getViewport().setBackground(backgroundColor);
        scrollPane.setBorder(null);

        JPanel labelWrapper = new JPanel();
        labelWrapper.setLayout(new BoxLayout(labelWrapper, BoxLayout.Y_AXIS));
        labelWrapper.setBackground(backgroundColor);
        label.setAlignmentX(Component.CENTER_ALIGNMENT);
        labelWrapper.add(label);

        wrapper.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(80, 80, 80), 1),
                BorderFactory.createEmptyBorder(6, 6, 6, 6)
        ));

        wrapper.add(labelWrapper, BorderLayout.NORTH);
        wrapper.add(scrollPane, BorderLayout.CENTER);

        return wrapper;
    }

    private void addTimer(ActionEvent e)
    {
        String name = nameField.getText().trim();
        if (name.isEmpty())
        {
            name = "Timer"; // Default name if none entered
            nameField.setText(name);
        }

        int hours = parseTime(hourField.getText());
        int minutes = parseTime(minField.getText());
        int seconds = parseTime(secField.getText());

        if (minutes > 59 || seconds > 59)
        {
            JOptionPane.showMessageDialog(
                    null,
                    "Minutes and seconds cannot exceed 59.",
                    "Invalid Time Input",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        long totalMillis = (hours * 3600 + minutes * 60 + seconds) * 1000L;

        if (totalMillis <= 0)
        {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a valid time duration.",
                    "Invalid Time",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        VisualTimer timer = new VisualTimer(name, totalMillis, plugin, chatMessageManager);
        timer.setPlugin(plugin);
        timer.start();
        overlayManager.addTimer(timer);
        refreshTimerList();
    }

    private void refreshTimerList()
    {
        timerListPanel.removeAll();

        List<VisualTimerOverlay> overlays = overlayManager.getActiveOverlays();

        for (VisualTimerOverlay overlay : overlays)
        {
            VisualTimer timer = overlay.getTimer();

            JPanel row = new JPanel(new BorderLayout());
            row.setBackground(backgroundColor);
            row.setMaximumSize(new Dimension(Integer.MAX_VALUE, 32));
            row.setPreferredSize(new Dimension(0, 32));

            JLabel label = new JLabel(timer.getName() + " â€” " + timer.getInitialFormattedTime());
            label.setForeground(Color.WHITE);

            JButton delete = new JButton("âˆ’");
            delete.setFocusable(false);
            delete.setPreferredSize(new Dimension(40, 24));
            delete.addActionListener(e -> {
                overlayManager.removeTimer(overlay);
                refreshTimerList();
            });

            row.add(label, BorderLayout.CENTER);
            row.add(delete, BorderLayout.EAST);
            timerListPanel.add(row);
        }

        timerListPanel.revalidate();
        timerListPanel.repaint();
    }

    private int parseTime(String text)
    {
        try
        {
            return Math.max(0, Integer.parseInt(text));
        }
        catch (NumberFormatException e)
        {
            return 0;
        }
    }

    private void styleTextField(JTextField field)
    {
        field.setBackground(inputBackground);
        field.setForeground(Color.WHITE);
        field.setCaretColor(Color.WHITE);
        field.setHorizontalAlignment(JTextField.CENTER);
        field.setBorder(null);
        field.setFont(new Font("Arial", Font.PLAIN, 16));
    }

    private void styleButton(JButton button, String hexColor)
    {
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        button.setFocusable(false);
        button.setBackground(Color.decode(hexColor));
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setMaximumSize(new Dimension(Integer.MAX_VALUE, 36));
    }

    private JLabel makeCenteredLabel(String text)
    {
        JLabel label = new JLabel(text, SwingConstants.CENTER);
        label.setForeground(Color.WHITE);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        return label;
    }

    public void updatePreviewTimer()
    {
        if (overlayManager.getActiveOverlays().isEmpty())
        {
            previewLabel.setText("0:00:00.0");
            return;
        }

        // Just show the first active timer's time
        VisualTimerOverlay firstOverlay = overlayManager.getActiveOverlays().get(0);
        VisualTimer timer = firstOverlay.getTimer();
        previewLabel.setText(timer.getFormattedTime());
    }
}
package com.visualtimer;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;

import javax.inject.Inject;
import java.awt.*;

public class VisualTimerOverlay extends Overlay
{
    private final Client client;
    private final VisualTimerPlugin plugin;
    private final VisualTimer timer;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    public VisualTimerOverlay(Client client, VisualTimerPlugin plugin, VisualTimer timer)
    {
        this.client = client;
        this.plugin = plugin;
        this.timer = timer;

        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.MED);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPreferredLocation(new Point(0, 0));

        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY, "Start", "Timer"));
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY, "Pause", "Timer"));
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY, "Stop", "Timer"));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        if (timer == null || (timer.isExpired() && !plugin.getConfig().showExpiredTimers()))
        {
            return null;
        }

        panelComponent.setBackgroundColor(null); // reset background color every render

        long totalMillis = timer.getRemainingMillis();
        long hours = totalMillis / (1000 * 60 * 60);
        long minutes = (totalMillis / (1000 * 60)) % 60;
        long seconds = (totalMillis / 1000) % 60;
        long tenths = (totalMillis % 1000) / 100;

        String timeString = String.format("%d:%02d:%02d.%d", hours, minutes, seconds, tenths);

        Color timeColor = Color.WHITE;
        Color nameColor = Color.WHITE;
        Color backgroundColor = panelComponent.getBackgroundColor();

        if (timer.isExpired())
        {
            switch (plugin.getConfig().expirationEffect())
            {
                case RAVE_TEXT:
                    timeColor = randomColor();
                    nameColor = timeColor;
                    break;

                case FLASH_TEXT_FAST:
                    if ((timer.getFlashCounter() / 10) % 2 == 0)
                        timeColor = nameColor = Color.RED;
                    break;

                case FLASH_TEXT_SLOW:
                    if ((timer.getFlashCounter() / 30) % 2 == 0)
                        timeColor = nameColor = Color.RED;
                    break;

                case RAVE_TIMER:
                    timeColor = nameColor = randomColor();
                    backgroundColor = randomColor();
                    break;

                case FLASH_TIMER:
                    if ((timer.getFlashCounter() / 10) % 2 == 0)
                        backgroundColor = Color.RED;
                    else
                        backgroundColor = new Color(38, 38, 38); // default gray
                    break;

                default:
                    break;
            }
        }

        panelComponent.setBackgroundColor(backgroundColor);
        panelComponent.getChildren().clear();

        panelComponent.getChildren().add(LineComponent.builder()
                .left(timer.getName())
                .leftColor(nameColor)
                .build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left(timeString)
                .leftColor(timeColor)
                .build());

        return panelComponent.render(graphics);
    }

    private Color randomColor()
    {
        return new Color(
                (int)(Math.random() * 255),
                (int)(Math.random() * 255),
                (int)(Math.random() * 255)
        );
    }

    public VisualTimer getTimer()
    {
        return timer;
    }
}
package com.visualtimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VisualTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VisualTimerPlugin.class);
		RuneLite.main(args);
	}
}
