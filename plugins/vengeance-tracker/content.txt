package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VengTrackerPlugin.class);
		RuneLite.main(args);
	}
}
package com.example;

import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class VengTrackerOverlay extends Overlay
{

    @Inject
    private VengTrackerConfig config;

    @Inject
    private VengTrackerPlugin plugin;

    @Inject
    private ImageUtil imageUtil;

    @Inject
    private Client client;

    @Inject
    private SpriteManager spriteManager;

    @Inject
    private VengTrackerOverlay()
    {
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGH);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        for (Player player : client.getPlayers())
        {
            if (plugin.currentlyVenged.contains(Text.sanitize(player.getName())))
            {
                BufferedImage vengIcon = spriteManager.getSprite(SpriteID.SPELL_VENGEANCE_OTHER, 0);
                if (vengIcon != null)
                {
                    renderPlayerOverlay(graphics, player, vengIcon);
                }
            }
        }

        return null;
    }


    private void renderPlayerOverlay(Graphics2D graphics, Player player, BufferedImage vengIcon)
    {
        Point renderPoint;

        if (config.renderMethod() == VengTrackerConfig.RenderMethod.HUG_PLAYER)
        {
            LocalPoint playerLocation = player.getLocalLocation();
            LocalPoint vengLoc = new LocalPoint(playerLocation.getX() + config.XOffset(), playerLocation.getY());
            renderPoint = Perspective.getCanvasImageLocation(client, vengLoc,vengIcon, (getAnchorPoint(player)) + config.YOffset());

        }
        else
        {
            Point point = player.getCanvasImageLocation(vengIcon, getAnchorPoint(player));
            renderPoint = new Point(point.getX() + config.XOffset(), point.getY() + config.YOffset());
        }

        if (client.getPlane() == player.getWorldLocation().getPlane() && renderPoint != null && player.getLocalLocation().isInScene())
        {
            OverlayUtil.renderImageLocation(graphics, renderPoint,  ImageUtil.resizeImage(vengIcon,16 - config.ZOffset(),18 - config.ZOffset()));
        }

    }


    public int getAnchorPoint(Player player)
    {
        int anchorPoint;

        switch (config.anchorPoints())
        {
            case CHEST:
                anchorPoint = player.getLogicalHeight() / 2;
                break;

            case HEAD:
                anchorPoint = player.getLogicalHeight();
                break;

            case FEET:
                anchorPoint = 0;
                break;

            default:
                anchorPoint = 0;
        }

        return anchorPoint;

    }


}

package com.example;

import net.runelite.client.config.*;

@ConfigGroup("VengTracker")
public interface VengTrackerConfig extends Config
{

	@ConfigSection(
			name = "General settings",
			description = "General settings",
			position = 0,
			closedByDefault = false
	)
	String generalSettings = "General settings";

	@ConfigSection(
			name = "Advanced settings",
			description = "Advanced settings",
			position = 1,
			closedByDefault = true
	)
	String advancedSettings = "Advanced settings";


	@ConfigItem(
			keyName = "Icon Anchor Point",
			name = "Icon Anchor Point",
			description = "Icon Anchor Point",
			position = 1,
			section = generalSettings
	)
	default AnchorPoints anchorPoints(){return AnchorPoints.CHEST;}

	enum AnchorPoints
	{
		HEAD,
		CHEST,
		FEET;
	}

	@Range(
			min = 0,
			max = 15
	)
	@ConfigItem(
			keyName = "Size Offset",
			name = "Size Offset",
			description = "Size Offset (Increase # to make smaller)",
			position = 2,
			section = generalSettings
	)
	default int ZOffset()
	{
		return 0;
	}

	@Range(
			min = -1000,
			max = 1000
	)
	@ConfigItem(
			keyName = "YOffset",
			name = "Y-Offset",
			description = "Y-Offset",
			position = 3,
			section = generalSettings
	)
	default int YOffset()
	{
		return 0;
	}

	@Range(
			min = -1000,
			max = 1000
	)
	@ConfigItem(
			keyName = "XOffset",
			name = "X-Offset",
			description = "X-Offset",
			position = 4,
			section = generalSettings
	)
	default int XOffset()
	{
		return 0;
	}


	@ConfigItem(
			keyName = "indicateVenged",
			name = "Indicate Venged Players in stack",
			description = "Will mark Venged players menu entries with a white (V)",
			position = 5,
			section = generalSettings
	)
	default boolean indicateVenged()
	{
		return true;
	}

	@ConfigItem(
			keyName = "dePrioVenged",
			name = "De-Prioritise Venged players",
			description = "When casting vengeance on another the client will prioritise non-venged players",
			position = 6,
			section = generalSettings
	)
	default boolean dePrioVenged()
	{
		return true;
	}

	@ConfigItem(
			keyName = "Render Method",
			name = "Render Method",
			description = "Render Method",
			position = 0,
			section = advancedSettings
	)
	default RenderMethod renderMethod(){return RenderMethod.HUG_PLAYER;}

	enum RenderMethod
	{
		HUG_PLAYER,
		ADJUST_VIA_CAM_ANGLE;
	}

	@ConfigItem(
			keyName = "remindToDisable",
			name = "remindToDisable",
			description = "remindToDisable",
			position = 3,
			hidden = true
	)
	default boolean remindToDisable()
	{
		return true;
	}








}

package com.example;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.party.PartyPlugin;
import net.runelite.client.plugins.party.PartyPluginService;
import net.runelite.client.plugins.party.data.PartyData;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import javax.swing.*;
import java.util.ArrayList;

@Slf4j
@PluginDescriptor(
		name = "Vengeance Tracker",
		description = "Shows Veng icon next to players who are venged and more (works with party plugin)",
		tags = {"PVM", "Vengeance", "Player status"}
)
@PluginDependency(PartyPlugin.class)
public class VengTrackerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private VengTrackerConfig config;

	@Inject
	private VengTrackerOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private  PartyPluginService partyPluginService;

	@Inject
	private  PartyService partyService;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ChatMessageManager chatMessageManager;

	public ArrayList<String> currentlyVenged = new ArrayList<String>();

	@Subscribe
	public void onGraphicChanged(GraphicChanged graphicChanged)
	{
		if (client.getLocalPlayer() != null && graphicChanged.getActor() instanceof Player && !isInPvP())
		{
			Player player = (Player) graphicChanged.getActor();
			boolean playerVenged = currentlyVenged.contains(player.getName());

			if ((player.getGraphic() == 725 || player.getGraphic() == 726) && !playerVenged)
			{
				currentlyVenged.add(Text.sanitize(player.getName()));
			}
		}
	}

	@Subscribe
	public void onMenuOpened(MenuOpened event)
	{
		for (MenuEntry entry : event.getMenuEntries())
		{
			if (entry.getPlayer() != null && currentlyVenged.contains(Text.sanitize(entry.getPlayer().getName())) && entry.getTarget().contains("Vengeance Other") && config.indicateVenged())
			{
				entry.setTarget(entry.getTarget() + " <col=ffffff> (V) <col=ffff00>");
			}
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{

		MenuEntry entry = event.getMenuEntry();
		if (entry.getPlayer() != null && currentlyVenged.contains(Text.sanitize(entry.getPlayer().getName())) && entry.getTarget().contains("Vengeance Other") && config.dePrioVenged())
		{
			entry.setDeprioritized(true);
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if(partyService.isInParty() && !isInPvP())
		{
			for (PartyMember partyMember : partyService.getMembers())
			{
				PartyData partyData = partyPluginService.getPartyData(partyMember.getMemberId());
				String playerName = partyMember.getDisplayName();

				if (partyData.isVengeanceActive() && !currentlyVenged.contains(Text.sanitize(playerName)))
				{
					currentlyVenged.add(Text.sanitize(playerName));
				}

				if (!partyData.isVengeanceActive() && currentlyVenged.contains(Text.sanitize(playerName)))
				{
					currentlyVenged.remove(Text.sanitize(playerName));
				}
			}
		}

		if (currentlyVenged.contains(Text.sanitize(client.getLocalPlayer().getName())) && client.getVarbitValue(Varbits.VENGEANCE_ACTIVE) == 0)
		{
			currentlyVenged.remove(Text.sanitize(client.getLocalPlayer().getName()));
		}

	}


	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{

		if (configManager.getConfiguration("party","statusOverlayVeng").equals("true") && config.remindToDisable())
		{
			if (configManager.getConfiguration("runelite","gameAlwaysOnTop").equals("false") && gameStateChanged.getGameState() == GameState.LOGGING_IN)
			{
				SwingUtilities.invokeLater(()->
				{
					String[] options = { "Yes", "No", "No & Don't show again" };
					int option = JOptionPane.showOptionDialog(null, "Disable Party Vengeance (Vengeance Tracker handles party also)", "Vengeance Tracker & Party Vengeance are both enabled", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);

					if (options[option].equals("Yes"))
					{
						configManager.setConfiguration("party","statusOverlayVeng","false");
					}

					if (options[option].equals("No & Don't show again"))
					{
						configManager.setConfiguration("VengTracker","remindToDisable","false");
					}

				});
			}
			else if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
			{
				chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).runeLiteFormattedMessage("---------------------------------------------------------").build());
				chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).runeLiteFormattedMessage("<col=ff6600>Please Disable 'Show Vengance' in the Party Plugin Config<col=ffff00>").build());
				chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).runeLiteFormattedMessage("---------------------------------------------------------").build());
			}

		}

		if (gameStateChanged.getGameState() == GameState.HOPPING || gameStateChanged.getGameState() == GameState.LOGGING_IN)
		{
			currentlyVenged.clear();
		}
	}

	@Subscribe
	public void onOverheadTextChanged(OverheadTextChanged event)
	{
		Actor actor = event.getActor();
		if (actor instanceof Player && actor.getName() != null && currentlyVenged.contains(actor.getName()) && actor.getOverheadText().equals("Taste vengeance!"))
		{
			currentlyVenged.remove(Text.sanitize(actor.getName()));
		}
	}

	private boolean isInPvP()
	{
		//0 = not in pvp , 1 = in pvp
		return client.getVarbitValue(Varbits.PVP_SPEC_ORB) == 1;
	}

	@Provides
	VengTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VengTrackerConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{

		currentlyVenged.clear();
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		currentlyVenged.clear();
		overlayManager.remove(overlay);
	}




}

