package work.fking.masteringmixology;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Notification;
import net.runelite.client.config.Range;

import java.awt.Color;

import static work.fking.masteringmixology.MasteringMixologyConfig.CONFIG_GROUP;

@ConfigGroup(CONFIG_GROUP)
public interface MasteringMixologyConfig extends Config {

    String CONFIG_GROUP = "masteringmixology";

    @ConfigSection(
            name = "Highlights",
            description = "Highlighting related configuration",
            position = 10
    )
    String HIGHLIGHTS = "Highlights";

    @ConfigItem(
            keyName = "inventoryPotionTags",
            name = "Inventory Potion Tags",
            description = "How potions should be tagged in the inventory",
            position = 1
    )
    default InventoryPotionTagType inventoryPotionTagType() {
        return InventoryPotionTagType.WHITE;
    }

    @ConfigItem(
            keyName = "potionOrderSorting",
            name = "Order sorting",
            description = "Determines how potion orders are sorted in the interface",
            position = 1
    )
    default PotionOrderSorting potionOrderSorting() {
        return PotionOrderSorting.VANILLA;
    }

    @ConfigItem(
            keyName = "highlightLevers",
            name = "Highlight levers",
            description = "Highlight levers",
            position = 2
    )
    default boolean highlightLevers() {
        return true;
    }

    @ConfigItem(
            keyName = "highlightStations",
            name = "Highlight stations",
            description = "Toggles alchemical station highlighting on or off",
            position = 2
    )
    default boolean highlightStations() {
        return true;
    }

    @ConfigItem(
            keyName = "highlightQuickActionEvents",
            name = "Highlight quick-action events",
            description = "Toggles station quick-action events highlighting on or off",
            position = 2
    )
    default boolean highlightQuickActionEvents() {
        return true;
    }

    @ConfigItem(
            keyName = "displayResin",
            name = "Display resin amount",
            description = "Display total resin amounts",
            position = 2
    )
    default boolean displayResin() {
        return false;
    }

    @ConfigItem(
            keyName = "stationHighlightColor",
            name = "Station color",
            description = "Configures the default station highlight color",
            position = 3
    )
    default Color stationHighlightColor() {
        return Color.MAGENTA;
    }

    @ConfigItem(
            keyName = "stationQuickActionHighlightColor",
            name = "Quick-action color",
            description = "Configures the station quick-action highlight color",
            position = 4
    )
    default Color stationQuickActionHighlightColor() {
        return Color.GREEN;
    }

    @ConfigItem(
            keyName = "notifyDigweed",
            name = "Notify DigWeed",
            description = "Toggles digweed notifications on or off",
            position = 5
    )
    default Notification notifyDigWeed() {
        return Notification.ON;
    }

    @ConfigItem(
            keyName = "highlightDigweed",
            name = "Highlight DigWeed",
            description = "Toggles digweed highlighting on or off",
            position = 6
    )
    default boolean highlightDigWeed() {
        return true;
    }

    @ConfigItem(
            keyName = "digweedHighlightColor",
            name = "DigWeed color",
            description = "Configures the digweed highlight color",
            position = 7
    )
    default Color digweedHighlightColor() {
        return Color.GREEN;
    }

    @ConfigItem(
            section = HIGHLIGHTS,
            keyName = "highlightBorderWidth",
            name = "Border width",
            description = "Configures the border width of the object highlights"
    )
    default int highlightBorderWidth() {
        return 2;
    }

    @ConfigItem(
            section = HIGHLIGHTS,
            keyName = "highlightFeather",
            name = "Feather",
            description = "Configures the amount of 'feathering' to be applied to the object highlights"
    )
    default int highlightFeather() {
        return 1;
    }

    @ConfigSection(
            name = "Reward Tracking",
            description = "Track your progress towards rewards",
            position = 13
    )
    String REWARD_TRACKING = "RewardTracking";

    @ConfigItem(
            section = REWARD_TRACKING,
            keyName = "selectedReward",
            name = "Selected Reward",
            description = "Select a reward to track resin for",
            position = 1
    )
    default RewardItem selectedReward() {
        return RewardItem.NONE;
    }

    @ConfigItem(
            section = REWARD_TRACKING,
            keyName = "rewardQuantity",
            name = "Reward Quantity",
            description = "Set the quantity for repeatable rewards",
            position = 2
    )
    @Range(
            min = 1,
            max = 100000
    )
    default int rewardQuantity() {
        return 1;
    }

    @ConfigItem(
            section = REWARD_TRACKING,
            keyName = "showResinBars",
            name = "Show Resin Bars",
            description = "Toggle to display or hide the resin progress bars",
            position = 3
    )
    default boolean showResinBars() {
        return true;
    }
}

package work.fking.masteringmixology;

import net.runelite.api.ItemID;

import static work.fking.masteringmixology.PotionComponent.AGA;
import static work.fking.masteringmixology.PotionComponent.LYE;
import static work.fking.masteringmixology.PotionComponent.MOX;

public enum RewardItem {
    NONE("None", 0, false, 0, 0, 0),
    APPRENTICE_POTION_PACK("Apprentice Potion Pack", ItemID.APPRENTICE_POTION_PACK, true, 420, 70, 30),
    ADEPT_POTION_PACK("Adept Potion Pack", ItemID.ADEPT_POTION_PACK, true, 180, 440, 70),
    EXPERT_POTION_PACK("Expert Potion Pack", ItemID.EXPERT_POTION_PACK, true, 410, 320, 480),
    PRESCRIPTION_GOGGLES("Prescription Goggles", ItemID.PRESCRIPTION_GOGGLES, false, 8600, 7000, 9350),
    ALCHEMIST_LABCOAT("Alchemist Labcoat", ItemID.ALCHEMIST_LABCOAT, false, 2250, 2800, 3700),
    ALCHEMIST_PANTS("Alchemist Pants", ItemID.ALCHEMIST_PANTS, false, 2250, 2800, 3700),
    ALCHEMIST_GLOVES("Alchemist Gloves", ItemID.ALCHEMIST_GLOVES, false, 2250, 2800, 3700),
    REAGENT_POUCH("Reagent Pouch", ItemID.REAGENT_POUCH, false, 13800, 11200, 15100),
    POTION_STORAGE("Potion Storage", ItemID.POTION_STORAGE, false, 7750, 6300, 8950),
    CHUGGING_BARREL("Chugging Barrel", ItemID.CHUGGING_BARREL, false, 17250, 14000, 18600),
    ALCHEMISTS_AMULET("Alchemist's Amulet", ItemID.ALCHEMISTS_AMULET, false, 6900, 5650, 7400),
    ALDARIUM("Aldarium", ItemID.ALDARIUM, true, 80, 60, 90);

    private final String itemName;
    private final int itemId;
    private final boolean repeatable;
    private final int[] componentCost = new int[PotionComponent.ENTRIES.length];

    RewardItem(String itemName, int itemId, boolean repeatable, int moxResinCost, int agaResinCost, int lyeResinCost) {
        this.itemName = itemName;
        this.itemId = itemId;
        this.repeatable = repeatable;
        this.componentCost[MOX.ordinal()] = moxResinCost;
        this.componentCost[AGA.ordinal()] = agaResinCost;
        this.componentCost[LYE.ordinal()] = lyeResinCost;
    }

    public String itemName() {
        return itemName;
    }

    public int itemId() {
        return itemId;
    }

    public boolean isRepeatable() {
        return repeatable;
    }

    public int componentCost(PotionComponent component) {
        return componentCost[component.ordinal()];
    }
}
package work.fking.masteringmixology;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;

public class MasteringMixologyOverlay extends Overlay {

    private final MasteringMixologyPlugin plugin;
    private final ModelOutlineRenderer modelOutlineRenderer;

    @Inject
    MasteringMixologyOverlay(MasteringMixologyPlugin plugin, ModelOutlineRenderer modelOutlineRenderer) {
        this.plugin = plugin;
        this.modelOutlineRenderer = modelOutlineRenderer;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        for (var highlightedObject : plugin.highlightedObjects().values()) {
            modelOutlineRenderer.drawOutline(highlightedObject.object(), highlightedObject.outlineWidth(), highlightedObject.color(), highlightedObject.feather());
        }
        return null;
    }
}

package work.fking.masteringmixology;

import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.FontID;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.Player;
import net.runelite.api.TileObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GraphicsObjectCreated;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetPositionMode;
import net.runelite.api.widgets.WidgetTextAlignment;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static work.fking.masteringmixology.AlchemyObject.AGA_LEVER;
import static work.fking.masteringmixology.AlchemyObject.LYE_LEVER;
import static work.fking.masteringmixology.AlchemyObject.MOX_LEVER;
import static work.fking.masteringmixology.PotionComponent.AGA;
import static work.fking.masteringmixology.PotionComponent.LYE;
import static work.fking.masteringmixology.PotionComponent.MOX;

@PluginDescriptor(name = "Mastering Mixology")
public class MasteringMixologyPlugin extends Plugin {

    private static final Logger LOGGER = LoggerFactory.getLogger(MasteringMixologyPlugin.class);

    private static final int PROC_MASTERING_MIXOLOGY_BUILD_POTION_ORDERS = 7063;
    private static final int PROC_MASTERING_MIXOLOGY_BUILD_REAGENTS = 7064;

    private static final int VARBIT_POTION_ORDER_1 = 11315;
    private static final int VARBIT_POTION_MODIFIER_1 = 11316;
    private static final int VARBIT_POTION_ORDER_2 = 11317;
    private static final int VARBIT_POTION_MODIFIER_2 = 11318;
    private static final int VARBIT_POTION_ORDER_3 = 11319;
    private static final int VARBIT_POTION_MODIFIER_3 = 11320;

    static final int VARP_LYE_RESIN = 4414;
    static final int VARP_AGA_RESIN = 4415;
    static final int VARP_MOX_RESIN = 4416;

    private static final int VARBIT_ALEMBIC_PROGRESS = 11328;
    private static final int VARBIT_AGITATOR_PROGRESS = 11329;

    private static final int VARBIT_AGITATOR_QUICKACTION = 11337;
    private static final int VARBIT_ALEMBIC_QUICKACTION = 11338;

    private static final int VARBIT_MIXING_VESSEL_POTION = 11339;
    private static final int VARBIT_AGITATOR_POTION = 11340;
    private static final int VARBIT_RETORT_POTION = 11341;
    private static final int VARBIT_ALEMBIC_POTION = 11342;

    private static final int VARBIT_DIGWEED_NORTH_EAST = 11330;
    private static final int VARBIT_DIGWEED_SOUTH_EAST = 11331;
    private static final int VARBIT_DIGWEED_SOUTH_WEST = 11332;
    private static final int VARBIT_DIGWEED_NORTH_WEST = 11333;

    private static final int SPOT_ANIM_AGITATOR = 2954;
    private static final int SPOT_ANIM_ALEMBIC = 2955;

    private static final int COMPONENT_POTION_ORDERS_GROUP_ID = 882;
    private static final int COMPONENT_POTION_ORDERS = COMPONENT_POTION_ORDERS_GROUP_ID << 16 | 2;

    private static final int LABS_REGION_ID = 5521;
    private static final int LABS_REGION_PLANE = 0;

    @Inject
    private Client client;

    @Inject
    private MasteringMixologyConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private Notifier notifier;

    @Inject
    private ClientThread clientThread;

    @Inject
    private MasteringMixologyOverlay overlay;

    @Inject
    private InventoryPotionOverlay potionOverlay;

    @Inject
    private GoalInfoBoxOverlay goalInfoBoxOverlay;

    private final Map<AlchemyObject, HighlightedObject> highlightedObjects = new LinkedHashMap<>();
    private List<PotionOrder> potionOrders = Collections.emptyList();
    private boolean inLab = false;

    private PotionType alembicPotionType;
    private PotionType agitatorPotionType;
    private PotionType retortPotionType;

    private int previousAgitatorProgess;
    private int previousAlembicProgress;

    private int agitatorQuickActionTicks = 0;
    private int alembicQuickActionTicks = 0;

    private final Goal goal = new Goal(RewardItem.NONE);

    public Map<AlchemyObject, HighlightedObject> highlightedObjects() {
        return highlightedObjects;
    }

    public boolean isInLab() {
        return inLab;
    }

    /**
     * @return true if the player is in the labs region (the area where the minigame takes place)
     * the isInlab method only checks if they are inside the actual lab room where the UI is active
     */
    public boolean isInLabRegion() {
        Player player = client.getLocalPlayer();
        return player != null && player.getWorldLocation().getRegionID() == LABS_REGION_ID
                && player.getWorldLocation().getPlane() == LABS_REGION_PLANE;
    }

    @Provides
    MasteringMixologyConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(MasteringMixologyConfig.class);
    }

    @Override
    protected void startUp() {
        overlayManager.add(overlay);
        overlayManager.add(potionOverlay);
        overlayManager.add(goalInfoBoxOverlay);

        if (client.getGameState() == GameState.LOGGED_IN) {
            clientThread.invokeLater(this::initialize);
        }
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(overlay);
        overlayManager.remove(potionOverlay);
        overlayManager.remove(goalInfoBoxOverlay);
        inLab = false;
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState() == GameState.LOGIN_SCREEN || event.getGameState() == GameState.HOPPING) {
            highlightedObjects.clear();
        }
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded event) {
        if (event.getGroupId() != COMPONENT_POTION_ORDERS_GROUP_ID) {
            return;
        }
        initialize();
    }

    @Subscribe
    public void onWidgetClosed(WidgetClosed event) {
        if (event.getGroupId() != COMPONENT_POTION_ORDERS_GROUP_ID) {
            return;
        }

        highlightedObjects.clear();
        inLab = false;
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (!event.getGroup().equals(MasteringMixologyConfig.CONFIG_GROUP)) {
            return;
        }

        if (event.getKey().equals("potionOrderSorting")) {
            clientThread.invokeLater(this::updatePotionOrders);
        }

        if (event.getKey().equals("highlightStations")) {
            if (!config.highlightStations()) {
                unHighlightAllStations();
            } else {
                clientThread.invokeLater(this::tryHighlightNextStation);
            }
        }

        if (event.getKey().equals("displayResin")) {
            // Trigger the potion order update to refresh the resin display
            clientThread.invokeLater(this::triggerPotionOrderUpdate);
        }

        if (!config.highlightDigWeed()) {
            unHighlightObject(AlchemyObject.DIGWEED_NORTH_EAST);
            unHighlightObject(AlchemyObject.DIGWEED_SOUTH_EAST);
            unHighlightObject(AlchemyObject.DIGWEED_SOUTH_WEST);
            unHighlightObject(AlchemyObject.DIGWEED_NORTH_WEST);
        }

        if (event.getKey().equals("selectedReward") || event.getKey().equals("rewardQuantity") || event.getKey().equals("showResinBars")) {
            recalculateGoalData();
        }

        if (config.highlightLevers()) {
            highlightLevers();
        } else {
            unHighlightLevers();
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        if (!inLab || !config.highlightStations() || event.getContainerId() != InventoryID.INVENTORY.getId()) {
            return;
        }
        // Do not update the highlight if there's a potion in a station
        if (alembicPotionType != null || agitatorPotionType != null || retortPotionType != null) {
            return;
        }
        var inventory = event.getItemContainer();

        // Find the first potion item and highlight its station
        for (var item : inventory.getItems()) {
            var potionType = PotionType.fromItemId(item.getId());

            if (potionType == null || potionType.modifiedItemId() == item.getId()) {
                continue;
            }
            for (var order : potionOrders) {
                if (order.potionType() == potionType && !order.fulfilled()) {
                    unHighlightAllStations();
                    highlightObject(order.potionModifier().alchemyObject(), config.stationHighlightColor());
                    return;
                }
            }
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event) {
        var varbitId = event.getVarbitId();
        var varpId = event.getVarpId();
        var value = event.getValue();

        // Whenever a potion is delivered, all the potion order related varbits are reset to 0 first then
        // set to the new values. We can use this to clear all the stations.
        if (varbitId == VARBIT_POTION_ORDER_1) {
            if (value == 0) {
                unHighlightAllStations();
            } else {
                clientThread.invokeAtTickEnd(this::updatePotionOrders);
            }
        } else if (varbitId == VARBIT_ALEMBIC_POTION) {
            if (value == 0) {
                // Finished crystalising
                unHighlightObject(AlchemyObject.ALEMBIC);
                tryFulfillOrder(alembicPotionType, PotionModifier.CRYSTALISED);
                tryHighlightNextStation();
                LOGGER.debug("Finished crystalising {}", alembicPotionType);
                alembicPotionType = null;
            } else {
                alembicPotionType = PotionType.fromIdx(value - 1);
                LOGGER.debug("Alembic potion type: {}", alembicPotionType);
            }
        } else if (varbitId == VARBIT_AGITATOR_POTION) {
            if (value == 0) {
                // Finished homogenising
                unHighlightObject(AlchemyObject.AGITATOR);
                tryFulfillOrder(agitatorPotionType, PotionModifier.HOMOGENOUS);
                tryHighlightNextStation();
                LOGGER.debug("Finished homogenising {}", agitatorPotionType);
                agitatorPotionType = null;
            } else {
                agitatorPotionType = PotionType.fromIdx(value - 1);
                LOGGER.debug("Agitator potion type: {}", agitatorPotionType);
            }
        } else if (varbitId == VARBIT_RETORT_POTION) {
            if (value == 0) {
                // Finished concentrating
                unHighlightObject(AlchemyObject.RETORT);
                tryFulfillOrder(retortPotionType, PotionModifier.CONCENTRATED);
                tryHighlightNextStation();
                LOGGER.debug("Finished concentrating {}", retortPotionType);
                retortPotionType = null;
            } else {
                retortPotionType = PotionType.fromIdx(value - 1);
                LOGGER.debug("Retort potion type: {}", retortPotionType);
            }
        } else if (varbitId == VARBIT_DIGWEED_NORTH_EAST) {
            if (value == 1) {
                if (config.highlightDigWeed()) {
                    highlightObject(AlchemyObject.DIGWEED_NORTH_EAST, config.digweedHighlightColor());
                }
                notifier.notify(config.notifyDigWeed(), "A digweed has spawned north east.");
            } else {
                unHighlightObject(AlchemyObject.DIGWEED_NORTH_EAST);
            }
        } else if (varbitId == VARBIT_DIGWEED_SOUTH_EAST) {
            if (value == 1) {
                if (config.highlightDigWeed()) {
                    highlightObject(AlchemyObject.DIGWEED_SOUTH_EAST, config.digweedHighlightColor());
                }
                notifier.notify(config.notifyDigWeed(), "A digweed has spawned south east.");
            } else {
                unHighlightObject(AlchemyObject.DIGWEED_SOUTH_EAST);
            }
        } else if (varbitId == VARBIT_DIGWEED_SOUTH_WEST) {
            if (value == 1) {
                if (config.highlightDigWeed()) {
                    highlightObject(AlchemyObject.DIGWEED_SOUTH_WEST, config.digweedHighlightColor());
                }
                notifier.notify(config.notifyDigWeed(), "A digweed has spawned south west.");
            } else {
                unHighlightObject(AlchemyObject.DIGWEED_SOUTH_WEST);
            }
        } else if (varbitId == VARBIT_DIGWEED_NORTH_WEST) {
            if (value == 1) {
                if (config.highlightDigWeed()) {
                    highlightObject(AlchemyObject.DIGWEED_NORTH_WEST, config.digweedHighlightColor());
                }
                notifier.notify(config.notifyDigWeed(), "A digweed has spawned north west.");
            } else {
                unHighlightObject(AlchemyObject.DIGWEED_NORTH_WEST);
            }
        } else if (varbitId == VARBIT_AGITATOR_PROGRESS) {
            if (agitatorQuickActionTicks == 2) {
                // quick action was triggered two ticks ago, so it's now too late
                resetStationHighlight(AlchemyObject.AGITATOR);
                agitatorQuickActionTicks = 0;
            }
            if (agitatorQuickActionTicks == 1) {
                agitatorQuickActionTicks = 2;
            }
            if (value < previousAgitatorProgess) {
                // progress was set back due to a quick action failure
                resetStationHighlight(AlchemyObject.AGITATOR);
            }
            previousAgitatorProgess = value;
        } else if (varbitId == VARBIT_ALEMBIC_PROGRESS) {
            if (alembicQuickActionTicks == 1) {
                // quick action was triggered last tick, so it's now too late
                resetStationHighlight(AlchemyObject.ALEMBIC);
                alembicQuickActionTicks = 0;
            }
            if (value < previousAlembicProgress) {
                // progress was set back due to a quick action failure
                resetStationHighlight(AlchemyObject.ALEMBIC);
            }
            previousAlembicProgress = value;
        } else if (varbitId == VARBIT_AGITATOR_QUICKACTION) {
            // agitator quick action was just successfully popped
            resetStationHighlight(AlchemyObject.AGITATOR);
        } else if (varbitId == VARBIT_ALEMBIC_QUICKACTION) {
            // alembic quick action was just successfully popped
            resetStationHighlight(AlchemyObject.ALEMBIC);
        } else if (varpId == VARP_MOX_RESIN || varpId == VARP_AGA_RESIN || varpId == VARP_LYE_RESIN) {
            recalculateGoalData();
        }
    }

    @Subscribe
    public void onGraphicsObjectCreated(GraphicsObjectCreated event) {
        var spotAnimId = event.getGraphicsObject().getId();

        if (!config.highlightQuickActionEvents()) {
            return;
        }
        if (spotAnimId == SPOT_ANIM_ALEMBIC && alembicPotionType != null) {
            highlightObject(AlchemyObject.ALEMBIC, config.stationQuickActionHighlightColor());
            // start counting ticks for alembic so we know to un-highlight on the next alembic varbit update
            // note this quick action has a 1 tick window, so we use an int that goes 0 -> 1 -> unhighlight
            alembicQuickActionTicks = 1;
        }

        if (spotAnimId == SPOT_ANIM_AGITATOR && agitatorPotionType != null) {
            highlightObject(AlchemyObject.AGITATOR, config.stationQuickActionHighlightColor());
            // start counting ticks for agitator so we know to un-highlight on the next agitator varbit update
            // note this quick action has a 2-tick window, so we use an int that goes 0 -> 1 -> 2 -> unhighlight
            agitatorQuickActionTicks = 1;
        }
    }

    @Subscribe
    public void onScriptPostFired(ScriptPostFired event) {
        var scriptId = event.getScriptId();
        if (scriptId != PROC_MASTERING_MIXOLOGY_BUILD_POTION_ORDERS && scriptId != PROC_MASTERING_MIXOLOGY_BUILD_REAGENTS) {
            return;
        }
        var baseWidget = client.getWidget(COMPONENT_POTION_ORDERS);

        if (baseWidget == null) {
            return;
        }
        if (scriptId == PROC_MASTERING_MIXOLOGY_BUILD_POTION_ORDERS) {
            updatePotionOrdersComponent(baseWidget);
        } else {
            appendResins(baseWidget);
        }
    }

    private void updatePotionOrdersComponent(Widget baseWidget) {
        // https://github.com/Joshua-F/cs2-scripts/blob/7cc261be62a40a6390de3e1f770259038660af10/scripts/%5Bproc%2Cscript7063%5D.cs2#L26
        var children = baseWidget.getChildren();

        if (children == null) {
            return;
        }

        int indexOffset = 0;
        for (int i = 0; i < potionOrders.size(); i++) {
            var order = potionOrders.get(i);

            var orderGraphic = children[order.idx() * 2 + 1 + indexOffset];
            var orderText = children[order.idx() * 2 + 2 + indexOffset];

            // If anyone still has orders they don't have the herblore level to deliver there's an extra RECTANGLE component which
            // causes the idx calculations to select the wrong components
            if (orderGraphic.getType() != WidgetType.GRAPHIC || orderText.getType() != WidgetType.TEXT) {
                indexOffset++;
                orderGraphic = children[order.idx() * 2 + 1 + indexOffset];
                orderText = children[order.idx() * 2 + 2 + indexOffset];
            }
            var builder = new StringBuilder(orderText.getText());

            if (order.fulfilled()) {
                builder.append(" (<col=00ff00>done!</col>)");
            } else {
                builder.append(" (").append(order.potionType().recipe()).append(")");
            }
            orderText.setText(builder.toString());

            if (i != order.idx()) {
                // update component position
                var y = 20 + (i * 26) + 3;
                orderGraphic.setOriginalY(y);
                orderText.setOriginalY(y);

                orderGraphic.revalidate();
                orderText.revalidate();
            }
        }
    }

    private void appendResins(Widget baseWidget) {
        if (!config.displayResin()) {
            return;
        }
        var parentWidth = baseWidget.getWidth();
        var dx = parentWidth / 3;
        int x = dx / 2;

        addResinText(baseWidget.createChild(-1, WidgetType.TEXT), x, VARP_MOX_RESIN, MOX);
        addResinText(baseWidget.createChild(-1, WidgetType.TEXT), x + dx, VARP_AGA_RESIN, AGA);
        addResinText(baseWidget.createChild(-1, WidgetType.TEXT), x + dx * 2, VARP_LYE_RESIN, LYE);
    }

    private void initialize() {
        var ordersLayer = client.getWidget(COMPONENT_POTION_ORDERS_GROUP_ID, 0);
        if (ordersLayer == null || ordersLayer.isSelfHidden()) {
            return;
        }

        LOGGER.debug("initialize plugin");
        inLab = true;
        updatePotionOrders();
        highlightLevers();
        tryHighlightNextStation();
    }

    public void highlightObject(AlchemyObject alchemyObject, Color color) {
        var worldView = client.getTopLevelWorldView();

        if (worldView == null) {
            return;
        }
        var localPoint = LocalPoint.fromWorld(worldView, alchemyObject.coordinate());

        if (localPoint == null) {
            return;
        }
        var tiles = worldView.getScene().getTiles();
        var tile = tiles[worldView.getPlane()][localPoint.getSceneX()][localPoint.getSceneY()];

        for (var gameObject : tile.getGameObjects()) {
            if (gameObject == null) {
                continue;
            }

            if (gameObject.getId() == alchemyObject.objectId()) {
                highlightedObjects.put(alchemyObject, new HighlightedObject(gameObject, color, config.highlightBorderWidth(), config.highlightFeather()));
                return;
            }
        }
        // The aga lever is actually a wall decoration, not a scenery object
        var decorativeObject = tile.getDecorativeObject();

        if (decorativeObject != null && decorativeObject.getId() == alchemyObject.objectId()) {
            highlightedObjects.put(alchemyObject, new HighlightedObject(decorativeObject, color, config.highlightBorderWidth(), config.highlightFeather()));
        }
    }

    public void resetStationHighlight(AlchemyObject alchemyObject) {
        if (config.highlightStations()) {
            highlightObject(alchemyObject, config.stationHighlightColor());
        }
    }

    public void unHighlightObject(AlchemyObject alchemyObject) {
        highlightedObjects.remove(alchemyObject);
    }

    private void unHighlightAllStations() {
        unHighlightObject(AlchemyObject.RETORT);
        unHighlightObject(AlchemyObject.ALEMBIC);
        unHighlightObject(AlchemyObject.AGITATOR);
    }

    private void highlightLevers() {
        if (!config.highlightLevers()) {
            return;
        }

        highlightObject(LYE_LEVER, LYE.color());
        highlightObject(AGA_LEVER, AGA.color());
        highlightObject(MOX_LEVER, MOX.color());
    }

    private void unHighlightLevers() {
        unHighlightObject(LYE_LEVER);
        unHighlightObject(AGA_LEVER);
        unHighlightObject(MOX_LEVER);
    }

    private void updatePotionOrders() {
        LOGGER.debug("Updating potion orders");
        potionOrders = getPotionOrders();

        var potionOrderSorting = config.potionOrderSorting();

        if (potionOrderSorting != PotionOrderSorting.VANILLA) {
            LOGGER.debug("Orders pre-sort: {}", potionOrders);
            potionOrders.sort(potionOrderSorting.comparator());
            LOGGER.debug("Sorted orders: {}", potionOrders);
        }

        triggerPotionOrderUpdate();
    }

    public void triggerPotionOrderUpdate() {
        // Trigger a fake varbit update to force run the clientscript proc
        var varbitType = client.getVarbit(VARBIT_POTION_ORDER_1);

        if (varbitType != null) {
            client.queueChangedVarp(varbitType.getIndex());
        }
    }

    private void addResinText(Widget widget, int x, int varp, PotionComponent component) {
        var amount = client.getVarpValue(varp);
        var color = component.color().getRGB();

        widget.setText(amount + "")
              .setTextShadowed(true)
              .setTextColor(color)
              .setOriginalWidth(20)
              .setOriginalHeight(15)
              .setFontId(FontID.QUILL_8)
              .setOriginalY(0)
              .setOriginalX(x)
              .setYPositionMode(WidgetPositionMode.ABSOLUTE_BOTTOM)
              .setXTextAlignment(WidgetTextAlignment.CENTER)
              .setYTextAlignment(WidgetTextAlignment.CENTER);

        widget.revalidate();
        LOGGER.debug("adding resin text {} at {} with color {}", amount, x, color);
    }

    private void tryFulfillOrder(PotionType potionType, PotionModifier modifier) {
        for (var order : potionOrders) {
            if (order.potionType() == potionType && order.potionModifier() == modifier && !order.fulfilled()) {
                LOGGER.debug("Order {} has been fulfilled", order);
                order.setFulfilled(true);
                break;
            }
        }
    }

    private void tryHighlightNextStation() {
        if (!config.highlightStations()) {
            return;
        }
        var inventory = client.getItemContainer(InventoryID.INVENTORY);

        if (inventory == null) {
            return;
        }

        for (var order : potionOrders) {
            if (order.fulfilled()) {
                continue;
            }
            if (inventory.contains(order.potionType().itemId())) {
                LOGGER.debug("Highlighting station for order {}", order);
                highlightObject(order.potionModifier().alchemyObject(), config.stationHighlightColor());
                break;
            }
        }
    }

    private List<PotionOrder> getPotionOrders() {
        var potionOrders = new ArrayList<PotionOrder>(3);

        for (int orderIdx = 0; orderIdx < 3; orderIdx++) {
            var potionType = getPotionType(orderIdx);
            var potionModifier = getPotionModifier(orderIdx);

            if (potionType == null || potionModifier == null) {
                continue;
            }
            potionOrders.add(new PotionOrder(orderIdx, potionType, potionModifier));
        }
        return potionOrders;
    }

    private PotionType getPotionType(int orderIdx) {
        if (orderIdx == 0) {
            return PotionType.fromIdx(client.getVarbitValue(VARBIT_POTION_ORDER_1) - 1);
        } else if (orderIdx == 1) {
            return PotionType.fromIdx(client.getVarbitValue(VARBIT_POTION_ORDER_2) - 1);
        } else if (orderIdx == 2) {
            return PotionType.fromIdx(client.getVarbitValue(VARBIT_POTION_ORDER_3) - 1);
        } else {
            return null;
        }
    }

    private PotionModifier getPotionModifier(int orderIdx) {
        if (orderIdx == 0) {
            return PotionModifier.from(client.getVarbitValue(VARBIT_POTION_MODIFIER_1) - 1);
        } else if (orderIdx == 1) {
            return PotionModifier.from(client.getVarbitValue(VARBIT_POTION_MODIFIER_2) - 1);
        } else if (orderIdx == 2) {
            return PotionModifier.from(client.getVarbitValue(VARBIT_POTION_MODIFIER_3) - 1);
        } else {
            return null;
        }
    }

    public Goal getGoal() {
        return goal;
    }

    private void recalculateGoalData() {
        goal.recalculate(config, client);
    }

    public static class HighlightedObject {

        private final TileObject object;
        private final Color color;
        private final int outlineWidth;
        private final int feather;

        private HighlightedObject(TileObject object, Color color, int outlineWidth, int feather) {
            this.object = object;
            this.color = color;
            this.outlineWidth = outlineWidth;
            this.feather = feather;
        }

        public TileObject object() {
            return object;
        }

        public Color color() {
            return color;
        }

        public int outlineWidth() {
            return outlineWidth;
        }

        public int feather() {
            return feather;
        }
    }
}

package work.fking.masteringmixology;

public enum PotionModifier {
    // Clicking the quick-time event on the Agitator gives 14 experience, this event can happen 1-2 times
    HOMOGENOUS(AlchemyObject.AGITATOR, 21),
    // Each click on the Retort gives 2 experience for a max of 10 clicks
    CONCENTRATED(AlchemyObject.RETORT, 20),
    // Clicking the quick-time event on the Alembic gives 14 experience
    CRYSTALISED(AlchemyObject.ALEMBIC, 14);

    private static final PotionModifier[] TYPES = PotionModifier.values();

    private final AlchemyObject alchemyObject;
    private final int quickActionExperience;

    PotionModifier(AlchemyObject alchemyObject, int quickActionExperience) {
        this.alchemyObject = alchemyObject;
        this.quickActionExperience = quickActionExperience;
    }

    public static PotionModifier from(int potionModifierId) {
        if (potionModifierId < 0 || potionModifierId >= TYPES.length) {
            return null;
        }
        return TYPES[potionModifierId];
    }

    public AlchemyObject alchemyObject() {
        return alchemyObject;
    }

    public int quickActionExperience() {
        return quickActionExperience;
    }
}

package work.fking.masteringmixology;

public class PotionOrder {

    private final int idx;
    private final PotionType potionType;
    private final PotionModifier potionModifier;

    private boolean fulfilled;

    public PotionOrder(int idx, PotionType potionType, PotionModifier potionModifier) {
        this.idx = idx;
        this.potionType = potionType;
        this.potionModifier = potionModifier;
    }

    public int idx() {
        return idx;
    }

    public PotionType potionType() {
        return potionType;
    }

    public PotionModifier potionModifier() {
        return potionModifier;
    }

    public void setFulfilled(boolean fulfilled) {
        this.fulfilled = fulfilled;
    }

    public boolean fulfilled() {
        return fulfilled;
    }

    @Override
    public String toString() {
        return "PotionOrder{" +
                "idx=" + idx +
                ", potionType=" + potionType +
                ", potionModifier=" + potionModifier +
                '}';
    }
}

package work.fking.masteringmixology;

public enum InventoryPotionTagType {
    NONE,
    COLORED,
    WHITE,
}

package work.fking.masteringmixology;

import net.runelite.api.NullObjectID;
import net.runelite.api.ObjectID;
import net.runelite.api.coords.WorldPoint;

public enum AlchemyObject {
    MOX_LEVER(ObjectID.MOX_LEVER, new WorldPoint(1395, 9324, 0)),
    AGA_LEVER(ObjectID.AGA_LEVER, new WorldPoint(1394, 9324, 0)),
    LYE_LEVER(ObjectID.LYE_LEVER, new WorldPoint(1393, 9324, 0)),
    MIXING_VESSEL(NullObjectID.NULL_55395, new WorldPoint(1394, 9326, 0)),
    ALEMBIC(NullObjectID.NULL_55391, new WorldPoint(1391, 9325, 0)),
    AGITATOR(NullObjectID.NULL_55390, new WorldPoint(1393, 9329, 0)),
    RETORT(NullObjectID.NULL_55389, new WorldPoint(1397, 9325, 0)),
    CONVEYOR_BELT(ObjectID.CONVEYOR_BELT_54917, new WorldPoint(1394, 9331, 0)),
    HOPPER(ObjectID.HOPPER_54903, new WorldPoint(1394, 9322, 0)),
    DIGWEED_NORTH_EAST(NullObjectID.NULL_55396, new WorldPoint(1399, 9331, 0)),
    DIGWEED_SOUTH_EAST(NullObjectID.NULL_55397, new WorldPoint(1399, 9322, 0)),
    DIGWEED_SOUTH_WEST(NullObjectID.NULL_55398, new WorldPoint(1389, 9322, 0)),
    DIGWEED_NORTH_WEST(NullObjectID.NULL_55399, new WorldPoint(1389, 9331, 0));

    private final int objectId;
    private final WorldPoint coordinate;

    AlchemyObject(int objectId, WorldPoint coordinate) {
        this.objectId = objectId;
        this.coordinate = coordinate;
    }

    public int objectId() {
        return objectId;
    }

    public WorldPoint coordinate() {
        return coordinate;
    }
}

package work.fking.masteringmixology;

import java.awt.Color;

public enum PotionComponent {
    MOX('M', "03a9f4", 5666, MasteringMixologyPlugin.VARP_MOX_RESIN),
    AGA('A', "00e676", 5667, MasteringMixologyPlugin.VARP_AGA_RESIN),
    LYE('L', "e91e63", 5668, MasteringMixologyPlugin.VARP_LYE_RESIN);

    public static final PotionComponent[] ENTRIES = values();

    private final char character;
    private final String colorCode;
    private final Color color;
    private final int spriteId;
    private final int resinVarpId;

    PotionComponent(char character, String colorCode, int spriteId, int resinVarpId) {
        this.character = character;
        this.colorCode = colorCode;
        this.color = Color.decode("#" + colorCode);
        this.spriteId = spriteId;
        this.resinVarpId = resinVarpId;
    }

    public char character() {
        return character;
    }

    public String colorCode() {
        return colorCode;
    }

    public Color color() {
        return color;
    }

    public int spriteId() {
        return spriteId;
    }

    public int resinVarpId() {
        return resinVarpId;
    }
}

package work.fking.masteringmixology;

import java.util.Comparator;

public class PotionComparators {
    // Sort by modifier, in the order CRYSTALISED > HOMOGENOUS > CONCENTRATED
    // And then by PotionType name alphabetically
    public static Comparator<PotionOrder> byStation() {
        return Comparator.comparingInt((PotionOrder order) -> {
                    switch (order.potionModifier()) {
                        case CRYSTALISED:
                            return 0;
                        case HOMOGENOUS:
                            return 1;
                        case CONCENTRATED:
                            return 2;
                        default:
                            return Integer.MAX_VALUE;
                    }
                })
                .thenComparing(order -> order.potionType().name());
    }

    public static Comparator<PotionOrder> shortestPath() {
        return Comparator.comparing(order -> {
            switch (order.potionModifier()) {
                case CRYSTALISED:
                    return 1;
                case CONCENTRATED:
                    return 2;
                case HOMOGENOUS:
                    return 3;
                default:
                    throw new IllegalStateException("Unexpected value: " + order.potionModifier().toString());
            }
        });
    }
}

package work.fking.masteringmixology;

import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.ProgressBarComponent;
import net.runelite.client.ui.overlay.components.SplitComponent;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.QuantityFormatter;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;

class GoalInfoBoxOverlay extends OverlayPanel {

    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0.0");
    private static final int BORDER_SIZE = 3;
    private static final int VERTICAL_GAP = 2;
    private static final int ICON_AND_GOAL_GAP = 5;
    private static final Rectangle TOP_PANEL_BORDER = new Rectangle(2, 0, 4, 4);
    private static final int COMPONENT_SPRITE_SIZE = 16;
    private static final Color PROGRESS_BAR_BACKGROUND_COLOR = new Color(61, 56, 49);

    private final MasteringMixologyPlugin plugin;
    private final MasteringMixologyConfig config;
    private final ItemManager itemManager;
    private final SpriteManager spriteManager;

    private final PanelComponent topPanel = new PanelComponent();

    // Caching
    private BufferedImage cachedRewardIcon;
    private RewardItem cachedRewardItem;

    private final BufferedImage[] componentSprites = new BufferedImage[PotionComponent.ENTRIES.length];

    @Inject
    GoalInfoBoxOverlay(
            MasteringMixologyPlugin plugin,
            MasteringMixologyConfig config,
            ItemManager itemManager,
            SpriteManager spriteManager
    ) {
        super(plugin);
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        this.spriteManager = spriteManager;

        setPosition(OverlayPosition.TOP_RIGHT);
        setPriority(PRIORITY_MED);
        panelComponent.setPreferredSize(new Dimension(250, 0));
        panelComponent.setBorder(new Rectangle(BORDER_SIZE, BORDER_SIZE, BORDER_SIZE, BORDER_SIZE));
        panelComponent.setGap(new Point(0, VERTICAL_GAP));

        topPanel.setBorder(TOP_PANEL_BORDER);
        topPanel.setBackgroundColor(null);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        var goal = plugin.getGoal();
        var rewardItem = goal.getRewardItem();

        if (rewardItem == RewardItem.NONE || !plugin.isInLabRegion()) {
            return null;
        }
        topPanel.getChildren().clear();
        graphics.setFont(FontManager.getRunescapeSmallFont());

        // Build the top display with the affordable amount / goal amount
        String goalAmountText = "";
        if (rewardItem.isRepeatable() && goal.getRewardQuantity() > 1) {
            goalAmountText = QuantityFormatter.quantityToStackSize(goal.getItemsAffordable())
                    + "/" + QuantityFormatter.quantityToStackSize(goal.getRewardQuantity());
        }

        var topLine = LineComponent.builder()
                                   .left(rewardItem.itemName())
                                   .leftFont(FontManager.getRunescapeFont())
                                   .right(goalAmountText)
                                   .rightFont(FontManager.getRunescapeBoldFont())
                                   .build();

        // Build the bottom line with the overall progress percentage
        var bottomLine = LineComponent.builder()
                                      .left("Progress:")
                                      .leftFont(FontManager.getRunescapeFont())
                                      .right(DECIMAL_FORMAT.format(goal.getOverallProgress() * 100) + "%")
                                      .rightFont(FontManager.getRunescapeFont())
                                      .rightColor(goal.getOverallProgress() >= 1 ? Color.GREEN : Color.WHITE)
                                      .build();

        var textSplit = SplitComponent.builder()
                                      .first(topLine)
                                      .second(bottomLine)
                                      .orientation(ComponentOrientation.VERTICAL)
                                      .build();

        var rewardImageComponent = new ImageComponent(getRewardImage(rewardItem));
        var topInfoSplit = SplitComponent.builder()
                                         .first(rewardImageComponent)
                                         .second(textSplit)
                                         .orientation(ComponentOrientation.HORIZONTAL)
                                         .gap(new Point(ICON_AND_GOAL_GAP, 0))
                                         .build();

        topPanel.getChildren().add(topInfoSplit);
        panelComponent.getChildren().add(topPanel);

        // Add a progress bar for each component
        if (config.showResinBars()) {
            for (var component : PotionComponent.ENTRIES) {
                createProgressBar(goal, component);
            }
        }

        return super.render(graphics);
    }

    private void createProgressBar(Goal goal, PotionComponent component) {
        var data = goal.getComponentData(component);
        var componentSprite = getComponentSprite(component);

        if (componentSprite == null) {
            return;
        }
        var imageComponent = new ImageComponent(componentSprite);
        var progressBarComponent = new ProgressBarComponent();

        progressBarComponent.setForegroundColor(component.color());
        progressBarComponent.setBackgroundColor(PROGRESS_BAR_BACKGROUND_COLOR);
        progressBarComponent.setValue(data.percentageToGoal * 100);
        progressBarComponent.setLeftLabel(QuantityFormatter.quantityToStackSize(data.currentAmount));
        progressBarComponent.setRightLabel(QuantityFormatter.quantityToStackSize(data.goalAmount));

        var progressBarSplit = SplitComponent.builder()
                                             .first(imageComponent)
                                             .second(progressBarComponent)
                                             .orientation(ComponentOrientation.HORIZONTAL)
                                             .gap(new Point(ICON_AND_GOAL_GAP, 0))
                                             .build();

        panelComponent.getChildren().add(progressBarSplit);
    }

    private BufferedImage getRewardImage(RewardItem rewardItem) {
        if (cachedRewardItem != rewardItem) {
            cachedRewardItem = rewardItem;
            cachedRewardIcon = itemManager.getImage(rewardItem.itemId());
        }
        return cachedRewardIcon;
    }

    private BufferedImage getComponentSprite(PotionComponent component) {
        var sprite = componentSprites[component.ordinal()];

        if (sprite == null) {
            sprite = componentSprites[component.ordinal()] = createComponentSprite(component);
        }
        return sprite;
    }

    private BufferedImage createComponentSprite(PotionComponent component) {
        var sprite = spriteManager.getSprite(component.spriteId(), 0);
        if (sprite != null) {
            // Resize and center the sprite
            var resizedImage = ImageUtil.resizeImage(sprite, COMPONENT_SPRITE_SIZE, COMPONENT_SPRITE_SIZE, true);
            return ImageUtil.resizeCanvas(resizedImage, COMPONENT_SPRITE_SIZE, COMPONENT_SPRITE_SIZE);
        }
        return null;
    }
}

package work.fking.masteringmixology;

import com.google.common.collect.ImmutableMap;
import net.runelite.api.ItemID;

import java.util.Arrays;
import java.util.Map;

import static work.fking.masteringmixology.PotionComponent.AGA;
import static work.fking.masteringmixology.PotionComponent.LYE;
import static work.fking.masteringmixology.PotionComponent.MOX;

public enum PotionType {
    MAMMOTH_MIGHT_MIX(ItemID.MAMMOTHMIGHT_MIX, ItemID.MAMMOTHMIGHT_MIX_30021, 1900, MOX, MOX, MOX),
    MYSTIC_MANA_AMALGAM(ItemID.MYSTIC_MANA_AMALGAM, ItemID.MYSTIC_MANA_AMALGAM_30022, 2150, MOX, MOX, AGA),
    MARLEYS_MOONLIGHT(ItemID.MARLEYS_MOONLIGHT, ItemID.MARLEYS_MOONLIGHT_30023, 2400, MOX, MOX, LYE),
    ALCO_AUGMENTATOR(ItemID.ALCOAUGMENTATOR, ItemID.ALCOAUGMENTATOR_30024, 1900, AGA, AGA, AGA),
    AZURE_AURA_MIX(ItemID.AZURE_AURA_MIX, ItemID.AZURE_AURA_MIX_30026, 2650, AGA, AGA, MOX),
    AQUALUX_AMALGAM(ItemID.AQUALUX_AMALGAM, ItemID.AQUALUX_AMALGAM_30025, 2900, AGA, LYE, AGA),
    LIPLACK_LIQUOR(ItemID.LIPLACK_LIQUOR, ItemID.LIPLACK_LIQUOR_30027, 1900, LYE, LYE, LYE),
    MEGALITE_LIQUID(ItemID.MEGALITE_LIQUID, ItemID.MEGALITE_LIQUID_30029, 3150, MOX, LYE, LYE),
    ANTI_LEECH_LOTION(ItemID.ANTILEECH_LOTION, ItemID.ANTILEECH_LOTION_30028, 3400, AGA, LYE, LYE),
    MIXALOT(ItemID.MIXALOT, ItemID.MIXALOT_30030, 3650, MOX, AGA, LYE);

    public static final PotionType[] TYPES = PotionType.values();

    private static final Map<Integer, PotionType> ITEM_MAP;

    static {
        var builder = new ImmutableMap.Builder<Integer, PotionType>();
        for (var p : PotionType.values()) {
            builder.put(p.itemId(), p);
            builder.put(p.modifiedItemId(), p);
        }
        ITEM_MAP = builder.build();
    }

    private final int itemId;
    private final int modifiedItemId;
    private final String recipe;
    private final String abbreviation;
    private final int experience;
    private final PotionComponent[] components;


    PotionType(int itemId, int modifiedItemId, int experience, PotionComponent... components) {
        this.itemId = itemId;
        this.modifiedItemId = modifiedItemId;
        this.recipe = colorizeRecipe(components);
        this.experience = experience;
        this.components = components;
        this.abbreviation = "" + components[0].character() + components[1].character() + components[2].character();
    }

    public static PotionType fromItemId(int itemId) {
        return ITEM_MAP.get(itemId);
    }

    public static PotionType fromIdx(int potionTypeId) {
        if (potionTypeId < 0 || potionTypeId >= TYPES.length) {
            return null;
        }
        return TYPES[potionTypeId];
    }

    private static String colorizeRecipe(PotionComponent[] components) {
        if (components.length != 3) {
            throw new IllegalArgumentException("Invalid potion components: " + Arrays.toString(components));
        }
        return colorizeRecipeComponent(components[0])
                + colorizeRecipeComponent(components[1])
                + colorizeRecipeComponent(components[2]);
    }

    private static String colorizeRecipeComponent(PotionComponent component) {
        return "<col=" + component.colorCode() + ">" + component.character() + "</col>";
    }

    public int itemId() {
        return itemId;
    }

    public int modifiedItemId() {
        return modifiedItemId;
    }

    public String recipe() {
        return recipe;
    }

    public int experience() {
        return experience;
    }

    public PotionComponent[] components() {
        return components;
    }

    public String abbreviation() {
        return abbreviation;
    }
}

package work.fking.masteringmixology;

import net.runelite.api.Client;

import java.util.EnumMap;
import java.util.Map;

public class Goal {
    private RewardItem rewardItem;
    private double overallProgress = 0.0;
    private int itemsAffordable = 0;
    private int rewardQuantity = 1;

    /*
     * Whenever we recalculate the goal, we will create a new ComponentData object for each component for caching
     */
    private final Map<PotionComponent, ComponentData> componentDataMap = new EnumMap<>(PotionComponent.class);

    public Goal(RewardItem rewardItem) {
        this.rewardItem = rewardItem;
    }

    public RewardItem getRewardItem() {
        return rewardItem;
    }

    public double getOverallProgress() {
        return overallProgress;
    }

    public int getItemsAffordable() {
        return itemsAffordable;
    }

    public int getRewardQuantity() {
        return rewardQuantity;
    }

    public ComponentData getComponentData(PotionComponent component) {
        return componentDataMap.get(component);
    }

    public void recalculate(MasteringMixologyConfig config, Client client) {
        rewardItem = config.selectedReward();
        rewardQuantity = rewardItem.isRepeatable() ? config.rewardQuantity() : 1;

        // Create the component data for each component
        for (var component : PotionComponent.ENTRIES) {
            int currentAmount = client.getVarpValue(component.resinVarpId());
            int baseGoalAmount = rewardItem.componentCost(component);
            componentDataMap.put(component, new ComponentData(currentAmount, baseGoalAmount, rewardQuantity));
        }

        // Calculate the amount of items affordable based on the component with the lowest affordable amount
        int minAffordable = componentDataMap.values().stream()
                .mapToInt(data -> data.affordableAmount)
                .min()
                .orElse(0);
        itemsAffordable = Math.min(minAffordable, rewardQuantity);

        // Overall progress is the average of all component progress
        overallProgress = componentDataMap.values().stream()
                .mapToDouble(data -> data.percentageToGoal)
                .average()
                .orElse(0.0);
    }

    public static class ComponentData {
        final int currentAmount;
        final int goalAmount;
        final double percentageToGoal;
        final int affordableAmount;

        ComponentData(int currentAmount, int baseGoalAmount, int rewardQuantity) {
            this.currentAmount = currentAmount;
            this.goalAmount = baseGoalAmount * rewardQuantity;

            if (goalAmount == 0) {
                this.percentageToGoal = 1.0;
                this.affordableAmount = rewardQuantity;
            } else {
                this.percentageToGoal = Math.min((double) currentAmount / goalAmount, 1.0);
                this.affordableAmount = currentAmount / baseGoalAmount;
            }
        }
    }
}

package work.fking.masteringmixology;

import java.util.Comparator;

public enum PotionOrderSorting {
    VANILLA("Vanilla (random)", null),
    BY_STATION("By station", PotionComparators.byStation()),
    SHORTEST_PATH("Shortest Path", PotionComparators.shortestPath());

    private final String name;
    private final Comparator<PotionOrder> comparator;

    PotionOrderSorting(String name, Comparator<PotionOrder> comparator) {
        this.name = name;
        this.comparator = comparator;
    }

    public Comparator<PotionOrder> comparator() {
        return comparator;
    }

    @Override
    public String toString() {
        return name;
    }
}

package work.fking.masteringmixology;

import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

import javax.annotation.Nullable;
import javax.inject.Inject;
import java.awt.Color;
import java.awt.Graphics2D;

public class InventoryPotionOverlay extends WidgetItemOverlay {
    private final MasteringMixologyPlugin plugin;
    private final MasteringMixologyConfig config;

    @Inject
    InventoryPotionOverlay(MasteringMixologyPlugin plugin, MasteringMixologyConfig config) {
        this.plugin = plugin;
        this.config = config;
        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics2D, int itemId, WidgetItem widgetItem) {
        if (!plugin.isInLab() || config.inventoryPotionTagType() == InventoryPotionTagType.NONE) {
            return;
        }

        var potion = PotionType.fromItemId(itemId);

        if (potion == null) {
            return;
        }

        var bounds = widgetItem.getCanvasBounds();
        var x = bounds.x + 5;
        var y = bounds.y + 30;

        drawRecipe(graphics2D, potion, x + 1, y + 1, Color.BLACK); // Drop shadow

        if (config.inventoryPotionTagType() == InventoryPotionTagType.COLORED) {
            drawRecipe(graphics2D, potion, x, y, null);
            return;
        }

        drawRecipe(graphics2D, potion, x, y, Color.WHITE);
    }

    private void drawRecipe(Graphics2D graphics2D, PotionType potion, int x, int y, @Nullable Color color) {
        graphics2D.setFont(FontManager.getRunescapeSmallFont());

        if (color != null) {
            graphics2D.setColor(color);
            graphics2D.drawString(potion.abbreviation(), x, y);
            return;
        }

        for (var component : potion.components()) {
            graphics2D.setColor(component.color());
            graphics2D.drawString(String.valueOf(component.character()), x, y);
            x += graphics2D.getFontMetrics().charWidth(component.character());
        }
    }
}

package work.fking.masteringmixology;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RunRuneLite {

    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(MasteringMixologyPlugin.class);
        RuneLite.main(args);
    }
}
