package com.cosmetics;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CosmeticsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CosmeticsPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cosmetics;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("cosmetics")
public interface CosmeticsConfig extends Config
{
    @ConfigItem(
            keyName = "apiKey",
            name = "API Key",
            description = "If you are a ranked member of the RLCosmetics Chat Channel, fill this with your API Key.",
            position = 0
    )
    default String apiKey()
    {
        return "";
    }
}
package com.cosmetics;

import net.runelite.api.Player;
import net.runelite.api.kit.KitType;

public class CosmeticsPlayer {
    public String name;
    public int head;
    public int body;
    public int cape;
    public int legs;
    public int neck;
    public int hand;
    public int ring;
    public int feet;
    public int weap;
    public int shld;
    public int jaws;
    public int hair;

    public CosmeticsPlayer(Player p) {
        int[] equipmentIds = p.getPlayerComposition().getEquipmentIds();
        name = p.getName();
        weap = equipmentIds[KitType.WEAPON.getIndex()];
        shld = equipmentIds[KitType.SHIELD.getIndex()];
        body = equipmentIds[KitType.TORSO.getIndex()];
        cape = equipmentIds[KitType.CAPE.getIndex()];
        legs = equipmentIds[KitType.LEGS.getIndex()];
        feet = equipmentIds[KitType.BOOTS.getIndex()];
        neck = equipmentIds[KitType.AMULET.getIndex()];
        head = equipmentIds[KitType.HEAD.getIndex()];
        hand = equipmentIds[KitType.HANDS.getIndex()];
        ring = equipmentIds[KitType.ARMS.getIndex()];
        jaws = equipmentIds[KitType.JAW.getIndex()];
        hair = equipmentIds[KitType.HAIR.getIndex()];
    }

    public void write(int[] equipmentIds) {
        equipmentIds[KitType.WEAPON.getIndex()] = weap >= 0? weap : equipmentIds[KitType.WEAPON.getIndex()];
        equipmentIds[KitType.SHIELD.getIndex()] = shld >= 0? shld : equipmentIds[KitType.SHIELD.getIndex()];
        equipmentIds[KitType.TORSO.getIndex()] = body >= 0? body : equipmentIds[KitType.TORSO.getIndex()];
        equipmentIds[KitType.CAPE.getIndex()] = cape >= 0? cape : equipmentIds[KitType.CAPE.getIndex()];
        equipmentIds[KitType.LEGS.getIndex()] = legs >= 0? legs : equipmentIds[KitType.LEGS.getIndex()];
        equipmentIds[KitType.BOOTS.getIndex()] = feet >= 0? feet : equipmentIds[KitType.BOOTS.getIndex()];
        equipmentIds[KitType.AMULET.getIndex()] = neck >= 0? neck : equipmentIds[KitType.AMULET.getIndex()];
        equipmentIds[KitType.HEAD.getIndex()] = head >= 0? head : equipmentIds[KitType.HEAD.getIndex()];
        equipmentIds[KitType.HANDS.getIndex()] = hand >= 0? hand : equipmentIds[KitType.HANDS.getIndex()];
        equipmentIds[KitType.ARMS.getIndex()] = ring >= 0? ring : equipmentIds[KitType.ARMS.getIndex()];
        equipmentIds[KitType.JAW.getIndex()] = jaws >= 0? jaws : equipmentIds[KitType.JAW.getIndex()];
        equipmentIds[KitType.HAIR.getIndex()] = hair >= 0? hair : equipmentIds[KitType.HAIR.getIndex()];

    }

}


package com.cosmetics;

public class CosmeticsData {
    public long getFetchedTime() {
        return fetchedTime;
    }

    public void setFetchedTime(long fetchedTime) {
        this.fetchedTime = fetchedTime;
    }

    public CosmeticsPlayer getPlayer() {
        return cp;

    }
    private long fetchedTime;


    public CosmeticsData(long fetchedTime, CosmeticsPlayer cp) {
        this.fetchedTime = fetchedTime;
        this.cp = cp;
    }

    private final CosmeticsPlayer cp;
}

package com.cosmetics;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

@Slf4j
public class CosmeticsCache {
    private static final String DATABASE_URL = "https://billiardssketch.fun/cosmetics/";
    private static final int TIME_TO_LIVE = 5 * 60 * 1000;
    private final HashMap<String, CosmeticsData> cache = new HashMap<>();
    private final OkHttpClient httpClient = new OkHttpClient();

    public void clear() {
        cache.clear();
    }

    public CosmeticsPlayer getCosmetics(String username) {
        if (isValid(username)) {
            return cache.get(username).getPlayer();
        } else {
            return null;
        }
    }

    public void save(CosmeticsPlayer p, String apiKey) {
        synchronized (cache) {
            cache.put(p.name, new CosmeticsData(System.currentTimeMillis(), p));
        }
        httpClient.newCall(buildRequestSave(p, apiKey)).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {

            }

            @Override
            public void onResponse(Call call, Response response)
            {

            }
        });
    }

    public void fillCache(String[] names) {
        String[] filtered = Arrays.stream(names).filter((x) -> !isValid(x)).toArray(String[]::new);
        if (filtered.length == 0) {
            return;
        }
        synchronized (cache) {
            long time = System.currentTimeMillis();
            for (String s: filtered) {
                CosmeticsData cd = cache.get(s);
                if (cd != null) {
                    cd.setFetchedTime(time);
                } else {
                    cache.put(s, new CosmeticsData(time, null));
                }
            }
        }
        httpClient.newCall(buildRequestFetch(filtered)).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {

            }

            @Override
            public void onResponse(Call call, Response response) throws IOException
            {
                synchronized (cache) {
                    Gson gson = new Gson();
                    long time = System.currentTimeMillis();
                    List<CosmeticsPlayer> data = gson.fromJson(response.body().string(), new TypeToken<List<CosmeticsPlayer>>() {}.getType());
                    for (CosmeticsPlayer p: data) {
                        cache.put(p.name, new CosmeticsData(time, p));
                    }
                }
            }
        });
    }

    public boolean isValid(String username) {
        return cache.containsKey(username) && cache.get(username).getFetchedTime() + TIME_TO_LIVE > System.currentTimeMillis();
    }

    public Request buildRequestFetch(String[] names) {
        HttpUrl url = null;
        try {
            url = HttpUrl.get(new URL(DATABASE_URL)).newBuilder()
                    .addPathSegment(String.join(",", names))
                    .build();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        return new Request.Builder()
                .url(url)
                .build();
    }

    public Request buildRequestSave(CosmeticsPlayer p, String apiKey) {
        HttpUrl url = null;
        try {
            url = HttpUrl.get(new URL(DATABASE_URL)).newBuilder()
                    .addPathSegment(apiKey)
                    .build();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        MediaType JSON = MediaType.parse("application/json; charset=utf-8");
        Gson gson = new Gson();
        String s = gson.toJson(p);
        RequestBody body = RequestBody.create(JSON, s);
        log.debug("{}", s);
        return new Request.Builder()
                .url(url)
                .put(body)
                .build();
    }
}

/*
 * Copyright (c) 2021, JohnathonNow <johnjwesthoff@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cosmetics;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.PlayerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

@Slf4j
@PluginDescriptor(
	name = "Cosmetics",
	description = "Allows users to customize their appearance",
	tags = {"cosmetics", "players"}
)
public class CosmeticsPlugin extends Plugin {
	public static String CHAT_COMMAND = "!cosmetics";
	private final int FREQUENCY = 3;

	@Inject
	private Client client;

	@Inject
	private CosmeticsConfig config;

	@Provides
	CosmeticsConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CosmeticsConfig.class);
	}


	private boolean isPvp = false;
	private boolean wasPvp = false;
	private boolean enabled = false;
	private final CosmeticsCache cache = new CosmeticsCache();

	private final HashMap<String, int[]> preTransform = new HashMap<>();
	private final HashMap<String, int[]> postTransform = new HashMap<>();
	private int timer = 0;

	@Override
	protected void startUp()
	{
		enabled = true;
		process();
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (enabled && event.getMessage().toLowerCase().startsWith(CHAT_COMMAND) && !config.apiKey().isEmpty()) {
			for (Player p : client.getPlayers()) {
				if (p.getName()!= null && p.getName().equals(event.getName())) {
					wipe(p.getName(), p.getPlayerComposition().getEquipmentIds());
					cache.save(new CosmeticsPlayer(p), config.apiKey());
					break;
				}
			}
		}
	}

	@Override
	protected void shutDown()
	{
		enabled = false;
		process();
	}

	@Subscribe
	public void onGameTick(GameTick gt)
	{
		timer++;
		if ((isPvp == wasPvp && timer < FREQUENCY) || !enabled) {
			return;
		}
		timer = 0;
		process();
		cache.clear();
	}

	private void wipe(String name, int[] equipmentIds) {
		if (postTransform.containsKey(name) && !Arrays.equals(postTransform.get(name), equipmentIds)) {
			preTransform.put(name, equipmentIds.clone());
		}
		int[] newIds = preTransform.get(name);
		System.arraycopy(newIds, 0, equipmentIds, 0, newIds.length);
	}

	private void process() {
		try {
			ArrayList<String> allNames = new ArrayList<>();
			for (Player player : client.getPlayers()) {
				allNames.add(player.getName());
				PlayerComposition comp = player.getPlayerComposition();
				int[] equipmentIds = comp.getEquipmentIds();
				String name = player.getName();
				if (!preTransform.containsKey(name)) {
					preTransform.put(name, equipmentIds.clone());
				}
				if (isPvp || !enabled) {
					//in PvP we should _not_ show cosmetics
					wipe(name, equipmentIds);
				} else {
					if (postTransform.containsKey(name) && !Arrays.equals(postTransform.get(name), equipmentIds)) {
						preTransform.put(name, equipmentIds.clone());
					}
					CosmeticsPlayer p = cache.getCosmetics(player.getName());
					if (p != null) {
						p.write(equipmentIds);
					}
					postTransform.put(name, equipmentIds.clone());
				}
				comp.setHash();
			}
			cache.fillCache(allNames.toArray(new String[0]));
		}
		catch (Exception e) {
			log.debug("Sad: " + e.toString());
			e.printStackTrace();
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event) {
		wasPvp = isPvp;
		isPvp = client.getVar(Varbits.PVP_SPEC_ORB) != 0;
	}

	@Subscribe
	public void onPlayerChanged(PlayerChanged event) {
		timer = FREQUENCY;
	}
}

