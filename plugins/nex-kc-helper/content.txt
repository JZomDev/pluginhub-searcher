package com.nexkchelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NexKcHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NexKcHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.nexkchelper;

import net.runelite.client.config.*;

import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup("nexkchelper")
public interface NexKcHelperConfig extends Config
{
	@ConfigItem(
			position = 0,
			keyName = "hotkey",
			name = "Hotkey",
			description = "Press this key to mark all newly spawned NPCs in range."
	)
	default Keybind keybind()
	{
		return new Keybind(KeyEvent.VK_UNDEFINED, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem(
			position = 1,
			keyName = "excludeRangeMelee",
			name = "Exclude warriors and rangers",
			description = "Will exclude spiritual warriors and rangers from being marked."
	)
	default boolean excludeRangeMelee() { return true; }

	enum Outline {
		CLICKBOX,
		MODEL,
	}

	@ConfigItem(
			position = 2,
			keyName = "outlineStyle",
			name = "Outline Style",
			description = "The style of the outline around the NPCs."
	)
	default Outline outline() { return Outline.CLICKBOX; }



	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "outlineColor",
			name = "Outline Color",
			description = "Configures the outline colour."
	)
	default Color outlineColor()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
			position = 4,
			keyName = "fillColor",
			name = "Fill Color",
			description = "Configures the fill colour for hull style."
	)
	default Color fillColor()
	{
		return new Color(255, 255, 255, 60);
	}


	@ConfigItem(
			position = 5,
			keyName = "outlineWidth",
			name = "Outline Width",
			description = "The width of the outline around the NPCs (model outline)."
	)
	default int outlineWidth() { return 2; }

	@ConfigItem(
			position = 6,
			keyName = "outlineFeather",
			name = "Outline Feather",
			description = "The feather of the outline around the NPCs (model outline)."
	)
	default int outlineFeather() { return 2; }
}


package com.nexkchelper;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.client.game.NpcUtil;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.*;
public class NexKcHelperOverlay extends Overlay
{
    private final NexKcHelperPlugin plugin;
    private final NexKcHelperConfig config;

    @Inject
    private Client client;

    @Inject
    private ModelOutlineRenderer modelOutlineRenderer;

    @Inject
    private NexKcHelperOverlay(NexKcHelperPlugin plugin, NexKcHelperConfig config)
    {
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        Color outlineColor = config.outlineColor();
        Color fillColor = config.fillColor();
        for (NPC npc: plugin.getNpcs()) {
            {
                if (config.outline() == NexKcHelperConfig.Outline.CLICKBOX)
                    hullOutline(npc, graphics, outlineColor, fillColor);
                else
                    modelOutlineRenderer.drawOutline(npc, config.outlineWidth(), outlineColor, config.outlineFeather());
            }
        }

        return null;
    }


    private void hullOutline(NPC npc, Graphics2D graphics, Color outlineColor, Color fillColor)
    {
        NPCComposition npcComposition = npc.getTransformedComposition();

        if (npcComposition != null)
        {
            Shape objectClickbox = npc.getConvexHull();
            if (objectClickbox != null)
            {
                renderPoly(graphics, outlineColor, fillColor, objectClickbox);
            }
        }
    }

    private void renderPoly(Graphics2D graphics, Color outlineColor, Color fillColor, Shape polygon)
    {
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        graphics.setColor(outlineColor);
        graphics.setStroke(new BasicStroke((float) 2));
        graphics.draw(polygon);
        graphics.setColor(fillColor);
        graphics.fill(polygon);
    }
}

package com.nexkchelper;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.NpcUtil;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import static net.runelite.api.HitsplatID.VENOM;

@Slf4j
@PluginDescriptor(
	name = "Nex Kc Helper"
)
public class NexKcHelperPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private NexKcHelperConfig config;
	@Inject
	private NexKcHelperOverlay npcMarkerOverlay;
	@Inject
	private NpcUtil npcUtil;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ConfigManager configManager;
	@Inject
	private KeyManager keyManager;
	@Inject
	private InfoBoxManager infoBoxManager;

	private final BufferedImage image = ImageUtil.loadImageResource(NexKcHelperPlugin.class, "/util/nexling.png");

	private final InfoBox activeBox = new InfoBox(image, this) {
		@Override
		public String getText() {
			return "";
		}

		@Override
		public Color getTextColor() {
			return Color.CYAN;
		}
		@Override
		public String getTooltip() {
			return "Nex Kc Helper";
		}
	};

	private boolean active;
	@Getter(AccessLevel.PACKAGE)
	private final ArrayList<NPC> npcs = new ArrayList<>();

	private final HotkeyListener hotkeyListener = new HotkeyListener(() -> config.keybind()) {
		@Override
		public void keyPressed(KeyEvent e)
		{
			if (config.keybind().matches(e))
			{
				if (active)
				{
					reset();
				}
				else
				{
					infoBoxManager.addInfoBox(activeBox);
					active = true;
				}
			}
		}
	};

	@Override
	protected void startUp() throws Exception
	{
		reset();
		overlayManager.add(npcMarkerOverlay);
		keyManager.registerKeyListener(hotkeyListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		reset();
		overlayManager.remove(npcMarkerOverlay);
		keyManager.unregisterKeyListener(hotkeyListener);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		if (active)
		{
			final NPC npc = npcSpawned.getNpc();
			final String npcName = npc.getName();
			if (npcName != null || !npcs.contains(npc))
			{
				if (config.excludeRangeMelee() && (npcName.equals("Spiritual Warrior") || npcName.equals("Spiritual Ranger")))
				{
					return;
				}
				npcs.add(npc);
			}
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied)
	{
		if (active)
		{
			if (hitsplatApplied.getHitsplat().getHitsplatType() == VENOM )
			{
				if (hitsplatApplied.getActor() instanceof NPC)
				{
					npcs.remove((NPC) hitsplatApplied.getActor());
				}
			}
		}
	}

	private void reset()
	{
		active = false;
		if (!infoBoxManager.getInfoBoxes().isEmpty()) {
			infoBoxManager.removeInfoBox(activeBox);
		}
		npcs.clear();
	}


	@Provides
	NexKcHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NexKcHelperConfig.class);
	}
}

