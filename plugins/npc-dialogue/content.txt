package com.NpcDialogue.node;

public class NPCDialogueNode extends DialogueNode
{
	public NPCDialogueNode(String npcName, String content)
	{
		super("'''" + npcName + ":''' " + content);
	}
}

package com.NpcDialogue.node;

public class OptionDialogueNode extends DialogueNode
{
	public OptionDialogueNode(String content)
	{
		super("{{topt|" + content + "}}");
	}
}

package com.NpcDialogue.node;

public class MetaDialogueNode extends DialogueNode
{
	/**
	 * A dialogue node that does not contain unique dialogue per entry within a single parent.
	 * @param content
	 */
	public MetaDialogueNode(String content)
	{
		super(content);
	}
}

package com.NpcDialogue.node;

public class SelectDialogueNode extends DialogueNode
{
	public SelectDialogueNode(String content)
	{
		super("{{tselect|" + content + "}}");
	}
}

package com.NpcDialogue.node;

import java.util.ArrayList;
import java.util.List;

public class DialogueNode
{
	String content;
	private DialogueNode parent;
	private List<DialogueNode> children = new ArrayList<>();

	public DialogueNode(String content) {
		this.content = content;
	}

	public DialogueNode findOption(String substring) {
		if (this.content.contains(substring)) {
			return this;
		} else {
			for(DialogueNode child : children) {
				DialogueNode downstream = child.findOption(substring);
				if (downstream != null) {
					return downstream;
				}
			}
			return null;
		}
	}

	public DialogueNode getParent() {
		return this.parent;
	}

	public void setParent(DialogueNode parent) {
		this.parent = parent;
	}

	public DialogueNode addChild(DialogueNode node) {
		//Intercept the addChild to inject into previously created tree.
		//This allows us to build a node tree of all options together
		if(node instanceof MetaDialogueNode)
		{
			if(this.children.size() > 0)
			{
				DialogueNode lastChild = this.children.get(this.children.size() - 1);
				if (node.content.equals(lastChild.content))
				{
					return lastChild;
				}
			}
		} else {
			if (this.content.equals(node.content))
			{
				return this;
			}
			for (DialogueNode n : children)
			{
				if (n.content.equals(node.content))
				{
					return n;
				}
			}
		}
		node.setParent(this);
		children.add(node);
		return node;
	}

	public List<DialogueNode> getChildren() {
		return this.children;
	}

	private void printDepth(StringBuilder sb, int depth) {
		for(int i = 0; i < depth; i++) {
			sb.append("*");
		}
	}

	private void printContent(StringBuilder sb) {
		sb.append(this.content);
	}

	public void print(StringBuilder sb, int depth) {
		if(content.length() > 0) {
			this.printDepth(sb, depth);
			this.printContent(sb);
			sb.append("\n");
		}
		if (this.children.size() > 0) {
			if (this instanceof OptionDialogueNode) {
				depth += 1;
			}
			for (DialogueNode n : children) {
				n.print(sb, depth);
			}
			if(content.length() > 0
			&& this instanceof OptionDialogueNode
			&& !(this.children.get(this.children.size() - 1) instanceof MetaDialogueNode)) {
				this.printDepth(sb, depth);
				sb.append("{{tact|end}}\n");
			}
		}
	}
}

package com.NpcDialogue.node;

public class PlayerDialogueNode extends DialogueNode
{
	public PlayerDialogueNode(String content)
	{
		super("'''Player:''' " + content);
	}
}

/*
 * Copyright (c) 2018, Woox <https://github.com/wooxsolo>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.NpcDialogue;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.GameTick;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
	name = "NPC dialogue",
	description = "Utility to make it easier to transcribe NPC dialogue for OSRS Wiki."
)

public class NpcDialoguePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	enum DialogInterfaceType
	{
		NONE,
		NPC,
		PLAYER,
		OPTION,
		OBJECT_BOX,
		MESSAGE_BOX,
		DOUBLE_OBJECT_BOX,
		SPRITE_BOX,
	}

	private String lastSeenText = null;
	private DialogInterfaceType lastDialogueType = DialogInterfaceType.NONE;
	private Widget[] dialogueOptions;
	private NpcDialoguePanel panel;
	private NavigationButton navButton;


	@Override
	public void startUp()
	{
		// Shamelessly copied from NotesPlugin
		panel = injector.getInstance(NpcDialoguePanel.class);
		panel.init();

		// Hack to get around not having resources.
		final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), "dialogue_icon.png");

		navButton = NavigationButton.builder()
			.tooltip("NPC dialogue")
			.icon(icon)
			.priority(100)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked)
	{
		if (menuOptionClicked.getMenuAction() == MenuAction.WIDGET_CONTINUE && menuOptionClicked.getMenuOption().equals("Continue"))
		{
			int actionParam = menuOptionClicked.getActionParam();
			// if -1, "Click here to continue"
			if (actionParam > 0 && actionParam < dialogueOptions.length)
			{
				panel.appendText("<chose " + dialogueOptions[actionParam].getText() + ">");
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		Widget npcDialogueTextWidget = client.getWidget(InterfaceID.ChatLeft.TEXT);
		if (npcDialogueTextWidget != null && (lastDialogueType != DialogInterfaceType.NPC || !npcDialogueTextWidget.getText().equals(lastSeenText)))
		{
			lastDialogueType = DialogInterfaceType.NPC;
			String npcText = npcDialogueTextWidget.getText();
			lastSeenText = npcText;

			String npcName = client.getWidget(InterfaceID.ChatLeft.NAME).getText();
			panel.appendText("* '''" + npcName + ":''' " + npcText);
		}

		Widget playerDialogueTextWidget = client.getWidget(InterfaceID.ChatRight.TEXT);
		if (playerDialogueTextWidget != null && (lastDialogueType != DialogInterfaceType.PLAYER || !playerDialogueTextWidget.getText().equals(lastSeenText)))
		{
			lastDialogueType = DialogInterfaceType.PLAYER;
			String playerText = playerDialogueTextWidget.getText();
			lastSeenText = playerText;

			panel.appendText("* '''Player:''' " + playerText);
		}

		Widget playerDialogueOptionsWidget = client.getWidget(InterfaceID.Chatmenu.OPTIONS);
		if (playerDialogueOptionsWidget != null && (lastDialogueType != DialogInterfaceType.OPTION || playerDialogueOptionsWidget.getChildren() != dialogueOptions))
		{
			lastDialogueType = DialogInterfaceType.OPTION;
			dialogueOptions = playerDialogueOptionsWidget.getChildren();
			panel.appendText("* {{tselect|" + dialogueOptions[0].getText() + "}}");
			for (int i = 1; i < dialogueOptions.length - 2; i++)
			{
				panel.appendText("* {{topt|" + dialogueOptions[i].getText() + "}}");
			}
		}

		Widget msgTextWidget = client.getWidget(InterfaceID.Messagebox.TEXT);
		if (msgTextWidget != null && !msgTextWidget.isHidden() && (lastDialogueType != DialogInterfaceType.MESSAGE_BOX || !msgTextWidget.getText().equals(lastSeenText)))
		{
			lastDialogueType = DialogInterfaceType.MESSAGE_BOX;
			String msgText = msgTextWidget.getText();
			lastSeenText = msgText;
			panel.appendText("* {{tbox|" + msgText + "}}");
		}

		Widget objectBoxWidget = client.getWidget(InterfaceID.Objectbox.TEXT);
		if (objectBoxWidget != null && (lastDialogueType != DialogInterfaceType.OBJECT_BOX || !objectBoxWidget.getText().equals(lastSeenText)))
		{
			lastDialogueType = DialogInterfaceType.OBJECT_BOX;
			String spriteText = objectBoxWidget.getText();
			lastSeenText = spriteText;
			Widget spriteWidget = client.getWidget(InterfaceID.Objectbox.ITEM);
			int id = spriteWidget.getItemId();
			panel.appendText("* {{tbox|pic=" + id + " detail.png|" + spriteText + "}}");
			for (Widget child : objectBoxWidget.getParent().getChildren())
			{
				// Object box with options
				if (child.getId() == InterfaceID.Objectbox.UNIVERSE && !child.getText().isEmpty() && !child.getText().equals("Click here to continue"))
				{
					String optionText = child.getText();
					panel.appendText("* {{topt|" + optionText + "}}");
				}
			}
		}

		Widget doubleObjectBoxWidget = client.getWidget(InterfaceID.ObjectboxDouble.TEXT);
		if (doubleObjectBoxWidget != null && (lastDialogueType != DialogInterfaceType.DOUBLE_OBJECT_BOX || !doubleObjectBoxWidget.getText().equals(lastSeenText)))
		{
			lastDialogueType = DialogInterfaceType.DOUBLE_OBJECT_BOX;
			String doubleObjectBoxText = doubleObjectBoxWidget.getText();
			lastSeenText = doubleObjectBoxText;
			int id1 = client.getWidget(InterfaceID.ObjectboxDouble.MODEL1).getItemId();
			int id2 = client.getWidget(InterfaceID.ObjectboxDouble.MODEL2).getItemId();
			panel.appendText("* {{tbox|pic=" + id1 + " detail.png|pic2=" + id2 + " detail.png|" + doubleObjectBoxText + "}}");
		}

		Widget spriteBoxWidget = client.getWidget(InterfaceID.Graphicbox.TEXT);
		if (spriteBoxWidget != null && (lastDialogueType != DialogInterfaceType.SPRITE_BOX || !spriteBoxWidget.getText().equals(lastSeenText)))
		{
			lastDialogueType = DialogInterfaceType.SPRITE_BOX;
			String spriteBoxText = spriteBoxWidget.getText();
			lastSeenText = spriteBoxText;
			int spriteId = client.getWidget(InterfaceID.Graphicbox.IMG).getSpriteId();
			panel.appendText("* {{tbox|pic=" + spriteId + " icon.png|" + spriteBoxText + "}}");
		}
	}
}

/*
 * Copyright (c) 2018 Charlie Waters
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.NpcDialogue;

import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

@Slf4j
class NpcDialoguePanel extends PluginPanel
{
    private final JTextArea notesEditor = new JTextArea();

    void init()
    {
        getParent().setLayout(new BorderLayout());
        getParent().add(this, BorderLayout.CENTER);

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        notesEditor.setTabSize(2);
        notesEditor.setLineWrap(true);
        notesEditor.setWrapStyleWord(true);

        JPanel notesContainer = new JPanel();
        notesContainer.setLayout(new BorderLayout());
        notesContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        notesEditor.setOpaque(false);


        notesContainer.add(notesEditor, BorderLayout.CENTER);
        notesContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

        add(notesContainer, BorderLayout.CENTER);
    }

    void appendText(String data)
    {
        notesEditor.append(data.replaceAll("<br>", " ") + "\n");
    }
}
package com.NpcDialogue;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NpcDialogueTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NpcDialoguePlugin.class);
		RuneLite.main(args);
	}
}
