package com.stardust;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class StardustPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(StardustPlugin.class);
		RuneLite.main(args);
	}
}
package com.stardust;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.text.DecimalFormat;

public class StardustOverlay extends Overlay {

    private final Client client;
    private final int STARDUST_ID = 25527;
    private double stardustPerHour;
    private final PanelComponent panelComponent = new PanelComponent();
    DecimalFormat decimalFormat = new DecimalFormat("#");

    @Inject
    private StardustConfig config;

    @Inject
    private StardustOverlay(Client client) {
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        this.client = client;
    }

    @Subscribe
    public void onStardustPerHourUpdate(StardustPerHourUpdate event) {
        stardustPerHour = event.getStardustPerHour();
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();
        String overlayTitle = "Stardust per hour:";

        if (client.getGameState() == GameState.LOGGED_IN) {
            if (client.getItemContainer(InventoryID.INVENTORY).contains(STARDUST_ID)) {

                panelComponent.getChildren().add(TitleComponent.builder()
                        .text(overlayTitle)
                        .color(config.colorConfig()) // update to use color from config
                        .build());

                panelComponent.setPreferredSize(new Dimension(
                        graphics.getFontMetrics().stringWidth(overlayTitle) + 30,
                        0));

                int displayRate = (int) Double.parseDouble(decimalFormat.format(stardustPerHour));

                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Dust/Hr:")
                        .right(String.valueOf(displayRate))
                        .build());
            }
        }
        return panelComponent.render(graphics);
    }

    // Complimentary method to reset stardust per hour in overlay
    // fired from resetConfiguration() in StardustPlugin
    public void resetStardustPerHour() {
        stardustPerHour = 0;
    }

}

package com.stardust;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Stardust Per Hour"
)
public class StardustPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private EventBus eventBus;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private StardustOverlay overlay;
	@Inject
	private StardustConfig config;
	private boolean isCounting;
	private int initialStardustCount;
	private long startTimeMillis;
	public double stardustPerHour = 0;
	private final int STARDUST_ID = 25527;

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getItemContainer() == client.getItemContainer(InventoryID.INVENTORY))
		{
			if (event.getItemContainer().contains(STARDUST_ID))
			{
				int count = event.getItemContainer().count(STARDUST_ID);
				if (!isCounting)
				{
					isCounting = true; // start tracking stardust count and time
					initialStardustCount = count;
					startTimeMillis = System.currentTimeMillis();
				}
				else
				{
					stardustPerHour = stardustPerHour(startTimeMillis, System.currentTimeMillis(), initialStardustCount, count);

					eventBus.post(new StardustPerHourUpdate(stardustPerHour));
				}
			} else {
				isCounting = false; // inv no longer contains stardust, reset
			}
		}
	}

	public double stardustPerHour(long startTimeMillis, long currentTimeMillis, int startCount, int newCount){
		long elapsedTimeMillis = currentTimeMillis - startTimeMillis;
		double elapsedTimeHours = elapsedTimeMillis / (1000.0 * 60 * 60);
		int stardustReceived = newCount - startCount;

		return stardustReceived / elapsedTimeHours;
	}
	private void resetStardustCount() {
		isCounting = false;
		stardustPerHour = 0;
		// Notify overlay to reset to 0 right away
		overlay.resetStardustPerHour(); //rather than wait for next update
	}

	@Override
	protected void startUp() throws Exception
	{
		eventBus.register(this);
		eventBus.register(overlay);
		overlayManager.add(overlay);
	}

	@Override
	public void resetConfiguration(){
		resetStardustCount();
	}

	@Override
	protected void shutDown() throws Exception
	{
		eventBus.unregister(this);
		eventBus.unregister(overlay);
		resetStardustCount();
		overlayManager.remove(overlay);
	}

	@Provides
	StardustConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(StardustConfig.class);
	}
}

package com.stardust;

public class StardustPerHourUpdate
{
    private double stardustPerHour;

    public StardustPerHourUpdate(double stardustPerHour)
    {
        this.stardustPerHour = stardustPerHour;
    }

    public double getStardustPerHour()
    {
        return stardustPerHour;
    }
}


package com.stardust;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("stardust")
public interface StardustConfig extends Config
{
	@ConfigItem(
			position = 1,
			keyName = "textColorChoice",
			name= "Color Selector",
			description = "Choose the color of the text box"
	)
	default Color colorConfig() { return Color.GREEN; }
}

