package emptyhandsindicator;

import java.awt.Color;
import java.util.function.BiConsumer;
import javax.inject.Inject;
import javax.inject.Singleton;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.kit.KitType;
import net.runelite.api.Player;
import net.runelite.client.party.PartyService;

@Slf4j
@Singleton
public class EmptyHandsIndicatorService {
    private final Client client;
    private final EmptyHandsIndicatorConfig config;
    private final PartyService partyService;

    @Inject
    private EmptyHandsIndicatorService(Client client, EmptyHandsIndicatorConfig config, PartyService partyService)
    {
        this.config = config;
        this.client = client;
        this.partyService = partyService;
    }

    void forEachPlayer(final BiConsumer<Player, Color> consumer)
    {
        for (Player player : client.getTopLevelWorldView().players())
        {
            if (player == null)
            {
                continue;
            }

            Color color = getColor(player);
            if (color != null)
            {
                consumer.accept(player, color);
            }
        }
    }

    Color getColor(Player player)
    {
        Color color = null;
        boolean handsEmpty = false;

        boolean isPlayer = player == client.getLocalPlayer();
        boolean isFriendChat = player.isFriendsChatMember();
        boolean isFriend = player.isFriend();
        boolean isInParty = partyService.isInParty() && partyService.getMemberByDisplayName(player.getName()) != null;
        boolean isClanMember = player.isClanMember();



        if (isFriendChat && config.indicateFriendChat()) {
            handsEmpty = areHandsEmpty(player);
            color = config.getFriendChatColor();
        }
        else if (isFriend && config.indicateFriends()) {
            handsEmpty = areHandsEmpty(player);
            color = config.getFriendColor();
        }
        else if (isInParty && config.indicatePartyMembers()) {
            handsEmpty = areHandsEmpty(player);
            color = config.getPartyMemberColor();
        }
        else if (isClanMember && config.indicateClanMembers()) {
            handsEmpty = areHandsEmpty(player);
            color = config.getClanMemberColor();
        }
        else if (!(isPlayer || isFriendChat || isFriend || isInParty || isClanMember) && config.indicateEveryoneElse()) {
            handsEmpty = areHandsEmpty(player);
            color = config.getEveryoneColor();
        }

        if (color == null || !handsEmpty)
        {
            return null;
        }

        return color;
    }

    private boolean areHandsEmpty(Player player) {
        int itemId = player.getPlayerComposition().getEquipmentId(KitType.WEAPON);
        return itemId == -1;
    }

}

package emptyhandsindicator;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Empty Hands Indicator"
)
public class EmptyHandsIndicatorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private EmptyHandsIndicatorConfig config;

	@Inject
	private EmptyHandsIndicatorService emptyHandsIndicatorService;

	@Inject
	private EmptyHandsIndicatorOverlay emptyHandsIndicatorOverlay;

	@Provides
	EmptyHandsIndicatorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EmptyHandsIndicatorConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(emptyHandsIndicatorOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(emptyHandsIndicatorOverlay);
	}

}

package emptyhandsindicator;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;
import java.awt.*;

@ConfigGroup("Indicate empty handed")
public interface EmptyHandsIndicatorConfig extends Config
{
	@ConfigSection(
			name = "Indication Style",
			description = "Configure the type of indication.",
			position = 1
	)
	String indicationStyleSection = "indicationStyleSection";

	@ConfigSection(
			name = "Player types",
			description = "Toggle Indicating players by type and choose their color.",
			position = 2
	)
	String playersSection = "playersSection";

	@ConfigItem(
			position = 1,
			keyName = "indicationStyle",
			name = "Indication Style",
			description = "How would you like it to show?",
			section = indicationStyleSection
	)
	default IndicationStyle indicationStyle(){
		return IndicationStyle.OVERHEADTEXT;
	}

	@ConfigItem(
			position = 2,
			keyName = "borderWidth",
			name = "Outline Border Width",
			description = "This is the width of the outline around a player",
			section = indicationStyleSection
	)
	@Range(
			min = 1,
			max = 50
	)
	default int getBorderWidth(){return 3;}

	@ConfigItem(
			position = 3,
			keyName = "borderFeather",
			name = "Outline Feather",
			description = "Amount to feather the outline around a player.",
			section = indicationStyleSection
	)
	@Range(
			max = 5
	)
	default int getBorderFeather(){return 5;}

	@ConfigItem(
			position = 1,
			keyName = "indicatePartyMembers",
			name = "Party members",
			description = "Show indicator for party members.",
			section = playersSection
	)
	default boolean indicatePartyMembers()
	{
		return false;
	}

	@ConfigItem(
			position = 2,
			keyName = "partyMemberTextColor",
			name = "Party color",
			description = "Color for party members.",
			section = playersSection
	)
	default Color getPartyMemberColor()
	{
		return new Color(234, 123, 91);
	}

	@ConfigItem(
			position = 3,
			keyName = "indicateFriends",
			name = "Friends",
			description = "Show indicator for friends.",
			section = playersSection
	)
	default boolean indicateFriends()
	{
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "friendTextColor",
			name = "Friends' color",
			description = "Color for friends.",
			section = playersSection
	)
	default Color getFriendColor()
	{
		return new Color(0, 200, 83);
	}

	@ConfigItem(
			position = 5,
			keyName = "indicateClan",
			name = "Clan members",
			description = "Show indicator for clan members.",
			section = playersSection
	)
	default boolean indicateClanMembers()
	{
		return false;
	}

	@ConfigItem(
			position = 6,
			keyName = "clanMemberColor",
			name = "Clan color",
			description = "Color for clan members.",
			section = playersSection
	)
	default Color getClanMemberColor()
	{
		return new Color(255, 0, 212);
	}

	@ConfigItem(
			position = 7,
			keyName = "indicateFriendChat",
			name = "Friend Chat",
			description = "Show indicator for friend chat members.",
			section = playersSection
	)
	default boolean indicateFriendChat()
	{
		return false;
	}

	@ConfigItem(
			position = 8,
			keyName = "friendChatColor",
			name = "Friend Chat color",
			description = "Color for friend chat member.",
			section = playersSection
	)
	default Color getFriendChatColor()
	{
		return new Color(170, 0, 255);
	}

	@ConfigItem(
			position = 9,
			keyName = "EveryoneElse",
			name = "Everyone Else",
			description = "Show indicator for Everyone else.",
			section = playersSection
	)
	default boolean indicateEveryoneElse()
	{
		return false;
	}

	@ConfigItem(
			position = 10,
			keyName = "EveryoneElseColor",
			name = "Everyone else's color",
			description = "Color of everyone's text.",
			section = playersSection
	)
	default Color getEveryoneColor()
	{
		return new Color(255, 0, 0);
	}
}

package emptyhandsindicator;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;
import net.runelite.client.util.Text;

public class EmptyHandsIndicatorOverlay extends Overlay {

    private static final int TEXT_MARGIN = 50;

    private final EmptyHandsIndicatorService indicatorService;
    private final EmptyHandsIndicatorConfig config;
    private final ModelOutlineRenderer outlineRenderer;

    @Inject
    private EmptyHandsIndicatorOverlay(
            EmptyHandsIndicatorService indicatorService,
            EmptyHandsIndicatorConfig config,
            ModelOutlineRenderer outlineRenderer)
    {
        this.indicatorService = indicatorService;
        this.config = config;
        this.outlineRenderer = outlineRenderer;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(PRIORITY_MED);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        indicatorService.forEachPlayer((player, color) -> {
            if(config.indicationStyle() ==  IndicationStyle.OVERHEADTEXT || config.indicationStyle() == IndicationStyle.BOTH){
                renderPlayerOverlay(graphics, player, color);
            }

            if(config.indicationStyle() ==  IndicationStyle.OUTLINE || config.indicationStyle() == IndicationStyle.BOTH){
                renderPlayerOutline(player, color);
            }

        });
        return null;
    }

    private void renderPlayerOverlay(Graphics2D graphics, Player player, Color color)
    {

        final int zOffset = player.getLogicalHeight() + TEXT_MARGIN;

        final String name = Text.sanitize(player.getName() + "'s hands are empty. Egg em!");
        Point textLocation = player.getCanvasTextLocation(graphics, name, zOffset);

        if (textLocation == null)
        {
            return;
        }

        OverlayUtil.renderTextLocation(graphics, textLocation, name, color);
    }

    private void renderPlayerOutline(Player player, Color color) {
        outlineRenderer.drawOutline(player, config.getBorderWidth(), color, config.getBorderFeather());
    }
}

package emptyhandsindicator;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum IndicationStyle {
    OUTLINE("Outline"),
    OVERHEADTEXT("Over head text"),
    BOTH("Both");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}

package emptyhandsindicator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EmptyHandsIndicatorTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EmptyHandsIndicatorPlugin.class);
		RuneLite.main(args);
	}
}
