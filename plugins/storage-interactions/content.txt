package com.molte.storageinteractions;

import com.molte.storageinteractions.settings.StorageInteractionsConfig;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.*;

import javax.inject.Inject;
import java.awt.*;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;


public class StorageInteractionsOverlay extends Overlay
{
    private static Font FONT = new Font("Arial", Font.BOLD, 14);

    private final Client _client;
    private String _renderText = null;
    private BufferedImage _bankNoteImage;
    private BufferedImage _baseBankNoteImage;
    private boolean _showBankNote = false;

    @Inject
    private StorageInteractionsConfig _config;

    @Inject
    StorageInteractionsOverlay(Client client){
        _client = client;

        setPriority(OverlayPriority.HIGHEST);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        final Point mousePosition = _client.getMouseCanvasPosition();
        final int overlayX = mousePosition.getX() + _config.overlayOffsetX();
        final int overlayY = mousePosition.getY() + _config.overlayOffsetY();

        if (_showBankNote && _bankNoteImage != null) {
            graphics2D.drawImage(
                    _bankNoteImage,
                    overlayX + _config.overlaySize().getBankNoteXOffset(),
                    overlayY + _config.overlaySize().getBankNoteYOffset(),
                    null);
        }

        if (_renderText != null) {
            AffineTransform transform = graphics2D.getTransform();
            transform.translate(
                    overlayX + _config.overlaySize().getFontXOffset(),
                    overlayY + _config.overlaySize().getFontYOffset());
            graphics2D.transform(transform);
            graphics2D.setColor(_config.fontOutLineColor());
            FontRenderContext frc = graphics2D.getFontRenderContext();
            TextLayout tl = new TextLayout(_renderText, FONT, frc);
            Shape shape = tl.getOutline(null);
            graphics2D.setStroke(new BasicStroke(_config.overlaySize().getFontOutlineThickness()));
            graphics2D.draw(shape);
            graphics2D.setColor(_config.fontColor());
            graphics2D.fill(shape);
        }

        return null;
    }

    public void setRenderText(String text){
        _renderText = text;
    }

    public void setBankNoteImage(BufferedImage bankNoteImage)
    {
        if (bankNoteImage != null){
            _baseBankNoteImage = bankNoteImage;
        }

        if (_baseBankNoteImage == null){
            return;
        }

        double scaleX = (double) _config.overlaySize().getBankNoteWidth() / _baseBankNoteImage.getWidth();
        double scaleY = (double) _config.overlaySize().getBankNoteHeight() / _baseBankNoteImage.getHeight();

        AffineTransform tx = AffineTransform.getScaleInstance(scaleX, scaleY);
        BufferedImageOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);

        _bankNoteImage = op.filter(_baseBankNoteImage, null);
    }

    public void setShowBankNoteImage(boolean state)
    { _showBankNote = state; }

    public void updateConfig(){
        FONT = new Font("Arial", Font.BOLD, _config.overlaySize().getFontSize());
        setBankNoteImage(null);
    }
}

package com.molte.storageinteractions.settings;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup(StorageInteractionsConfig.CONFIG_GROUP)
public interface StorageInteractionsConfig extends Config
{
	public static final String CONFIG_GROUP = "storageinteractions";

	@ConfigSection(
			name = "Overlay",
			description = "All options that configure the mouse overlay",
			position = 0,
			closedByDefault = false
	)
	String overlaySection = "overlay";

	@ConfigItem(
			keyName = "overlaySize",
			name = "Size",
			description = "Size of the font/bank note in overlay",
			position = 0,
			section = overlaySection
	)
	default OverlaySize overlaySize() { return OverlaySize.MEDIUM; }

	@ConfigItem(
			keyName = "fontColour",
			name = "Colour",
			description = "Colour of the font in the overlay",
			position = 1,
			section = overlaySection
	)
	default Color fontColor() { return Color.ORANGE; }

	@ConfigItem(
			keyName = "fontOutlineColour",
			name = "Outline Colour",
			description = "Outline colour of the font in the overlay",
			position = 2,
			section = overlaySection
	)
	default Color fontOutLineColor() { return Color.BLACK; }

	@Range(
			min = -50000,
			max = 50000
	)
	@ConfigItem(
			keyName = "overlayOffsetX",
			name = "X",
			description = "X offset position of overlay",
			position = 3,
			section = overlaySection
	)
	default int overlayOffsetX() { return -0; }

	@Range(
			min = -50000,
			max = 50000
	)
	@ConfigItem(
			keyName = "overlayOffsetY",
			name = "Y",
			description = "Y offset position of overlay",
			position = 4,
			section = overlaySection
	)
	default int overlayOffsetY() { return -0; }
}

package com.molte.storageinteractions.settings;

public enum OverlaySize {
    SMALL (10, 3, 10, 16, 7, 3, 20, 20),
    MEDIUM (12, 4, 11, 20, 7, 4, 23, 23),
    LARGE (14, 5, 12, 20, 7, 1, 26, 26),
    X_LARGE(18, 7, 12, 17, 6, -7, 35, 35);

    private final int _fontSize;
    private final float _fontOutlineThickness;
    private final int _fontXOffset;
    private final int _fontYOffset;

    private final int _bankNoteXOffset;
    private final int _bankNoteYOffset;
    private final int _bankNoteWidth;
    private final int _bankNoteHeight;

    OverlaySize(int fontSize, float fontOutlineThickness, int fontXOffset, int fontYOffset, int bankNoteXOffset, int bankNoteYOffset, int bankNoteWidth, int bankNoteHeight){
        _fontSize = fontSize;
        _fontOutlineThickness = fontOutlineThickness;
        _fontXOffset = fontXOffset;
        _fontYOffset = fontYOffset;
        _bankNoteXOffset = bankNoteXOffset;
        _bankNoteYOffset = bankNoteYOffset;
        _bankNoteWidth = bankNoteWidth;
        _bankNoteHeight = bankNoteHeight;
    }

    public int getFontSize()
    {
        return _fontSize;
    }

    public float getFontOutlineThickness()
    {
        return _fontOutlineThickness;
    }

    public int getFontXOffset()
    {
        return _fontXOffset;
    }

    public int getFontYOffset()
    {
        return _fontYOffset;
    }

    public int getBankNoteXOffset() {
        return _bankNoteXOffset;
    }

    public int getBankNoteYOffset() {
        return _bankNoteYOffset;
    }

    public int getBankNoteWidth() {
        return _bankNoteWidth;
    }

    public int getBankNoteHeight() {
        return _bankNoteHeight;
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;

import java.awt.*;

public class GnomeStorageWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.FARMING_TOOLS;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.FarmingToolsSide.UNIVERSE;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return null;
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return "";
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return "";
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[0];
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int bankQuantityType = client.getVarbitValue(VarbitID.FARMING_TOOLS_SELECTEDQUANTITY);

        return formatBankQuantityType(client, bankQuantityType);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return "X";
    }

    private String formatBankQuantityType(Client client, int bankQuantityType){
        switch (bankQuantityType){
            case 0:
                return "1";
            case 1:
                return "5";
            case 3:
                return "X"; // Client doesn't save an X value for this interface
            case 2:
                return "All";
            default:
                return null;
        }
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return false;
    }

    @Override
    protected String getFormatMenuRegex(){
        return "Remove-|Store-";
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;

import java.awt.*;

public abstract class BaseWidgetHandler {

    public abstract int getInterfaceID();
    public abstract int getDepositInterfaceID();
    public abstract Rectangle getDepositInterfaceOffset();
    public abstract String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity);
    public abstract String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity);
    public abstract int[] getScriptIDsThatForceUpdate();
    public abstract String GetSelectedQuantity(Client client);
    public abstract String GetSelectedXValue(Client client);
    public abstract boolean ForceReturnNoTooltip(Client client);
    public abstract boolean IsNotedModeActive(Client client);

    public String getTooltipText(Client client, IMenuSwapperConfigLoader menuSwapperConfigLoader, String hoverMenuItemText, boolean shiftHeld, boolean mouseOverDepositInterface) {
        if (ForceReturnNoTooltip(client)){
            return null;
        }

        String selectedQuantity = GetSelectedQuantity(client);

        if (hoverMenuItemText != null  && !hoverMenuItemText.isEmpty()) {
            String hoveredText = formatMenuText(hoverMenuItemText, client);
            if (hoveredText != null){
                return hoveredText;
            }
        }

        if (shiftHeld){
            String menuSwappedValue = mouseOverDepositInterface ?
                    getShiftDepositAmount(menuSwapperConfigLoader, selectedQuantity) :
                    getShiftWithdrawAmount(menuSwapperConfigLoader, selectedQuantity);

            if (menuSwappedValue != null && !menuSwappedValue.isEmpty()){
                menuSwappedValue = formatMenuText(menuSwappedValue, client);
            }

            if (menuSwappedValue != null && !menuSwappedValue.isEmpty()){
                return menuSwappedValue;
            }
        }

        return selectedQuantity;
    }

    protected String getFormatMenuRegex(){
        return "Withdraw-|Deposit-|WITHDRAW_|DEPOSIT_";
    }

    private String formatMenuText(String text, Client client)
    {
        String sanitisedString = sanitiseMenuString(text);
        String formattedString = sanitisedString.replaceAll(getFormatMenuRegex(), "");

        // If nothing got replaced it safe to assume it's a bad string
        if (sanitisedString.equals(formattedString)){
            return null;
        }

        switch (formattedString.toLowerCase())
        {
            case "x":
                return GetSelectedXValue(client);
            case "all":
                return "All";
            default:
                return formattedString;
        }
    }

    private String sanitiseMenuString(String menuString){
        return menuString.replaceAll("<col=[^>]+>", "");
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;

import java.awt.*;

public class TackleBoxWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.TACKLE_BOX_MAIN;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.TackleBoxSide.ITEMS;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return new Rectangle( -35, -35, 40, 60);
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return "";
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return "";
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[0];
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int bankQuantityType = client.getVarbitValue(VarbitID.II_ELNOCK_STORAGE_SELECTEDQUANTITY);

        return formatBankQuantityType(client, bankQuantityType);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return "X";
    }

    private String formatBankQuantityType(Client client, int bankQuantityType){
        switch (bankQuantityType){
            case 0:
                return "1";
            case 1:
                return "5";
            case 3:
                return "X"; // Client doesn't save an X value for this interface
            case 2:
                return "All";
            default:
                return null;
        }
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return false;
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.gameval.InterfaceID;

import java.awt.*;

public class ShopWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.SHOPMAIN;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.Shopside.ITEMS;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return new Rectangle( -35, -35, 40, 60);
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getShopSellAmount();
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getShopBuyAmount();
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[0];
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        return null;
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return null;
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return false;
    }

    @Override
    protected String getFormatMenuRegex(){
        return "Buy |Sell |BUY_|SELL_";
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.api.widgets.Widget;

import java.awt.*;

public class BankWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.BANKMAIN;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.Bankside.UNIVERSE;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return null;
    }


    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getBankShiftDepositAmount();
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getBankShiftWithdrawAmount();
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[] {ScriptID.BANKMAIN_FINISHBUILDING};
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int bankQuantityType = client.getVarbitValue(VarbitID.BANK_QUANTITY_TYPE);

        return formatBankQuantityType(client, bankQuantityType);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return String.valueOf(client.getVarbitValue(VarbitID.BANK_REQUESTEDQUANTITY));
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        Widget wornItems = client.getWidget(InterfaceID.Bankmain.WORNITEMS_CONTAINER);
        Widget menu = client.getWidget(InterfaceID.Bankmain.MENU_CONTAINER);

        // Disable interface if worn items or the menu is shown
        return (wornItems != null && !wornItems.isHidden()) || (menu != null && !menu.isHidden());
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return client.getVarbitValue(VarbitID.BANK_WITHDRAWNOTES) == 1;
    }

    private String formatBankQuantityType(Client client, int bankQuantityType){
        switch (bankQuantityType){
            case 0:
                return "1";
            case 1:
                return "5";
            case 2:
                return "10";
            case 3:
                return GetSelectedXValue(client);
            case 4:
                return "All";
            default:
                return null;
        }
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;

import java.awt.*;

public class GroupStorageWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.SHARED_BANK;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.SharedBankSide.ITEMS;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return null;
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getBankShiftDepositAmount();
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getBankShiftWithdrawAmount();
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[] {ScriptID.BANKMAIN_FINISHBUILDING, ScriptID.GROUP_IRONMAN_STORAGE_BUILD};
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int bankQuantityType = client.getVarbitValue(VarbitID.BANK_QUANTITY_TYPE);

        return formatBankQuantityType(client, bankQuantityType);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return String.valueOf(client.getVarbitValue(VarbitID.BANK_REQUESTEDQUANTITY));
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return client.getVarbitValue(VarbitID.BANK_WITHDRAWNOTES) == 1;
    }

    private String formatBankQuantityType(Client client, int bankQuantityType){
        switch (bankQuantityType){
            case 0:
                return "1";
            case 1:
                return "5";
            case 2:
                return "10";
            case 3:
                return GetSelectedXValue(client);
            case 4:
                return "All";
            default:
                return null;
        }
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;

import java.awt.*;

public class HuntsmansKitWidetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.HUNTSMANS_KIT;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.HuntsmansKitSide.ITEMS;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return new Rectangle( -35, -35, 40, 60);
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return "";
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return "";
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[0];
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int bankQuantityType = client.getVarbitValue(VarbitID.II_ELNOCK_STORAGE_SELECTEDQUANTITY);

        return formatBankQuantityType(client, bankQuantityType);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return "X";
    }

    private String formatBankQuantityType(Client client, int bankQuantityType){
        switch (bankQuantityType){
            case 0:
                return "1";
            case 1:
                return "5";
            case 3:
                return "X"; // Client doesn't save an X value for this interface
            case 2:
                return "All";
            default:
                return null;
        }
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return false;
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.api.gameval.VarbitID;

import java.awt.*;

public class DepositBoxWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.BANK_DEPOSITBOX;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.InventoryNoops.ITEMS;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return null;
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getBankShiftWithdrawAmount();
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return menuSwapperConfigLoader.getBankShiftWithdrawAmount();
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[] {ScriptID.BANKMAIN_BUILD};
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int bankQuantityType = client.getVarbitValue(VarbitID.DEPOSITBOX_MODE);

        return formatBankQuantityType(client, bankQuantityType);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return String.valueOf(client.getVarpValue(VarPlayerID.DEPOSITBOX_REQUESTEDQUANTITY));
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return false;
    }

    private String formatBankQuantityType(Client client, int bankQuantityType){
        switch (bankQuantityType){
            case 0:
                return "1";
            case 1:
                return "5";
            case 4:
                return "10";
            case 3:
                return GetSelectedXValue(client);
            case 2:
                return "All";
            default:
                return null;
        }
    }
}

package com.molte.storageinteractions.widget;

import com.molte.storageinteractions.IMenuSwapperConfigLoader;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarPlayerID;

import java.awt.*;

public class SeedVaultWidgetHandler extends BaseWidgetHandler {

    @Override
    public int getInterfaceID() {
        return InterfaceID.SEED_VAULT;
    }

    @Override
    public int getDepositInterfaceID() {
        return InterfaceID.SeedVaultDeposit.UNIVERSE;
    }

    @Override
    public Rectangle getDepositInterfaceOffset() {
        return null;
    }

    @Override
    public String getShiftDepositAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {
        return ""; // Doesn't work at all?
    }

    @Override
    public String getShiftWithdrawAmount(IMenuSwapperConfigLoader menuSwapperConfigLoader, String selectedQuantity) {

        if (selectedQuantity.equals("1")){
            return ""; // Only works when 1 option is not selected ???
        }

        return menuSwapperConfigLoader.getBankShiftWithdrawAmount();
    }

    @Override
    public int[] getScriptIDsThatForceUpdate() {
        return new int[] { ScriptID.SEED_VAULT_BUILD };
    }

    @Override
    public String GetSelectedQuantity(Client client) {
        int selectedQuantity = client.getVarpValue(VarPlayerID.SEED_VAULT_SELECTED_QTY);

        return selectedQuantity == Integer.MAX_VALUE ? "All" : String.valueOf(selectedQuantity);
    }

    @Override
    public String GetSelectedXValue(Client client) {
        return String.valueOf(client.getVarpValue(VarPlayerID.SEED_VAULT_REQUESTED_QTY));
    }

    @Override
    public boolean ForceReturnNoTooltip(Client client) {
        return false;
    }

    @Override
    public boolean IsNotedModeActive(Client client) {
        return false;
    }

}

package com.molte.storageinteractions;

public interface IMenuSwapperConfigLoader {

    String getBankShiftWithdrawAmount();
    String getBankShiftDepositAmount();
    String getShopBuyAmount();
    String getShopSellAmount();
}

/*
 * NOTICE:
 * Credit to Adam <Adam@sigterm.info> for his creation of the MenuEntrySwapper plugin.
 * StorageInteractions doesn't use his code - just his saved config in RuneLite Configuration manager.
 *
 */

package com.molte.storageinteractions;

import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;

public class MenuEntrySwapperConfigLoader implements IMenuSwapperConfigLoader
{
    public static final String CONFIG_GROUP = "menuentryswapper";

    private final String SHIFT_BANK_WITHDRAW_KEY = "bankWithdrawShiftClick";
    private final String SHIFT_BANK_DEPOSIT_KEY = "bankDepositShiftClick";
    private final String SHIFT_SHOP_BUY_KEY = "shopBuy";
    private final String SHIFT_SHOP_SELL_KEY = "shopSell";

    @Inject
    private ConfigManager _configManager;

    @Override
    public String getBankShiftWithdrawAmount()
    {
        return getValue(SHIFT_BANK_WITHDRAW_KEY);
    }

    @Override
    public String getBankShiftDepositAmount() {
        return getValue(SHIFT_BANK_DEPOSIT_KEY);
    }

    @Override
    public String getShopBuyAmount()
    {
        return getValue(SHIFT_SHOP_BUY_KEY);
    }

    @Override
    public String getShopSellAmount()
    {
        return getValue(SHIFT_SHOP_SELL_KEY);
    }

    private String getValue(String key){
        return _configManager.getConfiguration(CONFIG_GROUP, key);
    }
}

package com.molte.storageinteractions;

import com.google.inject.Provides;
import com.molte.storageinteractions.settings.StorageInteractionsConfig;
import com.molte.storageinteractions.widget.*;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuEntry;
import net.runelite.api.Point;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
	name = "Storage Interactions"
)
public class StorageInteractionsPlugin extends Plugin
{
	@Inject
	private Client _client;

	@Inject
	private ClientThread _clientThread;

	@Inject
	private StorageInteractionsConfig _config;

	@Inject
	private StorageInteractionsOverlay _overlay;

	@Inject
	private OverlayManager _overlayManager;

	@Inject
	private MenuEntrySwapperConfigLoader _menuSwapperConfig;

	private final ArrayList<BaseWidgetHandler> _widgetHandlers = new ArrayList<BaseWidgetHandler>(Arrays.asList(
			new BankWidgetHandler(),
			new SeedVaultWidgetHandler(),
			new DepositBoxWidgetHandler(),
			new GroupStorageWidgetHandler(),
			new ShopWidgetHandler(),
			new GnomeStorageWidgetHandler(),
			new TackleBoxWidgetHandler(),
			new HuntsmansKitWidetHandler()
	));

	private BaseWidgetHandler _activeWidgetHandler;
	private boolean _shiftHeld = false;
	private String _hoveredMenuItem = null;
	private boolean _mouseOverDepositInterface = false;

	@Override
	protected void startUp() throws Exception
	{
		_overlayManager.add(_overlay);

		try (InputStream in = getClass().getResourceAsStream("/images/banknote.png")) {
			if (in != null){
				_overlay.setBankNoteImage(ImageIO.read(in));
			}
		}

		_overlay.updateConfig();
	}

	@Override
	protected void shutDown() throws Exception
	{
		_overlayManager.remove(_overlay);
		_overlay.setRenderText(null);
		_activeWidgetHandler = null;
		_shiftHeld = false;
		_hoveredMenuItem = null;
		_mouseOverDepositInterface = false;
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded)
	{
		int interfaceID = widgetLoaded.getGroupId();

		for (BaseWidgetHandler widgetHandler : _widgetHandlers){
			if (widgetHandler.getInterfaceID() == interfaceID){
				_activeWidgetHandler = widgetHandler;
				break;
			}
		}

		updateOverlay();
	}

	@Subscribe
	public void onWidgetClosed(WidgetClosed widgetClosed)
	{
		if (_activeWidgetHandler != null && _activeWidgetHandler.getInterfaceID() == widgetClosed.getGroupId()) {
			_activeWidgetHandler = null;
		}

		updateOverlay();
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (_activeWidgetHandler == null){
			return;
		}

		// We run this later to ensure menu actions have propagated through code
		_clientThread.invokeLater(this::updateOverlay);
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (_activeWidgetHandler == null){
			return;
		}

		int eventScriptID = event.getScriptId();

		if (Arrays.stream(_activeWidgetHandler.getScriptIDsThatForceUpdate()).anyMatch((scriptID) -> eventScriptID == scriptID)){
			// We run this later to ensure menu actions have propagated through code
			_clientThread.invokeLater(this::updateOverlay);
		}
	}

	@Subscribe
	public void onClientTick(ClientTick event) {
		if (_activeWidgetHandler == null)
		{
			return;
		}

		boolean overlayUpdateRequired = false;

		// Checking if shift state has changed to see if overlay needs updating
		boolean shiftHeldThisTick = _client.isKeyPressed(KeyCode.KC_SHIFT);
		if (shiftHeldThisTick != _shiftHeld){
			_shiftHeld = shiftHeldThisTick;
			overlayUpdateRequired = true;
		}

		// Checking if mouse is over deposit window (useful for matching with menu entry swapper)
		boolean previousMouseOverDepositInterface = _mouseOverDepositInterface;
		setMouseOverDepositInterface();
		if (previousMouseOverDepositInterface != _mouseOverDepositInterface){
			overlayUpdateRequired = true;
		}

		// Update if required
		if (overlayUpdateRequired){
			_clientThread.invokeLater(this::updateOverlay);
		}
	}

	@Subscribe
	public void onPostMenuSort(PostMenuSort event) {
		if (_activeWidgetHandler == null || _client.isMenuOpen())
		{
			return;
		}
		// Doing this in an invoke later because some menu entry swappers edit the menu on this event fire
		_clientThread.invokeLater(() -> {
			// Checking if hovered item has changed to see if overlay needs updating
			String currentHoverItem = _hoveredMenuItem;
			setHoveredMenuItem();

			if (!Objects.equals(currentHoverItem, _hoveredMenuItem)){
				_clientThread.invokeLater(this::updateOverlay);
			}
		});
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(StorageInteractionsConfig.CONFIG_GROUP)){
			_overlay.updateConfig();
		}
	}

	private void updateOverlay(){
		if (_activeWidgetHandler == null){
			_overlay.setRenderText(null);
			_overlay.setShowBankNoteImage(false);
			return;
		}
		_overlay.setShowBankNoteImage(_activeWidgetHandler.IsNotedModeActive(_client));
		_overlay.setRenderText(_activeWidgetHandler.getTooltipText(_client, _menuSwapperConfig, _hoveredMenuItem, _shiftHeld, _mouseOverDepositInterface));
	}

	private void setHoveredMenuItem(){
		_hoveredMenuItem = null;
		MenuEntry[] menuEntries = _client.getMenu().getMenuEntries();
		if (menuEntries.length > 0){
			_hoveredMenuItem = menuEntries[menuEntries.length - 1].getOption();
		}
	}

	private void setMouseOverDepositInterface(){
		if (_activeWidgetHandler == null){
			return;
		}

		_mouseOverDepositInterface = false;
		Point mousePos = _client.getMouseCanvasPosition();
		Widget inventoryWidget = _client.getWidget(_activeWidgetHandler.getDepositInterfaceID());

		if (inventoryWidget != null && !inventoryWidget.isHidden()) {
			Rectangle bounds = inventoryWidget.getBounds();

			if (_activeWidgetHandler.getDepositInterfaceOffset() != null){
				bounds = new Rectangle(
						(int)(bounds.getX() + _activeWidgetHandler.getDepositInterfaceOffset().getX()),
						(int)(bounds.getY() + _activeWidgetHandler.getDepositInterfaceOffset().getY()),
						(int)(bounds.getWidth() + _activeWidgetHandler.getDepositInterfaceOffset().getWidth()),
						(int)(bounds.getHeight() + _activeWidgetHandler.getDepositInterfaceOffset().getHeight()));
			}

			if (bounds.contains(mousePos.getX(), mousePos.getY())) {
				_mouseOverDepositInterface = true;
			}
		}
	}

	@Provides
	private StorageInteractionsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(StorageInteractionsConfig.class);
	}
}

package com.molte.storageinteractions;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class StorageInteractionsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(StorageInteractionsPlugin.class);
		RuneLite.main(args);
	}
}
