package com.voltmaister.db;

import com.voltmaister.data.CollectionItem;
import com.voltmaister.data.CollectionResponse;

import net.runelite.client.RuneLite;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.io.File;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CollectionDatabase {
    private static final Logger log = LoggerFactory.getLogger(CollectionDatabase.class);

    private static final String DB_URL = "jdbc:h2:file:" + RuneLite.RUNELITE_DIR + "/collection-tracker/runelite-collections;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1";

    static {
        File pluginDir = new File(RuneLite.RUNELITE_DIR, "collection-tracker");
        if (!pluginDir.exists()) {
            if (!pluginDir.mkdirs()) {
                log.warn("‚ö†Ô∏è Failed to create plugin directory at {}", pluginDir.getAbsolutePath());
            }
        }
    }

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL);
    }

    public static void init() {
        try {
            // üö® Required for Plugin Hub: explicitly load the H2 JDBC driver
            Class.forName("org.h2.Driver");

            try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
                stmt.executeUpdate("CREATE TABLE IF NOT EXISTS collection_log(" +
                        "id IDENTITY PRIMARY KEY, " +
                        "category VARCHAR(255), " +
                        "item_id INT, " +
                        "item_count INT, " +
                        "item_name VARCHAR(255)," +
                        "collected_date TIMESTAMP" +
                        ")");

                addColumnIfNotExists(conn, "collection_log", "player_name", "VARCHAR(255)");
                addColumnIfNotExists(conn, "collection_log", "last_accessed", "TIMESTAMP");
            }
        } catch (ClassNotFoundException e) {
            log.warn("H2 Driver class not found: " + e.getMessage());
        } catch (SQLException e) {
            log.warn("Database initialization failed: " + e.getMessage());
        }
    }


    private static void addColumnIfNotExists(Connection conn, String table, String column, String type) throws SQLException {
        String checkQuery = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ? AND COLUMN_NAME = ?";
        try (PreparedStatement ps = conn.prepareStatement(checkQuery)) {
            ps.setString(1, table.toUpperCase());
            ps.setString(2, column.toUpperCase());
            try (ResultSet rs = ps.executeQuery()) {
                if (!rs.next()) {
                    try (Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate("ALTER TABLE " + table + " ADD COLUMN " + column + " " + type);
                    }
                }
            }
        }
    }

    public static boolean hasPlayerData(String playerName) {
        String sql = "SELECT 1 FROM collection_log WHERE player_name = ? LIMIT 1";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, playerName);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            log.warn("Error checking player data: " + e.getMessage());
            return false;
        }
    }

    public static void insertItemsBatch(String playerName, String category, List<CollectionResponse.ItemEntry> items) {
        try (Connection conn = getConnection()) {
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO collection_log (player_name, category, item_id, item_name, item_count, collected_date, last_accessed) VALUES (?, ?, ?, ?, ?, ?, ?)")) {
                for (CollectionResponse.ItemEntry item : items) {
                    ps.setString(1, playerName);
                    ps.setString(2, category);
                    ps.setInt(3, item.id);
                    ps.setString(4, item.name);
                    ps.setInt(5, item.count);
                    ps.setTimestamp(6, Timestamp.valueOf(item.date));
                    ps.setTimestamp(7, new Timestamp(System.currentTimeMillis()));
                    ps.addBatch();
                }
                ps.executeBatch();
            }
            conn.commit();
        } catch (SQLException e) {
            log.warn("Error inserting items batch: " + e.getMessage());
        }
    }

    public static void insertItem(String playerName, String category, int itemId, String itemName, int count, String date) {
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(
                "INSERT INTO collection_log (player_name, category, item_id, item_name, item_count, collected_date, last_accessed) VALUES(?,?,?,?,?,?,?)")) {
            ps.setString(1, playerName);
            ps.setString(2, category);
            ps.setInt(3, itemId);
            ps.setString(4, itemName);
            ps.setInt(5, count);
            ps.setTimestamp(6, Timestamp.valueOf(date));
            ps.setTimestamp(7, new Timestamp(System.currentTimeMillis()));
            ps.executeUpdate();
        } catch (SQLException e) {
            log.warn("Error inserting item: " + e.getMessage());
        }
    }

    public static List<CollectionItem> getAllItems(String playerName) {
        List<CollectionItem> items = new ArrayList<>();

        String sql = "SELECT category, item_id, item_name, item_count, collected_date FROM collection_log WHERE player_name = ?";

        try (Connection conn = getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, playerName.toLowerCase());
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String category = rs.getString("category");
                int itemId = rs.getInt("item_id");
                String name = rs.getString("item_name");
                int count = rs.getInt("item_count");
                Timestamp date = rs.getTimestamp("collected_date");

                items.add(new CollectionItem(category, itemId, name, count, date));
            }
        } catch (SQLException e) {
            log.warn("Error fetching items for player: " + e.getMessage());
        }

        return items;
    }

    public static Timestamp getLatestTimestamp(String playerName) {
        String sql = "SELECT MAX(collected_date) FROM collection_log WHERE player_name = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, playerName.toLowerCase());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getTimestamp(1);
            }
        } catch (SQLException e) {
            log.warn("Error fetching latest timestamp: " + e.getMessage());
        }
        return null;
    }


    public static void clearAll() {
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("DELETE FROM collection_log");
        } catch (SQLException e) {
            log.warn("Error clearing all items: " + e.getMessage());
        }
    }

    public static List<CollectionItem> getItemsByCategory(String playerName, String category) {
        List<CollectionItem> items = new ArrayList<>();

        try (Connection conn = getConnection();
             PreparedStatement ps = conn.prepareStatement(
                     "SELECT item_id, item_name, item_count, collected_date FROM collection_log WHERE category = ? AND player_name = ?")) {
            ps.setString(1, category);
            ps.setString(2, playerName.toLowerCase());
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    int itemId = rs.getInt("item_id");
                    String name = rs.getString("item_name");
                    int count = rs.getInt("item_count");
                    Timestamp date = rs.getTimestamp("collected_date");

                    items.add(new CollectionItem(category, itemId, name, count, date));
                }
            }
        } catch (SQLException e) {
            log.warn("Error fetching items by category: " + e.getMessage());
        }

        return items;
    }

    public static void pruneOldPlayers(String yourUsername, int maxPlayers) {
        try (Connection conn = getConnection();
             PreparedStatement ps1 = conn.prepareStatement(
                     "SELECT player_name, MIN(last_accessed) as oldest " +
                             "FROM collection_log " +
                             "WHERE player_name != ? " +
                             "GROUP BY player_name " +
                             "ORDER BY oldest ASC"
             );
             PreparedStatement deleteStmt = conn.prepareStatement(
                     "DELETE FROM collection_log WHERE player_name = ?"
             )
        ) {
            ps1.setString(1, yourUsername);
            ResultSet rs = ps1.executeQuery();

            int count = 0;
            List<String> playersToRemove = new ArrayList<>();

            while (rs.next()) {
                count++;
                if (count > maxPlayers) {
                    playersToRemove.add(rs.getString("player_name"));
                }
            }

            for (String name : playersToRemove) {
                log.debug("üßπ Pruning cached player: " + name);
                deleteStmt.setString(1, name);
                deleteStmt.executeUpdate();
            }
        } catch (SQLException e) {
            log.warn("Error pruning old players: " + e.getMessage());
        }
    }
}

package com.voltmaister.utils;

public class PlayerNameUtils {

    // Normalize player name by removing Ironman prefixes and formatting
    public static String normalizePlayerName(String playerName) {
        String normalizedName = playerName.trim();

        // Remove known Ironman prefixes
        String[] ironmanPrefixes = {"Ultimate Ironman", "Hardcore Ironman", "Ironman"};
        for (String prefix : ironmanPrefixes) {
            if (normalizedName.startsWith(prefix)) {
                normalizedName = normalizedName.replaceFirst(prefix, "").trim();
                break; // No need to check other prefixes once one is removed
            }
        }

        // Remove any <img=xxx> tags from the player name
        normalizedName = normalizedName.replaceAll("<img=\\d+>", "").trim();

        // Replace spaces with underscores
        normalizedName = normalizedName.replace(' ', '_');

        return normalizedName.toLowerCase();
    }
}

package com.voltmaister.utils;

import java.util.Map;

public class CategoryAliases {
    public static final Map<String, String> CATEGORY_ALIASES = Map.ofEntries(
            Map.entry("artio", "callisto_and_artio"),
            Map.entry("callisto", "callisto_and_artio"),
            Map.entry("spindel", "venenatis_and_spindel"),
            Map.entry("venenatis", "venenatis_and_spindel"),
            Map.entry("vetion", "vetion_and_calvarion"),
            Map.entry("calvarion", "vetion_and_calvarion"),
            Map.entry("sire", "abyssal_sire"),
            Map.entry("hydra", "alchemical_hydra"),
            Map.entry("zilyana", "commander_zilyana"),
            Map.entry("graardor", "general_graardor"),
            Map.entry("kril", "kril_tsutsaroth"),
            Map.entry("tsutsaroth", "kril_tsutsaroth"),
            Map.entry("arma", "kree_arra"),
            Map.entry("kree", "kree_arra"),
            Map.entry("muspah", "phantom_muspah"),
            Map.entry("toa", "tombs_of_amascut"),
            Map.entry("tob", "theatre_of_blood"),
            Map.entry("cox", "chambers_of_xeric"),
            Map.entry("gauntlet", "the_gauntlet"),
            Map.entry("fightcaves", "the_fight_caves"),
            Map.entry("inferno", "the_inferno"),
            Map.entry("whisperer", "the_whisperer"),
            Map.entry("medium clue", "medium_treasure_trails" ),
            Map.entry("easy clue","easy_treasure_trails"),
            Map.entry("hard clue", "hard_treasure_trails"),
            Map.entry("elite clue", "elite_treasure_trails"),
            Map.entry("master clue", "master_treasure_trails")
    );
}

package com.voltmaister.utils;

import net.runelite.client.util.ImageUtil;

import java.awt.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.awt.image.BufferedImage;

public class LoadIcon {
    private static final Logger log = LoggerFactory.getLogger(LoadIcon.class);

    public static BufferedImage loadIcon() { // made static and public
        try {
            return ImageUtil.loadImageResource(LoadIcon.class, "/Collection_log.png");
        } catch (Exception e) {
            log.warn("Using fallback icon", e);
            BufferedImage fallback = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = fallback.createGraphics();
            g.setColor(Color.RED);
            g.fillRect(0, 0, 16, 16);
            g.dispose();
            return fallback;
        }
    }
}

package com.voltmaister.utils;

public class HelpMessageUtils {

    public static String getHelpMessage() {
        return
                "üìú Available Chat Commands:\n\n" +
                        "!col boss\n" +
                        "‚Üí Shows your collection for that boss (e.g. !col vorkath)\n\n" +
                        "!col boss other_player\n" +
                        "‚Üí Shows another player's collection (e.g. !col zulrah <player name>)\n\n" +
                        "‚úÖ Supported aliases:\n" +
                        "- toa ‚Üí tombs_of_amascut\n" +
                        "- tob ‚Üí theatre_of_blood\n" +
                        "- cox ‚Üí chambers_of_xeric\n" +
                        "- hydra ‚Üí alchemical_hydra\n" +
                        "- sire ‚Üí abyssal_sire\n" +
                        "- arma ‚Üí kree_arra\n" +
                        "- kril ‚Üí kril_tsutsaroth\n" +
                        "- zilyana ‚Üí commander_zilyana\n" +
                        "...and more!";
    }
}

package com.voltmaister.api;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonReader;
import com.google.gson.Gson;
import lombok.Getter;
import lombok.Setter;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.StringReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TempleApiClient {

    private static final Logger log = LoggerFactory.getLogger(TempleApiClient.class);
    private static final String BASE_URL = "https://templeosrs.com/api/collection-log/player_collection_log.php";

    @Getter @Setter
    private static Gson gson;

    @Setter
    private static OkHttpClient httpClient;

    public static String fetchLog(String username) {
        return fetchLog(username, true);
    }

    public static String fetchLogForChat(String username) {
        return fetchLog(username, false);
    }

    private static String fetchLog(String username, boolean includeNames) {
        String urlString = BASE_URL + "?player=" + username + "&categories=all" +
                (includeNames ? "&includenames=1" : "");

        try {
            Request request = new Request.Builder()
                    .url(urlString)
                    .header("User-Agent", "CollectionTrackerPlugin/1.0 RuneLite")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.warn("HTTP error fetching collection log for " + username + ": " + response.code());
                    return null;
                }

                String body = response.body().string();

                if (body.contains("\"Code\":402") && body.contains("has not synced")) {
                    return "error:unsynced";
                }

                return body;
            }
        } catch (Exception e) {
            log.error("‚ùå Exception while fetching log for " + username + ": " + e.getMessage());
            return null;
        }
    }

    public static String getLastChanged(String username) {
        String urlString = "https://templeosrs.com/api/player_info.php?player=" + username + "&cloginfo=1";

        try {
            Request request = new Request.Builder()
                    .url(urlString)
                    .header("User-Agent", "CollectionTrackerPlugin/1.0 RuneLite")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.warn("HTTP error fetching last_changed for " + username + ": " + response.code());
                    return null;
                }

                String body = response.body().string();

                if (body == null || body.isEmpty()) {
                    log.warn("Empty response body when fetching last_changed for: " + username);
                    return null;
                }

                JsonReader reader = new JsonReader(new StringReader(body));
                reader.setLenient(true);

                JsonElement element = gson.fromJson(reader, JsonElement.class);

                if (element.isJsonObject()) {
                    JsonObject root = element.getAsJsonObject();

                    if (root.has("data")) {
                        JsonObject data = root.getAsJsonObject("data");

                        if (data.has("collection_log")) {
                            JsonObject collectionLog = data.getAsJsonObject("collection_log");

                            if (collectionLog.has("last_changed")) {
                                return collectionLog.get("last_changed").getAsString();
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error("‚ùå Failed to get last_changed for " + username + ": " + e.getMessage());
        }
        return null;
    }
}

package com.voltmaister.data;

import java.util.List;
import java.util.Map;

public class CollectionResponse {
    public Map<String, List<ItemEntry>> items;

    public static class ItemEntry {
        public int id;
        public int count;
        public String date;
        public String name;
    }
}
package com.voltmaister.data;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.sql.Timestamp;

@Data
@AllArgsConstructor
public class CollectionItem {
    private String category;
    private int itemId;
    private String name;
    private int count;
    private Timestamp date;
}

package com.voltmaister.parser;

import com.google.gson.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;

import com.voltmaister.data.CollectionResponse;
import com.voltmaister.db.CollectionDatabase;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CollectionParser {

    private static final Logger log = LoggerFactory.getLogger(CollectionParser.class);

    private final Gson gson;

    public CollectionParser(Gson gson) {
        this.gson = gson;
    }

    public void parseAndStore(String username, String json) {
        username = username.toLowerCase();
        log.debug("üßπ Starting parseAndStore() for user: {}...", username);

        JsonElement root;

        // Log the raw JSON for debugging purposes
        log.debug("Raw JSON: {}", json);

        try {
            // Directly parse the JSON string using Gson
            root = gson.fromJson(json, JsonElement.class);

            // Check if the root element is a primitive (string, number, etc.)
            if (root.isJsonPrimitive()) {
                log.error("‚ùå The response for user {} is a primitive value: {}", username, root.getAsString());
                return;
            }

            // Check if the root element is a JsonObject
            if (root.isJsonObject()) {
                log.debug("The root is a valid JsonObject.");
            }

        } catch (JsonSyntaxException e) {
            log.error("‚ùå Failed to parse JSON for {}: {}", username, e.getMessage());
            return;
        } catch (Exception e) {
            log.error("‚ùå Unexpected error while parsing JSON for {}: {}", username, e.getMessage());
            return;
        }

        JsonObject rootObject = root.getAsJsonObject();

        // Handle error response
        if (rootObject.has("error")) {
            JsonObject error = rootObject.getAsJsonObject("error");
            String errorMessage = error.get("Message").getAsString();
            if (errorMessage.contains("Player has not synced")) {
                log.warn("‚ö†Ô∏è Player {} has not synced their collection log yet.", username);
            } else {
                log.warn("‚ö†Ô∏è API error for {}: {}", username, errorMessage);
            }
            return; // Stop further processing for this player
        }

        // Handle success response
        if (rootObject.has("data")) {
            JsonObject data = rootObject.getAsJsonObject("data");
            JsonObject items = data.getAsJsonObject("items");

            int categoryCount = 0;
            int itemCount = 0;

            for (Map.Entry<String, JsonElement> category : items.entrySet()) {
                String categoryName = category.getKey();
                JsonArray itemArray = category.getValue().getAsJsonArray();

                log.debug("üì¶ Parsing category: {} ({} items)", categoryName, itemArray.size());
                categoryCount++;

                List<CollectionResponse.ItemEntry> entryList = new ArrayList<>();

                for (JsonElement e : itemArray) {
                    CollectionResponse.ItemEntry item = gson.fromJson(e, CollectionResponse.ItemEntry.class);
                    log.debug("‚û°Ô∏è Queuing: [{}] {} x{} @ {}", categoryName, item.name, item.count, item.date);
                    entryList.add(item);
                    itemCount++;
                }

                // ‚úÖ Perform batch insert for the whole category with player name
                CollectionDatabase.insertItemsBatch(username.toLowerCase(), categoryName, entryList);
            }

            log.debug("‚úÖ Parsed {} categories and inserted {} items total for {}.", categoryCount, itemCount, username);

            // ‚úÖ Manually shut down the database after insert
            try (Connection conn = CollectionDatabase.getConnection();
                 Statement stmt = conn.createStatement()) {
                stmt.execute("SHUTDOWN");
                log.debug("üöó Manually closed H2 database after sync.");
            } catch (SQLException e) {
                log.error("‚ö†Ô∏è Error while trying to shut down the database", e);
            }
        }
    }
}

package com.voltmaister.config;

import net.runelite.client.config.*;

@ConfigGroup("collectiontracker")
public interface CollectionTrackerConfig extends Config
{
    @Range(min = 50, max = 200)
    @ConfigItem(
            keyName = "maxCachedPlayers",
            name = "Max Cached Players",
            description = "Maximum number of players to keep in the database (excluding yourself)." +
                    " The more players the more MB kept on database. " +
                    "Default number of players in database is 50"
    )
    default int maxCachedPlayers() { return 50; }
}

package com.voltmaister;

// Standard Java imports
import java.awt.*;
import java.awt.image.BufferedImage;
import java.sql.Timestamp;
import java.util.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

// Java Swing imports
import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

// External library imports
import com.google.gson.Gson;
import com.google.inject.Provides;
import com.voltmaister.config.CollectionTrackerConfig;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// RuneLite API imports
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.ChatMessageType;
import net.runelite.client.game.ItemManager;
import net.runelite.api.IndexedSprite;
import net.runelite.client.util.AsyncBufferedImage;
import okhttp3.OkHttpClient;


// Project-specific imports
import com.voltmaister.api.TempleApiClient;
import com.voltmaister.data.CollectionItem;
import com.voltmaister.db.CollectionDatabase;
import com.voltmaister.parser.CollectionParser;
import com.voltmaister.utils.LoadIcon;
import com.voltmaister.utils.CategoryAliases;
import com.voltmaister.utils.PlayerNameUtils;
import com.voltmaister.utils.HelpMessageUtils;
import com.voltmaister.services.CollectionLogSyncService;



@PluginDescriptor(
		name = "Collection Tracker",
		description = "Tracks your collection log progress",
		tags = {"collection", "log", "tracker"}
)

public class CollectionTrackerPlugin extends Plugin
{
	private static final Logger log = LoggerFactory.getLogger(CollectionTrackerPlugin.class);

	@Inject private ItemManager itemManager;
	@Inject private ChatMessageManager chatMessageManager;
	@Inject private ClientToolbar clientToolbar;
	@Inject private Client client;
	@Inject private CollectionTrackerConfig config;
	@Inject private Gson gson;
	@Inject private OkHttpClient okHttpClient;

	private NavigationButton navButton;
	private PluginPanel panel;

	private final Map<Integer, Integer> itemIconIndexes = new HashMap<>();

	private int itemIconStartIndex = -1;

	private final JTextArea outputArea = new JTextArea();

	private int count;

	private final BufferedImage icon = LoadIcon.loadIcon();
	private final Set<Integer> loadedItemIds = new HashSet<>();

	private ExecutorService executor;



	@Override
	protected void startUp() throws Exception {

		TempleApiClient.setGson(gson);
		TempleApiClient.setHttpClient(okHttpClient);

		log.debug("Collection Tracker started!");

		CollectionDatabase.init();

		if (executor == null || executor.isShutdown()) {
			executor = Executors.newSingleThreadExecutor();
		}

		panel = new PluginPanel() {
		};
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		panel.setBorder(new EmptyBorder(15, 15, 15, 15));
		panel.setBackground(new Color(43, 39, 35));

		// Title
		JLabel titleLabel = new JLabel("Collection Tracker", JLabel.CENTER);
		titleLabel.setForeground(Color.WHITE);
		titleLabel.setAlignmentX(JLabel.CENTER_ALIGNMENT);
		titleLabel.setFont(titleLabel.getFont().deriveFont(18f));
		panel.add(titleLabel);
		panel.add(Box.createVerticalStrut(10));

		// Button section
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
		buttonPanel.setBackground(new Color(43, 39, 35));
		buttonPanel.setAlignmentX(JPanel.CENTER_ALIGNMENT);

		JButton printButton = new JButton("üìÑ Print Collections");
		printButton.setAlignmentX(JButton.CENTER_ALIGNMENT);
		printButton.setMaximumSize(new Dimension(200, 30));
		printButton.setMargin(new Insets(5, 10, 5, 10));
		printButton.setFocusable(false);
		printButton.addActionListener(e -> printAllCollections());
		buttonPanel.add(printButton);
		buttonPanel.add(Box.createVerticalStrut(8));

		JButton syncButton = new JButton("üîÑ Sync Collection Log");
		syncButton.setAlignmentX(JButton.CENTER_ALIGNMENT);
		syncButton.setMaximumSize(new Dimension(200, 30));
		syncButton.setMargin(new Insets(5, 10, 5, 10));
		syncButton.setFocusable(false);
		syncButton.addActionListener(e -> CollectionLogSyncService.syncCollectionLog(client, this::panelLog));
		buttonPanel.add(syncButton);
		buttonPanel.add(Box.createVerticalStrut(8));

		JButton helpButton = new JButton("‚ùî Show Commands");
		helpButton.setAlignmentX(JButton.CENTER_ALIGNMENT);
		helpButton.setMaximumSize(new Dimension(200, 30));
		helpButton.setMargin(new Insets(5, 10, 5, 10));
		helpButton.setFocusable(false);
		helpButton.addActionListener(e -> panelLog(HelpMessageUtils.getHelpMessage()));
		buttonPanel.add(helpButton);


		buttonPanel.add(Box.createVerticalStrut(5)); // extra spacing if needed


		panel.add(buttonPanel);
		panel.add(Box.createVerticalStrut(15));

		// Output area
		outputArea.setEditable(false);
		outputArea.setLineWrap(true);
		outputArea.setWrapStyleWord(true);
		outputArea.setBackground(new Color(30, 30, 30));
		outputArea.setForeground(Color.WHITE);
		outputArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
		outputArea.setBorder(new EmptyBorder(10, 10, 10, 10));

		JScrollPane scrollPane = new JScrollPane(outputArea);
		scrollPane.setPreferredSize(new Dimension(0, 200));
		scrollPane.setMaximumSize(new Dimension(Integer.MAX_VALUE, 300));
		scrollPane.setBorder(BorderFactory.createEmptyBorder());
		scrollPane.getVerticalScrollBar().setUnitIncrement(16);

		panel.add(scrollPane);

		// Navigation button
		navButton = NavigationButton.builder()
				.tooltip("Collection Tracker")
				.icon(icon)
				.priority(5)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);
	}


	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);

		// üßº Clear cached icons and IDs to prevent memory buildup
		itemIconIndexes.clear();
		loadedItemIds.clear();

		if (executor != null && !executor.isShutdown()) {
			executor.shutdownNow();
		}

		log.debug("Collection Tracker stopped!");
	}

	private void panelLog(String message) {
		outputArea.setText(message);
	}

	private void loadItemIcons(List<CollectionItem> items) {
		List<CollectionItem> newItems = new ArrayList<>();

		for (CollectionItem item : items) {
			if (!loadedItemIds.contains(item.getItemId())) {
				newItems.add(item);
				loadedItemIds.add(item.getItemId());
			}
		}

		if (newItems.isEmpty()) return;

		IndexedSprite[] modIcons = client.getModIcons();
		if (modIcons == null) return;

		int currentLength = modIcons.length;
		int newSize = currentLength + newItems.size();
		IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, newSize);
		client.setModIcons(newModIcons);

		for (int i = 0; i < newItems.size(); i++) {
			CollectionItem item = newItems.get(i);
			int modIconIndex = currentLength + i;
			itemIconIndexes.put(item.getItemId(), modIconIndex);

			AsyncBufferedImage img = itemManager.getImage(item.getItemId());
			int finalIndex = modIconIndex;

			img.onLoaded(() -> {
				BufferedImage scaled = ImageUtil.resizeImage((BufferedImage) img, 18, 16);
				IndexedSprite sprite = ImageUtil.getImageIndexedSprite(scaled, client);
				client.getModIcons()[finalIndex] = sprite;
			});
		}
	}


	private void printAllCollections()
	{
		executor.execute(() -> {
			String playerName = client.getLocalPlayer() != null
					? PlayerNameUtils.normalizePlayerName(Objects.requireNonNull(client.getLocalPlayer().getName()))
					: "";
			List<CollectionItem> items = CollectionDatabase.getAllItems(playerName);


			if (items.isEmpty()) {
				SwingUtilities.invokeLater(() ->
						panelLog("No collection items found in database.")
				);
				return;
			}

			StringBuilder sb = new StringBuilder("üìò Collection Log Items:\n\n");
			for (CollectionItem item : items) {
				sb.append(String.format("- %s x%d\n", item.getName(), item.getCount()));
			}

			String finalText = sb.toString();
			SwingUtilities.invokeLater(() ->
					panelLog(finalText)
			);
		});
	}

	public static boolean isDataOutdated(String username, String lastChangedFromApi) {
		if (lastChangedFromApi == null) return true;

		Timestamp dbTimestamp = CollectionDatabase.getLatestTimestamp(username);
		Timestamp apiTimestamp = Timestamp.valueOf(lastChangedFromApi);

		return dbTimestamp == null || dbTimestamp.before(apiTimestamp);
	}



//	private void printCollectionForCategory(String category)
//	{
//		executor.execute(() -> {
//			String playerName = client.getLocalPlayer().getName(); // ‚úÖ declare properly
//			List<CollectionItem> items = CollectionDatabase.getItemsByCategory(playerName.toLowerCase(), category); // ‚úÖ pass it
//
//			if (items.isEmpty()) {
//				SwingUtilities.invokeLater(() ->
//						panelLog("üìÅ No items found in collection log for: " + category)
//				);
//				return;
//			}
//
//			StringBuilder sb = new StringBuilder("üìò " + category.replace('_', ' ') + ":\n\n");
//			for (CollectionItem item : items) {
//				sb.append(String.format("- %s x%d\n", item.getName(), item.getCount()));
//			}
//
//			String finalText = sb.toString();
//			SwingUtilities.invokeLater(() ->
//					panelLog(finalText)
//			);
//		});
//	}



	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			panelLog("üü¢ Collection Tracker loaded. Use buttons above to sync or print.");
		}
	}


	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		final ChatMessageType type = event.getType();
		final String rawMessage = event.getMessage().trim();

		// Only react to public, private, or clan chat
		if (type != ChatMessageType.PUBLICCHAT &&
				type != ChatMessageType.FRIENDSCHAT &&
				type != ChatMessageType.PRIVATECHAT &&
				type != ChatMessageType.CLAN_CHAT)
		{
			return;
		}

		// Command must start with "!col "
		if (!rawMessage.toLowerCase().startsWith("!col "))
		{
			return;
		}

		String[] parts = rawMessage.substring(5).trim().split(" ", 2);
		if (parts.length == 0)
			return;

		// Normalize boss name
		String bossInput = parts[0].trim().replace(' ', '_');
		String bossKey = CategoryAliases.CATEGORY_ALIASES.getOrDefault(bossInput.toLowerCase(), bossInput.toLowerCase());

		// Determine target player (specified or sender)
		String playerName = (parts.length == 2) ? parts[1].trim() : event.getName();
		String normalizedPlayerName = PlayerNameUtils.normalizePlayerName(playerName);  // Normalize the player name for the API call
		String localName = client.getLocalPlayer() != null ? client.getLocalPlayer().getName() : "";
		boolean isLocalPlayer = normalizedPlayerName.equalsIgnoreCase(localName);

		executor.execute(() ->
		{
			String lastChanged = TempleApiClient.getLastChanged(normalizedPlayerName);
			Timestamp dbTimestamp = CollectionDatabase.getLatestTimestamp(normalizedPlayerName);
			Timestamp apiTimestamp = lastChanged != null ? Timestamp.valueOf(lastChanged) : null;

			log.debug("üïí [Compare] {} | DB: {} | API: {}", normalizedPlayerName, dbTimestamp, apiTimestamp);

			boolean hasLocalData = CollectionDatabase.hasPlayerData(normalizedPlayerName);
			boolean shouldUpdate = !hasLocalData || (apiTimestamp != null && (dbTimestamp == null || dbTimestamp.before(apiTimestamp)));


			if (shouldUpdate)
			{
				log.debug("üì≠ No local data for '{}', fetching from API...", normalizedPlayerName);
				String json = TempleApiClient.fetchLogForChat(normalizedPlayerName);

				// Handle empty or failed fetch
				if (json == null || json.isEmpty())
				{
					log.warn("‚ùå No data fetched for user: {}", normalizedPlayerName);

					String errorMessage = "‚ö†Ô∏è Failed to fetch log for " + playerName + ".";  // Use original name here
					if (json != null && json.contains("Player has not synced"))
					{
						errorMessage = "‚ö†Ô∏è " + playerName + " has not synced their log on TempleOSRS.";  // Use original name here
					}

					final String finalMessage = errorMessage;
					chatMessageManager.queue(
							QueuedMessage.builder()
									.type(ChatMessageType.GAMEMESSAGE)
									.runeLiteFormattedMessage("<col=ff6666>" + finalMessage + "</col>")
									.build()
					);
					return;
				}

				if (!isLocalPlayer)
				{
					CollectionDatabase.pruneOldPlayers(localName, config.maxCachedPlayers());
				}

				CollectionParser parser = new CollectionParser(TempleApiClient.getGson());
				parser.parseAndStore(PlayerNameUtils.normalizePlayerName(playerName), json);
			}
			else
			{
				log.debug("‚úîÔ∏è Found cached data for '{}'", normalizedPlayerName);
			}

			// Fetch the requested category
			List<CollectionItem> items = CollectionDatabase.getItemsByCategory(normalizedPlayerName, bossKey);
			loadItemIcons(items);

			StringBuilder sb = new StringBuilder();

			// If sender's name is same as the player being queried, omit the player's name
			if (!event.getName().equalsIgnoreCase(playerName)) {
				sb.append("<col=ffffaa>")
						.append(playerName)  // Append the original player name here
						.append("'s ");
			}

			sb.append(toTitleCase(bossKey.replace('_', ' ')))
					.append("</col>");

			if (items.isEmpty())
			{
				sb.append(" No data found.");
			}
			else
			{
				Map<Integer, CollectionItem> merged = new HashMap<>();
				for (CollectionItem item : items)
				{
					merged.compute(item.getItemId(), (id, existing) ->
					{
						if (existing == null) return item;
						existing.setCount(existing.getCount() + item.getCount());
						return existing;
					});
				}

				int i = 0;
				for (CollectionItem item : merged.values())
				{
					Integer icon = itemIconIndexes.get(item.getItemId());
					if (icon != null)
					{
						sb.append("<img=").append(icon).append("> ");
					}
					sb.append("x").append(item.getCount());
					if (i++ < merged.size() - 1) sb.append(", ");
				}
			}

			SwingUtilities.invokeLater(() -> {
				event.getMessageNode().setRuneLiteFormatMessage(sb.toString());
				client.refreshChat();
			});
		});
	}



	private String toTitleCase(String input) {
		if (input == null || input.isEmpty()) return input;

		String[] words = input.toLowerCase().split(" ");
		StringBuilder titleCase = new StringBuilder();

		for (String word : words) {
			if (word.length() > 0) {
				titleCase.append(Character.toUpperCase(word.charAt(0)))
						.append(word.substring(1))
						.append(" ");
			}
		}

		return titleCase.toString().trim();
	}


	@Provides
	public CollectionTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CollectionTrackerConfig.class);
	}

}
package com.voltmaister.services;

import com.voltmaister.api.TempleApiClient;
import com.voltmaister.parser.CollectionParser;
import com.voltmaister.utils.PlayerNameUtils;
import com.voltmaister.db.CollectionDatabase;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;

import javax.swing.*;
import java.util.concurrent.Executors;
import java.util.function.Consumer;

@Slf4j
public class CollectionLogSyncService {

    public static void syncCollectionLog(Client client, Consumer<String> panelLogger) {
        Executors.newSingleThreadExecutor().execute(() -> {
            log.debug("üîÑ Starting syncCollectionLog()...");

            CollectionDatabase.clearAll();

            if (client.getLocalPlayer() == null) {
                log.warn("‚ö†Ô∏è Local player is null ‚Äî not logged in yet.");
                SwingUtilities.invokeLater(() ->
                        panelLogger.accept("‚ö†Ô∏è Cannot sync ‚Äî you're not logged in yet.")
                );
                return;
            }

            String username = client.getLocalPlayer().getName().toLowerCase();
            log.debug("üë§ Detected username: {}", username);

            SwingUtilities.invokeLater(() ->
                    panelLogger.accept("üì° Fetching collection log for " + username + "...")
            );

            String json = TempleApiClient.fetchLog(username);
            log.debug("üì• Fetched JSON: {} characters", json != null ? json.length() : 0);

            if (json == null || json.isEmpty()) {
                log.error("‚ùå Empty or null response from Temple API");
                SwingUtilities.invokeLater(() ->
                        panelLogger.accept("‚ùå Failed to fetch collection log for " + username)
                );
                return;
            }

            log.debug("üß© Parsing and storing JSON...");
            CollectionParser parser = new CollectionParser(TempleApiClient.getGson());

            parser.parseAndStore(PlayerNameUtils.normalizePlayerName(username), json);
            log.debug("‚úÖ Parsing complete.");

            SwingUtilities.invokeLater(() ->
                    panelLogger.accept("‚úÖ Successfully synced collection log for " + username)
            );
        });
    }
}

package com.voltmaister;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CollectionTrackerLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CollectionTrackerPlugin.class);
		RuneLite.main(args);
	}
}
