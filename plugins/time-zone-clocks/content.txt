package com.tzclocks;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TZClocksPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TZClocksPlugin.class);
		RuneLite.main(args);
	}
}
package com.tzclocks.tzdata;

import com.tzclocks.TZClocksPlugin;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;
import java.lang.reflect.Type;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class TZClocksDataManager {
    private static final String CONFIG_KEY_TIMEZONES = "timezonekey";
    private static final String CONFIG_GROUP = "timezonesgroup";
    private static final String LOAD_TIMEZONE_ERROR = "Exception occurred while loading timezones";
    private static final String EMPTY_ARRAY = "[]";
    private final TZClocksPlugin plugin;
    private final Client client;
    private final ConfigManager configManager;
    private final Gson gson;

    private List<String> timezoneIds = new ArrayList<>();
    private final Type timezoneIdsType = new TypeToken<ArrayList<String>>() {}.getType(); //not sure what this does either
    private final Type itemsType = new TypeToken<ArrayList<String>>() {}.getType(); //takes saved data from data manager for conversion
    @Inject
    public TZClocksDataManager(TZClocksPlugin plugin, Client client, ConfigManager configManager, Gson gson) { //saves time zones between client sessions
        this.plugin = plugin;
        this.client = client;
        this.configManager = configManager;
        this.gson = gson;
    }


// was used when adding time zone but did not always save to data manager; leaving here just in case
//    public void saveTimezoneToConfig(String timezoneId) {
//        if (!timezoneIds.contains(timezoneId)) {
//            timezoneIds.add(timezoneId);
//            saveData();
//        }
//    }

    public boolean loadData() { //loads data after starting client. works
        if (client.getGameState().getState() < GameState.LOGIN_SCREEN.getState()) {
            return false;
        }

        timezoneIds.clear();

        String timezonesJson = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_TIMEZONES);
        if (timezonesJson == null || timezonesJson.equals(EMPTY_ARRAY)) {
            plugin.setTimezones(new ArrayList<>());
        } else {
            try {
                timezoneIds = gson.fromJson(timezonesJson, itemsType);
                convertItems();
            } catch (Exception e) {
                log.error(LOAD_TIMEZONE_ERROR, e);
                plugin.setTimezones(new ArrayList<>());
            }
        }


        plugin.updateTimezoneData();
        return true;
    }

    public void saveData() { //saves data to config
        timezoneIds.clear();

        for (TZClocksItem item : plugin.getTimezones()) {
            timezoneIds.add(item.getName());
        }

        final String timezonesJson = gson.toJson(timezoneIds);
        configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_TIMEZONES, timezonesJson);

    }

    private void convertItems() { //converts time zones for loading
        List<TZClocksItem> watchItems = new ArrayList<>();

        for (String timezoneId : timezoneIds) {
            watchItems.add(convertIdToItem(timezoneId));
        }

        plugin.setTimezones(watchItems);
    }

    private TZClocksItem convertIdToItem(String timezoneId) { //also converts time zones for loading
        ZoneId zoneId = ZoneId.of(timezoneId);
        ZonedDateTime now = ZonedDateTime.now(zoneId);
        DateTimeFormatter formatter = plugin.getFormatter();
        String currentTime = now.format(formatter);
        return new TZClocksItem(timezoneId, currentTime);
    }
}
package com.tzclocks.tzdata;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum TZFormatEnum { //time zone formats
    TWELVE_HOUR("12-Hour"),
    TWENTY_FOUR_HOUR("24-Hour");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}


package com.tzclocks.tzdata;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
public class TZClocksItem {
    @Getter private String name; // Timezone ID
    @Getter @Setter private String currentTime; // Current time in the timezone
}
package com.tzclocks.tzutilities;

public final class TZConstants {
    private TZConstants()
    {
        // restrict instantiation
        // ^idk why this is here but market watcher had it so it must be important to include
    }


    public static final String PANEL_ICON_PATH = "/tzpanelicon.png"; //icon for panel
    public static final String DELETE_ICON_PATH = "/tzdeleteicon.png"; //icon for delete



}

package com.tzclocks.tzutilities;

import java.time.ZoneId;
import java.util.List;
import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum TZRegionEnum { //List of regions and their zoneIDs. Filtered down to only show unique UTC sections
    ALL("All Regions"),
    AFRICA("Africa",
            ZoneId.of("Africa/Abidjan"), ZoneId.of("Africa/Accra"), ZoneId.of("Africa/Algiers"),
            ZoneId.of("Africa/Bissau"), ZoneId.of("Africa/Cairo"), ZoneId.of("Africa/Casablanca"),
            ZoneId.of("Africa/El_Aaiun"), ZoneId.of("Africa/Johannesburg"), ZoneId.of("Africa/Juba"),
            ZoneId.of("Africa/Khartoum"), ZoneId.of("Africa/Lagos"), ZoneId.of("Africa/Maputo"),
            ZoneId.of("Africa/Monrovia"), ZoneId.of("Africa/Nairobi"), ZoneId.of("Africa/Ndjamena"),
            ZoneId.of("Africa/Sao_Tome"), ZoneId.of("Africa/Tripoli"), ZoneId.of("Africa/Tunis"),
            ZoneId.of("Africa/Windhoek")),
    AMERICA("America",
            ZoneId.of("America/Adak"), ZoneId.of("America/Anchorage"), ZoneId.of("America/Araguaina"),
            ZoneId.of("America/Argentina/Buenos_Aires"), ZoneId.of("America/Bogota"), ZoneId.of("America/Caracas"),
            ZoneId.of("America/Chicago"), ZoneId.of("America/Denver"), ZoneId.of("America/Godthab"),
            ZoneId.of("America/Los_Angeles"), ZoneId.of("America/Mexico_City"), ZoneId.of("America/New_York"),
            ZoneId.of("America/Noronha"), ZoneId.of("America/Phoenix"), ZoneId.of("America/Santiago"),
            ZoneId.of("America/Sao_Paulo"), ZoneId.of("America/St_Johns"), ZoneId.of("America/Tijuana")),

    ANTARCTICA("Antarctica",
            ZoneId.of("Antarctica/Casey"), ZoneId.of("Antarctica/Davis"), ZoneId.of("Antarctica/DumontDUrville"),
            ZoneId.of("Antarctica/Macquarie"), ZoneId.of("Antarctica/Mawson"), ZoneId.of("Antarctica/McMurdo"),
            ZoneId.of("Antarctica/Palmer"), ZoneId.of("Antarctica/Rothera"), ZoneId.of("Antarctica/Syowa"),
            ZoneId.of("Antarctica/Troll"), ZoneId.of("Antarctica/Vostok")),
    ASIA("Asia",
            ZoneId.of("Asia/Aden"), ZoneId.of("Asia/Almaty"), ZoneId.of("Asia/Amman"), ZoneId.of("Asia/Anadyr"),
            ZoneId.of("Asia/Aqtau"), ZoneId.of("Asia/Aqtobe"), ZoneId.of("Asia/Ashgabat"), ZoneId.of("Asia/Atyrau"),
            ZoneId.of("Asia/Baghdad"), ZoneId.of("Asia/Bahrain"), ZoneId.of("Asia/Baku"), ZoneId.of("Asia/Bangkok"),
            ZoneId.of("Asia/Barnaul"), ZoneId.of("Asia/Beirut"), ZoneId.of("Asia/Bishkek"), ZoneId.of("Asia/Brunei"),
            ZoneId.of("Asia/Chita"), ZoneId.of("Asia/Choibalsan"), ZoneId.of("Asia/Colombo"), ZoneId.of("Asia/Damascus"),
            ZoneId.of("Asia/Dhaka"), ZoneId.of("Asia/Dili"), ZoneId.of("Asia/Dubai"), ZoneId.of("Asia/Dushanbe"),
            ZoneId.of("Asia/Famagusta"), ZoneId.of("Asia/Gaza"), ZoneId.of("Asia/Hebron"), ZoneId.of("Asia/Ho_Chi_Minh"),
            ZoneId.of("Asia/Hong_Kong"), ZoneId.of("Asia/Hovd"), ZoneId.of("Asia/Irkutsk"), ZoneId.of("Asia/Jakarta"),
            ZoneId.of("Asia/Jayapura"), ZoneId.of("Asia/Jerusalem"), ZoneId.of("Asia/Kabul"), ZoneId.of("Asia/Kamchatka"),
            ZoneId.of("Asia/Karachi"), ZoneId.of("Asia/Kathmandu"), ZoneId.of("Asia/Khandyga"), ZoneId.of("Asia/Kolkata"),
            ZoneId.of("Asia/Krasnoyarsk"), ZoneId.of("Asia/Kuala_Lumpur"), ZoneId.of("Asia/Kuching"), ZoneId.of("Asia/Kuwait"),
            ZoneId.of("Asia/Macau"), ZoneId.of("Asia/Magadan"), ZoneId.of("Asia/Makassar"), ZoneId.of("Asia/Manila"),
            ZoneId.of("Asia/Muscat"), ZoneId.of("Asia/Nicosia"), ZoneId.of("Asia/Novokuznetsk"), ZoneId.of("Asia/Novosibirsk"),
            ZoneId.of("Asia/Omsk"), ZoneId.of("Asia/Oral"), ZoneId.of("Asia/Pontianak"), ZoneId.of("Asia/Pyongyang"),
            ZoneId.of("Asia/Qatar"), ZoneId.of("Asia/Qostanay"), ZoneId.of("Asia/Qyzylorda"), ZoneId.of("Asia/Riyadh"),
            ZoneId.of("Asia/Sakhalin"), ZoneId.of("Asia/Samarkand"), ZoneId.of("Asia/Seoul"), ZoneId.of("Asia/Shanghai"),
            ZoneId.of("Asia/Singapore"), ZoneId.of("Asia/Srednekolymsk"), ZoneId.of("Asia/Taipei"), ZoneId.of("Asia/Tashkent"),
            ZoneId.of("Asia/Tbilisi"), ZoneId.of("Asia/Tehran"), ZoneId.of("Asia/Thimphu"), ZoneId.of("Asia/Tokyo"),
            ZoneId.of("Asia/Tomsk"), ZoneId.of("Asia/Ulaanbaatar"), ZoneId.of("Asia/Urumqi"), ZoneId.of("Asia/Ust-Nera"),
            ZoneId.of("Asia/Vladivostok"), ZoneId.of("Asia/Yakutsk"), ZoneId.of("Asia/Yangon"), ZoneId.of("Asia/Yekaterinburg"),
            ZoneId.of("Asia/Yerevan")),
    ATLANTIC("Atlantic",
            ZoneId.of("Atlantic/Azores"), ZoneId.of("Atlantic/Bermuda"), ZoneId.of("Atlantic/Canary"),
            ZoneId.of("Atlantic/Cape_Verde"), ZoneId.of("Atlantic/Faroe"), ZoneId.of("Atlantic/Madeira"),
            ZoneId.of("Atlantic/Reykjavik"), ZoneId.of("Atlantic/South_Georgia"), ZoneId.of("Atlantic/Stanley")),
    AUSTRALIA("Australia",
            ZoneId.of("Australia/Adelaide"), ZoneId.of("Australia/Brisbane"),
            ZoneId.of("Australia/Darwin"), ZoneId.of("Australia/Eucla"), ZoneId.of("Australia/Hobart"),
            ZoneId.of("Australia/Lord_Howe"), ZoneId.of("Australia/Melbourne"),
            ZoneId.of("Australia/Perth"), ZoneId.of("Australia/Sydney")),
    EUROPE("Europe",
            ZoneId.of("Europe/Amsterdam"), ZoneId.of("Europe/Andorra"), ZoneId.of("Europe/Astrakhan"),
            ZoneId.of("Europe/Athens"), ZoneId.of("Europe/Belgrade"), ZoneId.of("Europe/Berlin"),
            ZoneId.of("Europe/Bratislava"), ZoneId.of("Europe/Brussels"), ZoneId.of("Europe/Bucharest"),
            ZoneId.of("Europe/Budapest"), ZoneId.of("Europe/Busingen"), ZoneId.of("Europe/Chisinau"),
            ZoneId.of("Europe/Copenhagen"), ZoneId.of("Europe/Dublin"), ZoneId.of("Europe/Gibraltar"),
            ZoneId.of("Europe/Guernsey"), ZoneId.of("Europe/Helsinki"), ZoneId.of("Europe/Isle_of_Man"),
            ZoneId.of("Europe/Istanbul"), ZoneId.of("Europe/Jersey"), ZoneId.of("Europe/Kaliningrad"),
            ZoneId.of("Europe/Kiev"), ZoneId.of("Europe/Kirov"), ZoneId.of("Europe/Lisbon"),
            ZoneId.of("Europe/Ljubljana"), ZoneId.of("Europe/Luxembourg"), ZoneId.of("Europe/Madrid"),
            ZoneId.of("Europe/Malta"), ZoneId.of("Europe/Mariehamn"), ZoneId.of("Europe/Minsk"),
            ZoneId.of("Europe/Monaco"), ZoneId.of("Europe/Moscow"), ZoneId.of("Europe/Oslo"),
            ZoneId.of("Europe/Paris"), ZoneId.of("Europe/Podgorica"), ZoneId.of("Europe/Prague"),
            ZoneId.of("Europe/Riga"), ZoneId.of("Europe/Rome"), ZoneId.of("Europe/Samara"),
            ZoneId.of("Europe/San_Marino"), ZoneId.of("Europe/Sarajevo"), ZoneId.of("Europe/Saratov"),
            ZoneId.of("Europe/Simferopol"), ZoneId.of("Europe/Skopje"), ZoneId.of("Europe/Sofia"),
            ZoneId.of("Europe/Stockholm"), ZoneId.of("Europe/Tallinn"), ZoneId.of("Europe/Tirane"),
            ZoneId.of("Europe/Ulyanovsk"), ZoneId.of("Europe/Uzhgorod"), ZoneId.of("Europe/Vaduz"),
            ZoneId.of("Europe/Vatican"), ZoneId.of("Europe/Vienna"), ZoneId.of("Europe/Vilnius"),
            ZoneId.of("Europe/Volgograd"), ZoneId.of("Europe/Warsaw"), ZoneId.of("Europe/Zagreb"),
            ZoneId.of("Europe/Zaporozhye"), ZoneId.of("Europe/Zurich")),
    INDIAN("Indian",
            ZoneId.of("Indian/Antananarivo"), ZoneId.of("Indian/Chagos"), ZoneId.of("Indian/Christmas"),
            ZoneId.of("Indian/Cocos"), ZoneId.of("Indian/Comoro"), ZoneId.of("Indian/Kerguelen"),
            ZoneId.of("Indian/Mahe"), ZoneId.of("Indian/Maldives"), ZoneId.of("Indian/Mauritius"),
            ZoneId.of("Indian/Mayotte"), ZoneId.of("Indian/Reunion")),
    PACIFIC("Pacific",
            ZoneId.of("Pacific/Apia"), ZoneId.of("Pacific/Auckland"), ZoneId.of("Pacific/Bougainville"),
            ZoneId.of("Pacific/Chatham"), ZoneId.of("Pacific/Chuuk"), ZoneId.of("Pacific/Easter"),
            ZoneId.of("Pacific/Efate"), ZoneId.of("Pacific/Enderbury"), ZoneId.of("Pacific/Fakaofo"),
            ZoneId.of("Pacific/Fiji"), ZoneId.of("Pacific/Funafuti"), ZoneId.of("Pacific/Galapagos"),
            ZoneId.of("Pacific/Gambier"), ZoneId.of("Pacific/Guadalcanal"), ZoneId.of("Pacific/Guam"),
            ZoneId.of("Pacific/Honolulu"), ZoneId.of("Pacific/Kiritimati"), ZoneId.of("Pacific/Kosrae"),
            ZoneId.of("Pacific/Kwajalein"), ZoneId.of("Pacific/Majuro"), ZoneId.of("Pacific/Marquesas"),
            ZoneId.of("Pacific/Midway"), ZoneId.of("Pacific/Nauru"), ZoneId.of("Pacific/Niue"),
            ZoneId.of("Pacific/Norfolk"), ZoneId.of("Pacific/Noumea"), ZoneId.of("Pacific/Pago_Pago"),
            ZoneId.of("Pacific/Palau"), ZoneId.of("Pacific/Pitcairn"), ZoneId.of("Pacific/Pohnpei"),
            ZoneId.of("Pacific/Port_Moresby"), ZoneId.of("Pacific/Rarotonga"), ZoneId.of("Pacific/Saipan"),
            ZoneId.of("Pacific/Tahiti"), ZoneId.of("Pacific/Tarawa"), ZoneId.of("Pacific/Tongatapu"),
            ZoneId.of("Pacific/Wake"), ZoneId.of("Pacific/Wallis")),

    ;

    private final String name;
    private final List<ZoneId> zoneIds;

    TZRegionEnum(String name, ZoneId... zoneIds) {
        this.name = name;
        this.zoneIds = List.of(zoneIds);
    }

    public List<ZoneId> getZoneIds() {
        return zoneIds;
    } //sends zoneIds to the plugin panel
}
package com.tzclocks.tzui;

import com.tzclocks.TZClocksPlugin;
import com.tzclocks.tzconfig.TZClocksConfig;
import com.tzclocks.tzdata.TZClocksItem;
import com.tzclocks.tzutilities.TZRegionEnum;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class TZClocksPluginPanel extends PluginPanel {

    private final List<TZClocksItem> timezones = new ArrayList<>();
    private final List<TZClocksItemPanel> TZClocksItemPanels = new ArrayList<>();
    private final JComboBox<TZRegionEnum> regionDropdown;
    private final Map<TZClocksItem, TZClocksItemPanel> timezonePanelsMap = new HashMap<>();
    private final TZClocksPlugin plugin;
    private final TZClocksConfig config;
    private final JComboBox<String> timezoneDropdown;
    private JPanel clockPanel;
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    public void activatePanel() {
        scheduler.scheduleAtFixedRate(this::refreshTimeDisplays, 0, 1, TimeUnit.SECONDS);
    } //makes clock(s) in panel update every second
    public TZClocksPluginPanel(TZClocksPlugin plugin, TZClocksConfig config) { //panel for the plugin. dropdowns and button
        List<String> zoneIds = new ArrayList<>(ZoneId.getAvailableZoneIds());
        Collections.sort(zoneIds);
        this.plugin = plugin;
        this.config = config;
        setBorder(new EmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1.0;
        c.gridx = 0;
        c.gridy = 0;
        regionDropdown = new JComboBox<>(); //dropdown for selecting the region
        for (TZRegionEnum region : TZRegionEnum.values()) {
            regionDropdown.addItem(region);
        }
        regionDropdown.addActionListener(e -> updateTimeZoneDropdown());
        add(regionDropdown, c);
        c.gridy++;
        timezoneDropdown = new JComboBox<>(); //dropdown for selecting the time zone
        add(timezoneDropdown, c);
        c.gridy++;
        JButton addButton = new JButton("Add Timezone");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedZoneId = (String) timezoneDropdown.getSelectedItem();
                if (selectedZoneId != null) {
                    plugin.addTimezoneToPanel(selectedZoneId);
                }
            }
        });
        add(addButton, c);
        c.gridy++;
        clockPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        clockPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        add(clockPanel, c);
        scheduler.scheduleAtFixedRate(this::refreshTimeDisplays, 0, 1, TimeUnit.SECONDS);
        updateTimeZoneDropdown();
    }

    private List<ZoneId> getTimeZoneIdsForRegion(TZRegionEnum region) { //self-explanatory. gets the time zone IDs from TZRegionEnum
        if (region == TZRegionEnum.ALL) {
            List<ZoneId> allZoneIds = new ArrayList<>();
            for (TZRegionEnum reg : TZRegionEnum.values()) {
                if (reg != TZRegionEnum.ALL) {
                    allZoneIds.addAll(reg.getZoneIds());
                }
            }
            return allZoneIds;
        } else {
            return region.getZoneIds();
        }
    }

    private void updateTimeZoneDropdown() { //self-explanatory. updates the time zone dropdown to match region
        TZRegionEnum selectedRegion = (TZRegionEnum) regionDropdown.getSelectedItem();
        List<ZoneId> zoneIds = getTimeZoneIdsForRegion(selectedRegion);

        timezoneDropdown.removeAllItems();

        for (ZoneId zoneId : zoneIds) {
            timezoneDropdown.addItem(zoneId.toString());
        }
    }

    public void addTimezonePanel(TZClocksItem item) { //adds the time zone panel
        TZClocksItemPanel TZClocksItemPanel = new TZClocksItemPanel(plugin, item);
        TZClocksItemPanels.add(TZClocksItemPanel);
        timezonePanelsMap.put(item, TZClocksItemPanel);
        clockPanel.add(TZClocksItemPanel);
        revalidate();
        repaint();
    }

    public void removeTimezonePanel(TZClocksItem item) { //removes time zone from panel
        TZClocksItemPanel timezonePanelToRemove = timezonePanelsMap.remove(item);
        if (timezonePanelToRemove != null) {
            clockPanel.remove(timezonePanelToRemove);
            TZClocksItemPanels.remove(timezonePanelToRemove);
            revalidate();
            repaint();
        }
    }

    public void refreshTimeDisplays( ) { //refreshes panel when adding new time zone
        DateTimeFormatter formatter = plugin.getFormatter();
        for (TZClocksItem item : timezones) {
            ZoneId zoneId = ZoneId.of(item.getName());
            ZonedDateTime now = ZonedDateTime.now(zoneId);
            item.setCurrentTime(now.format(formatter));
        }
        for (TZClocksItemPanel panel : TZClocksItemPanels) {
            panel.updateTime();
        }
    }

    public void removeAllClocks() { //removes clocks to prevent re-adding previously selected clocks. there might be an alternative
        clockPanel.removeAll();
        TZClocksItemPanels.clear();
        timezonePanelsMap.clear();
        revalidate();
        repaint();
    }

}
package com.tzclocks.tzui;

import com.tzclocks.TZClocksPlugin;
import com.tzclocks.tzdata.TZClocksItem;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

import static com.tzclocks.tzutilities.TZConstants.*;

public class TZClocksItemPanel extends JPanel {
    private static final String DELETE_TITLE = "Warning";
    private static final String DELETE_MESSAGE = "Are you sure you want to delete this item?";
    private static final ImageIcon DELETE_ICON;
    private static final ImageIcon DELETE_HOVER_ICON;;

    private final TZClocksItem item;
    private final JLabel currentTimeLabel;

    static {
        final BufferedImage deleteImage = ImageUtil.loadImageResource(TZClocksItemPanel.class, DELETE_ICON_PATH);
        DELETE_ICON = new ImageIcon(deleteImage);
        DELETE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(deleteImage, 0.53f));


    }

    TZClocksItemPanel(TZClocksPlugin plugin, TZClocksItem item) { //format and buttons for added time zones
        this.item = item;
        setLayout(new BorderLayout(5, 0));
        setBorder(new EmptyBorder(5, 5, 5, 0));

        int itemIndex = plugin.getTimezones().indexOf(item); //need to check if actually used or not
        int itemsSize = plugin.getTimezones().size(); //same as above

        JPanel timezoneDetailsPanel = new JPanel(new GridLayout(2, 1));
        timezoneDetailsPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JLabel timezoneName = new JLabel();
        timezoneName.setForeground(Color.WHITE);
        timezoneName.setText(item.getName());
        timezoneDetailsPanel.add(timezoneName);

        currentTimeLabel = new JLabel();
        currentTimeLabel.setForeground(Color.WHITE);
        currentTimeLabel.setText(item.getCurrentTime());
        timezoneDetailsPanel.add(currentTimeLabel);
        JPanel actionPanel = new JPanel(new BorderLayout());
        actionPanel.setBackground(new Color(0, 0, 0, 0));
        actionPanel.setOpaque(false);
        JLabel deleteItem = new JLabel(DELETE_ICON);
        deleteItem.setBorder(new EmptyBorder(0, 0, 0, 3));
        deleteItem.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (deleteConfirm()) {
                    plugin.removeTimezoneFromPanel(item);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                deleteItem.setIcon(DELETE_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                deleteItem.setIcon(DELETE_ICON);
            }
        });
        actionPanel.add(deleteItem, BorderLayout.NORTH);

        add(timezoneDetailsPanel, BorderLayout.WEST);
        add(actionPanel, BorderLayout.EAST);
    }

    private boolean deleteConfirm() { //self-explanatory
        int confirm = JOptionPane.showConfirmDialog(this,
                DELETE_MESSAGE, DELETE_TITLE, JOptionPane.YES_NO_OPTION);
        return confirm == JOptionPane.YES_NO_OPTION;
    }

    @Override
    protected void paintComponent(Graphics g) {
        g.setColor(ColorScheme.DARKER_GRAY_COLOR);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
    }

    public void updateTime() {
        currentTimeLabel.setText(item.getCurrentTime());
    } //updates panel with new time zones
}
package com.tzclocks.tzconfig;

import java.util.List;

import com.tzclocks.TZClocksPlugin;
import com.tzclocks.tzdata.TZFormatEnum;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;


@ConfigGroup(TZClocksPlugin.CONFIG_GROUP)
public interface TZClocksConfig extends Config {
		//format dropdown
		@ConfigItem(
			position = 1,
			keyName = "tzFormat",
			name = "Time Format",
			description = "Select 12-hour or 24-hour format"
	)
	default TZFormatEnum getTZFormatMode() {
		return TZFormatEnum.TWELVE_HOUR;
	} //default format

	void setTimeFormat(TZFormatEnum tzFormat); //says no usages but is important
	void setTimezones(List<String> timezones); //also says no usages but also important
}
package com.tzclocks;

import com.tzclocks.tzconfig.TZClocksConfig;
import com.tzclocks.tzdata.TZClocksDataManager;
import com.tzclocks.tzdata.TZClocksItem;
import com.tzclocks.tzdata.TZFormatEnum;

import com.tzclocks.tzui.TZClocksPluginPanel;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static com.tzclocks.tzutilities.TZConstants.PANEL_ICON_PATH;

@Slf4j
@PluginDescriptor(
		name = "Time Zone clocks"
)
public class TZClocksPlugin extends Plugin {

	public static final String CONFIG_GROUP = "tzconfig";
	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	@Setter
	private TZClocksConfig config;

	@Inject
	private TZClocksDataManager dataManager;

	private TZClocksPluginPanel panel;
	private NavigationButton navButton;

	@Getter
	@Setter
	private List<TZClocksItem> timezones = new ArrayList<>();



	private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(); //updates the clocks as scheduled. Might be a better alternative

	@Override
	protected void startUp() throws Exception { //starts plugin when loading client
		panel = new TZClocksPluginPanel(this, config);
		final BufferedImage icon = ImageUtil.loadImageResource(TZClocksPlugin.class, PANEL_ICON_PATH);
		navButton = NavigationButton.builder()
				.tooltip("Timezones")
				.icon(icon)
				.priority(5)
				.panel(panel)
				.build();
		clientToolbar.addNavigation(navButton);
		dataManager.loadData();
		refreshTimezonePanels();
		panel.activatePanel();

		scheduler.scheduleAtFixedRate(this::updateTimezoneData, 0, 1, TimeUnit.SECONDS);
	}

	@Override
	protected void shutDown() throws Exception { //shuts down plugin
		clientToolbar.removeNavigation(navButton); //removes from navigation bar, same as other plugins
		dataManager.saveData(); //saves data one last time before closing
		scheduler.shutdown(); //shuts down scheduler. might be better alternative
	}

	@Provides
	TZClocksConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(TZClocksConfig.class);
	} //supposedly saves to the RL config manager. Not actually sure but other plugins use the same thing. Need to actually spend time learning how it works

	public void addTimezoneToPanel(String timezoneId) { //adds clock to the panel and saves data to data manager
		ZoneId zoneId = ZoneId.of(timezoneId);
		ZonedDateTime now = ZonedDateTime.now(zoneId);
		DateTimeFormatter formatter = getFormatter();
		String currentTime = now.format(formatter);
		TZClocksItem newItem = new TZClocksItem(timezoneId, currentTime);
		timezones.add(newItem);
		panel.addTimezonePanel(newItem);
		dataManager.saveData();
	}

	public void removeTimezoneFromPanel(TZClocksItem item) { //removes clock from the panel and updates data in the data manager
		timezones.remove(item);
		dataManager.saveData();
		SwingUtilities.invokeLater(() -> panel.removeTimezonePanel(item));
	}

	public void refreshTimezonePanels() { //refreshes panel on start up
		SwingUtilities.invokeLater(() -> {
			panel.removeAllClocks();
			for (TZClocksItem item : timezones) {
				panel.addTimezonePanel(item);
			}
		});
	}

	public void updateTimezoneData() { //updates time based on scheduler
		DateTimeFormatter formatter = getFormatter();
		for (TZClocksItem item : timezones) {
			ZoneId zoneId = ZoneId.of(item.getName());
			ZonedDateTime now = ZonedDateTime.now(zoneId);
			String currentTime = now.format(formatter);
			item.setCurrentTime(currentTime);
		}
		SwingUtilities.invokeLater(() -> panel.refreshTimeDisplays());
	}
	public DateTimeFormatter getFormatter() { //formats based on selected option from config
		if (config.getTZFormatMode() == TZFormatEnum.TWENTY_FOUR_HOUR) {
			return DateTimeFormatter.ofPattern("HH:mm:ss");
		} else {
			return DateTimeFormatter.ofPattern("hh:mm:ss a");
		}
	}
}
