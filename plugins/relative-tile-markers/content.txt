package com.millman97.relativetilemarkers;

import com.google.inject.Provides;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@PluginDescriptor(
        name = "Relative Tile Markers",
        description = "Marks relative tiles based on the player's position"
)
public class RelativeTileMarkersPlugin extends Plugin
{
    @Inject private OverlayManager overlayManager;
    @Inject private RelativeTileOverlay overlay;

    @Override
    protected void startUp()
    {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown()
    {
        overlayManager.remove(overlay);
    }

    @Provides
    RelativeTileConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(RelativeTileConfig.class);
    }
}

package com.millman97.relativetilemarkers;

import net.runelite.client.config.*;
import java.awt.*;

@ConfigGroup("relativetilemarkers")
public interface RelativeTileConfig extends Config
{
    // --- Section A ---
    @ConfigSection(
            name = "Tile Marker Set A",
            description = "Settings for tile marker set A",
            position = 0,
            closedByDefault = false
    )
    String sectionA = "sectionA";

    @ConfigItem(
            keyName = "tilesA",
            name = "Tiles A",
            description = "Relative tiles for set A",
            section = sectionA,
            position = 0
    )
    default String tilesA() { return ""; }

    @ConfigItem(
            keyName = "fillColorA",
            name = "Fill Color A",
            description = "Fill color for set A",
            section = sectionA,
            position = 1
    )
    default Color fillColorA() { return new Color(0, 255, 0, 100); }

    @ConfigItem(
            keyName = "borderColorA",
            name = "Border Color A",
            description = "Border color for set A",
            section = sectionA,
            position = 2
    )
    default Color borderColorA() { return Color.GREEN; }

    @ConfigItem(
            keyName = "borderWidthA",
            name = "Border Width A",
            description = "Thickness of border for set A",
            section = sectionA,
            position = 3
    )
    default double borderWidthA() { return 2.0; }

    @ConfigItem(
            keyName = "drawOutlineA",
            name = "Draw Outline A",
            description = "Enable outline for set A",
            section = sectionA,
            position = 4
    )
    default boolean drawOutlineA() { return true; }

    @Range(max = 255)
    @Alpha
    @ConfigItem(
            keyName = "fillAlphaA",
            name = "Fill Transparency A",
            description = "Transparency of the tile fill color for Set A (0 = fully transparent, 255 = fully opaque)",
            position = 5,
            section = sectionA
    )
    default int fillAlphaA() { return 100; }

    // --- Section B ---
    @ConfigSection(
            name = "Tile Marker Set B",
            description = "Settings for tile marker set B",
            position = 1,
            closedByDefault = true
    )
    String sectionB = "sectionB";

    @ConfigItem(
            keyName = "tilesB",
            name = "Tiles B",
            description = "Relative tiles for set B",
            section = sectionB,
            position = 0
    )
    default String tilesB() { return ""; }

    @ConfigItem(
            keyName = "fillColorB",
            name = "Fill Color B",
            description = "Fill color for set B",
            section = sectionB,
            position = 1
    )
    default Color fillColorB() { return new Color(255, 0, 0, 100); }

    @ConfigItem(
            keyName = "borderColorB",
            name = "Border Color B",
            description = "Border color for set B",
            section = sectionB,
            position = 2
    )
    default Color borderColorB() { return Color.RED; }

    @ConfigItem(
            keyName = "borderWidthB",
            name = "Border Width B",
            description = "Thickness of border for set B",
            section = sectionB,
            position = 3
    )
    default double borderWidthB() { return 2.0; }

    @ConfigItem(
            keyName = "drawOutlineB",
            name = "Draw Outline B",
            description = "Enable outline for set B",
            section = sectionB,
            position = 4
    )
    default boolean drawOutlineB() { return true; }

    @Range(max = 255)
    @Alpha
    @ConfigItem(
            keyName = "fillAlphaB",
            name = "Fill Transparency B",
            description = "Transparency of the tile fill color for Set B (0 = fully transparent, 255 = fully opaque)",
            position = 5,
            section = sectionB
    )
    default int fillAlphaB() { return 100; }

    // --- Section C ---
    @ConfigSection(
            name = "Tile Marker Set C",
            description = "Settings for tile marker set C",
            position = 2,
            closedByDefault = true
    )
    String sectionC = "sectionC";

    @ConfigItem(
            keyName = "tilesC",
            name = "Tiles C",
            description = "Relative tiles for set C",
            section = sectionC,
            position = 0
    )
    default String tilesC() { return ""; }

    @ConfigItem(
            keyName = "fillColorC",
            name = "Fill Color C",
            description = "Fill color for set C",
            section = sectionC,
            position = 1
    )
    default Color fillColorC() { return new Color(0, 0, 255, 100); }

    @ConfigItem(
            keyName = "borderColorC",
            name = "Border Color C",
            description = "Border color for set C",
            section = sectionC,
            position = 2
    )
    default Color borderColorC() { return Color.BLUE; }

    @ConfigItem(
            keyName = "borderWidthC",
            name = "Border Width C",
            description = "Thickness of border for set C",
            section = sectionC,
            position = 3
    )
    default double borderWidthC() { return 2.0; }

    @ConfigItem(
            keyName = "drawOutlineC",
            name = "Draw Outline C",
            description = "Enable outline for set C",
            section = sectionC,
            position = 4
    )
    default boolean drawOutlineC() { return true; }

    @Range(max = 255)
    @Alpha
    @ConfigItem(
            keyName = "fillAlphaC",
            name = "Fill Transparency C",
            description = "Transparency of the tile fill color for Set C (0 = fully transparent, 255 = fully opaque)",
            position = 5,
            section = sectionC
    )
    default int fillAlphaC() { return 100; }

    @ConfigItem(
            keyName = "useTrueTileA",
            name = "Use True Tile A",
            description = "Highlight relative to true tile instead of character tile for set A",
            section = sectionA,
            position = 6
    )
    default boolean useTrueTileA() { return false; }

    @ConfigItem(
            keyName = "useTrueTileB",
            name = "Use True Tile B",
            description = "Highlight relative to true tile instead of character tile for set B",
            section = sectionB,
            position = 6
    )
    default boolean useTrueTileB() { return false; }

    @ConfigItem(
            keyName = "useTrueTileC",
            name = "Use True Tile C",
            description = "Highlight relative to true tile instead of character tile for set C",
            section = sectionC,
            position = 6
    )
    default boolean useTrueTileC() { return false; }

}



package com.millman97.relativetilemarkers;

public enum MarkerSet
{
    SET_1,
    SET_2,
    SET_3
}

package com.millman97.relativetilemarkers;

import net.runelite.api.coords.WorldPoint;

import java.util.ArrayList;
import java.util.List;

public class RelativeTileParser
{
    public static List<WorldPoint> parse(String input, WorldPoint base)
    {
        List<WorldPoint> tiles = new ArrayList<>();
        if (input == null || base == null)
        {
            return tiles;
        }

        String[] parts = input.split("[,\\s]+");
        for (String part : parts)
        {
            int dx = 0, dy = 0;
            part = part.trim().toUpperCase();

            for (int i = 0; i < part.length(); )
            {
                char dir = part.charAt(i++);
                StringBuilder num = new StringBuilder();
                while (i < part.length() && Character.isDigit(part.charAt(i)))
                {
                    num.append(part.charAt(i++));
                }

                int val = num.length() > 0 ? Integer.parseInt(num.toString()) : 1;

                switch (dir) {
                    case 'N': dy += val; break;
                    case 'S': dy -= val; break;
                    case 'E': dx += val; break;
                    case 'W': dx -= val; break;
                }
            }

            tiles.add(new WorldPoint(base.getX() + dx, base.getY() + dy, base.getPlane()));
        }

        return tiles;
    }
}

package com.millman97.relativetilemarkers;

import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.Perspective;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import java.awt.*;
import java.util.List;

public class RelativeTileOverlay extends Overlay
{
    private final Client client;
    private final RelativeTileConfig config;

    @Inject
    public RelativeTileOverlay(Client client, RelativeTileConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.MED);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        drawRelativeTiles(graphics, config.tilesA(), config.fillColorA(), config.fillAlphaA(), config.borderColorA(), config.borderWidthA(), config.drawOutlineA(), config.useTrueTileA());
        drawRelativeTiles(graphics, config.tilesB(), config.fillColorB(), config.fillAlphaB(), config.borderColorB(), config.borderWidthB(), config.drawOutlineB(), config.useTrueTileB());
        drawRelativeTiles(graphics, config.tilesC(), config.fillColorC(), config.fillAlphaC(), config.borderColorC(), config.borderWidthC(), config.drawOutlineC(), config.useTrueTileC());

        return null;
    }

    private void drawRelativeTiles(Graphics2D graphics, String input, Color fill, int fillAlpha, Color border, double borderWidth, boolean drawOutline, boolean useTrueTile)
    {
        if (input == null || input.isEmpty())
        {
            return;
        }

        WorldPoint base = useTrueTile
                ? client.getLocalPlayer().getWorldLocation()
                : WorldPoint.fromLocal(client, client.getLocalPlayer().getLocalLocation());

        List<WorldPoint> points = RelativeTileParser.parse(input, base);

        for (WorldPoint worldPoint : points)
        {
            LocalPoint lp = LocalPoint.fromWorld(client, worldPoint);
            if (lp == null)
            {
                continue;
            }

            Polygon poly = Perspective.getCanvasTilePoly(client, lp);
            if (poly == null)
            {
                continue;
            }

            if (fill != null && fillAlpha > 0)
            {
                Color alphaFill = new Color(fill.getRed(), fill.getGreen(), fill.getBlue(), fillAlpha);
                graphics.setColor(alphaFill);
                graphics.fill(poly);
            }

            if (drawOutline && border != null)
            {
                graphics.setColor(border);
                graphics.setStroke(new BasicStroke((float) borderWidth));
                graphics.draw(poly);
            }
        }
    }

}

package com.millman97.relativetilemarkers;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RelativeTileMarkersPluginTest
{
    public static void main(String[] args) throws Exception
    {
        // Load your plugin so RuneLite knows about it
        ExternalPluginManager.loadBuiltin(RelativeTileMarkersPlugin.class);
        RuneLite.main(args);
    }
}

package com.millman97.relativetilemarkers;

import org.junit.jupiter.api.Test;

import net.runelite.api.coords.WorldPoint;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class RelativeTileParserTest
{
    private static final WorldPoint BASE_POINT = new WorldPoint(3200, 3200, 0);

    @Test
    public void testParse_E2N3()
    {
        List<WorldPoint> result = RelativeTileParser.parse("E2N3", BASE_POINT);
        WorldPoint expected = new WorldPoint(3202, 3203, 0);
        assertEquals(1, result.size());
        assertEquals(expected, result.get(0));
    }

    @Test
    public void testParse_W5S2()
    {
        List<WorldPoint> result = RelativeTileParser.parse("W5S2", BASE_POINT);
        WorldPoint expected = new WorldPoint(3195, 3198, 0);
        assertEquals(1, result.size());
        assertEquals(expected, result.get(0));
    }

    @Test
    public void testParse_Invalid()
    {
        List<WorldPoint> result = RelativeTileParser.parse("XX9", BASE_POINT);
        assertEquals(1, result.size());
        assertEquals(BASE_POINT, result.get(0)); // Invalid input, should return base point
    }
}

