package com.specoverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SpecOverlayPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SpecOverlayPlugin.class);
		RuneLite.main(args);
	}
}
package com.specoverlay;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import java.awt.*;

public class SpecOverlayOverlay extends OverlayPanel {
    private final SpecOverlayPlugin plugin;
    private final SpecOverlayConfig config;
    public int Spec;

    SpecOverlayOverlay(SpecOverlayPlugin plugin, SpecOverlayConfig config, int Spec) {
        super(plugin);
        this.plugin = plugin;
        this.config = config;
        this.Spec = Spec;
        setPosition(OverlayPosition.TOP_RIGHT);
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(LineComponent.builder().left("Spec:").right(String.valueOf(Spec)).build());
        return super.render(graphics2D);
    }
}

package com.specoverlay;

import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Counter;

import java.awt.image.BufferedImage;

public class SpecOverlayCounter extends Counter {
    SpecOverlayCounter(Plugin plugin, int count, BufferedImage image) {
        super(image, plugin, count);
    }
}

package com.specoverlay;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.SpriteID;
import net.runelite.api.VarPlayer;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;
import java.util.Objects;

@Slf4j
@PluginDescriptor(name = "Spec Overlay")
public class SpecOverlayPlugin extends Plugin {
    @Inject
    private Client client;
    @Inject
    private InfoBoxManager infoBoxManager;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private SpecOverlayConfig specOverlayConfig;
    @Inject
    private ItemManager itemManager;
    private SpecOverlayCounter specOverlayCounter;
    private SpecOverlayOverlay specOverlayOverlay;
    private static final int SoulReaperAxe = 28338;
    static final String ConfigGroupKey = "SpecOverlay";


    @Inject
    SpriteManager spriteManager;

    @Override
    protected void startUp() throws Exception {
        specOverlayCounter = new SpecOverlayCounter(this, client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT) / 10, null);
        specOverlayOverlay = new SpecOverlayOverlay(this, specOverlayConfig, client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT) / 10);
    }

    @Override
    protected void shutDown() throws Exception {
        if (specOverlayConfig.info() == SpecOverlayConfig.OverlayType.INFOBOX) {
            infoBoxManager.removeInfoBox(specOverlayCounter);
        } else if (specOverlayConfig.info() == SpecOverlayConfig.OverlayType.OVERLAY) {
            overlayManager.remove(specOverlayOverlay);
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged itemContainerChanged) {
        if (itemContainerChanged.getItemContainer() != client.getItemContainer(InventoryID.EQUIPMENT)) {
            return;
        }
        if (Objects.requireNonNull(client.getItemContainer(InventoryID.EQUIPMENT)).contains(SoulReaperAxe)) {
            if (specOverlayConfig.info() == SpecOverlayConfig.OverlayType.INFOBOX) {
                specOverlayCounter.setImage(spriteManager.getSprite(SpriteID.MINIMAP_ORB_SPECIAL_ICON, 0));
                if (!infoBoxManager.getInfoBoxes().contains(specOverlayCounter)) { //I genuinely cant figure out any other way to do this, the infobox keeps replicating itself when hopping worlds
                    infoBoxManager.addInfoBox(specOverlayCounter);
                }
            } else if (specOverlayConfig.info() == SpecOverlayConfig.OverlayType.OVERLAY) {
                overlayManager.add(specOverlayOverlay);
            }
        } else {
            if (specOverlayConfig.info() == SpecOverlayConfig.OverlayType.INFOBOX) {
                infoBoxManager.removeInfoBox(specOverlayCounter);
            } else if (specOverlayConfig.info() == SpecOverlayConfig.OverlayType.OVERLAY) {
                overlayManager.remove(specOverlayOverlay);
            }
        }

    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        updateInfoBox();
        updateOverlay();
    }

    private void updateInfoBox() {
        specOverlayCounter.setCount(client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT) / 10);
    }

    private void updateOverlay() {
        specOverlayOverlay.Spec = client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT) / 10;
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getGroup().equals(ConfigGroupKey) && client.getItemContainer(InventoryID.EQUIPMENT).contains(SoulReaperAxe)) {
            if (event.getOldValue().equals("OVERLAY")) {
                overlayManager.remove(specOverlayOverlay);
                infoBoxManager.addInfoBox(specOverlayCounter);
            } else if (event.getOldValue().equals("INFOBOX")) {
                overlayManager.add(specOverlayOverlay);
                infoBoxManager.removeInfoBox(specOverlayCounter);
            }
        }
    }

    @Provides
    SpecOverlayConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(SpecOverlayConfig.class);
    }
}

package com.specoverlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("SpecOverlay")
public interface SpecOverlayConfig extends Config {
    enum OverlayType {
        INFOBOX("InfoBox"), OVERLAY("Overlay");
        private final String name;

        OverlayType(String string) {
            this.name = string;
        }

        @Override
        public String toString() {
            return this.name;
        }
    }

    @ConfigItem(
            keyName = "OverlayType",
            name = "Overlay Type",
            description = "Choose how to display the current amount of special attack"
    )
    default OverlayType info() {
        return OverlayType.INFOBOX;
    }
}
