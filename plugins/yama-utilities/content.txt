package com.rr.bosses.yama;

import net.runelite.api.Client;
import net.runelite.api.FontID;
import net.runelite.api.KeyCode;
import net.runelite.api.VarClientStr;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.*;

import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Most of this code was copied from the Charge Calculator plugin.
 */
public class DuoNameAutoFillWidget
{
    private final Client client;
    private Widget duoDisplayNameWidget;

    /**
     * OSRS keycode -> AWT keycode
     */
    public static final Map<Integer, Integer> keyCodeMap = new HashMap<>();
    static {
        // send help
        keyCodeMap.put(KeyCode.KC_0, KeyEvent.VK_0);
        keyCodeMap.put(KeyCode.KC_1, KeyEvent.VK_1);
        keyCodeMap.put(KeyCode.KC_2, KeyEvent.VK_2);
        keyCodeMap.put(KeyCode.KC_3, KeyEvent.VK_3);
        keyCodeMap.put(KeyCode.KC_4, KeyEvent.VK_4);
        keyCodeMap.put(KeyCode.KC_5, KeyEvent.VK_5);
        keyCodeMap.put(KeyCode.KC_6, KeyEvent.VK_6);
        keyCodeMap.put(KeyCode.KC_7, KeyEvent.VK_7);
        keyCodeMap.put(KeyCode.KC_8, KeyEvent.VK_8);
        keyCodeMap.put(KeyCode.KC_9, KeyEvent.VK_9);
        keyCodeMap.put(KeyCode.KC_A, KeyEvent.VK_A);
        keyCodeMap.put(KeyCode.KC_ADD, KeyEvent.VK_ADD);
        keyCodeMap.put(KeyCode.KC_ALT, KeyEvent.VK_ALT);
        keyCodeMap.put(KeyCode.KC_B, KeyEvent.VK_B);
        keyCodeMap.put(KeyCode.KC_BACK_QUOTE, KeyEvent.VK_BACK_QUOTE);
        keyCodeMap.put(KeyCode.KC_BACK_SLASH, KeyEvent.VK_BACK_SLASH);
        keyCodeMap.put(KeyCode.KC_BACK_SPACE, KeyEvent.VK_BACK_SPACE);
        keyCodeMap.put(KeyCode.KC_C, KeyEvent.VK_C);
        keyCodeMap.put(KeyCode.KC_CLEAR, KeyEvent.VK_CLEAR);
        keyCodeMap.put(KeyCode.KC_CLOSE_BRACKET, KeyEvent.VK_CLOSE_BRACKET);
        keyCodeMap.put(KeyCode.KC_COMMA, KeyEvent.VK_COMMA);
        keyCodeMap.put(KeyCode.KC_CONTROL, KeyEvent.VK_CONTROL);
        keyCodeMap.put(KeyCode.KC_D, KeyEvent.VK_D);
        keyCodeMap.put(KeyCode.KC_DECIMAL, KeyEvent.VK_DECIMAL);
        keyCodeMap.put(KeyCode.KC_DELETE, KeyEvent.VK_DELETE);
        keyCodeMap.put(KeyCode.KC_DIVIDE, KeyEvent.VK_DIVIDE);
        keyCodeMap.put(KeyCode.KC_DOWN, KeyEvent.VK_DOWN);
        keyCodeMap.put(KeyCode.KC_E, KeyEvent.VK_E);
        keyCodeMap.put(KeyCode.KC_END, KeyEvent.VK_END);
        keyCodeMap.put(KeyCode.KC_ENTER, KeyEvent.VK_ENTER);
        keyCodeMap.put(KeyCode.KC_EQUALS, KeyEvent.VK_EQUALS);
        keyCodeMap.put(KeyCode.KC_ESCAPE, KeyEvent.VK_ESCAPE);
        keyCodeMap.put(KeyCode.KC_F, KeyEvent.VK_F);
        keyCodeMap.put(KeyCode.KC_F1, KeyEvent.VK_F1);
        keyCodeMap.put(KeyCode.KC_F10, KeyEvent.VK_F10);
        keyCodeMap.put(KeyCode.KC_F11, KeyEvent.VK_F11);
        keyCodeMap.put(KeyCode.KC_F12, KeyEvent.VK_F12);
        keyCodeMap.put(KeyCode.KC_F2, KeyEvent.VK_F2);
        keyCodeMap.put(KeyCode.KC_F3, KeyEvent.VK_F3);
        keyCodeMap.put(KeyCode.KC_F4, KeyEvent.VK_F4);
        keyCodeMap.put(KeyCode.KC_F5, KeyEvent.VK_F5);
        keyCodeMap.put(KeyCode.KC_F6, KeyEvent.VK_F6);
        keyCodeMap.put(KeyCode.KC_F7, KeyEvent.VK_F7);
        keyCodeMap.put(KeyCode.KC_F8, KeyEvent.VK_F8);
        keyCodeMap.put(KeyCode.KC_F9, KeyEvent.VK_F9);
        keyCodeMap.put(KeyCode.KC_G, KeyEvent.VK_G);
        keyCodeMap.put(KeyCode.KC_H, KeyEvent.VK_H);
        keyCodeMap.put(KeyCode.KC_HOME, KeyEvent.VK_HOME);
        keyCodeMap.put(KeyCode.KC_I, KeyEvent.VK_I);
        keyCodeMap.put(KeyCode.KC_INSERT, KeyEvent.VK_INSERT);
        keyCodeMap.put(KeyCode.KC_J, KeyEvent.VK_J);
        keyCodeMap.put(KeyCode.KC_K, KeyEvent.VK_K);
        keyCodeMap.put(KeyCode.KC_L, KeyEvent.VK_L);
        keyCodeMap.put(KeyCode.KC_LEFT, KeyEvent.VK_LEFT);
        keyCodeMap.put(KeyCode.KC_M, KeyEvent.VK_M);
        keyCodeMap.put(KeyCode.KC_MINUS, KeyEvent.VK_MINUS);
        keyCodeMap.put(KeyCode.KC_MULTIPLY, KeyEvent.VK_MULTIPLY);
        keyCodeMap.put(KeyCode.KC_N, KeyEvent.VK_N);
        keyCodeMap.put(KeyCode.KC_NUMBER_SIGN, KeyEvent.VK_NUMBER_SIGN);
        keyCodeMap.put(KeyCode.KC_NUMPAD0, KeyEvent.VK_NUMPAD0);
        keyCodeMap.put(KeyCode.KC_NUMPAD1, KeyEvent.VK_NUMPAD1);
        keyCodeMap.put(KeyCode.KC_NUMPAD2, KeyEvent.VK_NUMPAD2);
        keyCodeMap.put(KeyCode.KC_NUMPAD3, KeyEvent.VK_NUMPAD3);
        keyCodeMap.put(KeyCode.KC_NUMPAD4, KeyEvent.VK_NUMPAD4);
        keyCodeMap.put(KeyCode.KC_NUMPAD5, KeyEvent.VK_NUMPAD5);
        keyCodeMap.put(KeyCode.KC_NUMPAD6, KeyEvent.VK_NUMPAD6);
        keyCodeMap.put(KeyCode.KC_NUMPAD7, KeyEvent.VK_NUMPAD7);
        keyCodeMap.put(KeyCode.KC_NUMPAD8, KeyEvent.VK_NUMPAD8);
        keyCodeMap.put(KeyCode.KC_NUMPAD9, KeyEvent.VK_NUMPAD9);
        keyCodeMap.put(KeyCode.KC_O, KeyEvent.VK_O);
        keyCodeMap.put(KeyCode.KC_OPEN_BRACKET, KeyEvent.VK_OPEN_BRACKET);
        keyCodeMap.put(KeyCode.KC_P, KeyEvent.VK_P);
        keyCodeMap.put(KeyCode.KC_PAGE_DOWN, KeyEvent.VK_PAGE_DOWN);
        keyCodeMap.put(KeyCode.KC_PAGE_UP, KeyEvent.VK_PAGE_UP);
        keyCodeMap.put(KeyCode.KC_PERIOD, KeyEvent.VK_PERIOD);
        keyCodeMap.put(KeyCode.KC_Q, KeyEvent.VK_Q);
        keyCodeMap.put(KeyCode.KC_QUOTE, KeyEvent.VK_QUOTE);
        keyCodeMap.put(KeyCode.KC_R, KeyEvent.VK_R);
        keyCodeMap.put(KeyCode.KC_RIGHT, KeyEvent.VK_RIGHT);
        keyCodeMap.put(KeyCode.KC_S, KeyEvent.VK_S);
        keyCodeMap.put(KeyCode.KC_SEMICOLON, KeyEvent.VK_SEMICOLON);
        keyCodeMap.put(KeyCode.KC_SHIFT, KeyEvent.VK_SHIFT);
        keyCodeMap.put(KeyCode.KC_SLASH, KeyEvent.VK_SLASH);
        keyCodeMap.put(KeyCode.KC_SPACE, KeyEvent.VK_SPACE);
        keyCodeMap.put(KeyCode.KC_SUBTRACT, KeyEvent.VK_SUBTRACT);
        keyCodeMap.put(KeyCode.KC_T, KeyEvent.VK_T);
        keyCodeMap.put(KeyCode.KC_TAB, KeyEvent.VK_TAB);
        keyCodeMap.put(KeyCode.KC_U, KeyEvent.VK_U);
        keyCodeMap.put(KeyCode.KC_UP, KeyEvent.VK_UP);
        keyCodeMap.put(KeyCode.KC_V, KeyEvent.VK_V);
        keyCodeMap.put(KeyCode.KC_W, KeyEvent.VK_W);
        keyCodeMap.put(KeyCode.KC_X, KeyEvent.VK_X);
        keyCodeMap.put(KeyCode.KC_Y, KeyEvent.VK_Y);
        keyCodeMap.put(KeyCode.KC_Z, KeyEvent.VK_Z);
    }


    public DuoNameAutoFillWidget(Widget parent, Client client)
    {
        this.client = client;
        if (parent == null)
        {
            return;
        }

        this.duoDisplayNameWidget = parent.createChild(WidgetType.TEXT);

        if (Objects.requireNonNull(parent.getChildren()).length == 2 && !this.duoDisplayNameWidget.isHidden())
        {
            prep(this.duoDisplayNameWidget, parent.getWidth()/4*(-1));
            prep(Objects.requireNonNull(parent.getChild(0)), parent.getWidth()/4);
        }
        else
        {
            prep(this.duoDisplayNameWidget, 0);
        }

    }

    private void prep(Widget widget, int x)
    {
        widget.setTextColor(0xFF);
        widget.setFontId(FontID.PLAIN_12);

        widget.setOriginalX(x);
        widget.setOriginalY(0);
        widget.setOriginalHeight(36);
        widget.setOriginalWidth(252);

        widget.setWidthMode(WidgetSizeMode.MINUS);
        widget.setXPositionMode(WidgetPositionMode.ABSOLUTE_CENTER);
        widget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        widget.setXTextAlignment(WidgetTextAlignment.CENTER);
        widget.setYTextAlignment(WidgetTextAlignment.CENTER);

        widget.setHasListener(true);
        widget.setOnMouseRepeatListener((JavaScriptCallback) ev -> widget.setTextColor(0xFFFFFF));
        widget.setOnMouseLeaveListener((JavaScriptCallback) ev -> widget.setTextColor(0x800000));

        widget.revalidate();
    }

    public void showWidget(String displayName, YamaUtilitiesConfig config)
    {
        duoDisplayNameWidget.setText("<col=000000>Party Plugin:</col> " + displayName);
        duoDisplayNameWidget.setAction(0, "Join");
        duoDisplayNameWidget.setOnOpListener((JavaScriptCallback) ev -> {
            Objects.requireNonNull(client.getWidget(InterfaceID.Chatbox.MES_TEXT2)).setText(displayName + "*");
            client.setVarcStrValue(VarClientStr.INPUT_TEXT, displayName);
        });
        Objects.requireNonNull(client.getWidget(InterfaceID.Chatbox.MES_TEXT2))
                .setOnKeyListener((JavaScriptCallback) ev -> {
                    // Numpad does not seem to be supported, getTypedKeyCode returns -1 on numpad usage.
                    final int typedCode = ev.getTypedKeyCode();
                    final int typedChar = ev.getTypedKeyChar();
                    final int enterBind = config.enterKeybind().getKeyCode();
                    final int fillBind  = config.autofillKeybind().getKeyCode();

                    final int awtEv;
                    if (typedCode == -1)
                    {
                        awtEv = typedChar;
                    } else
                    {
                        awtEv = keyCodeMap.getOrDefault(typedCode, -1);
                    }
                    client.runScript(112, typedCode, typedChar, "");

                    // Numpad works using only keychars, can't really make it ignored from keybinds.
                    // This means that a VK_1 will map to VK_NUMPAD1.
                    // Solution if someone uses a numpad is to not assign numbers as keybind.
                    // The only "real" solution would be afaik to write my own parser for the chat box, but I don't want to.
                    if (awtEv == enterBind)
                    {
                        // Enter sends 84, rest unused.
                        client.runScript(112, 84, 0, "");
                    } else if (awtEv == fillBind)
                    {
                        Objects.requireNonNull(client.getWidget(InterfaceID.Chatbox.MES_TEXT2)).setText(displayName + "*");
                        client.setVarcStrValue(VarClientStr.INPUT_TEXT, displayName);
                    }
                });
    }
}
package com.rr.bosses.yama;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.party.events.UserJoin;
import net.runelite.client.party.events.UserPart;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.*;
import java.text.DecimalFormat;
import java.util.List;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Getter
@Slf4j
@PluginDescriptor(
		name = "Yama Utilities",
		description = "This plugin contains various QoL features for the Yama encounter.",
		tags = {"combat", "bosses", "bossing", "pve", "pvm"})
public class YamaUtilitiesPlugin extends Plugin {

	private boolean currentlyInsideYamasDomain;
	private NPC voiceOfYama;
	private PartyPluginDuoInfo partyPluginDuoInfo;
	private DuoNameAutoFillWidget duoNameAutoFillWidget;

	private final Map<String, Integer> personalDamage = new HashMap<>(); // key = enemy name, value = damage dealt to the enemy by the player
	private final Map<String, Integer> totalDamage = new HashMap<>(); // key = enemy name, value = total damage dealt to the enemy
	public static final int VOICE_OF_YAMA_NPC_ID = 14185;
	public static final int YAMAS_NPC_ID = 14176;
	public static final int JUDGE_OF_YAMA_NPC_ID = 14180;
	public static final int VOID_FLARE_NPC_ID = 14179;
	public static final int YAMAS_DOMAIN_REGION_ID = 6045;
	public static final int VAR_CLIENT_INT_CAMERA_LOAD_ID = 384;
	public static final int YAMA_PHASE_TRANSITION_SCRIPT_ID = 948;
	public static final String YAMA = "Yama";
	public static final String JUDGE_OF_YAMA = "Judge of Yama";
	public static final String VOID_FLARE = "Void Flare";
	public static final DecimalFormat DMG_FORMAT = new DecimalFormat("#,##0");
	public static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("##0.0");
	public static final Set<String> ENEMY_NAMES = Set.of(
			YAMA, JUDGE_OF_YAMA, VOID_FLARE
	);
	public static final Set<String> PHASE_TRANSITION_OVERHEAD_TEXTS = Set.of(
			"Begone", "You bore me.", "Enough."
	);
	private static final Set<Integer> GAME_OBJECT_IDS_WHITELIST = Set.of(
			56247, 56249, 56264, 56358, 56265, 56335, 56336, 56337, 56338, 56339
	);
	private static final Set<Integer> WALL_OBJECTS_IDS_WHITELIST = Set.of(
			50909, 50910, 42251, 50908
	);
	private static final Set<Integer> GROUND_OBJECT_IDS_WHITELIST = Set.of(
			56358, 56246
	);

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private YamaUtilitiesConfig config;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private WSClient wsClient;

	@Inject
	private PartyService partyService;

	public YamaUtilitiesPlugin()
	{
		this.partyPluginDuoInfo = new PartyPluginDuoInfo(false);
	}

	@Override
	protected void startUp() throws Exception {
		initializeBossDamageMaps();
		this.partyPluginDuoInfo.resetFields();
		updatePlayerCurrentLocation();
		wsClient.registerMessage(PartyPluginDuoInfo.class);
	}

	@Override
	protected void shutDown() throws Exception {
		wsClient.unregisterMessage(PartyPluginDuoInfo.class);
		clientThread.invoke(() ->
		{
			if (config.hideScenery() != SceneryFunction.NONE && client.getGameState() == GameState.LOGGED_IN)
			{
				client.setGameState(GameState.LOADING);
			}
		});
	}

	@Provides
    YamaUtilitiesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(YamaUtilitiesConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e)
	{
		if ((e.getGroup().equals("yamautilities") && e.getKey().equals("hideScenery")) && currentlyInsideYamasDomain)
		{
			clientThread.invokeLater(() ->
			{
				if (client.getGameState() == GameState.LOGGED_IN)
				{
					client.setGameState(GameState.LOADING);
				}
			});
		}
	}

	@Subscribe(priority = 1) // run prior to plugins so that the member is joined by the time the plugins see it.
	public void onUserJoin(final UserJoin message)
	{
		if (this.partyService.getLocalMember() == null)
		{
			log.debug("Local member joined new party, resetting duo partner info.");
			this.partyPluginDuoInfo.resetFields();
		}
		sendPartyPluginDuoLocationMessage();
	}

	@Subscribe(priority = 1) // run prior to plugins so that the member is joined by the time the plugins see it.
	public void onUserPart(final UserPart message)
	{
		if (message.getMemberId() == this.partyPluginDuoInfo.getMemberId())
		{
			log.debug("Duo partner left the party, resetting duo partner info.");
			this.partyPluginDuoInfo.resetFields();
			setVoiceOfYamaOverheadText();
		}
	}

	@Subscribe
	public void onPartyPluginDuoInfo(PartyPluginDuoInfo event)
	{
		clientThread.invoke(() ->
		{
			log.debug("PartyPluginDuoLocation received with memberId = {} and in Yama's Domain = {}",
					event.getMemberId(),
					event.isCurrentlyInsideYamasDomain());
			if (event.getMemberId() == this.partyService.getLocalMember().getMemberId())
			{
				return;
			}
			if (this.partyPluginDuoInfo.getMemberId() == 0L || event.getMemberId() == this.partyPluginDuoInfo.getMemberId())
			{
				this.partyPluginDuoInfo = event;
				setVoiceOfYamaOverheadText();
				log.debug("Updated duo partner location.");
			}
		});
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied event)
	{
		if (!this.currentlyInsideYamasDomain)
		{
			return;
		}

		Hitsplat hitsplat = event.getHitsplat();

		if (hitsplat.getAmount() == 0)
		{
			return;
		}

		Actor actor = event.getActor();
		if (!(actor instanceof NPC))
		{
			return;
		}

		NPC npc = (NPC) actor;
		String npcName = Text.removeTags(npc.getName());

		if (npcName == null)
		{
			return;
		}

		if (hitsplat.getHitsplatType() == HitsplatID.HEAL)
		{
			//might add healing tracking here
			return;
		}

		if (hitsplat.isMine())
		{
			personalDamage.computeIfPresent(npcName, (k,v) -> v + hitsplat.getAmount());
		}
		totalDamage.computeIfPresent(npcName, (k,v) -> v + hitsplat.getAmount());

	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		if (event.getNpc().getId() == VOICE_OF_YAMA_NPC_ID)
		{
			this.voiceOfYama = event.getNpc();
			setVoiceOfYamaOverheadText();
			log.debug("Voice of Yama spawned.");
		}

		if (!this.currentlyInsideYamasDomain)
		{
			return;
		}

		if (event.getNpc().getId() == YAMAS_NPC_ID)
		{
			log.debug("Yama spawned.");
			initializeBossDamageMaps();
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned event)
	{
		if (event.getNpc().getId() == VOICE_OF_YAMA_NPC_ID)
		{
			this.voiceOfYama = null;
			log.debug("Voice of Yama despawned.");
		}

		if (!this.currentlyInsideYamasDomain)
		{
			return;
		}

		int npcId = event.getNpc().getId();
		if (npcId != YAMAS_NPC_ID && npcId != JUDGE_OF_YAMA_NPC_ID)
		{
			return;
		}

		if (npcId == YAMAS_NPC_ID)
		{
			if (this.config.printDamageToChat())
			{
				List<String> messages = new ArrayList<>(Collections.emptyList());
				int damageToYama = personalDamage.get(YAMA);

				String yamaDamageChatMessage = new ChatMessageBuilder()
						.append(ChatColorType.NORMAL)
						.append("Damage dealt to Yama - ")
						.append(Color.RED, DMG_FORMAT.format(damageToYama) + " (" + DECIMAL_FORMAT.format((double) damageToYama / totalDamage.get(YAMA) * 100) + "%)")
						.build();

				messages.add(yamaDamageChatMessage);

				int damageToJudge = personalDamage.get(JUDGE_OF_YAMA);
				String judgeDamageChatMessage = new ChatMessageBuilder()
						.append(ChatColorType.NORMAL)
						.append("Damage dealt to Judge of Yama - ")
						.append(Color.RED, DMG_FORMAT.format(damageToJudge) + " (" + DECIMAL_FORMAT.format((double) damageToJudge / totalDamage.get(JUDGE_OF_YAMA) * 100) + "%)")
						.build();

				messages.add(judgeDamageChatMessage);

				for (String message: messages)
				{
					chatMessageManager.queue(QueuedMessage.builder()
							.type(ChatMessageType.GAMEMESSAGE)
							.runeLiteFormattedMessage(message)
							.build());
				}
			}
		}
	}

	@Subscribe
	public void onVarClientIntChanged(VarClientIntChanged event)
	{
		if (event.getIndex() == VAR_CLIENT_INT_CAMERA_LOAD_ID)
		{
			updatePlayerCurrentLocation();
		}

		if (event.getIndex() != VarClientInt.INPUT_TYPE)
		{
			return;
		}

		if (client.getVarcIntValue(VarClientInt.INPUT_TYPE) != 2 && client.getVarcIntValue(VarClientInt.INPUT_TYPE) != 8)
		{
			return;
		}
		//Add widget to join duo partner at the Voice of Yama and Friends List if in a Party Plugin together.
		clientThread.invokeLater(() -> {
			String title = client.getWidget(InterfaceID.Chatbox.MES_TEXT).getText();
			Pattern titlePattern = Pattern.compile("(Whose fight would you like to join\\? You must be on their friends list\\.|Enter name of friend to add to list)");
			Matcher titleMatcher = titlePattern.matcher(title);
			if (titleMatcher.find() && partyService.isInParty())
			{
				String duoDisplayName = getDuoPartnerDisplayName();
				log.debug("duoDisplayName: {}", duoDisplayName);
				if (duoDisplayName != null)
				{
					log.debug("Creating duo widget.");
					Widget mesLayerWidget = client.getWidget(InterfaceID.Chatbox.MES_LAYER);
					duoNameAutoFillWidget = new DuoNameAutoFillWidget(mesLayerWidget, client);
					duoNameAutoFillWidget.showWidget(duoDisplayName, config);
				}
			}
		});
	}

	private void setVoiceOfYamaOverheadText()
	{
		if (this.voiceOfYama == null)
		{
			return;
		}

		if (!partyService.isInParty() || !this.partyPluginDuoInfo.isCurrentlyInsideYamasDomain())
		{
			this.voiceOfYama.setOverheadCycle(1);
			return;
		}

		this.voiceOfYama.setOverheadCycle(0);
		String duoDisplayName = partyService.getMemberById(this.partyPluginDuoInfo.getMemberId()).getDisplayName();
		if (duoDisplayName != null && !duoDisplayName.isEmpty() && !duoDisplayName.equalsIgnoreCase("<unknown>"))
		{
			this.voiceOfYama.setOverheadText(duoDisplayName + " has entered Yama's Domain");
		}
		else
		{
			this.voiceOfYama.setOverheadText("Duo partner has entered Yama's Domain");
		}
	}

	private String getDuoPartnerDisplayName()
	{
		if (!partyService.isInParty())
		{
			return null;
		}

		if (this.partyPluginDuoInfo.getMemberId() != 0L)
		{
			return partyService.getMemberById(this.partyPluginDuoInfo.getMemberId()).getDisplayName();
		}

		log.debug("party size = {}", partyService.getMembers().size());
		for (PartyMember partyMember: partyService.getMembers())
		{
			if (partyMember.getMemberId() != partyService.getLocalMember().getMemberId())
			{
				return partyService.getMemberById(partyMember.getMemberId()).getDisplayName();
			}
		}

		return null;
	}

	private void initializeBossDamageMaps()
	{
		for (String enemyName: ENEMY_NAMES)
		{
			personalDamage.put(enemyName, 0);
			totalDamage.put(enemyName, 0);
		}
	}

	private void updatePlayerCurrentLocation()
	{
		boolean updatedCurrentlyInsideYamasDomain = inYamasDomain();

		if (updatedCurrentlyInsideYamasDomain != this.currentlyInsideYamasDomain)
		{
			this.currentlyInsideYamasDomain = updatedCurrentlyInsideYamasDomain;
			log.debug("currentlyInsideYamasDomain updated to: {}", this.currentlyInsideYamasDomain);

			sendPartyPluginDuoLocationMessage();
		}
	}

	private void sendPartyPluginDuoLocationMessage()
	{
		if (!partyService.isInParty())
		{
			return;
		}

		log.debug("Sending updated location to party plugin. currentlyInsideYamasDomain: {}", this.currentlyInsideYamasDomain);
		PartyPluginDuoInfo duoInfo = PartyPluginDuoInfo.builder()
				.currentlyInsideYamasDomain(this.currentlyInsideYamasDomain)
				.build();
		partyService.send(duoInfo);
	}

	private void hideWallObjects()
	{
		if (config.hideScenery() == SceneryFunction.NONE)
		{
			return;
		}

		if (!inYamasDomain())
		{
			return;
		}

		Scene scene = client.getTopLevelWorldView().getScene();
		for (int x = 0; x < Constants.SCENE_SIZE; x++)
		{
			for (int y = 0; y < Constants.SCENE_SIZE; y++)
			{
				Tile tile = scene.getTiles()[client.getTopLevelWorldView().getPlane()][x][y];
				if (tile == null)
				{
					continue;
				}
				WallObject wallObject = tile.getWallObject();
				if (wallObject != null && !GAME_OBJECT_IDS_WHITELIST.contains(wallObject.getId()) && config.hideScenery() == SceneryFunction.SCENERY_AND_WALLS)
				{
					scene.removeTile(tile);
				}
			}
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		if (config.hideScenery() == SceneryFunction.NONE)
		{
			return;
		}

		if (!inYamasDomain())
		{
			return;
		}

		GameObject gameObject = event.getGameObject();
		int id = gameObject.getId();
		if (GAME_OBJECT_IDS_WHITELIST.contains(id) || (WALL_OBJECTS_IDS_WHITELIST.contains(id) && config.hideScenery() == SceneryFunction.SCENERY))
		{
			return;
		}
		client.getTopLevelWorldView().getScene().removeGameObject(gameObject);

		if (config.hideScenery() == SceneryFunction.SCENERY_AND_WALLS)
		{
			hideWallObjects();
		}
	}

	@Subscribe
	public void onGroundObjectSpawned(GroundObjectSpawned event)
	{
		if (config.hideScenery() == SceneryFunction.NONE)
		{
			return;
		}

		if (!inYamasDomain())
		{
			return;
		}

		GroundObject groundObject = event.getGroundObject();
		int id = groundObject.getId();
		if (GROUND_OBJECT_IDS_WHITELIST.contains(id))
		{
			return;
		}
		event.getTile().setGroundObject(null);
	}

	@Subscribe
	public void onScriptPreFired(ScriptPreFired event)
	{
		if (config.hideFadeTransition() && inYamasDomain() && event.getScriptId() == YAMA_PHASE_TRANSITION_SCRIPT_ID)
		{
			event.getScriptEvent().getArguments()[4] = 255;
			event.getScriptEvent().getArguments()[5] = 0;
		}
	}

	private boolean inYamasDomain()
	{
		if (client.getLocalPlayer() == null)
		{
			return false;
		}
		int currentRegionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
		return currentRegionId == YAMAS_DOMAIN_REGION_ID;
	}
}

package com.rr.bosses.yama;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import net.runelite.client.party.messages.PartyMemberMessage;

@Getter
@Setter
@Builder
@AllArgsConstructor
public class PartyPluginDuoInfo extends PartyMemberMessage
{
    boolean currentlyInsideYamasDomain;

    public void resetFields()
    {
        this.currentlyInsideYamasDomain = false;
        setMemberId(0L);
    }
}

package com.rr.bosses.yama;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum SceneryFunction
{
    NONE("OFF"),
    SCENERY("Scenery"),
    SCENERY_AND_WALLS("Scenery and Walls");

    private final String name;

    @Override
    public String toString()
    {
        return getName();
    }
}

package com.rr.bosses.yama;

import net.runelite.client.config.*;

@ConfigGroup("yamautilities")
public interface YamaUtilitiesConfig extends Config
{
	@ConfigSection(
			name = "Boss Damage Contribution",
			description = "Configure settings for the boss damage contribution settings",
			position = 0
	)
	String BOSS_DAMAGE_SETTINGS = "bossDamageSettings";

	@ConfigItem(
			keyName = "printDamageToChat",
			name = "Print Damage To Chat",
			description = "Print personal damage and percentage of total damage to the chat",
			section = BOSS_DAMAGE_SETTINGS,
			position = 0
	)
	default boolean printDamageToChat()
	{
		return true;
	}

	@ConfigSection(
			name = "Duo Name Autofill",
			description = "Configure duo's name auto fill settings",
			position = 1
	)
	String AUTOFILL_SETTINGS = "autofillSettings";

	@ConfigItem(
			keyName = "autofillKeybind",
			name = "Autofill Keybind",
			description = "DOES NOT SUPPORT MODIFIERS",
			section = AUTOFILL_SETTINGS,
			position = 0
	)
	default Keybind autofillKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			keyName = "enterKeybind",
			name = "Enter Keybind",
			description = "DOES NOT SUPPORT MODIFIERS",
			section = AUTOFILL_SETTINGS,
			position = 1
	)
	default Keybind enterKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigSection(
			name = "Hide Scenery and Effects",
			description = "",
			position = 2
	)
	String HIDE = "hide";

	@ConfigItem(
			keyName = "hideScenery",
			name = "Hide Scenery",
			description = "Hides scenery within Yama's Domain.",
			section = HIDE,
			position = 0
	)
	default SceneryFunction hideScenery()
	{
		return SceneryFunction.NONE;
	}

	@ConfigItem(
			keyName = "hideFadeTransition",
			name = "Hide Fade-out Transitions",
			description = "Hide the camera fade-out transitions between Yama's phases.",
			section = HIDE,
			position = 1
	)
	default boolean hideFadeTransition() 
	{
		return false;
	}
}

package com.rr.bosses.yama;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class YamaUtilitiesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(YamaUtilitiesPlugin.class);
		RuneLite.main(args);
	}
}
