package hjdarnel.emojipalette;

import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(name = "Emoji Palette")
public class EmojiPalettePlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	private NavigationButton navButton;

	@Override
	protected void startUp()
	{
		createEmojiPanel();
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}

	private void createEmojiPanel()
	{
		EmojiPanel emojiPanel = injector.getInstance(EmojiPanel.class);
		emojiPanel.init();
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon.png");

		navButton = NavigationButton.builder().tooltip("Emoji Picker").icon(icon).priority(10).panel(emojiPanel).build();

		clientToolbar.addNavigation(navButton);
	}
}

/*
 * Copyright (c) 2019, Lotto <https://github.com/devLotto>
 * Copyright (c) 2025, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package hjdarnel.emojipalette;

import com.google.common.collect.ImmutableMap;

enum Emoji
{
	SLIGHT_SMILE(0x1f642, ":)"),
	JOY(0x1f639, "=')"),
	COWBOY(0x1f920, "3:)"),
	BLUSH(0x1f60a, "^_^"),
	SMILE(0x1f601, ":D"),
	GRINNING(0x1f600, "=D"),
	WINK(0x1f609, ";)"),
	STUCK_OUT_TONGUE_CLOSED_EYES(0x1f61d, "X-P"),
	STUCK_OUT_TONGUE(0x1f61b, ":P"),
	YUM(0x1f60b, "=P~"),
	HUGGING(0x1f917, "<gt>:D<lt>"), // >:D<
	TRIUMPH(0x1f624, ":<gt>"), // :>
	THINKING(0x1f914, ":-?"),
	CONFUSED(0x1f615, ":/"),
	NEUTRAL_FACE(0x1f610, "=|"),
	EXPRESSIONLESS(0x1f611, ":|"),
	UNAMUSED(0x1f612, ":-|"),
	SLIGHT_FROWN(0x1f641, ":("),
	FROWNING2(0x1f626, "=("),
	CRY(0x1f622, ":'("),
	SOB(0x1f62d, ":_("),
	FLUSHED(0x1f633, ":$"),
	ZIPPER_MOUTH(0x1f910, ":-#"),
	PERSEVERE(0x1f623, "<gt>_<lt>"), // >_<
	SUNGLASSES(0x1f60e, "8-)"),
	INNOCENT(0x1f607, "O:)"),
	SMILING_IMP(0x1f608, "<gt>:)"), // >:)
	RAGE(0x1f621, "<gt>:("), // >:(
	HUSHED(0x1f62f, ":-O"),
	OPEN_MOUTH(0x1f62e, ":O"),
	SCREAM(0x1f631, ":-@"),
	SEE_NO_EVIL(0x1f648, "X_X"),
	DANCER(0x1f483, "\\:D/"),
	OK_HAND(0x1f44c, "(Ok)"),
	THUMBSUP(0x1f44d, "(Y)"),
	THUMBSDOWN(0x1f44e, "(N)"),
	HEARTS(0x2764, "<lt>3"), // <3
	BROKEN_HEART(0x1f494, "<lt>/3"), // </3
	ZZZ(0x1f4a4, "Zzz"),
	FISH(0x1f41f, "<lt><gt><lt>"), // <><
	CAT(0x1f431, ":3"),
	DOG(0x1f436, "=3"),
	CRAB(0x1f980, "V(;,;)V"),
	FORK_AND_KNIFE(0x1f374, "--E"),
	COOKING(0x1f373, "--(o)"),
	PARTY_POPPER(0x1f389, "@@@"),
	EYES(0x1f440, "O.O"),
	SWEAT(0x1f4a6, ";;"),
	PILE_OF_POO(0x1f4a9, "~@~"),
	FIRE(0x1f525, "(/\\)"),
	ALIEN(0x1f47d, "(@.@)"),
	EGGPLANT(0x1f346, "8=D"),
	WAVE(0x1f44b, "(^_^)/"),
	HEART_EYES(0x1f60d, "(*.*)"),
	FACEPALM(0x1f926, "M-)"),
	PENSIVE(0x1f614, "V_V"),
	ACORN(0x1f330, "<lt>D~"), // <D~
	GORILLA(0x1f98d, ":G"),
	PLEADING(0x1f97a, "(n_n)"),
	XD(0x1f606, "Xd"),
	SPOON(0x1f944, "--o"),
	WEARY_FACE(0x1f629, "Dx"),
	ROCKETSHIP(0x1f680, "<gt>==<gt>"), // >==>
	CLOWN(0x1f921, ":O)"),
	COW(0x1f42e, "3:O"),
	HANDSHAKE(0x1f91d, "(=)"),
	RABBIT(0x1f430, "=:3"),
	;

	static
	{
		ImmutableMap.Builder<String, Emoji> builder = new ImmutableMap.Builder<>();

		for (final Emoji emoji : values())
		{
			builder.put(emoji.trigger, emoji);
		}
	}

	final String trigger;
	final int codepoint;

	Emoji(int codepoint, String shortName)
	{
		this.trigger = shortName.replaceAll("<lt>", "<").replaceAll("<gt>", ">");
		this.codepoint = codepoint;
	}
}
package hjdarnel.emojipalette;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;

@Slf4j
class EmojiPanel extends PluginPanel
{

	private static final File EMOJI_DIR = new File(RuneLite.CACHE_DIR, "emojis");

	void init()
	{
		setBorder(new EmptyBorder(10, 10, 10, 10));

		final PluginErrorPanel errorPanel = new PluginErrorPanel();
		errorPanel.setBorder(new EmptyBorder(10, 25, 10, 25));
		errorPanel.setContent("Emoji Palette", "Hover over an emoji to view the text trigger");
		add(errorPanel, BorderLayout.NORTH);

		JPanel emojiGrid = new JPanel();
		emojiGrid.setLayout(new GridLayout(0, 7));
		emojiGrid.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		emojiGrid.setBorder(new EmptyBorder(5, 0, 5, 0));

		for (Emoji emoji : Emoji.values())
		{
			String name = emoji.name();
			String id = Integer.toHexString(emoji.codepoint);

			try
			{
				BufferedImage img = loadEmojiFromDisk(emoji.name(), id);

				JPanel oneCell = new JPanel();
				oneCell.setBackground(ColorScheme.DARKER_GRAY_COLOR);
				oneCell.setBorder(new EmptyBorder(2, 0, 2, 0));

				JLabel label = new JLabel(new ImageIcon(img));
				label.setToolTipText(emoji.trigger);

				oneCell.add(label);
				emojiGrid.add(oneCell);
			}
			catch (IOException e)
			{
				log.error("Unable to load emoji {}", name, e);
			}
		}

		add(emojiGrid);
	}

	private BufferedImage loadEmojiFromDisk(String name, String id) throws IOException
	{
		try (ZipFile zipFile = new ZipFile(new File(EMOJI_DIR, "assets.zip")))
		{
			ZipEntry entry = zipFile.getEntry(id + ".png");
			if (entry != null)
			{
				try (var in = zipFile.getInputStream(entry))
				{
					BufferedImage image;
					synchronized (ImageIO.class)
					{
						image = ImageIO.read(in);
					}

					log.debug("Loaded emoji {}: {}", name, id);
					return image;
				}
			}
			throw new IOException("file " + id + ".png doesn't exist");
		}
	}
}
package hjdarnel.emojipalette;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EmojiPalettePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EmojiPalettePlugin.class);
		RuneLite.main(args);
	}
}
