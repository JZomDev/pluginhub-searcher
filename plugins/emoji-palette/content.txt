package hjdarnel.emojipalette;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EmojiPalettePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EmojiPalettePlugin.class);
		RuneLite.main(args);
	}
}
package hjdarnel.emojipalette;

import java.awt.image.BufferedImage;
import java.lang.reflect.InvocationTargetException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Emoji Palette"
)
public class EmojiPalettePlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	private EmojiPanel emojiPanel;
	private NavigationButton navButton;
	private static final Pattern TAG_REGEXP = Pattern.compile("<[^>]*>");

	@Override
	protected void startUp() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException
	{
		createEmojiPanel();
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}

	private void createEmojiPanel() throws ClassNotFoundException, NoSuchMethodException, NoSuchFieldException, IllegalAccessException, InvocationTargetException
	{
		emojiPanel = injector.getInstance(EmojiPanel.class);
		emojiPanel.init();
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon.png");

		navButton = NavigationButton.builder()
			.tooltip("Emoji Picker")
			.icon(icon)
			.priority(10)
			.panel(emojiPanel)
			.build();

		clientToolbar.addNavigation(navButton);
	}

	/**
	 * Unescape a string for widgets, replacing &lt;lt&gt; and &lt;gt&gt; with their unescaped counterparts
	 */
	public static String unescapeTags(String str)
	{
		StringBuffer out = new StringBuffer();
		Matcher matcher = TAG_REGEXP.matcher(str);

		while (matcher.find())
		{
			matcher.appendReplacement(out, "");
			String match = matcher.group(0);
			switch (match)
			{
				case "<lt>":
					out.append("<");
					break;
				case "<gt>":
					out.append(">");
					break;
				case "<br>":
					out.append("\n");
					break;
				default:
					out.append(match);
			}
		}
		matcher.appendTail(out);

		return out.toString();
	}
}

package hjdarnel.emojipalette;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;

@Slf4j
class EmojiPanel extends PluginPanel
{

	void init() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException, ClassNotFoundException
	{
		setBorder(new EmptyBorder(10, 10, 10, 10));

		final PluginErrorPanel errorPanel = new PluginErrorPanel();
		errorPanel.setBorder(new EmptyBorder(10, 25, 10, 25));
		errorPanel.setContent("Emoji Palette", "Hover over an emoji to view the text trigger");
		add(errorPanel, BorderLayout.NORTH);

		JPanel emojiPanel = new JPanel();
		emojiPanel.setLayout(new GridLayout(0, 7));
		emojiPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		emojiPanel.setBorder(new EmptyBorder(5, 0, 5, 0));

		// get Emoji.values(), Emoji.trigger, and Emoji.loadImage() accessible using reflection
		Class<Enum<?>> emojisClass = (Class<Enum<?>>) getClass().getClassLoader().loadClass("net.runelite.client.plugins.emojis.Emoji");
		Method valuesMethod = emojisClass.getDeclaredMethod("values");
		valuesMethod.setAccessible(true);
		Field triggerField = emojisClass.getDeclaredField("trigger");
		triggerField.setAccessible(true);
		Method loadImageMethod = emojisClass.getDeclaredMethod("loadImage");
		loadImageMethod.setAccessible(true);

		for (final Enum<?> emoji : (Enum<?>[]) valuesMethod.invoke(null))
		{
			JPanel panel = makeEmojiPanel(emoji, triggerField, loadImageMethod);
			emojiPanel.add(panel);
		}

		add(emojiPanel);
	}

	// Builds a JPanel displaying an icon with tooltip
	private JPanel makeEmojiPanel(Enum<?> emoji, Field triggerField, Method loadImageMethod) throws IllegalAccessException, InvocationTargetException
	{
		JLabel label = new JLabel();
		label.setToolTipText(EmojiPalettePlugin.unescapeTags((String) triggerField.get(emoji)));
		label.setIcon(new ImageIcon((Image) loadImageMethod.invoke(emoji)));

		JPanel emojiPanel = new JPanel();
		emojiPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		emojiPanel.setBorder(new EmptyBorder(2, 0, 2, 0));
		emojiPanel.add(label);

		return emojiPanel;
	}
}
