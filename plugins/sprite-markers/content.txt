package com.spritemarkers;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SpriteMarkers
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SpriteMarkersPlugin.class);
		RuneLite.main(args);
	}
}
package com.spritemarkers;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.menus.WidgetMenuOption;

import javax.inject.Inject;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

public class ImportExportTool
{
    private static final WidgetMenuOption EXPORT_SPRITE_MARKERS = new WidgetMenuOption("Export", "Sprite Markers", WidgetInfo.MINIMAP_TOGGLE_RUN_ORB);
    private static final WidgetMenuOption IMPORT_SPRITE_MARKERS = new WidgetMenuOption("Import", "Sprite Markers", WidgetInfo.MINIMAP_TOGGLE_RUN_ORB);

    private final SpriteMarkersPlugin spriteMarkersPlugin;
    private final Client client;
    private final MenuManager menuManager;
    private final ChatMessageManager chatMessageManager;
    private final Gson gson;

    @Inject
    private ImportExportTool(SpriteMarkersPlugin plugin, Client client, ChatMessageManager chatMessageManager, MenuManager menuManager, Gson gson)
    {
        this.spriteMarkersPlugin = plugin;
        this.client = client;
        this.menuManager = menuManager;
        this.chatMessageManager = chatMessageManager;
        this.gson = gson;
    }

    void addOptions()
    {
        menuManager.addManagedCustomMenu(EXPORT_SPRITE_MARKERS, this::exportSpriteMarkers);
        menuManager.addManagedCustomMenu(IMPORT_SPRITE_MARKERS, this::importSpriteMarkers);
    }

    void removeOptions()
    {
        menuManager.removeManagedCustomMenu(EXPORT_SPRITE_MARKERS);
        menuManager.removeManagedCustomMenu(IMPORT_SPRITE_MARKERS);
    }

    private void exportSpriteMarkers(MenuEntry menuEntry)
    {
        final ArrayList<SpriteMarker> spriteMarkersLoaded = spriteMarkersPlugin.getSpriteMarkersLoaded();
        if (spriteMarkersLoaded.isEmpty())
        {
            addChatMessage("There are no loaded sprite markers to export");
            return;
        }

        final int[] loadedRegions = client.getMapRegions();
        if(loadedRegions == null || loadedRegions.length == 0)
        {
            return;
        }

        ArrayList<SpriteMarkerID> spriteIDSToSave = new ArrayList<>();
        for(int region : loadedRegions)
        {
            spriteIDSToSave.addAll(spriteMarkersPlugin.jsonToSprite(region));
        }

        String markersJSONString = this.gson.toJson(spriteIDSToSave);

        Toolkit.getDefaultToolkit()
                .getSystemClipboard()
                .setContents(new StringSelection(markersJSONString), null);
        addChatMessage("Copied loaded sprite markers to clipboard");
    }

    private void importSpriteMarkers(MenuEntry menuEntry)
    {
        final String text;
        try
        {
           text = Toolkit.getDefaultToolkit().getSystemClipboard()
                   .getData(DataFlavor.stringFlavor)
                   .toString();
        }
        catch (IOException | UnsupportedFlavorException e)
        {
            addChatMessage("Clipboard error - could not import sprite markers");
            return;
        }

        if(text.isEmpty() || text == null)
        {
            addChatMessage("Empty clipboard - could not import sprite markers");
            return;
        }

        ArrayList<SpriteMarkerID> spriteMarkerIDS = new ArrayList<>();

        try
        {
            spriteMarkerIDS = gson.fromJson(text, new TypeToken<ArrayList<SpriteMarkerID>>(){}.getType());
        }catch (JsonSyntaxException e)
        {
            addChatMessage("No Sprites in clipboard/Wrong formatting - could not import sprite markers");
            return;
        }

        if (spriteMarkerIDS == null || spriteMarkerIDS.isEmpty())
        {
            addChatMessage("No Sprite Markers in clipboard");
            return;
        }

        addToConfig(spriteMarkerIDS);
    }

    private void addToConfig(ArrayList<SpriteMarkerID> spriteMarkerIDS)
    {
        HashMap<Integer, ArrayList<SpriteMarkerID>> IDToMarkers = new HashMap<>();
        int currRegion;
        for(SpriteMarkerID spriteMarkerID : spriteMarkerIDS)
        {
            currRegion = spriteMarkerID.getRegionId();
            if(IDToMarkers.containsKey(currRegion))
            {
                IDToMarkers.get(currRegion).add(spriteMarkerID);
            }
            else
            {
                IDToMarkers.put(currRegion, new ArrayList<>(Collections.singletonList(spriteMarkerID)));
            }
        }

        for(int regionId : IDToMarkers.keySet())
        {
            spriteMarkersPlugin.saveSprite(regionId, IDToMarkers.get(regionId));
        }
        spriteMarkersPlugin.loadSprites();
        addChatMessage("Sprite Markers imported");
    }

    private void addChatMessage(String message)
    {
        chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(message)
                .build()
        );
    }
}

package com.spritemarkers;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class SpriteMarkerID {
    private int RegionId;
    private int RegionX;
    private int RegionY;
    private int plane;
    private int spriteId;
    private int scale;

    public SpriteMarkerID (int regionId, int regionX, int regionY, int plane, int spriteId, int scale)
    {
        setRegionId(regionId);
        setRegionX(regionX);
        setRegionY(regionY);
        setPlane(plane);
        setSpriteId(spriteId);
        setScale(scale);
    }

    public boolean equals(SpriteMarkerID spriteMarkerID)
    {
        return spriteMarkerID.getRegionId() == this.getRegionId() &&
                spriteMarkerID.getRegionX() == this.getRegionX() &&
                spriteMarkerID.getRegionY() == this.getRegionY() &&
                spriteMarkerID.getPlane() == this.getPlane();
    }
}
package com.spritemarkers;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

public class MinimapSpriteOverlay extends Overlay
{

    private final Client client;
    private final SpriteMarkersPlugin plugin;
    private final SpriteMarkersConfig config;

    private final static int MINIMAP_RADIUS = 16;
    private final static int BIG_SPRITE = 250;

    @Inject
    SpriteManager spriteManager;

    @Inject
    public MinimapSpriteOverlay(Client client, SpriteMarkersConfig config, SpriteMarkersPlugin plugin)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.LOW);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        if(!config.showSprites() || !config.showOnMap())
        {
            return null;
        }

        final ArrayList<SpriteMarker> spriteMarkers = plugin.getSpriteMarkersLoaded();

        if(spriteMarkers.isEmpty())
        {
            return null;
        }

        for(SpriteMarker spriteMarker : spriteMarkers)
        {
            drawMinimapSprite(graphics, spriteMarker);
        }
        return null;
    }

    private void drawMinimapSprite(Graphics2D graphics, SpriteMarker spriteMarker)
    {
        WorldPoint playerLoc = client.getLocalPlayer().getWorldLocation();

        if(playerLoc != null && playerLoc.distanceTo(spriteMarker.getWorldPoint()) <= MINIMAP_RADIUS)
        {
            LocalPoint localPoint = LocalPoint.fromWorld(client, spriteMarker.worldPoint);

            if(localPoint == null)
            {
                return;
            }

            Point miniMapPoint = Perspective.localToMinimap(client, localPoint);

            if(miniMapPoint == null)
            {
                return;
            }

            BufferedImage toImage =  spriteManager.getSprite(1, 0);

            try
            {
                toImage = spriteManager.getSprite(spriteMarker.getSpriteId(), 0);
            } catch (IllegalArgumentException e)
            {
                // not a sprite
            }

            if(toImage != null)
            {
                int scaleFactor = Math.min(toImage.getHeight(), toImage.getWidth()) / config.largeMapSpriteSize();

                if(Math.max(toImage.getHeight(), toImage.getWidth()) < BIG_SPRITE)
                {
                    scaleFactor = Math.min(toImage.getHeight(), toImage.getWidth()) / config.smallMapSpriteSize();
                }

                scaleFactor = Math.max(scaleFactor, 1);

                toImage = ImageUtil.resizeImage(toImage, toImage.getWidth() / scaleFactor, toImage.getHeight() / scaleFactor);
                Point offsetPoint = new Point(miniMapPoint.getX() - toImage.getWidth() / 2, miniMapPoint.getY() - toImage.getHeight() / 2);
                OverlayUtil.renderImageLocation(graphics, offsetPoint, toImage);
            }
        }
    }
}

package com.spritemarkers;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Tile;
import net.runelite.api.MenuAction;
import net.runelite.api.GameState;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import java.util.ArrayList;
import java.util.Collection;

@PluginDescriptor(
		name = "Sprite Markers",
		description = "Mark tiles with sprites",
		tags = {"overlay", "tiles"}
)
public class SpriteMarkersPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private SpriteMarkersConfig config;

	@Inject
	private SpriteMarkersOverlay overlay;

	@Inject
	private TileHighlighterOverlay highlighterOverlay;

	@Inject
	private MinimapSpriteOverlay minimapSpriteOverlay;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ImportExportTool importExportTool;

	@Inject
	private Gson gson;

	private final static int LEFT_CONTROL_KEYCODE = 82;
	private final static String ADD_SPRITE = "Add Sprite";
	private final static String REMOVE_SPRITE = "Remove Sprite";
	private final static String CANCEL = "Cancel";

	protected static final  String CONFIG_GROUP = "spriteMarkers";
	protected static final String REGION = "Region_";

	@Getter
	private final ArrayList<SpriteMarker> spriteMarkersLoaded = new ArrayList<>();

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlayManager.add(highlighterOverlay);
		overlayManager.add(minimapSpriteOverlay);
		importExportTool.addOptions();
		loadSprites();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		overlayManager.remove(highlighterOverlay);
		overlayManager.remove(minimapSpriteOverlay);
		importExportTool.removeOptions();
		spriteMarkersLoaded.clear();
	}

	private boolean containsSprite(ArrayList<SpriteMarkerID> spriteMarkerIDS, SpriteMarkerID targetSpriteMarker)
	{
		for(SpriteMarkerID spriteMarkerID : spriteMarkerIDS)
		{
			if(spriteMarkerID.equals(targetSpriteMarker))
			{
				return true;
			}
		}
		return false;
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded menuEntryEvent)
	{
		final boolean markerKeyPressed = client.isKeyPressed(LEFT_CONTROL_KEYCODE);

		if (markerKeyPressed && menuEntryEvent.getOption().equals(CANCEL))
		{
			final Tile targetTile = client.getSelectedSceneTile();

			if(targetTile != null)
			{
				final LocalPoint localPoint = targetTile.getLocalLocation();
				final WorldPoint worldLoc = WorldPoint.fromLocalInstance(client, localPoint);
				final int regionID = worldLoc.getRegionID();
				final SpriteMarkerID targetSpriteMarkerID = new SpriteMarkerID(regionID,
						worldLoc.getRegionX(), worldLoc.getRegionY(), client.getPlane(),
						config.spriteID(), config.scale());

				final ArrayList<SpriteMarkerID> savedSprites = jsonToSprite(regionID);
				final boolean spriteHere = containsSprite(savedSprites, targetSpriteMarkerID);

				if (!spriteHere)
				{
					client.createMenuEntry(-1).setOption(ADD_SPRITE)
							.setTarget(menuEntryEvent.getTarget())
							.setType(MenuAction.RUNELITE)
							.onClick(e -> addTileSprite());
				} else
				{
					client.createMenuEntry(-1).setOption(REMOVE_SPRITE)
							.setTarget(menuEntryEvent.getTarget())
							.setType(MenuAction.RUNELITE)
							.onClick(e -> removeTileSprite());
				}
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			loadSprites();
		}
	}

	private void addTileSprite()
	{
		final Tile targetTile = client.getSelectedSceneTile();
		if (targetTile != null)
		{
			final LocalPoint localPoint = targetTile.getLocalLocation();
			final WorldPoint worldLoc = WorldPoint.fromLocalInstance(client, localPoint);
			final int regionID = worldLoc.getRegionID();
			SpriteMarkerID spriteMarkerID = new SpriteMarkerID(regionID, worldLoc.getRegionX(), worldLoc.getRegionY(),
					client.getPlane(), config.spriteID(), config.scale());
			saveSprite(regionID, spriteMarkerID);
			loadSprites();
		}

	}

	private void removeTileSprite()
	{
		final Tile tile = client.getSelectedSceneTile();

		if(tile == null)
		{
			return;
		}

		final LocalPoint localPoint = tile.getLocalLocation();
		final WorldPoint targetLocation = WorldPoint.fromLocalInstance(client, localPoint);
		final int regionID = targetLocation.getRegionID();
		final SpriteMarkerID TargetSpriteMarkerID = new SpriteMarkerID(regionID, targetLocation.getRegionX(),
				targetLocation.getRegionY(), client.getPlane(), config.spriteID(), config.scale());

		ArrayList<SpriteMarkerID> currSprites = jsonToSprite(regionID);

		for (SpriteMarkerID spriteMarkerID : currSprites)
		{
			if(spriteMarkerID.equals(TargetSpriteMarkerID))
			{
				currSprites.remove(spriteMarkerID);
				break;
			}
		}

		if(!currSprites.isEmpty())
		{
			String spriteMarkersToJson = gson.toJson(currSprites);
			configManager.setConfiguration(CONFIG_GROUP, REGION + regionID, spriteMarkersToJson);
		} else
		{
			configManager.unsetConfiguration(CONFIG_GROUP, REGION + regionID);
		}

		loadSprites();
	}

	void saveSprite(int regionId, SpriteMarkerID newSprite)
	{
		ArrayList<SpriteMarkerID> currPoints = jsonToSprite(regionId);
		currPoints.add(newSprite);

		String spriteMarkersToJson = gson.toJson(currPoints);
		configManager.setConfiguration(CONFIG_GROUP, REGION + regionId, spriteMarkersToJson);
	}

	void saveSprite(int regionId, ArrayList<SpriteMarkerID> newSprites)
	{
		ArrayList<SpriteMarkerID> currPoints = jsonToSprite(regionId);
		currPoints.addAll(newSprites);

		String spriteMarkersToJson = gson.toJson(currPoints);
		configManager.setConfiguration(CONFIG_GROUP, REGION + regionId, spriteMarkersToJson);
	}

	void loadSprites()
	{
		spriteMarkersLoaded.clear();
		int[] loadedRegions = client.getMapRegions();

		if(loadedRegions != null)
		{
			for(int loadedRegion : loadedRegions)
			{
				ArrayList<SpriteMarkerID> regionSprites = jsonToSprite(loadedRegion);
				ArrayList<SpriteMarker> spriteMarkers = getSpriteMarkers(regionSprites);
				spriteMarkersLoaded.addAll(spriteMarkers);
			}
		}
	}

	ArrayList<SpriteMarkerID> jsonToSprite(int regionId)
	{
		String json = configManager.getConfiguration(CONFIG_GROUP, REGION + regionId);
		if(json != null && !json.equals(""))
		{
			return gson.fromJson(json, new TypeToken<ArrayList<SpriteMarkerID>>(){}.getType());
		} else
		{
			return new ArrayList<SpriteMarkerID>();
		}
	}

	private ArrayList<SpriteMarker> getSpriteMarkers(ArrayList<SpriteMarkerID> regionSprites)
	{
		if(regionSprites.isEmpty())
		{
			return new ArrayList<SpriteMarker>();
		}
		ArrayList<SpriteMarker> spriteMarkers = new ArrayList<SpriteMarker>();

		for (SpriteMarkerID spriteMarkerID : regionSprites)
		{
			WorldPoint worldLoc = WorldPoint.fromRegion(spriteMarkerID.getRegionId(), spriteMarkerID.getRegionX(),
					spriteMarkerID.getRegionY(), spriteMarkerID.getPlane());

			SpriteMarker spriteMarker = new SpriteMarker(spriteMarkerID.getSpriteId(), spriteMarkerID.getScale(), worldLoc);
			spriteMarkers.add(spriteMarker);
			final Collection<WorldPoint> localWorldPoints = WorldPoint.toLocalInstance(client, spriteMarker.getWorldPoint());

			for(WorldPoint worldPoint : localWorldPoints)
			{
				spriteMarkers.add(new SpriteMarker(spriteMarkerID.getSpriteId(), spriteMarkerID.getScale(), worldPoint));
			}
		}

		return spriteMarkers;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if(configChanged.getGroup().equals(CONFIG_GROUP) && configChanged.getKey().equals(SpriteMarkersConfig.SHOW_IMPORT))
		{
			if(config.showImport())
			{
				importExportTool.addOptions();
			}
			else
			{
				importExportTool.removeOptions();
			}
		}
	}


	@Provides
	SpriteMarkersConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SpriteMarkersConfig.class);
	}
}

package com.spritemarkers;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.coords.WorldPoint;

@Getter
@Setter
public class SpriteMarker
{
    int spriteId;
    int scale;
    WorldPoint worldPoint;

    public SpriteMarker(int spriteId, int scale, WorldPoint worldPoint)
    {
        this.spriteId = spriteId;
        this.scale = scale;
        this.worldPoint = worldPoint;
    }

    public String toString()
    {
        return this.worldPoint.toString();
    }
}

package com.spritemarkers;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("spriteMarkers")
public interface SpriteMarkersConfig extends Config
{
	String SHOW_IMPORT = "show import";
	@ConfigItem(
			position = 1,
			keyName = "showSprites",
			name = "Display Sprites",
			description = "Hides/Shows ground sprites"
	)
	default boolean showSprites()
	{
		return false;
	}

	@ConfigItem(
			position = 2,
			keyName = "spriteId",
			name = "Sprite ID",
			description = "What Sprite Id will be added"
	)
	default int spriteID()
	{
		return 1;
	}

	@ConfigItem(
			position = 3,
			keyName = "scale",
			name = "Sprite Scale",
			description = "The Scale of the sprite as a percent"
	)
	default int scale()
	{
		return 100;
	}

	@ConfigItem(
			position = 4,
			keyName = "showOnMap",
			name = "Show On Map",
			description = "Show the sprite on the minimap or not"
	)
	default boolean showOnMap()
	{
		return false;
	}

	@ConfigItem(
			position = 5,
			keyName = "smallMapSpriteSize",
			name = "Small Sprite Map Size",
			description = "The size that small sprites should be rendered on the minimap"
	)
	default int smallMapSpriteSize() {return 8; }

	@ConfigItem(
			position = 6,
			keyName = "largeMapSpriteSize",
			name = "Large Sprite Map Size",
			description = "The size that large sprites should be rendered on the minimap"
	)
	default int largeMapSpriteSize() {return 16; }

	@ConfigItem(
			position = 7,
			keyName = "highlightSprites",
			name = "Show Sprite Tiles",
			description = "Highlight the tiles sprites on to edit easier"
	)
	default boolean highlightSprites() {return false; }


	@ConfigItem(
			position = 8,
			keyName = "clear",
			name = "Clear Sprites",
			description = "Type clear to clear all loaded sprites"
	)
	default String clear()
	{
		return "------";
	}

	@ConfigItem(
			position = 9,
			keyName = SHOW_IMPORT,
			name = "Show Import/Export",
			description = "Show the import and export options under the run minimap orb"
	)
	default boolean showImport() {return false;}
}

package com.spritemarkers;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.util.ArrayList;

public class TileHighlighterOverlay extends Overlay
{

    private final Client client;
    private final SpriteMarkersPlugin plugin;
    private final SpriteMarkersConfig config;

    private static final int MAX_TILES = 32;

    @Inject
    public TileHighlighterOverlay(Client client, SpriteMarkersConfig config, SpriteMarkersPlugin plugin)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.MED);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        if(!config.showSprites() || !config.highlightSprites())
        {
            return null;
        }

        final ArrayList<SpriteMarker> spriteMarkers = plugin.getSpriteMarkersLoaded();

        if(spriteMarkers.isEmpty())
        {
            return null;
        }

        for(SpriteMarker spriteMarker : spriteMarkers)
        {
            WorldPoint playerLoc = client.getLocalPlayer().getWorldLocation();

            if(playerLoc.distanceTo(spriteMarker.getWorldPoint()) <= MAX_TILES)
            {
                WorldPoint worldLoc = spriteMarker.getWorldPoint();
                LocalPoint localPoint = LocalPoint.fromWorld(client, worldLoc);

                if(localPoint == null)
                {
                    return null;
                }

                Polygon tilePolygon = Perspective.getCanvasTilePoly(client, localPoint);
                if(tilePolygon != null)
                {
                    OverlayUtil.renderPolygon(graphics, tilePolygon, Color.WHITE);
                }
            }
        }
        return null;
    }
}

package com.spritemarkers;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.util.ImageUtil;

public class SpriteMarkersOverlay extends Overlay
{

    private final Client client;
    private final SpriteMarkersPlugin plugin;
    private final SpriteMarkersConfig config;

    private static final int MAX_TILES = 32;

    @Inject
    SpriteManager spriteManager;

    @Inject
    private ConfigManager configManager;

    @Inject
    public SpriteMarkersOverlay(Client client, SpriteMarkersConfig config, SpriteMarkersPlugin plugin)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.LOW);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if(!(config.showSprites()))
        {
            return null;
        }
        final ArrayList<SpriteMarker> spriteMarkers = plugin.getSpriteMarkersLoaded();
        if (spriteMarkers.isEmpty())
        {
            return null;
        }

        for(final SpriteMarker spriteMarker : spriteMarkers)
        {
            BufferedImage toImage =  spriteManager.getSprite(1, 0);

            try
            {
                toImage = spriteManager.getSprite(spriteMarker.getSpriteId(), 0);
            } catch (IllegalArgumentException e)
            {
                // not a sprite
            }

            WorldPoint playerLoc = client.getLocalPlayer().getWorldLocation();

            if(toImage != null && spriteMarker.worldPoint.distanceTo(playerLoc) <= MAX_TILES)
            {
                final WorldPoint worldLoc = spriteMarker.getWorldPoint();
                final LocalPoint locPoint = LocalPoint.fromWorld(client, worldLoc);

                if (locPoint == null)
                {
                    return null;
                }

                toImage = ImageUtil.resizeImage(toImage, toImage.getWidth() * spriteMarker.getScale() / 100, toImage.getHeight() * spriteMarker.getScale() / 100);
                OverlayUtil.renderImageLocation(client, graphics, locPoint, toImage, 0);
            }
        }

        if (config.clear().equals("clear"))
        {

            for(SpriteMarker spriteMarker : spriteMarkers)
            {
                if(configManager.getConfiguration(SpriteMarkersPlugin.CONFIG_GROUP, SpriteMarkersPlugin.REGION + spriteMarker.getWorldPoint().getRegionID()) != null)
                    configManager.unsetConfiguration(SpriteMarkersPlugin.CONFIG_GROUP, SpriteMarkersPlugin.REGION + spriteMarker.getWorldPoint().getRegionID());
            }

            plugin.getSpriteMarkersLoaded().clear();
        }
        return null;
    }
}

