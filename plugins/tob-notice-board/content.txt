/*
 * Copyright (c) 2021, Brooklyn <https://github.com/Broooklyn>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brooklyn.tobnoticeboard;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("tobnoticeboard")
public interface TobNoticeBoardConfig extends Config
{
	@ConfigItem(
		keyName = "highlightFriends",
		name = "Highlight Friends",
		description = "Whether or not to highlight friends' names on the notice board",
		position = 1
	)
	default boolean highlightFriends()
	{
		return true;
	}

	@ConfigItem(
		keyName = "friendColor",
		name = "Friend color",
		description = "The color with which to highlight names from your friends list",
		position = 2
	)
	default Color friendColor()
	{
		return new Color(0, 200, 83);
	}

	@ConfigItem(
		keyName = "highlightClan",
		name = "Highlight Clan members",
		description = "Whether or not to highlight clan chat members' names on the notice board",
		position = 3
	)
	default boolean highlightClan()
	{
		return true;
	}

	@ConfigItem(
		keyName = "clanColor",
		name = "Clan member color",
		description = "The color with which to highlight names from your current clan chat",
		position = 4
	)
	default Color clanColor()
	{
		return new Color(0, 255, 255);
	}

	@ConfigItem(
		keyName = "highlightIgnored",
		name = "Highlight Ignored players",
		description = "Whether or not to highlight ignored players on the notice board",
		position = 5
	)
	default boolean highlightIgnored()
	{
		return true;
	}

	@ConfigItem(
		keyName = "ignoredColor",
		name = "Ignored color",
		description = "The color with which to highlight names from your ignore list",
		position = 6
	)
	default Color ignoredColor()
	{
		return new Color(182, 0, 0);
	}

	@ConfigItem(
		keyName = TobNoticeBoardPlugin.CONFIG_KEY_HIGHLIGHT_LOBBY,
		name = "Highlight in Lobby",
		description = "Whether or not to highlight names in a lobby",
		position = 7
	)
	default boolean highlightInLobby()
	{
		return true;
	}

	@ConfigItem(
		keyName = TobNoticeBoardPlugin.CONFIG_KEY_FRIEND_NOTES,
		name = "Integrate with Friend Notes",
		description = "Show friend notes on the notice board. Requires the \"Friend Notes\" plugin to be enabled",
		position = 8
	)
	default boolean friendNotes()
	{
		return true;
	}
}

/*
 * Copyright (c) 2021, Brooklyn <https://github.com/Broooklyn>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brooklyn.tobnoticeboard;

import com.brooklyn.tobnoticeboard.friendnotes.FriendNoteManager;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Friend;
import net.runelite.api.FriendsChatMember;
import net.runelite.api.Ignore;
import net.runelite.api.NameableContainer;
import net.runelite.api.ScriptID;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "ToB Notice Board",
	description = "Highlight friends and clan members on the Theatre of Blood Notice Board",
	tags = "theatre, theater, pvm, combat, party, friend, clan, cc, fc, friendschat, clanchat, raids, hub, brooklyn"
)
public class TobNoticeBoardPlugin extends Plugin
{
	private static final int DEFAULT_RGB = 0xff981f;
	public static final int NOTICE_BOARD_COMPONENT_ID = 364;
	public static final int LOBBY_COMPONENT_ID = 50;
	public static final String CONFIG_KEY_HIGHLIGHT_LOBBY = "highlightInLobby";
	public static final String CONFIG_KEY_FRIEND_NOTES = "friendNotes";
	private boolean friendNotesEnabled = false;

	@Inject
	private Client client;

	@Inject
	private TobNoticeBoardConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private EventBus eventBus;

	@Inject
	private FriendNoteManager friendNotes;

	@Override
	public void startUp()
	{
		setNoticeBoard();
		eventBus.register(friendNotes);
		friendNotes.startUp();
	}

	@Override
	public void shutDown()
	{
		unsetNoticeBoard();
		eventBus.unregister(friendNotes);
		friendNotes.shutDown();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("tobnoticeboard"))
		{
			// Lobby highlighting has been disabled, reset the colors
			if (event.getKey().equals(CONFIG_KEY_HIGHLIGHT_LOBBY) && !config.highlightInLobby())
			{
				setLobbyColors(DEFAULT_RGB, DEFAULT_RGB, DEFAULT_RGB);
				return;
			}

			setNoticeBoard();
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded)
	{
		clientThread.invokeLater(() ->
		{
			if (widgetLoaded.getGroupId() == NOTICE_BOARD_COMPONENT_ID || widgetLoaded.getGroupId() == LOBBY_COMPONENT_ID)
			{
				setNoticeBoard();
			}
		});
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() == ScriptID.FRIENDS_UPDATE || event.getScriptId() == ScriptID.IGNORE_UPDATE)
		{
			setNoticeBoard();
		}
	}

	private void setNoticeBoardColors(int friendColor, int clanColor, int ignoreColor)
	{
		for (int childID = 17; childID < 62; ++childID)
		{
			Widget noticeBoard = client.getWidget(NOTICE_BOARD_COMPONENT_ID, childID);

			if (noticeBoard != null && noticeBoard.getName() != null && noticeBoard.getChildren() != null)
			{
				for (Widget noticeBoardChild : noticeBoard.getChildren())
				{
					if (noticeBoardChild.getIndex() == 3)
					{
						updatePlayerName(Party.NOTICE_BOARD, noticeBoardChild, noticeBoard.getName(), friendColor, clanColor, ignoreColor);
					}
				}
			}
		}
	}

	private void setLobbyColors(int friendColor, int clanColor, int ignoreColor)
	{
		int[] children = {27, 42}; // 0 - lobby, 1 - lobby applicants

		for (int childID : children)
		{
			Widget noticeBoard = client.getWidget(LOBBY_COMPONENT_ID, childID);

			if (noticeBoard != null && noticeBoard.getName() != null && noticeBoard.getChildren() != null)
			{
				for (Widget noticeBoardChild : noticeBoard.getChildren())
				{
					// each row is 11 widgets long, the second (idx: 1) widget is the player name
					if (noticeBoardChild.getIndex() % 11 == 1)
					{
						updatePlayerName(Party.LOBBY, noticeBoardChild, noticeBoardChild.getText(), friendColor, clanColor, ignoreColor);
					}
				}
			}
		}
	}

	private void updatePlayerName(Party party, Widget noticeBoardChild, String nameText, int friendColor, int clanColor, int ignoreColor)
	{
		NameableContainer<Ignore> ignoreContainer = client.getIgnoreContainer();
		NameableContainer<Friend> friendContainer = client.getFriendContainer();
		String playerName = Text.removeTags(nameText).trim();

		// Don't highlight the local player
		if (playerName.equals(client.getLocalPlayer().getName()))
		{
			return;
		}

		// Highlight friend/clan/ignored players
		if (ignoreContainer.findByName(playerName) != null)
		{
			noticeBoardChild.setTextColor(config.highlightIgnored() ? ignoreColor : DEFAULT_RGB);
		}
		else if (friendContainer.findByName(playerName) != null)
		{
			noticeBoardChild.setTextColor(config.highlightFriends() ? friendColor : DEFAULT_RGB);
		}
		else if (client.getFriendsChatManager() != null)
		{
			for (FriendsChatMember member : client.getFriendsChatManager().getMembers())
			{
				if (Text.toJagexName(member.getName()).equals(playerName))
				{
					noticeBoardChild.setTextColor(config.highlightClan() ? clanColor : DEFAULT_RGB);
				}
			}
		}

		// Add the note icon after the username (only shown on inside lobby widget)
		if (friendNotesEnabled && party.equals(Party.LOBBY) && !playerName.equals("-"))
		{
			final String note = friendNotes.getNote(playerName);

			if (note != null)
			{
				log.debug("Player: {}, Note: {}", playerName, note);
				friendNotes.updateWidget(noticeBoardChild, playerName);
			}
		}
	}

	private void setNoticeBoard()
	{
		int friendColor = config.friendColor().getRGB();
		int clanColor = config.clanColor().getRGB();
		int ignoreColor = config.ignoredColor().getRGB();
		friendNotesEnabled = friendNotes.isEnabled();

		setNoticeBoardColors(friendColor, clanColor, ignoreColor);

		if (config.highlightInLobby())
		{
			setLobbyColors(friendColor, clanColor, ignoreColor);
		}
	}

	private void unsetNoticeBoard()
	{
		setNoticeBoardColors(DEFAULT_RGB, DEFAULT_RGB, DEFAULT_RGB);
		setLobbyColors(DEFAULT_RGB, DEFAULT_RGB, DEFAULT_RGB);
	}

	@Provides
	TobNoticeBoardConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TobNoticeBoardConfig.class);
	}
}

package com.brooklyn.tobnoticeboard;

public enum Party
{
	NOTICE_BOARD,
	LOBBY,
}

package com.brooklyn.tobnoticeboard.friendnotes;

import com.brooklyn.tobnoticeboard.TobNoticeBoardConfig;
import com.brooklyn.tobnoticeboard.TobNoticeBoardPlugin;
import com.google.common.base.Strings;
import java.awt.image.BufferedImage;
import java.util.Optional;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.widgets.JavaScriptCallback;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ChatIconManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

/**
 * Adapter to interact with the default RuneLite "Friend Notes" plugin.
 *
 * @see net.runelite.client.plugins.friendnotes.FriendNotesPlugin
 */
@Slf4j
public class FriendNoteManager
{
	private static final String FRIEND_NOTES_CONFIG_GROUP = "friendNotes";
	private static final String FRIEND_NOTES_KEY_PREFIX = "note_";
	private static final int ICON_WIDTH = 14;
	private static final int ICON_HEIGHT = 12;
	private int iconId = -1;
	private int chatIconIndex = -1;

	@Inject
	private TobNoticeBoardConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ChatIconManager chatIconManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private FriendNoteOverlay overlay;

	@Inject
	private PluginManager pluginManager;

	@Getter
	private HoveredFriend hoveredFriend = null;

	public void startUp()
	{
		overlayManager.add(overlay);
		loadIcon();
	}

	public void shutDown()
	{
		overlayManager.remove(overlay);
	}

	/**
	 * Get the friend note of a display name, or null if no friend note exists for it.
	 */
	@Nullable
	public String getNote(String displayName)
	{
		final String sanitizedName = Text.toJagexName(Text.removeTags(displayName));
		return configManager.getConfiguration(FRIEND_NOTES_CONFIG_GROUP, FRIEND_NOTES_KEY_PREFIX + sanitizedName);
	}

	public void updateWidget(Widget widget, String playerName)
	{
		widget.setText(playerName + " <img=" + getNoteIcon() + ">");
		widget.setHasListener(true);
		widget.setOnMouseOverListener((JavaScriptCallback) ev -> setHoveredFriend(playerName));
		widget.setOnMouseLeaveListener((JavaScriptCallback) ev -> setHoveredFriend(null));
	}

	/**
	 * Set the currently hovered display name, if a friend note exists for it.
	 */
	private void setHoveredFriend(String displayName)
	{
		hoveredFriend = null;

		if (!Strings.isNullOrEmpty(displayName))
		{
			final String note = getNote(displayName);
			if (note != null)
			{
				hoveredFriend = new HoveredFriend(displayName, note);
			}
		}
	}

	private Integer getNoteIcon()
	{
		if (chatIconIndex != -1)
		{
			return chatIconIndex;
		}

		if (iconId != -1)
		{
			chatIconIndex = chatIconManager.chatIconIndex(iconId);
			return chatIconIndex;
		}

		return null;
	}

	private void loadIcon()
	{
		if (iconId != -1)
		{
			return;
		}

		final BufferedImage iconImg = ImageUtil.loadImageResource(TobNoticeBoardPlugin.class, "/note_icon.png");
		if (iconImg == null)
		{
			throw new RuntimeException("unable to load icon");
		}

		final BufferedImage resized = ImageUtil.resizeImage(iconImg, ICON_WIDTH, ICON_HEIGHT);
		iconId = chatIconManager.registerChatIcon(resized);
	}

	public boolean isEnabled()
	{
		if (!config.friendNotes())
		{
			return false;
		}

		final Optional<Plugin> friendNotePlugin = pluginManager.getPlugins().stream().filter(p -> p.getName().equals("Friend Notes")).findFirst();
		return friendNotePlugin.isPresent() && pluginManager.isPluginEnabled(friendNotePlugin.get());
	}
}

/*
 * Copyright (c) 2018, Rheon <https://github.com/Rheon-D>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package com.brooklyn.tobnoticeboard.friendnotes;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

class FriendNoteOverlay extends Overlay
{
	private final Client client;
	private final FriendNoteManager friendNotes;
	private final TooltipManager tooltipManager;

	@Inject
	private FriendNoteOverlay(Client client, FriendNoteManager friendNotes, TooltipManager tooltipManager)
	{
		this.client = client;
		this.friendNotes = friendNotes;
		this.tooltipManager = tooltipManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (client.isMenuOpen())
		{
			return null;
		}

		// Add a friend note tooltip to a hovered friend list entry
		final HoveredFriend hovered = friendNotes.getHoveredFriend();

		if (hovered != null) // Will always have a friend note if non-null
		{
			final String content = hovered.getNote();
			tooltipManager.add(new Tooltip(content));
		}

		return null;
	}
}

/*
 * Copyright (c) 2018, Rheon <https://github.com/Rheon-D>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package com.brooklyn.tobnoticeboard.friendnotes;

import lombok.Value;

@Value
class HoveredFriend
{
	private String friendName;
	private String note;
}

package com.brooklyn.tobnoticeboard;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TobNoticeBoardPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TobNoticeBoardPlugin.class);
		RuneLite.main(args);
	}
}
