package io.hydrox.masterscrollbook;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MasterScrollBookPluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MasterScrollBookPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2021, Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.masterscrollbook;

import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.Map;

public class MasterScrollBookOverlay extends WidgetItemOverlay
{
	private final Client client;
	private final MasterScrollBookPlugin plugin;
	private final TooltipManager tooltipManager;

	@Inject
	MasterScrollBookOverlay(Client client, MasterScrollBookPlugin plugin, TooltipManager tooltipManager)
	{
		this.client = client;
		this.plugin = plugin;
		this.tooltipManager = tooltipManager;

		showOnInventory();
		showOnBank();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		if (itemId != ItemID.MASTER_SCROLL_BOOK)
		{
			return;
		}

		Map<Scroll, Integer> counts = plugin.getCounts();
		StringBuilder tooltipBuilder = new StringBuilder();

		Scroll sel = plugin.getSelectedDefault();
		if (sel != null)
		{
			final Rectangle bounds = widgetItem.getCanvasBounds();
			final int drawX = bounds.x;
			final int drawY = bounds.y + bounds.height;
			final String text = counts.get(sel) + "";
			graphics.setFont(FontManager.getRunescapeSmallFont());
			graphics.setColor(Color.BLACK);
			graphics.drawString(text, drawX + 1, drawY + 1);
			graphics.setColor(Color.WHITE);
			graphics.drawString(text, drawX, drawY);

			tooltipBuilder
				.append(text)
				.append(" ")
				.append(ColorUtil.wrapWithColorTag(sel.getName(), Color.GREEN))
				.append("</br>");
		}

		if (!widgetItem.getCanvasBounds().contains(client.getMouseCanvasPosition().getX(), client.getMouseCanvasPosition().getY()))
		{
			return;
		}

		for (Scroll s : Scroll.values())
		{
			if (s == sel)
			{
				continue;
			}
			tooltipBuilder
				.append(counts.getOrDefault(s, 0))
				.append(" ")
				.append(ColorUtil.wrapWithColorTag(s.getName(), Color.YELLOW))
				.append("</br>");
		}

		tooltipManager.add(new Tooltip(tooltipBuilder.toString()));
	}
}

/*
 * Copyright (c) 2021, Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.masterscrollbook;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(MasterScrollBookConfig.GROUP)
public interface MasterScrollBookConfig extends Config
{
	String GROUP = "masterscrollbook";

	@ConfigItem(
		keyName = "showTeleportMessages",
		name = "Show teleport messages",
		description = "Show a message when teleporting that display the amount of that scroll you have left, like jewellery does"
	)
	default boolean showTeleportMessages()
	{
		return true;
	}
}

/*
 * Copyright (c) 2021-2022, Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.masterscrollbook;

import com.google.inject.Inject;
import com.google.inject.Provides;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import java.util.HashMap;
import java.util.Map;

@PluginDescriptor(
	name = "Master Scroll Book",
	description = "See the contents of your Master Scroll Book without opening it.",
	tags = {"scroll", "treasure", "book", "teleport", "overlay", "indicator"}
)
public class MasterScrollBookPlugin extends Plugin
{
	/**
	 * Index of selected default teleport scroll.
	 * 1-indexed
	 * Left->Right, Top->Bottom, Left Page->Right Page
	 */
	private static final int VARBIT_SELECTED_DEFAULT_SCROLL = 10966;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private MasterScrollBookConfig config;

	@Inject
	private MasterScrollBookOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Getter
	private final Map<Scroll, Integer> counts = new HashMap<>();

	@Getter
	private Scroll selectedDefault = null;

	@Provides
	MasterScrollBookConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MasterScrollBookConfig.class);
	}

	@Override
	public void startUp()
	{
		overlayManager.add(overlay);
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			clientThread.invoke(this::update);
		}
	}

	@Override
	public void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged e)
	{
		update();
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged e)
	{
		counts.clear();
	}

	private void update()
	{
		Scroll used = null;
		for (Scroll s : Scroll.values())
		{
			int newValue = client.getVarbitValue(s.getVarbit());
			Integer oldValue = counts.put(s, newValue);
			if (oldValue != null && oldValue == newValue + 1)
			{
				used = s;
			}
		}
		if (used != null && config.showTeleportMessages())
		{
			int value = counts.get(used);
			ChatMessageBuilder sb = new ChatMessageBuilder();
			sb.append(ChatColorType.HIGHLIGHT);
			sb.append("You have ");
			sb.append(Integer.toString(value));
			sb.append(" ");
			sb.append(used.getName());
			sb.append(" teleport scroll");
			if (value != 1)
			{
				sb.append("s");
			}
			sb.append(" left.");

			chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(sb.build())
				.build()
			);
		}

		int sel = client.getVarbitValue(VARBIT_SELECTED_DEFAULT_SCROLL);
		if (sel == 0)
		{
			selectedDefault = null;
		}
		else
		{
			selectedDefault = Scroll.get(sel - 1);
		}
	}
}

/*
 * Copyright (c) 2021, Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.masterscrollbook;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum Scroll
{
	NARDAH("Nardah", 5672),
	DIGSITE("Digsite", 5673),
	FELDIP_HILLS("Feldip Hills", 5674),
	LUNAR_ISLE("Lunar Isle", 5675),
	MORTTON("Mort'ton", 5676),
	PEST_CONTROL("Pest Control", 5677),
	PISCATORIS("Piscatoris", 5678),
	TAI_BWO_WANNAI("Tai Bwo Wannai", 5679),
	IOWERTH_CAMP("Iowerth Camp", 5680),
	MOS_LE_HARMLESS("Mos Le' Harmless", 5681),
	LUMBERYARD("Lumberyard", 5682),
	ZUL_ANDRA("Zul'andra", 5683),
	KEY_MASTER("Key Master", 5684),
	REVENANT_CAVES("Revenant Caves", 6056),
	WATSON("Watson", 8253),
	;

	private final String name;
	private final int varbit;

	public int getIndex()
	{
		return this.ordinal();
	}

	public static Scroll get(int idx)
	{
		return values()[idx];
	}

	public static int size()
	{
		return values().length;
	}
}

