package bankequipmentstatfilter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BankEquipmentStatFilterPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankEquipmentStatFilterPlugin.class);
		RuneLite.main(args);
	}
}
package bankequipmentstatfilter;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.AsyncBufferedImage;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
@Slf4j
public class BankEquipmentStatFilterPanel extends PluginPanel
{
    private static final int COLUMN_SIZE = 5;
    private static final int ICON_WIDTH = 36;
    private static final int ICON_HEIGHT = 32;

    @Inject
    ItemManager itemManager;

    @Inject
    BankEquipmentStatFilterPlugin plugin;

    @Inject
    BankEquipmentStatFilterConfig config;

    JPanel itemsPanel;

    JComboBox<EquipmentStat> statDropDown;

    JComboBox<EquipmentInventorySlot> slotDropDown;

    BankEquipmentStatFilterPanel()
    {
        setLayout(new BorderLayout());
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        JPanel selectionPanel = new JPanel();
        selectionPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        selectionPanel.setBorder(new EmptyBorder(10, 0, 10, 0));
        selectionPanel.setLayout(new GridLayout(0, 2));

        // Select Stat
        JLabel statLabel = new JLabel();
        statLabel.setText("Stat for equipment: ");
        selectionPanel.add(statLabel);

        statDropDown = new JComboBox<>(EquipmentStat.values());
        statDropDown.setFocusable(false);
        statDropDown.setRenderer(new EquipmentStatDropdownRenderer());
        selectionPanel.add(statDropDown);

        // Select Slot
        JLabel slotLabel = new JLabel();
        slotLabel.setText("Slot for equipment: ");
        selectionPanel.add(slotLabel);

        slotDropDown = new JComboBox<>(EquipmentInventorySlot.values());
        slotDropDown.setFocusable(false);
        slotDropDown.setRenderer(new SlotDropdownRenderer());
        selectionPanel.add(slotDropDown);

        // All Options at once
        JCheckBox allOptions = new JCheckBox();
        allOptions.setFocusable(false);
        allOptions.setText("Show all slots");

        allOptions.addActionListener((actionEvent) ->
        {
            if (allOptions.isSelected())
            {
                slotDropDown.setEnabled(false);
            }
            else
            {
                slotDropDown.setEnabled(true);
            }
        });
        allOptions.setSelected(true);

        selectionPanel.add(allOptions);

        // Button to search bank
        JButton filterButton = new JButton();
        filterButton.addActionListener((actionEvent) ->
        {
            plugin.bankFilter((EquipmentInventorySlot) slotDropDown.getSelectedItem(), (EquipmentStat) statDropDown.getSelectedItem(), allOptions.isSelected());
            repaint();
        });
        filterButton.setText("View Items");
        filterButton.setFocusable(false);
        selectionPanel.add(filterButton);

        add(selectionPanel, BorderLayout.NORTH);

        itemsPanel = new JPanel();
        itemsPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);
        itemsPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        itemsPanel.setLayout(new BoxLayout(itemsPanel, BoxLayout.Y_AXIS));

        add(itemsPanel);
    }

    public void displayItems(Map<Integer, List<ItemWithStat>> items, EquipmentStat statType, boolean allSlots)
    {

        itemsPanel.removeAll();

        int itemCount = 0;
        // loop through items
        for(Map.Entry<Integer, List<ItemWithStat>> entry : items.entrySet()) {
            Integer slotIdx = entry.getKey();
            List<ItemWithStat> slotItems;

            // Only apply the limit when we are showing all slots
            if (allSlots) {
                slotItems = entry.getValue()
                        .stream().limit(config.maxItemsPerSlot())
                        .collect(Collectors.toList());
            } else {
                slotItems = entry.getValue();
            }

            PaintGroup(slotItems, statType, slotIdx);
            itemCount += slotItems.size();
        }
        if (itemCount == 0){
            displayMessage("No items found.");
        }


        repaint();
        revalidate();
    }

    public EquipmentInventorySlot getEquipmentInventorySlot(int slotIdx) {
        for (EquipmentInventorySlot slot : EquipmentInventorySlot.values()) {
            if (slot.getSlotIdx() == slotIdx) {
                return slot;
            }
        }
        return null;
    }

    private void PaintGroup(List<ItemWithStat> items, EquipmentStat statType, Integer slotIdx){
        if (!items.isEmpty())
        {
            //print item names

            JPanel titlePanel = new JPanel();
            titlePanel.setLayout(new BorderLayout());

            //Get slot name
            JLabel slotLabel = new JLabel();
            slotLabel.setText(getEquipmentInventorySlot(slotIdx).name());
            slotLabel.setHorizontalAlignment(SwingConstants.CENTER);

            // Add to panel
            titlePanel.add(slotLabel, BorderLayout.CENTER);
            itemsPanel.add(titlePanel);

            JPanel itemContainer = new JPanel();
            itemContainer.setBackground(ColorScheme.DARK_GRAY_COLOR);
            itemContainer.setBorder(new EmptyBorder(10, 10, 10, 10));
            itemContainer.setLayout(new GridLayout(0, COLUMN_SIZE, 1, 1));

            for (ItemWithStat item : items) {
                JPanel itemPanel = new JPanel();
                JLabel itemLabel = new JLabel();

                itemLabel.setHorizontalAlignment(SwingConstants.CENTER);
                itemLabel.setVerticalAlignment(SwingConstants.CENTER);
                AsyncBufferedImage icon = itemManager.getImage(item.getId());
                icon.addTo(itemLabel);
                itemLabel.setSize(icon.getWidth(), icon.getHeight());
                itemLabel.setMaximumSize(new Dimension(ICON_WIDTH, ICON_HEIGHT));
                itemLabel.setToolTipText(String.format("%s (+%s)", item.getName(), plugin.getItemStat(item.getStats(), statType)));

                itemPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

                itemPanel.add(itemLabel);
                itemContainer.add(itemPanel);
            }
            if (items.size() % COLUMN_SIZE != 0)
            {
                for (int i = 0; i < COLUMN_SIZE - (items.size() % COLUMN_SIZE); i++)
                {
                    JPanel panel = new JPanel();
                    panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
                    itemContainer.add(panel);
                }
            }

            itemsPanel.add(itemContainer);
        }
    }

    public void displayMessage(final String message)
    {
        itemsPanel.removeAll();

        final JTextArea textArea = new JTextArea();
        textArea.setText(message);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setFocusable(false);
        textArea.setEditable(false);
        textArea.setBackground(ColorScheme.DARK_GRAY_COLOR);
        itemsPanel.add(textArea);

        repaint();
        revalidate();
    }

    private static class EquipmentStatDropdownRenderer extends DefaultListCellRenderer {
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            value = ((EquipmentStat) value).getDisplayName();
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    }

    private static class SlotDropdownRenderer extends DefaultListCellRenderer {
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            value = value.toString().substring(0, 1).toUpperCase() + value.toString().substring(1).toLowerCase();
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    }
}

package bankequipmentstatfilter;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.http.api.item.ItemStats;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.stream.Collectors;

@PluginDescriptor(
		name = "Bank Equipment Stat Filter",
		description = "Allows to filter/sort for equipment slot/stat",
		tags = {"bank", "stat", "equipment", "filter"}
)
@Slf4j
public class BankEquipmentStatFilterPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ItemManager itemManager;

	@Inject
	private ClientToolbar clientToolbar;

	private BankEquipmentStatFilterPanel panel;

	private NavigationButton navButton;

	private ItemWithStat[] items;

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getItemContainer() == client.getItemContainer(InventoryID.BANK))
		{
			Item[] bankItems = event.getItemContainer().getItems();

			items = Arrays.stream(bankItems)
					.map(item -> {
						ItemStats stats = itemManager.getItemStats(item.getId(), false);
						ItemComposition composition = itemManager.getItemComposition(item.getId());
						if (stats == null || !stats.isEquipable()) {
							return null;
						}
						return new ItemWithStat(item.getId(), stats, composition.getName());
					})
					.filter(Objects::nonNull)
					.toArray(ItemWithStat[]::new);
		}
	}

	@Override
	protected void startUp()
	{
		panel = injector.getInstance(BankEquipmentStatFilterPanel.class);

		final BufferedImage icon = ImageUtil.loadImageResource(BankEquipmentStatFilterPlugin.class, "pluginIcon.png");

		navButton = NavigationButton.builder()
				.tooltip("Bank Equipment Stat Filtering")
				.icon(icon)
				.panel(panel)
				.priority(6)
				.build();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}

	public void bankFilter(EquipmentInventorySlot slot, EquipmentStat statType, boolean allSlots)
	{
		if (items == null) {
			panel.displayMessage("You need to open your bank once so the plugin can sync with it");
			return;
		}


		Map<Integer, List<ItemWithStat>> sortedItems = Arrays.stream(items)
				.filter(item -> getItemStat(item.getStats(), statType) > 0 && (item.getStats().getEquipment().getSlot() == slot.getSlotIdx() || allSlots))
				.collect(Collectors.groupingBy(item -> item.getStats().getEquipment().getSlot()));

		sortedItems.forEach((slotIdx, slotItems) -> {
			// Mutate the list to sort it by the stat
			slotItems.sort(Comparator.comparing(item -> getItemStat(item.getStats(), statType), Comparator.reverseOrder()));
		});
		panel.displayItems(sortedItems, statType, allSlots);
	}

	public int getItemStat(ItemStats stats, EquipmentStat stat)
	{
		if (stats == null || !stats.isEquipable())
		{
			return -1;
		}
		switch (stat) {
			case STAB_ATTACK:
				return stats.getEquipment().getAstab();
			case SLASH_ATTACK:
				return stats.getEquipment().getAslash();
			case CRUSH_ATTACK:
				return stats.getEquipment().getAcrush();
			case MAGIC_ATTACK:
				return stats.getEquipment().getAmagic();
			case RANGE_ATTACK:
				return stats.getEquipment().getArange();
			case STAB_DEFENCE:
				return stats.getEquipment().getDstab();
			case SLASH_DEFENCE:
				return stats.getEquipment().getDslash();
			case CRUSH_DEFENCE:
				return stats.getEquipment().getDcrush();
			case MAGIC_DEFENCE:
				return stats.getEquipment().getDmagic();
			case RANGE_DEFENCE:
				return stats.getEquipment().getDrange();
			case MELEE_STRENGTH:
				return stats.getEquipment().getStr();
			case RANGE_STRENGTH:
				return stats.getEquipment().getRstr();
			case MAGIC_DAMAGE:
				return stats.getEquipment().getMdmg();
			case PRAYER:
				return stats.getEquipment().getPrayer();
			default:
				return -1;
		}
	}

	@Provides
	BankEquipmentStatFilterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BankEquipmentStatFilterConfig.class);
	}
}

package bankequipmentstatfilter;

public enum EquipmentStat {
    STAB_ATTACK("Stab Attack"),
    SLASH_ATTACK("Slash Attack"),
    CRUSH_ATTACK("Crush Attack"),
    MAGIC_ATTACK("Magic Attack"),
    RANGE_ATTACK("Range Attack"),
    STAB_DEFENCE("Stab Defence"),
    SLASH_DEFENCE("Slash Defence"),
    CRUSH_DEFENCE("Crush Defence"),
    MAGIC_DEFENCE("Magic Defence"),
    RANGE_DEFENCE("Range Defence"),
    MELEE_STRENGTH("Melee Strength"),
    RANGE_STRENGTH("Range Strength"),
    MAGIC_DAMAGE("Magic Damage"),
    PRAYER("Prayer");

    EquipmentStat(String displayName) {
        this.displayName = displayName;
    }

    private final String displayName;

    public String getDisplayName() {
        return displayName;
    }
}

package bankequipmentstatfilter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("bankequipmentstatfilter")
public interface BankEquipmentStatFilterConfig extends Config
{
    @ConfigItem(
            keyName = "maxItemsPerSlot",
            name = "Max Items Per Slot",
            description = "Specify the maximum number of items displayed per slot"
    )
    default int maxItemsPerSlot()
    {
        return 7; // Default value
    }
}
package bankequipmentstatfilter;

import lombok.Value;
import net.runelite.http.api.item.ItemStats;

@Value
public class ItemWithStat
{
    int id;
    ItemStats stats;
    String name;
}

