package tictac7x.capslock;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.MessageNode;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.util.LinkedList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "CAPS LOCK",
	description = "ALLOW CAPS LOCK MESSAGES",
	tags = { "caps", "lock"	}
)
public class TicTac7xCapsLockPlugin extends Plugin {
	@Subscribe
	public void onOverheadTextChanged(final OverheadTextChanged event) {
		final String message = event.getOverheadText().trim();
		if (isMessageValidForCapsLock(message)) {
			event.getActor().setOverheadText(capsLockMessage(message));
		}
	}

	@Subscribe
	public void onChatMessage(final ChatMessage chatMessage) {
		switch (chatMessage.getType()) {
			case PUBLICCHAT:
			case MODCHAT:
			case FRIENDSCHAT:
			case CLAN_CHAT:
			case CLAN_GUEST_CHAT:
			case CLAN_GIM_CHAT:
			case PRIVATECHAT:
			case PRIVATECHATOUT:
			case MODPRIVATECHAT:
				break;
			default:
				return;
		}

		final MessageNode messageNode = chatMessage.getMessageNode();
		final String message = messageNode.getValue();

		if (isMessageValidForCapsLock(message)) {
			messageNode.setValue(capsLockMessage(message));
		}
	}

	boolean isMessageValidForCapsLock(final String message) {
		final String[] words = message.trim().split("\\s+");
		if (words.length == 1) return false;

		final List<String> cleanedWords = new LinkedList<>();
		for (final String rawWord : words) {
			final String cleanedWord = rawWord.replaceAll("[^a-zA-Z]", "");
			if (!cleanedWord.isEmpty()) {
				cleanedWords.add(cleanedWord);
			}
		}

		if (cleanedWords.size() == 1) return false;

		for (final String cleanedWord : cleanedWords) {
			if (!Character.isUpperCase(cleanedWord.charAt(0))) {
				return false;
			}
		}

		return true;
	}

	String capsLockMessage(final String message) {
		return message.toUpperCase();
	}
}

package tictac7x.capslock;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TicTac7xCapsLockPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xCapsLockPlugin.class);
		RuneLite.main(args);
	}

	@Test
	public void testIsValidMessageForCapsLock() {
		final TicTac7xCapsLockPlugin plugin = new TicTac7xCapsLockPlugin();

		final String message1 = "Yes";
		assertEquals(false, plugin.isMessageValidForCapsLock(message1));

		final String message2 = "No :)";
		assertEquals(false, plugin.isMessageValidForCapsLock(message2));

		final String message3 = "Yes Please";
		assertEquals(true, plugin.isMessageValidForCapsLock(message3));

		final String message4 = "Buy 10";
		assertEquals(false, plugin.isMessageValidForCapsLock(message4));

		final String message5 = "Buy 10 More";
		assertEquals(true, plugin.isMessageValidForCapsLock(message5));

		final String message6 = "Test 123T";
		assertEquals(true, plugin.isMessageValidForCapsLock(message6));

		final String message7 = "Should Pass :)";
		assertEquals(true, plugin.isMessageValidForCapsLock(message7));
	}
}
