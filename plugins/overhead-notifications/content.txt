package com.shuddie.overhead;

import java.awt.*;
import java.util.function.BooleanSupplier;
import java.util.function.Supplier;

public class TriggerRule {
    final String triggerKey;
    final String keyword;
    final BooleanSupplier isEnabled;
    final Supplier<String> messageSupplier;
    final Supplier<Color> colorSupplier;
    final int durationOverride;

    TriggerRule(String triggerKey, String keyword,
                BooleanSupplier isEnabled,
                Supplier<String> messageSupplier,
                Supplier<Color> colorSupplier,
                int durationOverride) {
        this.triggerKey = triggerKey;
        this.keyword = keyword;
        this.isEnabled = isEnabled;
        this.messageSupplier = messageSupplier;
        this.colorSupplier = colorSupplier;
        this.durationOverride = durationOverride;
    }

    boolean matches(String msg) {
        return msg.contains(keyword);
    }
}

package com.shuddie.overhead;

public enum DeathChargeTimerState
{
	IDLE,
	ACTIVE,
	EXPIRED,
}
package com.shuddie.overhead;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.Notifier;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.awt.*;
import java.util.regex.Pattern;
import java.util.List;

@Slf4j
@PluginDescriptor(
        name = "Overhead Notification",
        description = "Shows overhead text when boosts expire",
        tags = {"overhead", "notification", "chat", "thrall", "overload", "boost"}
)
public class OverheadNotificationsPlugin extends Plugin
{
    private static final String MSG_OVERLOAD_WORN_OFF = "overload have worn off";
    private static final String MSG_SMELLING_SALT_WORN_OFF = "smelling salts has worn off";
    private static final String MSG_DIVINE_POTION_WORN_OFF = "divine potion have worn off";
    private static final String MSG_PRAYER_REGEN = "prayer regeneration";
    private static final String MSG_PRAYER_ENHANCE_WORN_OFF = "prayer enhance effect has worn off";
    private static final String MSG_THRALL_RETURNS = "thrall returns to the grave";
    private static final String MSG_MARK_OF_DARKNESS_FADED = "Mark of Darkness has faded away";
    private static final String MSG_SATURATED_HEART_WORN_OFF = "saturated heart have worn off";
    private static final String MSG_STAMINA_EXPIRED = "stamina enhancement has expired";
    private static final String MSG_SOULFLAMEHORN_1 = "encourages you with their Soulflame horn";
    private static final String MSG_SOULFLAMEHORN_2 = "You encourage nearby allies";
    private static final String MSG_SURGE_POTION_READY = "capable of drinking another dose of surge potion";
    public static final Pattern DEATH_CHARGE_ACTIVE =
            Pattern.compile("<col=[A-Fa-f\\d]+>Upon the death of your next foe, some of your special attack energy will be restored\\.</col>");

    public static final Pattern UPGRADED_DEATH_CHARGE_ACTIVE =
            Pattern.compile("<col=[A-Fa-f\\d]+>Upon the death of your next two foes, some of your special attack energy will be restored\\.</col>");

    @Inject
    private Client client;

    @Inject
    private Notifier notifier;

    @Inject
    private ChatMessageManager chatMessageManager;

    @Inject
    private OverheadNotificationsConfig config;

    @Inject
    private Overhead overhead;

    private String lastTrigger = null;
    private DeathChargeTimer timer = null;
    private List<TriggerRule> triggerRules;

    @Override
    protected void startUp()
    {
        log.info("Overhead Notification Plugin started!");
        timer = new DeathChargeTimer();

        triggerRules = List.of(
                new TriggerRule("Overload", MSG_OVERLOAD_WORN_OFF, config::enableOverload, config::overloadMessage, config::overloadColor, 0),
                new TriggerRule("Smelling Salt", MSG_SMELLING_SALT_WORN_OFF, config::enableSmellingSalt, config::smellingSaltMessage, config::smellingSaltColor, 0),
                new TriggerRule("Divine Pot", MSG_DIVINE_POTION_WORN_OFF, config::enableDivinePot, config::divinePotMessage, config::divinePotColor, 0),
                new TriggerRule("Prayer Regen", MSG_PRAYER_REGEN, config::enablePrayerRegen, config::prayerRegenMessage, config::prayerRegenColor, 0),
                new TriggerRule("Prayer Enhance", MSG_PRAYER_ENHANCE_WORN_OFF, config::enablePrayerEnhance, config::prayerEnhanceMessage, config::prayerEnhanceColor, 0),
                new TriggerRule("Thrall", MSG_THRALL_RETURNS, config::enableThrall, config::thrallMessage, config::thrallColor, 0),
                new TriggerRule("Mark of Darkness", MSG_MARK_OF_DARKNESS_FADED, config::enableMarkOfDarkness, config::markOfDarknessMessage, config::markOfDarknessColor, 0),
                new TriggerRule("Saturated Heart", MSG_SATURATED_HEART_WORN_OFF, config::enableSaturatedHeart, config::saturatedHeartMessage, config::saturatedHeartColor, 0),
                new TriggerRule("Stamina", MSG_STAMINA_EXPIRED, config::enableStamina, config::staminaMessage, config::staminaColor, 0),
                new TriggerRule("Soulflamehorn", MSG_SOULFLAMEHORN_1, config::enableSoulflameHorn, config::soulflameHornMessage, config::soulflameHornColor, 6),
                new TriggerRule("Soulflamehorn", MSG_SOULFLAMEHORN_2, config::enableSoulflameHorn, config::soulflameHornMessage, config::soulflameHornColor, 6),
                new TriggerRule("Surge", MSG_SURGE_POTION_READY, config::enableSurgePotion, config::surgePotionMessage, config::surgePotionColor, 0)
        );
    }

    @Override
    protected void shutDown()
    {
        log.info("Overhead Notification Plugin stopped!");
        timer = null;
        triggerRules.clear();
    }

    @Subscribe
    public void onChatMessage(ChatMessage event)
    {
        if (event.getType() != ChatMessageType.GAMEMESSAGE)
        {
            return;
        }

        final String msg = event.getMessage();

        if (config.enableDeathCharge() && (msg.matches(DEATH_CHARGE_ACTIVE.pattern()) || msg.matches(UPGRADED_DEATH_CHARGE_ACTIVE.pattern())))
        {
            timer.start();
            return;
        }

        for (TriggerRule rule : triggerRules)
        {
            if (rule.isEnabled.getAsBoolean() && rule.matches(msg))
            {
                triggerAlert(
                        rule.triggerKey,
                        rule.messageSupplier.get(),
                        rule.colorSupplier.get(),
                        rule.durationOverride
                );
                return;
            }
        }
    }

    @Subscribe
    public void onGameTick(GameTick e)
    {
        switch (this.timer.getState()) {
            case EXPIRED:
                triggerAlert("Death Charge", config.deathchargeMessage(), config.deathchargeColor(), 0);
                timer.stop();
                break;
            case IDLE:
            default:
                break;
        }
    }

    @Subscribe
    public void onStatChanged(StatChanged event) {
        if (!"Soulflamehorn".equals(lastTrigger)) {
            return;
        }

        Skill skill = event.getSkill();

        if (skill == Skill.ATTACK || skill == Skill.STRENGTH || skill == Skill.DEFENCE){
            triggerAlert("Clear","", Color.BLACK,0);
        }
    }

    private void triggerAlert(String triggerKey, String message, java.awt.Color color, int duration)
    {
        lastTrigger = triggerKey;
        overhead.show(
                message,
                new String[] { triggerKey },
                color,
                duration > 0 ? duration : config.overheadDisplayTime()
        );
    }

    @Provides
    OverheadNotificationsConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(OverheadNotificationsConfig.class);
    }
}

package com.shuddie.overhead;

import net.runelite.client.config.*;
import java.awt.*;

@ConfigGroup("overheadnotifications")
public interface OverheadNotificationsConfig extends Config
{
	@ConfigItem(keyName = "overheadDisplayTime", name = "Overhead Display Time", description = "Time to display overhead text (in seconds)")
	default int overheadDisplayTime() { return 3; }
	// ====== SECTION: Boosts ======
	@ConfigSection(name = "Boosts", description = "Settings for boosts-related potions", position = 0)
	String boostsSection = "boostsSection";

	@ConfigItem(keyName = "enableOverload", name = "Enable Overload", description = "Enable overhead for Overload", section = boostsSection, position = 0)
	default boolean enableOverload() { return false; }
	@ConfigItem(keyName = "overloadColor", name = "Overload Color", description = "Text color for Overload", section = boostsSection, position = 1)
	default Color overloadColor() { return Color.RED; }
	@ConfigItem(keyName = "overloadMessage", name = "Overload Message", description = "Message for Overload", section = boostsSection, position = 2)
	default String overloadMessage() { return "Overload Expired!"; }

	@ConfigItem(keyName = "enableSmellingSalt", name = "Enable Smelling Salt", description = "Enable overhead for Smelling Salt", section = boostsSection, position = 3)
	default boolean enableSmellingSalt() { return false; }
	@ConfigItem(keyName = "smellingSaltColor", name = "Smelling Salt Color", description = "Text color for Smelling Salt", section = boostsSection, position = 4)
	default Color smellingSaltColor() { return Color.ORANGE; }
	@ConfigItem(keyName = "smellingSaltMessage", name = "Smelling Salt Message", description = "Message for Smelling Salt", section = boostsSection, position = 5)
	default String smellingSaltMessage() { return "Smelling Salt Expired!"; }

	@ConfigItem(keyName = "enableDivinePot", name = "Enable Divine Pot", description = "Enable overhead for any divine potion", section = boostsSection, position = 6)
	default boolean enableDivinePot() { return false; }
	@ConfigItem(keyName = "divinePotColor", name = "Divine Pot Color", description = "Text color for divine potion overhead text", section = boostsSection, position = 7)
	default Color divinePotColor() { return Color.GREEN; }
	@ConfigItem(keyName = "divinePotMessage", name = "Divine Pot Message", description = "Message to display for any divine potion", section = boostsSection, position = 8)
	default String divinePotMessage() { return "Divine Expired!"; }

	// ====== SECTION: Prayer ======
	@ConfigSection(name = "Prayer", description = "Settings for prayer-related potions", position = 2)
	String prayerSection = "prayerSection";

	@ConfigItem(keyName = "enablePrayerRegen", name = "Enable Prayer Regen", description = "Enable overhead for Prayer Regeneration", section = prayerSection, position = 0)
	default boolean enablePrayerRegen() { return false; }
	@ConfigItem(keyName = "prayerRegenColor", name = "Prayer Regen Color", description = "Text color for Prayer Regen", section = prayerSection, position = 1)
	default Color prayerRegenColor() { return Color.PINK; }
	@ConfigItem(keyName = "prayerRegenMessage", name = "Prayer Regen Message", description = "Message for Prayer Regen", section = prayerSection, position = 2)
	default String prayerRegenMessage() { return "Prayer regeneration potion Expired!"; }

	@ConfigItem(keyName = "enablePrayerEnhance", name = "Enable Prayer Enhance", description = "Enable overhead for Prayer Enhance", section = prayerSection, position = 3)
	default boolean enablePrayerEnhance() { return false; }
	@ConfigItem(keyName = "prayerEnhanceColor", name = "Prayer Enhance Color", description = "Text color for Prayer Enhance", section = prayerSection, position = 4)
	default Color prayerEnhanceColor() { return Color.PINK; }
	@ConfigItem(keyName = "prayerEnhanceMessage", name = "Prayer Enhance Message", description = "Message for Prayer Enhance", section = prayerSection, position = 5)
	default String prayerEnhanceMessage() { return "Prayer enhance potion Expired!"; }

	// ====== SECTION: Other ======
	@ConfigSection(name = "Other", description = "Other special cases", position = 3)
	String otherSection = "otherSection";

	@ConfigItem(keyName = "enableThrall", name = "Enable Thrall", description = "Enable overhead for Thralls", section = otherSection, position = 0)
	default boolean enableThrall() { return false; }
	@ConfigItem(keyName = "thrallColor", name = "Thrall Color", description = "Text color for Thralls", section = otherSection, position = 1)
	default Color thrallColor() { return Color.CYAN; }
	@ConfigItem(keyName = "thrallMessage", name = "Thrall Message", description = "Message for Thralls", section = otherSection, position = 2)
	default String thrallMessage() { return "Thrall Expired!"; }

	@ConfigItem(keyName = "enableDeathCharge", name = "Enable Death Charge", description = "Enable overhead for Death Charge", section = otherSection, position = 3)
	default boolean enableDeathCharge() { return false; }
	@ConfigItem(keyName = "deathChargeColor", name = "Death Charge Color", description = "Text color for Death Charge", section = otherSection, position = 4)
	default Color deathchargeColor() { return Color.RED; }
	@ConfigItem(keyName = "deathChargeMessage", name = "Death Charge Message", description = "Message for Death Charge", section = otherSection, position = 5)
	default String deathchargeMessage() { return "Death Charge Ready!"; }

	@ConfigItem(keyName = "enableSoulflameHorn", name = "Enable Soulflame Horn", description = "Enable overhead for Soulflame Horn", section = otherSection, position = 6)
	default boolean enableSoulflameHorn() { return false; }
	@ConfigItem(keyName = "soulflameHornColor", name = "Soulflame Horn Color", description = "Text color for Soulflame Horn", section = otherSection, position = 7)
	default Color soulflameHornColor() { return Color.RED; }
	@ConfigItem(keyName = "soulflameHornMessage", name = "Soulflame Horn Message", description = "Message for Soulflame Horn", section = otherSection, position = 8)
	default String soulflameHornMessage() { return "Soulflame Horn Active!"; }

	@ConfigItem(keyName = "enableSurgePotion", name = "Enable Surge Potion", description = "Enable overhead for Surge Potion", section = otherSection, position = 9)
	default boolean enableSurgePotion() { return false; }
	@ConfigItem(keyName = "surgePotionColor", name = "Surge Potion Color", description = "Text color for Surge Potion", section = otherSection, position = 10)
	default Color surgePotionColor() { return Color.BLUE; }
	@ConfigItem(keyName = "surgePotionMessage", name = "Surge Potion Message", description = "Message for Surge Potion", section = otherSection, position = 11)
	default String surgePotionMessage() { return "Surge Potion Ready!"; }

	@ConfigItem(keyName = "enableMarkOfDarkness", name = "Enable Mark of Darkness", description = "Enable overhead for Mark of Darkness", section = otherSection, position = 12)
	default boolean enableMarkOfDarkness() { return false; }

	@ConfigItem(keyName = "markOfDarknessColor", name = "Mark of Darkness Color", description = "Text color for Mark of Darkness", section = otherSection, position = 13)
	default Color markOfDarknessColor() { return Color.BLUE; }

	@ConfigItem(keyName = "markOfDarknessMessage", name = "Mark of Darkness Message", description = "Message for Mark of Darkness", section = otherSection, position = 14)
	default String markOfDarknessMessage() { return "Mark of Darkness expired!"; }


	@ConfigItem(keyName = "enableSaturatedHeart", name = "Enable Saturated Heart", description = "Enable overhead for Saturated Heart", section = otherSection, position = 15)
	default boolean enableSaturatedHeart() { return false; }
	@ConfigItem(keyName = "saturatedHeartColor", name = "Saturated Heart Color", description = "Text color for Saturated Heart", section = otherSection, position = 16)
	default Color saturatedHeartColor() { return Color.MAGENTA; }
	@ConfigItem(keyName = "saturatedHeartMessage", name = "Saturated Heart Message", description = "Message for Saturated Heart", section = otherSection, position = 17)
	default String saturatedHeartMessage() { return "Saturated Heart Expired!"; }

	@ConfigItem(keyName = "enableStamina", name = "Enable Stamina", description = "Enable overhead for Stamina", section = otherSection, position = 18)
	default boolean enableStamina() { return false; }
	@ConfigItem(keyName = "staminaColor", name = "Stamina Color", description = "Text color for Stamina", section = otherSection, position = 19)
	default Color staminaColor() { return Color.YELLOW; }
	@ConfigItem(keyName = "staminaMessage", name = "Stamina Message", description = "Message for Stamina", section = otherSection, position = 20)
	default String staminaMessage() { return "Stamina potion Expired!"; }
}
/*
 * Copyright (c) 2022, InfernoStats <http://github.com/InfernoStats>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.shuddie.overhead;

import java.util.Timer;
import java.util.TimerTask;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class DeathChargeTimer
{
	private Timer timer;

	@Getter
	private DeathChargeTimerState state;

	DeathChargeTimer()
	{
		timer = null;
		state = DeathChargeTimerState.IDLE;
	}

	public void start() {
		timer = new Timer();

		timer.schedule(new TimerTask()
		{
			@Override
			public void run()
			{
				state = DeathChargeTimerState.EXPIRED;
			}
		}, 60 * 1000);

		state = DeathChargeTimerState.ACTIVE;
	}

	public void stop() {
		timer = null;
		state = DeathChargeTimerState.IDLE;
	}
}
/*
 * Copyright (c) 2024, Adam Keenan <http://github.com/adamk33n3r>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.shuddie.overhead;

import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Player;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.Color;

public class Overhead {
    @Inject
    private transient Client client;

    public void show(String template, String[] triggerValues, Color textColor, int displayTimeSeconds) {
        String message = processTriggerValues(template, triggerValues);

        Player localPlayer = client.getLocalPlayer();
        if (localPlayer == null) {
            return;
        }

        if (message == null || message.trim().isEmpty()) {
            localPlayer.setOverheadText(null);
            localPlayer.setOverheadCycle(0);
            return;
        }
        StringBuilder sb = new StringBuilder();
        if (textColor != null) {
            sb.append("<col=")
                    .append(ColorUtil.colorToHexCode(textColor))
                    .append(">")
                    .append(message)
                    .append("</col>");
        } else {
            sb.append(message);
        }

        localPlayer.setOverheadText(sb.toString());
        localPlayer.setOverheadCycle(displayTimeSeconds * 1000 / Constants.CLIENT_TICK_LENGTH);
    }

    private static String processTriggerValues(String message, String[] triggerValues) {
        if (triggerValues == null) {
            return message;
        }

        for (int i = 0; i < triggerValues.length; i++) {
            message = message.replace("{" + i + "}", triggerValues[i]);
        }

        return message;
    }
}

package com.shuddie.overhead;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OverheadNotificationsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OverheadNotificationsPlugin.class);
		RuneLite.main(args);
	}
}
