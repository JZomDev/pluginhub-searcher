package com.recolor;

import net.runelite.api.Model;
import lombok.extern.slf4j.Slf4j;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;


@Slf4j
public class ModelDataProcessor
{
    private Map<String, Map<Integer, int[][]>> originalColorData = new HashMap<>();
    private Map<String, Map<Integer, int[][]>> recoloredColorData = new HashMap<>();

    private static final List<Integer> GREEN_OBJECTS = Arrays.asList(35966, 35969, 35970, 35975, 35976, 35978, 35979, 36003, 36004, 36005, 36006, 36007,36008);
    private static final int greenReference = 10758;
    private static final int redReference = 65452;

    public ModelDataProcessor(String filePath, Color newColor, Color secondaryColor, Boolean harmonize) throws IOException
    {
        cacheData(filePath);
        recolorData(newColor, secondaryColor, harmonize);
    }

    // creates a hashmap with all the facecolors, IDs and types (gameObject, Groundobject etc.)
    // could be simplified if the .txt gets simplified
    private void cacheData(String filePath) throws IOException
    {
        try (InputStream inputStream = getClass().getResourceAsStream(filePath))
        {
            if (inputStream == null)
            {
                throw new FileNotFoundException("Resource not found: " + filePath);
            }
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)))
            {
                String line;
                String currentType = null;
                int currentId = -1;
                int[][] colors = new int[3][];

                while ((line = reader.readLine()) != null)
                {
                    if (line.trim().isEmpty()) continue;
                    if (line.contains(" ID: ")) {
                        if (currentType != null && currentId != -1)
                        {
                            originalColorData.computeIfAbsent(currentType, k -> new HashMap<>()).put(currentId, colors);
                        }
                        currentType = line.split(" ")[0];
                        currentId = Integer.parseInt(line.split(": ")[1].split(" ")[0]);
                        colors = new int[3][];
                    }
                    else if (line.startsWith("FaceColors"))
                    {
                        int index = Integer.parseInt(line.substring(10, 11)) - 1;
                        colors[index] = Arrays.stream(line.split(": ")[1].replace("[", "").replace("]", "").split(", "))
                                .mapToInt(Integer::parseInt).toArray();
                    }
                }
                if (currentType != null && currentId != -1)
                {
                    originalColorData.computeIfAbsent(currentType, k -> new HashMap<>()).put(currentId, colors);
                }
            }
        }
    }


    // creates a second hashmap with the recolored values, based of the vanilla hashmap
    public void recolorData(Color newColor, Color secondaryColor, Boolean harmonize)
    {
        recoloredColorData.clear();
        originalColorData.forEach((type, models) ->
        {
            Map<Integer, int[][]> recoloredMap = new HashMap<>();
            models.forEach((id, colors) ->
            {
                int[][] recoloredColors = new int[colors.length][];
                for (int i = 0; i < colors.length; i++)
                {
                    recoloredColors[i] = recolor(colors[i], newColor, secondaryColor, id, harmonize);
                }
                recoloredMap.put(id, recoloredColors);
            });
            recoloredColorData.put(type, recoloredMap);
        });
    }

    // recolors a single array of colors (e.g. facecolors1 of a single model)
    private int[] recolor(int[] originalColors, Color newColor, Color secondaryColor, int id, Boolean harmonize)
    {
        int[] newColors = new int[originalColors.length];
        for (int i = 0; i < originalColors.length; i++)
        {
            // Color needs to be in the relevant range and > 50, else there will be visual bugs
            if (Math.abs(originalColors[i]) > 50)
            {
                newColors[i] = newColorHsb(originalColors[i], newColor, secondaryColor, id, harmonize);
            }
            else
            {
                newColors[i] = originalColors[i];
            }
        }
        return newColors;
    }

    // applies the colors to a model
    public void applyColor(Model model, int[] f1, int[] f2, int[] f3)
    {
        int[] faceColors = model.getFaceColors1();
        int[] faceColors2 = model.getFaceColors2();
        int[] faceColors3 = model.getFaceColors3();

        if (f1.length <= faceColors.length && f2.length <= faceColors2.length && f3.length <= faceColors3.length)
        {
            System.arraycopy(f1, 0, faceColors, 0, f1.length);
            System.arraycopy(f2, 0, faceColors2, 0, f2.length);
            System.arraycopy(f3, 0, faceColors3, 0, f3.length);
        }
        else
        {
            log.debug("FaceColor has the wrong length.");
        }
    }

    // returns the new color in the rs2hsb format
    public int newColorHsb(int faceColor, Color newColor, Color secondaryColor, int id, Boolean harmonize)
    {

        // > 60k are mostly the very bright colors.
        if(faceColor > 60000)
        {
            if(!secondaryColor.equals(newColor))
            {
                return brightColors(faceColor, secondaryColor);
            }
            return brightColors(faceColor, newColor);
        }

        // all other colors should only be Hue shifted. This prevents normally unlit models from becoming too bright or too dark
        if(harmonize)
        {
            if(id == 36048)
            {
                return hueShift(faceColor, newColor, redReference); // can't ever harmonize the damaging floor or it will be practically invisible
            }
            return hueShift(faceColor, newColor, faceColor);    // if the referenceColor equals the faceColor, the Hue of the newColor will be applied
        }
        return hueShift(faceColor, newColor, redReference);
    }

    // Method is functional, but has a lot of variables. Will likely be adressed in a future iteration.
    //
    // General Idea: calculate the distance of the vanilla facecolor to a reference color (65452) and then apply that distance
    // to the new (reference) color, to get a similar shifted color.
    public int brightColors(int faceColor, Color newColor)
    {
        int newColorHsb = colorToRs2hsb(newColor);

        // values of the facecolor
        int hueFace = extractHsbValues(faceColor, 6, 11);
        int saturationFace = extractHsbValues(faceColor, 3, 8);
        int brightnessFace = extractHsbValues(faceColor, 7, 1);
        // values of the new reference color
        int hueRef = extractHsbValues(newColorHsb, 6, 11);
        int saturationRef = extractHsbValues(newColorHsb, 3, 8);
        int brightnessRef = extractHsbValues(newColorHsb, 7, 1);
        // pre-calculated values for the current reference color (65452)
        int referenceHue = 63;
        int referenceSat = 7;
        int referenceBright = 44;

        int hueDiff = referenceHue - hueFace;
        int satDiff = referenceSat - saturationFace;
        int brightDiff = referenceBright - brightnessFace;

        int newHue = hueRef - hueDiff;
        newHue = (newHue % 64 + 64) % 64;

        int newSat = saturationRef - satDiff;
        newSat = (newSat % 8 + 8) % 8;

        int newBright = brightnessRef - brightDiff / 4;     // reducing the brightness difference before applying it, to prevent complete white/black results
        newBright -= Math.min(newSat, newBright / 2);
        // making sure that the new brightness is never below 0 or above 127
        if(newBright < 0)
        {
            newBright = 0;
        }
        if(newBright > 127)
        {
            newBright = 127;
        }

        return (newHue << 10) + (newSat << 7) + newBright;
    }

    // same concept as brightColors, but only shifts Hue
    public int hueShift(int faceColor, Color newColor, int referenceColor)
    {
        int newColorHsb = colorToRs2hsb(newColor);

        // values of the facecolor
        int hueFace = extractHsbValues(faceColor, 6, 11);
        int saturationFace = extractHsbValues(faceColor, 3, 8);
        int brightnessFace = extractHsbValues(faceColor, 7, 1);
        // value of the new reference color
        int hueRef = extractHsbValues(newColorHsb, 6, 11);
        // value for the current reference color
        int referenceHue = extractHsbValues(referenceColor, 6, 11);

        int hueDiff = referenceHue - hueFace;

        int newHue = hueRef - hueDiff;
        newHue = (newHue % 64 + 64) % 64;

        return (newHue << 10) + (saturationFace << 7) + brightnessFace;
    }

    // Returns the hsb values
    static int extractHsbValues(int hsbColor, int k, int p)
    {
        return (((1 << k) - 1) & (hsbColor >> (p - 1)));
    }

    // not my method, I don't know who to give credit for it, but I took it from AnkouOSRS, https://github.com/AnkouOSRS/cox-light-colors/blob/master/src/main/java/com/coxlightcolors/CoxLightColorsPlugin.java
    private int colorToRs2hsb(Color color)
    {
        float[] hsbVals = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), null);
        // "Correct" the brightness level to avoid going to white at full saturation, or having a low brightness at
        // low saturation
        hsbVals[2] -= Math.min(hsbVals[1], hsbVals[2] / 2);
        int encode_hue = (int)(hsbVals[0] * 63);
        int encode_saturation = (int)(hsbVals[1] * 7);
        int encode_brightness = (int)(hsbVals[2] * 127);
        return (encode_hue << 10) + (encode_saturation << 7) + (encode_brightness);
    }

    // applies either the vanilla or the recolored hashmap data to a given model
    public void applyColors(int objectId, String type, Model model, boolean useRecolored)
    {
        Map<Integer, int[][]> data = useRecolored ? recoloredColorData.getOrDefault(type, Collections.emptyMap()) : originalColorData.getOrDefault(type, Collections.emptyMap());
        int[][] colors = data.get(objectId);
        if (colors != null && colors[0] != null && colors[1] != null && colors[2] != null)
        {
            applyColor(model, colors[0], colors[1], colors[2]);
        }
    }

    // deletes the hashmaps
    public void cleanUp()
    {
        originalColorData.clear();
        recoloredColorData.clear();
    }
}
package com.recolor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup("recolorCG")
public interface RecolorCGConfig extends Config
{
	@ConfigSection(
			name = "Colors",
			description = "General color settings",
			position = 0
	)
	String colorsSection = "colors";

	@ConfigSection(
			name = "Toggles",
			description = "Toggle different recolors on or off",
			position = 1
	)
	String togglesSection = "toggles";

	//
	// Begin of color section
	//
	@ConfigItem(
			keyName = "color",
			name = "Color",
			description = "Recolor the Corrupted Gauntlet with this color.",
			position = 0,
			section = colorsSection
	)
	default Color color()
	{
		return new Color(25, 45, 135);
	}

	@ConfigItem(
			keyName = "secondcolor",
			name = "Secondary color",
			description = "Recolor certain parts of the gauntlet differently.",
			position = 1,
			section = colorsSection
	)
	default Color secondcolor()
	{
		return new Color(165, 210, 10);
	}

	@ConfigItem(
			keyName = "secondcolor_active",
			name = "Use secondary color",
			description = "If activated, the secondary color will be applied.",
			position = 2,
			section = colorsSection
	)
	default boolean secondcolor_active()
	{
		return true;
	}

	@ConfigItem(
			keyName = "random",
			name = "Random color each run",
			description = "Every time you enter the corrupted gauntlet, it will be a random color. To randomise both first and secondary color, activate the 'Use secondary color' feature.",
			position = 3,
			section = colorsSection
	)
	default boolean random()
	{
		return false;
	}

	//
	// Begin of toggle section
	//
	@ConfigItem(
			keyName = "npcRecolor",
			name = "Recolor NPCs",
			description = "Recolor all the NPCs in the corrupted gauntlet.",
			position = 0,
			section = togglesSection
	)
	default boolean npcRecolor()
	{
		return true;
	}

	@ConfigItem(
			keyName = "projectileRecolor",
			name = "Recolor projectiles",
			description = "Recolor all the projectiles from NPCs in the corrupted gauntlet.",
			position = 1,
			section = togglesSection
	)
	default boolean projectileRecolor()
	{
		return true;
	}

	@ConfigItem(
			keyName = "groundRecolor",
			name = "Recolor damaging floor",
			description = "Recolor the floor that damages you during the Hunllef fight.",
			position = 2,
			section = togglesSection
	)
	default boolean groundRecolor()
	{
		return true;
	}

	@ConfigItem(
			keyName = "tornado",
			name = "Recolor Hunleff's tornadoes",
			description = "Recolor the tornadoes that spawn during the hunllef fight.",
			position = 3,
			section = togglesSection
	)
	default boolean tornado()
	{
		return true;
	}

	@ConfigItem(
			keyName = "harmonize",
			name = "Harmonize colors",
			description = "Adjusts colors for a unified look.",
			position = 4,
			section = togglesSection
	)
	default boolean harmonize()
	{
		return true;
	}

}

package com.recolor;

import javax.inject.Inject;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import java.awt.*;
import java.util.*;
import java.util.List;

@Slf4j
@PluginDescriptor(
		name = "CG recolor",
		description = "Escape the red prison today!",
		conflicts = "117 HD"	// might be adressed in a future update of this plugin, but currently not compatible
)
public class RecolorCG extends Plugin
{

	// Declarations
	private static final List<Integer> OBJECT_IDS = Arrays.asList(35965, 35966, 35967, 35968, 35968, 35969, 35970, 35971, 35972, 35972, 35973, 35974, 35975, 35976, 35977, 35978, 35979, 35980, 35992, 35994, 35994, 35995, 35996, 35997, 35998, 35999, 36000, 36001, 36002, 36003, 36004, 36005, 36006, 36007, 36008, 37337);
	private static final List<Integer> GROUND_IDS = Arrays.asList(36046, 36047, 36048, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 36059);
	private static final List<Integer> NPC_IDS = Arrays.asList(9035, 9036, 9037, 9038, 9039, 9040, 9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048);
	private static final List<Integer> PROJECTILE_IDS = Arrays.asList(1702, 1708, 1712, 1714, 1723);
	private static final int REGION_ID_GAUNTLET_LOBBY = 12127;
	private static final int REGION_ID_GAUNTLET_CORRUPTED = 7768;
	//private static final int REGION_ID_GAUNTLET_NORMAL = 7512;

	// Will likely use the ITEM_IDS in a future update of this plugin
	//private static final List<Integer> ITEM_IDS = Arrays.asList(23824, 23834, 23821, 23822, 23823, 23820, 23835, 23837, 23838, 23585, 23582, 23583, 23584, 23849, 23850, 23851, 23855, 23856, 23857);


	ModelDataProcessor dataProcessor;
	Random rand;
	int regionId;
	Color randomColor1;
	Color randomColor2;


	@Inject
	private ClientThread clientThread;

	@Inject
	private Client client;

	@Inject
	private RecolorCGConfig config;

	@Provides
	RecolorCGConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RecolorCGConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		log.debug("Recolor started!");
		rand = new Random();
		randomColor1 = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
		randomColor2 = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));

		// Vanilla model facecolors are stored in a .txt -> the new model colors can be calculated before the models even appear making the spawnEvents less expensive
		if(config.secondcolor_active() && config.random())
		{
			this.dataProcessor = new ModelDataProcessor("/model_facecolors.txt", randomColor1, randomColor2, config.harmonize());
		}
		else if (config.secondcolor_active() && !config.random())
		{
			this.dataProcessor = new ModelDataProcessor("/model_facecolors.txt", config.color(), config.secondcolor(), config.harmonize());
		}
		else if (!config.secondcolor_active() && config.random())
		{
			this.dataProcessor = new ModelDataProcessor("/model_facecolors.txt", randomColor1, randomColor1, config.harmonize());
		}
		else
		{
			this.dataProcessor = new ModelDataProcessor("/model_facecolors.txt", config.color(), config.color(), config.harmonize());
		}

		// If the user is already logged in AND inside the gauntlet, Hun still needs to be recolored
		// Hun gets recolored on GamestateChanges
		if(client.getGameState() == GameState.LOGGED_IN)
		{
			regionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
			if(regionId == REGION_ID_GAUNTLET_CORRUPTED)
			{
				clientThread.invoke(()->
				{
					client.setGameState(GameState.LOADING);
				});
			}
		}
	}

	@Override
	protected void shutDown()
	{
		clientThread.invoke(() ->
		{
			rand = null;

			if(client.getGameState() == GameState.LOGGED_IN)
			{
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Some game models may still be affected by the plugin. Please re-log to ensure that everything is properly reset.", null);
				clearAll();
				client.setGameState(GameState.LOADING);
			}

			synchronized (dataProcessor)
			{
				dataProcessor.cleanUp();
				dataProcessor = null;
			}
		});
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if(event.getGroup().equals("recolorCG"))
		{
			if(event.getKey().equals("random"))
			{
				randomColor1 = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
				randomColor2 = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
			}
			if (!config.random())
			{
				if (config.secondcolor_active())
				{
					synchronized (dataProcessor)
					{
						dataProcessor.recolorData(config.color(), config.secondcolor(), config.harmonize());
					}
				}
				else
				{
					synchronized (dataProcessor)
					{
						dataProcessor.recolorData(config.color(), config.color(), config.harmonize());
					}
				}
			}
			else
			{
				if(config.secondcolor_active())
				{
					synchronized (dataProcessor)
					{
						dataProcessor.recolorData(randomColor1, randomColor2, config.harmonize());
					}
				}
				else
				{
					synchronized (dataProcessor)
					{
						dataProcessor.recolorData(randomColor1, randomColor1, config.harmonize());
					}
				}
			}
			clientThread.invoke(() ->
			{
				recolorNPCs(true);
				client.setGameState(GameState.LOADING);
			});
		}

	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		if (OBJECT_IDS.contains(event.getGameObject().getId()))
		{
			recolorGameObject(event.getGameObject(), false, true);
		}
	}

	@Subscribe
	public void onGroundObjectSpawned(GroundObjectSpawned event)
	{
		if (GROUND_IDS.contains(event.getGroundObject().getId()))
		{
			recolorGroundObject(event.getGroundObject(), false);
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		if (NPC_IDS.contains(event.getNpc().getId()))
		{
			recolorNPC(event.getNpc(), true);
		}
	}

	@Subscribe
	public void onNpcChanged(NpcChanged event)
	{
		if (NPC_IDS.contains(event.getNpc().getId()))
		{
			recolorNPC(event.getNpc(), true);
		}
	}


	@Subscribe
	public void onProjectileMoved(ProjectileMoved event)
	{
		if(PROJECTILE_IDS.contains(event.getProjectile().getId()))
		{
			recolorProjectile(event.getProjectile());
		}
	}


	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if(event.getGameState() == GameState.LOGGED_IN)
		{
			regionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
			if(regionId == REGION_ID_GAUNTLET_LOBBY)
			{
				if (config.random())
				{
					randomColor1 = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
					randomColor2 = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
					if(config.secondcolor_active())
					{
						synchronized (dataProcessor)
						{
							dataProcessor.recolorData(randomColor1, randomColor2, config.harmonize());
						}
					}
					else
					{
						synchronized (dataProcessor)
						{
							dataProcessor.recolorData(randomColor1, randomColor1, config.harmonize());
						}
					}
				}
			}
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if(event.getVarbitId() == 9177 && event.getValue() == 1)	// varbit 9177 is 1 if player is in the boss room
		{
			clientThread.invoke(() ->
			{
				client.setGameState(GameState.LOADING);
			});
		}
	}


	@Subscribe
	public void onPreMapLoad(PreMapLoad event)
	{
		regionId = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
		if(regionId == REGION_ID_GAUNTLET_CORRUPTED || regionId == REGION_ID_GAUNTLET_LOBBY) {
			Scene scene = event.getScene();
			Tile[][][] sceneTiles = scene.getTiles();
			for (Tile[][] tiles : sceneTiles) {
				for (Tile[] tiles1 : tiles) {
					for (Tile tile : tiles1) {
						if (tile == null)
							continue;
						GameObject[] gameObjects = tile.getGameObjects();
						GroundObject groundObject = tile.getGroundObject();
						for (GameObject object : gameObjects) {
							if (object == null) {
								continue;
							}
							int ID = object.getId();
							if (OBJECT_IDS.contains(ID)) {
								recolorGameObject(object, true, true);
							}
						}
						if (groundObject != null) {
							int ID = groundObject.getId();
							if (GROUND_IDS.contains(ID)) {
								recolorGroundObject(groundObject, true);
							}
						}
					}
				}
			}
		}
	}

	public void recolorGameObject(GameObject gameObject, Boolean preMapLoad, Boolean useRecolored)
	{

		Renderable renderable = gameObject.getRenderable();
		Model model;

		if(preMapLoad)
		{
			model = verifyPreMapLoadModel(renderable);
		}
		else
		{
			model = verifyModel(renderable);
		}

		if (model == null)
		{
			if(!preMapLoad)
			{
				log.debug("recolorGameObject returned null!" + " , PreMapLoad: " + preMapLoad);
			}
			return;
		}

		synchronized (dataProcessor)
		{
			dataProcessor.applyColors(gameObject.getId(), "GameObject", model, useRecolored);
		}
	}

	public void recolorGroundObject(GroundObject groundObject, Boolean preMapLoad)
	{

		Renderable renderable = groundObject.getRenderable();
		Model model;

		if(preMapLoad)
		{
			model = verifyPreMapLoadModel(renderable);
		}
		else
		{
			model = verifyModel(renderable);
		}

		if (model == null)
		{
			log.debug("recolorGroundObject returned null!");
			return;
		}
		if(groundObject.getId() == 36047 || groundObject.getId() == 36048)
		{	//Damaging ground recolor depends on config
			if(!config.groundRecolor())
			{
				dataProcessor.applyColors(groundObject.getId(), "GroundObject", model, false);
				return;
			}
			else
			{
				dataProcessor.applyColors(groundObject.getId(), "GroundObject", model, true);
				return;
			}
		}

		synchronized (dataProcessor)
		{
			dataProcessor.applyColors(groundObject.getId(), "GroundObject", model, true);
		}

	}

	public void recolorNPC(NPC npc, Boolean useRecolored)
	{
		if(!useRecolored)
		{
			if (npc.getModel() == null)
			{
				log.debug("recolorAll returned null! - NPC");
				return;
			}
			synchronized (dataProcessor)
			{
				dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), false);
			}
			return;
		}
		// Spotanim needs to be set if we mage the npc that has to be recolored
		if (client.getLocalPlayer().getInteracting() != null)
		{
			if(client.getLocalPlayer().getInteracting().hasSpotAnim(1724) || client.getLocalPlayer().getInteracting().hasSpotAnim(85))
			{
				client.getLocalPlayer().getInteracting().createSpotAnim(0,-1,0,0);
			}
		}

		if (config.tornado())
		{
			if (config.npcRecolor())    // tornados AND npcs are to be recolored - we can use the same call for both
			{
				if (npc.getModel() == null)
				{
					log.debug("recolorAll returned null! - NPC");
					return;
				}
				synchronized (dataProcessor)
				{
					dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), true);
				}
			}
			else	// tornados are to be recolored, npcs not - we need to differentiate
			{
				if(npc.getModel() == null)
				{
					log.debug("recolorAll returned null! - NPC");
					return;
				}
				synchronized (dataProcessor)
				{
					if(npc.getId() == 9039)
					{
						dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), true);
					}
					else
					{
						dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), false);
					}
				}
			}
		}
		else	// if-case inverted
		{
			if(config.npcRecolor())	// tornados are NOT to be recolored, npcs are - we need to differentiate
			{
				if(npc.getModel() == null)
				{
					log.debug("recolorAll returned null! - NPC");
					return;
				}
				synchronized (dataProcessor)
				{
					if(npc.getId() == 9039)
					{
						dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), false);
					}
					else
					{
						dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), true);
					}
				}
			}
			else	//tornados AND npcs are NOT to be recolored - we can use the same call for both
			{
				if(npc.getModel() == null)
				{
					log.debug("recolorAll returned null! - NPC");
					return;
				}
				synchronized (dataProcessor)
				{
					dataProcessor.applyColors(npc.getId(), "NPC", npc.getModel(), false);
				}
			}
		}
	}

	public void recolorProjectile(Projectile projectile)
	{
		Model model = projectile.getModel();
		if (model == null)
		{
			log.debug("recolorProjectile returned null!");
			return;
		}

		if(config.projectileRecolor())
		{
			synchronized (dataProcessor)
			{
				dataProcessor.applyColors(projectile.getId(), "Projectile", model, true);
			}
		}
		else
		{
			synchronized (dataProcessor)
			{
				dataProcessor.applyColors(projectile.getId(), "Projectile", model, false);
			}
		}
	}

	public void recolorNPCs(Boolean useRecolor)
	{
		IndexedObjectSet<? extends NPC> npcs = client.getWorldView(-1).npcs();
		for (NPC npc:npcs) {
			recolorNPC(npc, useRecolor);
		}
	}

	// Model.getModel() returns null, therefore we need to do an instanceof check
	private Model verifyModel(Renderable renderable)
	{
		if (renderable instanceof Model)
		{
			return (Model) renderable;
		}
		else
		{
			try
			{
				Model model = renderable.getModel();
				if (model == null)
				{
					log.debug("verifyModel returned null!");
					return null;
				}
				return model;
			}
			catch (NullPointerException e)
			{
				return null;
			}
		}
	}

	private Model verifyPreMapLoadModel(Renderable renderable)
	{
		if (renderable instanceof Model)
		{
			return (Model) renderable;
		}
		return null;
	}


	public void clearAll()
	{
		Scene scene = client.getTopLevelWorldView().getScene();
		Tile[][][] sceneTiles = scene.getTiles();
		recolorNPCs(false);
		for (Tile[][] tiles : sceneTiles)
		{
			for (Tile[] tiles1 : tiles)
			{
				for (Tile tile : tiles1)
				{
					if (tile == null)
						continue;
					GameObject[] gameObjects = tile.getGameObjects();
					for (GameObject object : gameObjects) {
						if(object == null)
						{
							continue;
						}
						int ID = object.getId();
						if (OBJECT_IDS.contains(ID)) {
							recolorGameObject(object, false, false);
						}
					}
				}
			}
		}
	}
}
package com.recolor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RecolorCG.class);
		RuneLite.main(args);
	}
}
