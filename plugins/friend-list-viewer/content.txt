/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FriendsViewerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FriendsViewerPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(FriendsViewerConfig.CONFIG_GROUP)
public interface FriendsViewerConfig extends Config
{
	String CONFIG_GROUP = "friendListViewer";

	@ConfigItem(
		keyName = "maxFriends",
		name = "Max Players",
		description = "Maximum number of friends or clanmates to show",
		position = 1
	)
	default int maxPlayers()
	{
		return 10;
	}

	@ConfigSection(
		name = "Overlays",
		description = "Overlays",
		position = 2
	)
	String overlaysSection = "overlaysSection";

	@ConfigItem(
		keyName = "showFriends",
		name = "Show Friends",
		description = "Show or hide Friends overlay",
		position = 1,
		section = overlaysSection
	)
	default boolean showFriends()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showChatChannel",
		name = "Show Chat-channel",
		description = "Show or hide Chat-channel overlay",
		position = 2,
		section = overlaysSection
	)
	default boolean showChatChannel()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showYourClan",
		name = "Show Your Clan",
		description = "Show or hide Your Clan overlay",
		position = 3,
		section = overlaysSection
	)
	default boolean showYourClan()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGuestClan",
		name = "Show Guest Clan",
		description = "Show or hide Guest Clan overlay",
		position = 4,
		section = overlaysSection
	)
	default boolean showGuestClan()
	{
		return false;
	}

	@ConfigItem(
		keyName = "fontSize",
		name = "Font Size",
		description = "Font size to use on the overlay",
		position = 5,
		section = overlaysSection
	)
	default FriendsViewerFontSize fontSize()
	{
		return FriendsViewerFontSize.REGULAR;
	}

	@ConfigSection(
		name = "Overlay Colors",
		description = "Overlay colors",
		position = 3
	)
	String colorSection = "colorSection";

	@ConfigItem(
		keyName = "sameWorldColor",
		name = "Same World Color",
		description = "The color for highlighting the same world as currently logged in to",
		position = 1,
		section = colorSection
	)
	default Color sameWorldColor()
	{
		return Color.GREEN;
	}

	@ConfigItem(
		keyName = "differentWorldColor",
		name = "Different World Color",
		description = "The color for different worlds than currently logged in to",
		position = 2,
		section = colorSection
	)
	default Color differentWorldColor()
	{
		return Color.YELLOW;
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

import com.google.inject.Provides;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Friend;
import net.runelite.api.FriendsChatManager;
import net.runelite.api.FriendsChatMember;
import net.runelite.api.GameState;
import net.runelite.api.NameableContainer;
import net.runelite.api.Player;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.clan.ClanRank;
import net.runelite.api.clan.ClanSettings;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Friends and Clan Viewer",
	description = "Always see clanmates and friends when they are online",
	tags = {"friends", "list", "viewer", "online", "clan", "cc"}
)
public class FriendsViewerPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ClientThread clientThread;

	@Inject
	private FriendsViewerIconManager iconManager;
	@Inject
	private FriendsViewerConfig config;

	private FriendsViewerOverlay friendsOverlay;
	private FriendsViewerOverlay chatChannelOverlay;
	private FriendsViewerOverlay yourClanOverlay;
	private FriendsViewerOverlay guestClanOverlay;

	@Override
	protected void startUp()
	{
		clientThread.invokeLater(() ->
		{
			if (client.getGameState().getState() > GameState.STARTING.getState())
			{
				iconManager.loadRankIcons();
			}
		});

		friendsOverlay = new FriendsViewerOverlay(client, config, "Friends", config::showFriends);
		chatChannelOverlay = new FriendsViewerOverlay(client, config, "Chat-channel", config::showChatChannel);
		yourClanOverlay = new FriendsViewerOverlay(client, config, "Your Clan", config::showYourClan);
		guestClanOverlay = new FriendsViewerOverlay(client, config, "Guest Clan", config::showGuestClan);

		overlayManager.add(friendsOverlay);
		overlayManager.add(chatChannelOverlay);
		overlayManager.add(yourClanOverlay);
		overlayManager.add(guestClanOverlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(friendsOverlay);
		overlayManager.remove(chatChannelOverlay);
		overlayManager.remove(yourClanOverlay);
		overlayManager.remove(guestClanOverlay);
	}

	@Provides
	public FriendsViewerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FriendsViewerConfig.class);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() != GameState.LOGIN_SCREEN)
		{
			return;
		}

		iconManager.loadRankIcons();

		friendsOverlay.setEntries(null);
		chatChannelOverlay.setEntries(null);
		yourClanOverlay.setEntries(null);
		guestClanOverlay.setEntries(null);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (client.getGameState() != GameState.LOGGED_IN || client.getTickCount() % 5 != 0)
		{
			return;
		}

		updateFriends(config.showFriends());
		updateChatChannel(config.showChatChannel());
		updateClan(config.showYourClan(), yourClanOverlay, client.getClanChannel(), client.getClanSettings());
		updateClan(config.showGuestClan(), guestClanOverlay, client.getGuestClanChannel(), client.getGuestClanSettings());
	}

	private void updateFriends(boolean enabled)
	{
		final NameableContainer<Friend> friendContainer = client.getFriendContainer();
		if (!enabled || friendContainer == null)
		{
			friendsOverlay.setEntries(null);
			return;
		}

		friendsOverlay.setEntries(Arrays.stream(friendContainer.getMembers())
			.filter(friend -> friend.getWorld() > 0)
			.sorted(Comparator.comparing(Friend::getName, String::compareToIgnoreCase))
			.map(friend -> new FriendsViewerEntry(Text.toJagexName(friend.getName()), friend.getWorld(), null))
			.collect(Collectors.toList()));
	}

	private void updateChatChannel(boolean enabled)
	{
		final FriendsChatManager friendsChatManager = client.getFriendsChatManager();
		if (!enabled || friendsChatManager == null)
		{
			chatChannelOverlay.setEntries(null);
			return;
		}

		chatChannelOverlay.setEntries(Arrays.stream(friendsChatManager.getMembers())
			.filter(clanmate -> !Text.toJagexName(clanmate.getName()).equals(getLocalPlayerName()))
			.sorted(Comparator.comparing(FriendsChatMember::getRank).reversed()
				.thenComparing(FriendsChatMember::getName, String::compareToIgnoreCase))
			.map(clanmate -> new FriendsViewerEntry(
				Text.toJagexName(clanmate.getName()),
				clanmate.getWorld(),
				iconManager.getRankImage(config.fontSize(), clanmate.getRank())))
			.collect(Collectors.toList()));
	}

	private void updateClan(boolean enabled, FriendsViewerOverlay overlay, ClanChannel clanChannel, ClanSettings clanSettings)
	{
		if (!enabled || clanChannel == null || clanSettings == null)
		{
			overlay.setEntries(null);
			return;
		}

		overlay.setEntries(clanChannel.getMembers().stream()
			.filter(clanmate -> !Text.toJagexName(clanmate.getName()).equals(getLocalPlayerName()))
			.sorted(Comparator.comparing(ClanChannelMember::getRank, Comparator.comparing(ClanRank::getRank)).reversed()
				.thenComparing(ClanChannelMember::getName, String::compareToIgnoreCase))
			.map(clanmate -> new FriendsViewerEntry(
				Text.toJagexName(clanmate.getName()),
				clanmate.getWorld(),
				Optional.ofNullable(clanSettings.titleForRank(clanmate.getRank()))
					.map(title -> iconManager.getRankImage(config.fontSize(), title))
					.orElse(null)))
			.collect(Collectors.toList()));
	}

	private String getLocalPlayerName()
	{
		return Optional.ofNullable(client.getLocalPlayer())
			.map(Player::getName)
			.map(Text::toJagexName)
			.orElse(null);
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

import java.awt.image.BufferedImage;
import lombok.Data;

@Data
public class FriendsViewerEntry
{
	private final String name;
	private final int world;
	private final BufferedImage icon;
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Optional;
import javax.annotation.Nullable;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.EnumComposition;
import net.runelite.api.EnumID;
import net.runelite.api.FriendsChatRank;
import net.runelite.api.clan.ClanTitle;
import net.runelite.client.game.ChatIconManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.util.ImageUtil;

/**
 * Based on {@link ChatIconManager}, with modifications specific for the plugin.
 */
public class FriendsViewerIconManager
{
	public static final Dimension IMAGE_DIMENSION = new Dimension(14, 14);
	private static final Color IMAGE_OUTLINE_COLOR = new Color(33, 33, 33);
	private static final int IMAGE_TOP_MARGIN = 2;

	private final ChatIconManager chatIconManager;
	private final Client client;
	private final SpriteManager spriteManager;

	private BufferedImage[] friendsChatRankImages;
	private BufferedImage[] clanRankImages;

	@Inject
	private FriendsViewerIconManager(ChatIconManager chatIconManager, Client client, SpriteManager spriteManager)
	{
		this.chatIconManager = chatIconManager;
		this.client = client;
		this.spriteManager = spriteManager;
	}

	@Nullable
	public BufferedImage getRankImage(FriendsViewerFontSize fontSize, FriendsChatRank friendsChatRank)
	{
		switch (fontSize)
		{
			case REGULAR:
			{
				return friendsChatRankImages != null && friendsChatRank != FriendsChatRank.UNRANKED
					? friendsChatRankImages[friendsChatRank.ordinal() - 1]
					: null;
			}
			case SMALL:
			{
				return chatIconManager.getRankImage(friendsChatRank);
			}
			default:
			{
				throw new UnsupportedOperationException("Unknown font size: " + fontSize);
			}
		}
	}

	@Nullable
	public BufferedImage getRankImage(FriendsViewerFontSize fontSize, ClanTitle clanTitle)
	{
		switch (fontSize)
		{
			case REGULAR:
			{
				if (clanRankImages == null)
				{
					return null;
				}

				int rank = clanTitle.getId();
				int idx = clanRankToIdx(rank);
				return clanRankImages[idx];
			}
			case SMALL:
			{
				return chatIconManager.getRankImage(clanTitle);
			}
			default:
			{
				throw new UnsupportedOperationException("Unknown font size: " + fontSize);
			}
		}
	}

	public void loadRankIcons()
	{
		if (friendsChatRankImages != null)
		{
			return;
		}

		final EnumComposition friendsChatIcons = client.getEnum(EnumID.FRIENDS_CHAT_RANK_ICONS);
		final EnumComposition clanIcons = client.getEnum(EnumID.CLAN_RANK_GRAPHIC);

		friendsChatRankImages = new BufferedImage[friendsChatIcons.size()];
		clanRankImages = new BufferedImage[clanIcons.size()];

		for (int i = 0; i < friendsChatIcons.size(); i++)
		{
			final int idx = i;
			spriteManager.getSpriteAsync(friendsChatIcons.getIntValue(friendsChatIcons.getKeys()[i]), 0,
				sprite -> friendsChatRankImages[idx] = prepareImage(sprite, true));
		}

		for (int i = 0; i < clanIcons.size(); i++)
		{
			final int key = clanIcons.getKeys()[i];
			final int idx = clanRankToIdx(key);
			spriteManager.getSpriteAsync(clanIcons.getIntValue(key), 0,
				sprite -> clanRankImages[idx] = prepareImage(sprite, false));
		}
	}

	private static BufferedImage prepareImage(BufferedImage sprite, boolean outline)
	{
		return Optional.ofNullable(sprite)
			.map(image -> ImageUtil.resizeCanvas(image, IMAGE_DIMENSION.width, IMAGE_DIMENSION.height))
			.map(image -> outline ? ImageUtil.outlineImage(image, IMAGE_OUTLINE_COLOR) : image)
			.map(FriendsViewerIconManager::addMargin)
			.orElse(null);
	}

	private static BufferedImage addMargin(BufferedImage sprite)
	{
		final BufferedImage newImage = new BufferedImage(sprite.getWidth(), sprite.getHeight() + IMAGE_TOP_MARGIN, BufferedImage.TYPE_INT_ARGB);
		final Graphics2D graphics = newImage.createGraphics();
		graphics.drawImage(sprite, 0, IMAGE_TOP_MARGIN, null);
		graphics.dispose();
		return newImage;
	}

	private static int clanRankToIdx(int key)
	{
		// keys are -6 to 265, with no 0
		return key < 0 ? ~key : (key + 5);
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.List;
import java.util.function.Supplier;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.SplitComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class FriendsViewerOverlay extends OverlayPanel
{
	private final Client client;
	private final FriendsViewerConfig config;
	private final String title;
	private final Supplier<Boolean> enabled;

	@Getter
	@Setter
	private List<FriendsViewerEntry> entries;

	public FriendsViewerOverlay(Client client, FriendsViewerConfig config, String title, Supplier<Boolean> enabled)
	{
		this.client = client;
		this.config = config;
		this.title = title;
		this.enabled = enabled;
		setPosition(OverlayPosition.TOP_RIGHT);
		panelComponent.setPreferredSize(new Dimension(ComponentConstants.STANDARD_WIDTH + FriendsViewerIconManager.IMAGE_DIMENSION.width, 0));
	}

	@Override
	public String getName()
	{
		return super.getName() + "-" + title;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (entries == null || !enabled.get())
		{
			return null;
		}

		panelComponent.getChildren().add(TitleComponent.builder()
			.text(String.format("%s (%d)", title, entries.size()))
			.build());

		entries.stream()
			.limit(config.maxPlayers())
			.map(this::toRenderableEntity)
			.forEach(panelComponent.getChildren()::add);

		if (entries.size() > config.maxPlayers())
		{
			panelComponent.getChildren().add(TitleComponent.builder()
				.text(String.format("... %d more", entries.size() - config.maxPlayers()))
				.build());
		}

		return super.render(graphics);
	}

	private LayoutableRenderableEntity toRenderableEntity(FriendsViewerEntry entry)
	{
		final LineComponent line = LineComponent.builder()
			.leftFont(getFont(config.fontSize()))
			.left(entry.getName())
			.rightFont(getFont(config.fontSize()))
			.right("W" + entry.getWorld())
			.rightColor(entry.getWorld() == client.getWorld() ? config.sameWorldColor() : config.differentWorldColor())
			.build();
		return entry.getIcon() != null ?
			SplitComponent.builder()
				.orientation(ComponentOrientation.HORIZONTAL)
				.first(new ImageComponent(entry.getIcon()))
				.second(line)
				.gap(new Point(1, 0))
				.build() :
			line;
	}

	private Font getFont(FriendsViewerFontSize fontSize)
	{
		switch (fontSize)
		{
			case REGULAR:
			{
				return FontManager.getRunescapeFont();
			}
			case SMALL:
			{
				return FontManager.getRunescapeSmallFont();
			}
			default:
			{
				throw new UnsupportedOperationException("Unknown font size: " + config.fontSize());
			}
		}
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.friendsviewer;

public enum FriendsViewerFontSize
{
	REGULAR, SMALL
}

