package dev.denaro;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("friendlyGuide")
public interface FriendlyGuideConfig extends Config
{
	@ConfigItem(
			keyName = "introduction",
			name = "Introduction",
			description = "Show an introduction to the player about the friendly guide"
	)
	default boolean showIntroduction() { return true; }

	@ConfigItem(
			keyName = "model_ids",
			name = "Model Ids",
			description = "comma separated list of ids",
			hidden = true
	)
	default String modelIds() { return "214, 250, 5674, 5668, 5672, 7123"; }

	@ConfigItem(
			keyName = "etag",
			name = "Etag",
			description = "Used to download new dialogs only when necessary"
	)
	default String etag() { return ""; }

	@ConfigItem(
			keyName = "data",
			name = "Data",
			description = "Data used for guide responses",
			hidden = true
	)
	default String data() { return ""; }
}

package dev.denaro;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.google.inject.name.Named;
import dev.denaro.dialog.Dialog;
import dev.denaro.dialog.options.conditions.DialogCondition;
import dev.denaro.dialog.options.requirements.DialogRequirement;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import okhttp3.OkHttpClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.util.Arrays;

@Slf4j
@PluginDescriptor(
	name = "Friendly Guide"
)
public class FriendlyGuidePlugin extends Plugin
{
	private static final Logger logger = LoggerFactory.getLogger(FriendlyGuidePlugin.class);

	@Getter
	@Inject
	private Client client;

	@Getter
	@Inject
	private FriendlyGuideConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Getter
	@Inject
	private ChatMessageManager chatMessageManager;

	@Getter
	@Inject
	private ChatboxPanelManager chatboxPanelManager;

	@Inject
	private MenuManager menuManager;

	@Inject
	private TooltipManager tooltipManager;

	@Inject
	private ClientThread clientThread;

	private FriendlyGuideOverlay overlay;

	@Inject
	@Named("developerMode") boolean developerMode;

	@Inject
	private OkHttpClient httpClient;

	@Override
	protected void startUp() throws InterruptedException {
		log.info("Friendly Guide started!");
		DialogCondition.registerAllConditions();
		DialogRequirement.registerAllRequirements();

		this.overlayManager.add(overlay = new FriendlyGuideOverlay());

		Guide.firstLoad(this, this.clientThread);

		new DialogDataLoader(this.httpClient, this.config, this.configManager).Load();
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Friendly Guide stopped!");

		Guide.unload(this.clientThread);
	}

	public void setIntroduced()
	{
		this.configManager.setConfiguration("friendlyGuide", "introduction", false);
	}

	@Subscribe
	public void onClientTick(ClientTick tick)
	{
		Guide.tickAll();

		if (client.isMenuOpen())
		{
			return;
		}

		for (Guide guide : Guide.allGuides())
		{
			Shape shape = Perspective.getClickbox(this.client, this.client.getTopLevelWorldView(), guide.getModel(), guide.getOrientation(), guide.getX(), guide.getY(), guide.getZ());
			Point point = this.client.getMouseCanvasPosition();
			if (shape != null && shape.contains(point.getX(), point.getY()))
			{
				MenuEntry entry = this.client.getMenu().createMenuEntry(-1);
				entry.setOption("Talk to Friendly Guide");
				entry.setType(MenuAction.CANCEL);
				Arrays.stream(this.client.getMenu().getMenuEntries()).filter(e -> e.getOption().equalsIgnoreCase("walk here")).findFirst().get().setDeprioritized(true);

			}
		}
	}

	@Provides
	FriendlyGuideConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FriendlyGuideConfig.class);
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted command)
	{
		if (developerMode)
		{
			logger.debug(command.getCommand());
			String cmd = command.getCommand();
			if (cmd.equals("guide"))
			{
				this.chatboxPanelManager.openInput(new DialogBox(this, Dialog.createDialogTree(this)));
			}
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked)
	{
		if (menuOptionClicked.getMenuOption().equalsIgnoreCase("Talk to Friendly Guide"))
		{
			this.chatboxPanelManager.openInput(new DialogBox(this, Dialog.createDialogTree(this)));

			Point point = this.client.getMouseCanvasPosition();
			this.overlay.setClick(point);
		}
		else
		{
			if (menuOptionClicked.getMenuAction() != MenuAction.CANCEL && this.chatboxPanelManager.getCurrentInput() instanceof DialogBox)
			{
				this.chatboxPanelManager.close();
			}
		}
	}
}

package dev.denaro;

import net.runelite.api.coords.WorldPoint;

public class GuidePosition
{
    WorldPoint point;
    int orientation;

    public GuidePosition(WorldPoint point, int orientation)
    {
        this.point = point;
        this.orientation = orientation;
    }
}

package dev.denaro;

import dev.denaro.dialog.Dialog;
import net.runelite.client.config.ConfigManager;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class DialogDataLoader
{
    private static final Logger logger = LoggerFactory.getLogger(DialogDataLoader.class);
    private OkHttpClient httpClient;
    private FriendlyGuideConfig config;
    private ConfigManager configManager;
    public DialogDataLoader(OkHttpClient httpClient, FriendlyGuideConfig config, ConfigManager configManager)
    {
        this.httpClient = httpClient;
        this.config = config;
        this.configManager = configManager;
    }

    public void Load() {
        logger.debug("Loading Dialog data...");
        logger.debug("etag:" + this.config.etag());
        Request request = new Request.Builder()
                .get()
                .url("https://github.com/NicholasDenaro/osrs-friendly-guide-responses/releases/download/Latest/merged.toml")
                .header("IF-NONE-MATCH", this.config.etag())
                .build();

        final ConfigManager cfgMgr = this.configManager;

        httpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                logger.error("Failed to get guide responses");
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                logger.debug("Data received, code: " + response.code());
                if (response.code() == 304) {
                    logger.debug("Using cached data for etag=" + config.etag());
                }
                else if (response.code() == 200)
                {
                    String body = response.body().string();
                    if (body.startsWith("\n---")) {
                        cfgMgr.setConfiguration("friendlyGuide", "etag", response.headers().get("etag"));
                        logger.debug("Set etag=" + config.etag());
                        cfgMgr.setConfiguration("friendlyGuide", "data", body);
                    }

                } else {
                    logger.error("Error fetching dynamic responses. Status=" + response.code() + "\nUsing cache of dynamic responses");
                }

                Dialog.loadDynamicToml(config.data());
            }
        });
    }
}

package dev.denaro;

import dev.denaro.dialog.Dialog;
import dev.denaro.dialog.DialogMessage;
import dev.denaro.dialog.DialogOption;
import net.runelite.api.*;
import net.runelite.api.widgets.*;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.game.chatbox.ChatboxInput;

import java.awt.*;

public class DialogBox extends ChatboxInput
{

    private final int X_OFFSET = 11;
    private final int Y_OFFSET = 10;

    private FriendlyGuidePlugin plugin;
    private Dialog dialog;
    public DialogBox(FriendlyGuidePlugin plugin, Dialog dialog)
    {
        this.plugin = plugin;
        this.dialog = dialog;
    }

    @Override
    public void open()
    {
        Widget chatbox = plugin.getChatboxPanelManager().getContainerWidget();

        this.constructDialog(chatbox, this.dialog);

//        this.plugin.getChatMessageManager().queue(
//                QueuedMessage.builder()
//                        .type(ChatMessageType.DIALOG)
//                        .runeLiteFormattedMessage("Hello World?")
//                        .build());
    }

    private void constructDialog(Widget chatbox, Dialog dialog)
    {
        if (dialog instanceof DialogMessage)
        {
            DialogMessage dialogMessage = (DialogMessage) dialog;

            if (dialogMessage.speaker == DialogMessage.DialogSpeaker.Guide)
            {
                this.constructFace(chatbox, new int[]{52, 82});
            }
            else
            {
                this.constructPlayerFace(chatbox);
            }

            int xOffset = dialogMessage.speaker == DialogMessage.DialogSpeaker.Guide ? 0 : (5 - 96);

            Widget talker = chatbox.createChild(-1, WidgetType.TEXT);
            talker.setText(dialogMessage.speaker == DialogMessage.DialogSpeaker.Guide ? "Friendly Guide" : plugin.getClient().getLocalPlayer().getName());
            talker.setTextColor(0x800000);
            talker.setFontId(FontID.QUILL_8);
            talker.setOriginalX(X_OFFSET + 96 + xOffset);
            talker.setOriginalY(Y_OFFSET + 0);
            talker.setOriginalWidth(380);
            talker.setOriginalHeight(17);
            talker.setXTextAlignment(WidgetTextAlignment.CENTER);
            talker.setYTextAlignment(WidgetTextAlignment.CENTER);
            talker.revalidate();

            Widget text = chatbox.createChild(-1, WidgetType.TEXT);
            text.setText(dialogMessage.message);
            text.setTextColor(0x000000);
            text.setFontId(FontID.QUILL_8);
            text.setOriginalX(X_OFFSET + 96 + xOffset);
            text.setOriginalY(Y_OFFSET + 16);
            text.setOriginalWidth(380);
            text.setOriginalHeight(67);
            text.setXTextAlignment(WidgetTextAlignment.CENTER);
            text.setYTextAlignment(WidgetTextAlignment.CENTER);
            text.revalidate();

            Widget cont = chatbox.createChild(-1, WidgetType.TEXT);
            cont.setText("Click here to continue");
            cont.setTextColor(Color.BLUE.getRGB());
            cont.setFontId(FontID.QUILL_8);
            cont.setOriginalX(X_OFFSET + 96 + xOffset);
            cont.setOriginalY(Y_OFFSET + 80);
            cont.setOriginalWidth(380);
            cont.setOriginalHeight(17);
            cont.setXTextAlignment(WidgetTextAlignment.CENTER);
            cont.setYTextAlignment(WidgetTextAlignment.TOP);
            cont.setAction(0, "Continue");
            cont.setOnOpListener((JavaScriptCallback) event -> this.nextDialog());
            cont.setOnMouseOverListener((JavaScriptCallback) ev -> cont.setTextColor(Color.WHITE.getRGB()));
            cont.setOnMouseLeaveListener((JavaScriptCallback) ev -> cont.setTextColor(Color.BLUE.getRGB()));
            cont.setOnKeyListener((JavaScriptCallback) ev -> this.keyTyped(ev));
            cont.setHasListener(true);
            cont.revalidate();
        }
        else if (dialog instanceof DialogOption)
        {
            DialogOption dialogOption = (DialogOption) dialog;

            int yPos = 0;

            Widget talker = chatbox.createChild(-1, WidgetType.TEXT);
            talker.setText("Select an option");
            talker.setTextColor(0x800000);
            talker.setFontId(FontID.QUILL_8);
            talker.setOriginalX(X_OFFSET + 0);
            talker.setOriginalY(Y_OFFSET + yPos);
            talker.setOriginalWidth(479);
            talker.setOriginalHeight(20);
            talker.setXTextAlignment(WidgetTextAlignment.CENTER);
            talker.setYTextAlignment(WidgetTextAlignment.CENTER);
            talker.revalidate();
            yPos += 20;

            for (int i = 0; i < dialogOption.options.length; i++)
            {
                int finalI = i + 1;
                DialogOption.Option message = dialogOption.options[i];
                Widget text = chatbox.createChild(-1, WidgetType.TEXT);
                text.setText(finalI + ". " + message.text);
                text.setTextColor(Color.BLACK.getRGB());
                text.setFontId(FontID.QUILL_8);
                text.setOriginalX(X_OFFSET + 0);
                text.setOriginalY(Y_OFFSET + yPos);
                text.setOriginalWidth(479);
                text.setOriginalHeight(16);
                text.setXTextAlignment(WidgetTextAlignment.CENTER);
                text.setYTextAlignment(WidgetTextAlignment.LEFT);
                text.setAction(0, message.text);
                text.setOnOpListener((JavaScriptCallback) event -> {
                    this.chooseOption(finalI - 1);
                });
                text.setOnMouseOverListener((JavaScriptCallback) ev -> text.setTextColor(Color.WHITE.getRGB()));
                text.setOnMouseLeaveListener((JavaScriptCallback) ev -> text.setTextColor(Color.BLACK.getRGB()));
                text.setOnKeyListener((JavaScriptCallback) ev -> {
                    if ((String.valueOf((char)ev.getTypedKeyChar())).equals("" + finalI)) {
                        this.chooseOption(finalI - 1);
                    }
                });
                text.setHasListener(true);
                text.revalidate();

                yPos += 16;
            }

        }
    }

    private void constructFace(Widget chatbox, int[] modelIds)
    {
        for (int modelId : modelIds) {
            Widget face = chatbox.createChild(-1, WidgetType.MODEL);
            face.setModelId(modelId);
            face.setRotationZ((int)((360 - 20.0) / 360 * 2047));
            face.setOriginalX(X_OFFSET + 35);
            face.setOriginalY(Y_OFFSET + 43);
            face.setOriginalWidth(50);
            face.setOriginalHeight(50);
            face.setModelZoom(800);
            face.setAnimationId(568);
            face.revalidate();
        }
    }

    private void constructPlayerFace(Widget chatbox)
    {
        Widget face = chatbox.createChild(-1, WidgetType.MODEL);
        face.setModelId(0);
        face.setModelType(3);
        face.setRotationZ((int)(20.0 / 360 * 2047));
        face.setXPositionMode(WidgetPositionMode.ABSOLUTE_RIGHT);
        face.setOriginalX(X_OFFSET + 35);
        face.setOriginalY(Y_OFFSET + 43);
        face.setOriginalWidth(50);
        face.setOriginalHeight(50);
        face.setModelZoom(800);
        face.setAnimationId(568);
        face.revalidate();
    }

    private void nextDialog()
    {
        Dialog next = dialog.next();
        this.plugin.getChatboxPanelManager().close();
        if (next != null)
        {
            this.plugin.getChatboxPanelManager().openInput(new DialogBox(this.plugin, next));
        }
    }

    private void chooseOption(int optionIndex)
    {
        if (dialog instanceof DialogOption)
        {
            Dialog next = ((DialogOption) dialog).options[optionIndex].next();
            this.plugin.getChatboxPanelManager().close();
            if (next != null)
            {
                this.plugin.getChatboxPanelManager().openInput(new DialogBox(this.plugin, next));
            }
        }
    }

    public void keyTyped(ScriptEvent event)
    {
        if (event.getTypedKeyChar() == ' ')
        {
            this.nextDialog();
        }
    }
}

package dev.denaro;

import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.callback.ClientThread;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Arrays;

public class Guide
{
    private static final Logger logger = LoggerFactory.getLogger(Guide.class);

    private static final GuidePosition GEGuide = new GuidePosition(new WorldPoint(3157, 3490, 0), 0);
    private static final GuidePosition LumbridgeGuide = new GuidePosition(new WorldPoint(3217, 3223, 0), 1536);

    private static ArrayList<Guide> guides = new ArrayList<>();

    public static ArrayList<Guide> allGuides()
    {
        return guides;
    }

    public static void unload(ClientThread clientThread)
    {
        for (Guide guide : guides)
        {
            guide.hide(clientThread);
        }
    }

    public static void load(ClientThread clientThread)
    {
        for (Guide guide : guides)
        {
            guide.show(clientThread);
        }
    }

    public static void firstLoad(FriendlyGuidePlugin plugin, ClientThread clientThread)
    {
        clientThread.invokeLater(() ->
        {
            new Guide(plugin, Guide.GEGuide);
            new Guide(plugin, Guide.LumbridgeGuide);

            Guide.load(clientThread);
        });
    }

    private static ModelData model;

    private RuneLiteObject object;
    private FriendlyGuidePlugin plugin;
    private GuidePosition position;
    private boolean shown = false;
    public Guide(FriendlyGuidePlugin plugin, GuidePosition position)
    {
        this.plugin = plugin;
        this.position = position;
        guides.add(this);

        if (model == null)
        {
            logger.debug("Using model ids: " + this.plugin.getConfig().modelIds());

            int[] ids = Arrays.stream(this.plugin.getConfig().modelIds().split(", ")).mapToInt(Integer::parseInt).toArray();

            ArrayList<ModelData> data = new ArrayList<>();
            for (int id : ids) {
                data.add(this.plugin.getClient().loadModelData(id));
            }

            model = this.plugin.getClient().mergeModels(data.toArray(new ModelData[data.size()]), data.size());
        }

        Player player = this.plugin.getClient().getLocalPlayer();
        this.object = plugin.getClient().createRuneLiteObject();
        this.object.setModel(model.light(64, 850, -30, -50, -30));

        this.object.setAnimationController(new AnimationController(plugin.getClient(), -1));
    }

    public static void tickAll()
    {
        for (Guide guide : guides)
        {
            guide.tick();
        }
    }

    public void tick()
    {
        if (LocalPoint.fromWorld(this.plugin.getClient().getLocalPlayer().getWorldView(), position.point) != null)
        {
            this.show(null);
        }
        else
        {
            this.hide(null);
        }
    }

    public Model getModel()
    {
        return this.object.getModel();
    }

    public int getOrientation()
    {
        return this.object.getOrientation();
    }

    public int getX()
    {
        return this.object.getX();
    }

    public int getY()
    {
        return this.object.getY();
    }

    public int getZ()
    {
        return this.object.getZ();
    }

    public void show(ClientThread clientThread)
    {
        if (this.shown)
        {
            if (!plugin.getClient().isRuneLiteObjectRegistered(this.object))
            {
                plugin.getClient().registerRuneLiteObject(this.object);
            }
            return;
        }
        this.shown = true;

        Runnable r = () ->
        {
            Player player = this.plugin.getClient().getLocalPlayer();
            if (player == null)
            {
                this.shown = false;
                return;
            }

            LocalPoint local = LocalPoint.fromWorld(player.getWorldView(), position.point);
            if (local == null)
            {
                this.shown = false;
                return;
            }
            this.object.setLocation(local, position.point.getPlane());
            this.object.setOrientation(position.orientation);
            this.object.setActive(true);
            this.shown = true;
            logger.debug(String.valueOf(this.object.getLocation()));
        };

        if (this.plugin.getClient().isClientThread())
        {
            r.run();
        }
        else
        {
            clientThread.invokeLater(r);
        }
    }

    public void hide(ClientThread clientThread)
    {
        if (!this.shown)
        {
            return;
        }

        Runnable r = () ->
        {
            this.object.setActive(false);
            this.shown = false;
        };

        this.shown = false;

        if (clientThread != null)
        {
            clientThread.invokeLater(r);
        }
        else
        {
            r.run();
        }
    }
}

package dev.denaro;

import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.util.ImageUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.awt.image.BufferedImage;

public class FriendlyGuideOverlay extends Overlay
{
    private static final Logger logger = LoggerFactory.getLogger(FriendlyGuideOverlay.class);
    private static final BufferedImage[] images = new BufferedImage[4];

    static
    {
        try
        {
            images[0] = ImageUtil.loadImageResource(FriendlyGuideOverlay.class, "/images/click/click1.png");
            images[1] = ImageUtil.loadImageResource(FriendlyGuideOverlay.class, "/images/click/click2.png");
            images[2] = ImageUtil.loadImageResource(FriendlyGuideOverlay.class, "/images/click/click3.png");
            images[3] = ImageUtil.loadImageResource(FriendlyGuideOverlay.class, "/images/click/click4.png");
        }
        catch (Exception ex)
        {
            logger.error(String.valueOf(ex));
        }
    }

    private class ClickAnimation
    {
        private Point point;
        private int timer;

        public ClickAnimation(Point point)
        {
            this.point = point;
            timer = 16;
        }

        public void render(Graphics2D graphics)
        {
            BufferedImage image = images[(int)(3 - (timer-- * 1.0 / 16 * 3))];
            graphics.drawImage(image, this.point.getX() - image.getWidth() / 2, this.point.getY() - image.getHeight() / 2, null);
        }

        public boolean isFinished()
        {
            return timer <= 0;
        }
    }

    private ClickAnimation click;

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (click != null)
        {
            click.render(graphics);
            if (click.isFinished())
            {
                click = null;
            }
        }

        return null;
    }

    public void setClick(Point point)
    {
        Point p = new Point(point.getX() - this.getBounds().x, point.getY() - this.getBounds().y);
        click = new ClickAnimation(p);
    }
}

package dev.denaro.dialog;

import java.util.function.Supplier;

public class DialogOption extends Dialog
{
    public static class Option
    {
        public String text;
        private Dialog next;
        private Supplier<Dialog> decider;

        public Option(String text, Dialog next)
        {
            this.text = text;
            this.next = next;
        }

        public Option(String option, Supplier<Dialog> decider)
        {
            this.text = option;
            this.decider = decider;
        }

        public Dialog next()
        {
            if (this.next != null)
            {
                return this.next;
            }
            else
            {
                return this.decider.get();
            }
        }
    }

    public final Option[] options;

    public DialogOption(Option[] options)
    {
        this.options = options;
    }
}
package dev.denaro.dialog;

import dev.denaro.FriendlyGuidePlugin;
import dev.denaro.dialog.options.*;
import dev.denaro.dialog.options.requirements.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tomlj.Toml;
import org.tomlj.TomlArray;
import org.tomlj.TomlParseResult;
import org.tomlj.TomlTable;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public abstract class Dialog
{
    private static final Logger logger = LoggerFactory.getLogger(Dialog.class);

    public static Map<DialogType, List<DialogResponse>> dialogResponses = new HashMap();

    protected Dialog()
    {

    }

    private Runnable runnable;
    protected Dialog(Runnable runnable)
    {
        this.runnable = runnable;
    }

    private Dialog next;
    public Dialog setNext(Dialog next)
    {
        this.next = next;
        return this.next;
    }

    public Dialog next()
    {
        if (this.runnable != null)
        {
            this.runnable.run();
        }
        return this.next;
    }

    public static Dialog createDialogTree(FriendlyGuidePlugin plugin)
    {
        Dialog intro = new DialogMessage(DialogMessage.DialogSpeaker.Player, "Hello. Who are you?");


        Dialog endIntro = intro.setNext(new DialogMessage(DialogMessage.DialogSpeaker.Guide, "I'm the Friendly Guide."))
            .setNext(new DialogMessage(DialogMessage.DialogSpeaker.Player, "What can you do for me?"))
            .setNext(new DialogMessage(DialogMessage.DialogSpeaker.Guide, "I can give you ideas for what to do next."))
            .setNext(new DialogMessage(DialogMessage.DialogSpeaker.Player, "That sounds nice.", plugin::setIntroduced));



        Dialog options = new DialogOption(
                new DialogOption.Option[]{
                        new DialogOption.Option("Combat", () -> Dialog.buildOption(plugin, getCombatResponses())),
                        new DialogOption.Option("Quest", () -> Dialog.buildOption(plugin, getQuestResponses(), dr -> dr.isQuestUnstarted(plugin.getClient()))),
                        new DialogOption.Option("Money", () -> Dialog.buildOption(plugin, getMoneyResponses())),
                        new DialogOption.Option("Skill", () -> new DialogOption(new DialogOption.Option[]{
                                new DialogOption.Option("Gather", () -> Dialog.buildOption(plugin, getSkillResponses(), dr -> dr.isSkillGroup("Gather"))),
                                new DialogOption.Option("Refine", () -> Dialog.buildOption(plugin, getSkillResponses(), dr -> dr.isSkillGroup("Refine"))),
                                new DialogOption.Option("Combat", () -> Dialog.buildOption(plugin, getSkillResponses(), dr -> dr.isSkillGroup("Combat"))),
                                new DialogOption.Option("Other", () -> Dialog.buildOption(plugin, getSkillResponses(), dr -> dr.isSkillGroup("Other"))),
                        })),
                        new DialogOption.Option("Item", () -> new DialogOption(new DialogOption.Option[]{
                                new DialogOption.Option("Weapon", () -> Dialog.buildOption(plugin, getItemResponses(), dr -> dr.isItemType("Weapon"))),
                                new DialogOption.Option("Armor", () -> Dialog.buildOption(plugin, getItemResponses(), dr -> dr.isItemType("Armor"))),
                                new DialogOption.Option("Potion", () -> Dialog.buildOption(plugin, getItemResponses(), dr -> dr.isItemType("Potion"))),
                                new DialogOption.Option("Teleport", () -> Dialog.buildOption(plugin, getItemResponses(), dr -> dr.isItemType("Teleport"))),
                                new DialogOption.Option("Food", () -> Dialog.buildOption(plugin, getItemResponses(), dr -> dr.isItemType("Food"))),
                        })),
                        new DialogOption.Option("Explore", () -> Dialog.buildOption(plugin, getExploreResponses())),
                });

        endIntro.setNext(options);

        return plugin.getConfig().showIntroduction() ? intro : options;
    }

    private static Stream<DialogCombatResponse> getCombatResponses()
    {
        return getResponses(DialogType.Combat, DialogCombatResponse.class);
    }

    private static Stream<DialogQuestResponse> getQuestResponses()
    {
        return getResponses(DialogType.Quest, DialogQuestResponse.class);
    }

    private static Stream<DialogMoneyResponse> getMoneyResponses()
    {
        return getResponses(DialogType.Money, DialogMoneyResponse.class);
    }

    private static Stream<DialogExploreResponse> getExploreResponses()
    {
        return getResponses(DialogType.Explore, DialogExploreResponse.class);
    }

    private static Stream<DialogItemResponse> getItemResponses()
    {
        return getResponses(DialogType.Item, DialogItemResponse.class);
    }

    private static Stream<DialogSkillResponse> getSkillResponses()
    {
        return getResponses(DialogType.Skill, DialogSkillResponse.class);
    }

    private static <T extends DialogResponse> Stream<T> getResponses(DialogType type, Class<T> cl)
    {
        return Dialog.dialogResponses.get(type).stream().filter(cl::isInstance).map(response -> (T) response);
    }

    private static <T extends DialogResponse> Dialog buildOption(FriendlyGuidePlugin plugin, Stream<T> dialogs)
    {
        try
        {
            return buildOption(plugin, dialogs, t -> true);
        }
        catch (Exception ex)
        {
            logger.error(ex.getMessage());
            return new DialogOption(new DialogOption.Option[]{new DialogOption.Option("Error", new DialogMessage(DialogMessage.DialogSpeaker.Guide, "Error"))});
        }
    }

    private static <T extends DialogResponse> Dialog buildOption(FriendlyGuidePlugin plugin, Stream<T> dialogs, Predicate<T> predicate) {
        List<T> list = dialogs.filter(predicate).filter(response ->
                response.requirements.stream().allMatch(requirement -> requirement.isMet(plugin.getClient()))
        ).collect(Collectors.toList());

        if (list.isEmpty())
        {
            logger.debug("No dialogs found");
            return new DialogMessage(DialogMessage.DialogSpeaker.Guide, "I don't have anything for you about this right now.");
        }

        int index = (int) (Math.random() * list.size());
        try
        {
            return list.get(index).createDialog(plugin.getClient());
        }
        catch (Exception e)
        {
            logger.error("Error", e);
            return new DialogOption(new DialogOption.Option[]{new DialogOption.Option("Error", new DialogMessage(DialogMessage.DialogSpeaker.Guide, "Error"))});
        }
    }

    public static void loadDynamicToml(String combinedTomlString)
    {
        AtomicInteger counter = new AtomicInteger(0);
        String[] tomlStrings = combinedTomlString.split("---");
        for (String tomlString : tomlStrings)
        {
            logger.debug("Loading doc: " + tomlString);
            TomlParseResult result = Toml.parse(tomlString);

            if (result.isEmpty())
            {
                continue;
            }

            loadDocument(result);
            logger.debug("doc loaded");
            counter.incrementAndGet();
        }
        logger.debug("loaded " + counter.get() + " docs");
    }

    static {
        logger.debug("loading yml files");
        Dialog.dialogResponses.put(DialogType.Combat, new ArrayList<>());
        Dialog.dialogResponses.put(DialogType.Item, new ArrayList<>());
        Dialog.dialogResponses.put(DialogType.Money, new ArrayList<>());
        Dialog.dialogResponses.put(DialogType.Explore, new ArrayList<>());
        Dialog.dialogResponses.put(DialogType.Quest, new ArrayList<>());
        Dialog.dialogResponses.put(DialogType.Skill, new ArrayList<>());
        try
        {
            InputStream dialogFolder = Dialog.class.getResourceAsStream("/dialogs");
            BufferedReader reader = new BufferedReader(new InputStreamReader(dialogFolder));
            ArrayList<String> files = new ArrayList<>();
            String resource;
            while((resource = reader.readLine()) != null) {
                files.add("/dialogs/" + resource);
            }

            reader.close();

            logger.debug(String.valueOf(files));

            for (String file : files)
            {
                InputStream dialogFileStream = Dialog.class.getResourceAsStream(file);
                if (dialogFileStream != null)
                {
                    logger.debug("Loading file: " + file);
                    TomlParseResult document = Toml.parse(file);

                    loadDocument(document);
                }
            }

            logger.debug("Finished loading dialogs");
        }
        catch (IOException exception)
        {
            logger.error("Failed to load files:" + exception.getMessage());
        }
        catch (Exception exception)
        {
            logger.error("Other Exception:", exception);
        }
    }

    private static void loadDocument(TomlParseResult document)
    {
        String type = document.getString("type");

        TomlArray requirements = document.getArrayOrEmpty("requirements");
        TomlArray messages = document.getArray("messages");

        List<DialogRequirement> requirementList = new ArrayList<>();
        for (int i = 0; i < requirements.size(); i++)
        {
            TomlTable requirement = requirements.getTable(i);

            String requirementType = requirement.getString("type").toLowerCase();
            DialogRequirement req = DialogRequirement.New(requirementType, requirement);
            if (req != null)
            {
                requirementList.add(req);
            }
        }

        switch (type.toLowerCase())
        {
            case "combat":
                Dialog.dialogResponses.get(DialogType.Combat).add(new DialogCombatResponse(messages, requirementList));
                break;
            case "item":
                String itemType = document.getString("itemType");
                Dialog.dialogResponses.get(DialogType.Item).add(new DialogItemResponse(messages, requirementList, itemType));
                break;
            case "money":
                Dialog.dialogResponses.get(DialogType.Money).add(new DialogMoneyResponse(messages, requirementList));
                break;
            case "quest":
                String quest = document.getString("quest");
                Dialog.dialogResponses.get(DialogType.Quest).add(new DialogQuestResponse(messages, requirementList, quest));
                break;
            case "explore":
                Dialog.dialogResponses.get(DialogType.Explore).add(new DialogExploreResponse(messages, requirementList));
                break;
            case "skill":
                String skillGroup = document.getString("skillGroup");
                Dialog.dialogResponses.get(DialogType.Skill).add(new DialogSkillResponse(messages, requirementList, skillGroup));
                break;
        }
    }
}

package dev.denaro.dialog;

public class DialogMessage extends Dialog
{
    public enum DialogSpeaker {Player, Guide}
    public DialogSpeaker speaker;
    public String message;

    public DialogMessage(DialogSpeaker speaker, String message)
    {
        this.speaker = speaker;
        this.message = message;
    }

    public DialogMessage(DialogSpeaker speaker, String message, Runnable runnable)
    {
        super(runnable);
        this.speaker = speaker;
        this.message = message;
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.options.requirements.DialogRequirement;
import org.tomlj.TomlArray;

import java.util.List;

public class DialogMoneyResponse extends DialogResponse
{
    public DialogMoneyResponse(TomlArray messages, List<DialogRequirement> requirements) {
        super(messages, requirements);
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.options.requirements.DialogRequirement;
import org.tomlj.TomlArray;

import java.util.List;

public class DialogItemResponse extends DialogResponse
{
    public String itemType;
    public DialogItemResponse(TomlArray messages, List<DialogRequirement> requirements, String itemType) {
        super(messages, requirements);
        this.itemType = itemType;
    }

    public boolean isItemType(String type)
    {
        return type.equalsIgnoreCase(this.itemType);
    }

    @Override
    public String toString()
    {
        return "DialogItemResponse " + itemType + " " + this.requirements;
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.options.requirements.DialogRequirement;
import org.tomlj.TomlArray;

import java.util.List;

public class DialogSkillResponse extends DialogResponse
{
    public String skillGroup;
    public DialogSkillResponse(TomlArray messages, List<DialogRequirement> requirements, String skillGroup) {
        super(messages, requirements);
        this.skillGroup = skillGroup;
    }

    public boolean isSkillGroup(String group)
    {
        return group.equalsIgnoreCase(this.skillGroup);
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.options.requirements.DialogRequirement;
import org.tomlj.TomlArray;

import java.util.List;

public class DialogCombatResponse extends DialogResponse
{
    public DialogCombatResponse(TomlArray messages, List<DialogRequirement> requirements) {
        super(messages, requirements);
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.options.requirements.DialogRequirement;
import net.runelite.api.Client;
import net.runelite.api.Quest;
import net.runelite.api.QuestState;
import org.tomlj.TomlArray;

import java.util.List;

public class DialogQuestResponse extends DialogResponse
{
    public String quest;
    public DialogQuestResponse(TomlArray messages, List<DialogRequirement> requirements, String quest) {
        super(messages, requirements);
        this.quest = quest;
    }

    public boolean isQuestUnstarted(Client client)
    {
        String enumName = this.quest.toUpperCase().replaceAll(" ", "_").replaceAll("'", "");
        try
        {
            QuestState state = Quest.valueOf(enumName).getState(client);

            return state == QuestState.NOT_STARTED;
        }
        catch (Exception ex)
        {

        }

        return false;
    }
}

package dev.denaro.dialog.options.requirements;

import net.runelite.api.Client;
import net.runelite.api.annotations.Component;
import net.runelite.api.gameval.DBTableID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tomlj.TomlTable;

import java.util.Map;

@Component
public class DialogMusicRequirement extends DialogRequirement
{
    private static final Logger logger = LoggerFactory.getLogger(DialogMusicRequirement.class);
    String track;
    private Boolean isMet = null;

    public static DialogMusicRequirement create(TomlTable requirement) {
        DialogMusicRequirement req = new DialogMusicRequirement();
        req.track = "MUSIC_" + (requirement.getString("track").replaceAll(" ", "_").replaceAll("\'", "").toUpperCase());

        req.setup(requirement);
        return req;
    }

    @Override
    public boolean _isMet(Client client)
    {
        if (isMet != null)
        {
            return isMet;
        }

        try
        {
            int musicDbrowId = DialogMusicRequirement.musicRows.get(track);
            client.runScript(252, musicDbrowId);
            boolean unlocked = client.getIntStack()[0] == 1;

            this.isMet = unlocked;

            return unlocked;
        }
        catch (Exception exception)
        {
            logger.error(("failed to check music requirement"), exception);
        }
        return false;
    }

    private static final Map<String, Integer> musicRows = Map.ofEntries(
        Map.entry("MUSIC_RAT_BOSS", DBTableID.Music.Row.MUSIC_RAT_BOSS),
        Map.entry("MUSIC_7TH_REALM", DBTableID.Music.Row.MUSIC_7TH_REALM),
        Map.entry("MUSIC_A_FARMERS_GRIND", DBTableID.Music.Row.MUSIC_A_FARMERS_GRIND),
        Map.entry("MUSIC_ADVENTURE", DBTableID.Music.Row.MUSIC_ADVENTURE),
        Map.entry("MUSIC_AL_KHARID", DBTableID.Music.Row.MUSIC_AL_KHARID),
        Map.entry("MUSIC_ALCHEMICAL_HYDRA", DBTableID.Music.Row.MUSIC_ALCHEMICAL_HYDRA),
        Map.entry("MUSIC_ALLS_FAIRY_IN_LOVE_N_WAR", DBTableID.Music.Row.MUSIC_ALLS_FAIRY_IN_LOVE_N_WAR),
        Map.entry("MUSIC_ALONE", DBTableID.Music.Row.MUSIC_ALONE),
        Map.entry("MUSIC_ALTAREGO", DBTableID.Music.Row.MUSIC_ALTAREGO),
        Map.entry("MUSIC_ALTERNATIVE_ROOT", DBTableID.Music.Row.MUSIC_ALTERNATIVE_ROOT),
        Map.entry("MUSIC_AMASCUTS_THRALLS", DBTableID.Music.Row.MUSIC_AMASCUTS_THRALLS),
        Map.entry("MUSIC_AMBIENT_JUNGLE", DBTableID.Music.Row.MUSIC_AMBIENT_JUNGLE),
        Map.entry("MUSIC_AMLODD", DBTableID.Music.Row.MUSIC_AMLODD),
        Map.entry("MUSIC_ANCIENT_PRISON", DBTableID.Music.Row.MUSIC_ANCIENT_PRISON),
        Map.entry("MUSIC_ANYWHERE", DBTableID.Music.Row.MUSIC_ANYWHERE),
        Map.entry("MUSIC_ARABIAN", DBTableID.Music.Row.MUSIC_ARABIAN),
        Map.entry("MUSIC_ARABIAN2", DBTableID.Music.Row.MUSIC_ARABIAN2),
        Map.entry("MUSIC_ARABIAN3", DBTableID.Music.Row.MUSIC_ARABIAN3),
        Map.entry("MUSIC_ARABIQUE", DBTableID.Music.Row.MUSIC_ARABIQUE),
        Map.entry("MUSIC_ARAXYTE", DBTableID.Music.Row.MUSIC_ARAXYTE),
        Map.entry("MUSIC_ARBORETUM", DBTableID.Music.Row.MUSIC_ARBORETUM),
        Map.entry("MUSIC_ARCEUUS", DBTableID.Music.Row.MUSIC_ARCEUUS),
        Map.entry("MUSIC_ARCEUUS_OUTSKIRTS", DBTableID.Music.Row.MUSIC_ARCEUUS_OUTSKIRTS),
        Map.entry("MUSIC_ARMADYL_ALLIANCE", DBTableID.Music.Row.MUSIC_ARMADYL_ALLIANCE),
        Map.entry("MUSIC_ARMAGEDDON", DBTableID.Music.Row.MUSIC_ARMAGEDDON),
        Map.entry("MUSIC_ARMY_OF_DARKNESS", DBTableID.Music.Row.MUSIC_ARMY_OF_DARKNESS),
        Map.entry("MUSIC_ARRIVAL", DBTableID.Music.Row.MUSIC_ARRIVAL),
        Map.entry("MUSIC_ARTISTRY", DBTableID.Music.Row.MUSIC_ARTISTRY),
        Map.entry("MUSIC_ASCENT", DBTableID.Music.Row.MUSIC_ASCENT),
        Map.entry("MUSIC_ASSAULT_AND_BATTERY", DBTableID.Music.Row.MUSIC_ASSAULT_AND_BATTERY),
        Map.entry("MUSIC_ATHLETES_FOOT", DBTableID.Music.Row.MUSIC_ATHLETES_FOOT),
        Map.entry("MUSIC_ATTACK1", DBTableID.Music.Row.MUSIC_ATTACK1),
        Map.entry("MUSIC_ATTACK2", DBTableID.Music.Row.MUSIC_ATTACK2),
        Map.entry("MUSIC_ATTACK3", DBTableID.Music.Row.MUSIC_ATTACK3),
        Map.entry("MUSIC_ATTACK4", DBTableID.Music.Row.MUSIC_ATTACK4),
        Map.entry("MUSIC_ATTACK5", DBTableID.Music.Row.MUSIC_ATTACK5),
        Map.entry("MUSIC_ATTACK6", DBTableID.Music.Row.MUSIC_ATTACK6),
        Map.entry("MUSIC_ATTENTION", DBTableID.Music.Row.MUSIC_ATTENTION),
        Map.entry("MUSIC_AUTUMN_IN_BRIDGELUM", DBTableID.Music.Row.MUSIC_AUTUMN_IN_BRIDGELUM),
        Map.entry("MUSIC_AUTUMN_VOYAGE", DBTableID.Music.Row.MUSIC_AUTUMN_VOYAGE),
        Map.entry("MUSIC_AYE_CAR_RUM_BA", DBTableID.Music.Row.MUSIC_AYE_CAR_RUM_BA),
        Map.entry("MUSIC_AZTEC", DBTableID.Music.Row.MUSIC_AZTEC),
        Map.entry("MUSIC_BACK_TO_LIFE", DBTableID.Music.Row.MUSIC_BACK_TO_LIFE),
        Map.entry("MUSIC_BACKGROUND", DBTableID.Music.Row.MUSIC_BACKGROUND),
        Map.entry("MUSIC_BAIT", DBTableID.Music.Row.MUSIC_BAIT),
        Map.entry("MUSIC_BALLAD_OF_ENCHANTMENT", DBTableID.Music.Row.MUSIC_BALLAD_OF_ENCHANTMENT),
        Map.entry("MUSIC_BANDIT_CAMP", DBTableID.Music.Row.MUSIC_BANDIT_CAMP),
        Map.entry("MUSIC_BANDOS_BATTALION", DBTableID.Music.Row.MUSIC_BANDOS_BATTALION),
        Map.entry("MUSIC_BARB_ASSAULT_TUTORIAL", DBTableID.Music.Row.MUSIC_BARB_ASSAULT_TUTORIAL),
        Map.entry("MUSIC_BARB_WIRE", DBTableID.Music.Row.MUSIC_BARB_WIRE),
        Map.entry("MUSIC_BARBARIANISM", DBTableID.Music.Row.MUSIC_BARBARIANISM),
        Map.entry("MUSIC_BARKING_MAD", DBTableID.Music.Row.MUSIC_BARKING_MAD),
        Map.entry("MUSIC_BAROQUE", DBTableID.Music.Row.MUSIC_BAROQUE),
        Map.entry("MUSIC_BARRELCHEST_BATTLE", DBTableID.Music.Row.MUSIC_BARRELCHEST_BATTLE),
        Map.entry("MUSIC_BARRENLAND", DBTableID.Music.Row.MUSIC_BARRENLAND),
        Map.entry("MUSIC_BASILISK_BALLAD", DBTableID.Music.Row.MUSIC_BASILISK_BALLAD),
        Map.entry("MUSIC_BASILISK_FIGHT", DBTableID.Music.Row.MUSIC_BASILISK_FIGHT),
        Map.entry("MUSIC_BASILISK_JAWS", DBTableID.Music.Row.MUSIC_BASILISK_JAWS),
        Map.entry("MUSIC_BASILISK_LAIR", DBTableID.Music.Row.MUSIC_BASILISK_LAIR),
        Map.entry("MUSIC_BASILISK_REIGN", DBTableID.Music.Row.MUSIC_BASILISK_REIGN),
        Map.entry("MUSIC_BATTLEFRONT", DBTableID.Music.Row.MUSIC_BATTLEFRONT),
        Map.entry("MUSIC_BEETLE_JUICE", DBTableID.Music.Row.MUSIC_BEETLE_JUICE),
        Map.entry("MUSIC_BENEATH_THE_STRONGHOLD", DBTableID.Music.Row.MUSIC_BENEATH_THE_STRONGHOLD),
        Map.entry("MUSIC_BERATING_THE_KING", DBTableID.Music.Row.MUSIC_BERATING_THE_KING),
        Map.entry("MUSIC_BEYOND", DBTableID.Music.Row.MUSIC_BEYOND),
        Map.entry("MUSIC_BIG_CHORDS", DBTableID.Music.Row.MUSIC_BIG_CHORDS),
        Map.entry("MUSIC_BIM_TRAINING", DBTableID.Music.Row.MUSIC_BIM_TRAINING),
        Map.entry("MUSIC_BLISTERING_BARNACLES", DBTableID.Music.Row.MUSIC_BLISTERING_BARNACLES),
        Map.entry("MUSIC_BLOODBATH", DBTableID.Music.Row.MUSIC_BLOODBATH),
        Map.entry("MUSIC_BOBS_ON_HOLIDAY", DBTableID.Music.Row.MUSIC_BOBS_ON_HOLIDAY),
        Map.entry("MUSIC_BODY_PARTS", DBTableID.Music.Row.MUSIC_BODY_PARTS),
        Map.entry("MUSIC_BONE_DANCE", DBTableID.Music.Row.MUSIC_BONE_DANCE),
        Map.entry("MUSIC_BONE_DRY", DBTableID.Music.Row.MUSIC_BONE_DRY),
        Map.entry("MUSIC_BOOK_OF_SPELLS", DBTableID.Music.Row.MUSIC_BOOK_OF_SPELLS),
        Map.entry("MUSIC_BORDERLAND", DBTableID.Music.Row.MUSIC_BORDERLAND),
        Map.entry("MUSIC_BOXOFDELIGHTS", DBTableID.Music.Row.MUSIC_BOXOFDELIGHTS),
        Map.entry("MUSIC_BREEZE", DBTableID.Music.Row.MUSIC_BREEZE),
        Map.entry("MUSIC_BREW_HOO_HOO", DBTableID.Music.Row.MUSIC_BREW_HOO_HOO),
        Map.entry("MUSIC_BRIMSTAILS_SCALES", DBTableID.Music.Row.MUSIC_BRIMSTAILS_SCALES),
        Map.entry("MUSIC_BUBBLE_AND_SQUEAK", DBTableID.Music.Row.MUSIC_BUBBLE_AND_SQUEAK),
        Map.entry("MUSIC_BUNNY_SUGAR_RUSH", DBTableID.Music.Row.MUSIC_BUNNY_SUGAR_RUSH),
        Map.entry("MUSIC_BURNING_DESIRE", DBTableID.Music.Row.MUSIC_BURNING_DESIRE),
        Map.entry("MUSIC_CABIN_FEVER", DBTableID.Music.Row.MUSIC_CABIN_FEVER),
        Map.entry("MUSIC_CAMDOZAAL_RUINS", DBTableID.Music.Row.MUSIC_CAMDOZAAL_RUINS),
        Map.entry("MUSIC_CAMDOZAAL_VAULT", DBTableID.Music.Row.MUSIC_CAMDOZAAL_VAULT),
        Map.entry("MUSIC_CAMELOT", DBTableID.Music.Row.MUSIC_CAMELOT),
        Map.entry("MUSIC_CASTLEWARS", DBTableID.Music.Row.MUSIC_CASTLEWARS),
        Map.entry("MUSIC_CATACOMBS_AND_TOMBS", DBTableID.Music.Row.MUSIC_CATACOMBS_AND_TOMBS),
        Map.entry("MUSIC_CATCH_ME_IF_YOU_CAN", DBTableID.Music.Row.MUSIC_CATCH_ME_IF_YOU_CAN),
        Map.entry("MUSIC_CAVE_BACKGROUND", DBTableID.Music.Row.MUSIC_CAVE_BACKGROUND),
        Map.entry("MUSIC_CAVE_OF_BEASTS", DBTableID.Music.Row.MUSIC_CAVE_OF_BEASTS),
        Map.entry("MUSIC_CAVE_OF_THE_GOBLINS", DBTableID.Music.Row.MUSIC_CAVE_OF_THE_GOBLINS),
        Map.entry("MUSIC_CAVERN", DBTableID.Music.Row.MUSIC_CAVERN),
        Map.entry("MUSIC_CELLAR_SONG", DBTableID.Music.Row.MUSIC_CELLAR_SONG),
        Map.entry("MUSIC_CHAIN_OF_COMMAND", DBTableID.Music.Row.MUSIC_CHAIN_OF_COMMAND),
        Map.entry("MUSIC_CHAMBER", DBTableID.Music.Row.MUSIC_CHAMBER),
        Map.entry("MUSIC_CHEF_SURPRISE", DBTableID.Music.Row.MUSIC_CHEF_SURPRISE),
        Map.entry("MUSIC_CHICKENED_OUT", DBTableID.Music.Row.MUSIC_CHICKENED_OUT),
        Map.entry("MUSIC_CHOMPY_HUNT", DBTableID.Music.Row.MUSIC_CHOMPY_HUNT),
        Map.entry("MUSIC_CITY_GUARDIANS", DBTableID.Music.Row.MUSIC_CITY_GUARDIANS),
        Map.entry("MUSIC_CITY_OF_THE_DEAD", DBTableID.Music.Row.MUSIC_CITY_OF_THE_DEAD),
        Map.entry("MUSIC_CLANLINESS", DBTableID.Music.Row.MUSIC_CLANLINESS),
        Map.entry("MUSIC_CLANWARS", DBTableID.Music.Row.MUSIC_CLANWARS),
        Map.entry("MUSIC_CLAUSTROPHOBIA", DBTableID.Music.Row.MUSIC_CLAUSTROPHOBIA),
        Map.entry("MUSIC_CLOSE_QUARTERS", DBTableID.Music.Row.MUSIC_CLOSE_QUARTERS),
        Map.entry("MUSIC_COIL", DBTableID.Music.Row.MUSIC_COIL),
        Map.entry("MUSIC_COMPETITION", DBTableID.Music.Row.MUSIC_COMPETITION),
        Map.entry("MUSIC_COMPLICATION", DBTableID.Music.Row.MUSIC_COMPLICATION),
        Map.entry("MUSIC_CONFRONTATION", DBTableID.Music.Row.MUSIC_CONFRONTATION),
        Map.entry("MUSIC_CONSPIRACY", DBTableID.Music.Row.MUSIC_CONSPIRACY),
        Map.entry("MUSIC_CONTEST", DBTableID.Music.Row.MUSIC_CONTEST),
        Map.entry("MUSIC_CORONATION", DBTableID.Music.Row.MUSIC_CORONATION),
        Map.entry("MUSIC_CORPORAL_PUNISHMENT", DBTableID.Music.Row.MUSIC_CORPORAL_PUNISHMENT),
        Map.entry("MUSIC_CORPOREALBEAST", DBTableID.Music.Row.MUSIC_CORPOREALBEAST),
        Map.entry("MUSIC_CORRIDORS_OF_POWER", DBTableID.Music.Row.MUSIC_CORRIDORS_OF_POWER),
        Map.entry("MUSIC_COURAGE", DBTableID.Music.Row.MUSIC_COURAGE),
        Map.entry("MUSIC_CREATURE_CRUELTY", DBTableID.Music.Row.MUSIC_CREATURE_CRUELTY),
        Map.entry("MUSIC_CREST_OF_A_WAVE", DBTableID.Music.Row.MUSIC_CREST_OF_A_WAVE),
        Map.entry("MUSIC_CRWYS", DBTableID.Music.Row.MUSIC_CRWYS),
        Map.entry("MUSIC_CRYSTAL_CASTLE", DBTableID.Music.Row.MUSIC_CRYSTAL_CASTLE),
        Map.entry("MUSIC_CRYSTAL_CAVE", DBTableID.Music.Row.MUSIC_CRYSTAL_CAVE),
        Map.entry("MUSIC_CRYSTAL_SWORD", DBTableID.Music.Row.MUSIC_CRYSTAL_SWORD),
        Map.entry("MUSIC_CURSED", DBTableID.Music.Row.MUSIC_CURSED),
        Map.entry("MUSIC_DAGANNOTH_DAWN", DBTableID.Music.Row.MUSIC_DAGANNOTH_DAWN),
        Map.entry("MUSIC_DANCE_OF_DEATH", DBTableID.Music.Row.MUSIC_DANCE_OF_DEATH),
        Map.entry("MUSIC_DANCE_OF_THE_MEILYR", DBTableID.Music.Row.MUSIC_DANCE_OF_THE_MEILYR),
        Map.entry("MUSIC_DANCE_OF_THE_UNDEAD", DBTableID.Music.Row.MUSIC_DANCE_OF_THE_UNDEAD),
        Map.entry("MUSIC_DANGEROUS", DBTableID.Music.Row.MUSIC_DANGEROUS),
        Map.entry("MUSIC_DANGEROUS_ROAD", DBTableID.Music.Row.MUSIC_DANGEROUS_ROAD),
        Map.entry("MUSIC_DANGEROUS_WAY", DBTableID.Music.Row.MUSIC_DANGEROUS_WAY),
        Map.entry("MUSIC_DARK", DBTableID.Music.Row.MUSIC_DARK),
        Map.entry("MUSIC_DARKLYALTARED", DBTableID.Music.Row.MUSIC_DARKLYALTARED),
        Map.entry("MUSIC_DARKMEYER", DBTableID.Music.Row.MUSIC_DARKMEYER),
        Map.entry("MUSIC_DARKNESSINTHEDEPTHS", DBTableID.Music.Row.MUSIC_DARKNESSINTHEDEPTHS),
        Map.entry("MUSIC_DAVY_JONES_LOCKER", DBTableID.Music.Row.MUSIC_DAVY_JONES_LOCKER),
        Map.entry("MUSIC_DEAD_CAN_DANCE", DBTableID.Music.Row.MUSIC_DEAD_CAN_DANCE),
        Map.entry("MUSIC_DEAD_QUIET", DBTableID.Music.Row.MUSIC_DEAD_QUIET),
        Map.entry("MUSIC_DEADLANDS", DBTableID.Music.Row.MUSIC_DEADLANDS),
        Map.entry("MUSIC_DEEP_DOWN", DBTableID.Music.Row.MUSIC_DEEP_DOWN),
        Map.entry("MUSIC_DEEP_WILDY", DBTableID.Music.Row.MUSIC_DEEP_WILDY),
        Map.entry("MUSIC_DELRITH_SUMMONING", DBTableID.Music.Row.MUSIC_DELRITH_SUMMONING),
        Map.entry("MUSIC_DESERT_HEAT", DBTableID.Music.Row.MUSIC_DESERT_HEAT),
        Map.entry("MUSIC_DESERT_VOYAGE", DBTableID.Music.Row.MUSIC_DESERT_VOYAGE),
        Map.entry("MUSIC_DESOLATEMAGE", DBTableID.Music.Row.MUSIC_DESOLATEMAGE),
        Map.entry("MUSIC_DEVILS_MAY_CARE", DBTableID.Music.Row.MUSIC_DEVILS_MAY_CARE),
        Map.entry("MUSIC_DIANGOS_LITTLE_HELPERS", DBTableID.Music.Row.MUSIC_DIANGOS_LITTLE_HELPERS),
        Map.entry("MUSIC_DIESIRAE", DBTableID.Music.Row.MUSIC_DIESIRAE),
        Map.entry("MUSIC_DIMENSION_X", DBTableID.Music.Row.MUSIC_DIMENSION_X),
        Map.entry("MUSIC_DISTANT_LAND", DBTableID.Music.Row.MUSIC_DISTANT_LAND),
        Map.entry("MUSIC_DISTILLERY_HILARITY", DBTableID.Music.Row.MUSIC_DISTILLERY_HILARITY),
        Map.entry("MUSIC_DOGS_OF_WAR", DBTableID.Music.Row.MUSIC_DOGS_OF_WAR),
        Map.entry("MUSIC_DOMAIN_OF_THE_VAMPYRES", DBTableID.Music.Row.MUSIC_DOMAIN_OF_THE_VAMPYRES),
        Map.entry("MUSIC_DONT_PANIC_ZANIK", DBTableID.Music.Row.MUSIC_DONT_PANIC_ZANIK),
        Map.entry("MUSIC_DOORWAYS", DBTableID.Music.Row.MUSIC_DOORWAYS),
        Map.entry("MUSIC_DORGESHUUN_CITY", DBTableID.Music.Row.MUSIC_DORGESHUUN_CITY),
        Map.entry("MUSIC_DORGESHUUN_DEEP", DBTableID.Music.Row.MUSIC_DORGESHUUN_DEEP),
        Map.entry("MUSIC_DORGESHUUN_TREATY", DBTableID.Music.Row.MUSIC_DORGESHUUN_TREATY),
        Map.entry("MUSIC_DOWN_AND_OUT", DBTableID.Music.Row.MUSIC_DOWN_AND_OUT),
        Map.entry("MUSIC_DOWN_BELOW", DBTableID.Music.Row.MUSIC_DOWN_BELOW),
        Map.entry("MUSIC_DOWN_TO_EARTH", DBTableID.Music.Row.MUSIC_DOWN_TO_EARTH),
        Map.entry("MUSIC_DRAGONKINTEMPLE", DBTableID.Music.Row.MUSIC_DRAGONKINTEMPLE),
        Map.entry("MUSIC_DRAGONKINTHEME", DBTableID.Music.Row.MUSIC_DRAGONKINTHEME),
        Map.entry("MUSIC_DRAGONTOOTH_ISLAND", DBTableID.Music.Row.MUSIC_DRAGONTOOTH_ISLAND),
        Map.entry("MUSIC_DRAGONWAVES", DBTableID.Music.Row.MUSIC_DRAGONWAVES),
        Map.entry("MUSIC_DREAM", DBTableID.Music.Row.MUSIC_DREAM),
        Map.entry("MUSIC_DREAMSTATE", DBTableID.Music.Row.MUSIC_DREAMSTATE),
        Map.entry("MUSIC_DRUNKEN_DWARF", DBTableID.Music.Row.MUSIC_DRUNKEN_DWARF),
        Map.entry("MUSIC_DUELARENA", DBTableID.Music.Row.MUSIC_DUELARENA),
        Map.entry("MUSIC_DUNJUN", DBTableID.Music.Row.MUSIC_DUNJUN),
        Map.entry("MUSIC_DUSK_IN_YUBIUSK", DBTableID.Music.Row.MUSIC_DUSK_IN_YUBIUSK),
        Map.entry("MUSIC_DWARF_THEME", DBTableID.Music.Row.MUSIC_DWARF_THEME),
        Map.entry("MUSIC_DYNASTY", DBTableID.Music.Row.MUSIC_DYNASTY),
        Map.entry("MUSIC_EAGLE_PEAK", DBTableID.Music.Row.MUSIC_EAGLE_PEAK),
        Map.entry("MUSIC_EASTER_JIG", DBTableID.Music.Row.MUSIC_EASTER_JIG),
        Map.entry("MUSIC_EGYPT", DBTableID.Music.Row.MUSIC_EGYPT),
        Map.entry("MUSIC_ELVARGS_THEME", DBTableID.Music.Row.MUSIC_ELVARGS_THEME),
        Map.entry("MUSIC_ELVEN_MIST", DBTableID.Music.Row.MUSIC_ELVEN_MIST),
        Map.entry("MUSIC_ELVEN_SEED", DBTableID.Music.Row.MUSIC_ELVEN_SEED),
        Map.entry("MUSIC_EMOTION", DBTableID.Music.Row.MUSIC_EMOTION),
        Map.entry("MUSIC_EMPEROR", DBTableID.Music.Row.MUSIC_EMPEROR),
        Map.entry("MUSIC_ENCLAVE", DBTableID.Music.Row.MUSIC_ENCLAVE),
        Map.entry("MUSIC_ESCAPE", DBTableID.Music.Row.MUSIC_ESCAPE),
        Map.entry("MUSIC_ESPIONAGE", DBTableID.Music.Row.MUSIC_ESPIONAGE),
        Map.entry("MUSIC_ETCETERA_THEME", DBTableID.Music.Row.MUSIC_ETCETERA_THEME),
        Map.entry("MUSIC_ETCETERIA", DBTableID.Music.Row.MUSIC_ETCETERIA),
        Map.entry("MUSIC_EVERLASTING", DBTableID.Music.Row.MUSIC_EVERLASTING),
        Map.entry("MUSIC_EVERLASTING_FIRE", DBTableID.Music.Row.MUSIC_EVERLASTING_FIRE),
        Map.entry("MUSIC_EVERYWHERE", DBTableID.Music.Row.MUSIC_EVERYWHERE),
        Map.entry("MUSIC_EVES_EPINETTE", DBTableID.Music.Row.MUSIC_EVES_EPINETTE),
        Map.entry("MUSIC_EVIL_BOBS_ISLAND", DBTableID.Music.Row.MUSIC_EVIL_BOBS_ISLAND),
        Map.entry("MUSIC_EXPANSE", DBTableID.Music.Row.MUSIC_EXPANSE),
        Map.entry("MUSIC_EXPECTING", DBTableID.Music.Row.MUSIC_EXPECTING),
        Map.entry("MUSIC_EXPEDITION", DBTableID.Music.Row.MUSIC_EXPEDITION),
        Map.entry("MUSIC_EXPOSED", DBTableID.Music.Row.MUSIC_EXPOSED),
        Map.entry("MUSIC_FAERIE", DBTableID.Music.Row.MUSIC_FAERIE),
        Map.entry("MUSIC_FAIRY_DRAGON", DBTableID.Music.Row.MUSIC_FAIRY_DRAGON),
        Map.entry("MUSIC_FAITH_OF_THE_HEFIN", DBTableID.Music.Row.MUSIC_FAITH_OF_THE_HEFIN),
        Map.entry("MUSIC_FAITHLESS", DBTableID.Music.Row.MUSIC_FAITHLESS),
        Map.entry("MUSIC_FANFARE", DBTableID.Music.Row.MUSIC_FANFARE),
        Map.entry("MUSIC_FANFARE2", DBTableID.Music.Row.MUSIC_FANFARE2),
        Map.entry("MUSIC_FANFARE3", DBTableID.Music.Row.MUSIC_FANFARE3),
        Map.entry("MUSIC_FANGS_FOR_THE_MEMORY", DBTableID.Music.Row.MUSIC_FANGS_FOR_THE_MEMORY),
        Map.entry("MUSIC_FAR_AWAY", DBTableID.Music.Row.MUSIC_FAR_AWAY),
        Map.entry("MUSIC_FE_FI_FO_FUM", DBTableID.Music.Row.MUSIC_FE_FI_FO_FUM),
        Map.entry("MUSIC_FEAR_AND_LOATHING", DBTableID.Music.Row.MUSIC_FEAR_AND_LOATHING),
        Map.entry("MUSIC_FENKENSTRAINS", DBTableID.Music.Row.MUSIC_FENKENSTRAINS),
        Map.entry("MUSIC_FIGHT_OR_FLIGHT", DBTableID.Music.Row.MUSIC_FIGHT_OR_FLIGHT),
        Map.entry("MUSIC_FIND_MY_WAY", DBTableID.Music.Row.MUSIC_FIND_MY_WAY),
        Map.entry("MUSIC_FIRE_AND_BRIMSTONE", DBTableID.Music.Row.MUSIC_FIRE_AND_BRIMSTONE),
        Map.entry("MUSIC_FISHING", DBTableID.Music.Row.MUSIC_FISHING),
        Map.entry("MUSIC_FLOATING_FREE", DBTableID.Music.Row.MUSIC_FLOATING_FREE),
        Map.entry("MUSIC_FLUTE_SALAD", DBTableID.Music.Row.MUSIC_FLUTE_SALAD),
        Map.entry("MUSIC_FOOD_FOR_THOUGHT", DBTableID.Music.Row.MUSIC_FOOD_FOR_THOUGHT),
        Map.entry("MUSIC_FORBIDDEN", DBTableID.Music.Row.MUSIC_FORBIDDEN),
        Map.entry("MUSIC_FOREST", DBTableID.Music.Row.MUSIC_FOREST),
        Map.entry("MUSIC_FOREVER", DBTableID.Music.Row.MUSIC_FOREVER),
        Map.entry("MUSIC_FORGETTABLE_MELODY", DBTableID.Music.Row.MUSIC_FORGETTABLE_MELODY),
        Map.entry("MUSIC_FORGOTTEN", DBTableID.Music.Row.MUSIC_FORGOTTEN),
        Map.entry("MUSIC_FORLORNHOMESTEAD", DBTableID.Music.Row.MUSIC_FORLORNHOMESTEAD),
        Map.entry("MUSIC_FORSAKEN_TOWER", DBTableID.Music.Row.MUSIC_FORSAKEN_TOWER),
        Map.entry("MUSIC_FORTHOS_DUNGEON", DBTableID.Music.Row.MUSIC_FORTHOS_DUNGEON),
        Map.entry("MUSIC_FOSSIL_LAVA_MINE", DBTableID.Music.Row.MUSIC_FOSSIL_LAVA_MINE),
        Map.entry("MUSIC_FOSSIL_OVERGROUND_1", DBTableID.Music.Row.MUSIC_FOSSIL_OVERGROUND_1),
        Map.entry("MUSIC_FOSSIL_OVERGROUND_2", DBTableID.Music.Row.MUSIC_FOSSIL_OVERGROUND_2),
        Map.entry("MUSIC_FOSSIL_UNDERGROUND", DBTableID.Music.Row.MUSIC_FOSSIL_UNDERGROUND),
        Map.entry("MUSIC_FOSSIL_UNDERWATER", DBTableID.Music.Row.MUSIC_FOSSIL_UNDERWATER),
        Map.entry("MUSIC_FROGLAND", DBTableID.Music.Row.MUSIC_FROGLAND),
        Map.entry("MUSIC_FROSTBITE", DBTableID.Music.Row.MUSIC_FROSTBITE),
        Map.entry("MUSIC_FRUITS_DE_MER", DBTableID.Music.Row.MUSIC_FRUITS_DE_MER),
        Map.entry("MUSIC_FUL_TO_THE_BRIM", DBTableID.Music.Row.MUSIC_FUL_TO_THE_BRIM),
        Map.entry("MUSIC_FUNNY_BUNNIES", DBTableID.Music.Row.MUSIC_FUNNY_BUNNIES),
        Map.entry("MUSIC_GALVICBOSSFIGHT", DBTableID.Music.Row.MUSIC_GALVICBOSSFIGHT),
        Map.entry("MUSIC_GAOL", DBTableID.Music.Row.MUSIC_GAOL),
        Map.entry("MUSIC_GARDEN", DBTableID.Music.Row.MUSIC_GARDEN),
        Map.entry("MUSIC_GARDEN_OF_AUTUMN", DBTableID.Music.Row.MUSIC_GARDEN_OF_AUTUMN),
        Map.entry("MUSIC_GARDEN_OF_SPRING", DBTableID.Music.Row.MUSIC_GARDEN_OF_SPRING),
        Map.entry("MUSIC_GARDEN_OF_SUMMER", DBTableID.Music.Row.MUSIC_GARDEN_OF_SUMMER),
        Map.entry("MUSIC_GARDEN_OF_WINTER", DBTableID.Music.Row.MUSIC_GARDEN_OF_WINTER),
        Map.entry("MUSIC_GARGOYLEBOSS", DBTableID.Music.Row.MUSIC_GARGOYLEBOSS),
        Map.entry("MUSIC_GAUNTLET_MINIGAME", DBTableID.Music.Row.MUSIC_GAUNTLET_MINIGAME),
        Map.entry("MUSIC_GETTING_DOWN_TO_BUSINESS", DBTableID.Music.Row.MUSIC_GETTING_DOWN_TO_BUSINESS),
        Map.entry("MUSIC_GHOST_BOUNCER", DBTableID.Music.Row.MUSIC_GHOST_BOUNCER),
        Map.entry("MUSIC_GIANT_DWARF_MEETING", DBTableID.Music.Row.MUSIC_GIANT_DWARF_MEETING),
        Map.entry("MUSIC_GIANTS_FOUNDRY", DBTableID.Music.Row.MUSIC_GIANTS_FOUNDRY),
        Map.entry("MUSIC_GILL_BILL", DBTableID.Music.Row.MUSIC_GILL_BILL),
        Map.entry("MUSIC_GNOME_KING", DBTableID.Music.Row.MUSIC_GNOME_KING),
        Map.entry("MUSIC_GNOME_VILLAGE", DBTableID.Music.Row.MUSIC_GNOME_VILLAGE),
        Map.entry("MUSIC_GNOME_VILLAGE_PARTY", DBTableID.Music.Row.MUSIC_GNOME_VILLAGE_PARTY),
        Map.entry("MUSIC_GNOME_VILLAGE2", DBTableID.Music.Row.MUSIC_GNOME_VILLAGE2),
        Map.entry("MUSIC_GNOMEBALL", DBTableID.Music.Row.MUSIC_GNOMEBALL),
        Map.entry("MUSIC_GOBLIN_GAME", DBTableID.Music.Row.MUSIC_GOBLIN_GAME),
        Map.entry("MUSIC_GOBLIN_VILLAGE", DBTableID.Music.Row.MUSIC_GOBLIN_VILLAGE),
        Map.entry("MUSIC_GOLDEN_TOUCH", DBTableID.Music.Row.MUSIC_GOLDEN_TOUCH),
        Map.entry("MUSIC_GOTR_MINIGAME", DBTableID.Music.Row.MUSIC_GOTR_MINIGAME),
        Map.entry("MUSIC_GOTR_PREP", DBTableID.Music.Row.MUSIC_GOTR_PREP),
        Map.entry("MUSIC_GREATNESS", DBTableID.Music.Row.MUSIC_GREATNESS),
        Map.entry("MUSIC_GRIMLYFIENDISH", DBTableID.Music.Row.MUSIC_GRIMLYFIENDISH),
        Map.entry("MUSIC_GRIP_OF_THE_TALON", DBTableID.Music.Row.MUSIC_GRIP_OF_THE_TALON),
        Map.entry("MUSIC_GROTTO", DBTableID.Music.Row.MUSIC_GROTTO),
        Map.entry("MUSIC_GROUND_SCAPE", DBTableID.Music.Row.MUSIC_GROUND_SCAPE),
        Map.entry("MUSIC_GROW_GROW_GROW", DBTableID.Music.Row.MUSIC_GROW_GROW_GROW),
        Map.entry("MUSIC_GRUMPY", DBTableID.Music.Row.MUSIC_GRUMPY),
        Map.entry("MUSIC_HALLOWED_SEPULCHRE", DBTableID.Music.Row.MUSIC_HALLOWED_SEPULCHRE),
        Map.entry("MUSIC_HALLOWED_SEPULCHRE_LOBBY", DBTableID.Music.Row.MUSIC_HALLOWED_SEPULCHRE_LOBBY),
        Map.entry("MUSIC_HAM_AND_SEEK", DBTableID.Music.Row.MUSIC_HAM_AND_SEEK),
        Map.entry("MUSIC_HAM_ATTACK", DBTableID.Music.Row.MUSIC_HAM_ATTACK),
        Map.entry("MUSIC_HAM_FISTED", DBTableID.Music.Row.MUSIC_HAM_FISTED),
        Map.entry("MUSIC_HARMONY", DBTableID.Music.Row.MUSIC_HARMONY),
        Map.entry("MUSIC_HARMONY2", DBTableID.Music.Row.MUSIC_HARMONY2),
        Map.entry("MUSIC_HAUNTED_MINE", DBTableID.Music.Row.MUSIC_HAUNTED_MINE),
        Map.entry("MUSIC_HAVE_A_BLAST", DBTableID.Music.Row.MUSIC_HAVE_A_BLAST),
        Map.entry("MUSIC_HAVE_AN_ICE_DAY", DBTableID.Music.Row.MUSIC_HAVE_AN_ICE_DAY),
        Map.entry("MUSIC_HEAD_TO_HEAD", DBTableID.Music.Row.MUSIC_HEAD_TO_HEAD),
        Map.entry("MUSIC_HEART_AND_MIND", DBTableID.Music.Row.MUSIC_HEART_AND_MIND),
        Map.entry("MUSIC_HELLS_BELLS", DBTableID.Music.Row.MUSIC_HELLS_BELLS),
        Map.entry("MUSIC_HERMIT", DBTableID.Music.Row.MUSIC_HERMIT),
        Map.entry("MUSIC_HESPORI", DBTableID.Music.Row.MUSIC_HESPORI),
        Map.entry("MUSIC_HESPORI_CAVE", DBTableID.Music.Row.MUSIC_HESPORI_CAVE),
        Map.entry("MUSIC_HIGH_SEAS", DBTableID.Music.Row.MUSIC_HIGH_SEAS),
        Map.entry("MUSIC_HIGH_SPIRITS", DBTableID.Music.Row.MUSIC_HIGH_SPIRITS),
        Map.entry("MUSIC_HOE_DOWN", DBTableID.Music.Row.MUSIC_HOE_DOWN),
        Map.entry("MUSIC_HOME_SWEET_HOME", DBTableID.Music.Row.MUSIC_HOME_SWEET_HOME),
        Map.entry("MUSIC_HOMESCAPE", DBTableID.Music.Row.MUSIC_HOMESCAPE),
        Map.entry("MUSIC_HORIZON", DBTableID.Music.Row.MUSIC_HORIZON),
        Map.entry("MUSIC_HOSIDIUS", DBTableID.Music.Row.MUSIC_HOSIDIUS),
        Map.entry("MUSIC_HOSIDIUS_OUTSKIRTS", DBTableID.Music.Row.MUSIC_HOSIDIUS_OUTSKIRTS),
        Map.entry("MUSIC_HYPNOTIZED", DBTableID.Music.Row.MUSIC_HYPNOTIZED),
        Map.entry("MUSIC_IBAN", DBTableID.Music.Row.MUSIC_IBAN),
        Map.entry("MUSIC_ICE_MELODY", DBTableID.Music.Row.MUSIC_ICE_MELODY),
        Map.entry("MUSIC_ICE_TROLL_KING", DBTableID.Music.Row.MUSIC_ICE_TROLL_KING),
        Map.entry("MUSIC_ICYENE_GRAVEYARD", DBTableID.Music.Row.MUSIC_ICYENE_GRAVEYARD),
        Map.entry("MUSIC_ILLUSIVE", DBTableID.Music.Row.MUSIC_ILLUSIVE),
        Map.entry("MUSIC_IMPETUOUS", DBTableID.Music.Row.MUSIC_IMPETUOUS),
        Map.entry("MUSIC_IMPETUOUS_CLUE", DBTableID.Music.Row.MUSIC_IMPETUOUS_CLUE),
        Map.entry("MUSIC_IN_BETWEEN", DBTableID.Music.Row.MUSIC_IN_BETWEEN),
        Map.entry("MUSIC_IN_THE_BRINE", DBTableID.Music.Row.MUSIC_IN_THE_BRINE),
        Map.entry("MUSIC_IN_THE_CLINK", DBTableID.Music.Row.MUSIC_IN_THE_CLINK),
        Map.entry("MUSIC_IN_THE_MANOR", DBTableID.Music.Row.MUSIC_IN_THE_MANOR),
        Map.entry("MUSIC_IN_THE_PITS", DBTableID.Music.Row.MUSIC_IN_THE_PITS),
        Map.entry("MUSIC_INADEQUACY", DBTableID.Music.Row.MUSIC_INADEQUACY),
        Map.entry("MUSIC_INCANTATION", DBTableID.Music.Row.MUSIC_INCANTATION),
        Map.entry("MUSIC_INFERNO", DBTableID.Music.Row.MUSIC_INFERNO),
        Map.entry("MUSIC_INSECT_QUEEN", DBTableID.Music.Row.MUSIC_INSECT_QUEEN),
        Map.entry("MUSIC_INSPIRATION", DBTableID.Music.Row.MUSIC_INSPIRATION),
        Map.entry("MUSIC_INTO_THE_ABYSS", DBTableID.Music.Row.MUSIC_INTO_THE_ABYSS),
        Map.entry("MUSIC_INTREPID", DBTableID.Music.Row.MUSIC_INTREPID),
        Map.entry("MUSIC_IOWERTH_SLAYER_DUNGEON", DBTableID.Music.Row.MUSIC_IOWERTH_SLAYER_DUNGEON),
        Map.entry("MUSIC_IOWERTHS_LAMENT", DBTableID.Music.Row.MUSIC_IOWERTHS_LAMENT),
        Map.entry("MUSIC_ISLAND_LIFE", DBTableID.Music.Row.MUSIC_ISLAND_LIFE),
        Map.entry("MUSIC_ISLAND_OF_THE_TROLLS", DBTableID.Music.Row.MUSIC_ISLAND_OF_THE_TROLLS),
        Map.entry("MUSIC_ISLE_OF_EVERYWHERE", DBTableID.Music.Row.MUSIC_ISLE_OF_EVERYWHERE),
        Map.entry("MUSIC_ITHELL", DBTableID.Music.Row.MUSIC_ITHELL),
        Map.entry("MUSIC_JESTER_MINUTE", DBTableID.Music.Row.MUSIC_JESTER_MINUTE),
        Map.entry("MUSIC_JOLLYR", DBTableID.Music.Row.MUSIC_JOLLYR),
        Map.entry("MUSIC_JOY_OF_THE_HUNT", DBTableID.Music.Row.MUSIC_JOY_OF_THE_HUNT),
        Map.entry("MUSIC_JUDGE_OF_YAMA", DBTableID.Music.Row.MUSIC_JUDGE_OF_YAMA),
        Map.entry("MUSIC_JUNGLE_BELLS", DBTableID.Music.Row.MUSIC_JUNGLE_BELLS),
        Map.entry("MUSIC_JUNGLE_HUNT", DBTableID.Music.Row.MUSIC_JUNGLE_HUNT),
        Map.entry("MUSIC_JUNGLE_ISLAND", DBTableID.Music.Row.MUSIC_JUNGLE_ISLAND),
        Map.entry("MUSIC_JUNGLE_ISLAND_XMAS", DBTableID.Music.Row.MUSIC_JUNGLE_ISLAND_XMAS),
        Map.entry("MUSIC_JUNGLE_TROUBLES", DBTableID.Music.Row.MUSIC_JUNGLE_TROUBLES),
        Map.entry("MUSIC_JUNGLY1", DBTableID.Music.Row.MUSIC_JUNGLY1),
        Map.entry("MUSIC_JUNGLY2", DBTableID.Music.Row.MUSIC_JUNGLY2),
        Map.entry("MUSIC_JUNGLY3", DBTableID.Music.Row.MUSIC_JUNGLY3),
        Map.entry("MUSIC_KANON_OF_KHALITH", DBTableID.Music.Row.MUSIC_KANON_OF_KHALITH),
        Map.entry("MUSIC_KARAMJA_JAM", DBTableID.Music.Row.MUSIC_KARAMJA_JAM),
        Map.entry("MUSIC_KEMESIS", DBTableID.Music.Row.MUSIC_KEMESIS),
        Map.entry("MUSIC_KINGDOM", DBTableID.Music.Row.MUSIC_KINGDOM),
        Map.entry("MUSIC_KINGS_BETRAYAL", DBTableID.Music.Row.MUSIC_KINGS_BETRAYAL),
        Map.entry("MUSIC_KNIGHTLY", DBTableID.Music.Row.MUSIC_KNIGHTLY),
        Map.entry("MUSIC_KNIGHTMARE", DBTableID.Music.Row.MUSIC_KNIGHTMARE),
        Map.entry("MUSIC_KOUREND_CATACOMBS", DBTableID.Music.Row.MUSIC_KOUREND_CATACOMBS),
        Map.entry("MUSIC_KOUREND_HOUSES", DBTableID.Music.Row.MUSIC_KOUREND_HOUSES),
        Map.entry("MUSIC_KOURENDTHEMAGNIFICENT", DBTableID.Music.Row.MUSIC_KOURENDTHEMAGNIFICENT),
        Map.entry("MUSIC_LA_MORT", DBTableID.Music.Row.MUSIC_LA_MORT),
        Map.entry("MUSIC_LABYRINTH", DBTableID.Music.Row.MUSIC_LABYRINTH),
        Map.entry("MUSIC_LAIR", DBTableID.Music.Row.MUSIC_LAIR),
        Map.entry("MUSIC_LAMENT", DBTableID.Music.Row.MUSIC_LAMENT),
        Map.entry("MUSIC_LAMENT_OF_MEIYERDITCH", DBTableID.Music.Row.MUSIC_LAMENT_OF_MEIYERDITCH),
        Map.entry("MUSIC_LAND_DOWN_UNDER", DBTableID.Music.Row.MUSIC_LAND_DOWN_UNDER),
        Map.entry("MUSIC_LAND_OF_SNOW", DBTableID.Music.Row.MUSIC_LAND_OF_SNOW),
        Map.entry("MUSIC_LAND_OF_THE_DWARVES", DBTableID.Music.Row.MUSIC_LAND_OF_THE_DWARVES),
        Map.entry("MUSIC_LANDLUBBER", DBTableID.Music.Row.MUSIC_LANDLUBBER),
        Map.entry("MUSIC_LAST_STAND", DBTableID.Music.Row.MUSIC_LAST_STAND),
        Map.entry("MUSIC_LASTING", DBTableID.Music.Row.MUSIC_LASTING),
        Map.entry("MUSIC_LASTMANSTANDING", DBTableID.Music.Row.MUSIC_LASTMANSTANDING),
        Map.entry("MUSIC_LEAGUES_3", DBTableID.Music.Row.MUSIC_LEAGUES_3),
        Map.entry("MUSIC_LEGEND", DBTableID.Music.Row.MUSIC_LEGEND),
        Map.entry("MUSIC_LEGION", DBTableID.Music.Row.MUSIC_LEGION),
        Map.entry("MUSIC_LIFES_A_BEACH", DBTableID.Music.Row.MUSIC_LIFES_A_BEACH),
        Map.entry("MUSIC_LIGHTHOUSE", DBTableID.Music.Row.MUSIC_LIGHTHOUSE),
        Map.entry("MUSIC_LIGHTNESS", DBTableID.Music.Row.MUSIC_LIGHTNESS),
        Map.entry("MUSIC_LIGHTWALK", DBTableID.Music.Row.MUSIC_LIGHTWALK),
        Map.entry("MUSIC_LITTLE_CAVE_OF_HORRORS", DBTableID.Music.Row.MUSIC_LITTLE_CAVE_OF_HORRORS),
        Map.entry("MUSIC_LLETYAS_DESTRUCTION", DBTableID.Music.Row.MUSIC_LLETYAS_DESTRUCTION),
        Map.entry("MUSIC_LONESOME", DBTableID.Music.Row.MUSIC_LONESOME),
        Map.entry("MUSIC_LONG_AGO", DBTableID.Music.Row.MUSIC_LONG_AGO),
        Map.entry("MUSIC_LONG_WAY_HOME", DBTableID.Music.Row.MUSIC_LONG_WAY_HOME),
        Map.entry("MUSIC_LOOKING_BACK", DBTableID.Music.Row.MUSIC_LOOKING_BACK),
        Map.entry("MUSIC_LORE_AND_ORDER", DBTableID.Music.Row.MUSIC_LORE_AND_ORDER),
        Map.entry("MUSIC_LOST_SOUL", DBTableID.Music.Row.MUSIC_LOST_SOUL),
        Map.entry("MUSIC_LOVAKENGJ", DBTableID.Music.Row.MUSIC_LOVAKENGJ),
        Map.entry("MUSIC_LOVAKENGJ_OUTSKIRTS", DBTableID.Music.Row.MUSIC_LOVAKENGJ_OUTSKIRTS),
        Map.entry("MUSIC_LOWERDEPTHS", DBTableID.Music.Row.MUSIC_LOWERDEPTHS),
        Map.entry("MUSIC_LOWERNIEL", DBTableID.Music.Row.MUSIC_LOWERNIEL),
        Map.entry("MUSIC_LOWERNIEL_PART_1", DBTableID.Music.Row.MUSIC_LOWERNIEL_PART_1),
        Map.entry("MUSIC_LOWERNIEL_PART_2", DBTableID.Music.Row.MUSIC_LOWERNIEL_PART_2),
        Map.entry("MUSIC_LUCIDDREAM", DBTableID.Music.Row.MUSIC_LUCIDDREAM),
        Map.entry("MUSIC_LUCIDNIGHTMARE", DBTableID.Music.Row.MUSIC_LUCIDNIGHTMARE),
        Map.entry("MUSIC_LULLABY", DBTableID.Music.Row.MUSIC_LULLABY),
        Map.entry("MUSIC_MAD_EADGAR", DBTableID.Music.Row.MUSIC_MAD_EADGAR),
        Map.entry("MUSIC_MAGE_ARENA", DBTableID.Music.Row.MUSIC_MAGE_ARENA),
        Map.entry("MUSIC_MAGIC_DANCE", DBTableID.Music.Row.MUSIC_MAGIC_DANCE),
        Map.entry("MUSIC_MAGIC_MAGIC_MAGIC", DBTableID.Music.Row.MUSIC_MAGIC_MAGIC_MAGIC),
        Map.entry("MUSIC_MAGICAL_JOURNEY", DBTableID.Music.Row.MUSIC_MAGICAL_JOURNEY),
        Map.entry("MUSIC_MAIDEN_AMBIENCE", DBTableID.Music.Row.MUSIC_MAIDEN_AMBIENCE),
        Map.entry("MUSIC_MAIDEN_COMBAT", DBTableID.Music.Row.MUSIC_MAIDEN_COMBAT),
        Map.entry("MUSIC_MAJOR_MINER", DBTableID.Music.Row.MUSIC_MAJOR_MINER),
        Map.entry("MUSIC_MAKING_WAVES", DBTableID.Music.Row.MUSIC_MAKING_WAVES),
        Map.entry("MUSIC_MALADY", DBTableID.Music.Row.MUSIC_MALADY),
        Map.entry("MUSIC_MARCH", DBTableID.Music.Row.MUSIC_MARCH),
        Map.entry("MUSIC_MAROONED", DBTableID.Music.Row.MUSIC_MAROONED),
        Map.entry("MUSIC_MARZIPAN", DBTableID.Music.Row.MUSIC_MARZIPAN),
        Map.entry("MUSIC_MASQUERADE", DBTableID.Music.Row.MUSIC_MASQUERADE),
        Map.entry("MUSIC_MASTERMINDLESS", DBTableID.Music.Row.MUSIC_MASTERMINDLESS),
        Map.entry("MUSIC_MAUSOLEUM", DBTableID.Music.Row.MUSIC_MAUSOLEUM),
        Map.entry("MUSIC_MAWSJAWSCLAWS", DBTableID.Music.Row.MUSIC_MAWSJAWSCLAWS),
        Map.entry("MUSIC_MEDDLING_KIDS", DBTableID.Music.Row.MUSIC_MEDDLING_KIDS),
        Map.entry("MUSIC_MEDIEVAL", DBTableID.Music.Row.MUSIC_MEDIEVAL),
        Map.entry("MUSIC_MEHHARS_TOMB", DBTableID.Music.Row.MUSIC_MEHHARS_TOMB),
        Map.entry("MUSIC_MELLOW", DBTableID.Music.Row.MUSIC_MELLOW),
        Map.entry("MUSIC_MELODRAMA", DBTableID.Music.Row.MUSIC_MELODRAMA),
        Map.entry("MUSIC_MELZARS_MAZE", DBTableID.Music.Row.MUSIC_MELZARS_MAZE),
        Map.entry("MUSIC_MENAPHOS_GATES", DBTableID.Music.Row.MUSIC_MENAPHOS_GATES),
        Map.entry("MUSIC_MERIDIAN", DBTableID.Music.Row.MUSIC_MERIDIAN),
        Map.entry("MUSIC_METHOD_OF_MADNESS", DBTableID.Music.Row.MUSIC_METHOD_OF_MADNESS),
        Map.entry("MUSIC_MILES_AWAY", DBTableID.Music.Row.MUSIC_MILES_AWAY),
        Map.entry("MUSIC_MIND_OVER_MATTER", DBTableID.Music.Row.MUSIC_MIND_OVER_MATTER),
        Map.entry("MUSIC_MINED_OUT", DBTableID.Music.Row.MUSIC_MINED_OUT),
        Map.entry("MUSIC_MIRACLE_DANCE", DBTableID.Music.Row.MUSIC_MIRACLE_DANCE),
        Map.entry("MUSIC_MIRAGE", DBTableID.Music.Row.MUSIC_MIRAGE),
        Map.entry("MUSIC_MISCELLANIA", DBTableID.Music.Row.MUSIC_MISCELLANIA),
        Map.entry("MUSIC_MM2_BATTLE", DBTableID.Music.Row.MUSIC_MM2_BATTLE),
        Map.entry("MUSIC_MM2_BUNKERCORRIDORS", DBTableID.Music.Row.MUSIC_MM2_BUNKERCORRIDORS),
        Map.entry("MUSIC_MM2_BUNKERLAB", DBTableID.Music.Row.MUSIC_MM2_BUNKERLAB),
        Map.entry("MUSIC_MM2_KRUK", DBTableID.Music.Row.MUSIC_MM2_KRUK),
        Map.entry("MUSIC_MM2_SCAPE_APE", DBTableID.Music.Row.MUSIC_MM2_SCAPE_APE),
        Map.entry("MUSIC_MOLCH", DBTableID.Music.Row.MUSIC_MOLCH),
        Map.entry("MUSIC_MONARCH_WALTZ", DBTableID.Music.Row.MUSIC_MONARCH_WALTZ),
        Map.entry("MUSIC_MONKEY_MADNESS", DBTableID.Music.Row.MUSIC_MONKEY_MADNESS),
        Map.entry("MUSIC_MONSTER_MELEE", DBTableID.Music.Row.MUSIC_MONSTER_MELEE),
        Map.entry("MUSIC_MOODY", DBTableID.Music.Row.MUSIC_MOODY),
        Map.entry("MUSIC_MOR_UL_REK", DBTableID.Music.Row.MUSIC_MOR_UL_REK),
        Map.entry("MUSIC_MORYTANIA", DBTableID.Music.Row.MUSIC_MORYTANIA),
        Map.entry("MUSIC_MOUSE_TRAP", DBTableID.Music.Row.MUSIC_MOUSE_TRAP),
        Map.entry("MUSIC_MUDSKIPPER_MELODY", DBTableID.Music.Row.MUSIC_MUDSKIPPER_MELODY),
        Map.entry("MUSIC_MUSEUMMEDLEY", DBTableID.Music.Row.MUSIC_MUSEUMMEDLEY),
        Map.entry("MUSIC_MUTANT_MEDLEY", DBTableID.Music.Row.MUSIC_MUTANT_MEDLEY),
        Map.entry("MUSIC_MY_ARMS_JOURNEY", DBTableID.Music.Row.MUSIC_MY_ARMS_JOURNEY),
        Map.entry("MUSIC_MY2ARM_BOSSBATTLE", DBTableID.Music.Row.MUSIC_MY2ARM_BOSSBATTLE),
        Map.entry("MUSIC_MY2ARM_LOVETHEME", DBTableID.Music.Row.MUSIC_MY2ARM_LOVETHEME),
        Map.entry("MUSIC_MYTHSGUILD", DBTableID.Music.Row.MUSIC_MYTHSGUILD),
        Map.entry("MUSIC_NARNODES", DBTableID.Music.Row.MUSIC_NARNODES),
        Map.entry("MUSIC_NATURAL", DBTableID.Music.Row.MUSIC_NATURAL),
        Map.entry("MUSIC_NECROPOLIS", DBTableID.Music.Row.MUSIC_NECROPOLIS),
        Map.entry("MUSIC_NETHER_REALM", DBTableID.Music.Row.MUSIC_NETHER_REALM),
        Map.entry("MUSIC_NEVERLAND", DBTableID.Music.Row.MUSIC_NEVERLAND),
        Map.entry("MUSIC_NEWBIE_FARMING", DBTableID.Music.Row.MUSIC_NEWBIE_FARMING),
        Map.entry("MUSIC_NEWBIE_MELODY", DBTableID.Music.Row.MUSIC_NEWBIE_MELODY),
        Map.entry("MUSIC_NIGHT_OF_THE_VAMPYRE", DBTableID.Music.Row.MUSIC_NIGHT_OF_THE_VAMPYRE),
        Map.entry("MUSIC_NIGHTFALL", DBTableID.Music.Row.MUSIC_NIGHTFALL),
        Map.entry("MUSIC_NIGHTMARE_COMBAT", DBTableID.Music.Row.MUSIC_NIGHTMARE_COMBAT),
        Map.entry("MUSIC_NO_PASARAN", DBTableID.Music.Row.MUSIC_NO_PASARAN),
        Map.entry("MUSIC_NO_WAY_OUT", DBTableID.Music.Row.MUSIC_NO_WAY_OUT),
        Map.entry("MUSIC_NOMAD", DBTableID.Music.Row.MUSIC_NOMAD),
        Map.entry("MUSIC_NORSE_CODE", DBTableID.Music.Row.MUSIC_NORSE_CODE),
        Map.entry("MUSIC_NOXIRAE", DBTableID.Music.Row.MUSIC_NOXIRAE),
        Map.entry("MUSIC_NULL_AND_VOID", DBTableID.Music.Row.MUSIC_NULL_AND_VOID),
        Map.entry("MUSIC_NYLOCAS_AMBIENCE", DBTableID.Music.Row.MUSIC_NYLOCAS_AMBIENCE),
        Map.entry("MUSIC_NYLOCAS_COMBAT", DBTableID.Music.Row.MUSIC_NYLOCAS_COMBAT),
        Map.entry("MUSIC_OBSERVATORY_TELESCOPE", DBTableID.Music.Row.MUSIC_OBSERVATORY_TELESCOPE),
        Map.entry("MUSIC_OGRE_THE_TOP", DBTableID.Music.Row.MUSIC_OGRE_THE_TOP),
        Map.entry("MUSIC_OLMBATTLE", DBTableID.Music.Row.MUSIC_OLMBATTLE),
        Map.entry("MUSIC_ON_THE_UP", DBTableID.Music.Row.MUSIC_ON_THE_UP),
        Map.entry("MUSIC_ON_THE_WING", DBTableID.Music.Row.MUSIC_ON_THE_WING),
        Map.entry("MUSIC_ONTHESHORE", DBTableID.Music.Row.MUSIC_ONTHESHORE),
        Map.entry("MUSIC_ORGAN_1", DBTableID.Music.Row.MUSIC_ORGAN_1),
        Map.entry("MUSIC_ORGAN_2", DBTableID.Music.Row.MUSIC_ORGAN_2),
        Map.entry("MUSIC_ORIENTAL", DBTableID.Music.Row.MUSIC_ORIENTAL),
        Map.entry("MUSIC_OUT_OF_THE_DEEP", DBTableID.Music.Row.MUSIC_OUT_OF_THE_DEEP),
        Map.entry("MUSIC_OVER_TO_NARDAH", DBTableID.Music.Row.MUSIC_OVER_TO_NARDAH),
        Map.entry("MUSIC_OVERPASS", DBTableID.Music.Row.MUSIC_OVERPASS),
        Map.entry("MUSIC_OVERTURE", DBTableID.Music.Row.MUSIC_OVERTURE),
        Map.entry("MUSIC_PARADE", DBTableID.Music.Row.MUSIC_PARADE),
        Map.entry("MUSIC_PATH_OF_PERIL", DBTableID.Music.Row.MUSIC_PATH_OF_PERIL),
        Map.entry("MUSIC_PATHWAYS", DBTableID.Music.Row.MUSIC_PATHWAYS),
        Map.entry("MUSIC_PENGUIN_BARDS", DBTableID.Music.Row.MUSIC_PENGUIN_BARDS),
        Map.entry("MUSIC_PENGUIN_PLANS", DBTableID.Music.Row.MUSIC_PENGUIN_PLANS),
        Map.entry("MUSIC_PEST_CONTROL", DBTableID.Music.Row.MUSIC_PEST_CONTROL),
        Map.entry("MUSIC_PESTILENT_BLOAT_AMBIENCE", DBTableID.Music.Row.MUSIC_PESTILENT_BLOAT_AMBIENCE),
        Map.entry("MUSIC_PESTILENT_BLOAT_COMBAT", DBTableID.Music.Row.MUSIC_PESTILENT_BLOAT_COMBAT),
        Map.entry("MUSIC_PHARAOHS_TOMB", DBTableID.Music.Row.MUSIC_PHARAOHS_TOMB),
        Map.entry("MUSIC_PHASMATYS", DBTableID.Music.Row.MUSIC_PHASMATYS),
        Map.entry("MUSIC_PHEASANT_PEASANT", DBTableID.Music.Row.MUSIC_PHEASANT_PEASANT),
        Map.entry("MUSIC_PICK_AND_SHOVEL", DBTableID.Music.Row.MUSIC_PICK_AND_SHOVEL),
        Map.entry("MUSIC_PINBALL_WIZARD", DBTableID.Music.Row.MUSIC_PINBALL_WIZARD),
        Map.entry("MUSIC_PIRATES_OF_PENANCE", DBTableID.Music.Row.MUSIC_PIRATES_OF_PENANCE),
        Map.entry("MUSIC_PIRATES_OF_PERIL", DBTableID.Music.Row.MUSIC_PIRATES_OF_PERIL),
        Map.entry("MUSIC_PISCARILIUS", DBTableID.Music.Row.MUSIC_PISCARILIUS),
        Map.entry("MUSIC_POLES_APART", DBTableID.Music.Row.MUSIC_POLES_APART),
        Map.entry("MUSIC_PRIME_TIME", DBTableID.Music.Row.MUSIC_PRIME_TIME),
        Map.entry("MUSIC_PRINCIPALITY", DBTableID.Music.Row.MUSIC_PRINCIPALITY),
        Map.entry("MUSIC_QUEST", DBTableID.Music.Row.MUSIC_QUEST),
        Map.entry("MUSIC_RANISDUEL", DBTableID.Music.Row.MUSIC_RANISDUEL),
        Map.entry("MUSIC_RAT_A_TAT_TAT", DBTableID.Music.Row.MUSIC_RAT_A_TAT_TAT),
        Map.entry("MUSIC_RAT_HUNT", DBTableID.Music.Row.MUSIC_RAT_HUNT),
        Map.entry("MUSIC_READY_FOR_BATTLE", DBTableID.Music.Row.MUSIC_READY_FOR_BATTLE),
        Map.entry("MUSIC_REGAL", DBTableID.Music.Row.MUSIC_REGAL),
        Map.entry("MUSIC_REGGAE", DBTableID.Music.Row.MUSIC_REGGAE),
        Map.entry("MUSIC_REGGAE2", DBTableID.Music.Row.MUSIC_REGGAE2),
        Map.entry("MUSIC_RELLEKKA", DBTableID.Music.Row.MUSIC_RELLEKKA),
        Map.entry("MUSIC_RESTINPEACE", DBTableID.Music.Row.MUSIC_RESTINPEACE),
        Map.entry("MUSIC_REVENANT_SLAYER_CAVE", DBTableID.Music.Row.MUSIC_REVENANT_SLAYER_CAVE),
        Map.entry("MUSIC_RHAPSODY", DBTableID.Music.Row.MUSIC_RHAPSODY),
        Map.entry("MUSIC_RIGHT_ON_TRACK", DBTableID.Music.Row.MUSIC_RIGHT_ON_TRACK),
        Map.entry("MUSIC_RIGHTEOUSNESS", DBTableID.Music.Row.MUSIC_RIGHTEOUSNESS),
        Map.entry("MUSIC_RISING_DAMP", DBTableID.Music.Row.MUSIC_RISING_DAMP),
        Map.entry("MUSIC_RIVERSIDE", DBTableID.Music.Row.MUSIC_RIVERSIDE),
        Map.entry("MUSIC_ROC_AND_ROLL", DBTableID.Music.Row.MUSIC_ROC_AND_ROLL),
        Map.entry("MUSIC_ROLL_THE_BONES", DBTableID.Music.Row.MUSIC_ROLL_THE_BONES),
        Map.entry("MUSIC_ROMANCING_THE_CRONE", DBTableID.Music.Row.MUSIC_ROMANCING_THE_CRONE),
        Map.entry("MUSIC_ROMPER_CHOMPER", DBTableID.Music.Row.MUSIC_ROMPER_CHOMPER),
        Map.entry("MUSIC_ROOTS_AND_FLUTES", DBTableID.Music.Row.MUSIC_ROOTS_AND_FLUTES),
        Map.entry("MUSIC_ROSE", DBTableID.Music.Row.MUSIC_ROSE),
        Map.entry("MUSIC_ROYALE", DBTableID.Music.Row.MUSIC_ROYALE),
        Map.entry("MUSIC_RUGGEDTERRAIN", DBTableID.Music.Row.MUSIC_RUGGEDTERRAIN),
        Map.entry("MUSIC_RUNE_ESSENCE", DBTableID.Music.Row.MUSIC_RUNE_ESSENCE),
        Map.entry("MUSIC_SAD_MEADOW", DBTableID.Music.Row.MUSIC_SAD_MEADOW),
        Map.entry("MUSIC_SAGA", DBTableID.Music.Row.MUSIC_SAGA),
        Map.entry("MUSIC_SARACHNIS_LAIR", DBTableID.Music.Row.MUSIC_SARACHNIS_LAIR),
        Map.entry("MUSIC_SARCOPHAGUS", DBTableID.Music.Row.MUSIC_SARCOPHAGUS),
        Map.entry("MUSIC_SARIMS_VERMIN", DBTableID.Music.Row.MUSIC_SARIMS_VERMIN),
        Map.entry("MUSIC_SCAPE_CAVE", DBTableID.Music.Row.MUSIC_SCAPE_CAVE),
        Map.entry("MUSIC_SCAPE_CRYSTAL", DBTableID.Music.Row.MUSIC_SCAPE_CRYSTAL),
        Map.entry("MUSIC_SCAPE_HUNTER", DBTableID.Music.Row.MUSIC_SCAPE_HUNTER),
        Map.entry("MUSIC_SCAPE_MAIN", DBTableID.Music.Row.MUSIC_SCAPE_MAIN),
        Map.entry("MUSIC_SCAPE_ORIGINAL", DBTableID.Music.Row.MUSIC_SCAPE_ORIGINAL),
        Map.entry("MUSIC_SCAPE_SAD", DBTableID.Music.Row.MUSIC_SCAPE_SAD),
        Map.entry("MUSIC_SCAPE_SANTA", DBTableID.Music.Row.MUSIC_SCAPE_SANTA),
        Map.entry("MUSIC_SCAPE_SCARED", DBTableID.Music.Row.MUSIC_SCAPE_SCARED),
        Map.entry("MUSIC_SCAPE_SOFT", DBTableID.Music.Row.MUSIC_SCAPE_SOFT),
        Map.entry("MUSIC_SCAPE_WILD", DBTableID.Music.Row.MUSIC_SCAPE_WILD),
        Map.entry("MUSIC_SCAPEFIVE", DBTableID.Music.Row.MUSIC_SCAPEFIVE),
        Map.entry("MUSIC_SCARAB", DBTableID.Music.Row.MUSIC_SCARAB),
        Map.entry("MUSIC_SCHOOLS_OUT", DBTableID.Music.Row.MUSIC_SCHOOLS_OUT),
        Map.entry("MUSIC_SCORPIA_DANCES", DBTableID.Music.Row.MUSIC_SCORPIA_DANCES),
        Map.entry("MUSIC_SCRUBFOOTS_DESCENT", DBTableID.Music.Row.MUSIC_SCRUBFOOTS_DESCENT),
        Map.entry("MUSIC_SEA_SHANTY", DBTableID.Music.Row.MUSIC_SEA_SHANTY),
        Map.entry("MUSIC_SEA_SHANTY_XMAS", DBTableID.Music.Row.MUSIC_SEA_SHANTY_XMAS),
        Map.entry("MUSIC_SEA_SHANTY2", DBTableID.Music.Row.MUSIC_SEA_SHANTY2),
        Map.entry("MUSIC_SEAMINORSHANTY", DBTableID.Music.Row.MUSIC_SEAMINORSHANTY),
        Map.entry("MUSIC_SERENADE", DBTableID.Music.Row.MUSIC_SERENADE),
        Map.entry("MUSIC_SERENE", DBTableID.Music.Row.MUSIC_SERENE),
        Map.entry("MUSIC_SETTLEMENT", DBTableID.Music.Row.MUSIC_SETTLEMENT),
        Map.entry("MUSIC_SHADOWLAND", DBTableID.Music.Row.MUSIC_SHADOWLAND),
        Map.entry("MUSIC_SHAYZIEN", DBTableID.Music.Row.MUSIC_SHAYZIEN),
        Map.entry("MUSIC_SHAYZIEN_CAMP", DBTableID.Music.Row.MUSIC_SHAYZIEN_CAMP),
        Map.entry("MUSIC_SHAYZIEN_OUTSKIRTS", DBTableID.Music.Row.MUSIC_SHAYZIEN_OUTSKIRTS),
        Map.entry("MUSIC_SHAYZIENCRYPT", DBTableID.Music.Row.MUSIC_SHAYZIENCRYPT),
        Map.entry("MUSIC_SHAYZIENMARCH", DBTableID.Music.Row.MUSIC_SHAYZIENMARCH),
        Map.entry("MUSIC_SHINE", DBTableID.Music.Row.MUSIC_SHINE),
        Map.entry("MUSIC_SHINING", DBTableID.Music.Row.MUSIC_SHINING),
        Map.entry("MUSIC_SHININGSPIRIT", DBTableID.Music.Row.MUSIC_SHININGSPIRIT),
        Map.entry("MUSIC_SHIPWRECKED", DBTableID.Music.Row.MUSIC_SHIPWRECKED),
        Map.entry("MUSIC_SHOWDOWN", DBTableID.Music.Row.MUSIC_SHOWDOWN),
        Map.entry("MUSIC_SIGMUNDS_SHOWDOWN", DBTableID.Music.Row.MUSIC_SIGMUNDS_SHOWDOWN),
        Map.entry("MUSIC_SIRE", DBTableID.Music.Row.MUSIC_SIRE),
        Map.entry("MUSIC_SLEPE_DUNGEON", DBTableID.Music.Row.MUSIC_SLEPE_DUNGEON),
        Map.entry("MUSIC_SLICE_OF_SILENT_MOVIE", DBTableID.Music.Row.MUSIC_SLICE_OF_SILENT_MOVIE),
        Map.entry("MUSIC_SLICE_OF_STATION", DBTableID.Music.Row.MUSIC_SLICE_OF_STATION),
        Map.entry("MUSIC_SLITHER_AND_THITHER", DBTableID.Music.Row.MUSIC_SLITHER_AND_THITHER),
        Map.entry("MUSIC_SLUG_A_BUG_BALL", DBTableID.Music.Row.MUSIC_SLUG_A_BUG_BALL),
        Map.entry("MUSIC_SOJOURN", DBTableID.Music.Row.MUSIC_SOJOURN),
        Map.entry("MUSIC_SORCERESSS_GARDEN", DBTableID.Music.Row.MUSIC_SORCERESSS_GARDEN),
        Map.entry("MUSIC_SOTETSEG_AMBIENCE", DBTableID.Music.Row.MUSIC_SOTETSEG_AMBIENCE),
        Map.entry("MUSIC_SOTETSEG_COMBAT", DBTableID.Music.Row.MUSIC_SOTETSEG_COMBAT),
        Map.entry("MUSIC_SOUL_WARS", DBTableID.Music.Row.MUSIC_SOUL_WARS),
        Map.entry("MUSIC_SOULFALL", DBTableID.Music.Row.MUSIC_SOULFALL),
        Map.entry("MUSIC_SOUNDSCAPE", DBTableID.Music.Row.MUSIC_SOUNDSCAPE),
        Map.entry("MUSIC_SOURHOG", DBTableID.Music.Row.MUSIC_SOURHOG),
        Map.entry("MUSIC_SPHINX", DBTableID.Music.Row.MUSIC_SPHINX),
        Map.entry("MUSIC_SPIRIT", DBTableID.Music.Row.MUSIC_SPIRIT),
        Map.entry("MUSIC_SPIRITS_OF_ELID", DBTableID.Music.Row.MUSIC_SPIRITS_OF_ELID),
        Map.entry("MUSIC_SPLENDOUR", DBTableID.Music.Row.MUSIC_SPLENDOUR),
        Map.entry("MUSIC_SPOOKY", DBTableID.Music.Row.MUSIC_SPOOKY),
        Map.entry("MUSIC_SPOOKY2", DBTableID.Music.Row.MUSIC_SPOOKY2),
        Map.entry("MUSIC_SPOOKYJUNGLE", DBTableID.Music.Row.MUSIC_SPOOKYJUNGLE),
        Map.entry("MUSIC_SPY_GAMES", DBTableID.Music.Row.MUSIC_SPY_GAMES),
        Map.entry("MUSIC_SPYMASTER", DBTableID.Music.Row.MUSIC_SPYMASTER),
        Map.entry("MUSIC_STAGNANT", DBTableID.Music.Row.MUSIC_STAGNANT),
        Map.entry("MUSIC_STAND_UP_AND_BE_COUNTED", DBTableID.Music.Row.MUSIC_STAND_UP_AND_BE_COUNTED),
        Map.entry("MUSIC_STARLIGHT", DBTableID.Music.Row.MUSIC_STARLIGHT),
        Map.entry("MUSIC_START", DBTableID.Music.Row.MUSIC_START),
        Map.entry("MUSIC_STILL_NIGHT", DBTableID.Music.Row.MUSIC_STILL_NIGHT),
        Map.entry("MUSIC_STILLNESS", DBTableID.Music.Row.MUSIC_STILLNESS),
        Map.entry("MUSIC_STORM_BREW", DBTableID.Music.Row.MUSIC_STORM_BREW),
        Map.entry("MUSIC_STRANDED", DBTableID.Music.Row.MUSIC_STRANDED),
        Map.entry("MUSIC_STRANGE_PLACE", DBTableID.Music.Row.MUSIC_STRANGE_PLACE),
        Map.entry("MUSIC_STRATOSPHERE", DBTableID.Music.Row.MUSIC_STRATOSPHERE),
        Map.entry("MUSIC_STRENGTH_OF_SARADOMIN", DBTableID.Music.Row.MUSIC_STRENGTH_OF_SARADOMIN),
        Map.entry("MUSIC_STUCK_IN_THE_MIRE", DBTableID.Music.Row.MUSIC_STUCK_IN_THE_MIRE),
        Map.entry("MUSIC_SUBTERRANEA", DBTableID.Music.Row.MUSIC_SUBTERRANEA),
        Map.entry("MUSIC_SUNBURN", DBTableID.Music.Row.MUSIC_SUNBURN),
        Map.entry("MUSIC_SUPERSTITION", DBTableID.Music.Row.MUSIC_SUPERSTITION),
        Map.entry("MUSIC_SUROKS_REVENGE", DBTableID.Music.Row.MUSIC_SUROKS_REVENGE),
        Map.entry("MUSIC_SUSPICIOUS", DBTableID.Music.Row.MUSIC_SUSPICIOUS),
        Map.entry("MUSIC_TALE_OF_KELDAGRIM", DBTableID.Music.Row.MUSIC_TALE_OF_KELDAGRIM),
        Map.entry("MUSIC_TALKING_FOREST", DBTableID.Music.Row.MUSIC_TALKING_FOREST),
        Map.entry("MUSIC_TARNS_THEME", DBTableID.Music.Row.MUSIC_TARNS_THEME),
        Map.entry("MUSIC_TEARS_OF_GUTHIX_MUSIC", DBTableID.Music.Row.MUSIC_TEARS_OF_GUTHIX_MUSIC),
        Map.entry("MUSIC_TECHNOLOGY", DBTableID.Music.Row.MUSIC_TECHNOLOGY),
        Map.entry("MUSIC_TEMPLE", DBTableID.Music.Row.MUSIC_TEMPLE),
        Map.entry("MUSIC_TEMPLE_OF_LIGHT", DBTableID.Music.Row.MUSIC_TEMPLE_OF_LIGHT),
        Map.entry("MUSIC_TEMPLE_OF_THE_EYE", DBTableID.Music.Row.MUSIC_TEMPLE_OF_THE_EYE),
        Map.entry("MUSIC_TEMPLE_OF_TRIBES", DBTableID.Music.Row.MUSIC_TEMPLE_OF_TRIBES),
        Map.entry("MUSIC_TEMPOROSS", DBTableID.Music.Row.MUSIC_TEMPOROSS),
        Map.entry("MUSIC_TERRIBLE_CAVERNS", DBTableID.Music.Row.MUSIC_TERRIBLE_CAVERNS),
        Map.entry("MUSIC_TERRIBLE_TUNNELS", DBTableID.Music.Row.MUSIC_TERRIBLE_TUNNELS),
        Map.entry("MUSIC_THATSULLENHALL", DBTableID.Music.Row.MUSIC_THATSULLENHALL),
        Map.entry("MUSIC_THE_ADVENTURER", DBTableID.Music.Row.MUSIC_THE_ADVENTURER),
        Map.entry("MUSIC_THE_ANGELS_FURY", DBTableID.Music.Row.MUSIC_THE_ANGELS_FURY),
        Map.entry("MUSIC_THE_CELLAR_DWELLERS", DBTableID.Music.Row.MUSIC_THE_CELLAR_DWELLERS),
        Map.entry("MUSIC_THE_CHOSEN", DBTableID.Music.Row.MUSIC_THE_CHOSEN),
        Map.entry("MUSIC_THE_DARK_FRAGMENT", DBTableID.Music.Row.MUSIC_THE_DARK_FRAGMENT),
        Map.entry("MUSIC_THE_DEPTHS", DBTableID.Music.Row.MUSIC_THE_DEPTHS),
        Map.entry("MUSIC_THE_DESERT", DBTableID.Music.Row.MUSIC_THE_DESERT),
        Map.entry("MUSIC_THE_DESOLATE_ISLE", DBTableID.Music.Row.MUSIC_THE_DESOLATE_ISLE),
        Map.entry("MUSIC_THE_ENCHANTER", DBTableID.Music.Row.MUSIC_THE_ENCHANTER),
        Map.entry("MUSIC_THE_FAR_SIDE", DBTableID.Music.Row.MUSIC_THE_FAR_SIDE),
        Map.entry("MUSIC_THE_GALLEON", DBTableID.Music.Row.MUSIC_THE_GALLEON),
        Map.entry("MUSIC_THE_GENIE", DBTableID.Music.Row.MUSIC_THE_GENIE),
        Map.entry("MUSIC_THE_GOLEM", DBTableID.Music.Row.MUSIC_THE_GOLEM),
        Map.entry("MUSIC_THE_LAST_SHANTY", DBTableID.Music.Row.MUSIC_THE_LAST_SHANTY),
        Map.entry("MUSIC_THE_LOST_MELODY", DBTableID.Music.Row.MUSIC_THE_LOST_MELODY),
        Map.entry("MUSIC_THE_LOST_TRIBE", DBTableID.Music.Row.MUSIC_THE_LOST_TRIBE),
        Map.entry("MUSIC_THE_LUNAR_ISLE", DBTableID.Music.Row.MUSIC_THE_LUNAR_ISLE),
        Map.entry("MUSIC_THE_MAD_MOLE", DBTableID.Music.Row.MUSIC_THE_MAD_MOLE),
        Map.entry("MUSIC_THE_MOLLUSC_MENACE", DBTableID.Music.Row.MUSIC_THE_MOLLUSC_MENACE),
        Map.entry("MUSIC_THE_MONSTERS_BELOW", DBTableID.Music.Row.MUSIC_THE_MONSTERS_BELOW),
        Map.entry("MUSIC_THE_NAVIGATOR", DBTableID.Music.Row.MUSIC_THE_NAVIGATOR),
        Map.entry("MUSIC_THE_NOBLE_RODENT", DBTableID.Music.Row.MUSIC_THE_NOBLE_RODENT),
        Map.entry("MUSIC_THE_OTHER_SIDE", DBTableID.Music.Row.MUSIC_THE_OTHER_SIDE),
        Map.entry("MUSIC_THE_POWER_OF_TEARS", DBTableID.Music.Row.MUSIC_THE_POWER_OF_TEARS),
        Map.entry("MUSIC_THE_QUIZMASTER", DBTableID.Music.Row.MUSIC_THE_QUIZMASTER),
        Map.entry("MUSIC_THE_ROGUES_DEN", DBTableID.Music.Row.MUSIC_THE_ROGUES_DEN),
        Map.entry("MUSIC_THE_SHADOW", DBTableID.Music.Row.MUSIC_THE_SHADOW),
        Map.entry("MUSIC_THE_SLAYER", DBTableID.Music.Row.MUSIC_THE_SLAYER),
        Map.entry("MUSIC_THE_TERRIBLE_TOWER", DBTableID.Music.Row.MUSIC_THE_TERRIBLE_TOWER),
        Map.entry("MUSIC_THE_TOWER", DBTableID.Music.Row.MUSIC_THE_TOWER),
        Map.entry("MUSIC_THE_TOWER_OF_VOICES", DBTableID.Music.Row.MUSIC_THE_TOWER_OF_VOICES),
        Map.entry("MUSIC_THE_TRADE_PARADE", DBTableID.Music.Row.MUSIC_THE_TRADE_PARADE),
        Map.entry("MUSIC_THEME", DBTableID.Music.Row.MUSIC_THEME),
        Map.entry("MUSIC_THETHEATRE", DBTableID.Music.Row.MUSIC_THETHEATRE),
        Map.entry("MUSIC_THRALL_OF_THE_SERPENT", DBTableID.Music.Row.MUSIC_THRALL_OF_THE_SERPENT),
        Map.entry("MUSIC_THRONE_OF_THE_DEMON", DBTableID.Music.Row.MUSIC_THRONE_OF_THE_DEMON),
        Map.entry("MUSIC_TIME_OUT", DBTableID.Music.Row.MUSIC_TIME_OUT),
        Map.entry("MUSIC_TIME_TO_MINE", DBTableID.Music.Row.MUSIC_TIME_TO_MINE),
        Map.entry("MUSIC_TIPTOE", DBTableID.Music.Row.MUSIC_TIPTOE),
        Map.entry("MUSIC_TITLE_FIGHT", DBTableID.Music.Row.MUSIC_TITLE_FIGHT),
        Map.entry("MUSIC_TOA_AMBIENCE", DBTableID.Music.Row.MUSIC_TOA_AMBIENCE),
        Map.entry("MUSIC_TOA_BOSS_AKKHA", DBTableID.Music.Row.MUSIC_TOA_BOSS_AKKHA),
        Map.entry("MUSIC_TOA_BOSS_BABA", DBTableID.Music.Row.MUSIC_TOA_BOSS_BABA),
        Map.entry("MUSIC_TOA_BOSS_KEPHRI", DBTableID.Music.Row.MUSIC_TOA_BOSS_KEPHRI),
        Map.entry("MUSIC_TOA_BOSS_WARDENS", DBTableID.Music.Row.MUSIC_TOA_BOSS_WARDENS),
        Map.entry("MUSIC_TOA_BOSS_ZEBAK", DBTableID.Music.Row.MUSIC_TOA_BOSS_ZEBAK),
        Map.entry("MUSIC_TOA_LOBBY", DBTableID.Music.Row.MUSIC_TOA_LOBBY),
        Map.entry("MUSIC_TOA_PATH_APMEKEN", DBTableID.Music.Row.MUSIC_TOA_PATH_APMEKEN),
        Map.entry("MUSIC_TOA_PATH_CRONDIS", DBTableID.Music.Row.MUSIC_TOA_PATH_CRONDIS),
        Map.entry("MUSIC_TOA_PATH_HET", DBTableID.Music.Row.MUSIC_TOA_PATH_HET),
        Map.entry("MUSIC_TOA_PATH_SCABARAS", DBTableID.Music.Row.MUSIC_TOA_PATH_SCABARAS),
        Map.entry("MUSIC_TOA_VICTORY", DBTableID.Music.Row.MUSIC_TOA_VICTORY),
        Map.entry("MUSIC_TOMB_RAIDER", DBTableID.Music.Row.MUSIC_TOMB_RAIDER),
        Map.entry("MUSIC_TOMORROW", DBTableID.Music.Row.MUSIC_TOMORROW),
        Map.entry("MUSIC_TOO_MANY_COOKS", DBTableID.Music.Row.MUSIC_TOO_MANY_COOKS),
        Map.entry("MUSIC_TRAEHERN_TOIL", DBTableID.Music.Row.MUSIC_TRAEHERN_TOIL),
        Map.entry("MUSIC_TRAWLER", DBTableID.Music.Row.MUSIC_TRAWLER),
        Map.entry("MUSIC_TRAWLER_MINOR", DBTableID.Music.Row.MUSIC_TRAWLER_MINOR),
        Map.entry("MUSIC_TREE_SPIRITS", DBTableID.Music.Row.MUSIC_TREE_SPIRITS),
        Map.entry("MUSIC_TREMBLE", DBTableID.Music.Row.MUSIC_TREMBLE),
        Map.entry("MUSIC_TRIBAL", DBTableID.Music.Row.MUSIC_TRIBAL),
        Map.entry("MUSIC_TRIBAL_BACKGROUND", DBTableID.Music.Row.MUSIC_TRIBAL_BACKGROUND),
        Map.entry("MUSIC_TRIBAL2", DBTableID.Music.Row.MUSIC_TRIBAL2),
        Map.entry("MUSIC_TRINITY", DBTableID.Music.Row.MUSIC_TRINITY),
        Map.entry("MUSIC_TROLLSHUFFLE", DBTableID.Music.Row.MUSIC_TROLLSHUFFLE),
        Map.entry("MUSIC_TROUBLE_BREWING", DBTableID.Music.Row.MUSIC_TROUBLE_BREWING),
        Map.entry("MUSIC_TROUBLED", DBTableID.Music.Row.MUSIC_TROUBLED),
        Map.entry("MUSIC_TROUBLED_WATERS", DBTableID.Music.Row.MUSIC_TROUBLED_WATERS),
        Map.entry("MUSIC_TWILIGHT", DBTableID.Music.Row.MUSIC_TWILIGHT),
        Map.entry("MUSIC_TZHAAR", DBTableID.Music.Row.MUSIC_TZHAAR),
        Map.entry("MUSIC_ULLEK", DBTableID.Music.Row.MUSIC_ULLEK),
        Map.entry("MUSIC_UNDEAD_DUNGEON", DBTableID.Music.Row.MUSIC_UNDEAD_DUNGEON),
        Map.entry("MUSIC_UNDERCURRENT", DBTableID.Music.Row.MUSIC_UNDERCURRENT),
        Map.entry("MUSIC_UNDERGROUND", DBTableID.Music.Row.MUSIC_UNDERGROUND),
        Map.entry("MUSIC_UNDERSTANDING", DBTableID.Music.Row.MUSIC_UNDERSTANDING),
        Map.entry("MUSIC_UNKNOWN_LAND", DBTableID.Music.Row.MUSIC_UNKNOWN_LAND),
        Map.entry("MUSIC_UNTOUCHABLE", DBTableID.Music.Row.MUSIC_UNTOUCHABLE),
        Map.entry("MUSIC_UPASS", DBTableID.Music.Row.MUSIC_UPASS),
        Map.entry("MUSIC_UPCOMING", DBTableID.Music.Row.MUSIC_UPCOMING),
        Map.entry("MUSIC_UPIR_LIKHYI", DBTableID.Music.Row.MUSIC_UPIR_LIKHYI),
        Map.entry("MUSIC_UPPERDEPTHS", DBTableID.Music.Row.MUSIC_UPPERDEPTHS),
        Map.entry("MUSIC_VANESCULA", DBTableID.Music.Row.MUSIC_VANESCULA),
        Map.entry("MUSIC_VANSTROM", DBTableID.Music.Row.MUSIC_VANSTROM),
        Map.entry("MUSIC_VENOMOUS", DBTableID.Music.Row.MUSIC_VENOMOUS),
        Map.entry("MUSIC_VENTURE", DBTableID.Music.Row.MUSIC_VENTURE),
        Map.entry("MUSIC_VENTURE2", DBTableID.Music.Row.MUSIC_VENTURE2),
        Map.entry("MUSIC_VERZIK_AMBIENCE", DBTableID.Music.Row.MUSIC_VERZIK_AMBIENCE),
        Map.entry("MUSIC_VERZIK_COMBAT", DBTableID.Music.Row.MUSIC_VERZIK_COMBAT),
        Map.entry("MUSIC_VERZIK_DEFEATED", DBTableID.Music.Row.MUSIC_VERZIK_DEFEATED),
        Map.entry("MUSIC_VICTORY_IS_MINE", DBTableID.Music.Row.MUSIC_VICTORY_IS_MINE),
        Map.entry("MUSIC_VILLAGE", DBTableID.Music.Row.MUSIC_VILLAGE),
        Map.entry("MUSIC_VISION", DBTableID.Music.Row.MUSIC_VISION),
        Map.entry("MUSIC_VOLCANIC_VIKINGS", DBTableID.Music.Row.MUSIC_VOLCANIC_VIKINGS),
        Map.entry("MUSIC_VOODOO_CULT", DBTableID.Music.Row.MUSIC_VOODOO_CULT),
        Map.entry("MUSIC_VOYAGE", DBTableID.Music.Row.MUSIC_VOYAGE),
        Map.entry("MUSIC_WAITING_GAME", DBTableID.Music.Row.MUSIC_WAITING_GAME),
        Map.entry("MUSIC_WAKING_DREAM", DBTableID.Music.Row.MUSIC_WAKING_DREAM),
        Map.entry("MUSIC_WALLY_CUTSCENE", DBTableID.Music.Row.MUSIC_WALLY_CUTSCENE),
        Map.entry("MUSIC_WANDER", DBTableID.Music.Row.MUSIC_WANDER),
        Map.entry("MUSIC_WARPATH", DBTableID.Music.Row.MUSIC_WARPATH),
        Map.entry("MUSIC_WARPED_LIBRARY", DBTableID.Music.Row.MUSIC_WARPED_LIBRARY),
        Map.entry("MUSIC_WARRENS", DBTableID.Music.Row.MUSIC_WARRENS),
        Map.entry("MUSIC_WARRIOR", DBTableID.Music.Row.MUSIC_WARRIOR),
        Map.entry("MUSIC_WARRIORS_GUILD", DBTableID.Music.Row.MUSIC_WARRIORS_GUILD),
        Map.entry("MUSIC_WASTELAND", DBTableID.Music.Row.MUSIC_WASTELAND),
        Map.entry("MUSIC_WATERFALL", DBTableID.Music.Row.MUSIC_WATERFALL),
        Map.entry("MUSIC_WATERLOGGED", DBTableID.Music.Row.MUSIC_WATERLOGGED),
        Map.entry("MUSIC_WAY_OF_THE_ENCHANTER", DBTableID.Music.Row.MUSIC_WAY_OF_THE_ENCHANTER),
        Map.entry("MUSIC_WAY_OF_THE_WYRM", DBTableID.Music.Row.MUSIC_WAY_OF_THE_WYRM),
        Map.entry("MUSIC_WAYWARD", DBTableID.Music.Row.MUSIC_WAYWARD),
        Map.entry("MUSIC_WE_ARE_THE_FAIRIES", DBTableID.Music.Row.MUSIC_WE_ARE_THE_FAIRIES),
        Map.entry("MUSIC_WEISS_TOWN", DBTableID.Music.Row.MUSIC_WEISS_TOWN),
        Map.entry("MUSIC_WELL_OF_VOYAGE", DBTableID.Music.Row.MUSIC_WELL_OF_VOYAGE),
        Map.entry("MUSIC_WEREWOLVES", DBTableID.Music.Row.MUSIC_WEREWOLVES),
        Map.entry("MUSIC_WHERE_EAGLES_LAIR", DBTableID.Music.Row.MUSIC_WHERE_EAGLES_LAIR),
        Map.entry("MUSIC_WILD_ISLE", DBTableID.Music.Row.MUSIC_WILD_ISLE),
        Map.entry("MUSIC_WILD_SIDE", DBTableID.Music.Row.MUSIC_WILD_SIDE),
        Map.entry("MUSIC_WILDERNESS", DBTableID.Music.Row.MUSIC_WILDERNESS),
        Map.entry("MUSIC_WILDERNESS_CAVE", DBTableID.Music.Row.MUSIC_WILDERNESS_CAVE),
        Map.entry("MUSIC_WILDERNESS2", DBTableID.Music.Row.MUSIC_WILDERNESS2),
        Map.entry("MUSIC_WILDERNESS3", DBTableID.Music.Row.MUSIC_WILDERNESS3),
        Map.entry("MUSIC_WILDWOOD", DBTableID.Music.Row.MUSIC_WILDWOOD),
        Map.entry("MUSIC_WINTER_FUNFARE", DBTableID.Music.Row.MUSIC_WINTER_FUNFARE),
        Map.entry("MUSIC_WINTERTODT", DBTableID.Music.Row.MUSIC_WINTERTODT),
        Map.entry("MUSIC_WITCHING", DBTableID.Music.Row.MUSIC_WITCHING),
        Map.entry("MUSIC_WOE_OF_THE_WYVERN", DBTableID.Music.Row.MUSIC_WOE_OF_THE_WYVERN),
        Map.entry("MUSIC_WONDER", DBTableID.Music.Row.MUSIC_WONDER),
        Map.entry("MUSIC_WONDEROUS", DBTableID.Music.Row.MUSIC_WONDEROUS),
        Map.entry("MUSIC_WOODLAND", DBTableID.Music.Row.MUSIC_WOODLAND),
        Map.entry("MUSIC_WOODLAND_WALK", DBTableID.Music.Row.MUSIC_WOODLAND_WALK),
        Map.entry("MUSIC_WORK_WORK_WORK", DBTableID.Music.Row.MUSIC_WORK_WORK_WORK),
        Map.entry("MUSIC_WORKSHOP", DBTableID.Music.Row.MUSIC_WORKSHOP),
        Map.entry("MUSIC_WRATH_AND_RUIN", DBTableID.Music.Row.MUSIC_WRATH_AND_RUIN),
        Map.entry("MUSIC_XAMPHUR", DBTableID.Music.Row.MUSIC_XAMPHUR),
        Map.entry("MUSIC_XARPUS_AMBIENCE", DBTableID.Music.Row.MUSIC_XARPUS_AMBIENCE),
        Map.entry("MUSIC_XARPUS_COMBAT", DBTableID.Music.Row.MUSIC_XARPUS_COMBAT),
        Map.entry("MUSIC_XENOPHOBE", DBTableID.Music.Row.MUSIC_XENOPHOBE),
        Map.entry("MUSIC_XMAS_2021", DBTableID.Music.Row.MUSIC_XMAS_2021),
        Map.entry("MUSIC_YESTERYEAR", DBTableID.Music.Row.MUSIC_YESTERYEAR),
        Map.entry("MUSIC_ZALCANO_COMBAT", DBTableID.Music.Row.MUSIC_ZALCANO_COMBAT),
        Map.entry("MUSIC_ZAMORAK_ZOO", DBTableID.Music.Row.MUSIC_ZAMORAK_ZOO),
        Map.entry("MUSIC_ZANIKS_THEME", DBTableID.Music.Row.MUSIC_ZANIKS_THEME),
        Map.entry("MUSIC_ZAROS_ZEITGEIST", DBTableID.Music.Row.MUSIC_ZAROS_ZEITGEIST),
        Map.entry("MUSIC_ZEALOT", DBTableID.Music.Row.MUSIC_ZEALOT),
        Map.entry("MUSIC_ZOGRE_DANCE", DBTableID.Music.Row.MUSIC_ZOGRE_DANCE),
        Map.entry("MUSIC_ZOMBIEDRAGON", DBTableID.Music.Row.MUSIC_ZOMBIEDRAGON),
        Map.entry("MUSIC_ZOMBIISM", DBTableID.Music.Row.MUSIC_ZOMBIISM),
        Map.entry("MUSIC_OLD_ONES", DBTableID.Music.Row.MUSIC_OLD_ONES),
        Map.entry("MUSIC_GHORROCK_DUNGEON", DBTableID.Music.Row.MUSIC_GHORROCK_DUNGEON),
        Map.entry("MUSIC_ASSASSIN_BOSS", DBTableID.Music.Row.MUSIC_ASSASSIN_BOSS),
        Map.entry("MUSIC_MUSPAH_BOSS", DBTableID.Music.Row.MUSIC_MUSPAH_BOSS),
        Map.entry("MUSIC_DT2_VAULT", DBTableID.Music.Row.MUSIC_DT2_VAULT),
        Map.entry("MUSIC_DT2_LASSAR", DBTableID.Music.Row.MUSIC_DT2_LASSAR),
        Map.entry("MUSIC_DT2_GHORROCK", DBTableID.Music.Row.MUSIC_DT2_GHORROCK),
        Map.entry("MUSIC_DT2_SCAR", DBTableID.Music.Row.MUSIC_DT2_SCAR),
        Map.entry("MUSIC_DT2_PURSUER", DBTableID.Music.Row.MUSIC_DT2_PURSUER),
        Map.entry("MUSIC_DT2_LEVIATHAN", DBTableID.Music.Row.MUSIC_DT2_LEVIATHAN),
        Map.entry("MUSIC_DT2_SUCELLUS", DBTableID.Music.Row.MUSIC_DT2_SUCELLUS),
        Map.entry("MUSIC_DT2_VARDORVIS", DBTableID.Music.Row.MUSIC_DT2_VARDORVIS),
        Map.entry("MUSIC_DT2_WHISPERER", DBTableID.Music.Row.MUSIC_DT2_WHISPERER),
        Map.entry("MUSIC_DT2_DIGSITE", DBTableID.Music.Row.MUSIC_DT2_DIGSITE),
        Map.entry("MUSIC_DT2_SLISKE", DBTableID.Music.Row.MUSIC_DT2_SLISKE),
        Map.entry("MUSIC_DT2_WIGHTS", DBTableID.Music.Row.MUSIC_DT2_WIGHTS),
        Map.entry("MUSIC_DT2_HORN", DBTableID.Music.Row.MUSIC_DT2_HORN),
        Map.entry("MUSIC_DT2_HORN_PART_1", DBTableID.Music.Row.MUSIC_DT2_HORN_PART_1),
        Map.entry("MUSIC_DT2_HORN_PART_2", DBTableID.Music.Row.MUSIC_DT2_HORN_PART_2),
        Map.entry("MUSIC_DT2_HORN_PART_3", DBTableID.Music.Row.MUSIC_DT2_HORN_PART_3),
        Map.entry("MUSIC_DT2_HORN_PART_4", DBTableID.Music.Row.MUSIC_DT2_HORN_PART_4),
        Map.entry("MUSIC_DT2_HORN_PART_5", DBTableID.Music.Row.MUSIC_DT2_HORN_PART_5),
        Map.entry("MUSIC_DT2_HORN_PART_6", DBTableID.Music.Row.MUSIC_DT2_HORN_PART_6),
        Map.entry("MUSIC_DT2_LASSAR_SILENT", DBTableID.Music.Row.MUSIC_DT2_LASSAR_SILENT),
        Map.entry("MUSIC_DT2_STRANGLEWOOD", DBTableID.Music.Row.MUSIC_DT2_STRANGLEWOOD),
        Map.entry("MUSIC_BOLRIES_DIARY", DBTableID.Music.Row.MUSIC_BOLRIES_DIARY),
        Map.entry("MUSIC_HEALIN_FEELIN", DBTableID.Music.Row.MUSIC_HEALIN_FEELIN),
        Map.entry("MUSIC_LONGRAMBLE_SCRAMBLE", DBTableID.Music.Row.MUSIC_LONGRAMBLE_SCRAMBLE),
        Map.entry("MUSIC_STOREROOM_SHUFFLE", DBTableID.Music.Row.MUSIC_STOREROOM_SHUFFLE),
        Map.entry("MUSIC_TERRORBIRD_TUSSLE", DBTableID.Music.Row.MUSIC_TERRORBIRD_TUSSLE),
        Map.entry("MUSIC_WASTE_DEFACED", DBTableID.Music.Row.MUSIC_WASTE_DEFACED),
        Map.entry("MUSIC_DOTS_YULETIDE", DBTableID.Music.Row.MUSIC_DOTS_YULETIDE),
        Map.entry("MUSIC_CHILDREN_OF_THE_SUN", DBTableID.Music.Row.MUSIC_CHILDREN_OF_THE_SUN),
        Map.entry("MUSIC_PLOTS_AND_PLANS", DBTableID.Music.Row.MUSIC_PLOTS_AND_PLANS),
        Map.entry("MUSIC_THE_BURNING_SUN", DBTableID.Music.Row.MUSIC_THE_BURNING_SUN),
        Map.entry("MUSIC_UNDEAD_ARMY", DBTableID.Music.Row.MUSIC_UNDEAD_ARMY),
        Map.entry("MUSIC_DREAM_THEATRE", DBTableID.Music.Row.MUSIC_DREAM_THEATRE),
        Map.entry("MUSIC_ZOMBIE_INVASION", DBTableID.Music.Row.MUSIC_ZOMBIE_INVASION),
        Map.entry("MUSIC_CIVITAS_ILLA_FORTIS", DBTableID.Music.Row.MUSIC_CIVITAS_ILLA_FORTIS),
        Map.entry("MUSIC_AVIUM_SAVANNAH", DBTableID.Music.Row.MUSIC_AVIUM_SAVANNAH),
        Map.entry("MUSIC_RALOS_RISE", DBTableID.Music.Row.MUSIC_RALOS_RISE),
        Map.entry("MUSIC_CAM_TORUM", DBTableID.Music.Row.MUSIC_CAM_TORUM),
        Map.entry("MUSIC_HUNTER_GUILD", DBTableID.Music.Row.MUSIC_HUNTER_GUILD),
        Map.entry("MUSIC_FORTIS_COLOSSEUM", DBTableID.Music.Row.MUSIC_FORTIS_COLOSSEUM),
        Map.entry("MUSIC_PERILOUS_MOONS", DBTableID.Music.Row.MUSIC_PERILOUS_MOONS),
        Map.entry("MUSIC_EASTER_2024", DBTableID.Music.Row.MUSIC_EASTER_2024),
        Map.entry("MUSIC_BLACK_OF_KNIGHT", DBTableID.Music.Row.MUSIC_BLACK_OF_KNIGHT),
        Map.entry("MUSIC_DANGEROUS_LOGIC", DBTableID.Music.Row.MUSIC_DANGEROUS_LOGIC),
        Map.entry("MUSIC_TEMPLE_DESECRATED", DBTableID.Music.Row.MUSIC_TEMPLE_DESECRATED),
        Map.entry("MUSIC_THE_EVIL_WITHIN", DBTableID.Music.Row.MUSIC_THE_EVIL_WITHIN),
        Map.entry("MUSIC_THE_KIN", DBTableID.Music.Row.MUSIC_THE_KIN),
        Map.entry("MUSIC_THE_KIN_FADE", DBTableID.Music.Row.MUSIC_THE_KIN_FADE),
        Map.entry("MUSIC_THE_ROUTE_OF_ALL_EVIL", DBTableID.Music.Row.MUSIC_THE_ROUTE_OF_ALL_EVIL),
        Map.entry("MUSIC_THE_SOUND_OF_GUTHIX", DBTableID.Music.Row.MUSIC_THE_SOUND_OF_GUTHIX),
        Map.entry("MUSIC_THE_STONE", DBTableID.Music.Row.MUSIC_THE_STONE),
        Map.entry("MUSIC_INCARCERATION", DBTableID.Music.Row.MUSIC_INCARCERATION),
        Map.entry("MUSIC_THE_ROUTE_OF_THE_PROBLEM", DBTableID.Music.Row.MUSIC_THE_ROUTE_OF_THE_PROBLEM),
        Map.entry("MUSIC_ARAXXOR", DBTableID.Music.Row.MUSIC_ARAXXOR),
        Map.entry("MUSIC_QUETZACALLI_GORGE", DBTableID.Music.Row.MUSIC_QUETZACALLI_GORGE),
        Map.entry("MUSIC_TWILIGHT_TEMPLE", DBTableID.Music.Row.MUSIC_TWILIGHT_TEMPLE),
        Map.entry("MUSIC_ALDARIN", DBTableID.Music.Row.MUSIC_ALDARIN),
        Map.entry("MUSIC_MISTROCK", DBTableID.Music.Row.MUSIC_MISTROCK),
        Map.entry("MUSIC_SUNSET_COAST", DBTableID.Music.Row.MUSIC_SUNSET_COAST),
        Map.entry("MUSIC_AMOXLIATL", DBTableID.Music.Row.MUSIC_AMOXLIATL),
        Map.entry("MUSIC_HUEYCOATL", DBTableID.Music.Row.MUSIC_HUEYCOATL),
        Map.entry("MUSIC_ALDARIN_2", DBTableID.Music.Row.MUSIC_ALDARIN_2),
        Map.entry("MUSIC_AVIUM_SAVANNAH_2", DBTableID.Music.Row.MUSIC_AVIUM_SAVANNAH_2),
        Map.entry("MUSIC_CIVITAS_ILLA_FORTIS_2", DBTableID.Music.Row.MUSIC_CIVITAS_ILLA_FORTIS_2),
        Map.entry("MUSIC_HAILSTORM_MOUNTAINS", DBTableID.Music.Row.MUSIC_HAILSTORM_MOUNTAINS),
        Map.entry("MUSIC_MATTER_OF_INTRIGUE", DBTableID.Music.Row.MUSIC_MATTER_OF_INTRIGUE),
        Map.entry("MUSIC_OLD_ONE_RUINS", DBTableID.Music.Row.MUSIC_OLD_ONE_RUINS),
        Map.entry("MUSIC_LAMISTARDS_LABYRINTH", DBTableID.Music.Row.MUSIC_LAMISTARDS_LABYRINTH),
        Map.entry("MUSIC_THE_NORTH", DBTableID.Music.Row.MUSIC_THE_NORTH),
        Map.entry("MUSIC_THE_HEIST", DBTableID.Music.Row.MUSIC_THE_HEIST),
        Map.entry("MUSIC_HEAVY_SECURITY", DBTableID.Music.Row.MUSIC_HEAVY_SECURITY),
        Map.entry("MUSIC_THE_PLUNDERED_TOMB", DBTableID.Music.Row.MUSIC_THE_PLUNDERED_TOMB),
        Map.entry("MUSIC_YAMA_COMBAT", DBTableID.Music.Row.MUSIC_YAMA_COMBAT)
    );
}

package dev.denaro.dialog.options.requirements;

import dev.denaro.dialog.options.conditions.DialogCondition;
import net.runelite.api.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tomlj.TomlTable;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public abstract class DialogRequirement
{
    private static final Logger logger = LoggerFactory.getLogger(DialogRequirement.class);

    public static void registerAllRequirements()
    {
        logger.debug("Loading dialog requirements");
        CreateCalls = new HashMap<>();
        DialogRequirement.RegisterCreateCall("members", DialogMembersRequirement::create);
        DialogRequirement.RegisterCreateCall("skill", DialogSkillRequirement::create);
        DialogRequirement.RegisterCreateCall("quest", DialogQuestRequirement::create);
        DialogRequirement.RegisterCreateCall("notironman", DialogNotIronManRequirement::create);
        DialogRequirement.RegisterCreateCall("music", DialogMusicRequirement::create);
    }

    private static Map<String, Function<TomlTable, DialogRequirement>> CreateCalls;
    public static void RegisterCreateCall(String key, Function<TomlTable, DialogRequirement> func)
    {
        CreateCalls.put(key, func);
        logger.debug("Registered " + key + " Requirement");
    }

    public static DialogRequirement New(String type, TomlTable requirement)
    {
        Function<TomlTable, DialogRequirement> func = CreateCalls.get(type);
        return func.apply(requirement);
    }

    private String condition;
    private boolean negate;

    protected void setup(TomlTable requirement)
    {
        this.condition = requirement.getString("if");
        this.negate = Boolean.TRUE.equals(requirement.getBoolean("negate"));
    }

    public abstract boolean _isMet(Client client);

    public boolean isMet(Client client)
    {
        if (isRequirementRequired(client))
        {
            return _isMet(client) == !this.negate;
        }

        return true;
    }

    private boolean isRequirementRequired(Client client)
    {
        if (this.condition != null && DialogCondition.is(this.condition, client))
        {
            // Skip ("pass")
            return false;
        }

        return true;
    }
}

package dev.denaro.dialog.options.requirements;

import net.runelite.api.*;
import net.runelite.api.annotations.Component;
import org.tomlj.TomlTable;

@Component
public class DialogQuestRequirement extends DialogRequirement
{
    String quest;
    String status;
    String atleast;

    public static DialogQuestRequirement create(TomlTable requirement)
    {
        DialogQuestRequirement req = new DialogQuestRequirement();
        req.quest = requirement.getString("name");
        req.status = requirement.getString("status");
        req.atleast = requirement.getString("minimum");

        req.setup(requirement);
        return req;
    }

    @Override
    public boolean _isMet(Client client) {
        QuestState state = Quest.valueOf(this.quest.toUpperCase().replaceAll(" ", "_").replaceAll("'", "")).getState(client);

        if (this.status != null)
        {
            switch (this.status.toLowerCase())
            {
                case "not started":
                    return state == QuestState.NOT_STARTED;
                case "in progress":
                    return state == QuestState.IN_PROGRESS;
                case "complete":
                    return state == QuestState.FINISHED;
                default:
                    return false;
            }
        }
        else
        {
            switch (this.status.toLowerCase())
            {
                case "not started":
                    return true;
                case "in progress":
                    return state == QuestState.IN_PROGRESS || state == QuestState.FINISHED;
                case "complete":
                    return state == QuestState.FINISHED;
                default:
                    return false;
            }
        }
    }
}

package dev.denaro.dialog.options.requirements;

import net.runelite.api.Client;
import net.runelite.api.WorldType;
import net.runelite.api.annotations.Component;
import org.tomlj.TomlTable;

@Component
public class DialogMembersRequirement extends DialogRequirement
{
    public static DialogMembersRequirement create(TomlTable requirement)
    {
        return new DialogMembersRequirement();
    }

    @Override
    public boolean _isMet(Client client) {
        return client.getWorldType().contains(WorldType.MEMBERS);
    }
}

package dev.denaro.dialog.options.requirements;

import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.annotations.Component;
import org.tomlj.TomlTable;

@Component
public class DialogNotIronManRequirement extends DialogRequirement
{
    public static DialogNotIronManRequirement create(TomlTable requirement)
    {
        return new DialogNotIronManRequirement();
    }

    @Override
    public boolean _isMet(Client client) {
        return client.getVarbitValue(Varbits.ACCOUNT_TYPE) == 0;
    }
}

package dev.denaro.dialog.options.requirements;

import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tomlj.TomlTable;

@Component
public class DialogSkillRequirement extends DialogRequirement
{
    private static final Logger logger = LoggerFactory.getLogger(DialogSkillRequirement.class);
    String skill;
    int levelMin;
    int levelMax;

    public static DialogSkillRequirement create(TomlTable requirement)
    {
        DialogSkillRequirement req = new DialogSkillRequirement();

        req.skill = requirement.getString("name");
        req.levelMin = Math.toIntExact(requirement.getLong("level"));
        if (requirement.contains("levelMax"))
        {
            req.levelMax = Math.toIntExact(requirement.getLong("levelMax"));
        }
        else
        {
            req.levelMax = 999;
        }

        req.setup(requirement);

        return req;
    }

    @Override
    public boolean _isMet(Client client)
    {
        Player player = client.getLocalPlayer();
        if (this.skill.equals("Combat"))
        {
            return player.getCombatLevel() >= this.levelMin && player.getCombatLevel() <= this.levelMax;
        }

        int skillLevel = client.getRealSkillLevel(Skill.valueOf(this.skill.toUpperCase()));

        logger.debug("Checking " + this.levelMin + " <= " + this.skill + " " + skillLevel + " <= " + this.levelMax);

        return this.levelMin <= skillLevel && skillLevel <= this.levelMax;
    }

    @Override
    public String toString()
    {
        return "DialogSkillRequirement: " + this.skill + " lvl " + this.levelMin + " max " + this.levelMax;
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.Dialog;
import dev.denaro.dialog.DialogMessage;
import dev.denaro.dialog.options.conditions.DialogCondition;
import dev.denaro.dialog.options.requirements.DialogRequirement;
import net.runelite.api.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tomlj.TomlArray;
import org.tomlj.TomlInvalidTypeException;
import org.tomlj.TomlTable;

import java.util.List;

public class DialogResponse
{
    private static final Logger logger = LoggerFactory.getLogger(DialogResponse.class);
    public List<DialogRequirement> requirements;
    private final TomlArray messages;

    public DialogResponse(TomlArray messages, List<DialogRequirement> requirements) {
        this.messages = messages;
        this.requirements = requirements;
    }

    public Dialog createDialog(Client client) throws Exception {
        Dialog root = null;
        Dialog current = null;
        for (int i = 0; i < this.messages.size(); i++)
        {
            String message = null;
            try
            {
                message = this.messages.getString(i);
            }
            catch (TomlInvalidTypeException exceptionStr)
            {
                // not a string, so check table
                try
                {
                    TomlTable obj = this.messages.getTable(i);
                    if (obj.contains("if"))
                    {
                        String condition = obj.getString("if").toLowerCase();

                        if (DialogCondition.is(condition, client))
                        {
                            message = obj.getString("text");
                        }
                    }
                    else
                    {
                        message = obj.getString("text");
                    }
                }
                catch (TomlInvalidTypeException exceptionObj)
                {
                    logger.error("messages has incorrect format");
                }
            }

            if (message != null)
            {
                if (root == null) {

                    root = current = new DialogMessage(DialogMessage.DialogSpeaker.Guide, message);
                }
                else
                {
                    current = current.setNext(new DialogMessage(DialogMessage.DialogSpeaker.Guide, message));
                }
            }
        }

        return root;
    }
}

package dev.denaro.dialog.options;

public enum DialogType
{
    Combat,
    Quest,
    Item,
    Explore,
    Money,
    Skill,
}

package dev.denaro.dialog.options.conditions;

import net.runelite.api.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

public abstract class DialogCondition
{
    private static final Logger logger = LoggerFactory.getLogger(DialogCondition.class);
    private static Map<String, DialogCondition> map;

    public static void registerAllConditions()
    {
        logger.debug("Loading dialog conditions");
        map = new HashMap<>();
        DialogCondition.register("ironman", new DialogIronmanCondition());
        DialogCondition.register("member", new DialogMembersCondition());
        DialogCondition.register("members", new DialogMembersCondition());
    }

    private static void register(String key, DialogCondition condition)
    {
        map.put(key, condition);
        logger.debug("Registered " + key + " " + condition);
    }

    public static boolean is(String condition, Client client)
    {
        if (condition.startsWith("not "))
        {
            condition = condition.substring(4);
            return !map.get(condition)._is(client);
        }
        else
        {
            logger.info(condition);
            return map.get(condition)._is(client);
        }
    }

    public abstract boolean _is(Client client);
}

package dev.denaro.dialog.options.conditions;

import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.annotations.Component;

@Component
public class DialogIronmanCondition extends DialogCondition
{
    @Override
    public boolean _is(Client client)
    {
        return client.getVarbitValue(Varbits.ACCOUNT_TYPE) > 0;
    }
}

package dev.denaro.dialog.options.conditions;

import net.runelite.api.Client;
import net.runelite.api.VarPlayer;
import net.runelite.api.WorldType;
import net.runelite.api.annotations.Component;

@Component
public class DialogMembersCondition extends DialogCondition
{
    @Override
    public boolean _is(Client client)
    {
        return client.getWorldType().contains(WorldType.MEMBERS);
    }
}

package dev.denaro.dialog.options;

import dev.denaro.dialog.options.requirements.DialogRequirement;
import org.tomlj.TomlArray;

import java.util.List;

public class DialogExploreResponse extends DialogResponse
{
    public DialogExploreResponse(TomlArray messages, List<DialogRequirement> requirements) {
        super(messages, requirements);
    }
}

package dev.denaro;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import dev.denaro.dialog.Dialog;
import dev.denaro.dialog.options.conditions.DialogCondition;
import dev.denaro.dialog.options.requirements.DialogRequirement;
import org.slf4j.LoggerFactory;

public class TomlTest
{
    public static void main(String[] args)
    {
        DialogCondition.registerAllConditions();
        DialogRequirement.registerAllRequirements();
        ch.qos.logback.classic.Logger logger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
        logger.setLevel(Level.ALL);
        String tomlStr = "type = \"Item\"\n" +
                "itemType = \"Weapon\"\n" +
                "messages = [\n" +
                "  \"There's a sword shop in Varrock.\",\n" +
                "  \"I would recommend a shortsword. They attack quickly and deal moderate damage.\"\n" +
                "]\n" +
                "\n" +
                "[[requirements]]\n" +
                "type = \"Skill\"\n" +
                "name = \"Attack\"\n" +
                "level = 1\n" +
                "levelMax = 30\n";

        Dialog.loadDynamicToml(tomlStr);
    }
}

package dev.denaro;

import ch.qos.logback.classic.Level;
import dev.denaro.dialog.Dialog;
import dev.denaro.dialog.DialogMessage;
import dev.denaro.dialog.DialogOption;
import dev.denaro.dialog.options.conditions.DialogCondition;
import dev.denaro.dialog.options.requirements.DialogRequirement;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.WorldType;
import net.runelite.client.config.ConfigManager;
import okhttp3.OkHttpClient;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static net.runelite.api.gameval.DBTableID.Music.Row;
import static org.mockito.Mockito.*;

public class DialogTest
{
    private static final Logger logger = LoggerFactory.getLogger(DialogTest.class);

    public static void main(String[] args) throws InterruptedException
    {
        DialogCondition.registerAllConditions();
        DialogRequirement.registerAllRequirements();
        ch.qos.logback.classic.Logger logger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
        logger.setLevel(Level.ALL);

        FriendlyGuideConfig config = mock(FriendlyGuideConfig.class);

        Mockito.when(config.etag()).thenReturn("a");
//        Mockito.when(config.etag()).thenReturn("\"0x8DDAFAB95F9C54E\"");
        Mockito.when(config.showIntroduction()).thenReturn(false);

        ConfigManager configManager = mock(ConfigManager.class);
        doAnswer((a) -> {
            String etag = a.getArgument(2);
            Mockito.when(config.etag()).thenReturn(etag);
            return null;
        }).when(configManager).setConfiguration(Mockito.eq("friendlyGuide"), Mockito.eq("etag"), Mockito.anyString());


        doAnswer((a) -> {
            String data = a.getArgument(2);
            Mockito.when(config.data()).thenReturn(data);
            return null;
        }).when(configManager).setConfiguration(Mockito.eq("friendlyGuide"), Mockito.eq("data"), Mockito.anyString());

        logger.info("Loading data");
        new DialogDataLoader(new OkHttpClient(), config, configManager).Load();
        logger.info("Finished loading data");

        Client clientMock = mock(Client.class);
        Mockito.when(clientMock.getWorldType()).thenReturn(EnumSet.of(WorldType.MEMBERS));
        int[] musicUnlocks = new int[]{Row.MUSIC_7TH_REALM};
        doAnswer((a) ->
        {
            when(clientMock.getIntStack()).thenReturn(new int[]{Arrays.stream(musicUnlocks).anyMatch(music -> music == (int)a.getArgument(1)) ? 1 : 0}); // just make it so all music is unlocked?
            return null;
        }).when(clientMock).runScript(Mockito.eq(252), Mockito.anyInt());
        Player playerMock = mock(Player.class);
        Mockito.when(clientMock.getLocalPlayer()).thenReturn(playerMock);

        Mockito.when(playerMock.getCombatLevel()).thenReturn(50);
        Mockito.when(clientMock.getRealSkillLevel(Skill.WOODCUTTING)).thenReturn(50);
        Mockito.when(clientMock.getRealSkillLevel(Skill.ATTACK)).thenReturn(20);
        Mockito.when(clientMock.getRealSkillLevel(Skill.CRAFTING)).thenReturn(10);

        FriendlyGuidePlugin plugin = mock(FriendlyGuidePlugin.class);
        Mockito.when(plugin.getClient()).thenReturn(clientMock);
        Mockito.when(plugin.getConfig()).thenReturn(config);

        Dialog treeOptions = Dialog.createDialogTree(plugin);

        ArrayList<Integer> subOptions = new ArrayList<>();

        if (treeOptions instanceof DialogOption)
        {
            for (int i = 0; i < ((DialogOption) treeOptions).options.length; i++)
            {
                logger.info("Running tree with dialog option: " + i + " " + ((DialogOption) treeOptions).options[i].text + "\n");
                Dialog dialog = treeOptions;

                if (subOptions.isEmpty() && ((DialogOption) treeOptions).options[i].next() instanceof DialogOption)
                {
                    int optionCount = ((DialogOption)((DialogOption) treeOptions).options[i].next()).options.length;
                    subOptions = new ArrayList<Integer>(IntStream.range(0, optionCount).boxed().collect(Collectors.toList()));
                    logger.info("Found sub-options: " + subOptions);
                }

                while (dialog != null)
                {
                    if (dialog instanceof DialogMessage)
                    {
                        DialogMessage dm = (DialogMessage) dialog;
                        logger.info(dm.speaker + ":" + dm.message);

                        dialog = dialog.next();
                    }
                    else if (dialog instanceof DialogOption)
                    {
                        DialogOption options = (DialogOption) dialog;
                        logger.info("Options:\n- " + Arrays.stream(options.options).map(opt -> opt.text).collect(Collectors.joining("\n- ")));

                        int index = i;
                        if (dialog != treeOptions && !subOptions.isEmpty())
                        {
                            index = subOptions.remove(0);
                        }

                        dialog = options.options[index].next();
                    }
                    else
                    {
                        logger.info("Unknown dialog type");
                    }
                }

                if (!subOptions.isEmpty())
                {
                    // Replay with another sub option
                    logger.info("i--, replay a sub option");
                    i--;
                }
            }
        }

        logger.info("Test done");
    }
}

package dev.denaro;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FriendlyGuidePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FriendlyGuidePlugin.class);
		RuneLite.main(args);
	}
}
