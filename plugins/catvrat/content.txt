package com.catvrat;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CatVRatPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CatVRatPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022 Gunner <flintshadowrider@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.catvrat;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.coords.LocalPoint;
//import net.runelite.client.plugins.catvrat.*;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.game.ItemManager;

import javax.inject.Inject;
import java.awt.*;

class CatOverlay extends Overlay
{
	private final CatVRatPlugin plugin;
	private final Client client;


	@Inject
	private ItemManager itemManager;

	@Inject
	private CatOverlay(Client client, CatVRatPlugin plugin)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.client = client;
		this.plugin = plugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (CatVRatPlugin.catState.equalsIgnoreCase("warning")) {
			makeFeedingOverlayHint(graphics, Color.ORANGE);
		}
		else if (CatVRatPlugin.catState.equalsIgnoreCase("dangerous")) {
			makeFeedingOverlayHint(graphics, Color.RED);
		}

		return null;
	}

	public void makeFeedingOverlayHint(Graphics2D graphics, Color color)
	{
		LocalPoint localLocation = client.getFollower().getLocalLocation();

		if (localLocation != null)
		{
			OverlayUtil.renderActorOverlayImage(graphics, client.getFollower(), itemManager.getImage(ItemID.RAW_KARAMBWANJI, 1, false), color, 0);
		}

	}
}

/*
 * Copyright (c) 2022 Gunner <flintshadowrider@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.catvrat;

import lombok.Getter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Counter;
import net.runelite.client.util.QuantityFormatter;

import java.awt.image.BufferedImage;

class CatCounter extends Counter
{
	@Getter
	private final int itemID;
	private final String name;

	CatCounter(Plugin plugin, int itemID, int count, String name, BufferedImage image)
	{
		super(image, plugin, count);
		this.itemID = itemID;
		this.name = name;
	}

	@Override
	public String getText()
	{
		return QuantityFormatter.quantityToRSDecimalStack(getCount());
	}

	@Override
	public String getTooltip()
	{
		return name;
	}
}

/*
 * Copyright (c) 2022 Gunner <flintshadowrider@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.catvrat;

import lombok.Getter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Counter;
import net.runelite.client.util.QuantityFormatter;

import java.awt.image.BufferedImage;

class KarambwanjiCounter extends Counter
{
	@Getter
	private final int itemID;
	private final String name;

	KarambwanjiCounter(Plugin plugin, int itemID, int count, String name, BufferedImage image)
	{
		super(image, plugin, count);
		this.itemID = itemID;
		this.name = name;
	}

	@Override
	public String getText()
	{
		return QuantityFormatter.quantityToRSDecimalStack(getCount());
	}

	@Override
	public String getTooltip()
	{
		return name;
	}
}

/*
 * Copyright (c) 2022 Gunner <flintshadowrider@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.catvrat;

import net.runelite.api.*;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

@PluginDescriptor(
	name = "Cat V Rat",
	description = "Help remind yourself to feed your cat while it is fighting Hell-Rat Behemoths for spices!",
	tags = {"cat", "rat", "health", "notifications", "spicy", "stew"}
)
public class CatVRatPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private CatOverlay catOverlay;
	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private Notifier notifier;

	private KarambwanjiCounter KarambwanjiCounterBox;
	private CatCounter catCounterBox;

	public static String catState = "null";


	@Override
	protected void startUp() throws Exception
	{

		clientThread.invokeLater(() ->
		{
			overlayManager.add(catOverlay);
			final ItemContainer container = client.getItemContainer(InventoryID.INVENTORY);

			if (container != null)
			{
				checkInventory(container);
			}
		});
	}


	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(catOverlay);
		infoBoxManager.removeInfoBox(KarambwanjiCounterBox);
		infoBoxManager.removeInfoBox(catCounterBox);
		KarambwanjiCounterBox = null;
		catCounterBox = null;
	}


	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getItemContainer() != client.getItemContainer(InventoryID.INVENTORY))
		{
			return;
		}

		checkInventory(event.getItemContainer());
	}


	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		Actor actor = event.getActor();
		if (actor.getName() == null) return;
		if (!(actor instanceof NPC)) return;
		if (!(actor.getName().equalsIgnoreCase("Hell-Rat Behemoth"))) return;

		if (actor.getAnimation() == 2705) // Animation ID of Hell-Rat Behemoth att/def
			checkCatState(Color.orange);
		else if (actor.getAnimation() == 2706)
			checkCatState(Color.yellow);
		else if (actor.getAnimation() == 2707) // Animation ID of Hell-Rat Behemoth dying
		{
			sendChatMessage(Color.green, "Hell-Rat Behemoth has been defeated!");
			catState = "null";
		}
	}


	private void checkCatState(Color warning_color)
	{
		NPC follower = client.getFollower();
		int max_follower_health = follower.getHealthScale();
		int curr_follower_health = follower.getHealthRatio();

		// if cat has -1 max health, it hasn't been hit yet
		if (max_follower_health == -1) return;

		// check if the cat is below half health
		double warning_threshold = 0.6;
		double dangerous_threshold = 0.3;

		double curr_health_ratio = (double)curr_follower_health/(double)max_follower_health;


		if (curr_health_ratio <= dangerous_threshold) {
			if (!(catState.equalsIgnoreCase("dangerous"))) {
				sendChatMessage(Color.red, "Cat is at dangerous health!");
				client.setHintArrow(follower);
				notifier.notify("DANGER: HEAL YOUR CAT RIGHT NOW!");
				catState = "dangerous";
			}
		}
		else if (curr_health_ratio <= warning_threshold) {
			if (!(catState.equalsIgnoreCase("warning"))) {
				sendChatMessage(warning_color, "Cat is low health!");
				client.setHintArrow(follower);
				notifier.notify("WARNING: HEAL YOUR CAT RIGHT NOW!");
				catState = "warning";
			}
		}
		else {
			if (!(catState.equalsIgnoreCase("good"))) {
				sendChatMessage(Color.CYAN, "Cat is at good health!");
				client.clearHintArrow();
				catState = "good";
			}
		}

	}


	private void checkInventory(final ItemContainer inventory)
	{
		// Check for karambwanji in the inventory
		Item[] items = inventory.getItems();
		int karambwanji_idx = -1;
		if (inventory.contains(ItemID.RAW_KARAMBWANJI)) {
			int idx = 0;
			for (Item item : inventory.getItems()) {
				if (item.getId() == ItemID.RAW_KARAMBWANJI) {
					karambwanji_idx = idx;
					break;
				}
				idx += 1;
			}
		}
		if (karambwanji_idx != -1)
		{
			System.out.println("Found " + items[karambwanji_idx].getQuantity() + " raw Karambwanji at inventory idx: " + karambwanji_idx);
		}
		else
		{
			System.out.println("No raw Karambwanji was found in inventory");
			removeInfobox();
			return;
		}

		// Check for follower
		NPC follower = client.getFollower();
		// if follower exists
		if (follower != null) {
			// Figure out what kind of cat the user has
			int cat_item_id = -1;

			if (follower.getName().equalsIgnoreCase("WILY HELLCAT"))
				cat_item_id = ItemID.WILY_HELLCAT;
			else if (follower.getName().equalsIgnoreCase("LAZY HELLCAT"))
				cat_item_id = ItemID.LAZY_HELL_CAT;
			else if (follower.getName().equalsIgnoreCase("OVERGROWN HELLCAT"))
				cat_item_id = ItemID.OVERGROWN_HELLCAT;
			else if (follower.getName().equalsIgnoreCase("HELLCAT"))
				cat_item_id = ItemID.HELL_CAT;
			else if (follower.getName().equalsIgnoreCase("WILY CAT"))
				cat_item_id = ItemID.WILY_CAT;
			else if (follower.getName().equalsIgnoreCase("LAZY CAT"))
				cat_item_id = ItemID.LAZY_CAT;
			else
				cat_item_id = ItemID.PET_CAT;

			// clean out old cat infobox
			infoBoxManager.removeInfoBox(catCounterBox);
			catCounterBox = null;

			// place new cat infobox
			final BufferedImage image = itemManager.getImage(cat_item_id, 1, false);
			catCounterBox = new CatCounter(this, cat_item_id, 1, follower.getName(), image);
			infoBoxManager.addInfoBox(catCounterBox);

		}
		else {
			// remove cat infobox if no follower exists
			infoBoxManager.removeInfoBox(catCounterBox);
			catCounterBox = null;
		}

		final Item karambwanji = items[karambwanji_idx];
		final ItemComposition comp = itemManager.getItemComposition(karambwanji.getId());

		updateInfobox(karambwanji, comp);
	}


	private void updateInfobox(final Item item, final ItemComposition comp)
	{
		if (KarambwanjiCounterBox != null && KarambwanjiCounterBox.getItemID() == item.getId())
		{
			KarambwanjiCounterBox.setCount(item.getQuantity());
			return;
		}

		removeInfobox();
		final BufferedImage image = itemManager.getImage(item.getId(), 1, false);
		KarambwanjiCounterBox = new KarambwanjiCounter(this, item.getId(), item.getQuantity(), comp.getName(), image);
		infoBoxManager.addInfoBox(KarambwanjiCounterBox);
	}


	private void removeInfobox()
	{
		infoBoxManager.removeInfoBox(KarambwanjiCounterBox);
		KarambwanjiCounterBox = null;
	}


	private void sendChatMessage(Color color, String chatMessage)
	{
		final String message = new ChatMessageBuilder()
				.append(color, chatMessage).build();

		chatMessageManager.queue(
				QueuedMessage.builder()
						.type(ChatMessageType.CONSOLE)
						.runeLiteFormattedMessage(message)
						.build());
	}


}

