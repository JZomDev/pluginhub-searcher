/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TaskCheckerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TaskCheckerPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum Varplayers
{
	SHILO_VILLAGE_PROGRESS(116),
	SOA_PHOENIX_GANG_PROGRESS(145),

	// Beginner clues are varp 2201
	// Master clues are varp 2353
	BEGINNER_CASKETS_OPENED(2201),
	ELITE_CASKETS_OPENED(1533),
	MASTER_CASKETS_OPENED(1534),

	// Cloister Bell, when ge than 5 quickstart is enabled
	GROTESQUE_GUARDIANS_KILLCOUNT(1669),

	// Mortton state varp
	// LO bits 5, 6 appear to be 208 on Ulsquire and Razmire, 8 appears to be looting the table
	// LO bit 30 seems to be returning the diary to the Apothecary
	MORTTON_STATE(340),

	HAUNTED_MINE_PROGRESS(382),

	// value 8 appears to be the assistant giving the player wine
	OBSERVATORY_QUEST_PROGESS(112);

	private final int id;
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import java.util.ArrayList;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import com.andmcadams.taskchecker.tasklist.*;

@Slf4j
public class CompleteTaskList
{

	private ArrayList<Task> tasks;

	@Getter
	private ArrayList<TaskList> taskLists = new ArrayList<>();

	public CompleteTaskList()
	{
		tasks = new ArrayList<>();
		this.initTasks();
	}

	public ArrayList<Task> getTasks()
	{
		// Shallow copy
		return (ArrayList<Task>) tasks.clone();
	}

	private void initTasks()
	{
		TaskList hallowedSepulchre = new HallowedSepulchreTaskList();
		TaskList titheFarm = new TitheFarmTaskList();
		TaskList motherlodeMine = new MotherlodeMineTaskList();
		TaskList forgottenPrayers = new ForgottenPrayerTaskList();
		TaskList treasureTrails = new TreasureTrailsTaskList();
		TaskList championsChallenge = new ChampionsChallengeTaskList();
		TaskList slayerRewards = new SlayerRewardsTaskList();
		TaskList entrancesAndObstacles = new EntrancesAndObstaclesTaskList();
		TaskList rightClick = new RightClickTaskList();
		TaskList doomsayerWarnings = new DoomsayerToggleTaskList();
		TaskList unlimitedServices = new UnlimitedServicesTaskList();
		TaskList minecartNetwork = new LovakengjMinecartNetworkTaskList();
		TaskList utilityItems = new UtilityItemTaskList();
		TaskList uniqueDialoguePaths = new UniqueDialoguePathsTaskList();
		TaskList loot = new LootTaskList();
		TaskList firePits = new FirePitsTaskList();
		TaskList paymentsAndInstantExperience = new PaymentsAndInstantExperienceTaskList();
		TaskList hiddenShops = new HiddenShopsTaskList();
		TaskList lostItems = new LostItemsTaskList();
		TaskList trappedSouls = new TrappedSoulsTaskList();
		TaskList redeemableQuestItems = new RedeemableQuestItemsTaskList();
		TaskList temporary = new TemporaryTaskList();
		TaskList invisible = new InvisibleTaskList();

		taskLists.add(hallowedSepulchre);
		taskLists.add(titheFarm);
		taskLists.add(motherlodeMine);
		taskLists.add(forgottenPrayers);
		taskLists.add(treasureTrails);
		taskLists.add(championsChallenge);
		taskLists.add(slayerRewards);
		taskLists.add(entrancesAndObstacles);
		taskLists.add(rightClick);
		taskLists.add(doomsayerWarnings);
		taskLists.add(unlimitedServices);
		taskLists.add(minecartNetwork);
		taskLists.add(utilityItems);
		taskLists.add(uniqueDialoguePaths);
		taskLists.add(loot);
		taskLists.add(firePits);
		taskLists.add(paymentsAndInstantExperience);
		taskLists.add(hiddenShops);
		taskLists.add(lostItems);
		taskLists.add(trappedSouls);
		taskLists.add(redeemableQuestItems);
		taskLists.add(temporary);
		taskLists.add(invisible);

		int sum = 0;
		for(TaskList taskList : taskLists)
			sum += taskList.getTasks().size();
		log.info("Loaded " + sum + " tasks.");

	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import java.util.ArrayList;
import lombok.Getter;
import net.runelite.api.Client;
import com.andmcadams.taskchecker.var.Var;

public class Task
{
	@Getter
	private String name;

	private ArrayList<Var> varsToCheck;

	// Main constructor, can be used with arbitrary numbers of vars with any checks.
	public Task(String name, ArrayList<Var> varsToCheck)
	{
		this.name = name;
		this.varsToCheck = varsToCheck;
	}

	public void setCurrentValues(Client client)
	{
		for (Var v : varsToCheck)
		{
			v.setCurrentValue(client);
		}
	}

	public boolean isComplete()
	{
		for (Var v : varsToCheck)
		{
			if (!v.isComplete())
				return false;
		}
		return true;
	}

	public ArrayList<Var> getVarsToCheck()
	{
		return (ArrayList<Var>) varsToCheck.clone();
	}

	public static class TaskBuilder
	{
		private String name;
		private ArrayList<Var> varsToCheck;

		public TaskBuilder()
		{
			varsToCheck = new ArrayList<>();
		}

		public TaskBuilder name(String name)
		{
			this.name = name;
			return this;
		}

		public TaskBuilder switchVar(boolean isVarbit, int varIndex)
		{
			Var v = new Var(isVarbit, varIndex, 1, Var::isEqualTargetValue);
			varsToCheck.add(v);
			return this;
		}

		public TaskBuilder eqVar(boolean isVarbit, int varIndex, int targetValue)
		{
			Var v = new Var(isVarbit, varIndex, targetValue, Var::isEqualTargetValue);
			varsToCheck.add(v);
			return this;
		}

		public TaskBuilder geVar(boolean isVarbit, int varIndex, int targetValue)
		{
			Var v = new Var(isVarbit, varIndex, targetValue, Var::isAtLeastTargetValue);
			varsToCheck.add(v);
			return this;
		}

		// This is a bit of a hack to make bitmaps easy to read.
		public TaskBuilder bitVar(boolean isVarbit, int varIndex, int bitPosition)
		{
			Var v = new Var(isVarbit, varIndex, bitPosition, Var::hasBitFlipped);
			varsToCheck.add(v);
			return this;
		}

		public Task build()
		{
			Task task = new Task(name, varsToCheck);
			return task;
		}
	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;

public class TaskPanel extends JPanel
{

	private static final Color INCOMPLETE = Color.RED;
	private static final Color COMPLETE = Color.GREEN;

	private JTextArea nameLabel;

	@Getter
	private Task task;

	public TaskPanel(Task task)
	{
		super();
		this.task = task;

		setLayout(new DynamicGridLayout(1, 1, 0, 0));
		setBorder(new EmptyBorder(5, 5, 5, 5));
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		nameLabel = new JTextArea();
		nameLabel.setWrapStyleWord(true);
		nameLabel.setLineWrap(true);
		nameLabel.setEditable(false);
		nameLabel.setOpaque(false);
		nameLabel.setFocusable(false);

		nameLabel.setText(task.getName());
		nameLabel.setForeground(INCOMPLETE);
		add(nameLabel);
	}

	public boolean updateCompletion()
	{
		Color c;
		boolean isComplete = task.isComplete();
		if (isComplete)
			c = COMPLETE;
		else
			c = INCOMPLETE;
		nameLabel.setForeground(c);
		return isComplete;
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum Varbits
{
	/**
	 * Hallowed Sepulchre
 	 */
	// Can theoretically do ownership of uniques but that'd only see things in Stranger exchange int, not bank
	// Squirrel metamorph?
	FREED_DARKMEYER_SLAVE(10414),
	// Following varbs are *probably* unlock varbs. Visibility adds 5 to each index
	// These likely need to be tested to make sure they match up correctly.
	FREED_KNIGHT_OF_THE_OWL(10396),
	FREED_KNIGHT_OF_THE_LION(10397),
	FREED_KNIGHT_OF_THE_WOLF(10398),
	FREED_KNIGHT_OF_THE_UNICORN(10399),
	FREED_ARCHPRIEST_OF_THE_UNICORN(10400),
	// Fastest run varb?

	/**
	 * Tithe Farm
	 */
	AUTOWEED(5557), // RL name, 0 is not bought, 1 is inactive, 2 is active
	// Bologa's blessings?
	BOLOGA_STATE(5370), // RL name is shitty, 2 is bought the ability to buy blessings


	/**
	 * Motherlode Mine
	 */
	// Upstairs mines access has no varb/varp :(
	// Bigger sack? probably 5556
	UPGRADED_MLM_SACK(5556),

	/**
	 * Mahogany Homes
	 */
	// Hosidius house style?

	/**
	 * Volcanic Mine
	 */
	// Large water container?
	// Fertile soil warning?
	UNLOCKED_LARGE_WATER_CONTAINER(5959),
	// ash covered tome bought is 5960

	/**
	 * Ava's effects
	 */
	// Ava's in CW?
	// Ava's on Range/Max cape?
	// Ava's in SW?

	/**
	 * Damaged books
	 */
	// Unsure if any of these have varbs

	/**
	 * Warrior's Guild
	 */
	// Basement access?

	/**
	 * Ilfeen chants
	 */
	// Unsure about this varb, but the enchant count (8362) goes up to 5, then 9053->1 for right click option

	/**
	 * Shayzien helm (5) on slayer helm
	 */
	SHAYZIEN_HELM_EFFECT_ADDED_TO_SLAYER_HELM(7940),

	/**
	 * Forgotten prayers
	 */
	// Based on https://github.com/RuneStar/cs2-scripts/blob/master/scripts/[proc,prayer_isavailable].cs2
	UNLOCKED_RIGOUR(5451),
	UNLOCKED_AUGURY(5452),
	UNLOCKED_PRESERVE(5453),

	/**
	 * LMS rewards
	 */
	// It's possible that all rewards have varbs since they are displayed in the shop interface

	/**
	 * Graceful outfits
	 */
	// Ability to buy single Agility Arena recolours?
	UNLOCKED_BRIMHAVEN_SINGLE_RECOLORS(5967),

	/**
	 * Bounty Hunter rewards
	 */
	// Unsure if hats will have varbs

	/**
	 * Music cape(t)
	 */
	// Probably varps

	/**
	 * Monkey transformations
	 */
	// Probably not

	/**
	 * Xeric's talisman
	 */
	// Ability to use fifth tp?

	/**
	 * Corrupted Gauntlet
	 */
	// Younglief metamorphosis?

	/**
	 * Kharedst's Memoirs
	 */
	// Secret entry?

	/**
	 * Achievement diary cape(t)
	 */
	// Diary varbs
	// All quests

	/**
	 * Treasure Trails rewards
	 */
	// Can easily check clue scroll completion
	// Can easily check STASH units, although it is tedious
	// Ability to make watches/sextants?
	// Beginner clues are varp 2201
	// Master clues are varp 2353
	// Elites varb 3935?
	EASY_CASKETS_OPENED(3463),
	MEDIUM_CASKETS_OPENED(3465),
	HARD_CASKETS_OPENED(3467),

	/**
	 * Champions Lamps
	 */
	// Bitmap 6278/9
	CHAMPIONS_CHALLENGE_LAMPS_BITMAP(6279),

	/**
	 * Slayer rewards
	 */
	// Thank you beta worlds
	UNLOCKED_GARGOYLE_SMASHER(4027),
	UNLOCKED_SLUG_SALTER(4028),
	UNLOCKED_REPTILE_FREEZER(4029),
	UNLOCKED_SHROOM_SPRAYER(4030),
	UNLOCKED_BROADER_FLETCHING(3208),
	UNLOCKED_MALEVOLENT_MASQUERADE(3202),
	UNLOCKED_RING_BLING(3207),
	UNLOCKED_BIGGER_AND_BADDER(5358),
	UNLOCKED_KING_BLACK_BONNET(5080),
	UNLOCKED_KALPHITE_KHAT(5081),
	UNLOCKED_UNHOLY_HELMET(5082),
	UNLOCKED_DARK_MANTLE(5631),
	UNLOCKED_UNDEAD_HEAD(6096),
	UNLOCKED_USE_MORE_HEAD(6570),
	UNLOCKED_DULY_NOTED(4589),
	UNLOCKED_STOP_THE_WYVERN(240),
	UNLOCKED_TWISTED_VISION(10104),

	/**
	 * Entrances and obstacles
	 */
	UNBLOCKED_LUMBRIDGE_SWAMP_CAVE_HOLE(538),
	// Eagle varbs
	VINE_TO_EAGLE_STATE(3109), // Vine growth goes up to 3 (fully grown)
	MOVED_BOULDER_TO_DESERT_EAGLE(3088),

	// Kourend Catacombs varbs
	UNLOCKED_HOSIDIUS_CATACOMBS_ENTRANCE(5087),
	UNLOCKED_SHAYZIEN_CATACOMBS_ENTRANCE(5088),
	UNLOCKED_ARCEUUS_CATACOMBS_ENTRANCE(5089),
	UNLOCKED_LOVAKENGJ_CATACOMBS_ENTRANCE(5090),

	// Haris
	UNLOCKED_HARIS_RESOURCE_AREA(6076),

	// Kruk's lair passage
	UNBLOCKED_KRUKS_LAIR_PASSAGE(5029),

	// W/E doors require temple key
	// Central door requires pulling lever near Eodan
	UNLOCKED_WEST_FORTHOS_DOOR(8397),
	UNLOCKED_EAST_FORTHOS_DOOR(8398),
	UNLOCKED_CENTRAL_FORTHOS_DOOR(8408),

	// Enakhra entrances
	OPENED_ENAKHRAS_TEMPLE_NW_ENTRANCE(1598),
	OPENED_ENAKHRAS_TEMPLE_NE_ENTRANCE(1599),
	OPENED_ENAKHRAS_TEMPLE_SE_ENTRANCE(1600),
	OPENED_ENAKHRAS_TEMPLE_SW_ENTRANCE(1601),

	// Enakhra doors
	UNLOCKED_ENAKHRAS_TEMPLE_S_DOOR(1611),
	UNLOCKED_ENAKHRAS_TEMPLE_W_DOOR(1612),
	UNLOCKED_ENAKHRAS_TEMPLE_N_DOOR(1613),
	UNLOCKED_ENAKHRAS_TEMPLE_E_DOOR(1614),

	EXCAVATED_STATUE_TO_TUNNEL_OF_CHAOS(3524),
	EXITED_THROUGH_TROLL_STRONGHOLD_SECRET_EXIT(1),

	/**
	 * Dialogue box menu options
	 */
	// I know Fritz doesn't have one.
	// Check farming contract count for jane?
	// Lap count for Ystwyth? No

	/**
	 * Spellbook features
	 */
	// Kourend tele
	// BH target tele
	// Ourania tele
	// 2014 RF tele anim
	// TL tele anim
	// TBZ tele anim
	// NPC contact? Seems possible

	/**
	 * Holiday items
	 */
	// Unsure of how this should be tracked.
	// I have not been paying attention long enough to see if holiday completion varbs are kept around long enough.
	// Some appear to be, could update to newest each time

	/**
	 * Right click options
	 */
	// These should all be possible since these are done by showing/hiding different NPCs
	UNLOCKED_JARVALD_TRAVEL(814),
	UNLOCKED_MARY_TANNING(696),
	UNLOCKED_ILFEEN_ENCHANT(9053),
	UNLOCKED_CONWENNA_AND_REESE_SING(9295),
	UNLOCKED_NORANNA_CONVERT_SHARDS(10448),
	UNLOCKED_MOUNTAIN_GUIDE_TRAVEL(5421),
	// Cloister Bell is a varp
	LAST_JEWELLERY_BOX_TELEPORT(2308), // 0 indicates never used
	LAST_CHARTER_SHIP_DESTINATION(10068), // 0 indicates never used
	LAST_NPC_CONTACT_CONTACT(5006), // 0 indicates never used

	/**
	 * Doomsayer Warnings
	 */
	// All set to 7 when off
	WARNING_DKS_LADDER(3851),
	WARNING_CONTACT_DUNGEON_LADDER(3852),
	WARNING_FALADOR_MOLE_LAIR(3853),
	WARNING_STRONGHOLD_OF_SECURITY_LADDERS(3854),
	WARNING_PLAYER_OWNED_HOUSES(3855),
	WARNING_DROPPED_ITEMS_IN_RANDOM_EVENTS(3856),
	WARNING_WILDERNESS_DITCH(3857),
	WARNING_TROLLHEIM_WILDERNESS_ENTRANCE(3858),
	WARNING_OBSERVATORY_STAIRS(3859),
	WARNING_SHANTAY_PASS(3860),
	WARNING_ICY_PATH_AREA(3861),
	WARNING_WATCHTOWER_SHAMAN_CAVE(3862),
	WARNING_LUMBRIDGE_SWAMP_CAVE_ROPE(3863),
	WARNING_HAM_TUNNEL_FROM_MILL(3864),
	WARNING_FAIRY_RING_TO_DORGESH(3865),
	WARNING_LUMBRIDGE_CELLAR(3866),
	WARNING_ELID_GENIE_CAVE(3867),
	WARNING_DORGESH_TUNNEL_TO_KALPHITES(3868),
	WARNING_DORGESH_CITY_EXIT(3869),
	WARNING_MORT_MYRE(3870),
	WARNING_RANGING_GUILD_TOWER(3871),
	WARNING_DEATH_PLATEAU(3872),
	WARNING_GWD_WILDERNESS_AGILITY_ROUTE(3964),

	/**
	 * Unlimited services
	 */
	CAMULET_CHARGES(1574), // Num charges, 7 when infinite
	// No varb/varp for lyre progress
	PERMANENT_ACCESS_BRIMHAVEN_DUNGEON(8122), // 0 not paid, 1 paid
	PERMANENT_PAYMENT_SLEPE_BOAT(10150),
	// No varb/varp for ghost captain

	/**
	 * Balloon transport
	 */
	// Generally unsure

	/**
	 * Lovakengj Minecart Network
	 */
	// May or may not be varbs for unlocking locations
	// Talking to Meriam initially sets varb to 1, giving dwarves right click travel option
	PAID_MIRIAM_FOR_MINECART_USAGE(5085), // Goes from 1 to 2 on perm payment

	/**
	 * Emotes
	 */
	// Probably a cs2 for this I can dig up

	/**
	 * Utility items
	 */
	// Probably possible since these change the obj ids
	// Kalphite ropes maybe not since you can have those before diary but not permed
	KALPHITE_LAIR_OUTSIDE_ROPE(4586), // Simple switch
	KALPHITE_LAIR_INSIDE_ROPE(11705), // Note that this version has 3 states 0-no rope 1-reg rope 2-ironman rope
	OBSERVATORY_GRAPPLE(5810),
	DARKMEYER_WEST_ROPE(10449),
	DARKMEYER_EAST_ROPE(10450),

	/**
	 * Saradomin's light
	 */
	CONSUMED_SARADOMINS_LIGHT(4733),

	/**
	 * Jar unlocks
	 */
	// None for Kraken

	/**
	 * Buyable respawn locations
	 */
	BOUGHT_EDGEVILLE_RESPAWN(623), //621 is set if active respawn
	// No Ferox varb transmitted

	/**
	 * Miniquests
	 */
	// Easy but tedious. Varbs probably in quest proc cs2

	/**
	 * Miscellaneous dialogue paths
	 */
	UNLOCKED_ROSIE(10586),
	// Phoenix gang progress is a varp
	BOUGHT_STAFF_FROM_EBLIS(391),
	ASKED_BRUNDT_ABOUT_MTN_CAMP(265),
	ASKED_CAT_ABOUT_DESTROYER(447), // incs each time you ask, max at 3
	// ASKED_ZOOKNOCK_ABOUT_BRAZIER - doesn't seem to be transmitted
	ASKED_DWARVEN_BOATMAN_ABOUT_GOLD(312),
	TOLD_THREE_DWARVES_BETWEEN_A_ROCK(307),
	TOLD_THREE_DWARVES_GIANT_DWARF(583),
	TOLD_THREE_DWARVES_FORGETTABLE_TALE(836),
	// INFORMED_MIAZRQA - UNKNOWN
	ASKED_STREET_URCHIN_TO_LURE_AGAIN(319),
	INFORMED_KNIGHT_OF_VARLAMORE(8409),
	MET_FAIRY_AERYKA(3728),
	MET_SILAS_DAHCSNU(3528),
	MET_DAMPE(11774),
	MET_DRUNKEN_DWARF(574),
	RECEIVE_THANKS_FROM_HAMAL(272),
	BOUGHT_CANDLE_FROM_CANDLE_SELLER(284),
	CLAIMED_RAMS_SKULL_HELM(2048),
	CLAIMED_BONESACK(2049),
	ASKED_ABOUT_GUARD_UNIFORM(2495),

	/**
	 * Loot tasks
 	 */
	DADDYS_HOME_PROGRESS(10570), // Last varb val indicates Marlo's crate was opened
	// Mort'ton table is in the varp for that area
	UNDERGROUND_PASS_CRATE(9126),
	ELEMENTAL_WORKSHOP_CRATE(2066),
	MEIYERDITCH_LABS_RUNE_CASE(2584),
	CANIFIS_HIDEOUT_GARLIC_COUNTER(2009), // 0->1->2->3 for all garlic
	KLENTER_PYRAMID_COINS(448),
	ENAKHRAS_TEMPLE_SANDSTONE_COUNTER(8067), // 0->1->2->...->5 for all sandstone
	AGRITH_NAAR_THRONE(354),
	FENKENSTRAIN_CLOCK_LETTER(195),
	GOBLIN_MAIL_NORTH(2379),
	GOBLIN_MAIL_WEST(2380),
	GOBLIN_MAIL_UPSTAIRS(2381),
	// 2326, 9360, 0
	OBSERVATORY_SPIDER_CHEST_1(3829),
	// 2335, 9374, 0
	OBSERVATORY_SPIDER_CHEST_2(3830),
	// 2333, 9405, 0
	OBSERVATORY_SPIDER_CHEST_3(3831),
	// 2356, 9380, 0
	OBSERVATORY_SPIDER_CHEST_4(3832),
	// 2348, 9383, 0
	OBSERVATORY_SPIDER_CHEST_5(3833),
	// 2312, 9400, 0
	OBSERVATORY_SPIDER_CHEST_6(3834),
	// 2310, 9374, 0
	OBSERVATORY_SPIDER_CHEST_7(3835),
	ZEAH_WORKBENCH_NAILS(9684),
	PISCATORIS_BRONZE_PICKAXE(2109),
	PISCATORIS_BRONZE_AXE(2110),
	ANCIENT_LETTER_FORSAKEN_TOWER(7810),
	TATTY_NOTE_KEBOS_LOWLANDS(7951),
	PICKPOCKETED_TEDDY(2559),

	/**
	 * Fire pits
	 */
	// All certainly exist due to multiobj
	MAKING_FRIENDS_WITH_MY_ARM_PROGRESS(6528), // Building this is part of the quest (ish) >= 205 is good enough for the pit
	GWD_ENTRANCE_FIRE_PIT(6531),
	MOLE_HOLE_FIRE_PIT(6532),
	LUMBRIDGE_SWAMP_CAVES_FIRE_PIT(6533),
	MOS_LE_HARMLESS_CAVE_FIRE_PIT(6534),
	MORT_MYRE_SWAMP_FIRE_PIT(6535),

	/**
	 * Payments and instant experience rewards
	 */
	// Likely last states of quest varbs in most cases
	// Obs assistant wine is varp 112
	CABIN_FEVER_REWARD_CLAIMED(1763), // Not sure about this one, 50 in the exact same spot though
	GETTING_AHEAD_REWARD_CLAIMED(694),
	QUEEN_OF_THIEVES_REWARD_CLAIMED(6038), // Also a bit unsure about this one
	MONKEY_MADNESS_II_PROGRESS(5027), // Appears to require 200
	DRAGON_SLAYER_II_REWARD_CLAIMED(6143), // Set to 4 when all xp rewards have been claimed
	MISTHALIN_MYSTERY_REWARD_CLAIMED(4265),
	X_MARKS_THE_SPOT_CLUE_SCROLL_CLAIMED(8258),
	THE_FEUD_BEER_CLAIMED_FROM_ALI(341), // Very unsure about this one, value needs to be 2
	// No varb for clue from monkey
	// No varb for scorpius
	// Probably none for the Tai Bwo Wannai trio since thats a varp


	/**
	 * Hidden shops
	 */
	// Unclear if these are varbs
	// Some might be for multinpcs
	// Uglug is probably either varb 500 or 507
	VANLIGGA_STATE(3326), // 0 is after taxing, 1 is after repaying for tax (or having paid tax for her), 2 is access to shop


	/**
	 * Lost items
	 */
	VEOS_COLLAR_PROGRESS(5627), // 0->1 on wolf bones conv, 1->2 on collar
	// Note that 2397 alone is not enough to tell whether or not the key has been returned
	// Also need to check quest state to make sure the quest is completed. Otherwise the quest might not have been started
	ZEALOT_KEY(2397),
	BROOCH_RETURNED_TO_MISTAG(533),

	/**
	 * Trapped souls and afflicted characters
	 */
	// Note that 449 is not enough to tell whether or not Klenter has been freed
	// Also need to check quest state to make sure the quest is completed. Otherwise the quest might not have been started
	FREED_KLENTER(449),
	ICTHLARINS_LITTLE_HELPER_PROGRESS(418), // max val is 26
	FREED_DROALAK(1388),
	// Unsure if perma curing Morton people will flip a varb
	// Possible its a varp bitmap like Morton table might be
	// Seems unlikely to be transmitted considering the buggy transform on talk

	/**
	 * Redeemable quest items
	 */
	// Diary of Herbi flax is a cursed varp bitmap
	GAVE_WEISS_FIRE_NOTES_TO_BURNTMEAT(6529),
	// Note that this flips to 1 regardless of which person (Zarvistic or Yanni) you sell to
	GAVE_BLACK_PRISM_AWAY(504),

	/**
	 * Memoriam Device memories
	 */
	// Unclear

	/**
	 * Hidden identities
 	 */
	// Unclear

	/**
	 * Item combination recipes
	 */
	CAN_CRAFT_NEITIZNOT_FACEGUARDS(9472),
	// Antifire potions?

	/**
	 * Quest lamps, certificates, and tomes
	 */
	// Most of these probably have varps
	USED_LOVAKENGJ_FAVOUR_CERTIFICATE(7802),

	/**
	 * Obtained trophies
	 */
	// These seem rather unlikely to be transmitted varbs (kq and vork heads) but who knows

	/**
	 * Expert Dragon Archer title
	 */
	// Likely varb counter

	/**
	 * Varrock Museum activities
	 */
	PAID_CETO_PERMANENT(242),
	// Others likely have varbs, know that kudos does

	/**
	 * Fastest kills and runs
	 */
	// Possibly?

	/**
	 * Stronghold of Security
	 */
	SOIZTUNS_FATE_PROGRESS(5639), // 2 after Litara has been informed

	/**
	 * Chest kc
	 */
	// At least grubby chest has a kc counter
	// Others seem likely
	GRUBBY_CHEST_COUNT(10038),

	/**
	 * Irreversible warnings
	 */
	// Most probably have varbs
	IRREVERSIBLE_WARNING_GRUBBY_CHEST(8402),
	// Brimhaven hole warning is the same as Banisoch payment
	BANISOCH_ENTRANCE_STATE(5629), // 0 not paid, 1 paid, 2 warning disabled

	/**
	 * Wise Old Man's bank robbery confession
	 */
	WISE_OLD_MAN_BANK_PROGRESS(960), // Last state is 3

	/**
	 * Delivered Sir Gerry's notes
	 */
	// Probably progression varb, check corpse obj
	// Unclear, as theres only one state for most varbs in the 3969 area

	/**
	 * Disabled Shilo Village furnace coffer
	 */
	// Probably need to check Karam diary and maybe a coffer varb

	/**
	 * Completed Adventure Paths
	 */
	// Check Adventurer Jon visibility, as varbs actually associated with this may be incomplete by accounts that are older
	// Val of 0 means Jon is not visible
	ADVENTURER_JON_STATE(9340),

	/**
	 * Fairy ring codes
	 */
	// If they exist, probably in a varp

	// Warnings

	// Set to 1 when off
	WARNING_MINIGAME_TELEPORT(5410),

	ENTERED_WILDERNESS_COUNTER(4149);

	private final int id;
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.var;

import java.util.function.BiFunction;
import lombok.Getter;
import net.runelite.api.Client;

public class Var
{
	private boolean isVarbit;
	private int varIndex;

	@Getter
	private int targetValue;

	private BiFunction<Integer, Integer, Boolean> targetFunction;

	@Getter
	private int currentValue;

	public Var(boolean isVarbit, int varIndex, int targetValue, BiFunction<Integer, Integer, Boolean> targetFunction)
	{
		this.isVarbit = isVarbit;
		this.varIndex = varIndex;
		this.targetValue = targetValue;
		this.targetFunction = targetFunction;
	}

	public int setCurrentValue(Client client)
	{
		if (this.isVarbit == true)
			currentValue = client.getVarbitValue(this.varIndex);
		else
			currentValue = client.getVarpValue(this.varIndex);
		return currentValue;
	}

	public boolean isComplete()
	{
		return this.targetFunction.apply(currentValue, targetValue);
	}

	public String toString()
	{
		String varType = this.isVarbit ? "Varbit" : "Varplayer";
		return varType + " " + this.varIndex;
	}

	public static boolean isEqualTargetValue(int currentValue, int targetValue)
	{
		return currentValue == targetValue;
	}

	public static boolean isAtLeastTargetValue(int currentValue, int targetValue)
	{
		return currentValue >= targetValue;
	}

	public static boolean hasBitFlipped(int currentValue, int bitPosition)
	{
		return (currentValue & (1 << bitPosition)) != 0;
	}
}

/*
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import java.awt.Dimension;
import javax.swing.JPanel;
import net.runelite.client.ui.PluginPanel;

class FixedWidthPanel extends JPanel
{
	@Override
	public Dimension getPreferredSize()
	{
		return new Dimension(PluginPanel.PANEL_WIDTH, super.getPreferredSize().height);
	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class LostItemsTaskList extends TaskList
{

	public LostItemsTaskList()
	{
		super("Lost items");
		initTasks();
	}

	public void initTasks()
	{

		Task returnCoppersCollar = new Task.TaskBuilder()
			.name("Deliver Copper's crimson collar to Veos")
			.eqVar(true, Varbits.VEOS_COLLAR_PROGRESS.getId(), 2)
			.build();

		Task returnZealotsKey = new Task.TaskBuilder()
			.name("Deliver Zealot's key to Zealot")
			.eqVar(true, Varbits.ZEALOT_KEY.getId(), 0)
			.eqVar(false, Varplayers.HAUNTED_MINE_PROGRESS.getId(), 11)
			.build();

		Task returnMistagsBrooch = new Task.TaskBuilder()
			.name("Return the brooch to Mistag")
			.switchVar(true, Varbits.BROOCH_RETURNED_TO_MISTAG.getId())
			.build();

		add(returnCoppersCollar);
		add(returnZealotsKey);
		add(returnMistagsBrooch);
	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class TemporaryTaskList extends TaskList
{

	public TemporaryTaskList()
	{
		super("Other tasks");
		initTasks();
	}

	public void initTasks()
	{
		Task meetFairyAeryka = new Task.TaskBuilder()
			.name("Listen to Fairy Aeryka's Puro-Puro introduction")
			.switchVar(true, Varbits.MET_FAIRY_AERYKA.getId())
			.build();

		Task meetSilasDahcsnu = new Task.TaskBuilder()
			.name("Listen to Sil'as Dahcsnu's initial dialogue")
			.switchVar(true, Varbits.MET_SILAS_DAHCSNU.getId())
			.build();

		Task meetDampe = new Task.TaskBuilder()
			.name("Listen to Dampe explain shade coffins")
			.switchVar(true, Varbits.MET_DAMPE.getId())
			.build();

		Task meetDrunkenDwarf = new Task.TaskBuilder()
			.name("Listen to the Drunken Dwarf talk about his relative")
			.switchVar(true, Varbits.MET_DRUNKEN_DWARF.getId())
			.build();

		Task receiveThanksFromHamal = new Task.TaskBuilder()
			.name("Receive thanks from Hamal after completing Mountain Daughter")
			.switchVar(true, Varbits.RECEIVE_THANKS_FROM_HAMAL.getId())
			.build();

		Task buyCandleFromCandleSeller = new Task.TaskBuilder()
			.name("Buy a candle from the Candle Seller in Lumbridge Swamp and listen to his warning")
			.switchVar(true, Varbits.BOUGHT_CANDLE_FROM_CANDLE_SELLER.getId())
			.build();

		Task claimRagAndBoneManIIRewards = new Task.TaskBuilder()
			.name("Claim the Rams skull helm and Bonesack from the Odd old man")
			.switchVar(true, Varbits.CLAIMED_RAMS_SKULL_HELM.getId())
			.switchVar(true, Varbits.CLAIMED_BONESACK.getId())
			.build();

		Task zeahWorkbenchNails = new Task.TaskBuilder()
			.name("Loot the workbench containing iron nails at Gordon's farm")
			.switchVar(true, Varbits.ZEAH_WORKBENCH_NAILS.getId())
			.build();

		Task piscatorisTools = new Task.TaskBuilder()
			.name("Loot the bronze axe and pickaxe in the Piscatoris fishing colony")
			.switchVar(true, Varbits.PISCATORIS_BRONZE_PICKAXE.getId())
			.switchVar(true, Varbits.PISCATORIS_BRONZE_AXE.getId())
			.build();

		Task excavateStatue = new Task.TaskBuilder()
			.name("Unblock the statue leading to the Tunnel of Chaos")
			.switchVar(true, Varbits.EXCAVATED_STATUE_TO_TUNNEL_OF_CHAOS.getId())
			.build();

		Task unlockNPCContactLastContact = new Task.TaskBuilder()
			.name("Unlock the NPC Contact spell's previous contract option")
			.geVar(true, Varbits.LAST_NPC_CONTACT_CONTACT.getId(), 1)
			.build();

		add(meetFairyAeryka);
		add(meetSilasDahcsnu);
		add(meetDampe);
		add(meetDrunkenDwarf);
		add(receiveThanksFromHamal);
		add(buyCandleFromCandleSeller);
		add(claimRagAndBoneManIIRewards);
		add(zeahWorkbenchNails);
		add(piscatorisTools);
		add(excavateStatue);
		add(unlockNPCContactLastContact);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import java.util.ArrayList;
import lombok.Getter;
import com.andmcadams.taskchecker.Task;

public class TaskList
{

	@Getter
	private String name;

	@Getter
	private ArrayList<Task> tasks = new ArrayList<>();

	public TaskList(String name)
	{
		this.name = name;
	}

	public boolean add(Task task)
	{
		return tasks.add(task);
	}

}

package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class ChampionsChallengeTaskList extends TaskList
{

	public ChampionsChallengeTaskList()
	{
		super("Champions' Challenge");
		initTasks();
	}

	public void initTasks()
	{

		// Earth warrior, ghoul, hill giant, goblin, hobgoblin, imp, jogre, lesser demon, skeleton, zombie
		Task earthWarriorLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the earth warrior champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 0)
			.build();

		Task ghoulLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the ghoul champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 1)
			.build();

		Task giantLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the giant champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 2)
			.build();

		Task goblinLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the goblin champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 3)
			.build();

		Task hobgoblinLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the hobgoblin champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 4)
			.build();

		Task impLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the imp champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 5)
			.build();

		Task jogreLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the jogre champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 6)
			.build();

		Task lesserDemonLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the lesser demon champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 7)
			.build();

		Task skeletonLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the skeleton champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 8)
			.build();

		Task zombieLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the zombie champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 9)
			.build();

		Task humanLampUsed = new Task.TaskBuilder()
			.name("Use the champion's lamp of the human champion")
			.bitVar(true, Varbits.CHAMPIONS_CHALLENGE_LAMPS_BITMAP.getId(), 10)
			.build();

		add(earthWarriorLampUsed);
		add(ghoulLampUsed);
		add(giantLampUsed);
		add(goblinLampUsed);
		add(hobgoblinLampUsed);
		add(impLampUsed);
		add(jogreLampUsed);
		add(lesserDemonLampUsed);
		add(skeletonLampUsed);
		add(zombieLampUsed);
		add(humanLampUsed);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class HallowedSepulchreTaskList extends TaskList
{

	public HallowedSepulchreTaskList()
	{
		super("Hallowed Sepulchre");
		this.initTasks();
	}

	private void initTasks()
	{
		/**
		 * Hallowed Sepulchre
		 */
		// Squirrel metamorph?
		Task freeDarkmeyerSlave = new Task.TaskBuilder()
			.name("Give the Darkmeyer Slave 100 Hallowed Marks")
			.switchVar(true, Varbits.FREED_DARKMEYER_SLAVE.getId())
			.build();
		// Fastest run varb?

		Task freeKnightOfTheOwl = new Task.TaskBuilder()
			.name("Free the Knight of the Owl")
			.switchVar(true, Varbits.FREED_KNIGHT_OF_THE_OWL.getId())
			.build();

		Task freeKnightOfTheLion = new Task.TaskBuilder()
			.name("Free the Knight of the Lion")
			.switchVar(true, Varbits.FREED_KNIGHT_OF_THE_LION.getId())
			.build();

		Task freeKnightOfTheWolf = new Task.TaskBuilder()
			.name("Free the Knight of the Wolf")
			.switchVar(true, Varbits.FREED_KNIGHT_OF_THE_WOLF.getId())
			.build();

		Task freeKnightOfTheUnicorn = new Task.TaskBuilder()
			.name("Free the Knight of the Unicorn")
			.switchVar(true, Varbits.FREED_KNIGHT_OF_THE_UNICORN.getId())
			.build();

		Task freeArchpriestOfTheUnicorn = new Task.TaskBuilder()
			.name("Free the Archpriest of the Unicorn")
			.switchVar(true, Varbits.FREED_ARCHPRIEST_OF_THE_UNICORN.getId())
			.build();

		this.add(freeDarkmeyerSlave);
		this.add(freeKnightOfTheLion);
		this.add(freeKnightOfTheOwl);
		this.add(freeKnightOfTheUnicorn);
		this.add(freeKnightOfTheWolf);
		this.add(freeArchpriestOfTheUnicorn);

	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class TreasureTrailsTaskList extends TaskList
{

	public TreasureTrailsTaskList()
	{
		super("Treasure Trails");
		initTasks();
	}

	public void initTasks()
	{

		Task unlockExploreEmote = new Task.TaskBuilder()
			.name("Unlock the Explore emote")
			.geVar(false, Varplayers.BEGINNER_CASKETS_OPENED.getId(), 600)
			.build();

		Task unlockLargeSpade = new Task.TaskBuilder()
			.name("Unlock the Large spade")
			.geVar(true, Varbits.EASY_CASKETS_OPENED.getId(), 500)
			.build();

		Task unlockCluelessScroll = new Task.TaskBuilder()
			.name("Unlock the Clueless scroll")
			.geVar(true, Varbits.MEDIUM_CASKETS_OPENED.getId(), 400)
			.build();

		Task unlockUriTransformEmote = new Task.TaskBuilder()
			.name("Unlock the Uri transform emote")
			.geVar(true, Varbits.HARD_CASKETS_OPENED.getId(), 300)
			.build();

		Task unlockHeavyCasket = new Task.TaskBuilder()
			.name("Unlock the Heavy casket")
			.geVar(false, Varplayers.ELITE_CASKETS_OPENED.getId(), 200)
			.build();

		Task unlockScrollSack = new Task.TaskBuilder()
			.name("Unlock the Scroll sack")
			.geVar(false, Varplayers.MASTER_CASKETS_OPENED.getId(), 100)
			.build();

		this.add(unlockExploreEmote);
		this.add(unlockLargeSpade);
		this.add(unlockCluelessScroll);
		this.add(unlockUriTransformEmote);
		this.add(unlockHeavyCasket);
		this.add(unlockScrollSack);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class TrappedSoulsTaskList extends TaskList
{

	public TrappedSoulsTaskList()
	{
		super("Trapped souls and afflicted characters");
		initTasks();
	}

	public void initTasks()
	{
		Task freeKlenter = new Task.TaskBuilder()
			.name("Free Klenter's soul from Amascut's torment")
			.eqVar(true, Varbits.FREED_KLENTER.getId(), 0)
			.eqVar(true, Varbits.ICTHLARINS_LITTLE_HELPER_PROGRESS.getId(), 26)
			.build();

		Task freeDroalak = new Task.TaskBuilder()
			.name("Free Droalak's soul from his guilt of departure")
			.switchVar(true, Varbits.FREED_DROALAK.getId())
			.build();

		Task cureRazmireAndUlsquire = new Task.TaskBuilder()
			.name("Free Razmire Keelgan and Ulsquire Shauncy from affliction")
			.bitVar(false, Varplayers.MORTTON_STATE.getId(), 5)
			.bitVar(false, Varplayers.MORTTON_STATE.getId(), 6)
			.build();

		add(freeKlenter);
		add(freeDroalak);
		add(cureRazmireAndUlsquire);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class LootTaskList extends TaskList
{

	public LootTaskList()
	{
		super("Loot crates, chests, and miscellaneous items");
		initTasks();
	}

	public void initTasks()
	{

		// Search tasks
		Task openMarlosCrate = new Task.TaskBuilder()
			.name("Open Marlo's crate")
			.eqVar(true, Varbits.DADDYS_HOME_PROGRESS.getId(), 14)
			.build();

		// MORTON_TABLE - UNKNOWN
		Task searchMorttonTable = new Task.TaskBuilder()
			.name("Loot the smashed table containing herbs in Mort'ton")
			.bitVar(false, Varplayers.MORTTON_STATE.getId(), 8)
			.build();

		Task undergroundPassCrate = new Task.TaskBuilder()
			.name("Searched the crate in the Underground Pass")
			.switchVar(true, Varbits.UNDERGROUND_PASS_CRATE.getId())
			.build();

		Task elementalWorkshopCrate = new Task.TaskBuilder()
			.name("Searched the crate in the Elemental Workshop for leather")
			.switchVar(true, Varbits.ELEMENTAL_WORKSHOP_CRATE.getId())
			.build();

		Task meiyerditchLabRuneCase = new Task.TaskBuilder()
			.name("Searched the broken rune case in the Meiyerditch lab")
			.switchVar(true, Varbits.MEIYERDITCH_LABS_RUNE_CASE.getId())
			.build();

		Task canifisHideoutGarlic = new Task.TaskBuilder()
			.name("Searched the chest in the Canifis Myreque hideout for three garlic bulbs")
			.eqVar(true, Varbits.CANIFIS_HIDEOUT_GARLIC_COUNTER.getId(), 3)
			.build();

		Task klenterPyramidChest = new Task.TaskBuilder()
			.name("Searched the chest in Klenter's pyramid for 50 coins")
			.switchVar(true, Varbits.KLENTER_PYRAMID_COINS.getId())
			.build();

		Task enakhraSandstone = new Task.TaskBuilder()
			.name("Collected 5 sandstone from Enakhra's temple")
			.eqVar(true, Varbits.ENAKHRAS_TEMPLE_SANDSTONE_COUNTER.getId(), 5)
			.build();

		Task agrithNaarThrone = new Task.TaskBuilder()
			.name("Collected the gems from Agrith Naar's throne")
			.switchVar(true, Varbits.AGRITH_NAAR_THRONE.getId())
			.build();

		Task fenkenstrainClockLetter = new Task.TaskBuilder()
			.name("Searched the clock in Fenkenstrain's castle")
			.switchVar(true, Varbits.FENKENSTRAIN_CLOCK_LETTER.getId())
			.build();

		Task goblinVillageGoblinMail = new Task.TaskBuilder()
			.name("Loot the 3 pieces of goblin mail in the Goblin Village")
			.switchVar(true, Varbits.GOBLIN_MAIL_NORTH.getId())
			.switchVar(true, Varbits.GOBLIN_MAIL_WEST.getId())
			.switchVar(true, Varbits.GOBLIN_MAIL_UPSTAIRS.getId())
			.build();

		Task observatorySpiderChests = new Task.TaskBuilder()
			.name("Loot the 7 spider chests in the Observatory dungeon")
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_1.getId())
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_2.getId())
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_3.getId())
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_4.getId())
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_5.getId())
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_6.getId())
			.switchVar(true, Varbits.OBSERVATORY_SPIDER_CHEST_7.getId())
			.build();

		add(openMarlosCrate);
		add(searchMorttonTable);
		add(undergroundPassCrate);
		add(elementalWorkshopCrate);
		add(meiyerditchLabRuneCase);
		add(canifisHideoutGarlic);
		add(klenterPyramidChest);
		add(enakhraSandstone);
		add(agrithNaarThrone);
		add(fenkenstrainClockLetter);
		add(goblinVillageGoblinMail);
		add(observatorySpiderChests);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class UniqueDialoguePathsTaskList extends TaskList
{

	public UniqueDialoguePathsTaskList()
	{
		super("Unique dialogue paths");
		initTasks();
	}

	public void initTasks()
	{

		Task unlockRosie = new Task.TaskBuilder()
			.name("Unlocked Rosie")
			.switchVar(true, Varbits.UNLOCKED_ROSIE.getId())
			.build();

		Task getDirectionsFromBaraek = new Task.TaskBuilder()
			.name("Get directions from Baraek")
			.geVar(false, Varplayers.SOA_PHOENIX_GANG_PROGRESS.getId(), 4)
			.build();

		Task buyStaffFromEblis = new Task.TaskBuilder()
			.name("Pay Eblis for an ancient staff")
			.switchVar(true, Varbits.BOUGHT_STAFF_FROM_EBLIS.getId())
			.build();

		Task askBrundtAboutMtnCamp = new Task.TaskBuilder()
			.name("Asked Chieftain Brundt about the Mountain Camp")
			.switchVar(true, Varbits.ASKED_BRUNDT_ABOUT_MTN_CAMP.getId())
			.build();

		// Unsure about this one, but looks this way from chisel data
		Task talkToTrufitus = new Task.TaskBuilder()
			.name("Talk to Trufitus after completing Shilo Village")
			.eqVar(false, Varplayers.SHILO_VILLAGE_PROGRESS.getId(), 17)
			.build();

		// CAT - UNKNOWN
		Task listenToCatExplain = new Task.TaskBuilder()
			.name("Listen to your cat explain Icthlarin and the devourer again")
			.eqVar(true, Varbits.ASKED_CAT_ABOUT_DESTROYER.getId(), 3)
			.build();

		Task askDwarvenBoatmanAboutGold = new Task.TaskBuilder()
			.name("Asked the Dwarven Boatman about transporting gold")
			.switchVar(true, Varbits.ASKED_DWARVEN_BOATMAN_ABOUT_GOLD.getId())
			.build();

		Task tellThreeDwarves = new Task.TaskBuilder()
			.name("Tell the three dwarven boatmen about the dwarven quests")
			.switchVar(true, Varbits.TOLD_THREE_DWARVES_BETWEEN_A_ROCK.getId())
			.switchVar(true, Varbits.TOLD_THREE_DWARVES_GIANT_DWARF.getId())
			.switchVar(true, Varbits.TOLD_THREE_DWARVES_FORGETTABLE_TALE.getId())
			.build();

		// MIAZRQA - UNKNOWN

		Task askStreetUrchinToLureAgain = new Task.TaskBuilder()
			.name("Tell the Street urchin to lure another villager")
			.switchVar(true, Varbits.ASKED_STREET_URCHIN_TO_LURE_AGAIN.getId())
			.build();

		Task informKnightOfVarlamore = new Task.TaskBuilder()
			.name("Tell the Knight of Varlamore about the sun altar")
			.switchVar(true, Varbits.INFORMED_KNIGHT_OF_VARLAMORE.getId())
			.build();

		add(unlockRosie);
		add(getDirectionsFromBaraek);
		add(buyStaffFromEblis);
		add(askBrundtAboutMtnCamp);
		add(talkToTrufitus);
		add(listenToCatExplain);
		add(askDwarvenBoatmanAboutGold);
		add(tellThreeDwarves);
		add(askStreetUrchinToLureAgain);
		add(informKnightOfVarlamore);
	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class MotherlodeMineTaskList extends TaskList
{

	public MotherlodeMineTaskList()
	{
		super("Motherlode Mine");
		initTasks();
	}

	public void initTasks()
	{
//		Task getAccessToUpperMine = new Task.TaskBuilder()
//			.name("Pay Prospector Percy for access to the upper levels of the mine")
//			.switchVar(true, Varbits.PAID_FOR_UPPER_MINE.getId())
//			.build();

		Task upgradeSack = new Task.TaskBuilder()
			.name("Pay Prospector Percy for the bigger sack capacity")
			.switchVar(true, Varbits.UPGRADED_MLM_SACK.getId())
			.build();

//		this.add(getAccessToUpperMine);
		this.add(upgradeSack);

	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class EntrancesAndObstaclesTaskList extends TaskList
{

	public EntrancesAndObstaclesTaskList()
	{
		super("Entrances and Obstacles");
		initTasks();
	}

	public void initTasks()
	{

		Task unblockLumbridgeSwampCavesHole = new Task.TaskBuilder()
			.name("Unblock the hole leading to the Lumbridge Swamp Caves")
			.switchVar(true, Varbits.UNBLOCKED_LUMBRIDGE_SWAMP_CAVE_HOLE.getId())
			.build();

		Task unblockEagleTransport = new Task.TaskBuilder()
			.name("Unblock both obstructed eagle transport route entrances")
			.switchVar(true, Varbits.MOVED_BOULDER_TO_DESERT_EAGLE.getId())
			.eqVar(true, Varbits.VINE_TO_EAGLE_STATE.getId(), 3)
			.build();

		Task unblockKourendCatacombsEntrances = new Task.TaskBuilder()
			.name("Unblock all four additional entrances to the Kourend Catacombs")
			.switchVar(true, Varbits.UNLOCKED_HOSIDIUS_CATACOMBS_ENTRANCE.getId())
			.switchVar(true, Varbits.UNLOCKED_SHAYZIEN_CATACOMBS_ENTRANCE.getId())
			.switchVar(true, Varbits.UNLOCKED_ARCEUUS_CATACOMBS_ENTRANCE.getId())
			.switchVar(true, Varbits.UNLOCKED_LOVAKENGJ_CATACOMBS_ENTRANCE.getId())
			.build();

		Task unlockAccessToHarisArea = new Task.TaskBuilder()
			.name("Unlock access to Haris's resource area in Corsair Cove")
			.switchVar(true, Varbits.UNLOCKED_HARIS_RESOURCE_AREA.getId())
			.build();

		Task unblockKrukDungeonPassage = new Task.TaskBuilder()
			.name("Unlock the hidden passage to the entrance of Kruk's lair")
			.switchVar(true, Varbits.UNBLOCKED_KRUKS_LAIR_PASSAGE.getId())
			.build();

		Task unlockDoorToEodan = new Task.TaskBuilder()
			.name("Unlock the door to Eodan in the Forthos Dungeon")
			.switchVar(true, Varbits.UNLOCKED_CENTRAL_FORTHOS_DOOR.getId())
			.build();

		Task unlockForthosDungeonDoors = new Task.TaskBuilder()
			.name("Unlock both Temple Doors in the Forthos Dungeon")
			.switchVar(true, Varbits.UNLOCKED_EAST_FORTHOS_DOOR.getId())
			.switchVar(true, Varbits.UNLOCKED_WEST_FORTHOS_DOOR.getId())
			.build();

		Task unlockEnakhrasTempleEntrances = new Task.TaskBuilder()
			.name("Unlock all four secret entrances to Enakhra's Temple")
			.switchVar(true, Varbits.OPENED_ENAKHRAS_TEMPLE_NW_ENTRANCE.getId())
			.switchVar(true, Varbits.OPENED_ENAKHRAS_TEMPLE_NE_ENTRANCE.getId())
			.switchVar(true, Varbits.OPENED_ENAKHRAS_TEMPLE_SE_ENTRANCE.getId())
			.switchVar(true, Varbits.OPENED_ENAKHRAS_TEMPLE_SW_ENTRANCE.getId())
			.build();

		Task unlockEnakhrasTempleSigilDoors = new Task.TaskBuilder()
			.name("Unlock all four sigil-locked doors in Enakhra's Temple")
			.switchVar(true, Varbits.UNLOCKED_ENAKHRAS_TEMPLE_S_DOOR.getId())
			.switchVar(true, Varbits.UNLOCKED_ENAKHRAS_TEMPLE_W_DOOR.getId())
			.switchVar(true, Varbits.UNLOCKED_ENAKHRAS_TEMPLE_N_DOOR.getId())
			.switchVar(true, Varbits.UNLOCKED_ENAKHRAS_TEMPLE_E_DOOR.getId())
			.build();

		add(unblockLumbridgeSwampCavesHole);
		add(unblockEagleTransport);
		add(unblockKourendCatacombsEntrances);
		add(unlockAccessToHarisArea);
		add(unblockKrukDungeonPassage);
		add(unlockDoorToEodan);
		add(unlockForthosDungeonDoors);
		add(unlockEnakhrasTempleEntrances);
		add(unlockEnakhrasTempleSigilDoors);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class PaymentsAndInstantExperienceTaskList extends TaskList
{

	public PaymentsAndInstantExperienceTaskList()
	{
		super("Payments and Instant experience");
		initTasks();
	}

	public void initTasks()
	{

		Task observatoryQuestWineClaimed = new Task.TaskBuilder()
			.name("Claim wine from the Observatory assistant")
			.eqVar(false, Varplayers.OBSERVATORY_QUEST_PROGESS.getId(), 8)
			.build();

		Task cabinFeverRewardClaimed = new Task.TaskBuilder()
			.name("Claim coins from Bill Teach")
			.switchVar(true, Varbits.CABIN_FEVER_REWARD_CLAIMED.getId())
			.build();

		Task gettingAheadRewardClaimed = new Task.TaskBuilder()
			.name("Claim coins from Gordon")
			.switchVar(true, Varbits.GETTING_AHEAD_REWARD_CLAIMED.getId())
			.build();

		Task queenOfThievesRewardClaimed = new Task.TaskBuilder()
			.name("Claim coins from Lady Shauna Piscarillius")
			.switchVar(true, Varbits.QUEEN_OF_THIEVES_REWARD_CLAIMED.getId())
			.build();

		Task monkeyMadnessIIRewardClaimed = new Task.TaskBuilder()
			.name("Claim experience from Duke")
			.geVar(true, Varbits.MONKEY_MADNESS_II_PROGRESS.getId(), 200)
			.build();

		Task dragonSlayerIIRewardClaimed = new Task.TaskBuilder()
			.name("Claim experience from Ellen")
			.eqVar(true, Varbits.DRAGON_SLAYER_II_REWARD_CLAIMED.getId(), 4)
			.build();

		Task misthalinMysteryRewardClaimed = new Task.TaskBuilder()
			.name("Claim experience from Mandy")
			.switchVar(true, Varbits.MISTHALIN_MYSTERY_REWARD_CLAIMED.getId())
			.build();

		Task xMarksTheSpotClueScrollClaimed = new Task.TaskBuilder()
			.name("Claim a clue scroll (beginner) from Veos")
			.switchVar(true, Varbits.X_MARKS_THE_SPOT_CLUE_SCROLL_CLAIMED.getId())
			.build();

		Task theFeudBeerClaimedFromAli = new Task.TaskBuilder()
			.name("Claim a beer from Ali the Barman")
			.eqVar(true, Varbits.THE_FEUD_BEER_CLAIMED_FROM_ALI.getId(), 2)
			.build();

		add(observatoryQuestWineClaimed);
		add(cabinFeverRewardClaimed);
		add(gettingAheadRewardClaimed);
		add(queenOfThievesRewardClaimed);
		add(monkeyMadnessIIRewardClaimed);
		add(dragonSlayerIIRewardClaimed);
		add(misthalinMysteryRewardClaimed);
		add(xMarksTheSpotClueScrollClaimed);
		add(theFeudBeerClaimedFromAli);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class HiddenShopsTaskList extends TaskList
{

	public HiddenShopsTaskList()
	{
		super("Hidden shops and trading services");
		initTasks();
	}

	public void initTasks()
	{

		// Unsure of what the varp for uglug is

		Task unlockValiggaShop = new Task.TaskBuilder()
			.name("Unlock Vanligga Gastfrihet's shop, Contraband yak produce")
			.eqVar(true, Varbits.VANLIGGA_STATE.getId(), 2)
			.build();

		add(unlockValiggaShop);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class InvisibleTaskList extends TaskList
{

	public InvisibleTaskList()
	{
		super("No known effect in game");
		this.initTasks();
	}

	public void initTasks()
	{

		Task ancientLetter = new Task.TaskBuilder()
			.name("Loot the Ancient letter from the Forsaken Tower")
			.switchVar(true, Varbits.ANCIENT_LETTER_FORSAKEN_TOWER.getId())
			.build();

		Task tattyNote = new Task.TaskBuilder()
			.name("Loot the Tatty note from the bed in the Kebos Lowlands")
			.switchVar(true, Varbits.TATTY_NOTE_KEBOS_LOWLANDS.getId())
			.build();

		Task pickpocketTeddy = new Task.TaskBuilder()
			.name("Pickpocket Teddy from the female student in the Digsite")
			.switchVar(true, Varbits.PICKPOCKETED_TEDDY.getId())
			.build();

		// Note that this doesn't actually change dialogue as far as I can tell.
		Task askBlackKnightFortressGuardAboutUniform = new Task.TaskBuilder()
			.name("Ask a Fortress guard about their uniform outside the Black Knights' Fortress")
			.switchVar(true, Varbits.ASKED_ABOUT_GUARD_UNIFORM.getId())
			.build();

		Task exitThroughSecretExit = new Task.TaskBuilder()
			.name("Exit through the Troll Stronghold's secret exit")
			.switchVar(true, Varbits.EXITED_THROUGH_TROLL_STRONGHOLD_SECRET_EXIT.getId())
			.build();

		Task enterTheWilderness = new Task.TaskBuilder()
			.name("Enter the Wilderness 1000 times")
			.eqVar(true, Varbits.ENTERED_WILDERNESS_COUNTER.getId(), 1000)
			.build();

		add(ancientLetter);
		add(tattyNote);
		add(pickpocketTeddy);
		add(askBlackKnightFortressGuardAboutUniform);
		add(exitThroughSecretExit);
		add(enterTheWilderness);
	}
}
/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class TitheFarmTaskList extends TaskList
{
	public TitheFarmTaskList()
	{
		super("Tithe Farm");
		this.initTasks();
	}

	public void initTasks()
	{

		Task autoWeedUnlocked = new Task.TaskBuilder()
			.name("Unlocked Autoweed")
			.geVar(true, Varbits.AUTOWEED.getId(), 1)
			.build();

		Task bologaBlessingUnlocked = new Task.TaskBuilder()
			.name("Paid Bologa for the ability to purchase Bologa's blessings")
			.eqVar(true, Varbits.BOLOGA_STATE.getId(), 2)
			.build();

		this.add(autoWeedUnlocked);
		this.add(bologaBlessingUnlocked);

	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class ForgottenPrayerTaskList extends TaskList
{

	public ForgottenPrayerTaskList()
	{
		super("Forgotten Prayers");
		initTasks();
	}

	public void initTasks()
	{
		Task unlockRigour = new Task.TaskBuilder()
			.name("Unlock Rigour")
			.switchVar(true, Varbits.UNLOCKED_RIGOUR.getId())
			.build();

		Task unlockAugury = new Task.TaskBuilder()
			.name("Unlock Augury")
			.switchVar(true, Varbits.UNLOCKED_AUGURY.getId())
			.build();

		Task unlockPreserve = new Task.TaskBuilder()
			.name("Unlock Preserve")
			.switchVar(true, Varbits.UNLOCKED_PRESERVE.getId())
			.build();

		this.add(unlockPreserve);
		this.add(unlockRigour);
		this.add(unlockAugury);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.var.Var;

public class SlayerRewardsTaskList extends TaskList
{

	public SlayerRewardsTaskList()
	{
		super("Slayer Rewards");
		initTasks();
	}

	public void initTasks()
	{

		Task unlockGargoyleSmasher = new Task.TaskBuilder()
			.name("Unlock Gargoyle Smasher")
			.switchVar(true, Varbits.UNLOCKED_GARGOYLE_SMASHER.getId())
			.build();

		Task unlockSlugSalter = new Task.TaskBuilder()
			.name("Unlock Slug Salter")
			.switchVar(true, Varbits.UNLOCKED_SLUG_SALTER.getId())
			.build();

		Task unlockReptileFreezer = new Task.TaskBuilder()
			.name("Unlock Reptile Freezer")
			.switchVar(true, Varbits.UNLOCKED_REPTILE_FREEZER.getId())
			.build();

		Task unlockShroomSprayer = new Task.TaskBuilder()
			.name("Unlock 'Shroom Sprayer")
			.switchVar(true, Varbits.UNLOCKED_SHROOM_SPRAYER.getId())
			.build();

		Task unlockBroaderFletching = new Task.TaskBuilder()
			.name("Unlock Broader Fletching")
			.switchVar(true, Varbits.UNLOCKED_BROADER_FLETCHING.getId())
			.build();

		Task unlockMalevolentMasquerade = new Task.TaskBuilder()
			.name("Unlock Malevolent Masquerade")
			.switchVar(true, Varbits.UNLOCKED_MALEVOLENT_MASQUERADE.getId())
			.build();

		Task unlockRingBling = new Task.TaskBuilder()
			.name("Unlock Ring Bling")
			.switchVar(true, Varbits.UNLOCKED_RING_BLING.getId())
			.build();

		Task unlockBiggerAndBadder = new Task.TaskBuilder()
			.name("Unlock Bigger and Badder")
			.switchVar(true, Varbits.UNLOCKED_BIGGER_AND_BADDER.getId())
			.build();

		Task unlockKingBlackBonnet = new Task.TaskBuilder()
			.name("Unlock King Black Bonnet")
			.switchVar(true, Varbits.UNLOCKED_KING_BLACK_BONNET.getId())
			.build();

		Task unlockKalphiteKhat = new Task.TaskBuilder()
			.name("Unlock Kalphite Khat")
			.switchVar(true, Varbits.UNLOCKED_KALPHITE_KHAT.getId())
			.build();

		Task unlockUnholyHelmet = new Task.TaskBuilder()
			.name("Unlock Unholy Helmet")
			.switchVar(true, Varbits.UNLOCKED_UNHOLY_HELMET.getId())
			.build();

		Task unlockDarkMantle = new Task.TaskBuilder()
			.name("Unlock Dark Mantle")
			.switchVar(true, Varbits.UNLOCKED_DARK_MANTLE.getId())
			.build();

		Task unlockUndeadHead = new Task.TaskBuilder()
			.name("Unlock Undead Head")
			.switchVar(true, Varbits.UNLOCKED_UNDEAD_HEAD.getId())
			.build();

		Task unlockUseMoreHead = new Task.TaskBuilder()
			.name("Unlock Use More Head")
			.switchVar(true, Varbits.UNLOCKED_USE_MORE_HEAD.getId())
			.build();

		Task unlockDulyNoted = new Task.TaskBuilder()
			.name("Unlock Duly Noted")
			.switchVar(true, Varbits.UNLOCKED_DULY_NOTED.getId())
			.build();

		Task unlockStopTheWyvern = new Task.TaskBuilder()
			.name("Unlock Stop the Wyvern")
			.switchVar(true, Varbits.UNLOCKED_STOP_THE_WYVERN.getId())
			.build();

		Task unlockTwistedVision = new Task.TaskBuilder()
			.name("Unlock Twisted Vision")
			.switchVar(true, Varbits.UNLOCKED_TWISTED_VISION.getId())
			.build();

		add(unlockGargoyleSmasher);
		add(unlockSlugSalter);
		add(unlockReptileFreezer);
		add(unlockShroomSprayer);
		add(unlockBroaderFletching);
		add(unlockMalevolentMasquerade);
		add(unlockRingBling);
		add(unlockBiggerAndBadder);
		add(unlockKingBlackBonnet);
		add(unlockKalphiteKhat);
		add(unlockUnholyHelmet);
		add(unlockDarkMantle);
		add(unlockUndeadHead);
		add(unlockUseMoreHead);
		add(unlockDulyNoted);
		add(unlockStopTheWyvern);
		add(unlockTwistedVision);

	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class LovakengjMinecartNetworkTaskList extends TaskList
{

	public LovakengjMinecartNetworkTaskList()
	{
		super("Lovakengj Minecart Network");
		initTasks();
	}

	public void initTasks()
	{

		Task payMiriam = new Task.TaskBuilder()
			.name("Pay Miriam for free minecart rides")
			.eqVar(true, Varbits.PAID_MIRIAM_FOR_MINECART_USAGE.getId(), 2)
			.build();

		add(payMiriam);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class RedeemableQuestItemsTaskList extends TaskList
{

	public RedeemableQuestItemsTaskList()
	{
		super("Redeemable quest items");
		initTasks();
	}

	public void initTasks()
	{

		Task tradeDiaryOfHerbiFlax = new Task.TaskBuilder()
			.name("Trade the diary of Herbi Flax to the Apothecary")
			.bitVar(false, Varplayers.MORTTON_STATE.getId(), 30)
			.build();

		Task tradeWeissFireNotes = new Task.TaskBuilder()
			.name("Trade the Weiss fire notes to Burntmeat")
			.switchVar(true, Varbits.GAVE_WEISS_FIRE_NOTES_TO_BURNTMEAT.getId())
			.build();

		Task tradeBlackPrism = new Task.TaskBuilder()
			.name("Trade the black prism to Yanni Salika or Zavistic Rarve")
			.switchVar(true, Varbits.GAVE_BLACK_PRISM_AWAY.getId())
			.build();

		add(tradeDiaryOfHerbiFlax);
		add(tradeWeissFireNotes);
		add(tradeBlackPrism);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;
import com.andmcadams.taskchecker.Varplayers;

public class RightClickTaskList extends TaskList
{

	public RightClickTaskList()
	{
		super("Right click menu options");
		initTasks();
	}

	public void initTasks()
	{
		Task unlockJarvaldTravel = new Task.TaskBuilder()
			.name("Unlock Jarvald's travel option")
			.switchVar(true, Varbits.UNLOCKED_JARVALD_TRAVEL.getId())
			.build();

		Task unlockMaryTan = new Task.TaskBuilder()
			.name("Unlock Mary's trade option")
			.switchVar(true, Varbits.UNLOCKED_MARY_TANNING.getId())
			.build();

		Task unlockIlfeenEnchant = new Task.TaskBuilder()
			.name("Unlock Ilfeen's enchant option")
			.switchVar(true, Varbits.UNLOCKED_ILFEEN_ENCHANT.getId())
			.build();

		Task unlockConwennaAndReeseSing = new Task.TaskBuilder()
			.name("Unlock Conwenna and Reese's sing option")
			.switchVar(true, Varbits.UNLOCKED_CONWENNA_AND_REESE_SING.getId())
			.build();

		Task unlockNorannaConvertShards = new Task.TaskBuilder()
			.name("Unlock Noranna Tytanin's convert-shards option")
			.switchVar(true, Varbits.UNLOCKED_NORANNA_CONVERT_SHARDS.getId())
			.build();

		Task unlockMountainGuideTravel = new Task.TaskBuilder()
			.name("Unlock the Mountain Guide's travel option")
			.switchVar(true, Varbits.UNLOCKED_MOUNTAIN_GUIDE_TRAVEL.getId())
			.build();

		Task unlockCloisterBellQuickStart = new Task.TaskBuilder()
			.name("Unlock the Cloister Bell's quick-start option")
			.geVar(false, Varplayers.GROTESQUE_GUARDIANS_KILLCOUNT.getId(), 5)
			.build();


		Task unlockJewelleryBoxLastTeleport = new Task.TaskBuilder()
			.name("Unlock the Jewellery Box's previous teleport option")
			.geVar(true, Varbits.LAST_JEWELLERY_BOX_TELEPORT.getId(), 1)
			.build();

		Task unlockCharterShipLastDestination = new Task.TaskBuilder()
			.name("Unlock the Charter Ship's previous destination option")
			.geVar(true, Varbits.LAST_CHARTER_SHIP_DESTINATION.getId(), 1)
			.build();

		add(unlockJarvaldTravel);
		add(unlockMaryTan);
		add(unlockIlfeenEnchant);
		add(unlockConwennaAndReeseSing);
		add(unlockNorannaConvertShards);
		add(unlockMountainGuideTravel);
		add(unlockCloisterBellQuickStart);
		add(unlockJewelleryBoxLastTeleport);
		add(unlockCharterShipLastDestination);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class UtilityItemTaskList extends TaskList
{

	public UtilityItemTaskList()
	{
		super("Utility items");
		initTasks();
	}

	public void initTasks()
	{

		Task attachKalphiteRopes = new Task.TaskBuilder()
			.name("Attach ropes to both Kalphite Hives tunnel entrances (you may need to enter the Kalphite Hive)")
			.switchVar(true, Varbits.KALPHITE_LAIR_OUTSIDE_ROPE.getId())
			.geVar(true, Varbits.KALPHITE_LAIR_INSIDE_ROPE.getId(), 1)
			.build();

		Task attachObservatoryGrapple = new Task.TaskBuilder()
			.name("Attach a grapple to the rocks next to the Observatory")
			.switchVar(true, Varbits.OBSERVATORY_GRAPPLE.getId())
			.build();

		Task attachDarkmeyerRopes = new Task.TaskBuilder()
			.name("Attach both long ropes to both sides of the Darkmeyer wall")
			.switchVar(true, Varbits.DARKMEYER_WEST_ROPE.getId())
			.switchVar(true, Varbits.DARKMEYER_EAST_ROPE.getId())
			.build();

		add(attachKalphiteRopes);
		add(attachObservatoryGrapple);
		add(attachDarkmeyerRopes);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class DoomsayerToggleTaskList extends TaskList
{

	public DoomsayerToggleTaskList()
	{
		super("Doomsayer Toggles");
		initTasks();
	}

	public void initTasks()
	{

		Task unlockAllWarningToggles = new Task.TaskBuilder()
			.name("Unlock all Doomsayer warning toggles")
			.geVar(true, Varbits.WARNING_DKS_LADDER.getId(), 6)
			.geVar(true, Varbits.WARNING_CONTACT_DUNGEON_LADDER.getId(), 6)
			.geVar(true, Varbits.WARNING_FALADOR_MOLE_LAIR.getId(), 6)
			.geVar(true, Varbits.WARNING_STRONGHOLD_OF_SECURITY_LADDERS.getId(), 6)
			.geVar(true, Varbits.WARNING_PLAYER_OWNED_HOUSES.getId(), 6)
			.geVar(true, Varbits.WARNING_DROPPED_ITEMS_IN_RANDOM_EVENTS.getId(), 6)
			.geVar(true, Varbits.WARNING_WILDERNESS_DITCH.getId(), 6)
			.geVar(true, Varbits.WARNING_TROLLHEIM_WILDERNESS_ENTRANCE.getId(), 6)
			.geVar(true, Varbits.WARNING_OBSERVATORY_STAIRS.getId(), 6)
			.geVar(true, Varbits.WARNING_SHANTAY_PASS.getId(), 6)
			.geVar(true, Varbits.WARNING_ICY_PATH_AREA.getId(), 6)
			.geVar(true, Varbits.WARNING_WATCHTOWER_SHAMAN_CAVE.getId(), 6)
			.geVar(true, Varbits.WARNING_LUMBRIDGE_SWAMP_CAVE_ROPE.getId(), 6)
			.geVar(true, Varbits.WARNING_HAM_TUNNEL_FROM_MILL.getId(), 6)
			.geVar(true, Varbits.WARNING_FAIRY_RING_TO_DORGESH.getId(), 6)
			.geVar(true, Varbits.WARNING_LUMBRIDGE_CELLAR.getId(), 6)
			.geVar(true, Varbits.WARNING_ELID_GENIE_CAVE.getId(), 6)
			.geVar(true, Varbits.WARNING_DORGESH_TUNNEL_TO_KALPHITES.getId(), 6)
			.geVar(true, Varbits.WARNING_DORGESH_CITY_EXIT.getId(), 6)
			.geVar(true, Varbits.WARNING_MORT_MYRE.getId(), 6)
			.geVar(true, Varbits.WARNING_RANGING_GUILD_TOWER.getId(), 6)
			.geVar(true, Varbits.WARNING_DEATH_PLATEAU.getId(), 6)
			.geVar(true, Varbits.WARNING_GWD_WILDERNESS_AGILITY_ROUTE.getId(), 6)
			.build();

		add(unlockAllWarningToggles);
	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class UnlimitedServicesTaskList extends TaskList
{

	public UnlimitedServicesTaskList()
	{
		super("Unlimited services");
		initTasks();
	}

	public void initTasks()
	{

		Task enhanceCamulet = new Task.TaskBuilder()
			.name("Enhance the Camulet for one million coins")
			.eqVar(true, Varbits.CAMULET_CHARGES.getId(), 7)
			.build();

		Task paySaniboch = new Task.TaskBuilder()
			.name("Pay Saniboch one million coins for permanent access to Brimhaven dungeon")
			.switchVar(true, Varbits.PERMANENT_ACCESS_BRIMHAVEN_DUNGEON.getId())
			.build();

		Task payAndras = new Task.TaskBuilder()
			.name("Pay Andras for free trips to Slepe")
			.switchVar(true, Varbits.PERMANENT_PAYMENT_SLEPE_BOAT.getId())
			.build();

		add(enhanceCamulet);
		add(paySaniboch);
		add(payAndras);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker.tasklist;

import com.andmcadams.taskchecker.Task;
import com.andmcadams.taskchecker.Varbits;

public class FirePitsTaskList extends TaskList
{

	public FirePitsTaskList()
	{
		super("Fire pits");
		initTasks();
	}

	public void initTasks()
	{

		Task moleHolePit = new Task.TaskBuilder()
			.name("Build the fire pit in the Mole Hole")
			.switchVar(true, Varbits.MOLE_HOLE_FIRE_PIT.getId())
			.build();

		Task lumbridgeSwampCavesPit = new Task.TaskBuilder()
			.name("Build the fire pit in the Lumbridge Swamp Caves")
			.switchVar(true, Varbits.LUMBRIDGE_SWAMP_CAVES_FIRE_PIT.getId())
			.build();

		Task mosLeHarmlessCavePit = new Task.TaskBuilder()
			.name("Build the fire pit in the Mos Le'Harmless Cave")
			.switchVar(true, Varbits.MOS_LE_HARMLESS_CAVE_FIRE_PIT.getId())
			.build();

		Task mortMyrePit = new Task.TaskBuilder()
			.name("Build the fire pit in the Mort Myre Swamp")
			.switchVar(true, Varbits.MORT_MYRE_SWAMP_FIRE_PIT.getId())
			.build();

		Task weissHerbPatchPit = new Task.TaskBuilder()
			.name("Build the fire pit near the Weiss herb patch")
			.geVar(true, Varbits.MAKING_FRIENDS_WITH_MY_ARM_PROGRESS.getId(), 205)
			.build();

		Task gwdEntrancePit = new Task.TaskBuilder()
			.name("Build the fire pit by the God Wars Dungeon entrance")
			.switchVar(true, Varbits.GWD_ENTRANCE_FIRE_PIT.getId())
			.build();

		add(moleHolePit);
		add(lumbridgeSwampCavesPit);
		add(mosLeHarmlessCavePit);
		add(mortMyrePit);
		add(weissHerbPatchPit);
		add(gwdEntrancePit);
	}

}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import com.andmcadams.taskchecker.tasklist.TaskList;

@Slf4j
@PluginDescriptor(
	name = "Task Checker"
)
public class TaskCheckerPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private ClientToolbar clientToolbar;

	private CompleteTaskList tasks;
	private TaskCheckerPanel taskCheckerPanel;
	private NavigationButton navButton;
	private ArrayList<TaskList> tasksCopy;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Task Checker started!");
		tasks = new CompleteTaskList();
		tasksCopy = tasks.getTaskLists();
		taskCheckerPanel = new TaskCheckerPanel(this, tasksCopy);

		final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), "/task_icon.png");
		navButton = NavigationButton.builder().tooltip("Task Checker").icon(icon).priority(7).panel(taskCheckerPanel).build();
		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Task Checker stopped!");
		clientToolbar.removeNavigation(navButton);
	}

	public void checkTasks()
	{
		clientThread.invoke(() -> {
			for (TaskList taskList : tasksCopy)
				for (Task task : taskList.getTasks())
					task.setCurrentValues(client);
			SwingUtilities.invokeLater(() -> taskCheckerPanel.refresh());
		});
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.border.EmptyBorder;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;

public class TaskListHeaderPanel extends JPanel
{

	public TaskListHeaderPanel(String name)
	{
		super();

		setLayout(new DynamicGridLayout(1, 1, 0, 0));
		setBorder(new EmptyBorder(5, 5, 5, 5));

		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		JTextPane nameLabel = new JTextPane();
		StyledDocument doc = nameLabel.getStyledDocument();
		SimpleAttributeSet center = new SimpleAttributeSet();
		StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
		doc.setParagraphAttributes(0, doc.getLength(), center, false);
		nameLabel.setEditable(false);
		nameLabel.setOpaque(false);
		nameLabel.setFocusable(false);
		nameLabel.setBorder(new EmptyBorder(5, 10, 5, 10));

		nameLabel.setText(name);
		add(nameLabel);
	}
}

/*
 * Copyright (c) 2021, Andrew McAdams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.taskchecker;

import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.PluginPanel;
import com.andmcadams.taskchecker.tasklist.TaskList;

@Slf4j
public class TaskCheckerPanel extends PluginPanel
{

	TaskCheckerPlugin taskCheckerPlugin;
	ArrayList<TaskPanel> taskPanelList = new ArrayList<>();

	private JScrollPane scrollPane;

	public TaskCheckerPanel(TaskCheckerPlugin taskCheckerPlugin, ArrayList<TaskList> taskLists)
	{
		super(false);

		this.taskCheckerPlugin = taskCheckerPlugin;

		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setLayout(new BorderLayout());

		// Create the container for the title and refresh task button
		JPanel topContainer = new JPanel();
		topContainer.setLayout(new BorderLayout());

		JPanel titlePanel = new JPanel();
		titlePanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		titlePanel.setLayout(new BorderLayout());

		JLabel title = new JLabel();
		title.setText("Task Checker");
		title.setForeground(Color.WHITE);
		titlePanel.add(title, BorderLayout.WEST);
		topContainer.add(titlePanel, BorderLayout.NORTH);

		JButton calculateTasksButton = new JButton("Check tasks");
		calculateTasksButton.setBorder(new EmptyBorder(10, 10, 10, 10));
		calculateTasksButton.setLayout(new BorderLayout());
		calculateTasksButton.addActionListener((event) -> this.checkTasks());
		topContainer.add(calculateTasksButton, BorderLayout.SOUTH);

		add(topContainer, BorderLayout.NORTH);

		// Create the task list panel
		FixedWidthPanel taskListPanel = new FixedWidthPanel();
		taskListPanel.setLayout(new DynamicGridLayout(0, 1, 0, 2));

		for (TaskList taskList : taskLists)
		{
			addTaskListHeader(taskListPanel, taskList.getName());
			for (Task task : taskList.getTasks())
			{
				addTask(taskListPanel, task);
			}
		}

		scrollPane = new JScrollPane(taskListPanel);
		scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.setBorder(new EmptyBorder(2, 2, 2, 2));
		scrollPane.setBackground(ColorScheme.DARK_GRAY_COLOR);

		add(scrollPane, BorderLayout.CENTER);

	}

	public void addTaskListHeader(JPanel taskListPanel, String name)
	{
		TaskListHeaderPanel taskListHeaderPanel = new TaskListHeaderPanel(name);
		taskListPanel.add(taskListHeaderPanel);
	}

	public void addTask(JPanel taskListPanel, Task task)
	{
		TaskPanel taskPanel = new TaskPanel(task);
		taskPanelList.add(taskPanel);
		taskListPanel.add(taskPanel);
	}

	public void checkTasks()
	{
		this.taskCheckerPlugin.checkTasks();
	}

	public void refresh()
	{

		for (TaskPanel taskPanel : taskPanelList)
		{
			taskPanel.updateCompletion();
		}

		repaint();
		revalidate();
	}
}

