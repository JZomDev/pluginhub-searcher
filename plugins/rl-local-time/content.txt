package com.localtime;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LocalTimeTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LocalTimePlugin.class);
		RuneLite.main(args);
	}
}
package com.localtime;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class LocalTimeOverlay extends Overlay {

    private final LocalTimeConfig config;
    private String timeFormat;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    public LocalTimeOverlay(LocalTimeConfig config) {
        setResizable(true);
        setPreferredPosition(OverlayPosition.TOP_RIGHT);
        setSnappable(true);

        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        ZonedDateTime currentTime = ZonedDateTime.now();
        // This needs improving. Don't do this on every render!
        this.timeFormat = config.use24Hr() ? "HH:mm" : "h:mm";
        if (config.showSeconds()) {
            this.timeFormat += ":ss";
        }
        String formattedTime = currentTime.format(DateTimeFormatter.ofPattern(this.timeFormat));

        panelComponent.getChildren().clear();
        panelComponent.setPreferredSize(new Dimension(
                graphics.getFontMetrics().stringWidth(formattedTime) + 8,
                0
        ));
        panelComponent.getChildren().add(
                LineComponent
                        .builder()
                        .left(formattedTime)
                        .build()
        );

        return panelComponent.render(graphics);
    }
}

package com.localtime;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Local Time"
)
public class LocalTimePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private LocalTimeConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private LocalTimeOverlay localTimeOverlay;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(localTimeOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(localTimeOverlay);
	}

	@Subscribe
	public void onConfigChanged( ConfigChanged event )
	{
		if ( event.getGroup().equals( "rl-local-time" ) )
		{
//			overlayManager.remove(localTimeOverlay);
//			overlayManager.add(new LocalTimeOverlay(config));
		}
	}

	@Provides
	LocalTimeConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LocalTimeConfig.class);
	}
}

package com.localtime;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("rl-local-time")
public interface LocalTimeConfig extends Config
{
	@ConfigItem(
		keyName = "rl-local-time-showseconds",
		name = "Show Seconds",
		description = "Toggles whether or not the time should display seconds or just HH:MM"
	)
	default boolean showSeconds()
	{
		return true;
	}

	@ConfigItem(
			keyName = "rl-local-time-24hr",
			name = "Use 24hr time?",
			description = "Toggles whether or not the time should display in 24 hrs or 12hrs"
	)
	default boolean use24Hr()
	{
		return true;
	}
}

