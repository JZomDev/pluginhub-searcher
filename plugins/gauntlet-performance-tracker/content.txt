package com.gauntletperformancetracker;

import lombok.Setter;
import net.runelite.api.Client;

import javax.inject.Inject;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

import static net.runelite.client.RuneLite.RUNELITE_DIR;

public class GauntletPerformanceTrackerWriter {

    @Inject
    private Client client;
    @Setter
    private String username;

    @Inject
    private GauntletPerformanceTrackerConfig config;

    @Inject
    private JsonUtils jsonUtils;

    @Inject
    public GauntletPerformanceTrackerWriter() {

    }

    private static final File TRACKER_DIR = new File(RUNELITE_DIR, "gauntletPerformanceTracker");
    private static final File DATA_DIR = new File(TRACKER_DIR, "data");
    private static final String FILE_PREFIX = "gauntletTracker";

    private String getDataFilePath(String fileName) {
        username = client.getLocalPlayer().getName();
        File directory = new File(DATA_DIR + File.separator + username);
        directory.mkdirs();
        return directory + File.separator + fileName;
    }

    public String getTrackerFilePath() {
        Date currentDate = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm");
        String formattedDate = dateFormat.format(currentDate);
        String fileName = FILE_PREFIX + "-" + username + "-" + formattedDate + ".json";
        return getDataFilePath(fileName);
    }

    public void writePerformanceToFile(PerformanceStatistics performanceStatistics) {
        if (!config.saveResultsToFile())
            return;

        jsonUtils.writeJsonFile(getTrackerFilePath(), performanceStatistics, new PerformanceTrackerSerializer());

    }
}

package com.gauntletperformancetracker;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import java.lang.reflect.Type;

public class PerformanceTrackerSerializer implements JsonSerializer<PerformanceStatistics> {
    private static final String TRACKER_TOTAL_TICKS_KEY = "totalTicks";
    private static final String TRACKER_LOST_TICKS_KEY = "lostTicks";
    private static final String TRACKER_USED_TICKS_KEY = "usedTicks";
    private static final String TRACKER_PLAYER_ATTACKS_KEY = "playerAttacks";
    private static final String TRACKER_WRONG_OFF_PRAYER_KEY = "wrongOffensivePrayer";
    private static final String TRACKER_WRONG_STYLE_KEY = "wrongAttackStyle";
    private static final String TRACKER_HUNLLEF_ATTACKS_KEY = "hunllefAttacks";
    private static final String TRACKER_WRONG_DEF_PRAYER_KEY = "wrongDefensivePrayer";
    private static final String TRACKER_HUNLLEF_STOMPS_KEY = "hunleffStomps";
    private static final String TRACKER_TORNADO_HITS_KEY = "tornadoHits";
    private static final String TRACKER_FLOOR_TILE_HITS_KEY = "floorTileHits";
    private static final String TRACKER_DAMAGE_TAKEN_KEY = "damageTaken";
    private static final String TRACKER_DPS_TAKEN_KEY = "dpsTaken";
    private static final String TRACKER_DPS_GIVEN_KEY = "dpsGiven";


    @Override
    public JsonElement serialize(PerformanceStatistics performanceStatistics, Type type, JsonSerializationContext context) {
        JsonObject trackerJson = new JsonObject();
        trackerJson.addProperty(TRACKER_TOTAL_TICKS_KEY, performanceStatistics.totalTicksCounter);
        trackerJson.addProperty(TRACKER_LOST_TICKS_KEY, performanceStatistics.missedTicksCounter);
        trackerJson.addProperty(TRACKER_USED_TICKS_KEY, String.format("%.2f", (1f - (float) performanceStatistics.missedTicksCounter / performanceStatistics.totalTicksCounter) * 100f) + "%");
        trackerJson.addProperty(TRACKER_PLAYER_ATTACKS_KEY, performanceStatistics.playerAttackCount);
        trackerJson.addProperty(TRACKER_WRONG_OFF_PRAYER_KEY, performanceStatistics.wrongOffensivePrayerCount);
        trackerJson.addProperty(TRACKER_WRONG_STYLE_KEY, performanceStatistics.wrongAttackStyleCount);
        trackerJson.addProperty(TRACKER_HUNLLEF_ATTACKS_KEY, performanceStatistics.hunllefAttackCount);
        trackerJson.addProperty(TRACKER_WRONG_DEF_PRAYER_KEY, performanceStatistics.wrongDefensivePrayerCount);
        trackerJson.addProperty(TRACKER_HUNLLEF_STOMPS_KEY, performanceStatistics.hunllefStompAttackCount);
        trackerJson.addProperty(TRACKER_TORNADO_HITS_KEY, performanceStatistics.tornadoHits);
        trackerJson.addProperty(TRACKER_FLOOR_TILE_HITS_KEY, performanceStatistics.floorTileHits);
        trackerJson.addProperty(TRACKER_DAMAGE_TAKEN_KEY, performanceStatistics.receivedDamage);
        trackerJson.addProperty(TRACKER_DPS_TAKEN_KEY, getDps(performanceStatistics.totalTicksCounter, performanceStatistics.receivedDamage));
        trackerJson.addProperty(TRACKER_DPS_GIVEN_KEY, getDps(performanceStatistics.totalTicksCounter, performanceStatistics.givenDamage));

        return trackerJson;
    }

    public float getDps(int totalTicks, int totalDamage) {
        return totalDamage / (totalTicks * 0.6f);
    }
}

package com.gauntletperformancetracker;

public enum TickLossState {
    NONE,
    POTENTIAL,
    LOSING
}

package com.gauntletperformancetracker;

public class PerformanceStatistics {
    public int missedTicksCounter = 0;
    public int totalTicksCounter = 0;
    public int playerAttackCount = 0;
    public int wrongAttackStyleCount = 0;
    public int wrongOffensivePrayerCount = 0;
    public int wrongDefensivePrayerCount = 0;
    public int hunllefAttackCount = 0;
    public int hunllefStompAttackCount = 0;
    public int receivedDamage = 0;
    public int givenDamage = 0;
    public int tornadoHits = 0;
    public int floorTileHits = 0;

    public PerformanceStatistics() {
    }
}
package com.gauntletperformancetracker;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonParser;
import com.google.gson.JsonSerializer;
import com.google.inject.Inject;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Singleton
public class JsonUtils
{
    @Inject
    Gson gson;

    private boolean writeFile(String filePath, String contents)
    {
        try
        {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
            writer.write(contents);
            writer.close();
            return true;
        }
        catch (IOException e)
        {
            log.error("Unable to write JSON file at path: " + filePath + "\n" + e.getMessage());
        }

        return false;
    }

    public <T, S extends JsonSerializer<T>> boolean writeJsonFile(String filePath, T data, S serializer)
    {
        String contents = gson.newBuilder()
                .registerTypeAdapter(data.getClass(), serializer)
                .setPrettyPrinting()
                .create()
                .toJson(data);

        return writeFile(filePath, contents);
    }
}

package com.gauntletperformancetracker;

import lombok.AllArgsConstructor;
import net.runelite.api.Item;

/**
 * Data class that tracks all info related to a menu click action
 */
@AllArgsConstructor
public class ItemMenuAction
{
    public Item[] oldInventory;

    static class ItemAction extends ItemMenuAction
    {
        public final int itemID;
        public final int slot;

        ItemAction(final Item[] oldInventory, final int itemID, final int slot)
        {
            super(oldInventory);
            this.itemID = itemID;
            this.slot = slot;
        }
    }
}

package com.gauntletperformancetracker;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import java.util.*;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Gauntlet Performance Tracker"
)
public class GauntletPerformanceTrackerPlugin extends Plugin
{
	// Var bits
	private static final int GauntletBossStartVarBit = 9177;
	private static final int GauntletMazeVarBit = 9178;

	// Animation Ids
	private static  final int playerMageAttackId = 1167;
	private static  final int playerRangeAttackId = 426;
	private static  final int playerMeleeAttackId = 428;
	private static  final int playerMeleeAltAttackId = 440;
	private static  final int playerSceptreAttackId = 401;
	private static  final int playerKickAttackId = 423;
	private static  final int playerPunchAttackId = 422;
	private static final int[] playerAttackAnimationIds =
		{
			playerMageAttackId,
			playerMeleeAttackId,
			playerRangeAttackId,
			playerKickAttackId,
			playerPunchAttackId,
			playerMeleeAltAttackId,
			playerSceptreAttackId
		};

	private static  final int bossAttackAnimationId = 8419;
	private static  final int bossStompAnimationId = 8420;
	private static  final int bossSwitchToMageAnimationId = 8754;
	private static  final int bossSwitchToRangeAnimationId = 8755;

	// Item Ids
	private static  final int normalFoodId = 23874;
	private static  final int crystalFoodId = 25960;
	private static  final int corruptedFoodId = 25958;

	// Timings
	private static  final int weaponAttackSpeed = 4;
	private static  final int sceptreAttackSpeed = 5;
	private static  final int normalFoodDelay = 3;
	private static  final int fastFoodDelay = 2;

	// Region ids
	private static final int REGION_ID_GAUNTLET_LOBBY = 12127;

	// Ground object ids
	private static final int DAMAGE_TILE_ID = 36048;

	// Entity ids
	private static final List<Integer> HUNLLEF_IDS = List.of(
			NpcID.CRYSTALLINE_HUNLLEF,
			NpcID.CRYSTALLINE_HUNLLEF_9022,
			NpcID.CRYSTALLINE_HUNLLEF_9023,
			NpcID.CRYSTALLINE_HUNLLEF_9024,
			NpcID.CORRUPTED_HUNLLEF,
			NpcID.CORRUPTED_HUNLLEF_9036,
			NpcID.CORRUPTED_HUNLLEF_9037,
			NpcID.CORRUPTED_HUNLLEF_9038);
	private static final List<Integer> TORNADO_IDS = List.of(NullNpcID.NULL_9025, NullNpcID.NULL_9039);

	public final PerformanceStatistics performanceStatistics = new PerformanceStatistics();

	private final Pattern eatPattern = Pattern.compile("^eat");

	@Inject
	private Client client;

	@Inject
	private GauntletPerformanceTrackerConfig config;

	@Inject
	private GauntletPerformanceTrackerWriter writer;

	@Inject
	private ClientThread clientThread;

	@Inject
	private GauntletPerformanceTrackerOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	public boolean isBossActive = false;
	public boolean isInGauntletLobby = false;
	public boolean isInGauntlet = false; // Doesn't include lobby
	public TickLossState tickLossState;
	private int previousAttackTick;
	private int currentWeaponAttackSpeed;
	private NPC hunllef;
	private final List<NPC> tornadoes = new ArrayList<>();
	private boolean isHunllefMaging = false;
	private final ArrayDeque<ItemMenuAction> actionStack = new ArrayDeque<>();

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	public float getDps(int totalDamage)
	{
		return totalDamage / (performanceStatistics.totalTicksCounter * 0.6f);
	}

	@Subscribe
	void onVarbitChanged(final VarbitChanged event)
	{
		final int varbit = event.getVarbitId();

		if (varbit == GauntletBossStartVarBit)
		{
			if (event.getValue() == 1)
			{
				isBossActive = true;
				ResetEncounterData();
			}
			else
			{
				isBossActive = false;
				tornadoes.clear();
				hunllef = null;
				writer.writePerformanceToFile(performanceStatistics);
			}
		}
		else if (varbit == GauntletMazeVarBit)
		{
			if (event.getValue() == 1)
			{
				isInGauntlet = true;
			}
			else
			{
				isInGauntlet = false;
			}
		}
	}

	private void ResetEncounterData()
	{
		performanceStatistics.missedTicksCounter = 0;
		performanceStatistics.totalTicksCounter = 0;
		performanceStatistics.playerAttackCount = 0;
		performanceStatistics.wrongAttackStyleCount = 0;
		performanceStatistics.wrongOffensivePrayerCount = 0;
		performanceStatistics.wrongDefensivePrayerCount = 0;
		performanceStatistics.hunllefAttackCount = 0;
		performanceStatistics.hunllefStompAttackCount = 0;
		performanceStatistics.receivedDamage = 0;
		performanceStatistics.givenDamage = 0;
		performanceStatistics.tornadoHits = 0;
		performanceStatistics.floorTileHits = 0;
		tickLossState = TickLossState.NONE;

		isHunllefMaging = false;
		previousAttackTick = client.getTickCount(); // This gives 4 ticks leeway at the start of the fight
		currentWeaponAttackSpeed = weaponAttackSpeed;
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		isInGauntletLobby = isInTheGauntletLobby();

		if (!isBossActive)
			return;

		performanceStatistics.totalTicksCounter++;

		int currentTickCount = client.getTickCount();
		int tickDifference = currentTickCount - previousAttackTick;
		if (tickDifference >= currentWeaponAttackSpeed + normalFoodDelay)
		{
			tickLossState = TickLossState.LOSING;
		}
		else if (tickDifference >= currentWeaponAttackSpeed)
		{
			// Means we are potentially losing ticks unless we eat
			tickLossState = TickLossState.POTENTIAL;
		}
		else
		{
			tickLossState = TickLossState.NONE;
		}

		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		for (NPC tornado : tornadoes)
		{
			if (playerLocation.equals(tornado.getWorldLocation()))
			{
				performanceStatistics.tornadoHits++;
			}
		}

		var scene = client.getWorldView(client.getLocalPlayer().getLocalLocation().getWorldView()).getScene();
		var tiles = scene.getTiles();
		int tileX = playerLocation.getX() - scene.getBaseX();
		int tileY = playerLocation.getY() - scene.getBaseY();
		var currentTile = tiles[playerLocation.getPlane()][tileX][tileY];
		if (currentTile != null && currentTile.getGroundObject() != null && currentTile.getGroundObject().getId() == DAMAGE_TILE_ID)
		{
			performanceStatistics.floorTileHits++;
		}
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		if (!isBossActive)
			return;

		final int animationId = event.getActor().getAnimation();

		if (animationId < 0)
			return;

		if (event.getActor().getName().equals(client.getLocalPlayer().getName()))
		{
			// Local player animation changed
			if (Arrays.stream(playerAttackAnimationIds).anyMatch(value -> value == animationId))
			{
				// Player attack
				performanceStatistics.playerAttackCount++;

				if (!hasCorrectAttackStyle(animationId))
				{
					performanceStatistics.wrongAttackStyleCount++;
				}

				if (!hasCorrectOffsenivePrayerActive(animationId))
				{
					performanceStatistics.wrongOffensivePrayerCount++;
				}

				int currentAttackTick = client.getTickCount();
				int ticksBetweenAttacks = currentAttackTick - previousAttackTick; // Also takes eating into account

				int lostTicks = ticksBetweenAttacks - currentWeaponAttackSpeed;
				if (lostTicks > 0)
				{
					performanceStatistics.missedTicksCounter = performanceStatistics.missedTicksCounter + lostTicks;
				}

				currentWeaponAttackSpeed = animationId == playerSceptreAttackId ? sceptreAttackSpeed : weaponAttackSpeed;

				previousAttackTick = currentAttackTick;
			}
		}
		else if (event.getActor().getName().equals("Corrupted Hunllef") ||
				event.getActor().getName().equals("Crystalline Hunllef"))
		{
			// Hunllef animation changed
			if (animationId == bossAttackAnimationId)
			{
				performanceStatistics.hunllefAttackCount++;

				if (!hasCorrectDefensivePrayerActive())
				{
					performanceStatistics.wrongDefensivePrayerCount++;
				}
			}
			else if (animationId == bossStompAnimationId)
			{
				performanceStatistics.hunllefStompAttackCount++;
			}
			else if (animationId == bossSwitchToMageAnimationId)
			{
				isHunllefMaging = true;
			}
			else if (animationId == bossSwitchToRangeAnimationId)
			{
				isHunllefMaging = false;
			}
		}
	}

	@Subscribe
	private void onNpcSpawned(final NpcSpawned event)
	{
		if (!isInGauntlet)
			return;

		final NPC npc = event.getNpc();

		if (TORNADO_IDS.contains(npc.getId()))
		{
			tornadoes.add(npc);
		}
		else if (HUNLLEF_IDS.contains(npc.getId()))
		{
			hunllef = npc;
		}
	}

	@Subscribe
	void onNpcDespawned(final NpcDespawned event)
	{
		if (!isInGauntlet)
			return;

		final NPC npc = event.getNpc();

		if (TORNADO_IDS.contains(npc.getId()))
		{
			tornadoes.removeIf(t -> t == npc);
		}
		else if (HUNLLEF_IDS.contains(npc.getId()))
		{
			hunllef = null;
		}
	}

	@Subscribe
	private void onMenuOptionClicked(final MenuOptionClicked event)
	{
		if (!isInGauntlet)
			return;

		String menuOption = Text.removeTags(event.getMenuOption()).toLowerCase();
		if (eatPattern.matcher(menuOption).find()&&
				actionStack.stream().noneMatch(a ->
				{
					if (a instanceof ItemMenuAction.ItemAction)
					{
						ItemMenuAction.ItemAction i = (ItemMenuAction.ItemAction) a;
						return i.itemID == event.getItemId();
					}
					return false;
				}))
		{
			ItemContainer oldInv = client.getItemContainer(InventoryID.INVENTORY);
			int slot = event.getMenuEntry().getParam0();
			int pushItem = oldInv.getItems()[event.getMenuEntry().getParam0()].getId();
			ItemMenuAction newAction = new ItemMenuAction.ItemAction(oldInv.getItems(), pushItem, slot);
			actionStack.push(newAction);
		}
	}

	@Subscribe
	private void onItemContainerChanged(ItemContainerChanged itemContainerChanged)
	{
		if (!isInGauntlet)
			return;

		ItemContainer itemContainer = itemContainerChanged.getItemContainer();
		int containerId = itemContainer.getId();

		if (containerId == InventoryID.INVENTORY.getId())
		{
			onInventoryChanged(itemContainer);
		}
	}

	@Subscribe
	private void onHitsplatApplied(final HitsplatApplied event)
	{
		if (!isInGauntlet)
			return;

		int damageAmount = event.getHitsplat().getAmount();
		if (event.getActor().getName().equals(client.getLocalPlayer().getName()))
		{
			// Local player got hit
			performanceStatistics.receivedDamage = performanceStatistics.receivedDamage + damageAmount;
		}
		else if (event.getActor().getName().equals("Corrupted Hunllef") ||
				event.getActor().getName().equals("Crystalline Hunllef"))
		{
			performanceStatistics.givenDamage = performanceStatistics.givenDamage + damageAmount;
		}
	}

	private void onInventoryChanged(ItemContainer itemContainer)
	{
		while (!actionStack.isEmpty())
		{
			ItemMenuAction.ItemAction itemAction = (ItemMenuAction.ItemAction) actionStack.pop();
			Item[] oldInv = itemAction.oldInventory;
			int nextItem = itemAction.itemID;
			int nextSlot = itemAction.slot;
			if (itemContainer.getItems()[nextSlot].getId() != oldInv[nextSlot].getId())
			{
				// Slot changed so we assume item has been eaten
				if (nextItem == normalFoodId)
				{
					previousAttackTick += normalFoodDelay;
				}
				else if (nextItem == crystalFoodId || nextItem == corruptedFoodId)
				{
					previousAttackTick += fastFoodDelay;
				}
			}
		}
	}

	private boolean hasCorrectOffsenivePrayerActive(int animationId)
	{
		boolean isNoWeaponAttack = animationId == playerKickAttackId ||
			animationId == playerPunchAttackId ||
			animationId == playerSceptreAttackId;
		if (!config.countNoWeaponOffPrayer() && isNoWeaponAttack)
			return true;

		if (animationId == playerMeleeAttackId || animationId == playerMeleeAltAttackId|| isNoWeaponAttack)
		{
			return client.isPrayerActive(Prayer.PIETY) ||
					client.isPrayerActive(Prayer.ULTIMATE_STRENGTH) ||
					client.isPrayerActive(Prayer.SUPERHUMAN_STRENGTH) ||
					client.isPrayerActive(Prayer.BURST_OF_STRENGTH);
		}

		if (animationId == playerMageAttackId)
		{
			return client.isPrayerActive(Prayer.AUGURY) ||
					client.isPrayerActive(Prayer.MYSTIC_MIGHT) ||
					client.isPrayerActive(Prayer.MYSTIC_LORE) ||
					client.isPrayerActive(Prayer.MYSTIC_WILL);
		}

		if (animationId == playerRangeAttackId)
		{
			return client.isPrayerActive(Prayer.RIGOUR) ||
					client.isPrayerActive(Prayer.EAGLE_EYE) ||
					client.isPrayerActive(Prayer.HAWK_EYE) ||
					client.isPrayerActive(Prayer.SHARP_EYE);
		}

		return false;
	}

	private boolean hasCorrectAttackStyle(int animationId)
	{
		switch (hunllef.getId())
		{
			// Protect from Melee
			case NpcID.CORRUPTED_HUNLLEF:
			case NpcID.CRYSTALLINE_HUNLLEF:
				return animationId != playerMeleeAttackId &&
						animationId != playerKickAttackId &&
						animationId != playerPunchAttackId &&
						animationId != playerMeleeAltAttackId &&
						animationId != playerSceptreAttackId;
			// Protect from Missiles
			case NpcID.CRYSTALLINE_HUNLLEF_9022:
			case NpcID.CORRUPTED_HUNLLEF_9036:
				return animationId != playerRangeAttackId;
			// Protect from Magic
			case NpcID.CRYSTALLINE_HUNLLEF_9023:
			case NpcID.CORRUPTED_HUNLLEF_9037:
				return animationId != playerMageAttackId;
		}

		return false;
	}

	private boolean hasCorrectDefensivePrayerActive()
	{
		return isHunllefMaging ? client.isPrayerActive(Prayer.PROTECT_FROM_MAGIC) : client.isPrayerActive(Prayer.PROTECT_FROM_MISSILES);
	}

	private boolean isInTheGauntletLobby()
	{
		Player player = client.getLocalPlayer();

		if (player == null)
		{
			return false;
		}

		int regionId = WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getRegionID();
		return regionId == REGION_ID_GAUNTLET_LOBBY;
	}

	@Provides
	GauntletPerformanceTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GauntletPerformanceTrackerConfig.class);
	}
}

package com.gauntletperformancetracker;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

public class GauntletPerformanceTrackerOverlay extends OverlayPanel
{
    private final GauntletPerformanceTrackerPlugin plugin;

    @Inject
    private GauntletPerformanceTrackerConfig config;

    @Inject
    public GauntletPerformanceTrackerOverlay(GauntletPerformanceTrackerPlugin plugin) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if ((!plugin.isInGauntletLobby && !plugin.isBossActive) ||
            (plugin.isBossActive && config.hideOverlayDuringFight()) ||
            plugin.performanceStatistics.totalTicksCounter <= 0)
            return null;

        if (plugin.isBossActive)
        {
            String tickLossMessage = "undefined";
            Color tickLossColor = Color.RED;

            switch (plugin.tickLossState) {
                case NONE:
                    tickLossColor = Color.GREEN;
                    tickLossMessage = "No tick loss";
                    break;
                case POTENTIAL:
                    tickLossColor = Color.ORANGE;
                    tickLossMessage = "Losing ticks";
                    break;
                case LOSING:
                    tickLossColor = Color.RED;
                    tickLossMessage = "Losing ticks";
                    break;
            }

            panelComponent.getChildren().add(TitleComponent.builder()
                    .text(tickLossMessage)
                    .color(tickLossColor)
                    .build());
        }
        else
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Total ticks")
                    .right(Integer.toString(plugin.performanceStatistics.totalTicksCounter))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Lost ticks")
                    .right(Integer.toString(plugin.performanceStatistics.missedTicksCounter))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Used ticks")
                    .right(String.format("%.2f", (1f - (float) plugin.performanceStatistics.missedTicksCounter / plugin.performanceStatistics.totalTicksCounter) * 100f) + "%")
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Player attacks")
                    .right(Integer.toString(plugin.performanceStatistics.playerAttackCount))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Wrong off pray")
                    .right(Integer.toString(plugin.performanceStatistics.wrongOffensivePrayerCount))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Wrong att style")
                    .right(Integer.toString(plugin.performanceStatistics.wrongAttackStyleCount))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Hunllef attacks")
                    .right(Integer.toString(plugin.performanceStatistics.hunllefAttackCount))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Wrong def pray")
                    .right(Integer.toString(plugin.performanceStatistics.wrongDefensivePrayerCount))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Hunllef stomps")
                    .right(Integer.toString(plugin.performanceStatistics.hunllefStompAttackCount))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Tornado hits")
                    .right(Integer.toString(plugin.performanceStatistics.tornadoHits))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Floor tile hits")
                    .right(Integer.toString(plugin.performanceStatistics.floorTileHits))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Damage taken")
                    .right(Integer.toString(plugin.performanceStatistics.receivedDamage))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("DPS taken")
                    .right(String.format("%.3f", plugin.getDps(plugin.performanceStatistics.receivedDamage)))
                    .build());

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("DPS given")
                    .right(String.format("%.3f", plugin.getDps(plugin.performanceStatistics.givenDamage)))
                    .build());
        }

        return super.render(graphics);
    }
}

package com.gauntletperformancetracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("GauntletPerformanceTracker")
public interface GauntletPerformanceTrackerConfig extends Config
{
    @ConfigItem(
            keyName = "hideOverlayDuringFight",
            name = "Hide overlay during Hunllef",
            description = "Should the overlay be hidden during the Hunllef fight",
            position = 0
    )
    default boolean hideOverlayDuringFight()
    {
        return false;
    }

    @ConfigItem(
            keyName = "countNoWeaponOffPrayer",
            name = "Count no weapon off prayer",
            description = "Should an attack without a weapon be counted as wrong offensive prayer if no melee prayer was active",
            position = 1
    )
    default boolean countNoWeaponOffPrayer()
    {
        return false;
    }
    @ConfigItem(
            keyName = "saveResultsToFile",
            name = "Save results to a file",
            description = "Save each run to a timestamped file",
            position = 2
    )
    default boolean saveResultsToFile()
    {
        return false;
    }
}

package com.gauntletperformancetracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GauntletPerformanceTrackerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GauntletPerformanceTrackerPlugin.class);
		RuneLite.main(args);
	}
}
