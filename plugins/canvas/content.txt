package com.canvas;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CanvasMainTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CanvasPlugin.class);
		RuneLite.main(args);
	}
}
package com.canvas;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

import java.awt.*;

@ConfigGroup("Canvas")
public interface CanvasConfig extends Config
{
	@ConfigItem(
			keyName = "showOverlay",
			name = "Show Overlay",
			description = "Determines whether or not painting overlay is on",
			position = 2
	)
	default boolean showOverlay()
	{
		return true;
	}

	@ConfigItem(
			keyName = "paintColor",
			name = "Set Paint Color",
			description = "Sets the color that you paint with",
			position = 0
	)
	default Color getColor()
	{
		return new Color(2,2,2);
	}

	@ConfigItem(
			keyName = "brushSize",
			name = "Set Brush Size",
			description = "Sets size of the brush",
			position = 1
	)
	default int getBrushSize()
	{
		return 2;
	}

	@ConfigItem(
			keyName = "drawKey",
			name = "Bind draw key",
			description = "Binds the draw key",
			position = 3
	)
	default Keybind drawKey()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			keyName = "undoKey",
			name = "Bind undo key",
			description = "Binds the undo key",
			position = 4
	)
	default Keybind undoKey()
	{
        return Keybind.NOT_SET;
	}
}

package com.canvas;

import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;

import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import java.awt.*;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

public class CanvasOverlay extends Overlay {

    private final CanvasPlugin plugin;
    private final CanvasConfig config;

    public List<Deque<Curve>> curveList;
    public List<Color> colorList;
    public List<Integer> sizeList;


    public CanvasOverlay(CanvasPlugin plugin, CanvasConfig config) {
        this.plugin = plugin;
        this.config = config;
        curveList = plugin.curveList;
        colorList = plugin.colorList;
        sizeList = plugin.sizeList;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGH);
        setLayer(OverlayLayer.ABOVE_WIDGETS);

    }

    @Override
    public Dimension render(Graphics2D graphics){
        if (!config.showOverlay()) {
            return null;
        }

        drawCurvesFromList(curveList, colorList, graphics);

        List<Curve> trail = new ArrayList<>(plugin.getTrail());
        Point midBefore = null;
        Point midAfter = null;
        graphics.setStroke(new BasicStroke(sizeList.get(sizeList.size()-1), BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND));
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        graphics.setColor(colorList.get(colorList.size()-1));

        for(int i = 0; i < trail.size(); i++) {
            List<Point> points = trail.get(i).getCurve();
            for(int j = 0; j < points.size(); j++ ) {

                Point before = null;
                Point after = null;
                Point previous = null;
                Point current = null;
                if(i != 0 && j == 0) {
                    List<Point> previousPoints = trail.get(i - 1).getCurve();
                    before = previousPoints.get(previousPoints.size() - 2);
                    after = points.get(j + 1);
                    previous = previousPoints.get(previousPoints.size() - 1);
                    current = points.get(j);
                } else if(j > 1) {
                    before = points.get(j - 2);
                    previous = points.get(j - 1);
                    current = points.get(j);
                    if(i < trail.size() - 1 && j == points.size() - 1) {
                        after = trail.get(i + 1).getCurve().get(1);
                    }
                }

                if(j == 4) {
                    if (midBefore == null) {
                        midBefore = points.get(j);
                    }
                } else if (j == 2 && midBefore != null) {
                    midAfter = points.get(j);
                }

                if(previous != null && current != null) {
                    graphics.drawLine(previous.getX(), previous.getY(), current.getX(), current.getY());
                }
                if(before != null && after != null) {
                    graphics.drawLine(before.getX(), before.getY(), after.getX(), after.getY());
                }
                if(midBefore != null && midAfter != null) {
                    graphics.drawLine(midBefore.getX(), midBefore.getY(), midAfter.getX(), midAfter.getY());
                    midBefore = midAfter;
                    midAfter = null;
                }
            }
        }

        return null;
    }

    public void drawCurvesFromList(List<Deque<Curve>> curveList, List<Color> colorList, Graphics2D graphics) {
        for(int k = 0; k < curveList.size(); k++) {
            Deque<Curve> currentCurve = curveList.get(k);
            List<Curve> trail = new ArrayList<>(currentCurve);
            Point midBefore = null;
            Point midAfter = null;

            graphics.setStroke(new BasicStroke(sizeList.get(k), BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND));
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            graphics.setColor(colorList.get(k));
            for(int i = 0; i < trail.size(); i++) {

                List<Point> points = trail.get(i).getCurve();

                for(int j = 0; j < points.size(); j++ ) {

                    Point before = null;
                    Point after = null;
                    Point previous = null;
                    Point current = null;

                    if(i != 0 && j == 0) {

                        List<Point> previousPoints = trail.get(i - 1).getCurve();
                        before = previousPoints.get(previousPoints.size() - 2);
                        after = points.get(j + 1);
                        previous = previousPoints.get(previousPoints.size() - 1);
                        current = points.get(j);
                    } else if(j > 1) {

                        before = points.get(j - 2);
                        previous = points.get(j - 1);
                        current = points.get(j);

                        if(i < trail.size() - 1 && j == points.size() - 1) {
                            after = trail.get(i + 1).getCurve().get(1);
                        }
                    }

                    if(j == 4) {
                        if (midBefore == null) {
                            midBefore = points.get(j);
                        }
                    } else if (j == 2 && midBefore != null) {
                        midAfter = points.get(j);
                    }

                    if(previous != null && current != null) {
                        graphics.drawLine(previous.getX(), previous.getY(), current.getX(), current.getY());
                    }
                    if(before != null && after != null) {
                        graphics.drawLine(before.getX(), before.getY(), after.getX(), after.getY());
                    }
                    if(midBefore != null && midAfter != null) {
                        graphics.drawLine(midBefore.getX(), midBefore.getY(), midAfter.getX(), midAfter.getY());
                        midBefore = midAfter;
                        midAfter = null;
                    }
                }
            }
        }
    }
}

package com.canvas;

import net.runelite.api.Point;

import java.util.ArrayList;
import java.util.List;

public class Curve {
    private final Point from;
    private final Point to;
    private final List<Point> curve = new ArrayList<>();

    public Curve(Point from, Point to) {
        this.from = from;
        this.to = to;

        // TODO hook size of Curve into config
        for(int i = 1; i <= 5; i++) {
            curve.add(interpolate(from, to, (double) (i * 2) / 10));
        }
    }

    /**
     * Linearly interpolates between two points.
     *
     * @param from The starting point.
     * @param to The ending point.
     * @param t The interpolation progress starting at 0 and going to 1 (percent of distance between points).
     * @return The interpolated point.
     */
    private Point interpolate(Point from, Point to, double t) {
        double x = from.getX() * (1 - t) + to.getX() * t;
        double y = from.getY() * (1 - t) + to.getY() * t;
        return new Point((int) Math.round(x), (int) Math.round(y));
    }

    public Point getFrom() {
        return from;
    }

    public Point getTo() {
        return to;
    }

    public List<Point> getCurve() {
        return curve;
    }
}

package com.canvas;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import java.util.Deque;
import net.runelite.api.GameState;
import net.runelite.api.Point;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.input.MouseAdapter;
import net.runelite.client.input.MouseManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.input.KeyManager;

import java.awt.event.MouseEvent;
import java.util.*;


import java.awt.*;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Canvas"
)
public class CanvasPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private KeyManager keyManager;
	@Inject
	private CanvasConfig config;
	private CanvasOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MouseManager mouseManager;

	private Deque<Curve> curve;
	private Point temp = null;
	public boolean isDrawing = false;
	public List<Deque<Curve>> curveList = new ArrayList<>();
	public List<Color> colorList = new ArrayList<>();
	public List<Integer> sizeList = new ArrayList<>();
	private HotkeyListener[] hotkeys = new HotkeyListener[2];
	private boolean hotkeysEnabled = false;


	private final MouseAdapter mouseAdapter = new MouseAdapter() {

		@Override
		public MouseEvent mouseMoved(MouseEvent e) {
			if(isDrawing) {
				updateMousePositions(new Point(e.getX(), e.getY()));
			}
			return e;
		}
	};

	private void initHotkeys() {
		hotkeys[0] = new HotkeyListener(() -> config.drawKey()) {
			@Override
			public void hotkeyPressed() {
				colorList.add(config.getColor());
				sizeList.add(config.getBrushSize());
				curve = new ArrayDeque<>();
				isDrawing = true;
			}

			@Override
			public void hotkeyReleased() {
				isDrawing = false;
				temp = null;
				curveList.add(curve);
				curve = null;
			}
		};
		hotkeys[1] = new HotkeyListener(() -> config.undoKey()) {
			@Override
			public void hotkeyPressed() {
				if(curveList.size() > 0 && colorList.size() > 0 && sizeList.size() > 0) {
					curveList.remove(curveList.size() - 1);
					colorList.remove(colorList.size() - 1);
					sizeList.remove(sizeList.size() - 1);
				}
			}
		};
	}

	@Override
	protected void startUp() throws Exception
	{
		if (overlay == null) {
			overlay = new CanvasOverlay(this, config);
		}
		overlayManager.add(overlay);
		initHotkeys();
		toggleHotkeys();
	}

	@Override
	protected void shutDown() throws Exception
	{
		if (hotkeysEnabled) {
			toggleHotkeys();
		}

		overlayManager.remove(overlay);
		curveList.clear();
		colorList.clear();
		sizeList.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			setMouseListenerEnabled(true);
		}
	}

	public void setMouseListenerEnabled(boolean enabled)
	{
		if (enabled)
		{
			mouseManager.registerMouseListener(mouseAdapter);
		}
		else
		{
			mouseManager.unregisterMouseListener(mouseAdapter);
		}
	}

	public void updateMousePositions(Point point) {
		if (temp != null) {
			Curve current = new Curve(temp, point);
			curve.add(current);
		}
		temp = point;
	}

	private void toggleHotkeys() {
		for (HotkeyListener hotkey : hotkeys) {
			if (hotkeysEnabled) {
				keyManager.unregisterKeyListener(hotkey);
			} else {
				keyManager.registerKeyListener(hotkey);
			}
		}
		hotkeysEnabled = !hotkeysEnabled;
	}

	public Deque<Curve> getTrail() {
		return curve;
	}

	@Provides
	CanvasConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CanvasConfig.class);
	}
}

