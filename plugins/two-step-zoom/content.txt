package sky.twoStepZoom;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TwoStepZoomPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TwoStepZoomPlugin.class);
		RuneLite.main(args);
	}
}
package sky.twoStepZoom;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.ModifierlessKeybind;
import java.awt.event.KeyEvent;

@ConfigGroup("zoom")
public interface TwoStepZoomConfig extends Config
{
	@ConfigItem(
			keyName = "StandardZoomValue",
			name = "Standard zoom position",
			description = "Position of standard zoom",
			position = 1
	)
	@Range(
			min = 0,
			max = 896
	)
	default int standardZoomValue()
	{
		return 432;
	}

	@ConfigItem(
			keyName = "ZoomedZoomValue",
			name = "Zoomed zoom position",
			description = "Position of zoomed zoom",
			position = 2
	)
	@Range(
			min = 0,
			max = 896
	)
	default int zoomedZoomValue()
	{
		return 700;
	}

	@ConfigItem(
			position = 3,
			keyName = "standardZoom",
			name = "Standard zoom key",
			description = "The key to return to standard zoom."
	)
	default ModifierlessKeybind standardZoomKey()
	{
		return new ModifierlessKeybind(KeyEvent.VK_PAGE_DOWN, 0);
	}

	@ConfigItem(
			position = 4,
			keyName = "zoomedZoom",
			name = "Zoomed zoom key",
			description = "The key to return to zoomed zoom."
	)
	default ModifierlessKeybind zoomedZoomKey()
	{
		return new ModifierlessKeybind(KeyEvent.VK_PAGE_UP, 0);
	}
}

package sky.twoStepZoom;

import com.google.inject.Provides;
import net.runelite.api.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

@PluginDescriptor(
		name = "Two step zoom",
		description = "Adjusts the zoom between two levels",
		tags = {"zoom"}
)

public class TwoStepZoomPlugin extends Plugin implements KeyListener
{
	boolean standardDown = false;
	boolean zoomedDown = false;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private TwoStepZoomConfig config;

	@Inject
	private KeyManager keyManager;

	@Provides
	TwoStepZoomConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(TwoStepZoomConfig.class);
	}

	@Override
	protected void startUp() {
		keyManager.registerKeyListener(this);
	}

	@Override
	protected void shutDown() {
		keyManager.unregisterKeyListener(this);
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyPressed(KeyEvent e)
	{
		if (e.getKeyCode() == config.standardZoomKey().getKeyCode()) {
			standardDown = true;
		} else if (e.getKeyCode() == config.zoomedZoomKey().getKeyCode()) {
			zoomedDown = true;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		int zoomValue;
		if (e.getKeyCode() == config.standardZoomKey().getKeyCode()) {
			standardDown = false;
			zoomValue = config.standardZoomValue();
			clientThread.invokeLater(() -> client.runScript(ScriptID.CAMERA_DO_ZOOM, zoomValue, zoomValue));
		} else if (e.getKeyCode() == config.zoomedZoomKey().getKeyCode()) {
			zoomedDown = false;
			zoomValue = config.zoomedZoomValue();
			clientThread.invokeLater(() -> client.runScript(ScriptID.CAMERA_DO_ZOOM, zoomValue, zoomValue));
		}
	}
}

