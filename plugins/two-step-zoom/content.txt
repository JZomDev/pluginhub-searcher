package sky.zoomPresets;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.HotkeyListener;
import java.util.Arrays;
import java.util.OptionalInt;
import java.util.stream.IntStream;

@Slf4j
@PluginDescriptor(
		name = "Zoom presets"
)

public class ZoomPresetsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ZoomPresetsConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private KeyManager keyManager;

	private HotkeyListener zoomInHotkey;
	private HotkeyListener zoomOutHotkey;

	@Getter(AccessLevel.PACKAGE)
	@Setter(AccessLevel.PACKAGE)
	private int storedZoomValue;

	@Override
	protected void startUp() throws Exception
	{
		GetStoredZoom();

		zoomInHotkey = new HotkeyListener(config::zoomInKey)
		{
			@Override
			public void hotkeyPressed()
			{
				zoomIn();
			}
		};

		zoomOutHotkey = new HotkeyListener(config::zoomOutKey)
		{
			@Override
			public void hotkeyPressed()
			{
				zoomOut();
			}
		};

		keyManager.registerKeyListener(zoomInHotkey);
		keyManager.registerKeyListener(zoomOutHotkey);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(zoomInHotkey);
		keyManager.unregisterKeyListener(zoomOutHotkey);
	}

	@Provides
	ZoomPresetsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ZoomPresetsConfig.class);
	}

	private void zoomIn() {
		OptionalInt nextZoomValue = GetNextZoomValue(true);
		if (nextZoomValue.isPresent()) applyZoom(nextZoomValue.getAsInt());
	}

	private void zoomOut() {
		OptionalInt nextZoomValue = GetNextZoomValue(false);
		if (nextZoomValue.isPresent()) applyZoom(nextZoomValue.getAsInt());
	}

	private OptionalInt GetNextZoomValue(boolean zoomIn)
	{
		IntStream presetStream = GetZoomPresets();

		if (zoomIn) return presetStream.filter(x -> x > storedZoomValue).min();
		return presetStream.filter(x -> x < storedZoomValue).max();
	}

	private IntStream GetZoomPresets()
	{
		String presetString = config.zoomPresets();

		if (presetString == null || presetString.trim().isEmpty()) return IntStream.empty();

		return Arrays.stream(presetString.split(","))
				.map(String::trim)
				.filter(s -> !s.isEmpty())
				.mapToInt(s -> {
					try {
						return Integer.parseInt(s);
					} catch (NumberFormatException e) {
						return Integer.MIN_VALUE;
					}
				})
				.filter(v -> v != Integer.MIN_VALUE)
				.sorted();
	}

	private void applyZoom(int zoomValue) {
		clientThread.invokeLater(() -> client.runScript(ScriptID.CAMERA_DO_ZOOM, zoomValue, zoomValue));
		SetStoredZoom(zoomValue);
	}

	private void SetStoredZoom(int zoomValue)
	{
		storedZoomValue = zoomValue;
		configManager.setConfiguration(ZoomPresetsConfig.GROUP_NAME, ZoomPresetsConfig.STORED_ZOOM_VALUE_KEY, zoomValue);
	}

	private void GetStoredZoom()
	{
		try {
			storedZoomValue = Integer.parseInt(configManager.getConfiguration(ZoomPresetsConfig.GROUP_NAME, ZoomPresetsConfig.STORED_ZOOM_VALUE_KEY));
		} catch (NumberFormatException e) {
			storedZoomValue = 400;
		}
	}
}
package sky.zoomPresets;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ModifierlessKeybind;
import java.awt.event.KeyEvent;

@ConfigGroup("zoom")
public interface ZoomPresetsConfig extends Config
{
	String GROUP_NAME = "ZoomPresets";
	String STORED_ZOOM_VALUE_KEY = "zoomValue";

	@ConfigItem(
			keyName = "Presets",
			name = "Zoom presets",
			description = "Provide the zoom presets (numbers between 0 - 896) as a comma separated list.",
			position = 1
	)

	default String zoomPresets()
	{
		return "400, 700";
	}

	@ConfigItem(
			position = 2,
			keyName = "zoomIn",
			name = "Zoom in key",
			description = "The key to zoom in."
	)

	default ModifierlessKeybind zoomInKey()
	{
		return new ModifierlessKeybind(KeyEvent.VK_PAGE_UP, 0);
	}

	@ConfigItem(
			position = 3,
			keyName = "zoomOut",
			name = "Zoom out key",
			description = "The key to zoom out."
	)
	default ModifierlessKeybind zoomOutKey()
	{
		return new ModifierlessKeybind(KeyEvent.VK_PAGE_DOWN, 0);
	}
}

package sky.zoomPresets;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TwoStepZoomPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ZoomPresetsPlugin.class);
		RuneLite.main(args);
	}
}
