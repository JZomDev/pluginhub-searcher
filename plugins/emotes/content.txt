package dev.yequi.emotes;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EmotesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EmotesPlugin.class);
		RuneLite.main(args);
	}
}

package dev.yequi.emotes;

public enum ScrollMode
{
	DISABLED,
	TOP,
	MIDDLE,
	BOTTOM;
}

/*
 * Copyright (c) 2016-2017, Seth <Sethtroll3@gmail.com>
 * Copyright (c) 2018, Lotto <https://github.com/devLotto>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package dev.yequi.emotes;

import com.google.common.base.Strings;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Area;
import java.util.Map;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.components.TextComponent;

public class EmoteOverlay extends Overlay
{
	private final EmotesPlugin plugin;
	private final EmotesConfig config;
	private final Client client;
	private final TextComponent textComponent = new TextComponent();

	@Inject
	private EmoteOverlay(EmotesPlugin plugin, EmotesConfig config, Client client)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		this.plugin = plugin;
		this.config = config;
		this.client = client;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		Widget emoteContainer = client.getWidget(ComponentID.EMOTES_EMOTE_CONTAINER);
		if (emoteContainer == null || emoteContainer.isHidden())
		{
			return null;
		}
		Widget emoteWindow = client.getWidget(ComponentID.EMOTES_WINDOW);
		if (emoteWindow == null)
		{
			return null;
		}
		Map<Integer, EmoteHighlight> highlights = plugin.getHighlights();
		int[] spriteIds = config.emoteToScrollTo().getSpriteIds();
		for (Widget emoteWidget : emoteContainer.getDynamicChildren())
		{
			// scroll to the specified item
			for (int spriteId : spriteIds)
			{
				if (spriteId == emoteWidget.getSpriteId())
				{
					plugin.scrollToHighlight(emoteWidget);
					break;
				}
			}
			// highlight the emote
			Emote emote = EmotesPlugin.emoteFromWidget(emoteWidget);
			if (emote != null)
			{
				EmoteHighlight value = highlights.get(emote.ordinal());
				if (value != null)
				{
					highlight(graphics, value, emoteWidget, emoteWindow);
				}
			}
		}
		return null;
	}

	private void highlight(Graphics2D graphics, EmoteHighlight value, Widget emoteWidget, Widget container)
	{
		Point canvasLocation = emoteWidget.getCanvasLocation();
		if (canvasLocation == null)
		{
			return;
		}

		Point windowLocation = container.getCanvasLocation();
		if (windowLocation.getY() > canvasLocation.getY() + emoteWidget.getHeight()
			|| windowLocation.getY() + container.getHeight() < canvasLocation.getY())
		{
			return;
		}

		// Visible area of widget
		Area widgetArea = new Area(
			new Rectangle(
				canvasLocation.getX(),
				Math.max(canvasLocation.getY(), windowLocation.getY()),
				emoteWidget.getWidth(),
				Math.min(
					Math.min(windowLocation.getY() + container.getHeight() - canvasLocation.getY(), emoteWidget.getHeight()),
					Math.min(canvasLocation.getY() + emoteWidget.getHeight() - windowLocation.getY(), emoteWidget.getHeight()))
			));

		Color fillColor = config.rememberEmoteColors() ? value.getFillColor() : config.fillColor();
		Color borderColor = config.rememberEmoteColors() ? value.getBorderColor() : config.borderColor();
		Color borderHoverColor = borderColor.darker();
		OverlayUtil.renderHoverableArea(graphics, widgetArea, client.getMouseCanvasPosition(), fillColor, borderColor,
			borderHoverColor);

		String text = value.getLabel();
		if (!config.displayLabels() || Strings.isNullOrEmpty(text)
			|| emoteWidget.getHeight() + canvasLocation.getY() > windowLocation.getY() + container.getHeight())
		{
			return;
		}
		Color textColor = config.rememberEmoteColors() ? value.getTextColor() : config.labelColor();
		FontMetrics fontMetrics = graphics.getFontMetrics();
		textComponent.setPosition(new java.awt.Point(
			canvasLocation.getX() + emoteWidget.getWidth() / 2 - fontMetrics.stringWidth(text) / 2,
			canvasLocation.getY() + emoteWidget.getHeight()));
		textComponent.setText(text);
		textComponent.setColor(textColor);
		textComponent.render(graphics);
	}
}

package dev.yequi.emotes;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(EmotesConfig.GROUP)
public interface EmotesConfig extends Config
{
	String GROUP = "emotes";
	String KEY_SAVED = "savedHighlightInfo";

	@Alpha
	@ConfigItem(
		position = 1,
		keyName = "borderColor",
		name = "Border color",
		description = "Color of border around the emote"
	)
	default Color borderColor()
	{
		return Color.ORANGE;
	}

	@Alpha
	@ConfigItem(
		position = 2,
		keyName = "fillColor",
		name = "Fill color",
		description = "Color of fill highlight on emote"
	)
	default Color fillColor()
	{
		return new Color(0, 255, 0, 20);
	}

	@ConfigItem(
		position = 3,
		keyName = "labelColor",
		name = "Label color",
		description = "Color of label on emote"
	)
	default Color labelColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
		position = 4,
		keyName = "rememberEmoteColors",
		name = "Remember color per emote",
		description = "Uses the colors from time of placement on each emote"
	)
	default boolean rememberEmoteColors()
	{
		return false;
	}

	@ConfigItem(
		position = 5,
		keyName = "displayLabels",
		name = "Display labels",
		description = "Shows/hides labels for all emotes"
	)
	default boolean displayLabels()
	{
		return true;
	}

	@ConfigItem(
		position = 6,
		keyName = "scrollToHighlighted",
		name = "Scroll to first highlight",
		description = "Scrolls the emotes tab to the first highlighted item whenever the tab is reset",
		hidden = true
	)
	default boolean scrollToHighlighted()
	{
		return true;
	}

	@ConfigItem(
		position = 6,
		keyName = "scrollToHighlighted",
		name = "Scroll to first highlight",
		description = "Scrolls the emotes tab to the first highlighted item whenever the tab is reset",
		hidden = true
	)
	void setScrollToHighlighted(boolean enabled);

	@ConfigItem(
		position = 6,
		keyName = "emoteToScrollTo",
		name = "Emote to scroll to",
		description = "Scrolls to this emote whenever the tab resets (if scroll mode enabled)"
	)
	default Emote emoteToScrollTo()
	{
		return Emote.YES;
	}

	@ConfigItem(
		position = 6,
		keyName = "emoteToScrollTo",
		name = "Emote to scroll to",
		description = "Scrolls to this emote whenever the tab resets (if scroll mode enabled)",
		hidden = true
	)
	void setEmoteToScrollTo(Emote emote);

	@ConfigItem(
		position = 7,
		keyName = "scrollMode",
		name = "Scroll mode",
		description = "Where the scrolled-to emote will appear relative to the container"
	)
	default ScrollMode scrollMode()
	{
		return ScrollMode.DISABLED;
	}

	@ConfigItem(
		position = 7,
		keyName = "scrollMode",
		name = "Scroll mode",
		description = "Where the scrolled-to emote will appear relative to the container",
		hidden = true
	)
	void setScrollMode(ScrollMode mode);

	@ConfigItem(
		keyName = "savedHighlightInfoV2",
		name = "Highlighted emote info",
		description = "Map of sprite ids to highlight",
		hidden = true
	)
	default String savedHighlightInfoV2()
	{
		return "";
	}

	@ConfigItem(
		keyName = "savedHighlightInfoV2",
		name = "Highlighted emote info",
		description = "Map of sprite ids to highlight",
		hidden = true
	)
	void setSavedHighlightInfoV2(String serializedInfo);

	// below configs are deprecated and will be eventually removed
	@ConfigItem(
		keyName = "savedHighlightInfo",
		name = "Highlighted emote info",
		description = "Map of sprite ids to highlight",
		hidden = true
	)
	default String savedHighlightInfo()
	{
		return "";
	}

	@ConfigItem(
		keyName = "savedHighlightInfo",
		name = "Highlighted emote info",
		description = "Map of sprite ids to highlight",
		hidden = true
	)
	void setSavedHighlightInfo(String serializedInfo);
}

/*
 * Copyright (c) 2016-2017, Seth <Sethtroll3@gmail.com>
 * Copyright (c) 2018, Lotto <https://github.com/devLotto>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package dev.yequi.emotes;

import com.google.common.base.Strings;
import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.inject.Provides;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.ScriptID;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Emotes",
	description = "Highlights and labels for emotes"
)
public class EmotesPlugin extends Plugin
{
	public static final Map<Integer, Emote> EMOTE_SPRITE_LOOKUP = Arrays.stream(Emote.values())
		.collect(HashMap::new, (m, e) -> Arrays.stream(e.getSpriteIds()).forEach(i -> m.put(i, e)), HashMap::putAll);

	private static final Map<String, Emote> EMOTE_NAME_LOOKUP = Arrays.stream(Emote.values())
		.collect(Collectors.toMap(e -> e.getLabel().toLowerCase(), e -> e));

	static
	{
		// 'relic unlock' changes name to 'fragment unlock' for leagues 3 variant
		EMOTE_NAME_LOOKUP.put("fragment unlock", Emote.RELIC_UNLOCK);
	}

	@Nullable
	public static Emote emoteFromWidget(Widget w)
	{
		if (w.getActions() == null)
		{
			return null;
		}
		String emoteName = "";
		for (String action : w.getActions())
		{
			if (action == null)
			{
				continue;
			}
			if (action.equals("Perform"))
			{
				emoteName = w.getName();
			}
			else if (action.startsWith("Perform "))
			{
				emoteName = action.replace("Perform ", "");
			}
		}
		return EMOTE_NAME_LOOKUP.get(Text.removeTags(emoteName).toLowerCase());
	}

	@Inject
	private Client client;

	@Inject
	private EmoteOverlay overlay;

	@Inject
	private EmotesConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ChatboxPanelManager chatboxPanelManager;

	@Inject
	private Gson gson;

	@Getter
	private Map<Integer, EmoteHighlight> highlights = new HashMap<>();

	private boolean shouldScroll;

	@Provides
	EmotesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EmotesConfig.class);
	}

	@Override
	protected void startUp()
	{
		// migrate users from old config settings
		if (config.scrollToHighlighted())
		{
			log.debug("migrating emote scroll config");
			config.setScrollToHighlighted(false);
			config.setScrollMode(ScrollMode.MIDDLE);
		}
		if (!config.savedHighlightInfo().isEmpty())
		{
			Map<Integer, EmoteHighlight> highlights = getHighlights(true).values().stream()
				.filter(e -> EMOTE_SPRITE_LOOKUP.containsKey(e.getSpriteId()))
				.map(h -> {
					// map old sprite id to new emote id
					Emote emote = EMOTE_SPRITE_LOOKUP.get(h.getSpriteId());
					return h.withSpriteId(emote.ordinal());
				})
				// key conflicts may occur for leagues emotes; just take one
				.collect(Collectors.toMap(EmoteHighlight::getSpriteId, e -> e, (a, b) -> a));
			log.debug("migrated old highlights: {} values", highlights.size());
			config.setSavedHighlightInfoV2(gson.toJson(highlights.values()));
			config.setSavedHighlightInfo("");
		}
		overlayManager.add(overlay);
		refreshHighlights();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(EmotesConfig.GROUP) || !event.getKey().equals(EmotesConfig.KEY_SAVED))
		{
			return;
		}
		refreshHighlights();
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		// re-perform the scroll every time the widget is reloaded (normally would scroll back to top)
		if (event.getGroupId() == InterfaceID.EMOTES)
		{
			shouldScroll = true;
		}
	}

	@Subscribe
	public void onMenuOpened(MenuOpened event)
	{
		if (!client.isKeyPressed(KeyCode.KC_SHIFT))
		{
			return;
		}
		Emote emote = Arrays.stream(event.getMenuEntries())
			.map(MenuEntry::getWidget)
			.filter(w -> w != null && w.getActions() != null)
			.map(EmotesPlugin::emoteFromWidget)
			.filter(Objects::nonNull)
			.findFirst()
			.orElse(null);
		if (emote != null)
		{
			final int emoteId = emote.ordinal();
			final EmoteHighlight highlight = highlights.get(emoteId);
			final boolean highlighted = highlight != null;
			client.createMenuEntry(1)
				.setOption(highlighted ? "Remove highlight" : "Add highlight")
				.setTarget("")
				.setType(MenuAction.RUNELITE)
				.onClick(e -> toggleHighlight(emoteId, highlighted));
			if (highlighted && config.rememberEmoteColors())
			{
				client.createMenuEntry(1)
					.setOption("Update colors")
					.setTarget("")
					.setType(MenuAction.RUNELITE)
					.onClick(e -> updateColors(highlight));
			}
			if (highlighted && config.displayLabels())
			{
				client.createMenuEntry(1)
					.setOption("Change label")
					.setTarget("")
					.setType(MenuAction.RUNELITE)
					.onClick(e -> editLabel(emoteId, highlight.getLabel()));
			}
			client.createMenuEntry(1)
				.setOption("Scroll-on-reset")
				.setTarget("")
				.setType(MenuAction.RUNELITE)
				.onClick(e -> config.setEmoteToScrollTo(emote));
		}
	}

	void scrollToHighlight(Widget widget)
	{
		if (!shouldScroll || config.scrollMode() == ScrollMode.DISABLED || widget == null)
		{
			return;
		}
		final Widget parent = client.getWidget(ComponentID.EMOTES_EMOTE_SCROLL_CONTAINER);
		if (parent == null)
		{
			return;
		}
		shouldScroll = false;
		int y = widget.getRelativeY();
		int offset = 0;
		switch (config.scrollMode())
		{
			case TOP:
				// the top row of emotes begins at y=6
				y -= 6;
				break;
			case MIDDLE:
				y += widget.getHeight() / 2;
				offset += parent.getHeight() / 2;
				break;
			case BOTTOM:
				y += widget.getHeight();
				offset += parent.getHeight();
				break;
		}
		final int scroll = Math.max(0, Math.min(parent.getScrollHeight(), y - offset));
		log.debug("scrolling widget {} to {}", widget.getSpriteId(), scroll);
		client.runScript(ScriptID.UPDATE_SCROLLBAR, ComponentID.EMOTES_EMOTE_SCROLLBAR,
			ComponentID.EMOTES_EMOTE_SCROLL_CONTAINER, scroll);
	}

	private void toggleHighlight(int emoteId, boolean highlighted)
	{
		if (highlighted)
		{
			highlights.remove(emoteId);
		}
		else
		{
			EmoteHighlight highlight = new EmoteHighlight(emoteId, config.fillColor(), config.borderColor(),
				config.labelColor(), "");
			highlights.put(emoteId, highlight);
		}
		saveHighlights();
	}

	private void updateColors(EmoteHighlight highlight)
	{
		EmoteHighlight newHighlight = new EmoteHighlight(highlight.getSpriteId(), config.fillColor(),
			config.borderColor(), config.labelColor(), highlight.getLabel());
		highlights.put(highlight.getSpriteId(), newHighlight);
		saveHighlights();
	}

	private void editLabel(int emoteId, String currentLabel)
	{
		chatboxPanelManager.openTextInput("Emote label")
			.value(Optional.ofNullable(currentLabel).orElse(""))
			.onDone(label -> {
				EmoteHighlight highlight = highlights.get(emoteId);
				if (highlight != null)
				{
					highlights.put(emoteId, highlight.withLabel(label));
					saveHighlights();
				}
			})
			.build();
	}

	private void refreshHighlights()
	{
		highlights = getHighlights(false);
	}

	private Map<Integer, EmoteHighlight> getHighlights(boolean legacy)
	{
		String json = legacy ? config.savedHighlightInfo() : config.savedHighlightInfoV2();
		if (Strings.isNullOrEmpty(json))
		{
			return new HashMap<>();
		}
		Type type = new TypeToken<Collection<EmoteHighlight>>()
		{
		}.getType();
		Collection<EmoteHighlight> saved = gson.fromJson(json, type);
		return saved.stream()
			.collect(Collectors.toMap(EmoteHighlight::getSpriteId, s -> s));
	}

	private void saveHighlights()
	{
		config.setSavedHighlightInfoV2(gson.toJson(highlights.values()));
	}
}

package dev.yequi.emotes;

import java.awt.Color;
import lombok.Value;
import lombok.With;

@With
@Value
public class EmoteHighlight
{
	// as of v0.0.4, this is the Emote enum ordinal, not the sprite id
	int spriteId;
	Color fillColor;
	Color borderColor;
	Color textColor;
	String label;
}

/*
 * Copyright (c) 2018, Lotto <https://github.com/devLotto>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package dev.yequi.emotes;

import lombok.Getter;
import static net.runelite.api.SpriteID.*;

/**
 * Represents an emote in the emotes panel.
 * Ordinals matter for saving EmoteHighlight items in config -> always add new emotes below existing
 */
@Getter
public enum Emote
{
	YES("Yes", EMOTE_YES),
	NO("No", EMOTE_NO),
	BOW("Bow", EMOTE_BOW),
	ANGRY("Angry", EMOTE_ANGRY),

	THINK("Think", EMOTE_THINK),
	WAVE("Wave", EMOTE_WAVE),
	SHRUG("Shrug", EMOTE_SHRUG),
	CHEER("Cheer", EMOTE_CHEER),

	BECKON("Beckon", EMOTE_BECKON),
	LAUGH("Laugh", EMOTE_LAUGH),
	JUMP_FOR_JOY("Jump for Joy", EMOTE_JUMP_FOR_JOY),
	YAWN("Yawn", EMOTE_YAWN),

	DANCE("Dance", EMOTE_DANCE),
	JIG("Jig", EMOTE_JIG),
	SPIN("Spin", EMOTE_SPIN),
	HEADBANG("Headbang", EMOTE_HEADBANG),

	CRY("Cry", EMOTE_CRY),
	BLOW_KISS("Blow Kiss", EMOTE_BLOW_KISS),
	PANIC("Panic", EMOTE_PANIC),
	RASPBERRY("Raspberry", EMOTE_RASPBERRY),

	CLAP("Clap", EMOTE_CLAP),
	SALUTE("Salute", EMOTE_SALUTE),
	GOBLIN_BOW("Goblin Bow", EMOTE_GOBLIN_BOW, EMOTE_GOBLIN_BOW_LOCKED),
	GOBLIN_SALUTE("Goblin Salute", EMOTE_GOBLIN_SALUTE, EMOTE_GOBLIN_SALUTE_LOCKED),

	GLASS_BOX("Glass Box", EMOTE_GLASS_BOX, EMOTE_GLASS_BOX_LOCKED),
	CLIMB_ROPE("Climb Rope", EMOTE_CLIMB_ROPE, EMOTE_CLIMB_ROPE_LOCKED),
	LEAN("Lean", EMOTE_LEAN, EMOTE_LEAN_LOCKED),
	GLASS_WALL("Glass Wall", EMOTE_GLASS_WALL, EMOTE_GLASS_BOX_LOCKED),

	IDEA("Idea", EMOTE_IDEA, EMOTE_IDEA_LOCKED),
	STAMP("Stamp", EMOTE_STAMP, EMOTE_STAMP_LOCKED),
	FLAP("Flap", EMOTE_FLAP, EMOTE_FLAP),
	SLAP_HEAD("Slap Head", EMOTE_SLAP_HEAD, EMOTE_SLAP_HEAD_LOCKED),

	ZOMBIE_WALK("Zombie Walk", EMOTE_ZOMBIE_WALK, EMOTE_ZOMBIE_WALK_LOCKED),
	ZOMBIE_DANCE("Zombie Dance", EMOTE_ZOMBIE_DANCE, EMOTE_ZOMBIE_DANCE_LOCKED),
	SCARED("Scared", EMOTE_SCARED, EMOTE_SCARED_LOCKED),
	RABBIT_HOP("Rabbit Hop", EMOTE_RABBIT_HOP, EMOTE_RABBIT_HOP_LOCKED),

	SIT_UP("Sit up", EMOTE_SIT_UP, EMOTE_SIT_UP_LOCKED),
	PUSH_UP("Push up", EMOTE_PUSH_UP, EMOTE_PUSH_UP_LOCKED),
	STAR_JUMP("Star jump", EMOTE_STAR_JUMP, EMOTE_STAR_JUMP_LOCKED),
	JOG("Jog", EMOTE_JOG, EMOTE_JOG_LOCKED),

	FLEX("Flex", ExtraSpriteID.FLEX, ExtraSpriteID.FLEX_LOCKED),
	ZOMBIE_HAND("Zombie Hand", EMOTE_ZOMBIE_HAND, EMOTE_ZOMBIE_HAND_LOCKED),
	HYPERMOBILE_DRINKER("Hypermobile Drinker", EMOTE_HYPERMOBILE_DRINKER, EMOTE_HYPERMOBILE_DRINKER_LOCKED),
	SKILL_CAPE("Skill Cape", EMOTE_SKILLCAPE, EMOTE_SKILLCAPE_LOCKED),

	AIR_GUITAR("Air Guitar", EMOTE_AIR_GUITAR, EMOTE_AIR_GUITAR_LOCKED),
	URI_TRANSFORM("Uri transform", EMOTE_URI_TRANSFORM, EMOTE_URI_TRANSFORM_LOCKED),
	SMOOTH_DANCE("Smooth dance", EMOTE_SMOOTH_DANCE, EMOTE_SMOOTH_DANCE_LOCKED),
	CRAZY_DANCE("Crazy dance", EMOTE_CRAZY_DANCE, EMOTE_CRAZY_DANCE_LOCKED),

	PREMIER_SHIELD("Premier Shield", EMOTE_PREMIER_SHIELD, EMOTE_PREMIER_SHIELD_LOCKED),
	EXPLORE("Explore", ExtraSpriteID.EXPLORE, ExtraSpriteID.EXPLORE_LOCKED),
	RELIC_UNLOCK("Relic unlock", ExtraSpriteID.RELIC_UNLOCK_TWISTED,
		ExtraSpriteID.RELIC_UNLOCK_TRAILBLAZER, ExtraSpriteID.FRAGMENT_UNLOCK, ExtraSpriteID.RELIC_UNLOCK_LOCKED),
	PARTY("Party", ExtraSpriteID.PARTY, ExtraSpriteID.PARTY_LOCKED),
	TRICK("Trick", ExtraSpriteID.TRICK, ExtraSpriteID.TRICK_LOCKED);

	private final String label;
	private final int[] spriteIds;

	public String toString()
	{
		return label;
	}

	Emote(String label, int... spriteIds)
	{
		this.label = label;
		this.spriteIds = spriteIds;
	}
}

package dev.yequi.emotes;

public class ExtraSpriteID
{
	public static final int FLEX = 2426;
	public static final int FLEX_LOCKED = 2429;

	public static final int EXPLORE = 2423;
	public static final int EXPLORE_LOCKED = 2427;

	public static final int RELIC_UNLOCK_TWISTED = 2424;
	public static final int RELIC_UNLOCK_TRAILBLAZER = 2425;
	public static final int FRAGMENT_UNLOCK = 3604;
	public static final int RELIC_UNLOCK_LOCKED = 2428;

	public static final int PARTY = 3606;
	public static final int PARTY_LOCKED = 2430;

	public static final int TRICK = 3607;
	public static final int TRICK_LOCKED = 5249;
}

