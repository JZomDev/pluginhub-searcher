package com.tobhmtimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TobHmTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TobHmTimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.tobhmtimer;

public final class TobHmTimerConstants
{
	public static final int MILLIS_PER_TICK = 600;

	// Theatre of blood varbit states.
	public static final int STATE_NO_PARTY = 0;
	public static final int STATE_IN_PARTY = 1;

	// Game messages
	public static final String MESSAGE_LEFT_LOBBY = "You have left the lobby, so you have been removed from your party.";
	public static final String MESSAGE_RAID_ENTERED = "You enter the Theatre of Blood (Hard Mode)";
	public static final String MESSAGE_RAID_STARTED = "Time to beat:";
	public static final String MESSAGE_SPLIT_MAIDEN = "Wave 'The Maiden of Sugadinti' (Hard Mode) complete!";
	public static final String MESSAGE_SPLIT_BLOAT = "Wave 'The Pestilent Bloat' (Hard Mode) complete!";
	public static final String MESSAGE_SPLIT_NYLOCAS = "Wave 'The Nylocas' (Hard Mode) complete!";
	public static final String MESSAGE_SPLIT_SOTETSEG = "Wave 'Sotetseg' (Hard Mode) complete!";
	public static final String MESSAGE_SPLIT_XARPUS = "Wave 'Xarpus' (Hard Mode) complete!";
	public static final String MESSAGE_RAID_COMPLETED = "Theatre of Blood total completion time:";
}

package com.tobhmtimer;

import com.google.inject.Provides;
import static com.tobhmtimer.TobHmTimerConstants.*;
import java.time.Duration;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "TOB HM Timer"
)
public class TobHmTimerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private TobHmTimerConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TobHmTimerOverlay overlay;

	private static final Pattern DIGIT_PATTERN = Pattern.compile("(\\d+)");

	private int tobVarbit = 0;

	@Getter
	private TobTimer timer = new TobTimer();
	@Getter
	private boolean showOverlay = false;
	@Getter
	private boolean raidSucceeded = false;
	@Getter
	private Duration timeToBeat = Duration.ZERO;
	@Getter
	private Duration splitMaiden;
	@Getter
	private Duration splitBloat;
	@Getter
	private Duration splitNylocas;
	@Getter
	private Duration splitSotetseg;
	@Getter
	private Duration splitXarpus;
	@Getter
	private Duration splitVerzik;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		reset();
		showOverlay = false;
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.GAMEMESSAGE)
		{
			return;
		}

		String message = Text.removeTags(event.getMessage());

		if (message.equals(MESSAGE_LEFT_LOBBY))
		{
			showOverlay = false;
			return;
		}

		if (message.startsWith(MESSAGE_RAID_ENTERED))
		{
			showOverlay = true;
		}
		else if (message.startsWith(MESSAGE_RAID_STARTED))
		{
			Duration time = parseTime(message);

			if (time != null)
			{
				startRaid(time);
			}

			return;
		}

		if (!timer.isActive())
		{
			return;
		}

		if (message.startsWith(MESSAGE_SPLIT_MAIDEN))
		{
			splitMaiden = timer.getGameTime();
		}
		else if (message.startsWith(MESSAGE_SPLIT_BLOAT))
		{
			splitBloat = timer.getGameTime();
		}
		else if (message.startsWith(MESSAGE_SPLIT_NYLOCAS))
		{
			splitNylocas = timer.getGameTime();
		}
		else if (message.startsWith(MESSAGE_SPLIT_SOTETSEG))
		{
			splitSotetseg = timer.getGameTime();
		}
		else if (message.startsWith(MESSAGE_SPLIT_XARPUS))
		{
			splitXarpus = timer.getGameTime();
		}
		else if (message.startsWith(MESSAGE_RAID_COMPLETED))
		{
			splitVerzik = timer.getGameTime();
			completeRaid(true);
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		timer.tick();
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		int nextTobVarBit = client.getVarbitValue(Varbits.THEATRE_OF_BLOOD);

		if (tobVarbit != nextTobVarBit)
		{
			// The party has wiped.
			if (nextTobVarBit == STATE_IN_PARTY && timer.isActive())
			{
				completeRaid(false);
			}

			// The player has left their party or has resigned.
			else if (nextTobVarBit == STATE_NO_PARTY)
			{
				showOverlay = false;
				reset();
			}

			tobVarbit = nextTobVarBit;
		}
	}

	@Provides
	TobHmTimerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TobHmTimerConfig.class);
	}

	private void startRaid(Duration timeToBeat)
	{
		reset();
		this.timeToBeat = timeToBeat;
		timer.start();
	}

	private void completeRaid(boolean succeeded)
	{
		timer.stop();
		raidSucceeded = succeeded;
	}

	private void reset()
	{
		timer.reset();
		timeToBeat = Duration.ZERO;
		raidSucceeded = false;
		splitMaiden = null;
		splitBloat = null;
		splitNylocas = null;
		splitSotetseg = null;
		splitXarpus = null;
		splitVerzik = null;
	}

	private static Duration parseTime(String timeString)
	{
		Matcher digitMatcher = DIGIT_PATTERN.matcher(timeString);

		ArrayList<String> digits = new ArrayList<String>();
		while (digitMatcher.find())
		{
			digits.add(digitMatcher.group());
		}

		if (digits.size() == 2)
		{
			return Duration.ofMinutes(Integer.parseInt(digits.get(0)))
				.plus(Duration.ofSeconds(Integer.parseInt(digits.get(1))));
		}

		if (digits.size() == 3)
		{
			return Duration.ofHours(Integer.parseInt(digits.get(0)))
				.plus(Duration.ofMinutes(Integer.parseInt(digits.get(1))))
				.plus(Duration.ofSeconds(Integer.parseInt(digits.get(2))));
		}

		return null;
	}
}

package com.tobhmtimer;

import static com.tobhmtimer.TobHmTimerConstants.MILLIS_PER_TICK;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import lombok.Getter;

public class TobTimer
{
	@Getter
	private boolean active;
	private int ticksElapsed;
	private LocalDateTime lastElapsedTick;

	public Duration getGameTime()
	{
		return Duration.ofMillis(MILLIS_PER_TICK * ticksElapsed);
	}

	public Duration getRealTime()
	{
		if (active && lastElapsedTick != null)
		{
			long millisSinceTick = ChronoUnit.MILLIS.between(lastElapsedTick, LocalDateTime.now());
			return getGameTime().plus(Duration.ofMillis(millisSinceTick));
		}

		return getGameTime();
	}

	public void reset()
	{
		stop();
		ticksElapsed = 0;
		lastElapsedTick = null;
	}

	public void start()
	{
		active = true;
	}

	public void stop()
	{
		active = false;
	}

	public void tick()
	{
		if (active)
		{
			ticksElapsed++;
			lastElapsedTick = LocalDateTime.now();
		}
	}
}

package com.tobhmtimer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.time.Duration;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;

class TobHmTimerOverlay extends OverlayPanel
{
	private final TobHmTimerPlugin plugin;
	private final TobHmTimerConfig config;

	private String longestString;

	@Inject
	private TobHmTimerOverlay(TobHmTimerPlugin plugin, TobHmTimerConfig config)
	{
		super(plugin);
		setPosition(OverlayPosition.CANVAS_TOP_RIGHT);
		setPriority(OverlayPriority.LOW);
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isShowOverlay() && !config.alwaysShow())
		{
			return null;
		}

		longestString = "";

		Duration timeToBeat = plugin.getTimeToBeat();
		Duration elapsedTime = plugin.getTimer().getRealTime();

		Color timeColor = Color.WHITE;

		if (elapsedTime.compareTo(timeToBeat) >= 0 && !timeToBeat.isZero())
		{
			timeColor = Color.RED;
		}
		else if (!plugin.getTimer().isActive() && plugin.isRaidSucceeded())
		{
			timeColor = Color.GREEN;
		}

		if (config.showTimeToBeat())
		{
			panelComponent.getChildren().add(
				createLineComponent("To beat", timeToBeat)
			);
		}

		if (config.showTimeElapsed())
		{
			panelComponent.getChildren().add(
				createLineComponent("Elapsed", elapsedTime, timeColor)
			);
		}

		if (config.showTimeRemaining())
		{
			Duration timeRemaining = timeToBeat.minus(elapsedTime);
			panelComponent.getChildren().add(
				createLineComponent("Remaining", timeRemaining, timeColor)
			);
		}

		if (config.showSplits())
		{
			if (config.showTimeToBeat() || config.showTimeElapsed() || config.showTimeRemaining())
			{
				panelComponent.getChildren().add(LineComponent.builder().build());
			}

			panelComponent.getChildren().add(
				createLineComponent("Maiden", plugin.getSplitMaiden())
			);
			panelComponent.getChildren().add(
				createLineComponent("Bloat", plugin.getSplitBloat())
			);
			panelComponent.getChildren().add(
				createLineComponent("Nylocas", plugin.getSplitNylocas())
			);
			panelComponent.getChildren().add(
				createLineComponent("Sotetseg", plugin.getSplitSotetseg())
			);
			panelComponent.getChildren().add(
				createLineComponent("Xarpus", plugin.getSplitXarpus())
			);
			panelComponent.getChildren().add(
				createLineComponent("Verzik", plugin.getSplitVerzik())
			);
		}

		// Some characters are wider than others. Replace all of them with "9" in order to prevent shaking of the panel overlay.
		longestString = longestString.replaceAll("([0-8]|[ ]|[-])", "9");

		panelComponent.setPreferredSize(new Dimension(
			graphics.getFontMetrics().stringWidth(longestString) + 6, 0));

		return super.render(graphics);
	}

	private LineComponent createLineComponent(String description, Duration time)
	{
		return createLineComponent(description, time, Color.WHITE);
	}

	private LineComponent createLineComponent(String description, Duration time, Color color)
	{
		LineComponent.LineComponentBuilder builder = LineComponent.builder();
		String timeString = createDurationString(time);

		if (config.showTimeDescription())
		{
			description = " " + description;

			builder
				.left(timeString)
				.leftColor(color)
				.right(description);

			setLongestString(timeString + description);
		}
		else
		{
			builder
				.left(timeString)
				.leftColor(color);

			setLongestString(timeString);
		}

		return builder.build();
	}

	private void setLongestString(String string)
	{
		if (longestString == null || string.length() > longestString.length())
		{
			longestString = string;
		}
	}

	private static String createDurationString(Duration duration)
	{
		if (duration == null)
		{
			return "--:--.-";
		}

		long hours = Math.abs(duration.getSeconds() / 3600);
		long minutes = Math.abs((duration.getSeconds() % 3600) / 60);
		long seconds = Math.abs(duration.getSeconds() % 60);
		long millis = Math.abs(duration.toMillis() - (duration.getSeconds() * 1000)) / 100;

		return (duration.isNegative() ? "-" : "") + (hours > 0
			? String.format("%1d:%02d:%02d.%1d", hours, minutes, seconds, millis)
			: String.format("%02d:%02d.%1d", minutes, seconds, millis));
	}
}

package com.tobhmtimer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("tobhmtimer")
public interface TobHmTimerConfig extends Config
{
	@ConfigItem(
		position = 1,
		keyName = "showTimeToBeat",
		name = "Show time to beat",
		description = "Display the time to beat."
	)
	default boolean showTimeToBeat()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "showTimeElapsed",
		name = "Show time elapsed",
		description = "Display the time passed since the start of the raid."
	)
	default boolean showTimeElapsed()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = "showTimeRemaining",
		name = "Show time remaining",
		description = "Display the time remaining until the time to beat."
	)
	default boolean showTimeRemaining()
	{
		return false;
	}

	@ConfigItem(
		position = 4,
		keyName = "showTimeDescription",
		name = "Show time descriptions",
		description = "Show the description of the displayed times."
	)
	default boolean showTimeDescription()
	{
		return true;
	}

	@ConfigItem(
		position = 5,
		keyName = "showSplits",
		name = "Show splits",
		description = "Show a time split for every boss."
	)
	default boolean showSplits()
	{
		return false;
	}

	@ConfigItem(
		position = 6,
		keyName = "alwaysShow",
		name = "Always show",
		description = "Always display the plugin overlay, even when no raid is in progress."
	)
	default boolean alwaysShow()
	{
		return false;
	}
}

