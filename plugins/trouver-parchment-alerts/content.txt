package com.parchmentalert;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ParchmentAlertTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ParchmentAlertPlugin.class);
		RuneLite.main(args);
	}
}
package com.parchmentalert;

import net.runelite.api.ItemID;
import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("Trouver Parchment Alert")
public interface ParchmentAlertConfig extends Config
{
	enum HighlightSetting
	{
		DISABLED,
		ENABLED,
		PVP,
		DEEP_WILD;
	}

	@ConfigItem(
			keyName = "willNotify",
			name = "Notify when carrying an unlocked item",
			description = "Displays a popup when you are holding an unlocked item",
			position = 1
	)
	default HighlightSetting willNotify()
	{
		return HighlightSetting.DEEP_WILD;
	}

	@ConfigItem(
			keyName = "showNames",
			name = "Show Item Names",
			description = "The box will list what items are unlocked",
			position = 3
	)
	default boolean showNames()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "bg",
			name = "Background Color",
			description = "The color of the background.",
			position = 4
	)
	default Color bg() { return new Color(255, 0, 0, 150); }

	@ConfigItem(
		keyName = "flash",
		name = "Flash the reminder box",
		description = "The reminder box will flash to draw your attention to it",
		position = 5
	)
	default boolean flash()
	{
		return false;
	}

	@Alpha
	@ConfigItem(
			keyName = "flashColor",
			name = "Flash Color",
			description = "The Color to flash to.",
			position = 6
	)
	default Color flashColor() { return new Color(70, 61, 50, 150); }

	@Range(
			max = 80,
			min = 2
	)
	@ConfigItem(
			keyName = "interval",
			name = "Flash Interval",
			description = "Time between flash intervals",
			position = 7
	)
	default int interval() { return 40; }

	@Range(
			max = 56,
			min = 0
	)
	@ConfigItem(
			keyName = "wildernessLevel",
			name = "Deep Wild Level",
			description = "What level wilderness should the box appear in, when on Deep Wild mode. (0 includes safe zones like outside ferox)",
			position = 2
	)
	default int wildernessLevel() { return 20; }

	@ConfigItem(
			keyName = "extraItems",
			name = "Extra item IDs",
			description = "Add an item to be notified for using a comma separated list and item IDs",
			position = 9
	)
	default String extraItems() { return ""; }

	@ConfigItem(
			keyName = "ignoredItems",
			name = "Ignored items",
			description = "Use a comma separated list of item names or ids to not be checked. Use the base item (not the locked version).",
			position = 8
	)
	default String ignoredItems() { return ""; }

}


package com.parchmentalert;

import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static net.runelite.api.widgets.WidgetInfo.PVP_WILDERNESS_LEVEL;

@Singleton
public class ParchmentAlertOverlay extends OverlayPanel {

    private final ParchmentAlertConfig config;
    private final Client client;

    private final String lockMsg = "You need to lock items!";

    private final ParchmentAlertPlugin plugin;
    @Inject
    private ParchmentAlertOverlay(ParchmentAlertConfig config, Client client, ParchmentAlertPlugin plugin)
    {
        this.config = config;
        this.client = client;
        this.plugin = plugin;
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        if(!plugin.getIsRunning())
            return null;
        panelComponent.getChildren().clear();

        FontMetrics metrics = graphics.getFontMetrics();

        HashSet<String> unparchedNames = plugin.getUnparchedNames();
        String itemList = "";
        int longest = 0;
        if(unparchedNames != null && unparchedNames.size()>0)
        {
            for(String s : unparchedNames)
            {
                int t = metrics.stringWidth(s);
                if(t>longest)
                    longest = t;
            }

        }
        int w = Math.max(ComponentConstants.STANDARD_WIDTH, metrics.stringWidth(lockMsg) + longest + 14);
        panelComponent.setPreferredSize(new Dimension(w,0));
        panelComponent.getChildren().add((LineComponent.builder())
                .left(lockMsg)
                .right(itemList)
                .build());
        if(unparchedNames != null && unparchedNames.size()>0)
        {
            for(String s : unparchedNames)
            {
                panelComponent.getChildren().add((LineComponent.builder())
                        .right(s)
                        .build());
            }
        }

        if (config.flash()) {
            if (client.getGameCycle() % config.interval() >= config.interval()/2)
            {
                panelComponent.setBackgroundColor(config.bg());
            } else
            {
                panelComponent.setBackgroundColor(config.flashColor());
            }
        } else {
            panelComponent.setBackgroundColor(config.bg());
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }
}

package com.parchmentalert;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static net.runelite.api.widgets.WidgetInfo.PVP_WILDERNESS_LEVEL;

@Slf4j
@PluginDescriptor(
	name = "Trouver Parchment Alert"
)
public class ParchmentAlertPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ParchmentAlertConfig config;

	@Inject
	private ParchmentAlertService service;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ParchmentAlertOverlay overlay;

	private boolean isRunning;

	@Inject
	ClientThread thread;

	private HashSet<String> unparchedNames;


	@Override
	protected void startUp() throws Exception
	{
		isRunning = true;

		thread.invokeLater(() ->
		{
			update();
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		isRunning = false;
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		update();
	}
	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if(!configChanged.getGroup().equalsIgnoreCase("Trouver Parchment Alert"))
			return;
		if(unparchedNames!=null)
			unparchedNames.clear();

		thread.invokeLater(() ->
		{
			update();
		});
	}

	private void update()
	{
		int wildyLevel = 0;
		if (config.willNotify() == ParchmentAlertConfig.HighlightSetting.DEEP_WILD)
		{
			Widget wi = client.getWidget(5898290);

			if(wi != null)
				if(wi.isHidden())
				{
					wildyLevel = -1;
				}
				else {
					String wildyText = wi.getText();
					if(!(wildyText == null || wildyText.isEmpty()) && wildyText.matches(".*\\d.*")) //these are to prevent timing issues, as well as the -- outside ferox
					{
						Matcher m = Pattern.compile("(\\d+)").matcher(wildyText);
//						client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", " Wildy text: " + wildyText, null); //commented for debug in future
						m.find();
						wildyLevel = Integer.valueOf(m.group());
					}
				}
		}
		if (config.willNotify() == ParchmentAlertConfig.HighlightSetting.ENABLED ||
				(config.willNotify() == ParchmentAlertConfig.HighlightSetting.DEEP_WILD && wildyLevel >= config.wildernessLevel()) ||
				(config.willNotify() == ParchmentAlertConfig.HighlightSetting.PVP &&
				(client.getVarbitValue(Varbits.IN_WILDERNESS) == 1 || client.getVarbitValue(Varbits.PVP_SPEC_ORB) == 1))) {
			ArrayList<Integer> unparchedItems = service.getItems();
			HashSet<String> unparchedNames = new HashSet<>();
			unparchedNames.clear();
			if (unparchedItems.size() == 0) {
				overlayManager.remove(overlay);
				return;
			}
			for (Integer i : unparchedItems) {
				ItemComposition ip = client.getItemDefinition(i.intValue());
				unparchedNames.add(ip.getName());
			}
			if (config.showNames()) {
				this.unparchedNames = unparchedNames;
			}
			overlayManager.add(overlay);


		} else {
			overlayManager.remove(overlay);
		}
	}

	public HashSet<String> getUnparchedNames()
	{
		return unparchedNames;
	}

	public boolean getIsRunning()
	{
		return isRunning && config.willNotify() != ParchmentAlertConfig.HighlightSetting.DISABLED;
	}


	@Provides
	ParchmentAlertConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ParchmentAlertConfig.class);
	}
}

package com.parchmentalert;

import net.runelite.api.*;
import net.runelite.client.game.ItemManager;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.ArrayList;
import java.util.HashSet;

@Singleton
public class ParchmentAlertService {
    private final Client client;
    private final ParchmentAlertConfig config;

    private final ItemManager itemManager;

    private final int[] UnparchmentedItems = {
            ItemID.DRAGON_DEFENDER, ItemID.DRAGON_DEFENDER_T,
            ItemID.FIRE_CAPE, ItemID.INFERNAL_CAPE, ItemID.AVAS_ACCUMULATOR, ItemID.MASORI_ASSEMBLER,
            ItemID.IMBUED_GUTHIX_CAPE, ItemID.IMBUED_SARADOMIN_CAPE, ItemID.IMBUED_ZAMORAK_CAPE,
            ItemID.FIRE_MAX_CAPE, ItemID.INFERNAL_MAX_CAPE, ItemID.ASSEMBLER_MAX_CAPE, ItemID.MASORI_ASSEMBLER_MAX_CAPE,
            ItemID.IMBUED_ZAMORAK_MAX_CAPE, ItemID.IMBUED_GUTHIX_MAX_CAPE, ItemID.IMBUED_SARADOMIN_MAX_CAPE, ItemID.BRONZE_DEFENDER,
            ItemID.IRON_DEFENDER, ItemID.STEEL_DEFENDER, ItemID.BLACK_DEFENDER, ItemID.MITHRIL_DEFENDER, ItemID.ADAMANT_DEFENDER,
            ItemID.RUNE_DEFENDER, ItemID.RUNE_DEFENDER_T, ItemID.DRAGON_DEFENDER, ItemID.DRAGON_DEFENDER_T, ItemID.AVERNIC_DEFENDER,
            ItemID.VOID_KNIGHT_GLOVES, ItemID.VOID_KNIGHT_MACE, ItemID.VOID_KNIGHT_TOP, ItemID.VOID_KNIGHT_ROBE, ItemID.VOID_KNIGHT_GLOVES_OR,
            ItemID.VOID_KNIGHT_TOP_OR, ItemID.VOID_KNIGHT_ROBE_OR, ItemID.VOID_MELEE_HELM, ItemID.VOID_MELEE_HELM_OR, ItemID.VOID_RANGER_HELM,
            ItemID.VOID_RANGER_HELM_OR,ItemID.VOID_MAGE_HELM, ItemID.VOID_MAGE_HELM_OR, ItemID.GUTHIX_HALO, ItemID.SARADOMIN_HALO, ItemID.ZAMORAK_HALO,
            ItemID.BANDOS_HALO, ItemID.SEREN_HALO, ItemID.ANCIENT_HALO, ItemID.BRASSICA_HALO, ItemID.FIGHTER_HAT, ItemID.FIGHTER_TORSO, ItemID.FIGHTER_TORSO_OR,
            ItemID.HEALER_HAT, ItemID.RANGER_HAT, ItemID.RUNNER_HAT, ItemID.PENANCE_SKIRT, ItemID.DECORATIVE_ARMOUR, ItemID.DECORATIVE_ARMOUR_4070,
            ItemID.DECORATIVE_ARMOUR_4504, ItemID.DECORATIVE_ARMOUR_4505, ItemID.DECORATIVE_ARMOUR_4510, ItemID.DECORATIVE_ARMOUR_4509, ItemID.DECORATIVE_ARMOUR_4070,
            ItemID.DECORATIVE_ARMOUR_11893, ItemID.DECORATIVE_ARMOUR_11894, ItemID.DECORATIVE_ARMOUR_11896, ItemID.DECORATIVE_ARMOUR_11895, ItemID.DECORATIVE_ARMOUR_11898,
            ItemID.DECORATIVE_ARMOUR_11897, ItemID.DECORATIVE_ARMOUR_11899, ItemID.DECORATIVE_ARMOUR_11900, ItemID.DECORATIVE_ARMOUR_11901, ItemID.ELITE_VOID_ROBE,
            ItemID.ELITE_VOID_ROBE_OR, ItemID.ELITE_VOID_TOP, ItemID.ELITE_VOID_TOP_OR, ItemID.ANCIENT_SCEPTRE, ItemID.BLOOD_ANCIENT_SCEPTRE, ItemID.ICE_ANCIENT_SCEPTRE,
            ItemID.SHADOW_ANCIENT_SCEPTRE, ItemID.SMOKE_ANCIENT_SCEPTRE
    };



    @Inject
    private ParchmentAlertService(Client client, ParchmentAlertConfig config, ItemManager itemManager)
    {
        this.config = config;
        this.client = client;
        this.itemManager = itemManager;
    }

    public ArrayList<Integer> getItems()
    {
        ArrayList<Integer> missingParchment = new ArrayList<>();
        final ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        HashSet<Integer> skippedItems = new HashSet<>();
        HashSet<String> skippedNames = new HashSet<>();
        if(config.ignoredItems() != null && !config.ignoredItems().isEmpty()) {
            String[] skipIds = config.ignoredItems().split(",");
            for (String s : skipIds) {
                try {
                    Integer i = Integer.parseInt(s.strip());
                    skippedItems.add(i);
                } catch (NumberFormatException ignored) {
                    skippedNames.add(s.strip().toLowerCase());
                }
            }
        }

        for (int unparchmentedItem : UnparchmentedItems) {
            if (skippedItems.contains(unparchmentedItem))
                continue;
            if (skippedNames.contains(client.getItemDefinition(unparchmentedItem).getName().toLowerCase()))
                continue;
            if ((equipment != null && equipment.contains(unparchmentedItem)) || (inventory != null && inventory.contains(unparchmentedItem))) {
                missingParchment.add(unparchmentedItem);
            }
        }
        if(config.extraItems() == null || config.extraItems().isEmpty())
            return missingParchment;

        String[] idStrs = config.extraItems().split(",");
        ArrayList<Integer> extraItems = new ArrayList<>();
        for(String s : idStrs)
        {
            try
            {
                Integer i = Integer.parseInt(s.strip());
                extraItems.add(i);

            }
            catch(NumberFormatException ignored)
            {
            }
        }
        for (Integer extraItem : extraItems) {
            if ((equipment != null && equipment.contains(extraItem.intValue())) || (inventory != null && inventory.contains(extraItem.intValue()))) {
                missingParchment.add(extraItem);
            }
        }

        return missingParchment;
    }
}

