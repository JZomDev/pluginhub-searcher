package com.varlamorethieving;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VarlamoreThieving
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VarlamoreThievingPlugin.class);
		RuneLite.main(args);
	}
}

package com.varlamorethieving;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.inject.Inject;

import com.google.inject.Provides;
import com.varlamorethieving.overlay.HouseOverlay;
import com.varlamorethieving.overlay.WealthyCitizenOverlay;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "Varlamore Thieving"
)
public class VarlamoreThievingPlugin extends Plugin {
	private static final String WEALTHY_CITIZEN_NAME = "Wealthy citizen";

	@Inject
	private Client client;

	@Inject
	private Notifier notifier;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private WealthyCitizenOverlay wealthyCitizenOverlay;

	@Inject
	private HouseOverlay houseOverlay;

	@Inject
	private ScheduledExecutorService executorService;

	@Inject
	private VarlamoreThievingConfig config;




    @Override
	protected void startUp() throws Exception {
		VarlamoreThievingPlugin.log.info("Varlamore Thieving started!");
		overlayManager.add(wealthyCitizenOverlay);
		overlayManager.add(houseOverlay);
		executorService = Executors.newSingleThreadScheduledExecutor();
		executorService.scheduleAtFixedRate(this::refreshNpcTracking, 0, 1, TimeUnit.SECONDS);
	}

	@Override
	protected void shutDown() throws Exception {
		VarlamoreThievingPlugin.log.info("Varlamore Thieving stopped!");
		overlayManager.remove(wealthyCitizenOverlay);
		overlayManager.remove(houseOverlay);
		executorService.shutdownNow();
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		String message = chatMessage.getMessage();
		if (config.enableNotifications()) {
			// Example: Check if the chat message contains a specific phrase
			if (message.contains("You hear someone outside spot the homeowner coming back!")) {
				notifier.notify("Homeowner spotted!");
			}

			if (message.contains("You notice an urchin distract a wealthy citizen nearby.")) {
				notifier.notify("Citizen Distracted!");
			}

			if (message.contains("You can't spot anything else worth taking from the jewellery case.")) {
				notifier.notify("Looting Stopped!");
			}
			if (message.contains("You can't spot anything else worth taking from the chest.")) {
				notifier.notify("Looting Stopped!");
			}
			if (message.contains("You can't spot anything else worth taking from the wardrobe.")) {
				notifier.notify("Looting Stopped!");
			}

		}
	if (config.enableChatMessages()) {
		if (message.contains("You feel very tired and can't quite grab as many valuables as you'd like.")) {
			String adviceMessage = "If you've used more than 5 keys without obtaining a new one, your thieving will be less successful. " +
					"Pickpocketing another House key from Wealthy citizens will resolve the issue.";

			// Inserting a custom message into the game's chatbox
			client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", adviceMessage, null);
		}
	}

	}
	private void refreshNpcTracking() {
		for (NPC npc : client.getNpcs()) {
			if (npc.getName() != null && npc.getName().contains(WEALTHY_CITIZEN_NAME)) {
				wealthyCitizenOverlay.addNpc(npc);
			} else {
				wealthyCitizenOverlay.removeNpc(npc);
			}
		}
	}

	@Provides
	VarlamoreThievingConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(VarlamoreThievingConfig.class);
	}
}

package com.varlamorethieving.overlay;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Shape;

import javax.inject.Inject;

import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.ObjectComposition;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Tile;
import net.runelite.api.WallObject;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class HouseOverlay extends Overlay {
    private static final int DOOR_BEFORE_ID = 51999;
    private static final int DOOR_AFTER_ID = 51998;

    private static final int WINDOW_ID_IN = 52000;

    private static final int WINDOW_ID_OUT = 52001;

    private final Client client;

    @Setter
    private Color overlayColor = Color.RED; // Default color, now with Lombok @Setter

    @Inject
    public HouseOverlay(Client client) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Tile[][] tiles = client.getScene().getTiles()[client.getPlane()];

        for (int x = 0; x < Constants.SCENE_SIZE; x++) {
            for (int y = 0; y < Constants.SCENE_SIZE; y++) {
                Tile tile = tiles[x][y];
                if (tile == null) {
                    continue;
                }

                WallObject wallObject = tile.getWallObject();
                if (wallObject != null) {
                    ObjectComposition comp = client.getObjectDefinition(wallObject.getId());

                    // Check if the object has morph ids
                    if (comp.getImpostorIds() != null) {
                        ObjectComposition morphedComp = comp.getImpostor();
                        if (morphedComp != null) {
                            int morphId = morphedComp.getId();

                            // Now you can check against the morphId
                            if (morphId == WINDOW_ID_IN || morphId == WINDOW_ID_OUT) {
                                drawHouseBox(graphics, wallObject, morphId == WINDOW_ID_OUT ? Color.yellow : Color.BLUE); // Highlight morphed window
                            }
                        }
                    }
                    int id = wallObject.getId();
                    if (id == DOOR_BEFORE_ID || id == DOOR_AFTER_ID) {
                        drawHouseBox(graphics, wallObject, id == DOOR_BEFORE_ID ? Color.red : Color.green);
                    }
                }
            }
        }
        return null;
    }


    private void drawHouseBox(Graphics2D graphics, WallObject wallObject, Color color) {
        Shape polygon = wallObject.getCanvasTilePoly();
        if (polygon != null) {
            // Drawing the box with the specified color
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke(2));
            graphics.draw(polygon);
            Color fillColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), 50); // Semi-transparent fill
            graphics.setColor(fillColor);
            graphics.fill(polygon);

            // Drawing text for red and green colors only
            if (color.equals(Color.red) || color.equals(Color.green)) {
                String text = color.equals(Color.green) ? "Away" : "Home";

                graphics.setFont(new Font("Arial", Font.BOLD, 9)); // Set the desired font
                FontMetrics metrics = graphics.getFontMetrics();
                int textWidth = metrics.stringWidth(text);
                int textHeight = metrics.getHeight();

                // Center the text on the polygon
                Point textLocation = Perspective.getCanvasTextLocation(client, graphics, wallObject.getLocalLocation(), text, 0);
                if (textLocation != null) {
                    int x = textLocation.getX() - (textWidth / 2);
                    int y = textLocation.getY() + (textHeight / 2);

                    // Draw text shadow for better visibility
                    graphics.setColor(Color.BLACK);
                    graphics.drawString(text, x + 1, y + 1); // Shadow
                    graphics.setColor(Color.WHITE);
                    graphics.drawString(text, x, y); // Actual text
                }
            }

            if (color.equals(Color.yellow) || color.equals(Color.blue)) {
                String text = "Window";

                graphics.setFont(new Font("Arial", Font.BOLD, 9)); // Set the desired font
                FontMetrics metrics = graphics.getFontMetrics();
                int textWidth = metrics.stringWidth(text);
                int textHeight = metrics.getHeight();

                // Center the text on the polygon
                Point textLocation = Perspective.getCanvasTextLocation(client, graphics, wallObject.getLocalLocation(), text, 0);
                if (textLocation != null) {
                    int x = textLocation.getX() - (textWidth / 2);
                    int y = textLocation.getY() + (textHeight / 2);

                    // Draw text shadow for better visibility
                    graphics.setColor(Color.BLACK);
                    graphics.drawString(text, x + 1, y + 1); // Shadow
                    graphics.setColor(Color.WHITE);
                    graphics.drawString(text, x, y); // Actual text
                }
            }
        }
    }
}

package com.varlamorethieving.overlay;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class WealthyCitizenOverlay extends Overlay {
    private final Client client;
    private final Map<NPC, Instant> npcTransitionTimestamps = new HashMap<>();

    private final Set<NPC> trackedNpcs = new HashSet<>();

    @Inject
    private WealthyCitizenOverlay(Client client) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
    }

    public void addNpc(NPC npc) {
        trackedNpcs.add(npc);
    }

    public void removeNpc(NPC npc) {
        trackedNpcs.remove(npc);
    }


    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned) {
        trackedNpcs.remove(npcDespawned.getNpc());
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        // Check for NPCs that are out of view and remove them
        trackedNpcs.removeIf(this::isNpcInView);

    }

    private boolean isNpcInView(NPC npc) {
        LocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();
        LocalPoint npcLocation = npc.getLocalLocation();
        int distance = playerLocation.distanceTo(npcLocation);
        return distance > 10 * Perspective.LOCAL_TILE_SIZE;
    }

    // In your render method or where you're actually drawing the tiles
    @Override
    public Dimension render(Graphics2D graphics) {
        List<NPC> toRemove = new ArrayList<>(); // Create a list to hold NPCs that need to be removed

        for (NPC npc : trackedNpcs) { // Use enhanced for loop for readability
            if (isNpcInView(npc)) {
                toRemove.add(npc); // Add the NPC to the removal list instead of removing it directly
            } else {
                renderNpcOverlay(graphics, npc); // Continue with rendering logic
            }
        }

        trackedNpcs.removeAll(toRemove); // Remove all NPCs that are no longer in view after the iteration

        return null;
    }




    private void renderNpcOverlay(Graphics2D graphics, NPC npc) {
        Color color;
        String text;
        boolean recentlyPunched = false;

        if (npc.getAnimation() == 422) {
            color = Color.YELLOW;
            text = "Guarded";
            recentlyPunched = true;
            npcTransitionTimestamps.put(npc, Instant.now()); // Record the punch time
        } else if (npcTransitionTimestamps.containsKey(npc)) {
            long secondsSincePunch = Duration.between(npcTransitionTimestamps.get(npc), Instant.now()).getSeconds();
            if (secondsSincePunch <= 5) {
                color = Color.YELLOW; // Maintain the yellow color for 5 seconds
                text = "Guarded";
                recentlyPunched = true;
            } else {
                npcTransitionTimestamps.remove(npc); // Remove after 5 seconds
                color = npc.isInteracting() ? Color.GREEN : Color.RED;
                text = npc.isInteracting() ? "Distracted" : "Aware";
            }
        } else {
            color = npc.isInteracting() ? Color.GREEN : Color.RED;
            text = npc.isInteracting() ? "Distracted" : "Aware";
        }

        // Calculate the distance between the NPC and the player
        LocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();
        LocalPoint npcLocation = npc.getLocalLocation();
        int distance = playerLocation.distanceTo(npcLocation);

        // Check if the NPC is within a certain range
        if (distance > 15 * Perspective.LOCAL_TILE_SIZE) {
            // NPC is too far away, skip rendering its overlay
            return;
        }

        // Render the overlay with the determined color
        Polygon poly = Perspective.getCanvasTilePoly(client, npcLocation);
        if (poly != null) {
            OverlayUtil.renderPolygon(graphics, poly, color);
        }
            drawText(graphics, text, npcLocation, Color.WHITE);
    }

    private void drawText(Graphics2D graphics, String text, LocalPoint location, Color textColor) {
        graphics.setFont(new Font("Arial", Font.BOLD, 9));
        Point canvasTextLocation = Perspective.getCanvasTextLocation(client, graphics, location, text, 0);
        if (canvasTextLocation != null) {
            // Draw text shadow for better visibility
            FontMetrics metrics = graphics.getFontMetrics();
            int x = canvasTextLocation.getX() - metrics.stringWidth(text) / 2;
            int y = canvasTextLocation.getY() + metrics.getHeight() / 2;

            // Draw text shadow
            graphics.setColor(Color.BLACK);
            graphics.drawString(text, x + 1, y + 1); // Shadow

            // Draw text
            graphics.setColor(textColor);
            graphics.drawString(text, x, y); // Text
        }
    }

    }

package com.varlamorethieving;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("varlamorethieving")
public interface VarlamoreThievingConfig extends Config
{
	@ConfigItem(
			keyName = "enableNotifications",
			name = "Enable Notifications",
			description = "Configure whether or not notifications should be shown."
	)
	default boolean enableNotifications()
	{
		return true;
	}
	@ConfigItem(
			keyName = "enableChatMessages",
			name = "Enable Chat Messages",
			description = "Configure whether or not chat messages should be shown."
	)
	default boolean enableChatMessages()
	{
		return true; // By default, chat messages are enabled.
	}
}

