package com.main;

import com.code.BoredPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BoredGeneratorMain
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BoredPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import java.util.HashMap;

public class SkillMap {
    public static HashMap<String, Integer> skillMap = new HashMap<String, Integer>(); //the first argument is what type of material and the second type is the xp it gives

    public SkillMap() {
        //for firemaking
        skillMap.put("Normal", 40);
        skillMap.put("Oak", 60);
        skillMap.put("Willow", 90);
        skillMap.put("Wintertodt", 50000);

        //for mining
        skillMap.put("Copper/Tin ore", 17); //17.5
        skillMap.put("Iron ore", 35);
        skillMap.put("Motherlode Mine", 60);

        //for woodcutting
        skillMap.put("Normal logs", 25);
        skillMap.put("Oak logs", 37); //37.5
        skillMap.put("Willow logs", 67); //67.5
        skillMap.put("Teak logs", 85);
        skillMap.put("Magic logs", 250);
        skillMap.put("Redwoods logs", 380);

        //for agility (i am picking the xp of the end of any course, hopefully this works properly...)
        skillMap.put("Ardougne Rooftop Course", 529);
        skillMap.put("Rellekka Rooftop Course", 475);
        skillMap.put("Seers' Village Rooftop Course", 435);
        skillMap.put("Falador Rooftop Course", 180);
        skillMap.put("Canifis Rooptop Course", 175);
        skillMap.put("Varrock Rooftop Course", 125);
        skillMap.put("Al Kharid Rooftop Course", 30);
        skillMap.put("Draynor Village Rooftop Course", 79);
        skillMap.put("Gnome Stronghold Agility Course", 46);

        //for thieving
        skillMap.put("Knights of Ardougne", 84); //84.3
        skillMap.put("Fruit stalls", 28); //28.5
        skillMap.put("Bakery stalls", 16);
        skillMap.put("man/women",8);

        //for cooking
        skillMap.put("Raw Anglers", 230);
        skillMap.put("Raw Sharks", 210);
        skillMap.put("Raw karambwans", 190);
        skillMap.put("Raw Salmons", 90);
        skillMap.put("Raw Trouts", 70);
        skillMap.put("Raw Sardines",40);

        //for crafting
        skillMap.put("Air Battlestaves", 137); //137.5
        skillMap.put("Green Dragonhide Bodies", 186);
        skillMap.put("Water Battlestaves", 100);
        skillMap.put("Emeralds", 67); //67.5
        skillMap.put("Sapphires", 50);
        skillMap.put("Opals", 15);

        //for fishing
        skillMap.put("Leaping Salmon/Sturgeon", 70);
        skillMap.put("Trout/Salmon", 50); //70 for salmon im also assuming catch rate is 50%...
        skillMap.put("Shrimp/Anchovy", 10);

        //for herblore
        skillMap.put("Super Combat", 150);
        skillMap.put("Super Restore", 142); //142.5
        skillMap.put("Prayer Potions", 87);//87.5
        skillMap.put("Attack Potions", 25);

        // for fletching
        skillMap.put("Magic long bows", 91); //91.5
        skillMap.put("Yew long bows", 75);
        skillMap.put("Steel arrows", 75);
        skillMap.put("Iron darts", 4); //3.8

        // for construction
        skillMap.put("Oak Dungeon Doors", 600);
        skillMap.put("Oak Larders", 480);
        skillMap.put("Oak armchairs",180);
        skillMap.put("Oak chairs", 120);
        skillMap.put("Wooden chairs", 87);
        skillMap.put("Crude wooden chairs", 58);

        //for hunter
        skillMap.put("Black chinchompa's", 325);
        skillMap.put("Red chinchompa's", 265);
        skillMap.put("Dark/Spotted Kebbits", 132);
        skillMap.put("Spotted Kebbits", 104);
        skillMap.put("Prickly Kebbits", 204);
        skillMap.put("Crimson Swifts", 34);
        skillMap.put("Ruby Butterflies", 24);
        skillMap.put("Feldip Weasels", 48);
        skillMap.put("Polar Kebbits", 30);

        //for smithing
        skillMap.put("Gold bars (at the blast furnace)", 56); //56.2
        skillMap.put("Iron Platebodies", 125);
        skillMap.put("Iron 2h Swords", 75);

        //for prayer
        skillMap.put("Dragon bones", 252);
    }
}

/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

public class SkillCheck {
    private static int xp;
    private final static int[] lvls = {
            0, 1154, 4470, 13363, 37224, 101333, 273742, 737627, 1986068, 5346831
    };
    public static String skillTask;

    public static String woodcutting() {
        xp = BoredPanel.xp;

        if (xp > lvls[9]) {
            skillTask = "Redwoods logs";
        } else if (xp > 1_210_421) {
            skillTask = "Magic logs";
        } else if (xp > 22_406) {
            skillTask = "Teak logs";
        } else if (xp > lvls[3]) {
            skillTask = "Willow logs";
        } else if (xp > 2_411) {
            skillTask = "Oak logs";
        } else {
            skillTask = "Normal logs";
        }
        return skillTask;
    }

    public static String firemaking() {
        xp = BoredPanel.xp;

        if (xp > lvls[5]) {
            skillTask = "Wintertodt";
        } else if (xp > lvls[3]) {
            skillTask = "Willow";
        }  else if (xp > 2_411) {
            skillTask = "Oak";
        } else {
            skillTask = "Normal";
        }
        return skillTask;
    }


    public static String agility() {
        xp = BoredPanel.xp;

        if (xp > lvls[9]) {
            skillTask = "Ardougne Rooftop Course";
        } else if (xp > lvls[8]) {
            skillTask = "Rellekka Rooftop Course";
        } else if (xp > lvls[6]) {
            skillTask = "Seers' Village Rooftop Course";
        } else if (xp > lvls[5]) {
            skillTask = "Falador Rooftop Course";
        } else if (xp > lvls[4]) {
            skillTask = "Canifis Rooptop Course";
        } else if (xp > lvls[3]) {
            skillTask = "Varrock Rooftop Course";
        } else if (xp > lvls[2]) {
            skillTask = "Al Kharid Rooftop Course";
        } else if (xp > lvls[1]) {
            skillTask = "Draynor Village Rooftop Course";
        } else {
            skillTask = "Gnome Stronghold Agility Course";
        }
        return skillTask;
    }

    public static String theiving() {
        xp = BoredPanel.xp;
        if (xp > 166_636) {
            skillTask = "Knights of Ardougne";
        } else if (xp > 7_842) {
            skillTask = "Fruit stalls";
        } else if(xp > 2_411) {
            skillTask = "Bakery stalls";
        } else {
            skillTask = "man/women";
        }
        return skillTask;
    }
    public static String cooking() {
        xp = BoredPanel.xp;
        if (xp > 2_951_373 ) {
            skillTask = "Raw Anglers";
        } else if (xp > lvls[8]) {
            skillTask = "Raw Sharks";
        } else if (xp > 22_406) {
            skillTask = "Raw karambwans";
        } else if (xp > 7_842) {
            skillTask = "Raw Salmons";
        } else if (xp > 2_411) {
            skillTask = "Raw Trouts";
        } else {
            skillTask = "Raw Sardines";
        }
        return skillTask;
    }
    public static String crafting() {
        xp = BoredPanel.xp;
        if (xp > 496_254) {
            skillTask = "Air Battlestaves";
        } else if (xp > 368_599) {
            skillTask = "Green Dragonhide Bodies";
        } else if (xp > 150_872) {
            skillTask = "Water Battlestaves";
        } else if (xp > 9_730) {
            skillTask = "Emeralds";
        } else if (xp > lvls[2]) {
            skillTask = "Sapphires";
        } else {
            skillTask = "Opals";
        }
        return skillTask;
    }
    public static String fishing() {
        xp = BoredPanel.xp;
        if (xp > 224_466) {
            skillTask = "Leaping Salmon/Sturgeon";
        } else if (xp > lvls[2]) {
            skillTask = "Trout/Salmon";
        } else {
            skillTask = "Shrimp/Anchovy";
        }
        return skillTask;
    }
    public static String herblore() {
        xp = BoredPanel.xp;
        if (xp > lvls[9]) {
            skillTask = "Super Combat";
        }
        else if (xp > 368_599) {
            skillTask = "Super Restore";
        } else if (xp > 30_408 ) {
            skillTask = "Prayer Potions";
        } else {
            skillTask = "Attack Potions";
        }
        return skillTask;
    }
    public static String fletching() {
        xp = BoredPanel.xp;
        if (xp > 3_258_594) {
            skillTask = "Magic long bows";
        }
        else if (xp > lvls[7]) {
            skillTask = "Yew long bows";
        } else if (xp > 22_406 ) {
            skillTask = "Steel arrows";
        } else {
            skillTask = "Iron darts";
        }
        return skillTask;
    }
    public static String construction() {
        xp = BoredPanel.xp;
        if (xp > 1_096_278) {
            skillTask = "Oak Dungeon Doors";
        } else if (xp > 18_247) {
            skillTask = "Oak Larders";
        } else if (xp > 8_740) {
            skillTask = "Oak armchairs";
        } else if (xp > 3_973) {
            skillTask = "Oak chairs";
        } else if (xp > 801) {
            skillTask = "Wooden chairs";
        } else {
            skillTask = "Crude wooden chairs";
        }
        return skillTask;
    }
    public static String hunter() {
        xp = BoredPanel.xp;
        if(xp > 992_895) {
            skillTask = "Black chinchompa's";
        } else if(xp > 368_599) {
            skillTask = "Red chinchompa's";
        } else if(xp > 203_254) {
            skillTask = "Dark/Spotted Kebbits";
        } else if (xp > 50_339) {
            skillTask = "Spotted Kebbits";
        } else if (xp > 27_473) {
            skillTask = "Prickly Kebbits";
        } else if (xp > 18_247) {
            skillTask = "Crimson Swifts";
        } else if (xp > 2_411) {
            skillTask = "Ruby Butterflies";
        } else if (xp > 650) {
            skillTask = "Feldip Weasels";
        } else {
            skillTask = "Polar Kebbits";
        }
        return skillTask;
    }
    public static String mining() {
        xp = BoredPanel.xp;
        if (xp > 737_627) {
            skillTask = "Volcanic Mine";
        } else if (xp > lvls[3]) {
            skillTask = "Motherlode Mine";
        } else if (xp > 2_411) {
            skillTask = "Iron ore";
        } else {
            skillTask = "Copper/Tin ore";
        }
        return skillTask;
    }
    public static String smithing() {
        xp = BoredPanel.xp;
        if (xp > 37_224) {
            skillTask = "Gold bars (at the blast furnace)";
        } else if (xp > 18_247) {
            skillTask = "Iron Platebodies";
        } else if (xp > 12_031) {
            skillTask = "Iron 2h Swords";
        } else {
            skillTask = "Just do the knights sword quest cmonn!";
        }
        return skillTask;
    }
    public static String prayer() {
        xp = BoredPanel.xp;
            skillTask = "Dragon bones";
        return skillTask;
    }
    public static String runecrafting() {
        xp = BoredPanel.xp;
        if (xp > lvls[9]) {
            skillTask = "Soul runes";
        } else if (xp > 1_475_581) {
            skillTask = "Blood runes";
        } else {
            skillTask = "Ourania Altar";
        }
        return skillTask;
    }



}

package com.code;

import net.runelite.api.Skill;

public class DefineSkill {
    public static Skill defineSkill(String skillName) {
        Skill skill;
        if(skillName.equalsIgnoreCase("Agility"))
        {
            skill = Skill.AGILITY;
        }
        else if(skillName.equalsIgnoreCase("Runecrafting"))
        {
            skill = Skill.RUNECRAFT;
        }
        else if(skillName.equalsIgnoreCase("Smithing"))
        {
            skill = Skill.SMITHING;
        }
        else if(skillName.equalsIgnoreCase("Prayer"))
        {
            skill = Skill.PRAYER;
        }
        else if(skillName.equalsIgnoreCase("Mining"))
        {
            skill = Skill.MINING;
        }
        else if(skillName.equalsIgnoreCase("Hunter"))
        {
            skill = Skill.HUNTER;
        }
        else if(skillName.equalsIgnoreCase("Cooking"))
        {
            skill = Skill.COOKING;
        }
        else if(skillName.equalsIgnoreCase("Herblore"))
        {
            skill = Skill.HERBLORE;
        }
        else if(skillName.equalsIgnoreCase("Fletching"))
        {
            skill = Skill.FLETCHING;
        }
        else if (skillName.equalsIgnoreCase("Fishing"))
        {
            skill = Skill.FISHING;
        }
        else if(skillName.equalsIgnoreCase("Construction"))
        {
            skill = Skill.CONSTRUCTION;
        }
        else if(skillName.equalsIgnoreCase("Woodcutting"))
        {
            skill = Skill.WOODCUTTING;
        }
        else if(skillName.equalsIgnoreCase("Thieving"))
        {
            skill = Skill.THIEVING;
        }
        else if(skillName.equalsIgnoreCase("Firemaking"))
        {
            skill = Skill.FIREMAKING;
        }
        else if(skillName.equalsIgnoreCase("Crafting"))
        {
            skill = Skill.CRAFTING;
        }
        else
        {
            skill = Skill.HITPOINTS; // something random to avoid errors shouldnt matter anyway
        }
        return skill;

    }
}


/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import java.util.Random;

public class RandPk {
    private static int xp = 1;
    private static String pkwep;


    public static String randveng() {
        Random random = new Random();
        String[] pkWeapons = {
                "Dragon halbert","Granite maul","Rod of ivandis","Dragon harpoon","Ancient crozier",
                "Steel mace","Granite longsword","Mithril crossbow","Steel crossbow","Black dagger",
                "Steel knife","Pearl fishing rod","Adamant spear","Staff of earth","Adamant longsword",
                "Armadyl godsword","Granite maul","Whip","Magic staff","Wooden spoon","Rune knife","Adamant hasta",
                "Dragon pickaxe","Leaf bladed sword","Leaf Bladed axe","Beginner wand"
        };
        pkwep = pkWeapons[random.nextInt(pkWeapons.length)];
        return pkwep;
    };

}


/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.code;

import com.code.overlay.BoredOverlay;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
		name = "Skills generator",
		description = "A plug-in that gives you tasks to do. An excellent plug-in when you have nothing to do.",
		tags = {"whattodo", "idk", "bored","Generator","generator","skills","boredom", "SKILLING", "PVM","PKING","training","tasks"}
)
public class  BoredPlugin extends Plugin {
	public static Image ICON;
	private BoredPanel panel;
	private NavigationButton navButton;
	long preXp = 0, loginXp = 0;
	public static long xpDrop = 0, counter = 0, toGo = BoredPanel.randomNumber;
	public static String skillValue = BoredPanel.skillTask;
	public static String preTxt;


	private static GameStateChanged gameState;

	@Inject
	public Client client;

	@Inject
	SkillMap map;

	@Inject
	private BoredConfig config;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ItemManager itemManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private KeyManager keyManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private BoredOverlay overlay;

	public BoredPlugin() {

	}

	private final HotkeyListener setGenerateListener = new HotkeyListener(() -> config.generateHotKey())
	{
		@Override
		public void keyPressed(KeyEvent e)
		{
			if (config.generateHotKey().matches(e))
			{
				panel.generateAction();
			}
		}
	};


	@Override
	protected void startUp()
	{
		final BufferedImage panelIcon = ImageUtil.loadImageResource(getClass(), "/img.png");
		panel = injector.getInstance(BoredPanel.class);
		ICON = new ImageIcon(panelIcon).getImage();


		navButton = NavigationButton.builder()
				.tooltip("Skills Generator")
				.icon(panelIcon)
				.priority(4)
				.panel(panel)
				.build();
		clientToolbar.addNavigation(navButton);
		overlayManager.add(overlay);
		keyManager.registerKeyListener(setGenerateListener);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if(config.panel())
		{
			clientToolbar.addNavigation(navButton);
		}
		else
		{
			clientToolbar.removeNavigation(navButton);
		}
	}

	@Subscribe
	private void onGameTick(GameTick tick)
	{
		long skillExperience = client.getSkillExperience(DefineSkill.defineSkill(BoredPanel.text.getText()));
		preXp = loginXp;

		if (loginXp != 0 && (skillExperience - preXp <= 0))
		{
			return;
		}
		else if (loginXp != 0)
		{
			xpDrop = (skillExperience - preXp);
			preXp = skillExperience;
			loginXp = preXp;
		}
		else
		{
			loginXp = client.getSkillExperience(DefineSkill.defineSkill(BoredPanel.text.getText()));
		}
		skillValue = BoredPanel.skillTask;

		System.out.println("prexp "+preXp+"\nloginxp :"+loginXp);


		if(preXp >=loginXp ||preXp == -1)
		{
			if(skillValue != null && xpDrop == SkillMap.skillMap.get(skillValue))
			{
				counter++;

				//no dynamic string implementation so i did this
				toGo = BoredPanel.randomNumber-counter;
				BoredPanel.explain.setText(preTxt+"\n(you only have "+toGo+" to go!)");
			}
			else if(skillValue != null && SkillMap.skillMap.get(skillValue) != client.getSkillExperience(DefineSkill.defineSkill(BoredPanel.text.getText())))
			{
				if(skillValue.equalsIgnoreCase("Wintertodt"))
				{
					int winterTodtXp = 5000;
					for(int i = 0; i < 50; i++)
					{
						winterTodtXp += 100;
						if(xpDrop == winterTodtXp)
						{
							counter++;

							toGo = BoredPanel.randomNumber-counter;
							BoredPanel.explain.setText(preTxt+"\n(you only have "+toGo+" to go!)");
							break;
						}
					}
				}
				checkHalfXp();
			}
		}

		if(toGo == 0)
		{
			panel.completed();
		}
	}




	@Subscribe
	public void onGameStateChanged(GameStateChanged event) throws Exception
	{
		switch (event.getGameState())
		{
			case LOGGED_IN:
				loginXp = client.getSkillExperience(DefineSkill.defineSkill(BoredPanel.text.getText()));
				startUp();

			case HOPPING:
			case LOGGING_IN:
			case LOGIN_SCREEN:
				loginXp = 0;
				break;
		}
	}



	private void checkHalfXp()
	{
		if(skillValue.equalsIgnoreCase("Copper/Tin ore") || skillValue.equalsIgnoreCase("Trout/Salmon")) {
			System.out.println("trout and salmon");
			counter++;

			toGo = BoredPanel.randomNumber-counter;
			BoredPanel.explain.setText(preTxt+"\n(you only have "+toGo+" to go!)");
		}
		//no duplicate values in hashmaps allowed
		if( skillValue.equalsIgnoreCase("Oak logs") || skillValue.equalsIgnoreCase("Willow logs") || skillValue.equalsIgnoreCase("Fruit stalls") || skillValue.equalsIgnoreCase("Air Battlestaves") ||  skillValue.equalsIgnoreCase("Super Restore") || skillValue.equalsIgnoreCase("Prayer Potions") || skillValue.equalsIgnoreCase("Magic long bows") || skillValue.equalsIgnoreCase("Gold bars (at the blast furnace)"))
		{
			counter++;

			toGo = BoredPanel.randomNumber+1-counter;
			BoredPanel.explain.setText(preTxt+"\n(you only have "+toGo+" to go!)");
		}

	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
		overlayManager.remove(overlay);
		keyManager.unregisterKeyListener(setGenerateListener);
	}

	@Provides
	BoredConfig provideConfig (ConfigManager configManager)
	{
		return configManager.getConfig(BoredConfig.class);
	}
}


/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import net.runelite.client.config.*;

import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup("Skills Generator")
public interface BoredConfig extends Config {

	/*@ConfigSection(
			name = "Rewards",
			description = "the current rewards you can get",
			position = 3,
			closedByDefault = true,

	)*/
	String Rewards = "Rewards";

	@ConfigItem
			(
			keyName = "hotkey",
			name = "Generate Hotkey",
			description = "Pressing this combination will generate a new task.",
			position = 0
	)
	default Keybind generateHotKey() {
		return new Keybind(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem
			(
					position = 1,
					keyName = "Cengineer sound.",
					name = "C engineer completed.",
					description = "Turn the c engineer sound on or off."

			)
	default boolean CengineerC() { return false; }

	@ConfigItem
			(
					position = 2,
					keyName = "Panel",
					name = "Panel",
					description = "Enable/Disable the panel."

			)
	default boolean panel() { return true; }

	@ConfigItem
			(
					position = 3,
					keyName = "Overlay",
					name = "Overlay",
					description = "Enable/Disable the overlay."

			)
	default boolean overlay() { return true; }

	/*@ConfigItem(
			position = 1,
			keyName = "rewards",
			name = "Overheadtext",
			description = "Enable/Disable the overhead title.",
			section = Rewards
	)
	default boolean overHeadTextCheckbox() {return false;}
	@ConfigItem(
			position = 2,
			keyName = "rewards",
			name = "Reward overview",
			description = "a rewards explanation.",
			section = Rewards
	)
	default String rewardExplanation() { return
			"The current rewards are the overhead Title's\nNo points: \"Noober man\"\n" +
			"10 points: \"Cool man\"\n"+
			"20 points: \"Super cool man\"\n"+
			"30 points: \"Superior man\"\n"+
			"40 points: \"Mega Superior cool man\"\n"+
			"50 points: \"Experienced task completer man\"\n"+
			"100 points: \"No life man\"\n"+
			"2147483647 points: \"Max cash man\"\n";}
			Just ignore this piece of code right here. I might want to implements some kind of rewards and this was an idea but not for now.
			*/
}



/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import com.code.Sound.*;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;


import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.border.EmptyBorder;
import javax.swing.*;

@Slf4j
@Singleton
public class BoredPanel extends PluginPanel {
    public static int xp,randint,randomNumber = 1; //starting with 1 because it else will autocomplete the task.
    public static JButton generate, wikiButton, completed, resetPointsButton;
    public static JTextField text;
    public JCheckBox pking, everything, pvming, skilling, prif;
    public static String Chekker, url, skillTask,skilT;
    public static String[] pvmTasks, pvmg;
    public static JTextArea explain,points;
    private BufferedImage img = ImageUtil.loadImageResource(getClass(), "/pix.png");
    public JLabel Image = new JLabel(new ImageIcon(img));
    private final Random random = new Random();
    private int index;

    @Inject
    Client client;

    @Inject
    BoredConfig config;

    @Inject
    SoundEngine soundEngine;

    @Inject
    CheckCombat checkCombat;

    @Inject
    public BoredPanel() throws IOException {
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setBorder(new EmptyBorder(8, 8, 8, 8));

        prif = new JCheckBox("Prifddinas");
        pvming = new JCheckBox("Pvm");
        pking = new JCheckBox("Pking");
        everything = new JCheckBox("Everything");
        skilling = new JCheckBox("Skilling");
        explain = new JTextArea("If this plugin does not \nwork please log in :).");
        points = new JTextArea("Points: 0");
        completed = new JButton("Completed");
        wikiButton = new JButton("Wiki");
        resetPointsButton = new JButton("Reset Points");
        UserHandle.start();


        text = new JTextField("Skills Generator");
        prif.setBounds(0, 50, 100, 30);
        prif.setBackground(Color.gray);
        pvming.setBounds(10, 50, 100, 30);
        pvming.setBackground(Color.gray);
        skilling.setBounds(20, 50, 100, 30);
        skilling.setBackground(Color.gray);
        everything.setBounds(0, 80, 200, 30);
        everything.setBackground(Color.gray);
        pking.setBounds(10, 80, 200, 30);
        pking.setBackground(Color.gray);

        Image.setMaximumSize(new Dimension(400, 400));

        wikiButton.setForeground(Color.orange);

        points.setEditable(false);
        points.setBackground(Color.gray);

        explain.setEditable(false);
        explain.setBackground(Color.gray);

        text.setEditable(false);
        text.setFont(new Font("Verdana", Font.BOLD, 15));
        text.setBackground(Color.gray);

        generate = new JButton("Generate");
        generate.setForeground(Color.WHITE);
        generate.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        completed.setForeground(Color.GREEN);
        completed.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        completed.setVisible(false);

        resetPointsButton.setForeground(Color.RED);
        resetPointsButton.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        resetPointsButton.addActionListener(e -> {
            try
            {
                UserHandle.reset();
            }
            catch (IOException ex)
            {
                ex.printStackTrace();
            }
        });

        completed.addActionListener(e -> {
            completed();
        });
        wikiButton.addActionListener(e -> {
            try {
                java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        });
        generate.addActionListener(e -> {
            generateAction();
        });


        add(points);
        add(resetPointsButton);
        add(prif);
        add(everything);
        add(pking);
        add(skilling);
        add(pvming);
        add(text, BorderLayout.NORTH);
        add(explain);
        add(Image);
        add(completed);
        add(wikiButton);
        add(generate, BorderLayout.SOUTH);
    }
    public void generateAction()
    {
        generate.setText("Regenerate");
        BoredPlugin.counter = 0;
        setItUp();
        BoredPlugin.preTxt = explain.getText();
    }
    public void completed()
    {
        if (config.CengineerC()) {
            soundEngine.playClip(SoundEnum.COM);
        }
        try {
            UserHandle.handle();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        remove(Image);
        text.setText("Completed!");
        img = ImageUtil.loadImageResource(BoredPlugin.class, "/pix.png");
        Image = new JLabel(new ImageIcon(img));
        explain.setText("You have completed your task!\n" +
                "feel free to generate a new one!");
        add(Image);
    }
    private void setItUp() {
        completed.setVisible(true);
        Random random = new Random();
        boolean whatCb = checkCombat.checkCombat();
        String[] medium_lvl_pvm = {
                "Barrows", "Zulrah", "Crazy archaeologist", "Venenatis", "Deranged archaeologist",
                "Mole", "Bryophyta", "Obor", "King Black Dragon"
        };
        String[] high_lvl_pvm = {
                "Corrupted Gauntlet", "Gauntlet", "Bandos", "Armadyl", "Zamorak", "Saradomin",
                "Zulrah", "Vorkath", "Tob", "Cox", "Nightmare", "Phosani's nightmare", "Corporeal Beast",
                "Callisto", "Vet'ion", "Barrows"
        };
        String[] skilling_Activities = {
                "Agility", "Herblore", "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining",
                "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting", "Cooking"
        };
        String[] skillPvm = {
                "Corrupted Gauntlet", "Gauntlet", "Agility", "Herblore", "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining",
                "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting", "Cooking", "Bandos", "Armadyl", "Zamorak", "Saradomin",
                "Zulrah", "Vorkath", "Tob", "Cox", "Nightmare", "Phosani's nightmare", "Corporeal Beast",
                "Callisto", "Vet'ion", "Barrows"
        };
        String[] skillPvmLow = {
                "Agility", "Herblore", "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining",
                "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting", "Cooking","Barrows", "Zulrah", "Crazy archaeologist", "Venenatis", "Deranged archaeologist",
                "Mole", "Bryophyta", "Obor", "King Black Dragon"
        };
        String[] skillLowPvmPk = {
                "Agility", "Herblore", "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining",
                "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting", "Cooking","Barrows", "Zulrah", "Crazy archaeologist", "Venenatis", "Deranged archaeologist",
                "Mole", "Bryophyta", "Obor", "King Black Dragon","Venging", "Nh", "Hybrid"
        };
        String[] skillPk = {
                "Agility", "Herblore", "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining",
                "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting", "Cooking","Venging", "Nh", "Hybrid"
        };
        String[] pk = {
                "Venging", "Nh", "Hybrid"
        };
        String[] Everything = {
                "Corrupted Gauntlet", "Gauntlet", "Venging", "Nh", "Hybrid", "Agility", "Herblore",
                "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining", "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting", "Bandos", "Armadyl", "Zamorak", "Saradomin",
                "Zulrah", "Vorkath", "Tob", "Cox", "Nightmare", "Phosani's nightmare", "Corporeal Beast",
                "Callisto", "Vet'ion", "Barrows"
        };
        String[] everythingLow = {
                "Venging", "Nh", "Hybrid", "Agility", "Herblore",
                "Crafting", "Fishing",
                "Fletching", "Construction", "Hunter", "Mining", "Prayer", "Runecrafting", "Firemaking", "Smithing",
                "Thieving", "Woodcutting","Barrows", "Zulrah", "Crazy archaeologist", "Venenatis", "Deranged archaeologist",
                "Mole", "Bryophyta", "Obor", "King Black Dragon"
        };


            if (pvming.isSelected()&&!whatCb&& skilling.isSelected()&&pking.isSelected())
            {
                randint = random.nextInt(skillLowPvmPk.length);
                Chekker = skillLowPvmPk[randint];
                check();
                text.setText(skillLowPvmPk[randint]);
            }
            else if (skilling.isSelected()&&pking.isSelected())
            {

            randint = random.nextInt(skillPk.length);
            Chekker = skillPk[randint];
            check();
            text.setText(skillPk[randint]);
            } else if (everything.isSelected()&&!whatCb)
            {

                randint = random.nextInt(everythingLow.length);
                Chekker = everythingLow[randint];
                check();
                text.setText(everythingLow[randint]);
            }
            else if (pvming.isSelected()&&!whatCb&& skilling.isSelected())
            {

                randint = random.nextInt(skillPvmLow.length);
                Chekker = skillPvmLow[randint];
                check();
                text.setText(skillPvmLow[randint]);
            }
            else if (pvming.isSelected() && skilling.isSelected() && prif.isSelected())
            {

                randint = random.nextInt(skillPvm.length);
                Chekker = skillPvm[randint];
                check();
                text.setText(skillPvm[randint]);
            }
            else if (everything.isSelected() && prif.isSelected())
            {

                randint = random.nextInt(Everything.length);
                Chekker = Everything[randint];
                check();
                text.setText(Everything[randint]);
            }
            else if (pvming.isSelected()&&!whatCb)
            {

                randint = random.nextInt(medium_lvl_pvm.length);
                Chekker = medium_lvl_pvm[randint];
                check();
                text.setText(medium_lvl_pvm[randint]);
            }
            else if (pvming.isSelected() && prif.isSelected())
            {

                randint = random.nextInt(high_lvl_pvm.length);
                Chekker = high_lvl_pvm[randint];
                check();
                text.setText(high_lvl_pvm[randint]);
            }
            else if (pvming.isSelected() && skilling.isSelected())
            {

                randint = (int) Math.floor(Math.random() * (skillPvm.length - 1 - 2 + 1) + 2);
                Chekker = skillPvm[randint];
                check();
                text.setText(skillPvm[randint]);
            }
            else if (pvming.isSelected())
            {

                randint = (int) Math.floor(Math.random() * (high_lvl_pvm.length - 1 - 2 + 1) + 2);
                Chekker = high_lvl_pvm[randint];
                check();
                text.setText(high_lvl_pvm[randint]);
            }
            else if (skilling.isSelected())
            {

                randint = random.nextInt(skilling_Activities.length);
                Chekker = skilling_Activities[randint];
                check();
                text.setText(skilling_Activities[randint]);
            } else if (pking.isSelected()) {

                randint = random.nextInt(pk.length);
                Chekker = pk[randint];
                check();
                text.setText(pk[randint]);
            } else if (everything.isSelected()) {

                randint = (int) Math.floor(Math.random() * (Everything.length - 1 - 2 + 1) + 2);
                Chekker = Everything[randint];
                check();
                text.setText(Everything[randint]);
            } else {
                text.setText("Thats not valid.");
            }
            if(!text.equals("Thats not valid.")) {
                checkThatShit();
            }

    }

    private void check()
    {


        skillCheckTask();

        pvmTasks = new String[] {
                "Kill " + Chekker + " " + (int) Math.floor(Math.random() * (10 - 5 + 1) + 5) + " times",
                "Get any unique from \n" + Chekker + "!",
                "Kill " + Chekker + " with gear \nworth under " +
                        (int) Math.floor(Math.random() * (50 - 15 + 1) + 15)
                        + "M"
        };
        pvmg = new String[] {
                "Kill " + Chekker + " " +
                        (int) Math.floor(Math.random() * (10 - 5 + 1) + 5) + " times",
                "Get any unique from " + Chekker + "!",
                "Kill " + Chekker + " in under \n6 minutes"
        };

        remove(wikiButton);
    }
    private void checkThatShit()
    {
        index = random.nextInt(3);
        skills();
        pk();
        skillingCheck();
        pvmCheck();

        add(Image);
        add(wikiButton);
        add(generate, BorderLayout.SOUTH);
    }

    private int randomInt(int min, int max)
    {
        int randomNum = (int) Math.floor(Math.random() * (max - min + 1) + min);
        return randomNum;
    }

    public void skillCheckTask()
    {
        if (Chekker.equals("Fishing"))
        {
            randomNumber = randomInt(100, 200);
            xp = client.getSkillExperience(Skill.FISHING);
            skillTask = SkillCheck.fishing();
            skilT = "Fish " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Prayer"))
        {
            randomNumber = randomInt(200, 300);
            xp = client.getSkillExperience(Skill.PRAYER);
            String[] altar = {"Gilded Altar", "Chaos Altar"};
            Random random = new Random();
            int randint = random.nextInt(2);
            skillTask = SkillCheck.prayer();
            skilT = "Sacrifice " + randomNumber + " " + skillTask + "\nto the " + altar[randint] + "!";
        }
        else if (Chekker.equals("Runecrafting"))
        {
            randomNumber = randomInt(600, 800);
            xp = client.getSkillExperience(Skill.RUNECRAFT);
            skillTask = SkillCheck.runecrafting();
            if (skillTask.equals("Ourania Altar")) {
                skilT = "Craft " + randomNumber + " runes at the \n" + skillTask + "!";
            } else {
                skilT = "Craft " + randomNumber + " " + skillTask + "!";

            }
        }
        else if (Chekker.equals("Smithing"))
        {
            randomNumber = randomInt(400,600);
            xp = client.getSkillExperience(Skill.SMITHING);
            skillTask = SkillCheck.smithing();
            if (skillTask.equals("Just do the knights sword quest cmonn!")) {
                skilT = "Just do the knights sword quest cmonn!";
            } else {
                skilT = "Smith\n" + randomNumber + " " + skillTask + "!";
            }
        }
        else if (Chekker.equals("Mining"))
        {
            randomNumber = randomInt(120, 200);
            xp = client.getSkillExperience(Skill.MINING);
            skillTask = SkillCheck.mining();


            if (skillTask.equals("Motherlode Mine"))
            {
                skilT = "Mine " + randomNumber + " pay dirt\nin the " + skillTask + "!";
            }
            else if(skillTask.equals("Volcanic Mine"))
            {
                randomNumber = randomInt(120, 200);
                skilT =  "Do " + randomNumber + " " + skillTask + "rounds!";
            }
            else
            {
                skilT = "Mine " + randomNumber + " " + skillTask + "!";
            }
        }
        else if (Chekker.equals("Agility"))
        {
            randomNumber = randomInt(15, 50);
            xp = client.getSkillExperience(Skill.AGILITY);
            skillTask = SkillCheck.agility();
            skilT = "Complete " + randomNumber + " laps of the\n" + skillTask + "!";
        }
        else if (Chekker.equals("Hunter"))
        {
            randomNumber = randomInt(200, 300);
            xp = client.getSkillExperience(Skill.HUNTER);
            skillTask = SkillCheck.hunter();
            skilT = "Hunt " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Construction"))
        {
            randomNumber = randomInt(100, 200);
            xp = client.getSkillExperience(Skill.CONSTRUCTION);
            skillTask = SkillCheck.construction();
            skilT = "Build " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Herblore"))
        {
            randomNumber = randomInt(300, 600);
            xp = client.getSkillExperience(Skill.HERBLORE);
            skillTask = SkillCheck.herblore();
            skilT = "Make " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Woodcutting"))
        {
            randomNumber = randomInt(100, 200);
            xp = client.getSkillExperience(Skill.WOODCUTTING);
            skillTask = SkillCheck.woodcutting();
            skilT = "Chop " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Crafting"))
        {
            randomNumber = randomInt(100, 200);
            xp = client.getSkillExperience(Skill.CRAFTING);
            skillTask = SkillCheck.crafting();
            skilT = "Craft " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Cooking"))
        {
            randomNumber = randomInt(100, 300);
            xp = client.getSkillExperience(Skill.COOKING);
            skillTask = SkillCheck.cooking();
            skilT = "Cook " + randomNumber + " " + skillTask + "!";
        }
        else if (Chekker.equals("Thieving"))
        {
            randomNumber = randomInt(100, 200);
            xp = client.getSkillExperience(Skill.THIEVING);
            skillTask = SkillCheck.theiving();
            skilT = "Thief " + skillTask + " " + randomNumber + " times!";
        }
        else if (Chekker.equals("Fletching")) {

            randomNumber = randomInt(200, 300);
            xp = client.getSkillExperience(Skill.FLETCHING);
            skillTask = SkillCheck.fletching();
            skilT =  "Fletch " + skillTask + " " + randomNumber + " times!";
        }
        else if (Chekker.equals("Firemaking"))
        {
            xp = client.getSkillExperience(Skill.FIREMAKING);
            skillTask = SkillCheck.firemaking();

            if (skillTask.equals("Wintertodt"))
            {
                randomNumber = randomInt(3, 10);
                skilT = "Do " + randomNumber + " " + skillTask + " rounds!";
            }
            else
            {
                randomNumber = randomInt(50, 200);
                skilT = "Burn " + randomNumber + " " + skillTask + " logs!";
            }
        }
        BoredPlugin.skillValue = skillTask;
    }
    private void skills()
    {
        remove(Image);
        if (Chekker.equals("Agility"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Agility.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Agility";
        }
        else if (Chekker.equals("Runecrafting"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Runecraft.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Runecraft";
        }
        else if (Chekker.equals("Smithing"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Smithing.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Smithing";
        }
        else if (Chekker.equals("Prayer"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Prayer.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Prayer";
        }
        else if (Chekker.equals("Mining"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Mining.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Mining";
        }
        else if (Chekker.equals("Hunter"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Hunter.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Hunter";
        }
        else if (Chekker.equals("Construction"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Construction.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Construction";
        }
        else if (Chekker.equals("Cooking"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Cooking.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Cooking";
        }
        else if (Chekker.equals("Herblore"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Herblore.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Herblore";
        }
        else if (Chekker.equals("Fletching"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Fletching.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Fletching";
        }
        else if (Chekker.equals("Fishing"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Fishing.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Fishing";

        }
        else if (Chekker.equals("Woodcutting"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Woodcutting.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Woodcutting";

        }
        else if (Chekker.equals("Thieving"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Thieving.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Thieving";
        }
        else if (Chekker.equals("Firemaking"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Firemaking.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Firemaking";
        }
        else if (Chekker.equals("Crafting"))
        {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Crafting.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Crafting";
        }
    }
    private void pk() {

        if (Chekker.equals("Venging")) {

            String pkwep = RandPk.randveng();

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Venging.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText("Kill 1 Player using a \n" + pkwep + "\nas a last hit in  Vengance pking!");
            url = "https://oldschool.runescape.wiki/w/Player_killing";
        } else if (Chekker.equals("Hybrid")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Hybrid.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText("Kill " + (int) Math.floor(Math.random() * (10 - 5 + 1) + 5) + " Players using Hybrid!");
            url = "https://oldschool.runescape.wiki/w/Player_killing";
        }
        else if (Chekker.equals("Nh")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Tribrid.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText("Kill " + (int) Math.floor(Math.random() * (10 - 5 + 1) + 5) + " Players using Tribrid!");
            url = "https://oldschool.runescape.wiki/w/Player_killing";
        }
    }
    public void skillingCheck() {
        if (Chekker.equals("Agility")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Agility.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Agility";
        }
        else if (Chekker.equals("Runecrafting")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Runecraft.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Runecraft";
        } else if (Chekker.equals("Smithing")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Smithing.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Smithing";
        } else if (Chekker.equals("Prayer")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Prayer.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Prayer";
        } else if (Chekker.equals("Mining")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Mining.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Mining";
        } else if (Chekker.equals("Hunter")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Hunter.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Hunter";
        } else if (Chekker.equals("Construction")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Construction.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Construction";
        } else if (Chekker.equals("Cooking")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Cooking.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Cooking";
        } else if (Chekker.equals("Herblore")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Herblore.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Herblore";
        } else if (Chekker.equals("Fletching")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Fletching.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Fletching";
        } else if (Chekker.equals("Fishing")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Fishing.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Fishing";

        } else if (Chekker.equals("Woodcutting")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Woodcutting.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Woodcutting";

        } else if (Chekker.equals("Thieving")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Thieving.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Thieving";
        } else if (Chekker.equals("Firemaking")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Firemaking.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Firemaking";
        } else if (Chekker.equals("Crafting")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Crafting.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(skilT);
            url = "https://oldschool.runescape.wiki/w/Crafting";
        } else if (Chekker.equals("Corrupted Gauntlet")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/CG.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmg[index]);
            url = "https://oldschool.runescape.wiki/w/The_Gauntlet#Corrupted_Gauntlet";
        }
    }
    private void pvmCheck() {
        if (Chekker.equals("Crazy archaeologist")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Crazy archaeologist.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Crazy_archaeologist";
        } else if (Chekker.equals("King Black Dragon")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/King Black Dragon.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/King_Black_Dragon";
        } else if (Chekker.equals("Obor")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Obor.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Obor";
        } else if (Chekker.equals("Venenatis")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Venenatis.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Venenatis";
        } else if (Chekker.equals("Deranged archaeologist")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Deranged archeologist.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Deranged_archaeologist";
        } else if (Chekker.equals("Mole")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Mole.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Giant_Mole";
        } else if (Chekker.equals("Bryophyta")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Bryophyta.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Bryophyta";
        } else if (Chekker.equals(("Gauntlet"))) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/G.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmg[index]);
            url = "https://oldschool.runescape.wiki/w/The_Gauntlet";
        } else if (Chekker.equals(("Corrupted Gauntlet"))) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/CG.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmg[index]);
            url = "https://oldschool.runescape.wiki/w/The_Gauntlet#Corrupted_Gauntlet";
        } else if (Chekker.equals("Bandos")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/General.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/General_Graardor";
        } else if (Chekker.equals("Armadyl")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Kree.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Kree%27arra";
        } else if (Chekker.equals("Zamorak")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Kril.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/K%27ril_Tsutsaroth";
        } else if (Chekker.equals("Saradomin")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Zilyana.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Commander_Zilyana";
        } else if (Chekker.equals("Zulrah")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Zulrah.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Zulrah";
        } else if (Chekker.equals("Vorkath")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Vorkath.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Vorkath";
        } else if (Chekker.equals("Tob")) {

            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Tob.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Theatre_of_Blood";
        } else if (Chekker.equals("Cox")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Cox.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Chambers_of_Xeric";
        } else if (Chekker.equals("Nightmare")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Nightmare.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/The_Nightmare";
        } else if (Chekker.equals("Phosani's nightmare")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/PNightmare.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Phosani%27s_Nightmare";
        } else if (Chekker.equals("Corporeal Beast")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Corp.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Corporeal_Beast";
        } else if (Chekker.equals("Callisto")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Callisto.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Callisto";
        } else if (Chekker.equals("Vet'ion")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Vet.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Callisto";
        } else if (Chekker.equals("Barrows")) {
            img = ImageUtil.loadImageResource(BoredPlugin.class, "/Barrows.png");
            Image = new JLabel(new ImageIcon(img));
            explain.setText(pvmTasks[index]);
            url = "https://oldschool.runescape.wiki/w/Barrows";
        }
    }
}

/*BSD 2-Clause License

Copyright (c) 2021, m0bilebtw <github:https://github.com/m0bilebtw>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package com.code.Sound;

    public enum Sound {

        COM("/CCompleted.wav");

        private final String resourceName;

        Sound(String resNam) {
            resourceName = resNam;
        }

        String getResourceName() {
            return resourceName;
        }
    }


/*BSD 2-Clause License

Copyright (c) 2021, m0bilebtw <github:https://github.com/m0bilebtw>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package com.code.Sound;

    public enum SoundEnum {

        COM("/CCompleted.wav");

        private final String resourceName;

        SoundEnum(String resNam) {
            resourceName = resNam;
        }

        String getResourceName() {
            return resourceName;
        }
    }


/*BSD 2-Clause License

Copyright (c) 2021, m0bilebtw <github:https://github.com/m0bilebtw>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package com.code.Sound;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Singleton;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

@Singleton
@Slf4j
public class SoundEngine {

    private static final long CLIP_MTIME_UNLOADED = -2;

    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;

    private boolean loadClip(SoundEnum sound) {
        try (InputStream resourceStream = SoundEngine.class.getResourceAsStream(sound.getResourceName())) {
            if (resourceStream == null) {
                log.warn("Failed to load C Engineer sound " + sound + " as resource stream was null!");
            } else {
                try (InputStream fileStream = new BufferedInputStream(resourceStream);
                     AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(fileStream)) {
                    clip.open(audioInputStream); // liable to error with pulseaudio, works on windows, no clue about mac
                }
                return true;
            }
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.warn("Failed to load C Engineer sound " + sound, e);
        }
        return false;
    }

    public void playClip(SoundEnum sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for C Engineer sound " + sound, e);
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        // From RuneLite base client Notifier class:
        // Using loop instead of start + setFramePosition prevents the clip
        // from not being played sometimes, presumably a race condition in the
        // underlying line driver
        clip.loop(0);
    }
}

/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code.overlay;

import com.code.BoredConfig;
import com.code.BoredPanel;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

//an overlay to show the current progress of the current task.
public class BoredOverlay extends Overlay {
    private final Client client;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    BoredConfig config;

    @Override
    public Dimension render(Graphics2D graphics) {
            panelComponent.getChildren().clear();
            String overlayTitle = "Current task:";

            // Build overlay title (Current task:)
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text(overlayTitle)
                    .color(Color.GREEN)
                    .build());

            // Set the size of the overlay (width)
            panelComponent.setPreferredSize(new Dimension(
                    graphics.getFontMetrics().stringWidth(overlayTitle) + 200,
                    80));

            panelComponent.getChildren().add(LineComponent.builder()
                    .right(String.valueOf(BoredPanel.points.getText()))
                    .left(BoredPanel.explain.getText())
                    .build());

            if(config.overlay()) {
                return panelComponent.render(graphics);
            } else {
                return null;
            }


    }
    @Inject
    private BoredOverlay(Client client)  {
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        this.client = client;
    }
}

/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import net.runelite.client.RuneLite;

import javax.swing.*;
import java.io.*;
import java.util.Scanner;

public class UserHandle {
    //sorry if this code is very messy its my first database "kindof" thing :)

    public static final File parent = new File(RuneLite.RUNELITE_DIR, "Bored");
    public static String datas;
    public static int data = 0;

    public static void handle() throws IOException
    {
        if(parent.createNewFile())
        {
            System.out.println("file created succesfully");
        }
        Scanner scanner = new Scanner(parent);

        FileReader read = new FileReader(parent);
        BufferedReader reader = new BufferedReader(read);
        if(reader.read() == -1)
        {
            data++;
            datas = String.valueOf(data);
            System.out.println(datas);
            FileWriter fw = new FileWriter(parent);
            BufferedWriter buffer = new BufferedWriter(fw);
            buffer.write(datas+" ");
            buffer.close();
            BoredPanel.points.setText("Points: " + datas);
        }
        else
        {
            data = scanner.nextInt();
            data++;
            datas = String.valueOf(data);
            FileWriter fw = new FileWriter(parent);
            BufferedWriter buffer = new BufferedWriter(fw);
            buffer.write(datas+" ");
            buffer.close();
            BoredPanel.points.setText("Points: "+datas);

        }
        try
        {
            System.out.println(reader.read());
        }
        catch (IOException ioException)
        {
            ioException.printStackTrace();
        }
        reader.close();
    }
    public static void start() throws IOException
    {
        if(parent.createNewFile())
        {
            System.out.println("first file created");
        }
        Scanner scanner = new Scanner(parent);

        FileReader read = new FileReader(parent);
        BufferedReader reader = new BufferedReader(read);

        if(reader.read() == -1)
        {
            datas = String.valueOf(data);
        }
        else
        {
            data = scanner.nextInt();
            datas = String.valueOf(data);
            BoredPanel.points.setText("Points: "+datas);

        }
    }

    public static void reset() throws IOException {
        String resetConfirm = JOptionPane.showInputDialog(null, "Do you want to reset your points?\nType \"yes\" to confirm");

        if(resetConfirm != null)
        {
            if(resetConfirm.equalsIgnoreCase("yes"))
            {
                data = 0;
                datas = String.valueOf(data);
                BoredPanel.points.setText("Points: "+datas);

                FileWriter fw = new FileWriter(parent);
                BufferedWriter buffer = new BufferedWriter(fw);

                buffer.write(datas);
                buffer.close();
            }
            else
            {
                System.out.println("the user cancelled resetting points");
            }
        }
    }
}




/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import net.runelite.api.Client;

import javax.inject.Inject;
import java.util.Objects;

public class CheckCombat {
    @Inject
    Client client;

    public boolean checkCombat() {
        int cb = Objects.requireNonNull(client.getLocalPlayer()).
                getCombatLevel();

        if(cb > 90) {
            return true;
        }  else {
            return false;
        }
    }
}


