package com.lootbroadcastparty;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LootBroadcastPartyPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2019, Tomas Slusny <slusnucky@gmail.com>
 * Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.lootbroadcastparty;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.party.messages.PartyMemberMessage;
import net.runelite.client.party.messages.UserSync;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.inject.Named;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.util.regex.Pattern;

import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;

import java.util.regex.Matcher;

import net.runelite.client.chat.ChatColorType;



@PluginDescriptor(
		name = "Loot Broadcast Party",
		configName = "LootBroadcastPartyConfig",
		description = "Allows you to see and broadcast drops, level ups, and achievements from your party members",
		enabledByDefault = true
)
@Slf4j
public class LootBroadcastPartyPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private PartyService party;

	@Inject
	private WSClient wsClient;

	@Inject
	private LootBroadcastPartyConfig config;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	@Named("developerMode")
	boolean developerMode;

	private Instant lastLogout;

	private NavigationButton navButton;


	private static final Pattern COLLECTION_LOG_PATTERN = Pattern.compile("^New item added to your collection log: (.+)$");
	private static final Pattern LEVEL_ADVANCE_PATTERN = Pattern.compile("^Congratulations, you've just advanced your (.+) level. You are now level (\\d+).$");
	private static final Pattern VALUABLE_DROP_PATTERN = Pattern.compile("<col=\\w+>Valuable drop: (.+?)<\\/col>");
	private static final Pattern COMBAT_ACHIEVEMENT_PATTERN = Pattern.compile("Congratulations, you've completed (a|an) (\\w+) combat task: (.+)");


	@Subscribe
	private void onChatMessage(ChatMessage chatMessage) {

		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE) {
			return;
		}

		String message = chatMessage.getMessage();
		Matcher clogMatcher = COLLECTION_LOG_PATTERN.matcher(message);
		Matcher levelAdvanceMatcher = LEVEL_ADVANCE_PATTERN.matcher(message);
		Matcher valuableDropMatcher = VALUABLE_DROP_PATTERN.matcher(message);
		Matcher achievementMatcher = COMBAT_ACHIEVEMENT_PATTERN.matcher(message);

		if (clogMatcher.matches()) {
			String itemName = clogMatcher.group(1);
			String nameAndText = new ChatMessageBuilder()
					.append(ChatColorType.NORMAL)
					.append(Color.MAGENTA, client.getLocalPlayer().getName())
					.append(ChatColorType.HIGHLIGHT)
					.append(" obtained a new collection log item: ")
					.build();

			party.send(new CustomAlert(MessageType.COLLECTION_LOG, nameAndText + itemName));
		}

		if (levelAdvanceMatcher.matches()) {
			String broadcastMessage = new ChatMessageBuilder()
					.append(ChatColorType.NORMAL)
					.append(Color.MAGENTA, client.getLocalPlayer().getName())
					.append(ChatColorType.HIGHLIGHT)
					.append(" has just reached level ")
					.append(levelAdvanceMatcher.group(2) + " ")
					.append(levelAdvanceMatcher.group(1) + ".")
					.build();
			party.send(new CustomAlert(MessageType.LEVEL_UP, broadcastMessage));
		}

		if (valuableDropMatcher.matches()) {
			String broadcastMessage = new ChatMessageBuilder()
					.append(ChatColorType.NORMAL)
					.append(Color.MAGENTA, client.getLocalPlayer().getName())
					.append(ChatColorType.HIGHLIGHT)
					.append(" just received a valuable drop: ")
					.append(Color.RED, valuableDropMatcher.group(1))
					.build();
			party.send(new CustomAlert(MessageType.VALUABLE_DROP, broadcastMessage));
		}

		if (achievementMatcher.matches()) {
			String broadcastMessage = new ChatMessageBuilder()
					.append(ChatColorType.NORMAL)
					.append(Color.MAGENTA, client.getLocalPlayer().getName())
					.append(ChatColorType.HIGHLIGHT)
					.append(" just completed the ")
					.append(achievementMatcher.group(2) + " combat task: ")
					.append(Color.GREEN,achievementMatcher.group(3).replaceAll("<col=[0-9a-fA-F]+>", ""))
					.build();
			party.send(new CustomAlert(MessageType.COMBAT_ACHIEVEMENT, broadcastMessage));
		}
	}

	// This will be invoked for everyone in the party when `partyService.send` is passed a `CustomAlert` object
	@Subscribe
	public void onCustomAlert(CustomAlert alert) {
		if (isAllowed(alert.messageType)) {
			chatMessageManager.queue(QueuedMessage.builder()
					.type(ChatMessageType.FRIENDSCHAT)
					.sender("Party")
					.runeLiteFormattedMessage(alert.message) // Use runeLiteFormattedMessage
					.build());
		}
	}

	private boolean isAllowed(MessageType messageType) {
		if ((messageType == MessageType.LEVEL_UP) && config.levelUps()) {
			return true;
		} else if ((messageType == MessageType.COLLECTION_LOG) && config.collectionLogs()) {
			return true;
		} else if ((messageType == MessageType.COMBAT_ACHIEVEMENT) && config.combatAchievements()) {
			return true;
		} else return (messageType == MessageType.VALUABLE_DROP) && config.valuableDrops();
	}

	@Override
	protected void startUp() throws Exception
	{
		lastLogout = Instant.now();

		clientToolbar.addNavigation(navButton);
		wsClient.registerMessage(CustomAlert.class);

		// Delay sync so the eventbus can register prior to the sync response
		SwingUtilities.invokeLater(this::requestSync);
	}

	@Override
	protected void shutDown() throws Exception
	{
		lastLogout = null;
		clientToolbar.removeNavigation(navButton);
		wsClient.unregisterMessage(CustomAlert.class);
	}

	@Provides
	public LootBroadcastPartyConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LootBroadcastPartyConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{

	}

	public class CustomAlert extends PartyMemberMessage{
		MessageType messageType;
		String message;

		public CustomAlert(MessageType messageType, String message) {
			this.messageType = messageType;
			this.message = message;
		}
	}

	enum MessageType {
		COLLECTION_LOG,
		LEVEL_UP,
		COMBAT_ACHIEVEMENT,
		VALUABLE_DROP
	}

	void requestSync()
	{
		if (party.isInParty())
		{
			// Request sync
			final UserSync userSync = new UserSync();
			party.send(userSync);
		}
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.lootbroadcastparty;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup(LootBroadcastPartyConfig.GROUP)
public interface LootBroadcastPartyConfig extends Config
{
	String GROUP = "loot-broadcast-party";

	@ConfigItem(
			keyName = "collectionLogs",
			name = "Collection Log Notifications",
			description = "Enables seeing collection log notifications",
			position = 1
	)
	default boolean collectionLogs()
	{
		return true;
	}

	@ConfigItem(
			keyName = "valuableDrops",
			name = "Valuable Drop Notifications",
			description = "Enables seeing valuable drop notifications",
			position = 2
	)
	default boolean valuableDrops()
	{
		return true;
	}

	@ConfigItem(
			keyName = "combatAchievements",
			name = "Combat Achievement Notifications",
			description = "Enables seeing combat achievement notifications",
			position = 3
	)
	default boolean combatAchievements()
	{
		return true;
	}

	@ConfigItem(
			keyName = "levelUps",
			name = "Level Up Notifications",
			description = "Enables seeing level up notifications",
			position = 3
	)
	default boolean levelUps()
	{
		return true;
	}
}

