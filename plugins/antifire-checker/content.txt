package garden.sariya.antifirechecker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AntifireCheckerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AntifireCheckerPlugin.class);
		RuneLite.main(args);
	}
}
package garden.sariya.antifirechecker;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("antifirechecker")
public interface AntifireCheckerConfig extends Config
{
	@ConfigSection(name = "Notifications",
			description = "Configuration for notifications",
			position = 1)
	String notificationSection = "notificationSection";

	@ConfigSection(name = "Timers",
			description = "Configuration for timers",
			position = 2)
	String timerSection = "timerSection";

	@ConfigSection(name = "Location",
	description = "Configuration for location",
	position = 3)
	String locationSection = "locationSection";

	@ConfigSection(name = "Overlays",
			description = "Configuration for overlays",
			position = 4)
	String overlaySection = "overlaySection";

	@ConfigItem(
			keyName = "reminderEnabled",
			name = "Enable reminder panel",
			description = "Show an overlay reminding you to sip a Antifire Potion",
			position = 1,
			section = notificationSection
	)
	default boolean reminderEnabled()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "reminderColor",
			name = "Reminder Color",
			description = "The color to use for the infobox.",
			position = 2,
			section = notificationSection
	)
	default Color reminderColor()
	{
		// same color as antifire potion
		return new Color(121, 18, 157, 150);
	}

	@ConfigItem(
			keyName = "notificationEnabled",
			name = "Enable runelite notification",
			description = "Uses notification configured in Runelite settings when antifire effect is close to expiring",
			position = 3,
			section = notificationSection
	)
	default Notification getNotification()
	{
		return Notification.OFF;
	}

	@ConfigItem(
			keyName = "timerEnabled",
			name = "Enable antifire timer",
			description = "Show an infobox with a timer ticking down to the next aggression check",
			section = timerSection
	)
	default boolean timerEnabled()
	{
		return false;
	}

	@ConfigItem(
			keyName = "minimumRemainingAntifireTicks",
			name = "Minimum remaining antifire ticks before notifications begin",
			description = "When the number of antifire ticks remaining are below this number, Begin The Notifying.",
			section = timerSection
	)
	default int minimumRemainingAntifireTicks()
	{
		// It seems like "about 15 seconds" is a reasonable time to start screaming bloody murder.
		// Wouldn't want our users to get smoked because they were across the room.
		return 25;
	}

	@ConfigItem(
			keyName = "enableWarningOverlay",
			name = "Enable warning overlay",
			description = "Enable a big blinky flashing red overlay when you're almost out of antifire ticks.",
			section = overlaySection
	)
	default boolean enableWarningOverlay() { return true; }

	@ConfigItem(
			keyName = "enableTextOverlay",
			name = "Enable text overlay",
			description = "Enable a little textual overlay when you're almost out of antifire ticks.",
			section = overlaySection
	)
	default boolean enableTextOverlay() { return false; }


	@ConfigItem(
			keyName = "onlyDrawWarningWithDragonsAround",
			name = "Only draw warning/text overlays near dragons",
			description = "Only draw warning overlay when dragons requiring antifire potions are nearby.",
			section = overlaySection
	)
	default boolean onlyDrawWarningWithDragonsAround() { return true; }

	@Alpha
	@ConfigItem(
			keyName = "warningColor",
			name = "Warning Color",
			description = "The color to use for the warning overlay.",
			section = overlaySection
	)
	default Color warningColor()
	{
		// same color as antifire potion
		return new Color(121, 18, 157, 150);
	}


}

package garden.sariya.antifirechecker;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.*;

public class AntifireCheckerInfobox extends InfoBox
{

    @Getter
    @Setter
    private int timer = -1;
    private int threshold = 25;
    @Setter
    private String debugInfo = "";

    public AntifireCheckerInfobox(Plugin plugin)
    {
        super(null, plugin);
    }

    @Override
    public String getText()
    {
        // count 6 -> 1 instead of 5 -> 0
        return Integer.toString(timer + 1);
    }

    public void setThreshold(int t)
    {
        threshold = t;
    }

    @Override
    public Color getTextColor()
    {
        return timer < threshold ? Color.RED : Color.WHITE;
    }

    @Override
    public String getTooltip()
    {

        return String.format("remaining ticks of antifire effect (will start warning below %d)", threshold);
    }
}
package garden.sariya.antifirechecker;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class AntifireCheckerWarningOverlay extends OverlayPanel
{

    private final AntifireCheckerConfig config;
    private final Client client;

    @Inject
    private AntifireCheckerWarningOverlay(AntifireCheckerConfig config, AntifireCheckerPlugin plugin, Client client)
    {
        super(plugin);
        this.config = config;
        this.client = client;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        final String text = "You need to sip a Antifire Potion";

        Color color = graphics.getColor();
        graphics.setColor(config.warningColor());
        graphics.fill(new Rectangle(client.getCanvas().getSize()));
        graphics.setColor(color);
        return null;
    }

}
package garden.sariya.antifirechecker;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import java.util.Arrays;

@Slf4j
@PluginDescriptor(
	name = "Antifire Checker"
)
public class AntifireCheckerPlugin extends Plugin
{
	private static final int NO_ANTIFIRE = -1;
	private static final String[] NAMES_OF_DRAGONS_WHICH_NEED_ANTIFIRE = new String[]{
			// Metallics
			"Bronze dragon",
			"Iron dragon",
			"Steel dragon",
			"Mithril dragon",
			"Adamant dragon",
			"Rune dragon",
			// Chromatics
			"Green dragon",
			"Brutal green dragon",
			"Blue dragon",
			"Brutal blue dragon",
			"Red dragon",
			"Brutal red dragon",
			"Black dragon",
			"Brutal black dragon",
			// Technically not a chromatic, but shares mechanics
			"Lava dragon",
			"Reanimated dragon",
			// Bosses
			"Elvarg",
			"Vorkath",
			"King Black Dragon",
			"Galvek"
	};

	@Inject
	private Client client;

	@Inject
	private AntifireCheckerConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private OverlayManager overlayManager;

	private AntifireCheckerInfobox infoBox;

	@Inject
	private Notifier notifier;

	@Inject
	private AntifireCheckerTextOverlay textOverlay;

	@Inject
	private AntifireCheckerWarningOverlay warningOverlay;

	private int totalAntifireTicksLeft = NO_ANTIFIRE;
	// -1 = none
	//  1 = antifire (varbit value * 30 game ticks)
	//  2 = super antifire (varbit value * 20 game ticks)
	// source for above: https://github.com/runelite/runelite/blob/6b6f796bfdfdf7572d8d29fcfa5028da580d960e/runelite-api/src/main/java/net/runelite/api/Varbits.java#L57C2-L70C1
	private int antifireType = -1;


	private static final int[] AntifireEvents = new int[]{
			Varbits.ANTIFIRE,
			Varbits.SUPER_ANTIFIRE
	};

	@Override
	protected void startUp() throws Exception
	{
		this.infoBox = new AntifireCheckerInfobox(this);
		this.infoBoxManager.addInfoBox(this.infoBox);

		this.totalAntifireTicksLeft = NO_ANTIFIRE;

		this.infoBox.setImage(itemManager.getImage(ItemID.BOTTLED_DRAGONBREATH));
	}

	@Override
	protected void shutDown() throws Exception
	{
		this.infoBoxManager.removeInfoBox(this.infoBox);
		this.overlayManager.remove(this.textOverlay);
	}

	@Subscribe
	protected void onGameTick(GameTick tick)
	{
		--this.totalAntifireTicksLeft;
		updateOverlays();
		updateInfoBox();
	}

	@Subscribe
	protected void onVarbitChanged(VarbitChanged change)
	{
		if (Arrays.stream(AntifireEvents).anyMatch(changedVarbitId -> changedVarbitId == change.getVarbitId()))
		{
			log.debug("found varbit change we care about, vid: {}, vval: {}", change.getVarbitId(), change.getValue());
			int value = change.getValue();
			if (change.getVarbitId() == Varbits.SUPER_ANTIFIRE) {
				this.antifireType = 2;
			} else {
				this.antifireType = 1;
			}
			if (value > 0) {
				this.totalAntifireTicksLeft = this.getAntifireTicksPerValue() * change.getValue();
			} else {
				this.totalAntifireTicksLeft = NO_ANTIFIRE;
				this.onAntifirePotionExpired();
			}
		}
	}


	@Subscribe
	protected void onConfigChanged(ConfigChanged event)
	{
		this.updateOverlays();
		this.updateInfoBox();
	}

	private boolean isAntifireActive()
	{
		return this.totalAntifireTicksLeft >= 0;
	}

	private void onAntifirePotionExpired()
	{
		this.updateOverlays();
		if (config.getNotification().isEnabled())
		{
			notifier.notify(config.getNotification(), "Your antifire potion has expired");
		}

	}

	private int getAntifireTicksPerValue()
	{
		switch (antifireType) {
			case -1: // nothing, fallthrough, doesn't matter
			case 1: // antifire
				return 30;
			case 2: // super antifire
				return 20;
            default:
                throw new IllegalStateException("Unexpected value: " + antifireType);
        }
	}

	private void updateOverlays()
	{
		updateWarningOverlay();
		updateTextOverlay();
	}

	private boolean textOverlayDesired()
	{
		if (config.onlyDrawWarningWithDragonsAround())
		{
			return config.enableTextOverlay() && isNearDragons() && isAntifireNearExpiry();
		}
		return config.enableTextOverlay() && isAntifireNearExpiry();
	}
	private void updateTextOverlay()
	{
		if (this.textOverlayDesired())
		{
			if (!this.overlayManager.anyMatch(o -> o instanceof AntifireCheckerTextOverlay))
			{
				this.overlayManager.add(this.textOverlay);
			}
		} else {
			this.overlayManager.remove(this.textOverlay);
		}
	}

	private boolean warningOverlayDesired()
	{
		if (config.onlyDrawWarningWithDragonsAround())
		{
			return config.enableWarningOverlay() && isNearDragons() && isAntifireNearExpiry();
		}
		return config.enableWarningOverlay() && isAntifireNearExpiry();
	}

	private void updateWarningOverlay()
	{
		if (this.warningOverlayDesired())
		{
			if (!this.overlayManager.anyMatch(o -> o instanceof AntifireCheckerWarningOverlay))
			{
				this.overlayManager.add(this.warningOverlay);
			}
		} else {
			this.overlayManager.remove(this.warningOverlay);
		}
	}

	private boolean isAntifireNearExpiry()
	{
		return (totalAntifireTicksLeft < config.minimumRemainingAntifireTicks());
	}

	private boolean isNearDragons()
	{
		var worldView = this.client.getTopLevelWorldView();
		for (var npc : worldView.npcs()) {
			if (Arrays.stream(NAMES_OF_DRAGONS_WHICH_NEED_ANTIFIRE).anyMatch(dragonName -> dragonName.equals(npc.getName())))
				return true;
		}
		return false;
	}

	private void updateInfoBox()
	{
		if (!this.isAntifireActive() || !config.timerEnabled())
		{
			this.infoBoxManager.removeInfoBox(this.infoBox);
			return;
		}
		this.infoBox.setTimer(this.totalAntifireTicksLeft);
		if (!this.infoBoxManager.getInfoBoxes().contains(this.infoBox))
		{
			this.infoBoxManager.addInfoBox(this.infoBox);
		}
	}

	@Provides
	AntifireCheckerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AntifireCheckerConfig.class);
	}
}
package garden.sariya.antifirechecker;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class AntifireCheckerTextOverlay extends OverlayPanel
{

    private final AntifireCheckerConfig config;
    private final Client client;

    @Inject
    private AntifireCheckerTextOverlay(AntifireCheckerConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        final String text = "You need to sip a Antifire Potion";

        panelComponent.getChildren().clear();

        panelComponent.getChildren().add((LineComponent.builder())
                .left(text)
                .build());

        panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(text) - 20, 0));

        panelComponent.setBackgroundColor(config.reminderColor());

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }

}
