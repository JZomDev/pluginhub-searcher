package actionlogger;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ActionLoggerTest {
    @SuppressWarnings("unchecked")
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(ActionLoggerPlugin.class);
        RuneLite.main(args);
    }
}

package actionlogger.trackers;

import actionlogger.writers.JsonWriter;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyListener;

import javax.annotation.Nullable;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import static java.awt.event.KeyEvent.*;

@Slf4j
@RequiredArgsConstructor
public class DialogueTracker implements KeyListener {
    private static final String DIALOGUE_STARTED = "DIALOGUE_STARTED";
    private static final String DIALOGUE_ENDED = "DIALOGUE_ENDED";

    private final JsonWriter writer;
    private final Client client;
    private @Nullable DialogueEndedData dialogueEndedData = null;
    private String lastInteractedNpcName;
    private Integer lastInteractedNpcID;
    private WorldPoint lastInteractedNpcPosition;
    private Integer lastDialogueWidgetID;
    private String lastDialogueText;
    private List<String> lastDialogueOptions;

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (this.dialogueEndedData != null && this.dialogueEndedData.dialogueOptionChosen == null) {
            if (this.dialogueEndedData.dialogueOptions != null && this.dialogueEndedData.dialogueOptions.size() >= 2) {
                switch (e.getKeyCode()) {
                    case VK_1:
                        this.dialogueEndedData.dialogueOptionChosen = 1;
                        break;

                    case VK_2:
                        this.dialogueEndedData.dialogueOptionChosen = 2;
                        break;

                    case VK_3:
                        if (this.dialogueEndedData.dialogueOptions.size() >= 3) {
                            this.dialogueEndedData.dialogueOptionChosen = 3;
                        }
                        break;

                    case VK_4:
                        if (this.dialogueEndedData.dialogueOptions.size() >= 4) {
                            this.dialogueEndedData.dialogueOptionChosen = 4;
                        }
                        break;

                    case VK_5:
                        if (this.dialogueEndedData.dialogueOptions.size() >= 5) {
                            this.dialogueEndedData.dialogueOptionChosen = 5;
                        }
                        break;

                    case VK_6:
                        if (this.dialogueEndedData.dialogueOptions.size() >= 6) {
                            this.dialogueEndedData.dialogueOptionChosen = 6;
                        }
                        break;

                    case VK_7:
                        if (this.dialogueEndedData.dialogueOptions.size() >= 7) {
                            this.dialogueEndedData.dialogueOptionChosen = 7;
                        }
                        break;
                }
            } else {
                if (e.getKeyCode() == VK_SPACE) {
                    this.dialogueEndedData.dialogueOptionChosen = -1;
                }
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    private void beginDialogue(String actorName, Integer actorID, String text, List<String> options) {
        assert this.dialogueEndedData == null;

        var localPlayer = client.getLocalPlayer();
        if (localPlayer == null) {
            log.debug("Dialogue began, but no local player found");
            return;
        }

        var playerPosition = localPlayer.getWorldLocation();

        this.writer.write(DIALOGUE_STARTED, new DialogueStartedData(actorName, actorID, lastInteractedNpcName, lastInteractedNpcID, lastInteractedNpcPosition, playerPosition, text, options));

        this.dialogueEndedData = new DialogueEndedData(actorName, actorID, lastInteractedNpcName, lastInteractedNpcID, lastInteractedNpcPosition, playerPosition, text, options);

        this.lastDialogueText = text;
        this.lastDialogueOptions = options;
    }

    private void endDialogue() {
        assert this.dialogueEndedData != null;

        this.writer.write(DIALOGUE_ENDED, this.dialogueEndedData);

        this.dialogueEndedData = null;
    }

    @Subscribe
    public void onInteractingChanged(InteractingChanged event) {
        if (event.getSource() == client.getLocalPlayer() && event.getTarget() != null) {
            var target = event.getTarget();
            if (target instanceof NPC) {
                var npc = ((NPC) target);
                lastInteractedNpcName = npc.getName();
                lastInteractedNpcID = npc.getId();
                lastInteractedNpcPosition = npc.getWorldLocation();
            } else {
                log.debug("Interacting changed to '{}' (NON NPC)", event.getTarget().getName());
            }
        }
    }

    @Subscribe
    void onGameTick(GameTick e) {
        var npcDialogueTextWidget = client.getWidget(ComponentID.DIALOG_NPC_TEXT);
        var playerDialogueTextWidget = client.getWidget(ComponentID.DIALOG_PLAYER_TEXT);
        var playerDialogueOptionsWidget = client.getWidget(ComponentID.DIALOG_OPTION_OPTIONS);
        // TODO: Implement other widgets (as seen in the crowd-sourcing plugin)
        // Ensure quest dialogue that appears during quest cutscenes work as expected

        if (this.dialogueEndedData != null && this.lastDialogueWidgetID != null) {
            var w = client.getWidget(this.lastDialogueWidgetID);
            if (w == null) {
                // Previous widget closed, so the dialogue ended
                this.endDialogue();
            } else {
                if (!w.getText().equals(this.lastDialogueText)) {
                    // The same widget is open, but the text has changed
                    this.endDialogue();
                } else {
                    var children = w.getChildren();
                    if (children != null) {
                        var dialogueOptions = Arrays.stream(children).filter(Objects::nonNull).map(Widget::getText).filter(s -> !s.isBlank()).collect(Collectors.toList());
                        if (!dialogueOptions.equals(this.lastDialogueOptions)) {
                            // The same widget is option, but the options have changed
                            this.endDialogue();
                        }
                    }
                }
            }
        }

        if (this.dialogueEndedData == null) {
            if (npcDialogueTextWidget != null) {
                this.lastDialogueWidgetID = npcDialogueTextWidget.getId();

                String actorName = null;
                Integer actorID = null;
                var modelWidget = client.getWidget(ComponentID.DIALOG_NPC_HEAD_MODEL);
                if (modelWidget != null) {
                    actorID = modelWidget.getModelId();
                }
                var nameWidget = client.getWidget(ComponentID.DIALOG_NPC_NAME);
                if (nameWidget != null) {
                    actorName = nameWidget.getText();
                }

                this.beginDialogue(actorName, actorID, npcDialogueTextWidget.getText(), null);
            } else if (playerDialogueTextWidget != null) {
                this.lastDialogueWidgetID = playerDialogueTextWidget.getId();

                String actorName = client.getLocalPlayer().getName();

                this.beginDialogue(actorName, null, playerDialogueTextWidget.getText(), null);
            } else if (playerDialogueOptionsWidget != null) {
                this.lastDialogueWidgetID = playerDialogueOptionsWidget.getId();

                var children = playerDialogueOptionsWidget.getChildren();
                if (children == null) {
                    log.debug("Dialog options without children?");
                    return;
                }
                var dialogueOptions = Arrays.stream(children).filter(Objects::nonNull).map(Widget::getText).filter(s -> !s.isBlank()).collect(Collectors.toList());

                String actorName = client.getLocalPlayer().getName();

                this.beginDialogue(actorName, null, playerDialogueOptionsWidget.getText(), dialogueOptions);
            }
        }
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked e) {
        if (e.getMenuAction() == MenuAction.WIDGET_CONTINUE) {
            if (this.dialogueEndedData != null && this.dialogueEndedData.dialogueOptionChosen == null) {
                // 1-indexed, so first option is 1, second option is 2
                this.dialogueEndedData.dialogueOptionChosen = e.getParam0();
            }
        }
    }


    @Value
    private static class DialogueStartedData {
        String actorName;
        Integer actorID;
        String lastInteractedName;
        Integer lastInteractedID;
        WorldPoint lastInteractedPosition;
        WorldPoint playerPosition;
        String dialogueText;
        List<String> dialogueOptions;
    }

    @Data
    private static class DialogueEndedData {
        private final String actorName;
        private final Integer actorID;
        private final String lastInteractedName;
        private final Integer lastInteractedID;
        private final WorldPoint lastInteractedPosition;
        private final WorldPoint playerPosition;
        private final String dialogueText;
        private final List<String> dialogueOptions;
        private Integer dialogueOptionChosen = -1;
    }
}

package actionlogger.trackers;

import actionlogger.writers.JsonWriter;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.eventbus.Subscribe;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@RequiredArgsConstructor
public class InventoryTracker {
    private static final String TYPE = "INVENTORY_CHANGED";

    private final JsonWriter writer;

    private List<Integer> inventoryItemIDs = List.of(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        if (event.getContainerId() != InventoryID.INVENTORY.getId()) {
            return;
        }

        var items = event.getItemContainer().getItems();
        var itemIDs = Arrays.stream(items).map(Item::getId).collect(Collectors.toList());

        if (!inventoryItemIDs.equals(itemIDs)) {
            this.writer.write(TYPE, new InventoryChangedData(this.inventoryItemIDs, itemIDs));
            this.inventoryItemIDs = itemIDs;
        }
    }

    @Value
    private static class InventoryChangedData {
        List<Integer> oldInventory;
        List<Integer> newInventory;
    }
}

package actionlogger.trackers;

import actionlogger.writers.JsonWriter;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.eventbus.Subscribe;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@Slf4j
@RequiredArgsConstructor
public class VarTracker {
    private static final String VARB_TYPE = "VARBIT_CHANGED";
    private static final String VARP_TYPE = "VARPLAYER_CHANGED";

    private static final Set<Integer> IGNORED_VARBITS = Set.of(1, 2, 3);
    private static final Set<Integer> IGNORED_VARPS = Set.of(1, 2, 3);

    private final JsonWriter writer;
    private final Map<Integer, Integer> varbits = new HashMap<>();
    private final Map<Integer, Integer> varps = new HashMap<>();

    @Subscribe
    public void onVarbitChanged(VarbitChanged event) {
        var id = event.getVarbitId();

        if (id == -1) {
            // varp changed
            this.handleChange(event.getVarpId(), event.getValue(), IGNORED_VARPS, varps, VARP_TYPE);
        } else {
            // varbit changed
            this.handleChange(id, event.getValue(), IGNORED_VARBITS, varbits, VARB_TYPE);
        }
    }

    private void handleChange(int id, int value, Set<Integer> ignored, Map<Integer, Integer> map, String type) {
        if (ignored.contains(id)) {
            return;
        }

        var previous = map.put(id, value);
        var prevValue = previous != null ? previous : 0;

        if (prevValue != value) {
            this.writer.write(type, new VarChangedData(id, prevValue, value));
        }
    }

    @Value
    private static class VarChangedData {
        int id;
        int oldValue;
        int newValue;
    }
}

package actionlogger;

import java.time.Instant;
import java.time.temporal.ChronoUnit;

public class Utils {

    public static String getTimestamp() {
        return Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
    }
}

package actionlogger.writers;

import actionlogger.Utils;
import com.google.gson.Gson;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.RuneLite;

import javax.annotation.Nonnull;
import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.ExecutorService;

@Slf4j
public class JsonWriter implements Closeable {
    private final Gson gson;
    private final Client client;
    private final ExecutorService executor;
    private final BufferedWriter fh;

    public JsonWriter(Gson gson, Client client, ExecutorService executor) throws IOException {
        this.gson = gson;
        this.client = client;
        this.executor = executor;

        var dir = new File(RuneLite.RUNELITE_DIR, "action-logger");
        //noinspection ResultOfMethodCallIgnored
        dir.mkdir();

        var path = dir.toPath().resolve(String.format("%d-logs.txt", System.currentTimeMillis()));
        this.fh = Files.newBufferedWriter(path);
    }

    public void write(@Nonnull String type, @Nonnull Object data) {
        var payload = new Payload(this.client.getTickCount(), Utils.getTimestamp(), type, data);
        executor.execute(() -> {
            try {
                fh.write(gson.toJson(payload));
                fh.newLine();
                fh.flush();
            } catch (IOException e) {
                log.warn("Failed to write DialogueTracker data: {}", e.getMessage());
            }
        });
    }

    @Override
    public void close() throws IOException {
        fh.close();
    }

    @Value
    private static class Payload {
        int tick;
        String ts;
        String type;
        Object data;
    }
}

package actionlogger;

import actionlogger.trackers.DialogueTracker;
import actionlogger.trackers.InventoryTracker;
import actionlogger.trackers.VarTracker;
import actionlogger.writers.JsonWriter;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ClientShutdown;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.io.IOException;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(name = "Action Logger", description = "Log user & server actions to disk", tags = {"actionlogger"})
public class ActionLoggerPlugin extends Plugin {
    private @Inject KeyManager keyManager;
    private @Inject EventBus eventBus;
    private @Inject Client client;
    private @Inject Gson gson;
    private @Inject ScheduledExecutorService executor;

    private DialogueTracker dialogueTracker = null;
    private VarTracker varTracker = null;
    private InventoryTracker inventoryTracker = null;
    private JsonWriter writer = null;

    @Override
    protected void startUp() throws IOException {
        writer = new JsonWriter(gson, client, executor);

        dialogueTracker = new DialogueTracker(writer, client);
        eventBus.register(dialogueTracker);
        keyManager.registerKeyListener(dialogueTracker);

        varTracker = new VarTracker(writer);
        eventBus.register(varTracker);

        inventoryTracker = new InventoryTracker(writer);
        eventBus.register(inventoryTracker);

        log.debug("Started up Action Logger");
    }

    @Override
    protected void shutDown() throws IOException {
        keyManager.unregisterKeyListener(dialogueTracker);
        eventBus.unregister(dialogueTracker);
        dialogueTracker = null;

        eventBus.unregister(varTracker);
        varTracker = null;

        eventBus.unregister(inventoryTracker);
        inventoryTracker = null;

        writer.close();
        writer = null;

        log.debug("Shut down Action Logger");
    }

    @Subscribe
    protected void onClientShutdown(ClientShutdown event) {
        try {
            writer.close();
        } catch (Exception e) {
            log.warn("Failed to close writer", e);
        }
    }
}

