/*
 * Copyright (c) 2020, Robert Espinoza
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mouseclickcounter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MouseClickCounterPluginTest
{
	public static void main(String[] args) throws Exception
	{
		//ExternalPluginManager.loadBuiltin(com.mouseclickcounter.MouseClickCounterPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, Robert Espinoza
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mouseclickcounter;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.Collections;
import javax.inject.Inject;
import net.runelite.api.MenuAction;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class MouseClickCounterOverlay extends Overlay
{
	private final PanelComponent panelComponent = new PanelComponent();
	private final MouseClickCounterConfig config;
	private final MouseClickCounterPlugin plugin;
	private int size;
	private ArrayList<Integer> previousSelections;

	@Inject
	private MouseClickCounterOverlay(MouseClickCounterConfig config,
		MouseClickCounterPlugin plugin)
	{
		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		this.config = config;
		this.size = 0;
		this.plugin = plugin;
		this.previousSelections = new ArrayList<>();
		getMenuEntries().add(
			new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG,
				OPTION_CONFIGURE, "Mouse click counter overlay"));
	}

	private int getSize(Graphics2D graphics)
	{
		int configSize = 0;
		ArrayList<Integer> currentSelections = new ArrayList<>();
		if(config.showTotalClick())
		{
			String totalString = "Clicks: " +
				this.plugin.getTotalClickCounter();
			int totalSize = graphics.getFontMetrics().stringWidth(totalString);
			configSize = Math.max(configSize, totalSize);
			currentSelections.add(0);
		}

		if(config.showLeftClick())
		{
			String leftString = "Left: " + this.plugin.getLeftClickCounter();
			int leftSize = graphics.getFontMetrics().stringWidth(leftString);
			configSize = Math.max(configSize, leftSize);
			currentSelections.add(1);
		}

		if(config.showRightClick())
		{
			String rightString = "Right: " +
				this.plugin.getRightClickCounter();
			int rightSize = graphics.getFontMetrics().stringWidth(rightString);
			configSize = Math.max(configSize, rightSize);
			currentSelections.add(2);
		}

		if(config.showMiddleClick())
		{
			String middleString = "Middle: " +
				this.plugin.getMiddleClickCounter();
			int middleSize = graphics.getFontMetrics().stringWidth(middleString);
			configSize = Math.max(configSize, middleSize);
			currentSelections.add(3);
		}

		Collections.sort(currentSelections);
		if(!currentSelections.equals(previousSelections))
		{
			this.size = configSize;
			previousSelections = currentSelections;
		}

		else
		{
			if (this.size + 5 < configSize)
			{
				this.size = configSize;
			}

		}

		return this.size;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		panelComponent.getChildren().clear();
		panelComponent.setPreferredSize(new Dimension(getSize(graphics)+15,0));
		if(!config.hide())
		{
			if(config.showTotalClick())
			{
				panelComponent.getChildren().add(LineComponent.builder()
					.left("Clicks: ")
					.right(""+this.plugin.getTotalClickCounter())
					.build());
			}

			if(config.showLeftClick())
			{
				panelComponent.getChildren().add(LineComponent.builder()
					.left("Left: ")
					.right(""+this.plugin.getLeftClickCounter())
					.build());
			}

			if(config.showRightClick())
			{
				panelComponent.getChildren().add(LineComponent.builder()
					.left("Right: ")
					.right(""+this.plugin.getRightClickCounter())
					.build());
			}

			if(config.showMiddleClick())
			{
				panelComponent.getChildren().add(LineComponent.builder()
					.left("Middle: ")
					.right(""+this.plugin.getMiddleClickCounter())
					.build());
			}

		}

		return panelComponent.render(graphics);
	}
}
/*
 * Copyright (c) 2020, Robert Espinoza
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mouseclickcounter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("mouseclickcounter")
public interface MouseClickCounterConfig extends Config
{
	@ConfigItem(
		position = 1,
		keyName = "hide",
		name = "Hide Overlay",
		description = "Toggle the display of any click count"
	)
	default boolean hide() { return false; }

	@ConfigItem(
		position = 2,
		keyName = "showTotalClick",
		name = "Show all click totals",
		description = "Toggle the display of all mouse clicks"
	)
	default boolean showTotalClick() { return true; }

	@ConfigItem(
		position = 3,
		keyName = "showLeftClick",
		name = "Show left click totals",
		description = "Toggle the display of the left mouse clicks"
	)
	default boolean showLeftClick() { return false; }

	@ConfigItem(
		position = 4,
		keyName = "showRightClick",
		name = "Show right click totals",
		description = "Toggle the display of the right mouse clicks"
	)
	default boolean showRightClick() { return false; }

	@ConfigItem(
		position = 5,
		keyName = "showMiddleClick",
		name = "Show middle click totals",
		description = "Toggle the display of the middle mouse clicks"
	)
	default boolean showMiddleClick() { return false; }

}


/*
 * Copyright (c) 2020, Robert Espinoza
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mouseclickcounter;

import com.google.inject.Provides;
import java.io.IOException;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Mouse Click Counter"
)
public class MouseClickCounterPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private MouseClickCounterConfig config;

	@Inject
	private MouseManager mouseManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MouseClickCounterOverlay overlay;

	private MouseClickCounterListener mouseListener;

	@Override
	protected void startUp() throws Exception
	{
		mouseListener = new MouseClickCounterListener(client);
		mouseManager.registerMouseListener(mouseListener);
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		mouseListener.saveMouseClicks();
		mouseManager.unregisterMouseListener(mouseListener);
		mouseListener = null;
		overlayManager.remove(overlay);
	}

	@Override
	public void resetConfiguration()
	{
		mouseListener.resetMouseClickCounterListener();
	}

	@Provides
	MouseClickCounterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MouseClickCounterConfig.class);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event) throws IOException
	{
		GameState state = event.getGameState();
		if(state == GameState.LOGIN_SCREEN || state == GameState.UNKNOWN)
		{
			mouseListener.saveMouseClicks();
		}
	}

	public int getLeftClickCounter()
	{
		return mouseListener.getLeftClickCounter();
	}

	public int getRightClickCounter()
	{
		return mouseListener.getRightClickCounter();
	}

	public int getMiddleClickCounter()
	{
		return mouseListener.getMiddleClickCounter();
	}

	public int getTotalClickCounter()
	{
		return mouseListener.getTotalClickCounter();
	}
}

/*
 * Copyright (c) 2020, Robert Espinoza
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mouseclickcounter;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.SwingUtilities;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.client.input.MouseAdapter;
import static net.runelite.client.RuneLite.RUNELITE_DIR;

public class MouseClickCounterListener extends MouseAdapter
{
	private int leftClickCounter;
	private int rightClickCounter;
	private int middleClickCounter;
	private int totalClickCounter;
	private final Client client;
	private final File CLICK_TOTAL_DIR =
		new File(RUNELITE_DIR,"mouseClickCounter");
	private final File CLICK_TOTAL_FILE =
		new File(CLICK_TOTAL_DIR, "click_totals.log");
	private final int SAVE_PERIODICITY = 50;
	private final int NUM_CLICK_TYPES = 4;
	private enum FILE_CLICK_TYPE_INDICES {
		TOTAL(0),
		LEFT(1),
		RIGHT(2),
		MIDDLE(3);
		private final int index;
		FILE_CLICK_TYPE_INDICES(final int newIndex)
		{
			index = newIndex;
		}
		public int getValue() { return index; }
	}

	MouseClickCounterListener(Client client) throws FileNotFoundException
	{
		loadMouseClicks();
		this.client = client;
	}

	@Override
	public MouseEvent mousePressed(MouseEvent event)
	{
		if(client.getGameState() == GameState.LOGGED_IN)
		{

			if (SwingUtilities.isLeftMouseButton(event))
			{
				this.leftClickCounter++;
				this.totalClickCounter++;
			}

			else if (SwingUtilities.isRightMouseButton(event))
			{
				this.rightClickCounter++;
				this.totalClickCounter++;
			}

			else if (SwingUtilities.isMiddleMouseButton(event))
			{
				this.middleClickCounter++;
				this.totalClickCounter++;
			}

			if (this.totalClickCounter%SAVE_PERIODICITY == 0)
			{
				try
				{
					saveMouseClicks();
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		}
		return event;
	}

	public int getLeftClickCounter() { return this.leftClickCounter; }

	public int getRightClickCounter() { return this.rightClickCounter; }

	public int getMiddleClickCounter() { return this.middleClickCounter; }

	public int getTotalClickCounter() { return this.totalClickCounter; }

	public void resetMouseClickCounterListener()
	{
		this.leftClickCounter = 0;
		this.rightClickCounter = 0;
		this.middleClickCounter = 0;
		this.totalClickCounter = 0;
		try
		{
			saveMouseClicks();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public void saveMouseClicks() throws IOException
	{
		if(!this.CLICK_TOTAL_FILE.exists())
		{
			try
			{
				if(!this.CLICK_TOTAL_FILE.createNewFile())
				{
					System.out.println("Failed to create log file");
				}
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}
		FileWriter writer = new FileWriter(this.CLICK_TOTAL_FILE);

		Integer[] totals = {this.getTotalClickCounter(),
			this.getLeftClickCounter(),
			this.getRightClickCounter(),
			this.getMiddleClickCounter()};

		writer.write(totals[FILE_CLICK_TYPE_INDICES.TOTAL.getValue()] + " ");
		writer.write(totals[FILE_CLICK_TYPE_INDICES.LEFT.getValue()] + " ");
		writer.write(totals[FILE_CLICK_TYPE_INDICES.RIGHT.getValue()] + " ");
		writer.write(totals[FILE_CLICK_TYPE_INDICES.MIDDLE.getValue()] + " ");
		writer.close();
	}

	public void loadMouseClicks() throws FileNotFoundException
	{
		if(!this.CLICK_TOTAL_DIR.mkdir() && this.CLICK_TOTAL_FILE.exists())
		{
			Scanner scanner = new Scanner(this.CLICK_TOTAL_FILE);
			int [] totals = new int[NUM_CLICK_TYPES];
			int ii = 0;
			while(scanner.hasNextInt())
			{
				totals[ii++] = scanner.nextInt();
			}
			if(ii != NUM_CLICK_TYPES)
			{
				resetMouseClickCounterListener();
			}
			else
			{
				this.leftClickCounter =
					totals[FILE_CLICK_TYPE_INDICES.LEFT.getValue()];
				this.rightClickCounter =
					totals[FILE_CLICK_TYPE_INDICES.RIGHT.getValue()];
				this.middleClickCounter =
					totals[FILE_CLICK_TYPE_INDICES.MIDDLE.getValue()];
				this.totalClickCounter =
					totals[FILE_CLICK_TYPE_INDICES.TOTAL.getValue()];
			}
		}
		else
		{
			try
			{
				if(this.CLICK_TOTAL_FILE.createNewFile())
				{
					this.leftClickCounter = 0;
					this.rightClickCounter = 0;
					this.middleClickCounter = 0;
					this.totalClickCounter = 0;
				}
				else
				{
					System.out.println("Failed to create log file");
				}
			}
			catch (IOException e)
			{
				System.out.println("An error occurred creating the log file");
				e.printStackTrace();
			}
		}
	}
}

