/*
 * Copyright (c) 2022, Patrick <https://github.com/pwatts6060>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.guestindicators;

import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.clan.ClanRank;

@Singleton
public class ClanGuestTracker
{
	@Inject
	private Client client;

	private Map<String, ClanRank> clanPlayersToRank = new HashMap<>();
	private Map<String, ClanRank> guestClanPlayersToRank = new HashMap<>();

	void updateClan(boolean isGuestClan)
	{
		ClanChannel clanChannel = isGuestClan ? client.getGuestClanChannel() : client.getClanChannel();
		Map<String, ClanRank> playersToRank = isGuestClan ? guestClanPlayersToRank : clanPlayersToRank;
		if (clanChannel == null)
		{
			playersToRank.clear();
			return;
		}

		Map<String, ClanRank> updatedMap = new HashMap<>(playersToRank.size() * 4 / 3);
		for (ClanChannelMember member : clanChannel.getMembers())
		{
			updatedMap.put(member.getName(), member.getRank());
		}

		if (isGuestClan)
		{
			guestClanPlayersToRank = updatedMap;
		}
		else
		{
			clanPlayersToRank = updatedMap;
		}
	}

	boolean isClanGuest(Player player)
	{
		if (clanPlayersToRank.containsKey(player.getName()))
		{
			return clanPlayersToRank.get(player.getName()).equals(ClanRank.GUEST);
		}
		return false;
	}

	boolean isGuestClanGuest(Player player)
	{
		if (guestClanPlayersToRank.containsKey(player.getName()))
		{
			return guestClanPlayersToRank.get(player.getName()).equals(ClanRank.GUEST);
		}
		return false;
	}

	public boolean isGuestClanMember(Player player)
	{
		if (guestClanPlayersToRank.containsKey(player.getName()))
		{
			return !guestClanPlayersToRank.get(player.getName()).equals(ClanRank.GUEST);
		}
		return false;
	}
}

package com.guestindicators;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.Color;

@ConfigGroup("guestindicators")
public interface GuestIndicatorsConfig extends Config
{
	@ConfigSection(
		name = "Highlight Options",
		description = "Toggle highlighted players by type (self, friends, etc.) and choose their highlight colors",
		position = 99
	)
	String highlightSection = "section";

	@ConfigItem(
		position = 10,
		keyName = "drawClanChatGuestNames",
		name = "Highlight clan guests",
		description = "Configures whether or not clan guests should be highlighted",
		section = highlightSection
	)
	default boolean highlightClanGuests()
	{
		return false;
	}

	@ConfigItem(
		position = 11,
		keyName = "clanChatGuestColor",
		name = "Clan guest",
		description = "Color of clan guests",
		section = highlightSection
	)
	default Color getClanGuestColor()
	{
		return new Color(20, 115, 34);
	}

	@ConfigItem(
		position = 12,
		keyName = "drawGuestClanChatMemberNames",
		name = "Highlight guest clan members",
		description = "Configures whether or not guest clan members should be highlighted",
		section = highlightSection
	)
	default boolean highlightGuestClanMembers()
	{
		return false;
	}

	@ConfigItem(
		position = 13,
		keyName = "guestClanChatMemberColor",
		name = "Guest clan member",
		description = "Color of guest clan members",
		section = highlightSection
	)
	default Color getGuestClanMemberColor()
	{
		return new Color(224, 152, 0);
	}

	@ConfigItem(
		position = 14,
		keyName = "drawGuestClanChatGuestNames",
		name = "Highlight guest clan guests",
		description = "Configures whether or not guest clan guests should be highlighted",
		section = highlightSection
	)
	default boolean highlightGuestClanGuests()
	{
		return false;
	}

	@ConfigItem(
		position = 15,
		keyName = "guestClanChatGuestColor",
		name = "Guest Clan guest",
		description = "Color of guest clan guests",
		section = highlightSection
	)
	default Color getGuestClanGuestColor()
	{
		return new Color(202, 196, 147);
	}

	@ConfigItem(
		position = 16,
		keyName = "guestClanchatMenuIcons",
		name = "Show guest clan chat ranks",
		description = "Add guest clan chat rank to right click menu and next to player names"
	)
	default boolean showGuestClanChatRanks()
	{
		return false;
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.guestindicators;

import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.clan.ClanRank;
import net.runelite.api.clan.ClanSettings;
import net.runelite.api.clan.ClanTitle;
import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.Color;
import java.util.function.BiConsumer;

import static com.guestindicators.OrigConfig.*;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.playerindicators.PlayerIndicatorsConfig;
import static net.runelite.client.plugins.playerindicators.PlayerIndicatorsConfig.HighlightSetting.*;

@Singleton
public class GuestIndicatorsService
{
	private final Client client;
	private final GuestIndicatorsConfig config;
	private final ConfigManager configManager;
	private final ClanGuestTracker clanGuestTracker;
	private final PartyService partyService;

	@Inject
	private GuestIndicatorsService(Client client, GuestIndicatorsConfig config, ConfigManager configManager, ClanGuestTracker clanGuestTracker, PartyService partyService)
	{
		this.config = config;
		this.client = client;
		this.configManager = configManager;
		this.clanGuestTracker = clanGuestTracker;
		this.partyService = partyService;
	}

	public void forEachPlayer(final BiConsumer<Player, Color> consumer)
	{
		if (!config.highlightClanGuests() && !config.highlightGuestClanMembers()
			&& !config.highlightGuestClanGuests())
		{
			return;
		}

		final Player localPlayer = client.getLocalPlayer();

		for (Player player : client.getPlayers())
		{
			if (player == null || player.getName() == null || player == localPlayer
				|| partyService.isInParty()
				&& !configManager.getConfiguration(groupName, HIGHLIGHT_PARTY_MEMBERS, PlayerIndicatorsConfig.HighlightSetting.class).equals(DISABLED)
				&& partyService.getMemberByDisplayName(player.getName()) != null
				|| player.isFriend() && !configManager.getConfiguration(groupName, DRAW_FRIEND_NAMES, PlayerIndicatorsConfig.HighlightSetting.class).equals(DISABLED)
				|| player.isFriendsChatMember() && !configManager.getConfiguration(groupName, HIGHLIGHT_FRIENDS_CHAT, PlayerIndicatorsConfig.HighlightSetting.class).equals(DISABLED)
				|| !configManager.getConfiguration(groupName, HIGHLIGHT_TEAM_MEMBERS, PlayerIndicatorsConfig.HighlightSetting.class).equals(DISABLED)
				&& localPlayer.getTeam() > 0 && localPlayer.getTeam() == player.getTeam()
				|| player.isClanMember() && !configManager.getConfiguration(groupName, HIGHLIGHT_CLAN_MEMBERS, PlayerIndicatorsConfig.HighlightSetting.class).equals(DISABLED))
			{
				continue;
			}

			if (config.highlightGuestClanMembers() && clanGuestTracker.isGuestClanMember(player))
			{
				consumer.accept(player, config.getGuestClanMemberColor());
			}
			else if (config.highlightClanGuests() && clanGuestTracker.isClanGuest(player))
			{
				consumer.accept(player, config.getClanGuestColor());
			}
			else if (config.highlightGuestClanGuests() && clanGuestTracker.isGuestClanGuest(player))
			{
				consumer.accept(player, config.getGuestClanGuestColor());
			}
		}
	}

	ClanTitle getClanTitle(Player player)
	{
		return getChatTitle(player, client.getClanChannel(), client.getClanSettings());
	}

	ClanTitle getGuestClanTitle(Player player)
	{
		return getChatTitle(player, client.getGuestClanChannel(), client.getGuestClanSettings());
	}

	private ClanTitle getChatTitle(Player player, ClanChannel clanChannel, ClanSettings clanSettings)
	{
		if (clanChannel == null || clanSettings == null)
		{
			return null;
		}

		ClanChannelMember member = clanChannel.findMember(player.getName());
		if (member == null)
		{
			return null;
		}

		ClanRank rank = member.getRank();
		return clanSettings.titleForRank(rank);
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * Copyright (c) 2019, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.guestindicators;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.clan.ClanTitle;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ChatIconManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.Text;

import static com.guestindicators.OrigConfig.*;

@Singleton
public class GuestIndicatorsOverlay extends Overlay
{
	private static final int ACTOR_OVERHEAD_TEXT_MARGIN = 40;
	private static final int ACTOR_HORIZONTAL_TEXT_MARGIN = 10;

	private final GuestIndicatorsService guestIndicatorsService;
	private final GuestIndicatorsConfig config;
	private final ConfigManager configManager;
	private final ChatIconManager chatIconManager;
	private final ClanGuestTracker clanGuestTracker;

	@Inject
	private GuestIndicatorsOverlay(GuestIndicatorsConfig config, GuestIndicatorsService guestIndicatorsService,
								   ConfigManager configManager, ChatIconManager chatIconManager, ClanGuestTracker clanGuestTracker)
	{
		this.config = config;
		this.guestIndicatorsService = guestIndicatorsService;
		this.configManager = configManager;
		this.chatIconManager = chatIconManager;
		this.clanGuestTracker = clanGuestTracker;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGH);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		guestIndicatorsService.forEachPlayer((player, color) -> renderPlayerOverlay(graphics, player, color));
		return null;
	}

	private void renderPlayerOverlay(Graphics2D graphics, Player actor, Color color)
	{
		String drawPlayerNamesConfig = configManager.getConfiguration(groupName, PLAYER_NAME_POSITION, String.class);
		if ("DISABLED".equals(drawPlayerNamesConfig))
		{
			return;
		}

		final int zOffset;
		switch (drawPlayerNamesConfig)
		{
			case "MODEL_CENTER":
			case "MODEL_RIGHT":
				zOffset = actor.getLogicalHeight() / 2;
				break;
			default:
				zOffset = actor.getLogicalHeight() + ACTOR_OVERHEAD_TEXT_MARGIN;
		}

		final String name = Text.sanitize(actor.getName());
		Point textLocation = actor.getCanvasTextLocation(graphics, name, zOffset);

		if (drawPlayerNamesConfig.equals("MODEL_RIGHT"))
		{
			textLocation = actor.getCanvasTextLocation(graphics, "", zOffset);

			if (textLocation == null)
			{
				return;
			}

			textLocation = new Point(textLocation.getX() + ACTOR_HORIZONTAL_TEXT_MARGIN, textLocation.getY());
		}

		if (textLocation == null)
		{
			return;
		}

		boolean other = configManager.getConfiguration(groupName, HIGHLIGHT_OTHERS, Boolean.class);

		BufferedImage rankImage = null;
		if (actor.isFriendsChatMember()
			&& (boolean) configManager.getConfiguration(groupName, HIGHLIGHT_FRIENDS_CHAT, Boolean.class)
			&& (boolean) configManager.getConfiguration(groupName, SHOW_FRIENDS_CHAT_RANKS, Boolean.class)
			|| actor.isClanMember()
			&& (boolean) configManager.getConfiguration(groupName, HIGHLIGHT_CLAN_MEMBERS, Boolean.class)
			&& (boolean) configManager.getConfiguration(groupName, SHOW_CLAN_CHAT_RANKS, Boolean.class))
		{
			// handled by Player Indicators
			other = false;
		}
		else if (clanGuestTracker.isClanGuest(actor) && config.highlightClanGuests()
			&& (boolean) configManager.getConfiguration(groupName, SHOW_CLAN_CHAT_RANKS, Boolean.class))
		{
			ClanTitle clanTitle = guestIndicatorsService.getClanTitle(actor);
			if (clanTitle != null)
			{
				rankImage = chatIconManager.getRankImage(clanTitle);
			}
		}
		else if (config.showGuestClanChatRanks()
			&& (clanGuestTracker.isGuestClanMember(actor) && config.highlightGuestClanMembers()
			|| clanGuestTracker.isGuestClanGuest(actor) && clanGuestTracker.isGuestClanGuest(actor)))
		{
			ClanTitle clanTitle = guestIndicatorsService.getGuestClanTitle(actor);
			if (clanTitle != null)
			{
				rankImage = chatIconManager.getRankImage(clanTitle);
			}
		}

		if (rankImage != null)
		{
			final int imageWidth = rankImage.getWidth();
			final int imageTextMargin;
			final int imageNegativeMargin;

			if (drawPlayerNamesConfig.equals("MODEL_RIGHT"))
			{
				imageTextMargin = imageWidth;
				imageNegativeMargin = other ? imageWidth : 0;
			}
			else
			{
				imageTextMargin = imageWidth / 2;
				imageNegativeMargin = other ? imageWidth : imageWidth / 2;
			}

			final int textHeight = graphics.getFontMetrics().getHeight() - graphics.getFontMetrics().getMaxDescent();
			final Point imageLocation = new Point(textLocation.getX() - imageNegativeMargin - 1, textLocation.getY() - textHeight / 2 - rankImage.getHeight() / 2);
			OverlayUtil.renderImageLocation(graphics, imageLocation, rankImage);

			// move text
			if (!other)
			{
				textLocation = new Point(textLocation.getX() + imageTextMargin, textLocation.getY());
			}
		}

		OverlayUtil.renderTextLocation(graphics, textLocation, name, color);
	}
}
/*
 * Copyright (c) 2018, Kamiel <https://github.com/Kamielvf>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.guestindicators;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import javax.inject.Inject;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import static com.guestindicators.OrigConfig.DRAW_TILES;
import static com.guestindicators.OrigConfig.groupName;

public class GuestIndicatorsTileOverlay extends Overlay
{
	private final GuestIndicatorsService guestIndicatorsService;
	private final ConfigManager configManager;

	@Inject
	private GuestIndicatorsTileOverlay(GuestIndicatorsService guestIndicatorsService, ConfigManager configManager)
	{
		this.guestIndicatorsService = guestIndicatorsService;
		this.configManager = configManager;
		setLayer(OverlayLayer.ABOVE_SCENE);
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGH);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!(boolean) configManager.getConfiguration(groupName, DRAW_TILES, Boolean.class))
		{
			return null;
		}

		guestIndicatorsService.forEachPlayer((player, color) ->
		{
			final Polygon poly = player.getCanvasTilePoly();

			if (poly != null)
			{
				OverlayUtil.renderPolygon(graphics, poly, color);
			}
		});

		return null;
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.guestindicators;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Player;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import static com.guestindicators.OrigConfig.*;

@Singleton
public class GuestIndicatorsMinimapOverlay extends Overlay
{
	private final GuestIndicatorsService guestIndicatorsService;
	private final GuestIndicatorsConfig config;
	private final ConfigManager configManager;

	@Inject
	private GuestIndicatorsMinimapOverlay(GuestIndicatorsConfig config, GuestIndicatorsService guestIndicatorsService, ConfigManager configManager)
	{
		this.config = config;
		this.guestIndicatorsService = guestIndicatorsService;
		this.configManager = configManager;
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGHEST);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		guestIndicatorsService.forEachPlayer((player, color) -> renderPlayerOverlay(graphics, player, color));
		return null;
	}

	private void renderPlayerOverlay(Graphics2D graphics, Player actor, Color color)
	{
		final String name = actor.getName().replace('\u00A0', ' ');


		if (configManager.getConfiguration(groupName, DRAW_MINIMAP_NAMES, Boolean.class))
		{
			final net.runelite.api.Point minimapLocation = actor.getMinimapLocation();

			if (minimapLocation != null)
			{
				OverlayUtil.renderTextLocation(graphics, minimapLocation, name, color);
			}
		}
	}
}

package com.guestindicators;

public class OrigConfig
{
	public static final String groupName = "playerindicators";
	public static final String DRAW_FRIEND_NAMES = "highlightFriends";
	public static final String HIGHLIGHT_FRIENDS_CHAT = "highlightFriendsChat";
	public static final String HIGHLIGHT_TEAM_MEMBERS = "highlightTeamMembers";
	public static final String HIGHLIGHT_CLAN_MEMBERS = "highlightClanMembers";
	public static final String COLOR_PLAYER_MENU = "colorPlayerMenu";
	public static final String PLAYER_NAME_POSITION = "playerNamePosition";
	public static final String SHOW_FRIENDS_CHAT_RANKS = "clanMenuIcons";
	public static final String SHOW_CLAN_CHAT_RANKS = "clanchatMenuIcons";
	public static final String DRAW_TILES = "drawPlayerTiles";
	public static final String DRAW_MINIMAP_NAMES = "drawMinimapNames";
	public static final String HIGHLIGHT_OTHERS = "highlightOthers";
	public static final String HIGHLIGHT_PARTY_MEMBERS = "highlightPartyMembers";
}
package com.guestindicators;

import com.google.inject.Provides;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Player;
import net.runelite.api.clan.ClanTitle;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ChatIconManager;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.playerindicators.PlayerIndicatorsConfig.HighlightSetting;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.Color;

import static com.guestindicators.OrigConfig.*;
import static net.runelite.api.MenuAction.ITEM_USE_ON_PLAYER;
import static net.runelite.api.MenuAction.PLAYER_EIGTH_OPTION;
import static net.runelite.api.MenuAction.PLAYER_FIFTH_OPTION;
import static net.runelite.api.MenuAction.PLAYER_FIRST_OPTION;
import static net.runelite.api.MenuAction.PLAYER_FOURTH_OPTION;
import static net.runelite.api.MenuAction.PLAYER_SECOND_OPTION;
import static net.runelite.api.MenuAction.PLAYER_SEVENTH_OPTION;
import static net.runelite.api.MenuAction.PLAYER_SIXTH_OPTION;
import static net.runelite.api.MenuAction.PLAYER_THIRD_OPTION;
import static net.runelite.api.MenuAction.RUNELITE_PLAYER;
import static net.runelite.api.MenuAction.WALK;
import static net.runelite.api.MenuAction.WIDGET_TARGET_ON_PLAYER;

@Slf4j
@PluginDescriptor(
	name = "Guest Indicators"
)
public class GuestIndicatorsPlugin extends Plugin
{
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private GuestIndicatorsConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private GuestIndicatorsOverlay guestIndicatorsOverlay;

	@Inject
	private GuestIndicatorsTileOverlay guestIndicatorsTileOverlay;

	@Inject
	private GuestIndicatorsMinimapOverlay guestIndicatorsMinimapOverlay;

	@Inject
	private GuestIndicatorsService guestIndicatorsService;

	@Inject
	private Client client;

	@Inject
	private ChatIconManager chatIconManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClanGuestTracker clanGuestTracker;

	@Inject
	private PartyService partyService;

	@Provides
	GuestIndicatorsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GuestIndicatorsConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(guestIndicatorsOverlay);
		overlayManager.add(guestIndicatorsTileOverlay);
		overlayManager.add(guestIndicatorsMinimapOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(guestIndicatorsOverlay);
		overlayManager.remove(guestIndicatorsTileOverlay);
		overlayManager.remove(guestIndicatorsMinimapOverlay);
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		if (client.isMenuOpen())
		{
			return;
		}

		MenuEntry[] menuEntries = client.getMenuEntries();

		for (MenuEntry entry : menuEntries)
		{
			MenuAction type = entry.getType();

			if (type == WALK
				|| type == WIDGET_TARGET_ON_PLAYER
				|| type == ITEM_USE_ON_PLAYER
				|| type == PLAYER_FIRST_OPTION
				|| type == PLAYER_SECOND_OPTION
				|| type == PLAYER_THIRD_OPTION
				|| type == PLAYER_FOURTH_OPTION
				|| type == PLAYER_FIFTH_OPTION
				|| type == PLAYER_SIXTH_OPTION
				|| type == PLAYER_SEVENTH_OPTION
				|| type == PLAYER_EIGTH_OPTION
				|| type == RUNELITE_PLAYER)
			{
				Player player = entry.getPlayer();

				if (player == null)
				{
					continue;
				}

				GuestIndicatorsPlugin.Decorations decorations = getDecorations(player);

				if (decorations == null)
				{
					continue;
				}

				String oldTarget = entry.getTarget();
				String newTarget = decorateTarget(oldTarget, decorations);

				entry.setTarget(newTarget);
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (config.highlightClanGuests())
		{
			clanGuestTracker.updateClan(false);
		}
		if (config.highlightGuestClanGuests() || config.highlightGuestClanGuests())
		{
			clanGuestTracker.updateClan(true);
		}
	}

	private GuestIndicatorsPlugin.Decorations getDecorations(Player player)
	{
		if (player.isFriend() && !configManager.getConfiguration(groupName, DRAW_FRIEND_NAMES, HighlightSetting.class).equals(HighlightSetting.DISABLED)
			|| player.isFriendsChatMember() && !configManager.getConfiguration(groupName, HIGHLIGHT_FRIENDS_CHAT, HighlightSetting.class).equals(HighlightSetting.DISABLED)
			|| player.getTeam() > 0 && client.getLocalPlayer().getTeam() == player.getTeam()
			&& !configManager.getConfiguration(groupName, HIGHLIGHT_TEAM_MEMBERS, HighlightSetting.class).equals(HighlightSetting.DISABLED)
			|| player.isClanMember() && !configManager.getConfiguration(groupName, HIGHLIGHT_CLAN_MEMBERS, HighlightSetting.class).equals(HighlightSetting.DISABLED))
		{
			return null;
		}
		boolean isPartyMember = partyService.isInParty() &&
			player.getName() != null &&
			!configManager.getConfiguration(groupName, HIGHLIGHT_PARTY_MEMBERS, HighlightSetting.class).equals(HighlightSetting.DISABLED) &&
			partyService.getMemberByDisplayName(player.getName()) != null;
		if (isPartyMember)
		{
			return null;
		}

		int image = -1;
		Color color = null;

		if (config.highlightClanGuests() && clanGuestTracker.isClanGuest(player))
		{
			color = config.getClanGuestColor();
			if (configManager.getConfiguration(groupName, SHOW_CLAN_CHAT_RANKS, Boolean.class))
			{
				ClanTitle clanTitle = guestIndicatorsService.getClanTitle(player);
				if (clanTitle != null)
				{
					image = chatIconManager.getIconNumber(clanTitle);
				}
			}
		}
		else if (config.highlightGuestClanMembers() && clanGuestTracker.isGuestClanMember(player))
		{
			color = config.getGuestClanMemberColor();

			if (config.showGuestClanChatRanks())
			{
				ClanTitle clanTitle = guestIndicatorsService.getGuestClanTitle(player);
				if (clanTitle != null)
				{
					image = chatIconManager.getIconNumber(clanTitle);
				}
			}
		}
		else if (config.highlightGuestClanGuests() && clanGuestTracker.isGuestClanGuest(player))
		{
			color = config.getGuestClanGuestColor();

			if (config.showGuestClanChatRanks())
			{
				ClanTitle clanTitle = guestIndicatorsService.getGuestClanTitle(player);
				if (clanTitle != null)
				{
					image = chatIconManager.getIconNumber(clanTitle);
				}
			}
		}

		if (image == -1 && color == null)
		{
			return null;
		}

		return new GuestIndicatorsPlugin.Decorations(image, color);
	}

	private String decorateTarget(String oldTarget, GuestIndicatorsPlugin.Decorations decorations)
	{
		String newTarget = oldTarget;

		if (decorations.getColor() != null && (boolean) configManager.getConfiguration(groupName, COLOR_PLAYER_MENU, Boolean.class))
		{
			// strip out existing <col...
			int idx = oldTarget.indexOf('>');
			if (idx != -1)
			{
				newTarget = oldTarget.substring(idx + 1);
			}

			newTarget = ColorUtil.prependColorTag(newTarget, decorations.getColor());
		}

		if (decorations.getImage() != -1)
		{
			newTarget = "<img=" + decorations.getImage() + ">" + newTarget;
		}

		return newTarget;
	}

	private Player findPlayer(String name)
	{
		for (Player player : client.getPlayers())
		{
			if (player.getName().equals(name))
			{
				return player;
			}
		}
		return null;
	}

	@Value
	private static class Decorations
	{
		private final int image;
		private final Color color;
	}
}

package com.guestindicators;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GuestIndicatorsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GuestIndicatorsPlugin.class);
		RuneLite.main(args);
	}
}
