package com.healthnotifications;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HealthNotificationsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HealthNotificationsPlugin.class);
		RuneLite.main(args);
	}
}
package com.healthnotifications;

import net.runelite.client.config.*;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup("health-notifications")
public interface HealthNotificationsConfig extends Config
{
	/* Hitpoint Settings */
	@ConfigSection(
			name = "Hitpoint Settings",
			description = "Hitpoint settings",
			position = 0,
			closedByDefault = false
	)
	String hitpointSettings = "hitpointSettings";

	@ConfigItem(
			keyName = "getHitpointThreshold",
			name = "Hitpoint Threshold",
			description = "Set hitpoint threshold",
			position = 1,
			section = hitpointSettings
	)
	default int getHitpointThreshold() {
		return 1;
	}

	@Alpha
	@ConfigItem(
			keyName = "overlayColor",
			name = "Overlay Color",
			description = "Set the notification overlay color",
			position = 2,
			section = hitpointSettings
	)
	default Color getHitpointOverlayColor() {
		return new Color(1.0f, 0.0f, 0.0f, 0.25f);
	}

	@ConfigItem(
			keyName = "disableOverlay",
			name = "Disable Overlay",
			description = "Disable overlay notifications",
			position = 3,
			section = hitpointSettings
	)
	default boolean disableHitpointOverlay() {
		return false;
	}

	@ConfigItem(
			keyName = "disableNotification",
			name = "Disable Notification",
			description = "Disable tray notifications",
			position = 4,
			section = hitpointSettings
	)
	default boolean disableHitpointNotifications() { return true; }

	@ConfigItem(
			keyName = "hitpointNotifyTime",
			name = "Hitpoint Notify Time",
			description = "Seconds between Hitpoint notifications",
			position = 5,
			section = hitpointSettings
	)
	default int getHitpointNotifyTime() {
		return 0;
	}

	/* Prayer Settings */
	@ConfigSection(
			name = "Prayer Settings",
			description = "Prayer settings",
			position = 100,
			closedByDefault = false
	)
	String prayerSettings = "prayerSettings";

	@ConfigItem(
			keyName = "getPrayerThreshold",
			name = "Prayer Threshold",
			description = "Set prayer threshold",
			position = 101,
			section = prayerSettings
	)
	default int getPrayerThreshold() {
		return 1;
	}

	@Alpha
	@ConfigItem(
			keyName = "prayerOverlayColor",
			name = "Overlay Color",
			description = "Set the notification overlay color",
			position = 102,
			section = prayerSettings
	)
	default Color getPrayerOverlayColor() {
		return new Color(0.0f, 0.0f, 1.0f, 0.25f);
	}

	@ConfigItem(
			keyName = "disablePrayerOverlay",
			name = "Disable Overlay",
			description = "Disable overlay notifications",
			position = 103,
			section = prayerSettings
	)
	default boolean disablePrayerOverlay() {
		return false;
	}

	@ConfigItem(
			keyName = "disablePrayerNotification",
			name = "Disable Notification",
			description = "Disable tray notifications",
			position = 104,
			section = prayerSettings
	)
	default boolean disablePrayerNotifications() {
		return true;
	}

	@ConfigItem(
			keyName = "prayerNotifyTime",
			name = "Prayer Notify Time",
			description = "Seconds between Prayer notifications",
			position = 105,
			section = prayerSettings
	)
	default int getPrayerNotifyTime() {
		return 0;
	}

	/* Combo Settings */
	@ConfigSection(
			name = "Combo Settings",
			description = "Combo settings",
			position = 200,
			closedByDefault = false
	)
	String comboSettings = "comboSettings";

	@Alpha
	@ConfigItem(
			keyName = "comboOverlayColor",
			name = "Overlay Color",
			description = "Set the notification overlay color",
			position = 201,
			section = comboSettings
	)
	default Color getComboOverlayColor() {
		return new Color(0.0f, 1.0f, 0.0f, 0.25f);
	}

	@ConfigItem(
			keyName = "disableComboOverlay",
			name = "Disable Overlay",
			description = "Disable overlay notifications",
			position = 202,
			section = comboSettings
	)
	default boolean disableComboOverlay() {
		return false;
	}

}

package com.healthnotifications;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;

import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.Notifier;

import java.awt.*;

@Slf4j
@PluginDescriptor(
		name = "Health Notifications",
		description = "Visual Notifications for Health and Prayer",
		tags = {"health", "hitpoints", "hp", "prayer", "notifications"}
)
public class HealthNotificationsPlugin extends Plugin
{
	private boolean shouldNotifyHitpoints = true;
	private boolean shouldNotifyPrayer = true;
	private long lastHitpointNotificationTime = 0L;
	private long lastPrayerNotificationTime = 0L;

	@Inject
	private Client client;

	@Inject
	private HealthNotificationsConfig config;

	@Inject
	private HealthNotificationsOverlay hitpointOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Notifier notifier;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(hitpointOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(hitpointOverlay);
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if (!isClientReady()) {
			return;
		}

		if (!config.disableHitpointNotifications() && hitpointTotalBelowThreshold()) {
			int hitpointNotifyTime = config.getHitpointNotifyTime();
			if (hitpointNotifyTime == 0) {
				if (shouldNotifyHitpoints) {
					notifier.notify("Your hitpoints are below " + config.getHitpointThreshold());
					shouldNotifyHitpoints = false;
				}
			} else {
				long currentTime = System.currentTimeMillis();
				if (lastHitpointNotificationTime == 0L || currentTime - lastHitpointNotificationTime >= hitpointNotifyTime * 1000L) {
					notifier.notify("Your hitpoints are below " + config.getHitpointThreshold());
					lastHitpointNotificationTime = currentTime;
				}
			}
		}

		if (!config.disablePrayerNotifications() && prayerTotalBelowThreshold()) {
			int prayerNotifyTime = config.getPrayerNotifyTime();
			if (prayerNotifyTime == 0) {
				if (shouldNotifyPrayer) {
					notifier.notify("Your prayer points are below " + config.getPrayerThreshold());
					shouldNotifyPrayer = false;
				}
			} else {
				long currentTime = System.currentTimeMillis();
				if (lastPrayerNotificationTime == 0L || currentTime - lastPrayerNotificationTime >= prayerNotifyTime * 1000L) {
					notifier.notify("Your prayer points are below " + config.getPrayerThreshold());
					lastPrayerNotificationTime = currentTime;
				}
			}
		}

		/* Maintain previous releases behavior around handling prayer notifications */
		if (!hitpointTotalBelowThreshold()) {
			shouldNotifyHitpoints = true;
			shouldNotifyPrayer = true;
		}
	}

	@Provides
	HealthNotificationsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HealthNotificationsConfig.class);
	}

	public boolean shouldRenderOverlay() {
		if (!isClientReady()) {
			return false;
		}

		/* Catch the combo first */
		if (!config.disableComboOverlay() && hitpointTotalBelowThreshold() && prayerTotalBelowThreshold()) {
			return true;
		}

		/* Render for hitpoints */
		if (!config.disableHitpointOverlay() && hitpointTotalBelowThreshold()) {
			return true;
		}

		/* Render for Prayer */
		if (!config.disablePrayerOverlay() && prayerTotalBelowThreshold()) {
			return true;
		}

		return false;
	}

	public Color getOverlayColor() {
		if (!config.disableComboOverlay() && hitpointTotalBelowThreshold() && prayerTotalBelowThreshold()) {
			return config.getComboOverlayColor();
		}

		/* We'll just default to alerting on Health via the overlay
		 * if combo is off and both are breaching thresholds
		 * Maybe this could be configurable?
		 */
		if (!config.disableHitpointOverlay() && hitpointTotalBelowThreshold()) {
			return config.getHitpointOverlayColor();
		}

		if (!config.disablePrayerOverlay() && prayerTotalBelowThreshold()) {
			return config.getPrayerOverlayColor();
		}

		/* Return transparent overlay if we somehow get here */
		return new Color(0.0f, 0.0f, 0.0f, 0.0f);
	}

	public boolean hitpointTotalBelowThreshold()  {
		return isClientReady() && client.getBoostedSkillLevel(Skill.HITPOINTS) < config.getHitpointThreshold();
	}

	public boolean prayerTotalBelowThreshold()  {
		return isClientReady() && client.getBoostedSkillLevel(Skill.PRAYER) < config.getPrayerThreshold();
	}

	public boolean isClientReady() {
		return client.getGameState() == GameState.LOGGED_IN && client.getLocalPlayer() != null;
	}
}

package com.healthnotifications;

import net.runelite.client.ui.overlay.Overlay;

import javax.inject.Inject;
import java.awt.*;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayLayer;

public class HealthNotificationsOverlay extends Overlay {
    private final Client client;
    private final HealthNotificationsPlugin plugin;
    private final HealthNotificationsConfig config;

    @Inject
    private HealthNotificationsOverlay(Client client, HealthNotificationsPlugin plugin, HealthNotificationsConfig config) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.shouldRenderOverlay()) {
            Color color = graphics.getColor();
            graphics.setColor(plugin.getOverlayColor());
            graphics.fill(new Rectangle(client.getCanvas().getSize()));
            graphics.setColor(color);
        }
        return null;
    }
}

