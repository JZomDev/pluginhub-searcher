package com.cluescrollnotifier;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("ClueScrollNotifier")
public interface ClueScrollNotifierConfig extends Config {

	@ConfigSection(
			name = "General Settings",
			description = "General configuration settings",
			position = 0
	)
	String generalSettings = "generalSettings";

	@ConfigSection(
			name = "Notification Settings",
			description = "Notification configuration settings",
			position = 1
	)
	String notificationSettings = "notificationSettings";

	@ConfigSection(
			name = "Debug",
			description = "Debug and testing options",
			position = 2,
			closedByDefault = true
	)
	String debugSettings = "debugSettings";

	@ConfigItem(
			keyName = "playSound",
			name = "Play Sound",
			description = "Toggle to play sound on clue scroll found.",
			position = 0,
			section = generalSettings
	)
	default boolean playSound() {
		return true;
	}

	@ConfigItem(
			keyName = "customSoundFile",
			name = "Custom Sound File",
			description = "Select a custom sound file to play for notifications",
			position = 1,
			section = generalSettings
	)
	default Sound customSoundFile() {
		return Sound.CLUE1;
	}

	@Range(min = 0, max = 200)
	@ConfigItem(
			keyName = "announcementVolume",
			name = "Sound Volume",
			description = "Adjust how loud the sounds are played.",
			position = 1,
			section = generalSettings
	)
	default int announcementVolume() {
		return 100;
	}

	@ConfigItem(
			keyName = "showNotification",
			name = "Show Notification",
			description = "Toggle to send a notification on clue scroll found.",
			position = 2,
			section = generalSettings
	)
	default boolean showNotification() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyClueNests",
			name = "Notify on Clue Nests",
			description = "Toggle to notify on clue nests falling from trees.",
			position = 0,
			section = notificationSettings
	)
	default boolean notifyClueNests() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyClueScrollDrops",
			name = "Notify on Clue Scroll Drops",
			description = "Toggle to notify on clue scroll drops. Make sure Untradeable loot notifications is enabled on the game settings.",
			position = 1,
			section = notificationSettings
	)
	default boolean notifyClueScrollDrops() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyPickpockets",
			name = "Notify on Pickpockets",
			description = "Toggle to notify on pickpocketing clues.",
			position = 2,
			section = notificationSettings
	)
	default boolean notifyPickpockets() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyFishing",
			name = "Notify on Fishing",
			description = "Toggle to notify on getting a clue bottle while fishing.",
			position = 3,
			section = notificationSettings
	)
	default boolean notifyFishing() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyMining",
			name = "Notify on Mining",
			description = "Toggle to notify on getting a clue geode while mining.",
			position = 4,
			section = notificationSettings
	)
	default boolean notifyMining() {
		return true;
	}

	@ConfigItem(
			keyName = "testSound",
			name = "Test Sound",
			description = "Click to test the selected sound and volume",
			position = 0,
			section = debugSettings
	)
	default boolean testSound() {
		return false;
	}
}
package com.cluescrollnotifier;

import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.audio.AudioPlayer;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private ClueScrollNotifierConfig config;

    @Inject
    private AudioPlayer audioPlayer;

    public void playClip(Sound sound) {
        float gain = 20f * (float) Math.log10(config.announcementVolume() / 100f);

        try (InputStream stream = new BufferedInputStream(FileManager.getSoundStream(sound))) {
            audioPlayer.play(stream, gain);
        } catch (FileNotFoundException e) {
            log.warn("Sound file not found for {}", sound, e);
        } catch (IOException | UnsupportedAudioFileException | LineUnavailableException e) {
            log.warn("Failed to play sound {}", sound, e);
        }
    }
}
package com.cluescrollnotifier;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
public class FileManager {
    private static final Path DOWNLOAD_DIR = Paths.get(RuneLite.RUNELITE_DIR.getPath(), "clue-scroll-notifier");

    public static void initialize() {
        createDownloadDirectory();
        Set<String> filesPresent = getFilesPresent();
        Set<String> desiredFiles = getDesiredSoundList().stream()
                .map(Sound::getFileName)
                .collect(Collectors.toSet());

        copyMissingFiles(filesPresent, desiredFiles);
        deleteExtraFiles(filesPresent);
    }

    private static void createDownloadDirectory() {
        try {
            Files.createDirectories(DOWNLOAD_DIR);
        } catch (IOException e) {
            log.error("Could not create download directory", e);
        }
    }

    private static Set<String> getFilesPresent() {
        try (Stream<Path> paths = Files.list(DOWNLOAD_DIR)) {
            return paths
                    .filter(Files::isRegularFile)
                    .map(path -> path.getFileName().toString())
                    .collect(Collectors.toSet());
        } catch (IOException e) {
            log.error("Error listing files in download directory", e);
            return new HashSet<>();
        }
    }

    private static Set<Sound> getDesiredSoundList() {
        return Arrays.stream(Sound.values()).collect(Collectors.toSet());
    }

    private static void copyMissingFiles(Set<String> filesPresent, Set<String> desiredFiles) {
        for (String fileName : desiredFiles) {
            Path outputPath = DOWNLOAD_DIR.resolve(fileName);
            if (Files.exists(outputPath)) {
                filesPresent.remove(fileName);
                continue;
            }

            try (InputStream resourceStream = FileManager.class.getResourceAsStream("/" + fileName)) {
                if (resourceStream != null) {
                    Files.copy(resourceStream, outputPath, StandardCopyOption.REPLACE_EXISTING);
                } else {
                    log.error("Clue Scroll Notifier could not find resource: {}", fileName);
                }
            } catch (IOException e) {
                log.error("Clue Scroll Notifier could not copy sound: {}", fileName, e);
            }
        }
    }

    private static void deleteExtraFiles(Set<String> filesPresent) {
        for (String filename : filesPresent) {
            try {
                Files.delete(DOWNLOAD_DIR.resolve(filename));
            } catch (IOException e) {
                log.warn("Failed to delete file: {}", filename, e);
            }
        }
    }

    public static InputStream getSoundStream(Sound sound) throws FileNotFoundException {
        return new FileInputStream(DOWNLOAD_DIR.resolve(sound.getFileName()).toFile());
    }
}
package com.cluescrollnotifier;

public enum Sound {
    CLUE1("clue1.wav"),
    CLUE2("clue2.wav"),
    CLUE3("clue3.wav"),
    CLUE4("clue4.wav"),
    CLUE5("clue5.wav");

    private final String fileName;

    Sound(String fileName) {
        this.fileName = fileName;
    }

    public String getFileName() {
        return fileName;
    }
}
package com.cluescrollnotifier;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.TileItem;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.Notifier;
import net.runelite.client.audio.AudioPlayer;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import java.util.List;
import java.util.Arrays;
import java.util.concurrent.ScheduledExecutorService;
import net.runelite.client.events.ConfigChanged;

@Slf4j
@PluginDescriptor(
		name = "Clue Scroll Notifier"
)
public class ClueScrollNotifierPlugin extends Plugin {

	@Inject
	private Client client;
	@Inject
	private ClueScrollNotifierConfig config;
	@Inject
	private SoundEngine soundEngine;
	@Inject
	private ScheduledExecutorService executor;
	@Inject
	private Notifier notifier;

	private static final List<Integer> CLUE_ITEM_IDS = Arrays.asList(
			ItemID.WC_CLUE_NEST_BEGINNER,
			ItemID.WC_CLUE_NEST_EASY,
			ItemID.WC_CLUE_NEST_MEDIUM,
			ItemID.WC_CLUE_NEST_HARD,
			ItemID.WC_CLUE_NEST_ELITE
	);

	@Override
	protected void startUp() throws Exception {
		executor.submit(FileManager::initialize);
		log.info("ClueScrollNotifier started!");
	}

	@Override
	protected void shutDown() throws Exception {
		log.info("ClueScrollNotifier stopped!");
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		ChatMessageType type = chatMessage.getType();
		String message = chatMessage.getMessage().toLowerCase();

		if (type == ChatMessageType.GAMEMESSAGE && (message.contains("untradeable drop: clue scroll") || message.contains("untradeable drop: scroll box"))) {
			if (config.notifyClueScrollDrops()) {
				notify("Clue scroll drop!");
			}
		}

		if (type == ChatMessageType.SPAM && message.contains("you steal a clue scroll")) {
			if (config.notifyPickpockets()) {
				notify("You stole a clue scroll!");
			}
		}

		if (type == ChatMessageType.SPAM && (message.contains("you catch a clue bottle") || message.contains("you catch a scroll box"))) {
			if (config.notifyFishing()) {
				notify("You caught a clue scroll!");
			}
		}

		if (type == ChatMessageType.SPAM && (message.contains("you find a clue geode") || message.contains("you find a scroll box"))) {
			if (config.notifyMining()) {
				notify("You found a clue scroll!");
			}
		}
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned) {
		TileItem item = itemSpawned.getItem();
		if (config.notifyClueNests() && CLUE_ITEM_IDS.contains(item.getId())) {
			notify("A bird's nest with a clue has fallen out of the tree!");
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals("ClueScrollNotifier")) {
			return;
		}

		if (event.getKey().equals("testSound")) {
			// Play the test sound with current settings
			if (config.playSound()) {
				soundEngine.playClip(config.customSoundFile());
			}
		}
	}

	private void notify(String message) {
		if (config.playSound()) {
			soundEngine.playClip(config.customSoundFile());
		}
		if (config.showNotification()) {
			notifier.notify(message);
		}
	}

	@Provides
	ClueScrollNotifierConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ClueScrollNotifierConfig.class);
	}
}
package com.cluescrollnotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClueScrollNotifierPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClueScrollNotifierPlugin.class);
		RuneLite.main(args);
	}
}
