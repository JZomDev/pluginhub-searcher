package com.cluescrollnotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClueScrollNotifierPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClueScrollNotifierPlugin.class);
		RuneLite.main(args);
	}
}
package com.cluescrollnotifier;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("ClueScrollNotifier")
public interface ClueScrollNotifierConfig extends Config {

	@ConfigSection(
			name = "General Settings",
			description = "General configuration settings",
			position = 0
	)
	String generalSettings = "generalSettings";

	@ConfigSection(
			name = "Notification Settings",
			description = "Notification configuration settings",
			position = 1
	)
	String notificationSettings = "notificationSettings";

	@ConfigItem(
			keyName = "playSound",
			name = "Play Sound",
			description = "Toggle to play sound on clue scroll found.",
			position = 0,
			section = generalSettings
	)
	default boolean playSound() {
		return true;
	}

	@Range(min = 0, max = 200)
	@ConfigItem(
			keyName = "announcementVolume",
			name = "Sound Volume",
			description = "Adjust how loud the sounds are played.",
			position = 1,
			section = generalSettings
	)
	default int announcementVolume() {
		return 100;
	}

	@ConfigItem(
			keyName = "showNotification",
			name = "Show Notification",
			description = "Toggle to send a notification on clue scroll found.",
			position = 2,
			section = generalSettings
	)
	default boolean showNotification() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyClueNests",
			name = "Notify on Clue Nests",
			description = "Toggle to notify on clue nests falling from trees.",
			position = 0,
			section = notificationSettings
	)
	default boolean notifyClueNests() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyClueScrollDrops",
			name = "Notify on Clue Scroll Drops",
			description = "Toggle to notify on clue scroll drops. Make sure Untradeable loot notifications is enabled on the game settings.",
			position = 1,
			section = notificationSettings
	)
	default boolean notifyClueScrollDrops() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyPickpockets",
			name = "Notify on Pickpockets",
			description = "Toggle to notify on pickpocketing clues.",
			position = 2,
			section = notificationSettings
	)
	default boolean notifyPickpockets() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyFishing",
			name = "Notify on Fishing",
			description = "Toggle to notify on getting a clue bottle while fishing.",
			position = 3,
			section = notificationSettings
	)
	default boolean notifyFishing() {
		return true;
	}

	@ConfigItem(
			keyName = "notifyMining",
			name = "Notify on Mining",
			description = "Toggle to notify on getting a clue geode while mining.",
			position = 4,
			section = notificationSettings
	)
	default boolean notifyMining() {
		return true;
	}
}
package com.cluescrollnotifier;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import lombok.extern.slf4j.Slf4j;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private ClueScrollNotifierConfig config;

    private Clip clip = null;

    private boolean loadClip() {
        try (InputStream stream = new BufferedInputStream(FileManager.getSoundStream());
             AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(stream)) {
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            return true;
        } catch (UnsupportedAudioFileException e) {
            log.warn("Failed to load sound file: Unsupported format", e);
        } catch (IOException e) {
            log.warn("Failed to load sound file: IO Exception", e);
        } catch (LineUnavailableException e) {
            log.warn("Failed to load sound file: Line unavailable", e);
        }
        return false;
    }

    public void playClip() {
        if (clip == null || !clip.isOpen()) {
            if (clip != null) {
                clip.close();
            }

            if (!loadClip()) {
                return;
            }
        }

        if (clip.isRunning()) {
            clip.stop();
        }

        clip.setFramePosition(0);  // Rewind to the beginning
        setVolume(config.announcementVolume());

        log.debug("Playing sound");
        clip.start();  // Start the clip
    }

    private void setVolume(int volumePercentage) {
        if (clip != null) {
            FloatControl volumeControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
            float gain = calculateGain(volumeControl, volumePercentage);
            volumeControl.setValue(gain);
        }
    }

    private float calculateGain(FloatControl volumeControl, int volumePercentage) {
        float range = volumeControl.getMaximum() - volumeControl.getMinimum();
        float gain = (range * volumePercentage / 100f) + volumeControl.getMinimum();
        return Math.min(Math.max(gain, volumeControl.getMinimum()), volumeControl.getMaximum());
    }

    public void close() {
        if (clip != null && clip.isOpen()) {
            clip.close();
        }
    }
}
package com.cluescrollnotifier;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.TileItem;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import java.util.List;
import java.util.Arrays;

@Slf4j
@PluginDescriptor(
		name = "Clue Scroll Notifier"
)
public class ClueScrollNotifierPlugin extends Plugin {

	@Inject
	private Client client;

	@Inject
	private ClueScrollNotifierConfig config;

	@Inject
	private SoundEngine soundEngine;

	@Inject
	private Notifier notifier;

	private static final List<Integer> CLUE_ITEM_IDS = Arrays.asList(
			ItemID.CLUE_NEST_BEGINNER,
			ItemID.CLUE_NEST_EASY,
			ItemID.CLUE_NEST_MEDIUM,
			ItemID.CLUE_NEST_HARD,
			ItemID.CLUE_NEST_ELITE
	);

	@Override
	protected void startUp() throws Exception {
		log.info("ClueScrollNotifier started!");
	}

	@Override
	protected void shutDown() throws Exception {
		soundEngine.close();
		log.info("ClueScrollNotifier stopped!");
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		ChatMessageType type = chatMessage.getType();
		String message = chatMessage.getMessage().toLowerCase();

		if (type == ChatMessageType.GAMEMESSAGE && message.contains("untradeable drop: clue scroll")) {
			if (config.notifyClueScrollDrops()) {
				notify("Got a clue scroll drop!");
			}
		}

		if (type == ChatMessageType.SPAM && message.contains("you steal a clue scroll")) {
			if (config.notifyPickpockets()) {
				notify("You stole a clue scroll!");
			}
		}

		if (type == ChatMessageType.SPAM && message.contains("you catch a clue bottle")) {
			if (config.notifyFishing()) {
				notify("You caught a clue bottle!");
			}
		}

		if (type == ChatMessageType.SPAM && message.contains("you find a clue geode")) {
			if (config.notifyMining()) {
				notify("You found a clue geode!");
			}
		}
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned) {
		TileItem item = itemSpawned.getItem();
		if (config.notifyClueNests() && CLUE_ITEM_IDS.contains(item.getId())) {
			notify("A bird's nest with a clue has fallen out of the tree!");
		}
	}

	private void notify(String message) {
		if (config.playSound()) {
			soundEngine.playClip();
		}
		if (config.showNotification()) {
			notifier.notify(message);
		}
	}

	@Provides
	ClueScrollNotifierConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ClueScrollNotifierConfig.class);
	}
}
package com.cluescrollnotifier;

import java.io.InputStream;

public final class FileManager {

    private static final String SOUND_FILE = "/clue.wav";

    private FileManager() {
        // Private constructor to prevent instantiation
    }

    public static InputStream getSoundStream() {
        InputStream stream = FileManager.class.getResourceAsStream(SOUND_FILE);
        if (stream == null) {
            throw new IllegalArgumentException("Sound file not found: " + SOUND_FILE);
        }
        return stream;
    }
}
