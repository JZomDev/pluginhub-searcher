package com.worldlocation;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WorldLocationPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WorldLocationPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2021, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

import com.google.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class InfoOverlay extends OverlayPanel
{
	private final Client client;
	private final WorldLocationConfig config;

	@Inject
	InfoOverlay(Client client, WorldLocationConfig config)
	{
		this.client = client;
		this.config = config;

		setPosition(OverlayPosition.TOP_LEFT);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!config.gridInfo() || client.getLocalPlayer() == null)
		{
			return null;
		}

		int z = client.getPlane();

		WorldPoint wp = client.getLocalPlayer().getWorldLocation();
		int tileX = wp.getX();
		int tileY = wp.getY();
		final int chunkTileX = tileX % 8;
		final int chunkTileY = tileY % 8;

		if (InstanceInfoType.TEMPLATE.equals(config.instanceInfoType()) && client.isInInstancedRegion())
		{
			int[][][] instanceTemplateChunks = client.getInstanceTemplateChunks();
			LocalPoint localPoint = client.getLocalPlayer().getLocalLocation();
			int chunkData = instanceTemplateChunks[z][localPoint.getSceneX() / 8][localPoint.getSceneY() / 8];

			tileX = (chunkData >> 14 & 0x3FF) * 8 + chunkTileX;
			tileY = (chunkData >> 3 & 0x7FF) * 8 + chunkTileY;
		}

		final int chunkX = tileX >> 3;
		final int chunkY = tileY >> 3;
		final int regionX = tileX >> 6;
		final int regionY = tileY >> 6;
		final int regionTileX = tileX % 64;
		final int regionTileY = tileY % 64;

		final int chunkID = (chunkX << 11) | chunkY;
		final int regionID = (regionX << 8) | regionY;

		final boolean useId = InfoType.UNIQUE_ID.equals(config.gridInfoType());

		panelComponent.getChildren().add(LineComponent.builder()
			.left("Tile")
			.right(tileX + ", " + tileY + ", " + z)
			.build());

		panelComponent.getChildren().add(LineComponent.builder()
			.left("Chunk" + (useId ? " ID" : ""))
			.right(useId ? ("" + chunkID) :
				(chunkX + ", " + chunkY + ", " + chunkTileX + ", " + chunkTileY))
			.build());

		panelComponent.getChildren().add(LineComponent.builder()
			.left("Region" + (useId ? " ID" : ""))
			.right(useId ? ("" + regionID) :
				(regionX + ", " + regionY + ", " + regionTileX + ", " + regionTileY))
			.build());

		return super.render(graphics);
	}
}

/*
 * Copyright (c) 2020, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("worldlocation")
public interface WorldLocationConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "tileLocation",
		name = "Tile Location",
		description = "Show world tile (1 x 1) location"
	)
	default boolean tileLocation()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "tileLines",
		name = "Tile Lines",
		description = "Show tile (1 x 1) lines"
	)
	default boolean tileLines()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "chunkLines",
		name = "Chunk Lines",
		description = "Show chunk (8 x 8) lines"
	)
	default boolean chunkLines()
	{
		return false;
	}

	@ConfigItem(
		position = 3,
		keyName = "regionLines",
		name = "Region Lines",
		description = "Show region (64 x 64) lines"
	)
	default boolean regionLines()
	{
		return false;
	}

	@ConfigItem(
		position = 4,
		keyName = "minimapTileLines",
		name = "Minimap Tile Lines",
		description = "Show tile (1 x 1) lines on the minimap"
	)
	default boolean minimapTileLines()
	{
		return false;
	}

	@ConfigItem(
		position = 5,
		keyName = "minimapChunkLines",
		name = "Minimap Chunk Lines",
		description = "Show chunk (8 x 8) lines on the minimap"
	)
	default boolean minimapChunkLines()
	{
		return false;
	}

	@ConfigItem(
		position = 6,
		keyName = "minimapRegionLines",
		name = "Minimap Region Lines",
		description = "Show region (64 x 64) lines on the minimap"
	)
	default boolean minimapRegionLines()
	{
		return false;
	}

	@ConfigItem(
		position = 7,
		keyName = "mapTileLines",
		name = "World Map Tile Lines",
		description = "Show tile (1 x 1) lines on the world map"
	)
	default boolean mapTileLines()
	{
		return false;
	}

	@ConfigItem(
		position = 8,
		keyName = "mapChunkLines",
		name = "World Map Chunk Lines",
		description = "Show chunk (8 x 8) lines on the world map"
	)
	default boolean mapChunkLines()
	{
		return false;
	}

	@ConfigItem(
		position = 9,
		keyName = "mapRegionLines",
		name = "World Map Region Lines",
		description = "Show region (64 x 64) lines on the world map"
	)
	default boolean mapRegionLines()
	{
		return false;
	}

	@ConfigItem(
		position = 10,
		keyName = "gridInfo",
		name = "Grid Info",
		description = "Show information about the current grid"
	)
	default boolean gridInfo()
	{
		return false;
	}

	@ConfigSection(
		position = 11,
		name = "Settings",
		description = "Colour and line width options",
		closedByDefault = true
	)
	String settingsSection = "settingsSection";

	@Alpha
	@ConfigItem(
		position = 12,
		keyName = "tileColour",
		name = "Tile Colour",
		description = "The colour of the tile for the world point location",
		section = settingsSection
	)
	default Color tileColour()
	{
		return new Color(0, 0, 0, 127);
	}

	@Alpha
	@ConfigItem(
		position = 13,
		keyName = "tileLineColour",
		name = "Tile Line Colour",
		description = "The colour of the tile border",
		section = settingsSection
	)
	default Color tileLineColour()
	{
		return new Color(0, 0, 0, 127);
	}

	@Alpha
	@ConfigItem(
		position = 14,
		keyName = "chunkLineColour",
		name = "Chunk Line Colour",
		description = "The colour of the chunk border",
		section = settingsSection
	)
	default Color chunkLineColour()
	{
		return Color.BLUE;
	}

	@Alpha
	@ConfigItem(
		position = 15,
		keyName = "regionLineColour",
		name = "Region Line Colour",
		description = "The colour of the region border",
		section = settingsSection
	)
	default Color regionLineColour()
	{
		return Color.GREEN;
	}

	@Range(
		max = 5
	)
	@ConfigItem(
		position = 16,
		keyName = "tileLineWidth",
		name = "Tile Line Width",
		description = "The tile border line width",
		section = settingsSection
	)
	default int tileLineWidth()
	{
		return 1;
	}

	@Range(
		max = 5
	)
	@ConfigItem(
		position = 17,
		keyName = "chunkLineWidth",
		name = "Chunk Line Width",
		description = "The chunk border line width",
		section = settingsSection
	)
	default int chunkLineWidth()
	{
		return 2;
	}

	@Range(
		max = 5
	)
	@ConfigItem(
		position = 18,
		keyName = "regionLineWidth",
		name = "Region Line Width",
		description = "The region border line width",
		section = settingsSection
	)
	default int regionLineWidth()
	{
		return 4;
	}

	@ConfigItem(
		position = 19,
		keyName = "gridInfoType",
		name = "Grid Info Type",
		description = "The info formatting for the current tile, chunk or region grid." +
			"<br>Tile: Tile X, Tile Y, Tile Z" +
			"<br>Chunk ID: unique bit-packed chunk X & Y" +
			"<br>Chunk: Chunk X, Chunk Y, Chunk Tile X, Chunk Tile Y" +
			"<br>Region ID: unique bit-packed region X & Y" +
			"<br>Region: Region X, Region Y, Region Tile X, Region Tile Y",
		section = settingsSection
	)
	default InfoType gridInfoType()
	{
		return InfoType.UNIQUE_ID;
	}

	@ConfigItem(
		position = 20,
		keyName = "instanceInfoType",
		name = "Instance Info Type",
		description = "The info type for the instance." +
			"<br>Template: source area" +
			"<br>Copy: personalized area",
		section = settingsSection
	)
	default InstanceInfoType instanceInfoType()
	{
		return InstanceInfoType.TEMPLATE;
	}
}

/*
 * Copyright (c) 2018, Alex Kolpa <https://github.com/AlexKolpa>
 * Copyright (c) 2020, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

class WorldMapOverlay extends Overlay
{
	private static final int LABEL_PADDING = 4;
	private static final Color WHITE_TRANSLUCENT = new Color(255, 255, 255, 127);

	private final Client client;
	private final WorldLocationConfig config;

	@Inject
	private WorldMapOverlay(Client client, WorldLocationConfig config)
	{
		this.client = client;
		this.config = config;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(Overlay.PRIORITY_HIGH);
		setLayer(OverlayLayer.MANUAL);
		drawAfterLayer(ComponentID.WORLD_MAP_MAPVIEW);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.mapTileLines())
		{
			drawMapLines(graphics, 1, config.tileLineColour());
		}

		if (config.mapChunkLines())
		{
			drawMapLines(graphics, 8, config.chunkLineColour());
		}

		if (config.mapRegionLines())
		{
			drawMapLines(graphics, 64, config.regionLineColour());
		}

		return null;
	}

	private void drawMapLines(Graphics2D graphics, int gridSize, Color gridColour)
	{
		final int gridTruncate = ~(gridSize - 1);

		Widget map = client.getWidget(ComponentID.WORLD_MAP_MAPVIEW);
		float pixelsPerTile = client.getWorldMap().getWorldMapZoom();

		if (map == null)
		{
			return;
		}

		if (gridSize * pixelsPerTile < 3)
		{
			return;
		}

		Rectangle worldMapRect = map.getBounds();
		graphics.setClip(worldMapRect);

		int widthInTiles = (int) Math.ceil(worldMapRect.getWidth() / pixelsPerTile);
		int heightInTiles = (int) Math.ceil(worldMapRect.getHeight() / pixelsPerTile);

		Point worldMapPosition = client.getWorldMap().getWorldMapPosition();

		// Offset in tiles from anchor sides
		int yTileMin = worldMapPosition.getY() - heightInTiles / 2;
		int xRegionMin = (worldMapPosition.getX() - widthInTiles / 2) & gridTruncate;
		int xRegionMax = ((worldMapPosition.getX() + widthInTiles / 2) & gridTruncate) + gridSize;
		int yRegionMin = (yTileMin & gridTruncate);
		int yRegionMax = ((worldMapPosition.getY() + heightInTiles / 2) & gridTruncate) + gridSize;
		int regionPixelSize = (int) Math.ceil(gridSize * pixelsPerTile);

		for (int x = xRegionMin; x < xRegionMax; x += gridSize)
		{
			for (int y = yRegionMin; y < yRegionMax; y += gridSize)
			{
				int yTileOffset = -(yTileMin - y);
				int xTileOffset = x + widthInTiles / 2 - worldMapPosition.getX();

				int xPos = ((int) (xTileOffset * pixelsPerTile)) + (int) worldMapRect.getX();
				int yPos = (worldMapRect.height - (int) (yTileOffset * pixelsPerTile)) + (int) worldMapRect.getY();
				// Offset y-position by a single region to correct for drawRect starting from the top
				yPos -= regionPixelSize;

				graphics.setColor(gridColour);

				graphics.drawRect(xPos, yPos, regionPixelSize, regionPixelSize);

				graphics.setColor(WHITE_TRANSLUCENT);

				if (gridSize == 64)
				{
					int regionId = ((x >> 6) << 8) | (y >> 6);
					String regionText = String.valueOf(regionId);
					if (InfoType.LOCAL_COORDINATES.equals(config.gridInfoType()))
					{
						regionText = (x >> 6) + ", " + (y >> 6);
					}
					FontMetrics fm = graphics.getFontMetrics();
					Rectangle2D textBounds = fm.getStringBounds(regionText, graphics);
					int labelWidth = (int) textBounds.getWidth() + 2 * LABEL_PADDING;
					int labelHeight = (int) textBounds.getHeight() + 2 * LABEL_PADDING;
					graphics.fillRect(xPos, yPos, labelWidth, labelHeight);
					graphics.setColor(Color.BLACK);
					graphics.drawString(
						regionText,
						xPos + LABEL_PADDING,
						yPos + (int) textBounds.getHeight() + LABEL_PADDING);
				}
			}
		}
	}
}

package com.worldlocation;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class MinimapOverlay extends Overlay
{
	private final Client client;
	private final WorldLocationPlugin plugin;
	private final WorldLocationConfig config;

	@Inject
	private MinimapOverlay(Client client, WorldLocationPlugin plugin, WorldLocationConfig config)
	{
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(Overlay.PRIORITY_LOW);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
		graphics.setClip(plugin.getMinimapClipArea());

		if (config.minimapTileLines())
		{
			renderLines(graphics, 1, config.tileLineColour());
		}
		if (config.minimapChunkLines())
		{
			renderLines(graphics, 8, config.chunkLineColour());
		}
		if (config.minimapRegionLines())
		{
			renderLines(graphics, 64, config.regionLineColour());
		}

		return null;
	}

	private void renderLines(Graphics2D graphics, int gridSize, Color lineColour)
	{
		int size = Perspective.SCENE_SIZE;
		int startX = client.getBaseX();
		int startY = client.getBaseY();
		int endX = startX + size;
		int endY = startY + size;

		graphics.setColor(lineColour);

		for (int x = startX; x < endX; x += gridSize)
		{
			x = x / gridSize * gridSize;
			if (x < startX)
			{
				continue;
			}
			Point start = worldToMinimap(x, startY);
			Point end = worldToMinimap(x, startY + size);
			if (start != null && end != null)
			{
				graphics.drawLine(start.getX(), start.getY(), end.getX(), end.getY());
			}
		}
		for (int y = startY; y < endY; y += gridSize)
		{
			y = y / gridSize * gridSize;
			if (y < startY)
			{
				continue;
			}
			Point start = worldToMinimap(startX, y);
			Point end = worldToMinimap(startX + size, y);
			if (start != null && end != null)
			{
				graphics.drawLine(start.getX(), start.getY(), end.getX(), end.getY());
			}
		}
	}

	private Point worldToMinimap(int worldX, int worldY)
	{
		if (client.getLocalPlayer() == null)
		{
			return null;
		}

		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
		LocalPoint playerLocalPoint = LocalPoint.fromWorld(client, playerLocation);

		if (playerLocalPoint == null)
		{
			return null;
		}

		int offsetX = playerLocalPoint.getX() - localLocation.getX();
		int offsetY = playerLocalPoint.getY() - localLocation.getY();

		int dx = worldX - playerLocation.getX();
		int dy = worldY - playerLocation.getY();

		double tileSize = client.getMinimapZoom();

		int x = (int) (dx * tileSize + offsetX * tileSize / Perspective.LOCAL_TILE_SIZE - tileSize / 2);
		int y = (int) (dy * tileSize + offsetY * tileSize / Perspective.LOCAL_TILE_SIZE - tileSize / 2 + 1);

		int angle = client.getCameraYawTarget() & 0x7FF;

		int sin = Perspective.SINE[angle];
		int cos = Perspective.COSINE[angle];

		Widget minimapDrawWidget = plugin.getMinimapDrawWidget();
		if (minimapDrawWidget == null || minimapDrawWidget.isHidden())
		{
			return null;
		}

		int xx = y * sin + cos * x >> 16;
		int yy = sin * x - y * cos >> 16;

		Point loc = minimapDrawWidget.getCanvasLocation();
		int minimapX = loc.getX() + xx + minimapDrawWidget.getWidth() / 2;
		int minimapY = loc.getY() + yy + minimapDrawWidget.getHeight() / 2;

		return new Point(minimapX, minimapY);
	}
}

/*
 * Copyright (c) 2020, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

import com.google.inject.Inject;
import com.google.inject.Provides;
import java.awt.Color;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.SpriteID;
import net.runelite.api.Varbits;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "World Location",
	description = "Shows world tile location and grid lines",
	tags = {"world", "tile", "location", "coordinates", "grid", "lines"}
)
public class WorldLocationPlugin extends Plugin
{
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InfoOverlay infoOverlay;

	@Inject
	private SceneOverlay sceneOverlay;

	@Inject
	private MinimapOverlay minimapOverlay;

	@Inject
	private WorldMapOverlay worldMapOverlay;

	@Inject
	private Client client;

	@Inject
	private SpriteManager spriteManager;

	private Shape minimapClipFixed;
	private Shape minimapClipResizeable;
	private BufferedImage minimapSpriteFixed;
	private BufferedImage minimapSpriteResizeable;
	private Rectangle minimapRectangle = new Rectangle();

	@Provides
	WorldLocationConfig providesConfig(ConfigManager configManager)
	{
		return configManager.getConfig(WorldLocationConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(infoOverlay);
		overlayManager.add(sceneOverlay);
		overlayManager.add(minimapOverlay);
		overlayManager.add(worldMapOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(infoOverlay);
		overlayManager.remove(sceneOverlay);
		overlayManager.remove(minimapOverlay);
		overlayManager.remove(worldMapOverlay);
	}

	public Widget getMinimapDrawWidget()
	{
		if (client.isResized())
		{
			if (client.getVarbitValue(Varbits.SIDE_PANELS) == 1)
			{
				return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_MINIMAP_DRAW_AREA);
			}
			return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_MINIMAP_DRAW_AREA);
		}
		return client.getWidget(ComponentID.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
	}

	private Shape getMinimapClipAreaSimple()
	{
		Widget minimapDrawArea = getMinimapDrawWidget();

		if (minimapDrawArea == null || minimapDrawArea.isHidden())
		{
			return null;
		}

		Rectangle bounds = minimapDrawArea.getBounds();

		return new Ellipse2D.Double(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
	}

	public Shape getMinimapClipArea()
	{
		Widget minimapWidget = getMinimapDrawWidget();

		if (minimapWidget == null || minimapWidget.isHidden() || !minimapRectangle.equals(minimapRectangle = minimapWidget.getBounds()))
		{
			minimapClipFixed = null;
			minimapClipResizeable = null;
			minimapSpriteFixed = null;
			minimapSpriteResizeable = null;
		}

		if (client.isResized())
		{
			if (minimapClipResizeable != null)
			{
				return minimapClipResizeable;
			}
			if (minimapSpriteResizeable == null)
			{
				minimapSpriteResizeable = spriteManager.getSprite(SpriteID.RESIZEABLE_MODE_MINIMAP_ALPHA_MASK, 0);
			}
			if (minimapSpriteResizeable != null)
			{
				minimapClipResizeable = bufferedImageToPolygon(minimapSpriteResizeable);
				return minimapClipResizeable;
			}
			return getMinimapClipAreaSimple();
		}
		if (minimapClipFixed != null)
		{
			return minimapClipFixed;
		}
		if (minimapSpriteFixed == null)
		{
			minimapSpriteFixed = spriteManager.getSprite(SpriteID.FIXED_MODE_MINIMAP_ALPHA_MASK, 0);
		}
		if (minimapSpriteFixed != null)
		{
			minimapClipFixed = bufferedImageToPolygon(minimapSpriteFixed);
			return minimapClipFixed;
		}
		return getMinimapClipAreaSimple();
	}

	private Polygon bufferedImageToPolygon(BufferedImage image)
	{
		Color outsideColour = null;
		Color previousColour;
		final int width = image.getWidth();
		final int height = image.getHeight();
		List<Point> points = new ArrayList<>();
		for (int y = 0; y < height; y++)
		{
			previousColour = outsideColour;
			for (int x = 0; x < width; x++)
			{
				int rgb = image.getRGB(x, y);
				int a = (rgb & 0xff000000) >>> 24;
				int r = (rgb & 0x00ff0000) >> 16;
				int g = (rgb & 0x0000ff00) >> 8;
				int b = (rgb & 0x000000ff) >> 0;
				Color colour = new Color(r, g, b, a);
				if (x == 0 && y == 0)
				{
					outsideColour = colour;
					previousColour = colour;
				}
				if (!colour.equals(outsideColour) && previousColour.equals(outsideColour))
				{
					points.add(new java.awt.Point(x, y));
				}
				if ((colour.equals(outsideColour) || x == (width - 1)) && !previousColour.equals(outsideColour))
				{
					points.add(0, new java.awt.Point(x, y));
				}
				previousColour = colour;
			}
		}
		int offsetX = minimapRectangle.x;
		int offsetY = minimapRectangle.y;
		Polygon polygon = new Polygon();
		for (java.awt.Point point : points)
		{
			polygon.addPoint(point.x + offsetX, point.y + offsetY);
		}
		return polygon;
	}
}

/*
 * Copyright (c) 2021, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

public enum InfoType
{
	UNIQUE_ID("Unique ID"),
	LOCAL_COORDINATES("Local coordinates");

	private final String name;

	InfoType(String name)
	{
		this.name = name;
	}

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2021, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

public enum InstanceInfoType
{
	TEMPLATE("Template"),
	COPY("Copy");

	private final String name;

	InstanceInfoType(String name)
	{
		this.name = name;
	}

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * Copyright (c) 2018, Woox <https://github.com/wooxsolo>
 * Copyright (c) 2020, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.worldlocation;

import com.google.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.GeneralPath;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Scene;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

public class SceneOverlay extends Overlay
{
	private static final int CULL_CHUNK_BORDERS_RANGE = 16;
	private static final int LOCAL_TILE_SIZE = Perspective.LOCAL_TILE_SIZE;

	private final Client client;
	private final WorldLocationConfig config;
	private final TooltipManager tooltipManager;

	@Inject
	public SceneOverlay(Client client, WorldLocationConfig config, TooltipManager tooltipManager)
	{
		this.client = client;
		this.config = config;
		this.tooltipManager = tooltipManager;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.tileLines())
		{
			renderLines(graphics, 1, config.tileLineWidth(), config.tileLineColour());
		}

		if (config.chunkLines())
		{
			renderLines(graphics, 8, config.chunkLineWidth(), config.chunkLineColour());
		}

		if (config.regionLines())
		{
			renderLines(graphics, 64, config.regionLineWidth(), config.regionLineColour());
		}

		if (config.tileLocation() && isHoveringScene())
		{
			renderTile(graphics, config.tileColour());
		}

		return null;
	}

	private void renderLines(Graphics2D graphics, int gridSize, int lineWidth, Color lineColour)
	{
		if (client.getLocalPlayer() == null)
		{
			return;
		}
		WorldPoint wp = client.getLocalPlayer().getWorldLocation();
		int startX = (wp.getX() - CULL_CHUNK_BORDERS_RANGE + gridSize - 1) / gridSize * gridSize;
		int startY = (wp.getY() - CULL_CHUNK_BORDERS_RANGE + gridSize - 1) / gridSize * gridSize;
		int endX = (wp.getX() + CULL_CHUNK_BORDERS_RANGE) / gridSize * gridSize;
		int endY = (wp.getY() + CULL_CHUNK_BORDERS_RANGE) / gridSize * gridSize;

		graphics.setStroke(new BasicStroke(lineWidth));
		graphics.setColor(lineColour);

		GeneralPath path = new GeneralPath();
		for (int x = startX; x <= endX; x += gridSize)
		{
			LocalPoint lp1 = LocalPoint.fromWorld(client, x, wp.getY() - CULL_CHUNK_BORDERS_RANGE);
			LocalPoint lp2 = LocalPoint.fromWorld(client, x, wp.getY() + CULL_CHUNK_BORDERS_RANGE);

			if (lp1 == null || lp2 == null)
			{
				return;
			}

			boolean first = true;
			for (int y = lp1.getY(); y <= lp2.getY(); y += LOCAL_TILE_SIZE)
			{
				Point p = Perspective.localToCanvas(client,
						new LocalPoint(lp1.getX() - LOCAL_TILE_SIZE / 2, y - LOCAL_TILE_SIZE / 2),
						client.getPlane());
				if (p != null)
				{
					if (first)
					{
						path.moveTo(p.getX(), p.getY());
						first = false;
					}
					else
					{
						path.lineTo(p.getX(), p.getY());
					}
				}
			}
		}
		for (int y = startY; y <= endY; y += gridSize)
		{
			LocalPoint lp1 = LocalPoint.fromWorld(client, wp.getX() - CULL_CHUNK_BORDERS_RANGE, y);
			LocalPoint lp2 = LocalPoint.fromWorld(client, wp.getX() + CULL_CHUNK_BORDERS_RANGE, y);

			if (lp1 == null || lp2 == null)
			{
				return;
			}

			boolean first = true;
			for (int x = lp1.getX(); x <= lp2.getX(); x += LOCAL_TILE_SIZE)
			{
				Point p = Perspective.localToCanvas(client,
						new LocalPoint(x - LOCAL_TILE_SIZE / 2, lp1.getY() - LOCAL_TILE_SIZE / 2),
						client.getPlane());
				if (p != null)
				{
					if (first)
					{
						path.moveTo(p.getX(), p.getY());
						first = false;
					}
					else
					{
						path.lineTo(p.getX(), p.getY());
					}
				}
			}
		}
		graphics.draw(path);
	}

	private void renderTile(Graphics2D graphics, Color tileColour)
	{
		Scene scene = client.getScene();
		Tile[][][] tiles = scene.getTiles();

		int z = client.getPlane();

		for (int x = 0; x < Constants.SCENE_SIZE; ++x)
		{
			for (int y = 0; y < Constants.SCENE_SIZE; ++y)
			{
				Tile tile = tiles[z][x][y];

				if (tile == null)
				{
					continue;
				}

				Polygon poly = Perspective.getCanvasTilePoly(client, tile.getLocalLocation());
				if (poly != null &&
					poly.contains(client.getMouseCanvasPosition().getX(), client.getMouseCanvasPosition().getY()))
				{
					WorldPoint wp = tile.getWorldLocation();
					int tileX = wp.getX();
					int tileY = wp.getY();
					if (InstanceInfoType.TEMPLATE.equals(config.instanceInfoType()) && client.isInInstancedRegion())
					{
						int[][][] instanceTemplateChunks = client.getInstanceTemplateChunks();
						LocalPoint localPoint = tile.getLocalLocation();
						int chunkData = instanceTemplateChunks[z][localPoint.getSceneX() / 8][localPoint.getSceneY() / 8];

						tileX = (chunkData >> 14 & 0x3FF) * 8 + (tileX % 8);
						tileY = (chunkData >> 3 & 0x7FF) * 8 + (tileY % 8);
					}
					tooltipManager.add(new Tooltip(tileX + ", " + tileY + ", " + z));
					OverlayUtil.renderPolygon(graphics, poly, tileColour);
				}
			}
		}
	}

	private boolean isHoveringScene()
	{
		MenuEntry[] menuEntries = client.getMenuEntries();
		for (int i = menuEntries.length - 1; i >= 0; i--)
		{
			if (MenuAction.WALK.equals(menuEntries[i].getType()))
			{
				return true;
			}
		}
		return false;
	}
}

