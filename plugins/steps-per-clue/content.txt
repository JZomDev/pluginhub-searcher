package com.StepsPerClue;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(StepsPerCluePlugin.class);
		RuneLite.main(args);
	}
}
package com.StepsPerClue;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.api.events.*;
@Slf4j
@PluginDescriptor(
		name = "Steps per Clue"
)
public class StepsPerCluePlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private ChatMessageManager chatMessageManager;

private boolean messageProcessed = false;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		if (event.getMenuOption().equals("Check steps")) {
			messageProcessed = false;
		}
	}
	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent event) {
		if (messageProcessed) {
			return;
		}
		String[] stringStack = client.getStringStack();
		int stringStackSize = client.getStringStackSize();
		String message = stringStack[stringStackSize - 1];

		if (!message.matches("You have completed \\d+ step(s)? on this [a-zA-Z]+ clue scroll.")) {
			return;
		}
		String clueText = "error";
		if (message.contains("beginner")) {
			clueText = "1-3";
		} else if (message.contains("easy")) {
			clueText = "2-4";
		} else if (message.contains("medium")) {
			clueText = "3-5";
		} else if (message.contains("hard")) {
			clueText = "4-6";
		} else if (message.contains("elite")) {
			clueText = "5-7";
		} else if (message.contains("master")) {
			clueText = "6-8";
		}
		ChatMessageBuilder newMessage = new ChatMessageBuilder()
				.append(ChatColorType.NORMAL)
				.append("Out of " + clueText + " steps.");
		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.ITEM_EXAMINE)
				.runeLiteFormattedMessage(newMessage.build())
				.build());
		messageProcessed = true;
	}
}

