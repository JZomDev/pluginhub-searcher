package com.sac;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SalveAmuletCheckerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SalveAmuletCheckerPlugin.class);
		RuneLite.main(args);
	}
}
package com.sac;

import com.google.inject.Provides;
import com.sac.enums.EntityNames;
import com.sac.enums.TobState;
import com.sac.infoboxs.SalveAmuletCheckerInfoBox;
import com.sac.managers.CoxManager;
import com.sac.managers.TobManager;
import com.sac.overlays.BloatRoomOverlay;
import com.sac.overlays.CoxLocationOverlay;
import com.sac.overlays.MysticRoomOverlay;
import com.sac.overlays.TobLocationOverlay;
import com.sac.panel.SalveAmuletCheckerPanel;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.kit.KitType;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
	name = "SalveAmuletChecker"
)
public class SalveAmuletCheckerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private SalveAmuletCheckerConfig config;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	public TobManager tobManager;

	@Inject
	public CoxManager coxManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MysticRoomOverlay mysticRoomOverlay;
	@Inject
	private CoxLocationOverlay coxLocationOverlay;
	@Inject
	private BloatRoomOverlay bloatRoomOverlay;
	@Inject
	private TobLocationOverlay tobLocationOverlay;


	private TobState currentTobState;
	private SalveAmuletCheckerPanel panel;
	private NavigationButton navButton;
	private SalveAmuletCheckerInfoBox coxSalveAmuletCheckerInfoBox;
	private SalveAmuletCheckerInfoBox raidStateInfoBox;
	private SalveAmuletCheckerInfoBox locationSalveAmuletInfoBox;


	@Override
	protected void startUp() throws Exception
	{
		if(config.isSidePanelVisible()){
			addNavBar();
		}

		log.info("Salve Amulet Checker started!");

		overlayManager.add(mysticRoomOverlay);
		overlayManager.add(coxLocationOverlay);
		overlayManager.add(bloatRoomOverlay);
		overlayManager.add(tobLocationOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
		panel = null;
		navButton = null;
		log.info("Salve Amulet Checker stopped!");
		overlayManager.remove(mysticRoomOverlay);
		overlayManager.remove(coxLocationOverlay);
		overlayManager.remove(bloatRoomOverlay);
		overlayManager.remove(tobLocationOverlay);
	}


	@Provides
	SalveAmuletCheckerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SalveAmuletCheckerConfig.class);
	}


	public void addNavBar(){
		// Can't @Inject because it is nulled out in shutdown()
		panel = injector.getInstance(SalveAmuletCheckerPanel.class);

		BufferedImage ICON = ImageUtil.loadImageResource(SalveAmuletCheckerPlugin.class, "salveAmuletEi.png");
		navButton = NavigationButton.builder()
				.tooltip("Salve Amulet Checker")
				.icon(ICON)
				.priority(10)
				.panel(panel)
				.build();
		clientToolbar.addNavigation(navButton);
	}

	public void removeNavBar(){
		if(navButton != null && panel != null){
			clientToolbar.removeNavigation(navButton);
			navButton = null;
			panel = null;
		}
	}

	@Subscribe()
	public void onConfigChanged(ConfigChanged event){
		String configName = event.getKey();
		if(configName.equals("isSidePanelVisible")){
			boolean isSidePanelVisible =  Boolean.parseBoolean(event.getNewValue());
			if(isSidePanelVisible && navButton == null && panel == null){
				addNavBar();
			}
			else {
				removeNavBar();
			}
		}
	}

	@Subscribe(priority = -1)
	public void onGameTick(GameTick event) {
		computeActiveCheck();
	}

	private void computeActiveCheck(){
		if(config.isEnabledInTob()){
			currentTobState = tobManager.getTobState();
			if (currentTobState == TobState.InTob){
				if(config.isSidePanelVisible()){
					panel.setActiveMonster(EntityNames.BLOAT.getEntityName(), true);
				}
				tobManager.LoadRaiders();
				if(tobManager.GetRoom().equals(EntityNames.BLOAT.getEntityName())){
					//do check for players without salve
					for (Player player: client.getPlayers()) {
						if(tobManager.getRaiderNames().contains(player.getName())){
							if(!isSalveAmuletEquipped(player) && config.isToxic()){
								whenSalveAmuletNotEquipped(player);
							}
						}
					}
				}
			}

		}
		if(config.isEnabledInCox() && coxManager.isPlayerInCoxRaid()){
			if(config.isSidePanelVisible()){
				panel.setActiveMonster(EntityNames.MYSTIC.getEntityName(),true);
			}
			val playersMap = coxManager.getPlayersInMysticRoom();
			playersMap.forEach((player,isInMysticRoom) -> {
				if(isInMysticRoom && !isSalveAmuletEquipped(player) && config.isToxic()) {
						whenSalveAmuletNotEquipped(player);
				}
			});
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event){
		String chatMessage = Text.removeTags(event.getMessage());
		if(config.isEnabledInCox()){
			coxChatMessageAction(chatMessage);
		}
	}

	private void coxChatMessageAction(String chatMessage){
		Player player = client.getLocalPlayer();
		if(player == null){
			return;
		}
		if(chatMessage.startsWith(CoxManager.RAID_START_MESSAGE)){
			coxManager.setUpRaidParty(player.getWorldLocation().getPlane(),player.getLocalLocation().getSceneX(), player.getLocalLocation().getSceneY());
		}
		else if(chatMessage.startsWith(CoxManager.RAID_END_MESSAGE)){
			coxManager.clearRaiders();
		}
	}

	public boolean isSalveAmuletEquipped(Player player){
		 int itemId = player.getPlayerComposition().getEquipmentId(KitType.AMULET);
		 return isSalveAmulet(itemId);
	}

	private void whenSalveAmuletNotEquipped(Player offendingPlayer){
		client.addChatMessage(ChatMessageType.GAMEMESSAGE,offendingPlayer.getName(),String.format("%s Is not wearing their Salve Amulet!",offendingPlayer.getName()),null);
	}

	public boolean isSalveAmulet(int itemId){
		boolean isSalveAmulet = false;
		if(itemId == ItemID.SALVE_AMULET || itemId == ItemID.SALVE_AMULET_E || itemId == ItemID.SALVE_AMULETEI){
			isSalveAmulet = true;
		}
		return isSalveAmulet;
	}

	private SalveAmuletCheckerInfoBox addInfoBox(BufferedImage image, String text, String toolTip){
		val infoBox = new SalveAmuletCheckerInfoBox(image,this);
		infoBox.setInfoBoxText(text);
		infoBox.setTooltip(toolTip);
		return infoBox;
	}

	private void removeInfoBox(InfoBox infoBox){
		infoBoxManager.removeInfoBox(infoBox);
		infoBox = null;
	}

	private SalveAmuletCheckerInfoBox createInfoBox(BufferedImage image, String text, String toolTip, Color textBoxColor){
		val salveAmuletInfoBox = new SalveAmuletCheckerInfoBox(image,this);
		salveAmuletInfoBox.setInfoBoxText(text);
		salveAmuletInfoBox.setTooltip(toolTip);
		salveAmuletInfoBox.setInfoBoxTextColor(textBoxColor);
		return salveAmuletInfoBox;
	}

	private void addCoxSalveAmuletCheckerInfoBox(String text, String toolTip, Color color) {
		removeInfoBox(locationSalveAmuletInfoBox);
		locationSalveAmuletInfoBox = addInfoBox(itemManager.getImage(ItemID.SALVE_AMULETEI), text, toolTip);
		infoBoxManager.addInfoBox(locationSalveAmuletInfoBox);
	}

	private void addPlayerSalveAmuletCheckerInfoBox(String text, String toolTip, Color color){
		removeInfoBox(coxSalveAmuletCheckerInfoBox);
		coxSalveAmuletCheckerInfoBox = addInfoBox(itemManager.getImage(ItemID.DRAGON_2H_SWORD), text, toolTip);
		infoBoxManager.addInfoBox(coxSalveAmuletCheckerInfoBox);
	}

	private void addRaidStateInfoBox(String text, String toolTip, Color color){
		removeInfoBox(raidStateInfoBox);
		raidStateInfoBox = addInfoBox(itemManager.getImage(ItemID.CLEAR_LIQUID), text, toolTip);
		infoBoxManager.addInfoBox(raidStateInfoBox);
	}

}

package com.sac.overlays;

import com.google.inject.Inject;
import com.sac.SalveAmuletCheckerConfig;
import com.sac.SalveAmuletCheckerPlugin;
import com.sac.enums.TobState;
import lombok.val;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class TobLocationOverlay extends OverlayPanel {

    private final Client client;
    private final SalveAmuletCheckerPlugin plugin;
    private final SalveAmuletCheckerConfig config;

    @Inject
    private TobLocationOverlay(Client client, SalveAmuletCheckerPlugin plugin, SalveAmuletCheckerConfig config) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.LOW);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Mystic Salve Amulet Checker Overlay"));

    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (plugin.tobManager.getTobState() == TobState.InTob) {
            val currentRoom = plugin.tobManager.GetRoom();
            if (currentRoom != null && currentRoom != "") {
                panelComponent.getChildren().add(TitleComponent.builder()
                        .text(currentRoom)
                        .color(Color.white)
                        .build());
            }

        }
        return super.render(graphics);
    }
}

package com.sac.overlays;

import com.google.inject.Inject;
import com.sac.SalveAmuletCheckerConfig;
import com.sac.SalveAmuletCheckerPlugin;
import com.sac.enums.EntityNames;
import com.sac.enums.TobState;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;
import java.util.HashSet;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class BloatRoomOverlay extends OverlayPanel {

    private final Client client;
    private final SalveAmuletCheckerPlugin plugin;
    private final SalveAmuletCheckerConfig config;

    @Inject
    private BloatRoomOverlay(Client client, SalveAmuletCheckerPlugin plugin, SalveAmuletCheckerConfig config) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.LOW);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Bloat Salve Amulet Checker Overlay"));

    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if(plugin.tobManager.getTobState() == TobState.InTob && plugin.tobManager.GetRoom().equals(EntityNames.BLOAT.getEntityName())){
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Salve Amulet Checker")
                    .color(Color.white)
                    .build());
            DisplayNames(plugin.tobManager.getRaiderNames());
        }


        return super.render(graphics);
    }


    private void DisplayNames(HashSet<String> playersNames){
        if(playersNames == null){
            return;
        }

        playersNames.forEach((playerName) -> {
            Player foundPlayer =  client.getPlayers().stream().filter((player) -> player.getName().equals(playerName)).findFirst().orElseGet(() -> null);
            if(foundPlayer != null){
                boolean isSalveAmuletEquip = plugin.isSalveAmuletEquipped(foundPlayer);
                Color salveAmuletEquipColor = isSalveAmuletEquip ? Color.green : Color.red;
                panelComponent.getChildren().add(LineComponent.builder()
                        .left(foundPlayer.getName())
                        .right(isSalveAmuletEquip ? "Yes" : "No")
                        .leftColor(Color.white)
                        .rightColor(salveAmuletEquipColor)
                        .build());
            }
        });

    }

}

package com.sac.overlays;

import com.google.inject.Inject;
import com.sac.SalveAmuletCheckerConfig;
import com.sac.SalveAmuletCheckerPlugin;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;
import java.util.HashMap;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;


public class MysticRoomOverlay extends OverlayPanel {

    private final Client client;
    private final SalveAmuletCheckerPlugin plugin;
    private final SalveAmuletCheckerConfig config;
    private final ItemManager itemManager;
    private final SpriteManager spriteManager;
    private final PanelComponent panelImages = new PanelComponent();

    @Inject
    private MysticRoomOverlay(Client client, SalveAmuletCheckerPlugin plugin, SalveAmuletCheckerConfig config, ItemManager itemManager, SpriteManager spriteManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.LOW);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        this.spriteManager = spriteManager;
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Mystic Salve Amulet Checker Overlay"));

    }

    @Override
    public Dimension render(Graphics2D graphics) {

        Player player = client.getLocalPlayer();
        if(player != null && plugin.coxManager.isPlayerInCoxRaid() && plugin.coxManager.isInMysticRoom(player.getWorldLocation().getPlane(),player.getLocalLocation().getSceneX(), player.getLocalLocation().getSceneY())){
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Salve Amulet Checker")
                    .color(Color.white)
                    .build());
            DisplayNames(plugin.coxManager.getPlayersInMysticRoom());
        }

        return super.render(graphics);
    }


    private void DisplayNames(HashMap<Player, Boolean> playersInMysticRoom){
        if(playersInMysticRoom == null){
            return;
        }

        playersInMysticRoom.forEach((player,isInMysticRoom) -> {
            Color salveAmuletEquipColor = isInMysticRoom ? Color.GREEN : Color.red;
            boolean isSalveAmuletEquip = isInMysticRoom;
            if(isInMysticRoom){
                isSalveAmuletEquip =  plugin.isSalveAmuletEquipped(player);
                salveAmuletEquipColor = isSalveAmuletEquip ? Color.green : Color.red;
            }
            panelComponent.getChildren().add(LineComponent.builder()
                    .left(player.getName())
                    .right(isSalveAmuletEquip ? "Yes" : "No")
                    .leftColor(Color.white)
                    .rightColor(salveAmuletEquipColor)
                    .build());
        });

        }

}

package com.sac.overlays;

import com.google.inject.Inject;
import com.sac.SalveAmuletCheckerConfig;
import com.sac.SalveAmuletCheckerPlugin;
import lombok.val;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.util.Text;

import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class CoxLocationOverlay extends OverlayPanel {

    private final Client client;
    private final SalveAmuletCheckerPlugin plugin;
    private final SalveAmuletCheckerConfig config;
    private final ItemManager itemManager;
    private final SpriteManager spriteManager;
    private final PanelComponent panelImages = new PanelComponent();

    @Inject
    private CoxLocationOverlay(Client client, SalveAmuletCheckerPlugin plugin, SalveAmuletCheckerConfig config, ItemManager itemManager, SpriteManager spriteManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.LOW);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        this.spriteManager = spriteManager;
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Mystic Salve Amulet Checker Overlay"));

    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (config.isLocationVisibleInCox() && client.getSelectedSceneTile() != null && plugin.coxManager.isPlayerInCoxRaid()) {
            val currentRoom = plugin.coxManager.getCurrentRoom(client.getSelectedSceneTile());
            if (currentRoom != null) {
                panelComponent.getChildren().add(TitleComponent.builder()
                        .text(Text.titleCase(currentRoom))
                        .color(Color.white)
                        .build());
            }

        }
        return super.render(graphics);
    }
}

package com.sac.infoboxs;

import lombok.Setter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import java.awt.*;
import java.awt.image.BufferedImage;

public class SalveAmuletCheckerInfoBox extends InfoBox {

    @Setter
    private String infoBoxText;

    @Setter
    private Color infoBoxTextColor;

    public SalveAmuletCheckerInfoBox(BufferedImage image, Plugin plugin){
        super(image, plugin);
    }



    @Override
    public String getText() {
        return infoBoxText;
    }

    @Override
    public Color getTextColor() {
        return infoBoxTextColor;
    }
}

package com.sac.panel;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.Text;

public class ComboBoxIconListRenderer extends JLabel implements ListCellRenderer
{
    @Setter
    private String defaultText = "Select an Monster...";

    @Override
    public Component getListCellRendererComponent(JList list, Object o, int index, boolean isSelected, boolean cellHasFocus)
    {
        if (isSelected)
        {
            setBackground(ColorScheme.DARK_GRAY_COLOR);
            setForeground(Color.WHITE);
        }
        else
        {
            setBackground(list.getBackground());
            setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        }

        setBorder(new EmptyBorder(5, 5, 5, 0));

        String text;
        setIcon(null);
        // If using setSelectedItem(null) or setSelectedIndex(-1) show default text until a selection is made
        if (index == -1 && o == null)
        {
            text = defaultText;
        }
        else if (o instanceof Enum)
        {
            text = Text.titleCase((Enum) o);
        }
        else if (o instanceof ComboBoxIconEntity)
        {
            final ComboBoxIconEntity e = (ComboBoxIconEntity) o;
            text = e.getText();
            setIcon(e.getIcon());
        }
        else
        {
            text = o.toString();
        }

        setText(text);

        return this;
    }
}

package com.sac.panel;

import com.sac.SalveAmuletCheckerConfig;
import com.sac.SalveAmuletCheckerPlugin;
import com.sac.enums.EntityNames;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
@Slf4j
public class SalveAmuletCheckerPanel extends PluginPanel {


    private JComboBox monsterDropDown;
    private JTextField activeMonsterTextField;
    private final JLabel overallIcon = new JLabel();


    @Inject
    public SalveAmuletCheckerPanel(SalveAmuletCheckerConfig config)  {
        super(true);
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new GridBagLayout());
        loadMonsterDropDown();
    }


    private void loadMonsterDropDown(){
        JPanel monsterDropDownPanel = new JPanel();
        try{

            monsterDropDown = new JComboBox<ComboBoxIconEntity<String>>();
            monsterDropDown.setFocusable(false);
            val values = EntityNames.values();
            monsterDropDown.setMaximumRowCount(values.length);
            monsterDropDown.setForeground(Color.WHITE);
            final ComboBoxIconListRenderer renderer = new ComboBoxIconListRenderer();
            renderer.setDefaultText("See Monsters");
            monsterDropDown.setRenderer(renderer);

            for(EntityNames mobName : values){

                final String imageName = mobName.getEntityName().replaceAll("\\s","").concat("Small.png");
                final BufferedImage dropDownIcon = ImageUtil.loadImageResource(SalveAmuletCheckerPlugin.class,imageName );
                final ComboBoxIconEntity<String> entity = new ComboBoxIconEntity(new ImageIcon(dropDownIcon),mobName.getEntityName(),imageName);
                monsterDropDown.addItem(entity);

            }

            monsterDropDown.addItemListener(e ->
            {
                if (e.getStateChange() == ItemEvent.SELECTED)
                {
                    final ComboBoxIconEntity mob = (ComboBoxIconEntity) e.getItem();
                    setActiveMonster(mob.getText(),false);
                }
            });


            monsterDropDown.setSelectedIndex(-1);
            monsterDropDownPanel.add(monsterDropDown,BorderLayout.NORTH);
            add(monsterDropDownPanel);
        }
        catch (Exception ex){
            ex.printStackTrace();
        }
    }

    private void loadActiveMonsterTextField(){
        final JPanel activeMonsterPanel = new JPanel();
        activeMonsterPanel.setLayout(new GridLayout(1, 1));
        activeMonsterTextField = new JTextField();
        activeMonsterTextField.setEditable(false);
        activeMonsterTextField.setText("No Active Monster");
        activeMonsterTextField.setFocusable(false);
        activeMonsterTextField.setForeground(Color.WHITE);
        activeMonsterPanel.add(activeMonsterTextField,BorderLayout.CENTER);
        add(activeMonsterPanel);

    }

    public String getActiveMonster(){
        ComboBoxIconEntity<String> activeMonster = (ComboBoxIconEntity<String>) monsterDropDown.getSelectedItem();
        return activeMonster.getText();
    }

    public void loadHeaderIcon(BufferedImage img) {
        overallIcon.setIcon(new ImageIcon(img));
    }

    public void setActiveMonster(String activeMonster, boolean isDropDownChanged){
        if(!isDropDownChanged){
            return;
        }

        for (int i = 0; i < monsterDropDown.getItemCount(); i++){
            ComboBoxIconEntity<String> entity = (ComboBoxIconEntity<String>) monsterDropDown.getItemAt(i);
            if(entity.getText() == activeMonster){
                monsterDropDown.setSelectedIndex(i);
                return;
            }
        }

    }

}

package com.sac.panel;

import javax.annotation.Nullable;
import javax.swing.Icon;
import lombok.AllArgsConstructor;
import lombok.Getter;

    @AllArgsConstructor
    @Getter
    public class ComboBoxIconEntity<T>
    {
        private Icon icon;
        private String text;
        @Nullable
        private T data;
    }


package com.sac;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("SalveAmuletChecker")
public interface SalveAmuletCheckerConfig extends Config {

    @ConfigItem(
            keyName = "isEnabledInCox",
            name = "Enable Salve Amulet Check in Cox",
            description = "Shows the overlay for Salve Amulet Check in Chambers of Xeric",
            position = 0
    )
    default boolean isEnabledInCox() {
        return true;
    }

    @ConfigItem(
            keyName = "isEnabledInTob",
            name = "Enable Salve Amulet Check in Tob",
            description = "Shows the overlay for Salve Amulet Check in Theatre of Blood",
            position = 0
    )
    default boolean isEnabledInTob() {
        return true;
    }


    @ConfigItem(
            keyName = "isLocationVisibleInCox",
            name = "Show Location in Chambers of Xeric",
            description = "Shows your current location while in Chambers of Xeric",
			position = 0
    )
    default boolean isLocationVisibleInCox() {
        return false;
    }

    @ConfigItem(
            keyName = "isLocationVisibleInTob",
            name = "Show Location in Theatre of Blood",
            description = "Shows your current location while in Theatre of Blood",
            position = 1
    )
    default boolean isLocationVisibleInTob() {
        return false;
    }


	@ConfigItem(
			keyName = "isToxic",
			name = "Call out players",
			description = "Call out players not wearing their Salve Amulet",
			position = 2
	)

	default boolean isToxic() {
		return false;
	}

    @ConfigItem(
            keyName = "isSidePanelVisible",
            name = "Toggle Side Panel",
            description = "When disabled the Side Panel Button will be removed.",
            position = 3
    )
    default boolean isSidePanelVisible() {
        return true;
    }
}

package com.sac.managers;

import lombok.Getter;
import lombok.val;
import net.runelite.api.*;
import net.runelite.client.plugins.PluginDescriptor;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Objects;

@PluginDescriptor(
        name = "Salve Amulet Checker",
        tags = {"combat", "overlay", "chambers", "xeric", "raids", "tob", "theatre of blood"}
)

public class CoxManager {

    @Inject
    private Client client;

    @Getter
    private HashSet<Player> playersInRaid;
    public final static String RAID_START_MESSAGE = "The raid has begun!";
    public final static String RAID_END_MESSAGE = "As the Great Olm collapses, the crystal blocking your exit has been shattered";

    public boolean isPlayerInCoxParty() {
        boolean isInParty = false;
        if (client.getGameState() == GameState.LOGGED_IN) {
            isInParty = client.getVarbitValue(VarPlayer.IN_RAID_PARTY) != -1;
        }

        return isInParty;
    }

    public boolean isPlayerInCoxRaid() {
        boolean isInRaid = false;
        if (client.getGameState() == GameState.LOGGED_IN) {
            isInRaid = client.getVarbitValue(Varbits.IN_RAID) != 0;
        }

        return isInRaid;
    }

    public boolean isRaidInProgress(){
        boolean isRaidInProgress = false;
        if (client.getGameState() == GameState.LOGGED_IN) {
            isRaidInProgress = client.getVarbitValue(Varbits.RAID_STATE) == 1;
        }
        return isRaidInProgress;
    }

    public boolean isInMysticRoom(Tile currentTile) {
        boolean isInMysticTile = false;
        if (client.getGameState() == GameState.LOGGED_IN && isPlayerInCoxRaid()) {
            int chunkData = client.getInstanceTemplateChunks()[currentTile.getPlane()][(currentTile.getSceneLocation().getX()) / 8][currentTile.getSceneLocation().getY() / 8];
            InstanceTemplates template = InstanceTemplates.findMatch(chunkData);
            if (template == InstanceTemplates.RAIDS_MYSTICS){
                isInMysticTile = true;
            }
        }
        return isInMysticTile;
    }

    public boolean isInMysticRoom(int currentPlane, int x, int y) {
        boolean isInMysticTile = false;
        if (client.getGameState() == GameState.LOGGED_IN && isPlayerInCoxRaid()) {
            int chunkData = client.getInstanceTemplateChunks()[currentPlane][(x) / 8][y / 8];
            InstanceTemplates template = InstanceTemplates.findMatch(chunkData);
            if (template == InstanceTemplates.RAIDS_MYSTICS){
                isInMysticTile = true;
            }
        }
        return isInMysticTile;
    }

    public void setUpRaidParty(Tile currentTile) {
        val coxRaidParty = new HashSet<Player>();
        if (client.getGameState() == GameState.LOGGED_IN && isPlayerInCoxParty() && currentTile != null) {
            int chunkData = client.getInstanceTemplateChunks()[currentTile.getPlane()][(currentTile.getSceneLocation().getX()) / 8][currentTile.getSceneLocation().getY() / 8];
            InstanceTemplates template = InstanceTemplates.findMatch(chunkData);

            if (template == InstanceTemplates.RAIDS_LOBBY || template == InstanceTemplates.RAIDS_START){
                coxRaidParty.clear();
                coxRaidParty.addAll(client.getPlayers());
                playersInRaid = coxRaidParty;
            }

        }

    }

    public void setUpRaidParty(int currentPlane, int x, int y) {
        val coxRaidParty = new HashSet<Player>();
        if (client.getGameState() == GameState.LOGGED_IN && isPlayerInCoxParty()) {
            int chunkData = client.getInstanceTemplateChunks()[currentPlane][(x) / 8][y / 8];
            InstanceTemplates template = InstanceTemplates.findMatch(chunkData);

            if (template == InstanceTemplates.RAIDS_LOBBY || template == InstanceTemplates.RAIDS_START){
                coxRaidParty.clear();
                coxRaidParty.addAll(client.getPlayers());
                playersInRaid = coxRaidParty;
            }

        }

    }

    public InstanceTemplates getCurrentRoom(Tile currentTile){
        if (client.getGameState() == GameState.LOGGED_IN && isPlayerInCoxRaid() && currentTile != null) {
            int chunkData = client.getInstanceTemplateChunks()[currentTile.getPlane()][(currentTile.getSceneLocation().getX()) / 8][currentTile.getSceneLocation().getY() / 8];
            InstanceTemplates template = InstanceTemplates.findMatch(chunkData);
            return template;
        }
        return null;
    }


    public HashMap<Player, Boolean> getPlayersInMysticRoom() {
        val playersInMysticRoom = new HashMap<Player, Boolean>();
        if(playersInRaid == null){
           return playersInMysticRoom;
        }
        for (Player player : playersInRaid) {

            boolean isPlayerInMysticRoom = isInMysticRoom(player.getWorldLocation().getPlane(), player.getLocalLocation().getSceneX(), player.getLocalLocation().getSceneY());
            if (playersInMysticRoom.containsKey(player.getName())) {
                playersInMysticRoom.replace(player, isPlayerInMysticRoom);
            } else {
                playersInMysticRoom.put(player, isPlayerInMysticRoom);
            }
        }
        return playersInMysticRoom;
    }

    public void removePlayerFromParty(String playerName)
    {
        playersInRaid.removeIf(player -> (Objects.equals(player.getName(), playerName)));
    }

    public ArrayList<Player> GetRaidParty() {
        return new ArrayList<Player>(playersInRaid);
    }

    public void clearRaiders(){
        playersInRaid.clear();
    }

}

package com.sac.managers;

import com.sac.enums.TobState;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.widgets.Widget;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.util.HashSet;
import static net.runelite.api.widgets.WidgetID.TOB_GROUP_ID;

public class TobManager {

    private HashSet<String> tobRaiderNames;
    private TobState tobState;
    private String currentRoom;

    public static int MAX_RAIDERS = 5;
    public static final int THEATRE_RAIDERS_VARC = 330;
    public static final int TOB_BOSS_INTERFACE_ID = 1;
    public static final int TOB_BOSS_INTERFACE_TEXT_ID = 2;


    @Inject
    private Client client;

    public HashSet<String> getRaiderNames() {
        return tobRaiderNames;
    }




    public void LoadRaiders(){
        for (int i = 0; i < MAX_RAIDERS; i++) {
            String playerName = client.getVarcStrValue(THEATRE_RAIDERS_VARC + i);
            if (playerName != null && !playerName.isEmpty()) {
                 tobRaiderNames.add(Text.sanitize(playerName));
            }
        }
    }

    public String GetRoom(){
        Widget widget = client.getWidget(TOB_GROUP_ID, TOB_BOSS_INTERFACE_ID);
        if (widget != null && widget.getChild(TOB_BOSS_INTERFACE_TEXT_ID) != null) {
            Widget childWidget = widget.getChild(TOB_BOSS_INTERFACE_TEXT_ID);
            if(!childWidget.getText().equals("")){
                currentRoom = childWidget.getText();
            }
        }
        return currentRoom;
    }


    public TobState getTobState() {
        if (client.getGameState() != GameState.LOGGED_IN) return TobState.NoParty;

        TobState newRaidState =  TobState.fromInteger(client.getVarbitValue(Varbits.THEATRE_OF_BLOOD));
            if (newRaidState == TobState.NoParty || newRaidState == TobState.InParty) {
                // We're not in a raid
                resetTobState();
            } else
            {
                tobState = newRaidState;
            }

        return tobState;
    }

    private void resetTobState(){
        tobState = TobState.NoParty;
        tobRaiderNames = new HashSet<>();
    }


}

package com.sac.enums;

import java.util.Arrays;

public enum TobState {
    NoParty(0),
    InParty(1),
    InTob(2);
    private int tobStateValue;
    private static TobState[] states = null;

    TobState(int stateValue){
        tobStateValue = stateValue;
    }

    public int getTobStateValue(){
        return tobStateValue;
    }

    public static TobState fromInteger(int i){

        if(TobState.states == null) {
            TobState.states = TobState.values();
        }

        TobState stateValue = Arrays.stream(TobState.values()).filter(s -> s.getTobStateValue() == i).findFirst().orElse(null);
        if(stateValue == null)
        {
            return NoParty;
        }

        return stateValue;
    }



}

package com.sac.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum EntityNames {
    BLOAT("The Pestilent Bloat"),
    MYSTIC("Skeletal Mystic");
    private String entityName;

}
package com.sac.models;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;

public class SaRaider {
    @Getter
    @NonNull
    private final Player player;

    @Getter
    @Setter(AccessLevel.PACKAGE)
    private WorldPoint previousWorldLocation;

    @Getter
    @Setter(AccessLevel.PACKAGE)
    private WorldPoint previousWorldLocationForOverlay;

    @Getter
    @Setter(AccessLevel.PACKAGE)
    private boolean isWearingSalveAmulet;

    @Getter
    @Setter(AccessLevel.PACKAGE)
    private boolean isSalveAmuletRequired;

    SaRaider(@NonNull Player player) {
        this.player = player;
    }

    public String getName() {
        return player.getName();
    }

    public WorldPoint getCurrentWorldLocation() {
        return player.getWorldLocation();
    }
}

