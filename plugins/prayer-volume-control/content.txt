package com.prayervolumecontrol;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PrayerVolumeControlPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PrayerVolumeControlPlugin.class);
		RuneLite.main(args);
	}
}
package com.prayervolumecontrol;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("Prayer volume control")
public interface PrayerVolumeControlConfig extends Config
{
	@ConfigSection(
			name = "Prayer volume",
			description = "Manage the volume level for all prayers",
			position = 0
	)
	String allPrayersSection = "allPrayersSection";

	@ConfigItem(
			keyName = "use_override_prayer_volume",
			name = "Global prayer volume",
			description = "Overrides the individual prayer volumes",
			section = allPrayersSection
	)
	default boolean useOverridePrayerVolume() { return true; }

	@ConfigItem(
			keyName = "override_prayer_volume",
			name = "Volume level",
			description = "Modify volume for every prayer sound",
			section = allPrayersSection
	)
	default int overridePrayerVolume() { return 50; }

	@ConfigSection(
			name = "Misc",
			description = "Miscellaneous sounds related to prayers",
			position = 1
	)
	String miscSection = "miscSection";

	@ConfigItem(
			keyName = "ui_boop",
			name = "UI buttons (including quick prayer button)",
			description = "<html>Modify volume for any UI buttons (set to 100 for default volume)" +
					"<br>Changing this volume will affect all UI buttons (quick prayers, settings, world map, checkboxes, etc.)</html>",
			section = miscSection
	)
	default int uiBoop() { return 100; }

	@ConfigItem(
			keyName = "prayer_deactivate",
			name = "Prayer deactivation",
			description = "Modify volume for the prayer deactivation sound (set to 100 for default volume)",
			section = miscSection
	)
	default int prayerDeactivate() { return 100; }

	@ConfigSection(
			name = "Individual prayers",
			description = "Manage the volume level for individual prayers",
			position = 2,
			closedByDefault = true
	)
	String prayerSection = "prayerSection";

	@ConfigItem(
			keyName = "augury_mystic_will",
			name = "Augury / Mystic Will",
			description = "Modify volume for Augury and Mystic Will (set to 100 for default volume)",
			section = prayerSection
	)
	default int auguryMysticWill() { return 100; }

	@ConfigItem(
			keyName = "burst_of_strength",
			name = "Burst of Strength",
			description = "Modify volume for Burst of Strength (set to 100 for default volume)",
			section = prayerSection
	)
	default int burstOfStrength() { return 100; }

	@ConfigItem(
			keyName = "chivalry",
			name = "Chivalry",
			description = "Modify volume for Chivalry (set to 100 for default volume)",
			section = prayerSection
	)
	default int chivalry() { return 100; }

	@ConfigItem(
			keyName = "clarity_of_thought",
			name = "Clarity of Thought",
			description = "Modify volume for Clarity of Thought (set to 100 for default volume)",
			section = prayerSection
	)
	default int clarityOfThought() { return 100; }

	@ConfigItem(
			keyName = "eagle_eye",
			name = "Eagle Eye",
			description = "Modify volume for Eagle Eye (set to 100 for default volume)",
			section = prayerSection
	)
	default int eagleEye() { return 100; }

	@ConfigItem(
			keyName = "hawk_eye",
			name = "Hawk Eye",
			description = "Modify volume for Hawk Eye (set to 100 for default volume)",
			section = prayerSection
	)
	default int hawkEye() { return 100; }

	@ConfigItem(
			keyName = "improved_reflexes",
			name = "Improved Reflexes",
			description = "Modify volume for Improved Reflexes (set to 100 for default volume)",
			section = prayerSection
	)
	default int improvedReflexes() { return 100; }

	@ConfigItem(
			keyName = "incredible_reflexes",
			name = "Incredible Reflexes",
			description = "Modify volume for Incredible Reflexes (set to 100 for default volume)",
			section = prayerSection
	)
	default int incredibleReflexes() { return 100; }

	@ConfigItem(
			keyName = "mystic_lore",
			name = "Mystic Lore",
			description = "Modify volume for Mystic Lore (set to 100 for default volume)",
			section = prayerSection
	)
	default int mysticLore() { return 100; }

	@ConfigItem(
			keyName = "mystic_might",
			name = "Mystic Might",
			description = "Modify volume for Mystic Might (set to 100 for default volume)",
			section = prayerSection
	)
	default int mysticMight() { return 100; }

	@ConfigItem(
			keyName = "piety",
			name = "Piety",
			description = "Modify volume for Piety (set to 100 for default volume)",
			section = prayerSection
	)
	default int piety() { return 100; }

	@ConfigItem(
			keyName = "preserve_rapid_restore",
			name = "Preserve / Rapid Restore",
			description = "Modify volume for Preserve and Rapid Restore (set to 100 for default volume)",
			section = prayerSection
	)
	default int preserveRapidRestore() { return 100; }

	@ConfigItem(
			keyName = "protect_from_magic",
			name = "Protect from Magic",
			description = "Modify volume for Protect from Magic (set to 100 for default volume)",
			section = prayerSection
	)
	default int protectFromMagic() { return 100; }

	@ConfigItem(
			keyName = "protect_from_melee",
			name = "Protect from Melee",
			description = "Modify volume for Protect from Melee (set to 100 for default volume)",
			section = prayerSection
	)
	default int protectFromMelee() { return 100; }

	@ConfigItem(
			keyName = "protect_from_missiles",
			name = "Protect from Missiles",
			description = "Modify volume for Protect from Missiles (set to 100 for default volume)",
			section = prayerSection
	)
	default int protectFromMissiles() { return 100; }

	@ConfigItem(
			keyName = "protect_item",
			name = "Protect Item",
			description = "Modify volume for Protect Item (set to 100 for default volume)",
			section = prayerSection
	)
	default int protectItem() { return 100; }

	@ConfigItem(
			keyName = "rapid_heal",
			name = "Rapid Heal",
			description = "Modify volume for Rapid Heal (set to 100 for default volume)",
			section = prayerSection
	)
	default int rapidHeal() { return 100; }

	@ConfigItem(
			keyName = "redemption",
			name = "Redemption",
			description = "Modify volume for Redemption (set to 100 for default volume)",
			section = prayerSection
	)
	default int redemption() { return 100; }

	@ConfigItem(
			keyName = "retribution",
			name = "Retribution",
			description = "Modify volume for Retribution (set to 100 for default volume)",
			section = prayerSection
	)
	default int retribution() { return 100; }

	@ConfigItem(
			keyName = "rigour_sharp_eye",
			name = "Rigour / Sharp Eye",
			description = "Modify volume for Rigour and Sharp Eye (set to 100 for default volume)",
			section = prayerSection
	)
	default int rigourSharpEye() { return 100; }

	@ConfigItem(
			keyName = "rock_skin",
			name = "Rock Skin",
			description = "Modify volume for Rock Skin (set to 100 for default volume)",
			section = prayerSection
	)
	default int rockSkin() { return 100; }

	@ConfigItem(
			keyName = "smite",
			name = "Smite",
			description = "Modify volume for Smite (set to 100 for default volume)",
			section = prayerSection
	)
	default int smite() { return 100; }

	@ConfigItem(
			keyName = "steel_skin",
			name = "Steel Skin",
			description = "Modify volume for Steel Skin (set to 100 for default volume)",
			section = prayerSection
	)
	default int steelSkin() { return 100; }

	@ConfigItem(
			keyName = "superhuman_strength",
			name = "Superhuman Strength",
			description = "Modify volume for Superhuman Strength (set to 100 for default volume)",
			section = prayerSection
	)
	default int superhumanStrength() { return 100; }

	@ConfigItem(
			keyName = "thick_skin",
			name = "Thick Skin",
			description = "Modify volume for Thick Skin (set to 100 for default volume)",
			section = prayerSection
	)
	default int thickSkin() { return 100; }

	@ConfigItem(
			keyName = "ultimate_strength",
			name = "Ultimate Strength",
			description = "Modify volume for Ultimate Strength (set to 100 for default volume)",
			section = prayerSection
	)
	default int ultimateStrength() { return 100; }
}

package com.prayervolumecontrol;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Prayer volume control"
)
public class PrayerVolumeControlPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private PrayerVolumeControlConfig config;

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed soundEffectPlayed)
	{
		// Check for prayer sounds
		int soundId = soundEffectPlayed.getSoundId();
		int soundVolume = 100;
		boolean isPrayer = false;
		switch (soundId) {
			case SoundEffectID.PRAYER_ACTIVATE_MYSTIC_WILL_AUGURY:
				soundVolume = Math.round(config.auguryMysticWill());
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_BURST_OF_STRENGTH:
				soundVolume = config.burstOfStrength();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_CHIVALRY:
				soundVolume = config.chivalry();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_CLARITY_OF_THOUGHT:
				soundVolume = config.clarityOfThought();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_EAGLE_EYE:
				soundVolume = config.eagleEye();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_HAWK_EYE:
				soundVolume = config.hawkEye();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_IMPROVED_REFLEXES:
				soundVolume = config.improvedReflexes();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_INCREDIBLE_REFLEXES:
				soundVolume = config.incredibleReflexes();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_MYSTIC_LORE:
				soundVolume = config.mysticLore();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_MYSTIC_MIGHT:
				soundVolume = config.mysticMight();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_PIETY:
				soundVolume = config.piety();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_RAPID_RESTORE_PRESERVE:
				soundVolume = config.preserveRapidRestore();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_PROTECT_FROM_MAGIC:
				soundVolume = config.protectFromMagic();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_PROTECT_FROM_MELEE:
				soundVolume = config.protectFromMelee();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_PROTECT_FROM_MISSILES:
				soundVolume = config.protectFromMissiles();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_PROTECT_ITEM:
				soundVolume = config.protectItem();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_RAPID_HEAL:
				soundVolume = config.rapidHeal();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_REDEMPTION:
				soundVolume = config.redemption();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_RETRIBUTION:
				soundVolume = config.retribution();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_SHARP_EYE_RIGOUR:
				soundVolume = config.rigourSharpEye();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_ROCK_SKIN:
				soundVolume = config.rockSkin();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_SMITE:
				soundVolume = config.smite();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_STEEL_SKIN:
				soundVolume = config.steelSkin();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_SUPERHUMAN_STRENGTH:
				soundVolume = config.superhumanStrength();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_THICK_SKIN:
				soundVolume = config.thickSkin();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_ACTIVATE_ULTIMATE_STRENGTH:
				soundVolume = config.ultimateStrength();
				isPrayer = true;
				break;
			case SoundEffectID.PRAYER_DEACTIVE_VWOOP:
				soundVolume = config.prayerDeactivate();
				break;
			case SoundEffectID.UI_BOOP:
				soundVolume = config.uiBoop();
				break;
		}

		// Check if this is a prayer, and we are using the override prayer volume
		if (isPrayer && config.useOverridePrayerVolume()) {
			overridePrayerSound(soundEffectPlayed, soundId, config.overridePrayerVolume());
			return;
		}

		// Check if we should ignore this prayer (exactly 100 volume)
		if (soundVolume == 100) {
			return;
		}

		overridePrayerSound(soundEffectPlayed, soundId, soundVolume);
	}

	protected void overridePrayerSound(SoundEffectPlayed soundEffectPlayed, int soundId, int soundVolume)
	{
		// Cancel/consume the current sound effect
		soundEffectPlayed.consume();

		// Get the sound effect volume
		int currentVolume = client.getPreferences().getSoundEffectVolume();

		// Change the volume to the config's volume and play the sound effect
		client.getPreferences().setSoundEffectVolume(soundVolume);
		client.playSoundEffect(soundId, soundVolume);

		// Revert the sound effect volume to the original
		client.getPreferences().setSoundEffectVolume(currentVolume);

//		log.info("Overriding prayer sound " + soundEffectPlayed + " at volume " + soundVolume + ".");
	}

	@Provides
	PrayerVolumeControlConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PrayerVolumeControlConfig.class);
	}
}

