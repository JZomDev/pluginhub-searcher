/*
 * Copyright (c) 2024, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks;

public final class ConfigKeys
{
	public static final class Plugins
	{
		public static final String interfacestylesplugin = "interfacestylesplugin";
	}

	public static final class InterfaceStyles
	{
		public static final String GROUP_NAME = "interfaceStyles";
		public static final String rsCrossSprites = "rsCrossSprites";
		public static final String gameframe = "gameframe";
	}

	public static final class LoginScreen
	{
		public static final String GROUP_NAME = "loginscreen";
	}
}

/*
 * Copyright (c) 2024, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks.overrides;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Objects;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import java.awt.Color;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import static melky.resourcepacks.overrides.OverrideKey.ACTIVE_WIDGET;
import static melky.resourcepacks.overrides.OverrideKey.CHILDREN;
import static melky.resourcepacks.overrides.OverrideKey.COLOR;
import static melky.resourcepacks.overrides.OverrideKey.DYNAMIC_CHILDREN;
import static melky.resourcepacks.overrides.OverrideKey.EXPLICIT;
import static melky.resourcepacks.overrides.OverrideKey.INTERFACE;
import static melky.resourcepacks.overrides.OverrideKey.NEW_TYPE;
import static melky.resourcepacks.overrides.OverrideKey.OPACITY;
import static melky.resourcepacks.overrides.OverrideKey.SCRIPTS;
import static melky.resourcepacks.overrides.OverrideKey.TYPE;
import static melky.resourcepacks.overrides.OverrideKey.VARBIT;
import static melky.resourcepacks.overrides.OverrideKey.VARBIT_VALUE;
import org.tomlj.Toml;
import org.tomlj.TomlArray;
import org.tomlj.TomlParseResult;
import org.tomlj.TomlTable;

@Slf4j
@Singleton
public class Overrides
{
	private final ListMultimap<Integer, WidgetOverride> widgetOverrides = ArrayListMultimap.create();
	private final Map<String, Object> properties = new HashMap<>();

	private final String sourcePath;

	@Inject
	public Overrides()
	{
		this("/overrides/overrides.toml");
	}

	protected Overrides(String path)
	{
		this.sourcePath = path;
	}

	public Collection<WidgetOverride> values()
	{
		return widgetOverrides.values();
	}

	public boolean isEmpty()
	{
		return widgetOverrides.isEmpty();
	}

	public List<WidgetOverride> get(int scriptId)
	{
		return widgetOverrides.get(scriptId);
	}

	public boolean contains(int scriptId)
	{
		return widgetOverrides.containsKey(scriptId);
	}

	public Overrides buildOverrides(final String packOverrides)
	{
		clear();

		try (var stream = Overrides.class.getResourceAsStream(sourcePath))
		{
			assert stream != null;

			TomlParseResult toml = Toml.parse(stream);
			toml.errors().forEach(error -> log.error(error.toString()));

			TomlParseResult pack = Toml.parse(packOverrides);
			pack.errors().forEach(error -> log.error(error.toString()));

			loadProperties(toml, pack);
			var keys = toml.keySet();
			for (var key : keys)
			{
				var table = toml.getTableOrEmpty(key);

				walkChildren(new WidgetOverride().withName(key), table, pack);
			}
		}
		catch (IOException | ClassCastException e)
		{
			log.error("error loading overrides", e);
		}

		return this;
	}

	public void clear()
	{
		widgetOverrides.clear();
		properties.clear();
	}

	public Color getOverlayColor()
	{
		return (Color) properties.get("overlay.color");
	}

	private void loadProperties(TomlParseResult source, TomlParseResult pack)
	{
		if (source.contains("overlay.color"))
		{
			properties.put("overlay.color", new Color(source.getLong("overlay.color").intValue(), true));
		}

		if (pack.contains("overlay.color"))
		{
			properties.put("overlay.color", new Color(pack.getLong("overlay.color").intValue(), true));
		}
	}

	@VisibleForTesting
	protected WidgetOverride overrideProperties(WidgetOverride parent, Map<String, Object> map, TomlTable pack)
	{
		var node = parent;
		var path = parent.getName();

		if (map.containsKey(INTERFACE))
		{
			node = node.withInterfaceId(((Long) map.get(INTERFACE)).intValue());
			map.remove(INTERFACE);
		}

		if (map.containsKey(COLOR))
		{
			int c = ((Long) map.get(COLOR)).intValue();

			if (pack.contains(OverrideKey.append(path, COLOR)))
			{
				var v = pack.get(OverrideKey.append(path, COLOR));
				if (v instanceof Long)
				{
					node = node.withNewColor(((Long) v).intValue());
				}
			}
			else
			{
				if (node.getColor() == node.getNewColor())
				{
					node = node.withNewColor(c);
				}
			}

			node = node.withColor(c);

			map.remove(COLOR);
		}

		if (map.containsKey(TYPE))
		{
			node = node.withType(((Long) map.get(TYPE)).intValue());
			if (map.containsKey(NEW_TYPE))
			{
				node = node.withNewType(((Long) map.get(NEW_TYPE)).intValue());
				map.remove(NEW_TYPE);
			}

			map.remove(TYPE);
		}

		if (map.containsKey(OPACITY))
		{
			int o = ((Long) map.get(OPACITY)).intValue();
			node = node.withOpacity(o);
			if (pack.contains(OverrideKey.append(path, OPACITY)))
			{
				node = node.withNewOpacity(pack.getLong(OverrideKey.append(path, OPACITY)).intValue());
			}
			else
			{
				node = node.withNewOpacity(o);
			}

			map.remove(OPACITY);
		}

		if (map.containsKey(EXPLICIT))
		{
			node = node.withExplicit(true);
			map.remove(EXPLICIT);
		}

		if (map.containsKey(ACTIVE_WIDGET))
		{
			node = node.withActiveWidget(true);
			map.remove(ACTIVE_WIDGET);
		}

		return node;
	}

	@VisibleForTesting
	protected WidgetOverride walkChildren(WidgetOverride parent, TomlTable table, TomlTable pack)
	{
		var node = parent;
		var map = table.toMap();

		node = overrideProperties(node, map, pack);

		if (map.containsKey(SCRIPTS))
		{
			var scripts = table.getArrayOrEmpty(SCRIPTS).toList();
			map.remove(SCRIPTS);

			for (var script : scripts)
			{
				var clonedMap = new HashMap<>(map);
				var n2 = node.withScript(((Long) script).intValue());
				walkChildren(n2, clonedMap, pack);
			}
		}
		else
		{
			walkChildren(node, map, pack);
		}

		return node;
	}

	@VisibleForTesting
	protected WidgetOverride walkChildren(WidgetOverride parent, Map<String, Object> map, TomlTable pack)
	{
		var node = parent;
		node = overrideProperties(node, map, pack);

		if (map.containsKey(VARBIT))
		{
			var obj = map.get(VARBIT);
			if (obj instanceof Long)
			{
				var matcher = Map.entry(((Long) map.get(VARBIT)).intValue(), ((Long) map.get(VARBIT_VALUE)).intValue());
				node = node.withVarbits(List.of(matcher));
			}
			else if (obj instanceof TomlArray)
			{
				var varbits = ((TomlArray) obj).toList();
				var values = ((TomlArray) map.get(VARBIT_VALUE)).toList();
				if (varbits.size() != values.size())
				{
					log.error("mis matching varbits size for {}", map);
					return parent;
				}

				var matchers = IntStream.range(0, varbits.size())
					.boxed()
					.map(i -> Map.entry(((Long) varbits.get(i)).intValue(), ((Long) values.get(i)).intValue()))
					.collect(Collectors.toList());
				node = node.withVarbits(matchers);
			}

			map.remove(VARBIT);
			map.remove(VARBIT_VALUE);
		}

		if (map.containsKey(CHILDREN))
		{
			var children = (TomlArray) map.get(CHILDREN);
			map.remove(CHILDREN);

			var list = children.toList();
			for (var child : list)
			{
				var n2 = node.withChildId(((Long) child).intValue());
				var clonedMap = new HashMap<>(map);
				walkChildren(n2, clonedMap, pack);
			}

			// remove dynamic children so we don't walk from empty children
			map.remove(DYNAMIC_CHILDREN);
		}

		var tableKeys = map.keySet()
			.stream()
			.filter(k -> (map.get(k) instanceof TomlTable || map.get(k) instanceof TomlArray)
				&& !Objects.equal(k, DYNAMIC_CHILDREN)
				&& !Objects.equal(k, CHILDREN)
				&& !Objects.equal(k, SCRIPTS))
			.collect(Collectors.toSet());

		for (var key : tableKeys)
		{
			var obj = map.get(key);
			if (obj instanceof TomlTable)
			{
				var table = (TomlTable) obj;
				map.remove(key);

				walkChildren(node.withName(node.getName() + "." + key), table, pack);
			}
			else if (obj instanceof TomlArray)
			{
				var array = (TomlArray) obj;
				map.remove(key);

				if (array.get(0) instanceof TomlTable)
				{
					var list = array.toList();
					for (var table : list)
					{
						walkChildren(node.withName(node.getName() + "." + key), (TomlTable) table, pack);
					}
				}
			}
		}

		if (map.containsKey(DYNAMIC_CHILDREN))
		{
			var obj = map.get(DYNAMIC_CHILDREN);
			if (obj instanceof TomlArray)
			{
				var children = (TomlArray) obj;
				var list = children.toList().stream()
					.map(l -> ((Long) l).intValue())
					.collect(Collectors.toList());
				node = node.withDynamicChildren(list);
			}
			else if (obj instanceof Boolean)
			{
				node = node.withAllChildren((boolean) obj);
			}
		}

		if (map.containsKey("skip"))
		{
			return parent;
		}

		if (node.isValid())
		{
			log.debug("adding override {}", node);
			widgetOverrides.put(node.getScript(), node);
		}
		else
		{
			if (node.getNewColor() > -1 && node.getInterfaceId() > -1 &&
				node.getChildId() > -1 && node.getScript() == -1)
			{
				log.debug("skipping override {}, no scriptid", node);
			}
		}

		return parent;
	}
}

/*
 * Copyright (c) 2024, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks.overrides;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.With;
import net.runelite.api.Client;

@Data
@With
@NoArgsConstructor
@AllArgsConstructor
public class WidgetOverride
{
	String name;

	int script = -1;
	int interfaceId = -1;
	int childId = -1;

	int type = -1;
	int newType = -1;

	int opacity = -1;
	int newOpacity = -1;

	int color = -1;
	int newColor = -1;

	List<Map.Entry<Integer, Integer>> varbits = new ArrayList<>();
	List<Integer> dynamicChildren = new ArrayList<>();

	boolean allChildren = false;
	boolean activeWidget = false;
	boolean explicit = false;

	public boolean isValid()
	{
		return script > -1 &&
			interfaceId > -1 &&
			childId > -1 &&
			color > -1;
	}

	public boolean checkVarbit(final Client client)
	{
		if (varbits.isEmpty())
		{
			return true;
		}

		for (var matcher : varbits)
		{
			if (client.getVarbitValue(matcher.getKey()) != matcher.getValue())
			{
				return false;
			}
		}

		return true;
	}
}

/*
 * Copyright (c) 2024, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks.overrides;

import com.google.common.base.Strings;

public final class OverrideKey
{
	public static final String INTERFACE = "interface";
	public static final String SCRIPTS = "scripts";
	public static final String CHILDREN = "children";
	public static final String DYNAMIC_CHILDREN = "dynamicChildren";
	public static final String OPACITY = "opacity";
	public static final String COLOR = "color";
	public static final String TYPE = "type";
	public static final String NEW_TYPE = "newType";
	public static final String VARBIT = "varbit";
	public static final String VARBIT_VALUE = "varbitValue";
	public static final String ACTIVE_WIDGET = "activeWidget";
	public static final String EXPLICIT = "explicit";


	public static String append(String path, String key)
	{
		if (Strings.isNullOrEmpty(path))
		{
			return key;
		}

		return path + "." + key;
	}
}

package melky.resourcepacks.hub;

import com.google.common.reflect.TypeToken;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import static melky.resourcepacks.ResourcePacksPlugin.BRANCH;
import static melky.resourcepacks.ResourcePacksPlugin.RAW_GITHUB;
import net.runelite.http.api.RuneLiteAPI;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Slf4j
public class ResourcePacksClient
{

	private final OkHttpClient cachingClient;

	@Inject
	public ResourcePacksClient(OkHttpClient cachingClient)
	{
		this.cachingClient = cachingClient;
	}

	public List<ResourcePackManifest> downloadManifest() throws IOException
	{
		HttpUrl manifest = RAW_GITHUB
			.newBuilder()
			.addPathSegment(BRANCH)
			.addPathSegment("manifest.js")
			.build();

		try (Response res = cachingClient.newCall(new Request.Builder().url(manifest).build()).execute())
		{
			if (res.code() != 200)
			{
				throw new IOException("Non-OK response code: " + res.code());
			}

			String data = res.body().string();

			return RuneLiteAPI.GSON.fromJson(data,
				new TypeToken<List<ResourcePackManifest>>()
				{
				}.getType());
		}
	}

	public BufferedImage downloadIcon(ResourcePackManifest plugin) throws IOException
	{
		if (!plugin.isHasIcon())
		{
			return null;
		}

		HttpUrl url = RAW_GITHUB
			.newBuilder()
			.addPathSegment(plugin.getCommit())
			.addPathSegment("icon.png")
			.build();

		try (Response res = cachingClient.newCall(new Request.Builder().url(url).build()).execute())
		{
			byte[] bytes = res.body().bytes();
			// We don't stream so the lock doesn't block the edt trying to load something at the same time
			synchronized (ImageIO.class)
			{
				return ImageIO.read(new ByteArrayInputStream(bytes));
			}
		}
	}
}

package melky.resourcepacks.hub;

import java.net.URL;
import javax.annotation.Nullable;
import lombok.Data;

@Data
public class ResourcePackManifest
{
	private final String internalName;
	private final String commit;

	private final String displayName;
	private final String compatibleVersion;
	private final String author;
	@Nullable
	private final String[] tags;
	private final URL repo;
	private final boolean hasIcon;

	@Override
	public String toString()
	{
		return displayName;
	}
}

package melky.resourcepacks.hub;

import com.google.common.base.Splitter;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableMap;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import lombok.extern.slf4j.Slf4j;
import melky.resourcepacks.ResourcePacksConfig;
import melky.resourcepacks.ResourcePacksManager;
import net.runelite.client.plugins.discord.DiscordPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.LinkBrowser;
import net.runelite.client.util.Text;

@Slf4j
@Singleton
public class ResourcePacksHubPanel extends PluginPanel
{
	public static final Pattern SPACES = Pattern.compile(" +");
	public static final Splitter SPLITTER = Splitter.on(" ").trimResults().omitEmptyStrings();
	private final ResourcePacksManager resourcePacksManager;
	private final ResourcePacksClient resourcePacksClient;
	private final ScheduledExecutorService executor;
	private final ResourcePacksConfig config;

	private final IconTextField searchBar;
	public final JComboBox currentHubPackComboBox;
	private final JLabel refreshing;
	private final JPanel mainPanel;
	private static final ImageIcon DISCORD_ICON;
	private static final int BOTTOM_LINE_HEIGHT = 24;
	private static final int DISCORD_ICON_SIZE = 18;
	private List<ResourcePacksHubItem> packs = null;
	private boolean ignoreSelected = false;

	static
	{
		final BufferedImage discordIcon = ImageUtil.resizeImage(ImageUtil.loadImageResource(DiscordPlugin.class, "discord.png"), DISCORD_ICON_SIZE, DISCORD_ICON_SIZE);
		DISCORD_ICON = new ImageIcon(discordIcon);
	}

	@Inject
	ResourcePacksHubPanel(
		ResourcePacksManager resourcePacksManager,
		ResourcePacksClient resourcePacksClient,
		ScheduledExecutorService executor,
		ResourcePacksConfig config)
	{
		super(false);
		this.resourcePacksManager = resourcePacksManager;
		this.resourcePacksClient = resourcePacksClient;
		this.executor = executor;
		this.config = config;

		{
			Object refresh = "this could just be a lambda, but no, it has to be abstracted";
			getInputMap(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), refresh);
			getActionMap().put(refresh, new AbstractAction()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{
					reloadResourcePackList();
				}
			});
		}

		GroupLayout layout = new GroupLayout(this);
		setLayout(layout);
		setBackground(ColorScheme.DARK_GRAY_COLOR);

		searchBar = new IconTextField();
		searchBar.setIcon(IconTextField.Icon.SEARCH);
		searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
		searchBar.getDocument().addDocumentListener(new DocumentListener()
		{
			@Override
			public void insertUpdate(DocumentEvent e)
			{
				filter();
			}

			@Override
			public void removeUpdate(DocumentEvent e)
			{
				filter();
			}

			@Override
			public void changedUpdate(DocumentEvent e)
			{
				filter();
			}
		});

		JButton discordButton = new JButton();
		discordButton.setIcon(DISCORD_ICON);
		discordButton.setBackground(ColorScheme.DARK_GRAY_COLOR);
		discordButton.addActionListener((ev) -> LinkBrowser.browse("https://discord.gg/DsDhUz4NNN"));
		discordButton.setToolTipText("Hang out with pack creators and ask for any help");
		discordButton.addChangeListener(ev ->
		{
			if (discordButton.getModel().isPressed())
			{
				discordButton.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			}
			else if (discordButton.getModel().isRollover())
			{
				discordButton.setBackground(ColorScheme.DARK_GRAY_HOVER_COLOR);
			}
			else
			{
				discordButton.setBackground(ColorScheme.DARK_GRAY_COLOR);
			}
		});

		currentHubPackComboBox = new JComboBox();
		currentHubPackComboBox.setPrototypeDisplayValue("XXXXXXXXXXX");
		currentHubPackComboBox.addItemListener(e ->
		{
			if (e.getStateChange() == ItemEvent.SELECTED && !ignoreSelected)
			{
				if (e.getItem() instanceof ResourcePackManifest)
				{
					ResourcePackManifest resourcePackManifest = (ResourcePackManifest) e.getItem();
					resourcePacksManager.setSelectedHubPack(resourcePackManifest.getInternalName());
				}
				else
				{
					resourcePacksManager.setSelectedHubPack("None");
				}
			}
		});
		JLabel currentHubPackLabel = new JLabel("Selected pack: ");

		mainPanel = new JPanel();
		mainPanel.setBorder(BorderFactory.createEmptyBorder(0, 7, 15, 7));
		mainPanel.setLayout(new DynamicGridLayout(0, 1, 0, 5));
		mainPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

		refreshing = new JLabel("Loading...");
		refreshing.setHorizontalAlignment(JLabel.CENTER);

		JPanel mainPanelWrapper = new JPanel();
		mainPanelWrapper.setLayout(new BorderLayout());
		mainPanelWrapper.add(mainPanel, BorderLayout.NORTH);
		mainPanelWrapper.add(refreshing, BorderLayout.CENTER);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		// Can't use Short.MAX_VALUE like the docs say because of JDK-8079640
		scrollPane.setPreferredSize(new Dimension(0x7000, 0x7000));
		scrollPane.setViewportView(mainPanelWrapper);

		layout.setVerticalGroup(layout.createSequentialGroup()
			.addGap(5)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				.addComponent(searchBar, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT)
				.addComponent(discordButton, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT))
			.addGap(5)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				.addComponent(currentHubPackLabel)
				.addComponent(currentHubPackComboBox))
			.addGap(10)
			.addComponent(scrollPane));

		layout.setHorizontalGroup(layout.createParallelGroup()
			.addGroup(layout.createSequentialGroup()
				.addGap(7)
				.addComponent(searchBar)
				.addGap(3)
				.addComponent(discordButton, 0, 24, 24)
				.addGap(7))
			.addGroup(layout.createSequentialGroup()
				.addGap(7)
				.addComponent(currentHubPackLabel)
				.addComponent(currentHubPackComboBox)
				.addGap(7))
			.addComponent(scrollPane));

		revalidate();

		refreshing.setVisible(false);
		reloadResourcePackList();
	}

	private void reloadResourcePackList()
	{
		if (refreshing.isVisible())
		{
			return;
		}

		refreshing.setVisible(true);
		mainPanel.removeAll();

		executor.submit(() ->
		{
			List<ResourcePackManifest> manifest;
			try
			{

				manifest = resourcePacksClient.downloadManifest();
			}
			catch (IOException e)
			{
				log.error("", e);
				SwingUtilities.invokeLater(() ->
				{
					refreshing.setVisible(false);
					mainPanel.add(new JLabel("Downloading the pack manifest failed"));

					JButton retry = new JButton("Retry");
					retry.addActionListener(l -> reloadResourcePackList());
					mainPanel.add(retry);
				});
				return;
			}

			reloadResourcePackList(manifest);
		});
	}

	public void reloadResourcePackList(List<ResourcePackManifest> manifest)
	{
		Map<String, ResourcePackManifest> downloadedManifests = manifest.stream()
			.collect(ImmutableMap.toImmutableMap(ResourcePackManifest::getInternalName, Function.identity()));

		try
		{
			HashMultimap<String, ResourcePackManifest> currentManifests = resourcePacksManager.getCurrentManifests();
			Set<String> installed = new HashSet<>(resourcePacksManager.getInstalledResourcePacks());
			HashMap<String, ResourcePackManifest> installedPacks = new HashMap<>();

			for (String pack : installed)
			{
				ResourcePackManifest packManifest = downloadedManifests.get(pack);
				if (packManifest != null)
				{
					installedPacks.put(pack, packManifest);
				}
			}

			SwingUtilities.invokeLater(() ->
			{
				ignoreSelected = true;
				currentHubPackComboBox.removeAllItems();
				currentHubPackComboBox.addItem("None");
				installed.forEach(internal ->
				{
					ResourcePackManifest toAddManifest = installedPacks.get(internal);
					if (toAddManifest == null)
					{
						log.warn("pack missing from manifest: {}", internal);
						return;
					}

					if (((DefaultComboBoxModel) currentHubPackComboBox.getModel()).getIndexOf(toAddManifest) == -1)
					{
						currentHubPackComboBox.addItem(toAddManifest);
						if (config.selectedHubPack().equals(toAddManifest.getInternalName()))
						{
							currentHubPackComboBox.setSelectedItem(toAddManifest);
						}
					}
				});
				ignoreSelected = false;
				List<ResourcePacksHubItem> list = new ArrayList<>();
				for (String id : downloadedManifests.keySet())
				{
					ResourcePacksHubItem resourcePacksHubItem = new ResourcePacksHubItem(downloadedManifests.get(id), currentManifests.get(id), installed.contains(id), executor, resourcePacksClient, resourcePacksManager);
					list.add(resourcePacksHubItem);
				}
				packs = list;

				refreshing.setVisible(false);
				filter();
			});
		}
		catch (IOException e)
		{
			log.error("", e);
		}

	}

	void filter()
	{
		if (refreshing.isVisible())
		{
			return;
		}

		mainPanel.removeAll();

		Stream<ResourcePacksHubItem> stream = packs.stream();

		String search = searchBar.getText();
		boolean isSearching = search != null && !search.trim().isEmpty();
		if (isSearching)
		{
			stream = stream
				.filter(p -> Text.matchesSearchTerms(SPLITTER.split(search.toLowerCase()), p.keywords))
				.sorted(Comparator.comparing(p -> p.manifest.getDisplayName()));
		}
		else
		{
			stream = stream
				.sorted(Comparator.comparing(ResourcePacksHubItem::isInstalled).thenComparing(p -> p.manifest.getDisplayName()));
		}

		stream.forEach(mainPanel::add);
		mainPanel.revalidate();
	}

	@Override
	public void onActivate()
	{
		revalidate();
		searchBar.setText("");
		reloadResourcePackList();
		searchBar.requestFocusInWindow();
	}
}

package melky.resourcepacks.hub;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import melky.resourcepacks.ResourcePacksManager;
import melky.resourcepacks.ResourcePacksPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.LinkBrowser;
import net.runelite.client.util.SwingUtil;

@Slf4j
public class ResourcePacksHubItem extends JPanel
{
	private static final ImageIcon MISSING_ICON;
	private static final ImageIcon HELP_ICON;
	private static final ImageIcon HELP_ICON_HOVER;
	private static final int HEIGHT = 147;
	private static final int ICON_WIDTH = 224;
	private static final int BOTTOM_LINE_HEIGHT = 16;


	public final ResourcePackManifest manifest;
	public final List<String> keywords = new ArrayList<>();

	@Getter
	private final boolean installed;


	static
	{
		BufferedImage missingIcon = ImageUtil.loadImageResource(ResourcePacksPlugin.class, "/missing.png");//missingicon @TODO
		MISSING_ICON = new ImageIcon(missingIcon);

		BufferedImage helpIcon = ImageUtil.loadImageResource(ResourcePacksPlugin.class, "/help.png");
		HELP_ICON = new ImageIcon(helpIcon);
		HELP_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(helpIcon, -100));
	}

	ResourcePacksHubItem(ResourcePackManifest newManifest,
		Collection<ResourcePackManifest> currentManifests,
		boolean installed,
		ScheduledExecutorService executor,
		ResourcePacksClient resourcePacksClient,
		ResourcePacksManager resourcePacksManager)
	{
		ResourcePackManifest loaded = null;
		if (!currentManifests.isEmpty())
		{
			loaded = currentManifests.iterator().next();
		}

		manifest = loaded == null ? newManifest : loaded;
		this.installed = installed;

		if (manifest != null)
		{
			Collections.addAll(keywords, ResourcePacksHubPanel.SPACES.split(manifest.getDisplayName().toLowerCase()));
			Collections.addAll(keywords, manifest.getAuthor().toLowerCase());

			if (manifest.getTags() != null)
			{
				Collections.addAll(keywords, manifest.getTags());
			}
		}

		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setOpaque(true);

		GroupLayout layout = new GroupLayout(this);
		setLayout(layout);

		JLabel pluginName = new JLabel(manifest.getDisplayName());
		pluginName.setFont(FontManager.getRunescapeBoldFont());
		pluginName.setToolTipText(manifest.getDisplayName());

		JLabel author = new JLabel(manifest.getAuthor());
		author.setFont(FontManager.getRunescapeSmallFont());
		author.setToolTipText(manifest.getAuthor());

		JLabel version = new JLabel(manifest.getCompatibleVersion());
		version.setFont(FontManager.getRunescapeSmallFont());
		version.setHorizontalAlignment(JLabel.RIGHT);
		version.setToolTipText("Compatible with " + manifest.getCompatibleVersion() + " version of Resource Packs plugin");

		JLabel icon = new JLabel();
		icon.setHorizontalAlignment(JLabel.CENTER);
		icon.setIcon(MISSING_ICON);
		if (manifest.isHasIcon())
		{
			executor.submit(() ->
			{
				try
				{
					BufferedImage img = resourcePacksClient.downloadIcon(manifest);

					SwingUtilities.invokeLater(() -> icon.setIcon(new ImageIcon(img)));
				}
				catch (IOException e)
				{
					log.info("Cannot download icon for pack \"{}\"", manifest.getInternalName(), e);
				}
			});
		}

		JButton help = new JButton(HELP_ICON);
		help.setRolloverIcon(HELP_ICON_HOVER);
		SwingUtil.removeButtonDecorations(help);
		help.setBorder(null);
		if (manifest.getRepo() == null)
		{
			help.setVisible(false);
		}
		else
		{
			help.setToolTipText("See more: " + manifest.getRepo());
			help.addActionListener(ev -> LinkBrowser.browse(manifest.getRepo().toString()));
		}
		help.setBorder(null);

		boolean install = !installed;
		boolean update = loaded != null && newManifest != null && !newManifest.equals(loaded);
		boolean remove = !install && !update;
		JButton addrm = new JButton();
		if (install)
		{
			addrm.setText("Install");
			addrm.setBackground(new Color(0x28BE28));
			addrm.addActionListener(l ->
			{
				addrm.setText("Installing");
				addrm.setBackground(new Color(0xC4A800));
				resourcePacksManager.install(manifest.getInternalName());

			});
		}
		else if (remove)
		{
			addrm.setText("Remove");
			addrm.setBackground(new Color(0xBE2828));
			addrm.addActionListener(l ->
			{
				addrm.setText("Removing");
				addrm.setBackground(new Color(0xC4A800));
				resourcePacksManager.remove(manifest.getInternalName());
			});
		}
		else
		{
			addrm.setText("Update");
			addrm.setBackground(new Color(0x1F621F));
			addrm.addActionListener(l ->
			{
				addrm.setText("Updating");
				addrm.setBackground(new Color(0xC4A800));
				executor.submit(resourcePacksManager::refreshPlugins);
			});
		}
		addrm.setBorder(new LineBorder(addrm.getBackground().darker()));
		addrm.setFocusPainted(false);

		layout.setHorizontalGroup(layout.createParallelGroup()

			.addGroup(layout.createParallelGroup()
				.addGroup(layout.createSequentialGroup()
					.addGap(5)
					.addComponent(pluginName, 0, GroupLayout.PREFERRED_SIZE, 135)
					.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)
					.addComponent(help, 0, 24, 24)
					.addComponent(addrm, 0, 50, GroupLayout.PREFERRED_SIZE)
					.addGap(5))
				.addGroup(layout.createSequentialGroup()
					.addGap(5)
					.addComponent(author, 0, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)
					.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.PREFERRED_SIZE, 100)
					.addComponent(version, 0, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)
					.addGap(5)))
			.addGroup(layout.createSequentialGroup()
				.addGap(2)
				.addComponent(icon, ICON_WIDTH, ICON_WIDTH, ICON_WIDTH)));

		layout.setVerticalGroup(layout.createSequentialGroup()
			.addGap(5)
			.addGroup(layout.createSequentialGroup()
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(pluginName)
					.addComponent(help, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT)
					.addComponent(addrm, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT))
				.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					.addComponent(author, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT)
					.addComponent(version, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT, BOTTOM_LINE_HEIGHT))
				.addGap(5))
			.addComponent(icon, HEIGHT, GroupLayout.DEFAULT_SIZE, HEIGHT)
			.addGap(5));
	}
}

package melky.resourcepacks;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(ResourcePacksConfig.GROUP_NAME)
public interface ResourcePacksConfig extends Config
{
	String GROUP_NAME = "resourcepacks";
	String HUB_RESOURCEPACKS = "hubPacks";
	String ORIGINAL_OVERLAY_COLOR = "originalOverlayColor";

	enum ResourcePack
	{
		FIRST,
		SECOND,
		THIRD,
		HUB
	}

	@ConfigSection(name = "Resource pack paths",
		description = "Contains resource pack paths",
		position = 2
	)
	String resourcePackPaths = "resourcePackPaths";

	@ConfigSection(name = "Experimental options",
		description = "Do not touch if you don't know what you are doing",
		position = 9,
		closedByDefault = true
	)
	String experimentalOptions = "experimentalOptions";

	@ConfigItem(
		keyName = "resourcePack",
		name = "Use resource pack",
		description = "Select which resource pack you want to use",
		position = 1
	)
	default ResourcePack resourcePack()
	{
		return ResourcePack.FIRST;
	}

	@ConfigItem(
		keyName = "resourcePack",
		name = "",
		description = ""
	)
	void resourcePack(ResourcePack pack);

	@ConfigItem(
		keyName = "resourcePackPath",
		name = "Resource pack path 1",
		description = "Path to the first resource pack which you want to use (without the ending /)",
		position = 2,
		section = resourcePackPaths
	)
	default String resourcePackPath()
	{
		return "";
	}

	@ConfigItem(
		keyName = "resourcePack2Path",
		name = "Resource pack path 2",
		description = "Path to the second resource pack which you want to use (without the ending /)",
		position = 3,
		section = resourcePackPaths
	)
	default String resourcePack2Path()
	{
		return "";
	}

	@ConfigItem(
		keyName = "resourcePack3Path",
		name = "Resource pack path 3",
		description = "Path to the third resource pack which you want to use (without the ending /)",
		position = 4,
		section = resourcePackPaths
	)
	default String resourcePack3Path()
	{
		return "";
	}

	@ConfigItem(
		keyName = "hideSidePanelButton",
		name = "Hide side panel button",
		description = "Allows you to hide the side panel button to reduce clutter when not changing packs frequently",
		position = 5
	)
	default boolean hideSidePanelButton()
	{
		return false;
	}

	@ConfigItem(
		keyName = "allowLoginScreen",
		name = "Allow login screen to be changed",
		description = "Gives permissions for resource packs to change your login screen",
		position = 6
	)
	default boolean allowLoginScreen()
	{
		return true;
	}

	@ConfigItem(
		keyName = "allowOverlayColor",
		name = "Allow overlay color to be changed",
		description = "Gives permissions for resource packs to change your overlays color",
		position = 7
	)
	default boolean allowOverlayColor()
	{
		return true;
	}

	@ConfigItem(
		keyName = "allowSpellsPrayers",
		name = "Allow spells/prayers to be changed",
		description = "Gives permissions for resource packs to change your spells and prayers icons",
		position = 8
	)
	default boolean allowSpellsPrayers()
	{
		return true;
	}

	@ConfigItem(
		keyName = "allowCrossSprites",
		name = "Allow mouse click sprite to be changed",
		description = "Allows the cross/mouse click sprites to be changed (This won't work if you have cross sprites enabled in Interface styles)",
		position = 9
	)
	default boolean allowCrossSprites()
	{
		return true;
	}

	@ConfigItem(
		keyName = "disableInterfaceStylesPrompt",
		name = "Don't change Interface Styles gameframe option",
		description = "Turning this option on will disable resource packs changing the Interface Styles gameframe option to default",
		position = 10
	)
	default boolean disableInterfaceStylesPrompt()
	{
		return false;
	}

	@ConfigItem(
		keyName = "displayWarnings",
		name = "Display Warnings",
		description = "Display warnings when changing a setting in Runelite that would conflict/be blocked with resource packs",
		position = 10
	)
	default boolean displayWarnings()
	{
		return true;
	}

	@ConfigItem(
		keyName = "allowColorPack",
		name = "Enables color current pack option",
		description = "This option must be on for Color current pack option to work",
		position = 11,
		section = experimentalOptions
	)
	default boolean allowColorPack()
	{
		return false;
	}

	@Alpha
	@ConfigItem(
		keyName = "colorPack",
		name = "Color current pack",
		description = "Allows you to apply a color overlay over the currently selected resource pack",
		position = 12,
		section = experimentalOptions
	)
	Color colorPack();

	@ConfigItem(
		keyName = "colorPackOverlay",
		name = "Allows color current pack to change overlays",
		description = "This option will only work if color current pack is enabled and a color is assigned",
		position = 13,
		section = experimentalOptions
	)
	default boolean colorPackOverlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = HUB_RESOURCEPACKS,
		name = "",
		description = "",
		hidden = true
	)
	default String hubPacks()
	{
		return "";
	}

	@ConfigItem(
		keyName = HUB_RESOURCEPACKS,
		name = "",
		description = ""
	)
	void hubPacks(String packs);

	@ConfigItem(
		keyName = "selectedHubPack",
		name = "Selected pack in hub",
		description = "Internal name of the selected pack from the hub",
		hidden = true
	)
	default String selectedHubPack()
	{
		return "";
	}

	@ConfigItem(
		keyName = "selectedHubPack",
		name = "",
		description = ""
	)
	void selectedHubPack(String pack);

	@ConfigItem(
		keyName = ORIGINAL_OVERLAY_COLOR,
		name = "",
		description = "",
		hidden = true
	)
	default String originalOverlayColor()
	{
		return "";
	}

	@ConfigItem(
		keyName = ORIGINAL_OVERLAY_COLOR,
		name = "",
		description = ""
	)
	void originalOverlayColor(String color);
}

package melky.resourcepacks;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.nio.file.Path;
import java.util.concurrent.ScheduledExecutorService;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import melky.resourcepacks.ConfigKeys.InterfaceStyles;
import melky.resourcepacks.event.ResourcePacksChanged;
import melky.resourcepacks.hub.ResourcePacksHubPanel;
import melky.resourcepacks.overrides.Overrides;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.events.SessionClose;
import net.runelite.client.events.SessionOpen;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.interfacestyles.Skin;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import okhttp3.HttpUrl;

@PluginDescriptor(
	name = "Resource packs"
)
@Slf4j
public class ResourcePacksPlugin extends Plugin
{
	public static final Path PACKS_BASE_DIR = Path.of(RuneLite.RUNELITE_DIR.getPath(), "resource-packs-repository");
	public static final String BRANCH = "github-actions";
	public static final String OVERLAY_COLOR_CONFIG = "overlayBackgroundColor";
	public static final HttpUrl GITHUB = HttpUrl.parse("https://github.com/melkypie/resource-packs");
	public static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/melkypie/resource-packs");
	public static final HttpUrl API_GITHUB = HttpUrl.parse("https://api.github.com/repos/melkypie/resource-packs");

	@Setter
	private static boolean ignoreOverlayConfig = false;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ResourcePacksConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ResourcePacksManager resourcePacksManager;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private Overrides overrides;

	private ResourcePacksHubPanel resourcePacksHubPanel;
	private NavigationButton navButton;
	private long currentProfile = Long.MIN_VALUE;
	private GameState lastGameState;

	@Provides
	ResourcePacksConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ResourcePacksConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		var packsDir = PACKS_BASE_DIR.toFile();
		if (!packsDir.exists())
		{
			packsDir.mkdirs();
		}

		var noticeFile = Path.of(PACKS_BASE_DIR + "", "DO_NOT_EDIT_CHANGES_WILL_BE_OVERWRITTEN").toFile();
		if (!noticeFile.exists())
		{
			noticeFile.createNewFile();
		}

		resourcePacksManager.touchFolder();

		if (client.getGameState() == GameState.LOGGED_IN &&
			configManager.getConfiguration(InterfaceStyles.GROUP_NAME, InterfaceStyles.gameframe, Skin.class) != Skin.DEFAULT &&
			!config.disableInterfaceStylesPrompt())
		{
			setInterfaceStylesGameframeOption();
		}

		executor.submit(() ->
		{
			resourcePacksManager.refreshPlugins();
			queueUpdateAllOverrides();
		});

		resourcePacksHubPanel = injector.getInstance(ResourcePacksHubPanel.class);
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/panel.png");

		navButton = NavigationButton.builder()
			.tooltip("Resource packs hub")
			.icon(icon)
			.priority(10)
			.panel(resourcePacksHubPanel)
			.build();

		if (!config.hideSidePanelButton())
		{
			clientToolbar.addNavigation(navButton);
		}

		currentProfile = configManager.getProfile().getId();
	}

	@Override
	protected void shutDown()
	{
		clientThread.invokeLater(() ->
		{
			resourcePacksManager.adjustWidgetDimensions(false);
			resourcePacksManager.removeGameframe();
			resourcePacksManager.resetWidgetOverrides();
			resourcePacksManager.resetCrossSprites();
			resourcePacksManager.clientCrossSprites.clear();
		});

		if (config.allowLoginScreen())
		{
			resourcePacksManager.resetLoginScreen();
		}

		if (config.allowOverlayColor())
		{
			resourcePacksManager.resetOverlayColor();
		}

		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onBeforeRender(BeforeRender event)
	{
		resourcePacksManager.adjustWidgetDimensions(true);
	}

	@Subscribe(priority = Float.MIN_VALUE)
	public void onConfigChanged(ConfigChanged event)
	{
		if (currentProfile != configManager.getProfile().getId())
		{
			return;
		}

		if (event.getGroup().equals(ResourcePacksConfig.GROUP_NAME))
		{
			switch (event.getKey())
			{
				case "allowSpellsPrayers":
				case "allowColorPack":
				case "colorPackOverlay":
				case "colorPack":
				case "resourcePack":
					clientThread.invokeLater(resourcePacksManager::updateAllOverrides);
					break;
				case "allowOverlayColor":
					if (config.allowOverlayColor())
					{
						clientThread.invokeLater(resourcePacksManager::updateAllOverrides);
					}
					else
					{
						resourcePacksManager.resetOverlayColor();
					}
					break;
				case "allowCrossSprites":
					if (config.allowCrossSprites())
					{
						clientThread.invokeLater(resourcePacksManager::changeCrossSprites);
					}
					else
					{
						resourcePacksManager.resetCrossSprites();
					}
					break;
				case "allowLoginScreen":
					if (config.allowLoginScreen())
					{
						clientThread.invokeLater(resourcePacksManager::updateAllOverrides);
					}
					else
					{
						resourcePacksManager.resetLoginScreen();
					}
					break;
				case "hideSidePanelButton":
					clientThread.invokeLater(this::toggleSidePanelButton);
					break;
			}
		}
		else if (event.getGroup().equals("banktags") && event.getKey().equals("useTabs"))
		{
			clientThread.invoke(resourcePacksManager::reloadBankTagSprites);
		}
		else if (config.allowOverlayColor() && !ignoreOverlayConfig &&
			event.getGroup().equals(RuneLiteConfig.GROUP_NAME) && event.getKey().equals(OVERLAY_COLOR_CONFIG))
		{
			config.originalOverlayColor(event.getNewValue());

			if (config.displayWarnings())
			{
				sendWarning("Your overlay color will be overwritten by your resource pack. You can disable this feature by turning off 'Allow overlay color to be changed'.");
			}
		}
		else if (shouldReset(event))
		{
			// lazy reset to try and be after other plugins
			clientThread.invokeLater(() -> clientThread.invokeLater(resourcePacksManager::updateAllOverrides));
		}
	}

	@Subscribe
	public void onResourcePacksChanged(ResourcePacksChanged packsChanged)
	{
		SwingUtilities.invokeLater(() -> resourcePacksHubPanel.reloadResourcePackList(packsChanged.getNewManifest()));
	}

	@Subscribe
	public void onSessionOpen(SessionOpen event)
	{
		executor.submit(resourcePacksManager::refreshPlugins);
	}

	@Subscribe
	public void onSessionClose(SessionClose event)
	{
		executor.submit(resourcePacksManager::refreshPlugins);
	}

	@Subscribe(priority = Float.MIN_VALUE)
	public void onProfileChanged(ProfileChanged event)
	{
		currentProfile = configManager.getProfile().getId();
		resourcePacksManager.touchFolder();

		executor.submit(() ->
		{
			resourcePacksManager.refreshPlugins();
			clientThread.invokeLater(resourcePacksManager::updateAllOverrides);
		});
	}

	@Subscribe(priority = Float.MIN_VALUE)
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN)
		{
			resourcePacksManager.changeCrossSprites();

			if (lastGameState == GameState.STARTING)
			{
				queueUpdateAllOverrides();
			}
		}

		if (client.getGameState() == GameState.LOGGED_IN &&
			configManager.getConfiguration(InterfaceStyles.GROUP_NAME, InterfaceStyles.gameframe, Skin.class) != Skin.DEFAULT &&
			!config.disableInterfaceStylesPrompt())
		{
			setInterfaceStylesGameframeOption();
			clientThread.invokeLater(resourcePacksManager::updateAllOverrides);
		}

		lastGameState = gameStateChanged.getGameState();
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (!overrides.isEmpty() && overrides.contains(event.getScriptId()))
		{
			for (var widgetOverride : overrides.get(event.getScriptId()))
			{
				resourcePacksManager.addPropertyToWidget(widgetOverride, false);
			}
		}
	}

	private void queueUpdateAllOverrides()
	{
		clientThread.invokeLater(() ->
		{
			if (client.getGameState().getState() < GameState.LOGIN_SCREEN.getState())
			{
				return false;
			}

			resourcePacksManager.updateAllOverrides();
			return true;
		});
	}

	private static boolean shouldReset(ConfigChanged event)
	{
		return event.getGroup().equals(InterfaceStyles.GROUP_NAME) ||
			(event.getGroup().equals(RuneLiteConfig.GROUP_NAME) && ConfigKeys.Plugins.interfacestylesplugin.equals(event.getKey()));
	}

	private void toggleSidePanelButton()
	{
		if (config.hideSidePanelButton())
		{
			clientToolbar.removeNavigation(navButton);
		}
		else
		{
			clientToolbar.addNavigation(navButton);
		}
	}

	private void setInterfaceStylesGameframeOption()
	{
		if (config.displayWarnings())
		{
			sendWarning("Your interface styles gameframe option was set to default to fix interfaces being misaligned. You can disable Resource packs changing it to default inside it's config");
		}

		configManager.setConfiguration(InterfaceStyles.GROUP_NAME, InterfaceStyles.gameframe, Skin.DEFAULT);
	}

	private void sendWarning(String msg)
	{
		String message = new ChatMessageBuilder()
			.append(ChatColorType.NORMAL)
			.append("[")
			.append(ChatColorType.HIGHLIGHT)
			.append("Resource Packs")
			.append(ChatColorType.NORMAL)
			.append("] " + msg)
			.build();

		chatMessageManager.queue(QueuedMessage.builder()
			.type(ChatMessageType.CONSOLE)
			.runeLiteFormattedMessage(message)
			.build());
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * Copyright (c) 2018, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package melky.resourcepacks;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.game.SpriteOverride;

@RequiredArgsConstructor
public enum TabSprites implements SpriteOverride
{
	TAB_BACKGROUND(-201, "/tag-tab.png"),
	TAB_BACKGROUND_ACTIVE(-202, "/tag-tab-active.png"),
	UP_ARROW(-203, "/up-arrow.png"),
	DOWN_ARROW(-204, "/down-arrow.png"),
	NEW_TAB(-205, "/new-tab.png");

	@Getter
	private final int spriteId;

	@Getter
	private final String fileName;
}

/*
 * Copyright (c) 2020, melky <https://github.com/melkypie>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package melky.resourcepacks;

import com.google.common.collect.ImmutableSetMultimap;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.SpriteID;

@Getter
@RequiredArgsConstructor
public enum SpriteOverride
{
	TAB_COMBAT(SpriteID.TAB_COMBAT, Folder.TAB),
	TAB_STATS(SpriteID.TAB_STATS, Folder.TAB),
	TAB_QUESTS(SpriteID.TAB_QUESTS, Folder.TAB),
	TAB_QUESTS_PURPLE_KOUREND(SpriteID.TAB_QUESTS_PURPLE_KOUREND, Folder.TAB),
	TAB_QUESTS_RED_MINIGAMES(3563, Folder.TAB),
	TAB_QUESTS_GREEN_ACHIEVEMENT_DIARIES(SpriteID.TAB_QUESTS_GREEN_ACHIEVEMENT_DIARIES, Folder.TAB),
	TAB_INVENTORY(SpriteID.TAB_INVENTORY, Folder.TAB),
	TAB_EQUIPMENT(SpriteID.TAB_EQUIPMENT, Folder.TAB),
	TAB_PRAYER(SpriteID.TAB_PRAYER, Folder.TAB),
	TAB_MAGIC(SpriteID.TAB_MAGIC, Folder.TAB),
	TAB_MAGIC_SPELLBOOK_ANCIENT_MAGICKS(SpriteID.TAB_MAGIC_SPELLBOOK_ANCIENT_MAGICKS, Folder.TAB),
	TAB_MAGIC_SPELLBOOK_LUNAR(SpriteID.TAB_MAGIC_SPELLBOOK_LUNAR, Folder.TAB),
	TAB_MAGIC_SPELLBOOK_ARCEUUS(SpriteID.TAB_MAGIC_SPELLBOOK_ARCEUUS, Folder.TAB),
	TAB_REGULAR_GROUP_IRONMAN(3561, Folder.TAB),
	TAB_HARDCORE_GROUP_IRONMAN(3562, Folder.TAB),
	TAB_UNRANKED_GROUP_IRONMAN(3565, Folder.TAB),
	TAB_CLAN_CHAT(SpriteID.RS2_TAB_FRIENDS_CHAT, Folder.TAB),
	TAB_CLAN_CHANNEL(2307, Folder.TAB),
	TAB_GUEST_CLAN_CHANNEL(2308, Folder.TAB),
	TAB_FRIENDS(SpriteID.TAB_FRIENDS, Folder.TAB),
	TAB_IGNORES(SpriteID.TAB_IGNORES, Folder.TAB),
	TAB_LOGOUT(SpriteID.TAB_LOGOUT, Folder.TAB),
	TAB_OPTIONS(SpriteID.TAB_OPTIONS, Folder.TAB),
	TAB_EMOTES(SpriteID.TAB_EMOTES, Folder.TAB),
	TAB_MUSIC(SpriteID.TAB_MUSIC, Folder.TAB),
	TAB_ACCOUNT_MANAGEMENT(1709, Folder.TAB),
	TAB_LOGOUT_SMALL(SpriteID.UNUSED_TAB_LOGOUT_1191, Folder.TAB),
	TAB_COMBAT_ACHIEVEMENTS(2309, Folder.TAB),

	TAB_STONE_TOP_LEFT_SELECTED(SpriteID.TAB_STONE_TOP_LEFT_SELECTED, Folder.TAB),
	TAB_STONE_TOP_RIGHT_SELECTED(SpriteID.TAB_STONE_TOP_RIGHT_SELECTED, Folder.TAB),
	TAB_STONE_BOTTOM_LEFT_SELECTED(SpriteID.TAB_STONE_BOTTOM_LEFT_SELECTED, Folder.TAB),
	TAB_STONE_BOTTOM_RIGHT_SELECTED(SpriteID.TAB_STONE_BOTTOM_RIGHT_SELECTED, Folder.TAB),
	TAB_STONE_MIDDLE_SELECTED(SpriteID.TAB_STONE_MIDDLE_SELECTED, Folder.TAB),
	TAB_QUESTS_BROWN_RAIDING_PARTY(SpriteID.TAB_QUESTS_BROWN_RAIDING_PARTY, Folder.TAB),

	TAB_STASH_UNITS_SLANTED_EDGE_LEFT(SpriteID.STASH_UNITS_SLANTED_TAB_EDGE_LEFT, Folder.TAB),
	TAB_STASH_UNITS_SLANTED_MIDDLE(SpriteID.STASH_UNITS_SLANTED_TAB_MIDDLE, Folder.TAB),
	TAB_STASH_UNITS_SLANTED_EDGE_RIGHT(SpriteID.STASH_UNITS_SLANTED_TAB_EDGE_RIGHT, Folder.TAB),
	TAB_STASH_UNITS_SLANTED_EDGE_LEFT_HOVERED(SpriteID.STASH_UNITS_SLANTED_TAB_EDGE_LEFT_HOVERED, Folder.TAB),
	TAB_STASH_UNITS_SLANTED_MIDDLE_HOVERED(SpriteID.STASH_UNITS_SLANTED_TAB_MIDDLE_HOVERED, Folder.TAB),
	TAB_STASH_UNITS_SLANTED_EDGE_RIGHT_HOVERED(SpriteID.STASH_UNITS_SLANTED_TAB_EDGE_RIGHT_HOVERED, Folder.TAB),

	TAB_SMALL_LEFT_RIGHT_SELECTED(2277, Folder.TAB),
	TAB_SMALL_MIDDLE_SELECTED(2278, Folder.TAB),
	TAB_SMALL_LEFT_RIGHT(2279, Folder.TAB),
	TAB_SMALL_MIDDLE(2280, Folder.TAB),
	TAB_SMALL_LEFT_RIGHT_HOVERED(2281, Folder.TAB),
	TAB_SMALL_MIDDLE_HOVERED(2282, Folder.TAB),
	TAB_LARGE_LEFT_RIGHT_SELECTED(2283, Folder.TAB),
	TAB_LARGE_MIDDLE_SELECTED(2284, Folder.TAB),
	TAB_LARGE_LEFT_RIGHT(2285, Folder.TAB),
	TAB_LARGE_MIDDLE(2286, Folder.TAB),
	TAB_LARGE_LEFT_RIGHT_HOVERED(2287, Folder.TAB),
	TAB_LARGE_MIDDLE_HOVERED(2288, Folder.TAB),
	TAB_MEDIUM_LEFT_RIGHT_SELECTED(2564, Folder.TAB),
	TAB_MEDIUM_MIDDLE_SELECTED(2565, Folder.TAB),
	TAB_MEDIUM_LEFT_RIGHT(2566, Folder.TAB),
	TAB_MEDIUM_MIDDLE(2567, Folder.TAB),
	TAB_MEDIUM_LEFT_RIGHT_HOVERED(2568, Folder.TAB),
	TAB_MEDIUM_MIDDLE_HOVERED(2569, Folder.TAB),

	TAB_SIDE_BORDER_EDGE_TOP_LEFT_SELECTED(1004, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_TOP_RIGHT_SELECTED(1005, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_BOTTOM_LEFT_SELECTED(1006, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_BOTTOM_RIGHT_SELECTED(1007, Folder.TAB),
	TAB_SIDE_BORDER_TOP_SELECTED(1008, Folder.TAB),
	TAB_SIDE_BORDER_BOTTOM_SELECTED(1009, Folder.TAB),
	TAB_SIDE_BORDER_LEFT_SELECTED(1010, Folder.TAB),
	TAB_SIDE_BORDER_RIGHT_SELECTED(1011, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_TOP_LEFT(1012, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_TOP_RIGHT(SpriteID.UNKNOWN_BUTTON_METAL_CORNERS, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_BOTTOM_LEFT(SpriteID.UNKNOWN_BUTTON_METAL_CORNERS_HOVERED, Folder.TAB),
	TAB_SIDE_BORDER_EDGE_BOTTOM_RIGHT(2834, Folder.TAB),
	TAB_SIDE_BORDER_TOP(2835, Folder.TAB),
	TAB_SIDE_BORDER_BOTTOM(2836, Folder.TAB),
	TAB_SIDE_BORDER_LEFT(2837, Folder.TAB),
	TAB_SIDE_BORDER_RIGHT(2838, Folder.TAB),
	TAB_SIDE_BORDER_MIDDLE(2839, Folder.TAB),
	TAB_SIDE_BORDER_TOP_LEFT(3382, Folder.TAB),
	TAB_SIDE_BORDER_TOP_RIGHT(3383, Folder.TAB),
	TAB_SIDE_BORDER_BOTTOM_LEFT(3384, Folder.TAB),
	TAB_SIDE_BORDER_BOTTOM_RIGHT(3385, Folder.TAB),

	TAB_TRANSPARENT_SHORT_LEFT_RIGHT_OUTLINE(6317, Folder.TAB),
	TAB_TRANSPARENT_SHORT_MIDDLE_OUTLINE(6318, Folder.TAB),
	TAB_TRANSPARENT_SHORT_LEFT_RIGHT_OUTLINE_SELECTED(6319, Folder.TAB),
	TAB_TRANSPARENT_SHORT_MIDDLE_OUTLINE_SELECTED(6320, Folder.TAB),
	TAB_TRANSPARENT_SHORT_LEFT_RIGHT_BACKGROUND(6321, Folder.TAB),
	TAB_TRANSPARENT_SHORT_MIDDLE_BACKGROUND(6322, Folder.TAB),
	TAB_TRANSPARENT_SHORT_LEFT_RIGHT_HOVERED(6323, Folder.TAB),
	TAB_TRANSPARENT_SHORT_MIDDLE_HOVERED(6324, Folder.TAB),
	TAB_TRANSPARENT_TALL_LEFT_RIGHT_OUTLINE(6325, Folder.TAB),
	TAB_TRANSPARENT_TALL_MIDDLE_OUTLINE(6326, Folder.TAB),
	TAB_TRANSPARENT_TALL_LEFT_RIGHT_OUTLINE_SELECTED(6327, Folder.TAB),
	TAB_TRANSPARENT_TALL_MIDDLE_OUTLINE_SELECTED(6328, Folder.TAB),
	TAB_TRANSPARENT_TALL_LEFT_RIGHT_BACKGROUND(6329, Folder.TAB),
	TAB_TRANSPARENT_TALL_MIDDLE_BACKGROUND(6330, Folder.TAB),
	TAB_TRANSPARENT_TALL_LEFT_RIGHT_HOVERED(6331, Folder.TAB),
	TAB_TRANSPARENT_TALL_MIDDLE_HOVERED(6332, Folder.TAB),

	BUTTON_FRIENDS(SpriteID.BUTTON_FRIENDS, Folder.BUTTON),
	BUTTON_IGNORES(SpriteID.BUTTON_IGNORES, Folder.BUTTON),
	BUTTON_REGULAR_SMALL(1700, Folder.BUTTON),
	BUTTON_REGULAR_LARGE(1701, Folder.BUTTON),
	BUTTON_CORNER_TOP_LEFT(SpriteID.BUTTON_CORNER_TOP_LEFT, Folder.BUTTON),
	BUTTON_EDGE_TOP(SpriteID.BUTTON_EDGE_TOP, Folder.BUTTON),
	BUTTON_CORNER_TOP_RIGHT(SpriteID.BUTTON_CORNER_TOP_RIGHT, Folder.BUTTON),
	BUTTON_EDGE_LEFT(SpriteID.BUTTON_EDGE_LEFT, Folder.BUTTON),
	BUTTON_MIDDLE(SpriteID.BUTTON_MIDDLE, Folder.BUTTON),
	BUTTON_EDGE_RIGHT(SpriteID.BUTTON_EDGE_RIGHT, Folder.BUTTON),
	BUTTON_CORNER_BOTTOM_LEFT(SpriteID.BUTTON_CORNER_BOTTOM_LEFT, Folder.BUTTON),
	BUTTON_EDGE_BOTTOM(SpriteID.BUTTON_EDGE_BOTTOM, Folder.BUTTON),
	BUTTON_CORNER_BOTTOM_RIGHT(SpriteID.BUTTON_CORNER_BOTTOM_RIGHT, Folder.BUTTON),
	BUTTON_CORNER_TOP_LEFT_SELECTED(SpriteID.BUTTON_CORNER_TOP_LEFT_SELECTED, Folder.BUTTON),
	BUTTON_EDGE_TOP_SELECTED(SpriteID.BUTTON_EDGE_TOP_SELECTED, Folder.BUTTON),
	BUTTON_CORNER_TOP_RIGHT_SELECTED(SpriteID.BUTTON_CORNER_TOP_RIGHT_SELECTED, Folder.BUTTON),
	BUTTON_EDGE_LEFT_SELECTED(SpriteID.BUTTON_EDGE_LEFT_SELECTED, Folder.BUTTON),
	BUTTON_MIDDLE_SELECTED(SpriteID.BUTTON_MIDDLE_SELECTED, Folder.BUTTON),
	BUTTON_EDGE_RIGHT_SELECTED(SpriteID.BUTTON_EDGE_RIGHT_SELECTED, Folder.BUTTON),
	BUTTON_CORNER_BOTTOM_LEFT_SELECTED(SpriteID.BUTTON_CORNER_BOTTOM_LEFT_SELECTED, Folder.BUTTON),
	BUTTON_EDGE_BOTTOM_SELECTED(SpriteID.BUTTON_EDGE_BOTTOM_SELECTED, Folder.BUTTON),
	BUTTON_CORNER_BOTTOM_RIGHT_SELECTED(SpriteID.BUTTON_CORNER_BOTTOM_RIGHT_SELECTED, Folder.BUTTON),
	BUTTON_OPTIONS_SQUARE(SpriteID.OPTIONS_SQUARE_BUTTON, Folder.BUTTON),
	BUTTON_OPTIONS_SQUARE_SELECTED(SpriteID.OPTIONS_SQUARE_BUTTON_SELECTED, Folder.BUTTON),
	BUTTON_MUSIC_PLAYER(4925, Folder.BUTTON),
	BUTTON_MUSIC_PLAYER_SELECTED(4926, Folder.BUTTON),
	BUTTON_UNKNOWN_SQUARE_SMALL(SpriteID.UNKNOWN_BUTTON_SQUARE_SMALL, Folder.BUTTON),
	BUTTON_UNKNOWN_SQUARE_SMALL_SELECTED(SpriteID.UNKNOWN_BUTTON_SQUARE_SMALL_SELECTED, Folder.BUTTON),
	BUTTON_WORLD_SWITCHER_MIDDLE(SpriteID.UNKNOWN_BUTTON_MIDDLE, Folder.BUTTON),
	BUTTON_LOGOUT_MIDDLE(SpriteID.UNKNOWN_BUTTON_MIDDLE_SELECTED, Folder.BUTTON),
	BUTTON_COMBAT_STYLE_NARROW(SpriteID.COMBAT_STYLE_BUTTON_NARROW, Folder.BUTTON),
	BUTTON_COMBAT_STYLE_NARROW_SELECTED(SpriteID.COMBAT_STYLE_BUTTON_NARROW_SELECTED, Folder.BUTTON),
	BUTTON_COMBAT_STYLE_THIN(SpriteID.COMBAT_STYLE_BUTTON_THIN, Folder.BUTTON),
	BUTTON_COMBAT_STYLE_THIN_SELECTED(SpriteID.COMBAT_STYLE_BUTTON_THIN_SELECTED, Folder.BUTTON),
	BUTTON_BOTTOM_LINE_MODE_WINDOW_CLOSE_SMALL(SpriteID.BOTTOM_LINE_MODE_WINDOW_CLOSE_BUTTON_SMALL, Folder.BUTTON),
	BUTTON_BOTTOM_LINE_MODE_WINDOW_CLOSE_SMALL_HOVERED(SpriteID.BOTTOM_LINE_MODE_WINDOW_CLOSE_BUTTON_SMALL_HOVERED, Folder.BUTTON),
	BUTTON_TUTORIAL(2521, Folder.BUTTON),
	BUTTON_TUTORIAL_HOVERED(2522, Folder.BUTTON),
	BUTTON_SLAYER_REWARDS_AND_POLL_HISTORY(SpriteID.SLAYER_REWARDS_AND_POLL_HISTORY_BUTTON, Folder.BUTTON),
	BUTTON_SLAYER_REWARDS_AND_POLL_HISTORY_SELECTED(SpriteID.SLAYER_REWARDS_AND_POLL_HISTORY_BUTTON_SELECTED, Folder.BUTTON),
	BUTTON_EQUIPMENT_STATS_ICON(SpriteID.EQUIPMENT_EQUIPMENT_STATS, Folder.BUTTON),
	BUTTON_EQUIPMENT_GUIDE_PRICES(SpriteID.EQUIPMENT_GUIDE_PRICES, Folder.BUTTON),
	BUTTON_EQUIPMENT_CALL_FOLLOWER(SpriteID.EQUIPMENT_CALL_FOLLOWER, Folder.BUTTON),
	BUTTON_EQUIPMENT_ITEMS_LOST_ON_DEATH(SpriteID.EQUIPMENT_ITEMS_LOST_ON_DEATH, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_TOP_LEFT(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_TOP_LEFT, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_TOP_RIGHT(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_TOP_RIGHT, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_BOTTOM_LEFT(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_BOTTOM_LEFT, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_BOTTOM_RIGHT(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_BOTTOM_RIGHT, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_LEFT(SpriteID.EQUIPMENT_BUTTON_EDGE_LEFT, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_TOP(SpriteID.EQUIPMENT_BUTTON_EDGE_TOP, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_RIGHT(SpriteID.EQUIPMENT_BUTTON_EDGE_RIGHT, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_BOTTOM(SpriteID.EQUIPMENT_BUTTON_EDGE_BOTTOM, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_TOP_LEFT_HOVERED(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_TOP_LEFT_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_TOP_RIGHT_HOVERED(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_TOP_RIGHT_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_BOTTOM_LEFT_HOVERED(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_BOTTOM_LEFT_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_METAL_CORNER_BOTTOM_RIGHT_HOVERED(SpriteID.EQUIPMENT_BUTTON_METAL_CORNER_BOTTOM_RIGHT_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_LEFT_HOVERED(SpriteID.EQUIPMENT_BUTTON_EDGE_LEFT_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_TOP_HOVERED(SpriteID.EQUIPMENT_BUTTON_EDGE_TOP_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_RIGHT_HOVERED(SpriteID.EQUIPMENT_BUTTON_EDGE_RIGHT_HOVERED, Folder.BUTTON),
	BUTTON_EQUIPMENT_EDGE_BOTTOM_HOVERED(SpriteID.EQUIPMENT_BUTTON_EDGE_BOTTOM_HOVERED, Folder.BUTTON),
	BUTTON_WORLD_MAP_METAL_CORNER_TOP_LEFT(SpriteID.WORLD_MAP_BUTTON_METAL_CORNER_TOP_LEFT, Folder.BUTTON),
	BUTTON_WORLD_MAP_METAL_CORNER_TOP_RIGHT(SpriteID.WORLD_MAP_BUTTON_METAL_CORNER_TOP_RIGHT, Folder.BUTTON),
	BUTTON_WORLD_MAP_METAL_CORNER_BOTTOM_LEFT(SpriteID.WORLD_MAP_BUTTON_METAL_CORNER_BOTTOM_LEFT, Folder.BUTTON),
	BUTTON_WORLD_MAP_METAL_CORNER_BOTTOM_RIGHT(SpriteID.WORLD_MAP_BUTTON_METAL_CORNER_BOTTOM_RIGHT, Folder.BUTTON),
	BUTTON_WORLD_MAP_EDGE_LEFT(SpriteID.WORLD_MAP_BUTTON_EDGE_LEFT, Folder.BUTTON),
	BUTTON_WORLD_MAP_EDGE_TOP(SpriteID.WORLD_MAP_BUTTON_EDGE_TOP, Folder.BUTTON),
	BUTTON_WORLD_MAP_EDGE_RIGHT(SpriteID.WORLD_MAP_BUTTON_EDGE_RIGHT, Folder.BUTTON),
	BUTTON_WORLD_MAP_EDGE_BOTTOM(SpriteID.WORLD_MAP_BUTTON_EDGE_BOTTOM, Folder.BUTTON),
	BUTTON_ENTER_WILDERNESS_TELEPORT(SpriteID.UNKNOWN_BUTTON_METAL_CORNERED, Folder.BUTTON),
	BUTTON_ENTER_WILDERNESS_TELEPORT_HOVERED(SpriteID.UNKNOWN_BUTTON_METAL_CORNERED_HOVERED, Folder.BUTTON),
	BUTTON_BACK_ARROW(SpriteID.RS2_BUTTON_BACK_ARROW, Folder.BUTTON),
	BUTTON_BACK_ARROW_HOVERED(2385, Folder.BUTTON),
	BUTTON_FORWARD_ARROW(SpriteID.RS2_BUTTON_FORWARD_ARROW, Folder.BUTTON),
	BUTTON_FORWARD_ARROW_HOVERED(2389, Folder.BUTTON),
	BUTTON_LARGE_WITH_RED_X(SpriteID.UNKNOWN_LARGE_BUTTON_WITH_RED_X, Folder.BUTTON),
	BUTTON_LEFT_ARROW(1021, Folder.BUTTON),
	BUTTON_LEFT_ARROW_HOVERED(1022, Folder.BUTTON),
	BUTTON_MENU(2289, Folder.BUTTON),
	BUTTON_MENU_SELECTED(2290, Folder.BUTTON),
	BUTTON_ENTER_ARROW(2249, Folder.BUTTON),
	BUTTON_ENTER_ARROW_HOVERED(2250, Folder.BUTTON),

	BUTTON_SORT_BY_CONSTRUCTION_LEVEL(2257, Folder.BUTTON),
	BUTTON_SORT_BY_GILDED_ALTAR(2251, Folder.BUTTON),
	BUTTON_SORT_BY_NEXUS(2252, Folder.BUTTON),
	BUTTON_SORT_BY_JEWELLERY_BOX(2253, Folder.BUTTON),
	BUTTON_SORT_BY_POOL(2254, Folder.BUTTON),
	BUTTON_SORT_BY_OCCULT_ALTAR(2255, Folder.BUTTON),
	BUTTON_SORT_BY_ARMOUR_STAND(2256, Folder.BUTTON),

	BUTTON_GIANTS_FOUNDRY_EDGE_TOP(3528, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_EDGE_BOTTOM(3529, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_EDGE_LEFT(3530, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_EDGE_RIGHT(3531, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_CORNER_TOP_LEFT(3524, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_CORNER_TOP_RIGHT(3525, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_CORNER_BOTTOM_LEFT(3526, Folder.BUTTON),
	BUTTON_GIANTS_FOUNDRY_CORNER_BOTTOM_RIGHT(3527, Folder.BUTTON),

	SKILL_ATTACK(SpriteID.SKILL_ATTACK, Folder.SKILL),
	SKILL_STRENGTH(SpriteID.SKILL_STRENGTH, Folder.SKILL),
	SKILL_DEFENCE(SpriteID.SKILL_DEFENCE, Folder.SKILL),
	SKILL_RANGED(SpriteID.SKILL_RANGED, Folder.SKILL),
	SKILL_PRAYER(SpriteID.SKILL_PRAYER, Folder.SKILL),
	SKILL_MAGIC(SpriteID.SKILL_MAGIC, Folder.SKILL),
	SKILL_HITPOINTS(SpriteID.SKILL_HITPOINTS, Folder.SKILL),
	SKILL_AGILITY(SpriteID.SKILL_AGILITY, Folder.SKILL),
	SKILL_HERBLORE(SpriteID.SKILL_HERBLORE, Folder.SKILL),
	SKILL_THIEVING(SpriteID.SKILL_THIEVING, Folder.SKILL),
	SKILL_CRAFTING(SpriteID.SKILL_CRAFTING, Folder.SKILL),
	SKILL_FLETCHING(SpriteID.SKILL_FLETCHING, Folder.SKILL),
	SKILL_MINING(SpriteID.SKILL_MINING, Folder.SKILL),
	SKILL_SMITHING(SpriteID.SKILL_SMITHING, Folder.SKILL),
	SKILL_FISHING(SpriteID.SKILL_FISHING, Folder.SKILL),
	SKILL_COOKING(SpriteID.SKILL_COOKING, Folder.SKILL),
	SKILL_FIREMAKING(SpriteID.SKILL_FIREMAKING, Folder.SKILL),
	SKILL_WOODCUTTING(SpriteID.SKILL_WOODCUTTING, Folder.SKILL),
	SKILL_RUNECRAFT(SpriteID.SKILL_RUNECRAFT, Folder.SKILL),
	SKILL_SLAYER(SpriteID.SKILL_SLAYER, Folder.SKILL),
	SKILL_FARMING(SpriteID.SKILL_FARMING, Folder.SKILL),
	SKILL_HUNTER(SpriteID.SKILL_HUNTER, Folder.SKILL),
	SKILL_CONSTRUCTION(SpriteID.SKILL_CONSTRUCTION, Folder.SKILL),
	SKILL_TOTAL(SpriteID.SKILL_TOTAL, Folder.SKILL),

	COMPASS(SpriteID.COMPASS_TEXTURE, Folder.OTHER),
	WINDOW_CLOSE_BUTTON(SpriteID.WINDOW_CLOSE_BUTTON, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_HOVERED(SpriteID.WINDOW_CLOSE_BUTTON_HOVERED, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_RED_X(SpriteID.WINDOW_CLOSE_BUTTON_RED_X, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_RED_X_HOVERED(SpriteID.WINDOW_CLOSE_BUTTON_RED_X_HOVERED, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_BROWN_X(SpriteID.WINDOW_CLOSE_BUTTON_BROWN_X, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_BROWN_X_HOVERED(SpriteID.WINDOW_CLOSE_BUTTON_BROWN_X_HOVERED, Folder.OTHER),
	WINDOW_FRAME_EDGE_LEFT(SpriteID.RS2_WINDOW_FRAME_EDGE_LEFT, Folder.OTHER),

	LOGOUT_THUMB_UP(SpriteID.LOGOUT_THUMB_UP, Folder.OTHER),
	LOGOUT_THUMB_DOWN(SpriteID.LOGOUT_THUMB_DOWN, Folder.OTHER),
	LOGOUT_THUMB_UP_HOVERED(SpriteID.LOGOUT_THUMB_UP_HOVERED, Folder.OTHER),
	LOGOUT_THUMB_DOWN_HOVERED(SpriteID.LOGOUT_THUMB_DOWN_HOVERED, Folder.OTHER),

	LOGOUT_ONE_STAR(6307, Folder.OTHER),
	LOGOUT_TWO_STARS(6306, Folder.OTHER),
	LOGOUT_THREE_STARS(6305, Folder.OTHER),
	LOGOUT_FOUR_STARS(6304, Folder.OTHER),
	LOGOUT_FIVE_STARS(5273, Folder.OTHER),
	LOGOUT_ONE_STAR_HOVERED(6312, Folder.OTHER),
	LOGOUT_TWO_STARS_HOVERED(6311, Folder.OTHER),
	LOGOUT_THREE_STARS_HOVERED(6310, Folder.OTHER),
	LOGOUT_FOUR_STARS_HOVERED(6309, Folder.OTHER),
	LOGOUT_FIVE_STARS_HOVERED(6308, Folder.OTHER),

	WILDERNESS_DANGER_ICON(SpriteID.UNKNOWN_DISABLED_ICON, Folder.OTHER),
	RESET_KILLCOUNT_BUTTON(SpriteID.UNKNOWN_BLACK_ANTICLOCKWISE_ARROW_SHADOWED, Folder.OTHER),
	RESET_KILLCOUNT_BUTTON_HOVERED(SpriteID.UNKNOWN_BLACK_ANTICLOCKWISE_ARROW, Folder.OTHER),
	LIST_SORTING_ARROW_ASCENDING(SpriteID.LIST_SORTING_ARROW_ASCENDING, Folder.OTHER),
	LIST_SORTING_ARROW_DESCENDING(SpriteID.LIST_SORTING_ARROW_DESCENDING, Folder.OTHER),
	FAIRY_RING_REMOVE_FAVOURITE(SpriteID.FAIRY_RING_REMOVE_FAVOURITE, Folder.OTHER),
	FAIRY_RING_ADD_FAVOURITE(SpriteID.FAIRY_RING_ADD_FAVOURITE, Folder.OTHER),
	WORLD_SWITCHER_STAR_FREE(SpriteID.WORLD_SWITCHER_STAR_FREE, Folder.OTHER),
	WORLD_SWITCHER_STAR_MEMBERS(SpriteID.WORLD_SWITCHER_STAR_MEMBERS, Folder.OTHER),
	STASH_UNITS_GREEN_CHECK_MARK(SpriteID.STASH_UNITS_GREEN_CHECK_MARK, Folder.OTHER),
	REFRESH_ICON(SpriteID.UNKNOWN_WHITE_REFRESH_ARROWS, Folder.OTHER),
	FRIENDS_PREVIOUS_USERNAME(SpriteID.FRIENDS_PREVIOUS_USERNAME, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_PARCHMENT(SpriteID.WINDOW_CLOSE_BUTTON_PARCHMENT, Folder.OTHER),
	WINDOW_CLOSE_BUTTON_PARCHMENT_HOVERED(SpriteID.WINDOW_CLOSE_BUTTON_PARCHMENT_HOVERED, Folder.OTHER),
	WORLD_SWITCHER_WORLD_STAR_PVP(SpriteID.WORLD_SWITCHER_WORLD_STAR_PVP, Folder.OTHER),
	WORLD_SWITCHER_WORLD_STAR_DEADMAN(SpriteID.WORLD_SWITCHER_WORLD_STAR_DEADMAN, Folder.OTHER),
	SPELL_REQUIREMENT_LOCK_GREEN(3011, Folder.OTHER),
	SPELL_REQUIREMENT_LOCK_BLUE(3012, Folder.OTHER),
	SPELL_REQUIREMENT_LOCK_RED(3013, Folder.OTHER),
	SPELL_REQUIREMENT_LOCK_ORANGE(3014, Folder.OTHER),
	WORLD_SWITCHER_STAR_SPEEDRUNNING(4350, Folder.OTHER),

	MINIMAP_ORB_FRAME(SpriteID.MINIMAP_ORB_FRAME, Folder.OTHER),
	MINIMAP_ORB_FRAME_HOVERED(SpriteID.MINIMAP_ORB_FRAME_HOVERED, Folder.OTHER),
	MINIMAP_ORB_FRAME_FLASHING(2140, Folder.OTHER),
	MINIMAP_ORB_FRAME_SMALL(2138, Folder.OTHER),
	MINIMAP_ORB_FRAME_SMALL_HOVERED(3517, Folder.OTHER),
	MINIMAP_ORB_XP(SpriteID.MINIMAP_ORB_XP, Folder.OTHER),
	MINIMAP_ORB_XP_ACTIVATED(SpriteID.MINIMAP_ORB_XP_ACTIVATED, Folder.OTHER),
	MINIMAP_ORB_XP_HOVERED(SpriteID.MINIMAP_ORB_XP_HOVERED, Folder.OTHER),
	MINIMAP_ORB_XP_ACTIVATED_HOVERED(SpriteID.MINIMAP_ORB_XP_ACTIVATED_HOVERED, Folder.OTHER),
	MINIMAP_ORB_WORLD_MAP_FRAME(SpriteID.MINIMAP_ORB_WORLD_MAP_FRAME, Folder.OTHER),
	MINIMAP_ORB_WORLD_MAP_PLANET(SpriteID.MINIMAP_ORB_WORLD_MAP_PLANET, Folder.OTHER),
	MINIMAP_ORB_WORLD_MAP_PLANET_HOVERED(SpriteID.MINIMAP_ORB_WORLD_MAP_PLANET_HOVERED, Folder.OTHER),
	MINIMAP_ORB_PRAYER_ICON_ACTIVATED(SpriteID.MINIMAP_ORB_PRAYER_ICON_ACTIVATED, Folder.OTHER),
	MINIMAP_ORB_EMPTY(SpriteID.MINIMAP_ORB_EMPTY, Folder.OTHER),
	MINIMAP_ORB_HITPOINTS(SpriteID.MINIMAP_ORB_HITPOINTS, Folder.OTHER),
	MINIMAP_ORB_HITPOINTS_POISON(SpriteID.MINIMAP_ORB_HITPOINTS_POISON, Folder.OTHER),
	MINIMAP_ORB_HITPOINTS_DISEASE(SpriteID.MINIMAP_ORB_HITPOINTS_DISEASE, Folder.OTHER),
	MINIMAP_ORB_HITPOINTS_VENOM(SpriteID.MINIMAP_ORB_HITPOINTS_VENOM, Folder.OTHER),
	MINIMAP_ORB_PRAYER(SpriteID.MINIMAP_ORB_PRAYER, Folder.OTHER),
	MINIMAP_ORB_RUN(SpriteID.MINIMAP_ORB_RUN, Folder.OTHER),
	MINIMAP_ORB_RUN_ACTIVATED(SpriteID.MINIMAP_ORB_RUN_ACTIVATED, Folder.OTHER),
	MINIMAP_ORB_PRAYER_ACTIVATED(SpriteID.MINIMAP_ORB_PRAYER_ACTIVATED, Folder.OTHER),
	MINIMAP_ORB_HITPOINTS_ICON(SpriteID.MINIMAP_ORB_HITPOINTS_ICON, Folder.OTHER),
	MINIMAP_ORB_HITPOINTS_LOW_LIFE_ICON(3017, Folder.OTHER),
	MINIMAP_ORB_PRAYER_ICON(SpriteID.MINIMAP_ORB_PRAYER_ICON, Folder.OTHER),
	MINIMAP_ORB_PRAYER_LESSER_CORRUPTION_ICON(3015, Folder.OTHER),
	MINIMAP_ORB_PRAYER_GREATER_CORRUPTION_ICON(3016, Folder.OTHER),
	MINIMAP_ORB_RUN_ICON(SpriteID.MINIMAP_ORB_WALK_ICON, Folder.OTHER),
	MINIMAP_ORB_RUN_ICON_ACTIVATED(SpriteID.MINIMAP_ORB_RUN_ICON, Folder.OTHER),
	MINIMAP_ORB_SPECIAL(SpriteID.MINIMAP_ORB_SPECIAL, Folder.OTHER),
	MINIMAP_ORB_SPECIAL_ACTIVATED(SpriteID.MINIMAP_ORB_SPECIAL_ACTIVATED, Folder.OTHER),
	MINIMAP_ORB_SPECIAL_ICON(SpriteID.MINIMAP_ORB_SPECIAL_ICON, Folder.OTHER),
	MINIMAP_ORB_STORE(1609, Folder.OTHER),
	MINIMAP_ORB_STORE_ICON(1668, Folder.OTHER),
	MINIMAP_ORB_RUN_ICON_SLOWED_DEPLETION(SpriteID.MINIMAP_ORB_RUN_ICON_SLOWED_DEPLETION, Folder.OTHER),
	MINIMAP_ORB_ACTIVITY_ADVISER(4547, Folder.OTHER),
	MINIMAP_ORB_ACTIVITY_ADVISER_ICON(3018, Folder.OTHER),

	OLD_SCHOOL_MODE_SIDE_PANEL_EDGE_LEFT_UPPER(SpriteID.OLD_SCHOOl_MODE_SIDE_PANEL_EDGE_LEFT_UPPER, Folder.OTHER),
	OLD_SCHOOL_MODE_SIDE_PANEL_EDGE_LEFT_LOWER(SpriteID.OLD_SCHOOl_MODE_SIDE_PANEL_EDGE_LEFT_LOWER, Folder.OTHER),
	OLD_SCHOOL_MODE_SIDE_PANEL_EDGE_RIGHT(SpriteID.OLD_SCHOOl_MODE_SIDE_PANEL_EDGE_RIGHT, Folder.OTHER),

	WIKI_DESELECTED(SpriteID.WIKI_DESELECTED, Folder.OTHER),
	WIKI_SELECTED(SpriteID.WIKI_SELECTED, Folder.OTHER),

	PLUS_ICON(2312, Folder.OTHER),
	PLUS_ICON_HOVERED(2313, Folder.OTHER),
	MINUS_ICON(2314, Folder.OTHER),
	MINUS_ICON_HOVERED(2315, Folder.OTHER),

	DIALOG_BACKGROUND(SpriteID.DIALOG_BACKGROUND, Folder.DIALOG),
	DIALOG_BACKGROUND_BRIGHTER(SpriteID.DIALOG_BACKGROUND_BRIGHTER, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_TOP(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_TOP, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_LEFT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_LEFT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_BOTTOM(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_BOTTOM, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_RIGHT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_RIGHT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_TOP_LEFT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_TOP_LEFT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_TOP_RIGHT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_TOP_RIGHT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_BOTTOM_LEFT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_BOTTOM_LEFT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_BOTTOM_RIGHT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_CORNER_BOTTOM_RIGHT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_HORIZONTAL(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_EDGE_HORIZONTAL, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_LEFT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_LEFT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_RIGHT(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_RIGHT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_TOP(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_TOP, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_BOTTOM(SpriteID.BOTTOM_LINE_MODE_SIDE_PANEL_INTERSECTION_BOTTOM, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_EDGE_VERTICAL(SpriteID.BOTTOM_LINE_MODE_EDGE_VERTICAL, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_INTERSECTION_TOP(SpriteID.BOTTOM_LINE_MODE_INTERSECTION_TOP, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_INTERSECTION_BOTTOM(SpriteID.BOTTOM_LINE_MODE_INTERSECTION_BOTTOM, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_CORNER_TOP_LEFT(SpriteID.BOTTOM_LINE_MODE_CORNER_TOP_LEFT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_CORNER_TOP_RIGHT(SpriteID.BOTTOM_LINE_MODE_CORNER_TOP_RIGHT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_CORNER_BOTTOM_LEFT(SpriteID.BOTTOM_LINE_MODE_CORNER_BOTTOM_LEFT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_CORNER_BOTTOM_RIGHT(SpriteID.BOTTOM_LINE_MODE_CORNER_BOTTOM_RIGHT, Folder.DIALOG),
	DIALOG_BOTTOM_LINE_MODE_INTERSECTION_MIDDLE(SpriteID.BOTTOM_LINE_MODE_INTERSECTION_MIDDLE, Folder.DIALOG),
	DIALOG_IRON_RIVETS_VERTICAL(SpriteID.IRON_RIVETS_VERTICAL, Folder.DIALOG),
	DIALOG_IRON_RIVETS_HORIZONTAL(2546, Folder.DIALOG),
	DIALOG_IRON_RIVETS_BOTTOM(SpriteID.IRON_RIVETS_HORIZONTAL, Folder.DIALOG),
	DIALOG_IRON_RIVETS_CORNER_TOP_LEFT(SpriteID.IRON_RIVETS_CORNER_TOP_LEFT, Folder.DIALOG),
	DIALOG_IRON_RIVETS_CORNER_TOP_RIGHT(SpriteID.IRON_RIVETS_CORNER_TOP_RIGHT, Folder.DIALOG),
	DIALOG_IRON_RIVETS_CORNER_BOTTOM_LEFT(SpriteID.IRON_RIVETS_CORNER_BOTTOM_LEFT, Folder.DIALOG),
	DIALOG_IRON_RIVETS_CORNER_BOTTOM_RIGHT(SpriteID.IRON_RIVETS_CORNER_BOTTOM_RIGHT, Folder.DIALOG),
	DIALOG_IRON_RIVETS_EDGE_TOP(SpriteID.IRON_RIVETS_EDGE_TOP, Folder.DIALOG),
	DIALOG_IRON_RIVETS_EDGE_RIGHT(SpriteID.IRON_RIVETS_EDGE_RIGHT, Folder.DIALOG),
	DIALOG_BONDS_MEMBERSHIP_JEWEL(SpriteID.DIALOG_BONDS_MEMBERSHIP_JEWEL, Folder.DIALOG),
	DIALOG_PROGRESS_BAR_GREEN(3391, Folder.DIALOG),
	DIALOG_PROGRESS_BAR_GREY(3392, Folder.DIALOG),


	BANK_TAB(SpriteID.BANK_TAB, Folder.BANK),
	BANK_TAB_HOVERED(SpriteID.BANK_TAB_HOVERED, Folder.BANK),
	BANK_TAB_SELECTED(SpriteID.BANK_TAB_SELECTED, Folder.BANK),
	BANK_TAB_EMPTY(SpriteID.BANK_TAB_EMPTY, Folder.BANK),
	BANK_TAB_ADD_ICON(SpriteID.BANK_ADD_TAB_ICON, Folder.BANK),
	BANK_TAB_ALL_ITEMS_ICON(SpriteID.BANK_ALL_ITEMS_TAB_ICON, Folder.BANK),
	BANK_TAG_TAB(-201, Folder.BANK),
	BANK_TAG_TAB_ACTIVE(-202, Folder.BANK),
	BANK_TAG_UP_ARROW(-203, Folder.BANK),
	BANK_TAG_DOWN_ARROW(-204, Folder.BANK),
	BANK_TAG_NEW_TAB(-205, Folder.BANK),
	BANK_DEPOSIT_INVENTORY(SpriteID.BANK_DEPOSIT_INVENTORY, Folder.BANK),
	BANK_DEPOSIT_EQUIPMENT(SpriteID.BANK_DEPOSIT_EQUIPMENT, Folder.BANK),
	BANK_SEARCH(SpriteID.BANK_SEARCH, Folder.BANK),
	BANK_PLACEHOLDERS_LOCK(SpriteID.BANK_PLACEHOLDERS_LOCK, Folder.BANK),
	BANK_SHOW_MENU_ICON(SpriteID.BANK_SHOW_MENU_ICON, Folder.BANK),
	BANK_EQUIPMENT_VIEWER_ICON(2417, Folder.BANK),
	BANK_PIN_MARBLE_BACKGROUND(SpriteID.BANK_PIN_MARBLE_BACKGROUND, Folder.BANK),
	BANK_PIN_MARBLE_BACKGROUND_RED(SpriteID.BANK_PIN_MARBLE_BACKGROUND_RED, Folder.BANK),
	BANK_PIN_MARBLE_BUTTON_RED(SpriteID.BANK_PIN_MARBLE_BUTTON_RED, Folder.BANK),
	BANK_DEPOSIT_LOOTING_BAG(SpriteID.BANK_DEPOSIT_LOOTING_BAG, Folder.BANK),
	BANK_SHUFFLE_ITEMS_UP(2819, Folder.BANK),

	CHATBOX_BACKGROUND(SpriteID.CHATBOX, Folder.CHATBOX),
	CHATBOX_BUTTONS_BACKGROUND_STONES(SpriteID.CHATBOX_BUTTONS_BACKGROUND_STONES, Folder.CHATBOX),
	CHATBOX_BUTTON(3051, Folder.CHATBOX),
	CHATBOX_BUTTON_HOVERED(3052, Folder.CHATBOX),
	CHATBOX_BUTTON_NEW_MESSAGES(3055, Folder.CHATBOX),
	CHATBOX_BUTTON_SELECTED(3053, Folder.CHATBOX),
	CHATBOX_BUTTON_SELECTED_HOVERED(3054, Folder.CHATBOX),
	CHATBOX_REPORT_BUTTON(3057, Folder.CHATBOX),
	CHATBOX_REPORT_BUTTON_HOVERED(3058, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BACKGROUND(SpriteID.UNKNOWN_BACKGROUND_BEIGE, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_TOP_LEFT_HOVERED(SpriteID.BUTTON_METAL_CORNER_TOP_LEFT_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_TOP_RIGHT_HOVERED(SpriteID.BUTTON_METAL_CORNER_TOP_RIGHT_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_BOTTOM_LEFT_HOVERED(SpriteID.BUTTON_METAL_CORNER_BOTTOM_LEFT_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_BOTTOM_RIGHT_HOVERED(SpriteID.BUTTON_METAL_CORNER_BOTTOM_RIGHT_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_LEFT_HOVERED(SpriteID.BUTTON_METAL_EDGE_LEFT_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_TOP_HOVERED(SpriteID.BUTTON_METAL_EDGE_TOP_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_RIGHT_HOVERED(SpriteID.BUTTON_METAL_EDGE_RIGHT_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_BOTTOM_HOVERED(SpriteID.BUTTON_METAL_EDGE_BOTTOM_HOVERED, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_TOP_LEFT(SpriteID.BUTTON_METAL_CORNER_TOP_LEFT, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_TOP_RIGHT(SpriteID.BUTTON_METAL_CORNER_TOP_RIGHT, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_BOTTOM_LEFT(SpriteID.BUTTON_METAL_CORNER_BOTTOM_LEFT, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_CORNER_BOTTOM_RIGHT(SpriteID.BUTTON_METAL_CORNER_BOTTOM_RIGHT, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_LEFT(SpriteID.BUTTON_METAL_EDGE_LEFT, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_TOP(SpriteID.BUTTON_METAL_EDGE_TOP, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_RIGHT(SpriteID.BUTTON_METAL_EDGE_RIGHT, Folder.CHATBOX),
	CHATBOX_MAKE_ALL_BUTTON_METAL_EDGE_BOTTOM(SpriteID.BUTTON_METAL_EDGE_BOTTOM, Folder.CHATBOX),
	CHATBOX_SWORD_POINTED_LEFT(SpriteID.RS2_SWORD_POINTED_LEFT, Folder.CHATBOX),
	CHATBOX_SWORD_POINTED_RIGHT(SpriteID.RS2_SWORD_POINTED_RIGHT, Folder.CHATBOX),

	SCROLLBAR_ARROW_UP(SpriteID.SCROLLBAR_ARROW_UP, Folder.SCROLLBAR),
	SCROLLBAR_ARROW_DOWN(SpriteID.SCROLLBAR_ARROW_DOWN, Folder.SCROLLBAR),
	SCROLLBAR_THUMB_TOP(SpriteID.SCROLLBAR_THUMB_TOP, Folder.SCROLLBAR),
	SCROLLBAR_THUMB_MIDDLE(SpriteID.SCROLLBAR_THUMB_MIDDLE, Folder.SCROLLBAR),
	SCROLLBAR_THUMB_BOTTOM(SpriteID.SCROLLBAR_THUMB_BOTTOM, Folder.SCROLLBAR),
	SCROLLBAR_THUMB_MIDDLE_DARK(SpriteID.SCROLLBAR_THUMB_MIDDLE_DARK, Folder.SCROLLBAR),
	SCROLLBAR_DECORATED_ARROW_UP(SpriteID.UNKNOWN_DECORATED_ARROW_UP, Folder.SCROLLBAR),
	SCROLLBAR_DECORATED_ARROW_DOWN(SpriteID.UNKNOWN_DECORATED_ARROW_DOWN, Folder.SCROLLBAR),
	SCROLLBAR_DECORATED_FRAME_TOP(SpriteID.UNKNOWN_DECORATED_FRAME_TOP, Folder.SCROLLBAR),
	SCROLLBAR_DECORATED_FRAME_MIDDLE(SpriteID.UNKNOWN_DECORATED_FRAME_MIDDLE, Folder.SCROLLBAR),
	SCROLLBAR_DECORATED_FRAME_BOTTOM(SpriteID.UNKNOWN_DECORATED_FRAME_BOTTOM, Folder.SCROLLBAR),
	SCROLLBAR_DECORATED_MIDDLE(SpriteID.UNKNOWN_DECORATED_MIDDLE, Folder.SCROLLBAR),
	SCROLLBAR_TRANSPARENT_ARROW_UP(SpriteID.CHATBOX_TRANSPARENT_SCROLLBAR_ARROW_UP, Folder.SCROLLBAR),
	SCROLLBAR_TRANSPARENT_ARROW_DOWN(SpriteID.CHATBOX_TRANSPARENT_SCROLLBAR_ARROW_DOWN, Folder.SCROLLBAR),
	SCROLLBAR_TRANSPARENT_THUMB_TOP(SpriteID.CHATBOX_TRANSPARENT_SCROLLBAR_THUMB_TOP, Folder.SCROLLBAR),
	SCROLLBAR_TRANSPARENT_THUMB_MIDDLE(SpriteID.CHATBOX_TRANSPARENT_SCROLLBAR_THUMB_MIDDLE, Folder.SCROLLBAR),
	SCROLLBAR_TRANSPARENT_THUMB_BOTTOM(1189, Folder.SCROLLBAR),
	SCROLLBAR_TRANSPARENT_THUMB_BACKGROUND(SpriteID.CHATBOX_TRANSPARENT_SCROLLBAR_THUMB_BOTTOM, Folder.SCROLLBAR),

	FIXED_MODE_SIDE_PANEL_BACKGROUND(SpriteID.FIXED_MODE_SIDE_PANEL_BACKGROUND, Folder.FIXED_MODE),
	FIXED_MODE_TABS_ROW_BOTTOM(SpriteID.FIXED_MODE_TABS_ROW_BOTTOM, Folder.FIXED_MODE),
	FIXED_MODE_TABS_TOP_ROW(SpriteID.FIXED_MODE_TABS_TOP_ROW, Folder.FIXED_MODE),
	FIXED_MODE_MINIMAP_LEFT_EDGE(SpriteID.FIXED_MODE_MINIMAP_LEFT_EDGE, Folder.FIXED_MODE),
	FIXED_MODE_MINIMAP_RIGHT_EDGE(SpriteID.FIXED_MODE_MINIMAP_RIGHT_EDGE, Folder.FIXED_MODE),
	FIXED_MODE_WINDOW_FRAME_EDGE_TOP(SpriteID.FIXED_MODE_WINDOW_FRAME_EDGE_TOP, Folder.FIXED_MODE),
	FIXED_MODE_MINIMAP_AND_COMPASS_FRAME(SpriteID.FIXED_MODE_MINIMAP_AND_COMPASS_FRAME, Folder.FIXED_MODE),
	FIXED_MODE_MINIMAP_FRAME_BOTTOM(SpriteID.FIXED_MODE_MINIMAP_FRAME_BOTTOM, Folder.FIXED_MODE),
	FIXED_MODE_TOP_RIGHT_CORNER(SpriteID.FIXED_MODE_TOP_RIGHT_CORNER, Folder.FIXED_MODE),

	RESIZEABLE_MODE_SIDE_PANEL_BACKGROUND(SpriteID.RESIZEABLE_MODE_SIDE_PANEL_BACKGROUND, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_TABS_TOP_ROW(SpriteID.RESIZEABLE_MODE_TABS_TOP_ROW, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_TABS_BOTTOM_ROW(SpriteID.RESIZEABLE_MODE_TABS_BOTTOM_ROW, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_SIDE_PANEL_EDGE_LEFT(SpriteID.RESIZEABLE_MODE_SIDE_PANEL_EDGE_LEFT, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_SIDE_PANEL_EDGE_RIGHT(SpriteID.RESIZEABLE_MODE_SIDE_PANEL_EDGE_RIGHT, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_MINIMAP_AND_COMPASS_FRAME(SpriteID.RESIZEABLE_MODE_MINIMAP_AND_COMPASS_FRAME, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_TAB_STONE_MIDDLE(SpriteID.RESIZEABLE_MODE_TAB_STONE_MIDDLE, Folder.RESIZEABLE_MODE),
	RESIZEABLE_MODE_TAB_STONE_MIDDLE_SELECTED(SpriteID.RESIZEABLE_MODE_TAB_STONE_MIDDLE_SELECTED, Folder.RESIZEABLE_MODE),

	EQUIPMENT_SLOT_TILE(SpriteID.EQUIPMENT_SLOT_TILE, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_SELECTED(SpriteID.EQUIPMENT_SLOT_SELECTED, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_HEAD(SpriteID.EQUIPMENT_SLOT_HEAD, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_CAPE(SpriteID.EQUIPMENT_SLOT_CAPE, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_NECK(SpriteID.EQUIPMENT_SLOT_NECK, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_WEAPON(SpriteID.EQUIPMENT_SLOT_WEAPON, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_RING(SpriteID.EQUIPMENT_SLOT_RING, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_TORSO(SpriteID.EQUIPMENT_SLOT_TORSO, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_SHIELD(SpriteID.EQUIPMENT_SLOT_SHIELD, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_LEGS(SpriteID.EQUIPMENT_SLOT_LEGS, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_HANDS(SpriteID.EQUIPMENT_SLOT_HANDS, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_FEET(SpriteID.EQUIPMENT_SLOT_FEET, Folder.EQUIPMENT),
	EQUIPMENT_SLOT_AMMUNITION(SpriteID.EQUIPMENT_SLOT_AMMUNITION, Folder.EQUIPMENT),
	EQUIPMENT_WEIGHT(SpriteID.EQUIPMENT_WEIGHT, Folder.EQUIPMENT),

	STATS_TILE_HALF_LEFT(SpriteID.STATS_TILE_HALF_LEFT, Folder.STATS),
	STATS_TILE_HALF_RIGHT_WITH_SLASH(SpriteID.STATS_TILE_HALF_RIGHT_WITH_SLASH, Folder.STATS),
	STATS_TILE_HALF_RIGHT(SpriteID.STATS_TILE_HALF_RIGHT, Folder.STATS),
	STATS_TILE_HALF_LEFT_BLACK(SpriteID.STATS_TILE_HALF_LEFT_BLACK, Folder.STATS),
	STATS_TILE_HALF_RIGHT_BLACK(SpriteID.STATS_TILE_HALF_RIGHT_BLACK, Folder.STATS),
	STATS_TILE_HALF_LEFT_SELECTED(SpriteID.STATS_TILE_HALF_LEFT_SELECTED, Folder.STATS),
	STATS_TILE_HALF_RIGHT_SELECTED(SpriteID.STATS_TILE_HALF_RIGHT_SELECTED, Folder.STATS),
	STATS_TILE_HALF_RIGHT_WITH_SLASH_SELECTED(SpriteID.STATS_TILE_HALF_RIGHT_WITH_SLASH_SELECTED, Folder.STATS),

	OPTIONS_SLIDER_1_OF_4(SpriteID.OPTIONS_SLIDER_1_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_2_OF_4(SpriteID.OPTIONS_SLIDER_2_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_3_OF_4(SpriteID.OPTIONS_SLIDER_3_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_4_OF_4(SpriteID.OPTIONS_SLIDER_4_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_1_OF_4(SpriteID.OPTIONS_SLIDER_AND_THUMB_1_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_2_OF_4(SpriteID.OPTIONS_SLIDER_AND_THUMB_2_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_3_OF_4(SpriteID.OPTIONS_SLIDER_AND_THUMB_3_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_4_OF_4(SpriteID.OPTIONS_SLIDER_AND_THUMB_4_OF_4, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_1_OF_5(SpriteID.OPTIONS_SLIDER_AND_THUMB_1_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_2_OF_5(SpriteID.OPTIONS_SLIDER_AND_THUMB_2_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_3_OF_5(SpriteID.OPTIONS_SLIDER_AND_THUMB_3_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_4_OF_5(SpriteID.OPTIONS_SLIDER_AND_THUMB_4_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_AND_THUMB_5_OF_5(SpriteID.OPTIONS_SLIDER_AND_THUMB_5_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_1_OF_5(SpriteID.OPTIONS_SLIDER_1_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_2_OF_5(SpriteID.OPTIONS_SLIDER_2_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_3_OF_5(SpriteID.OPTIONS_SLIDER_3_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_4_OF_5(SpriteID.OPTIONS_SLIDER_4_OF_5, Folder.OPTIONS),
	OPTIONS_SLIDER_5_OF_5(SpriteID.OPTIONS_SLIDER_5_OF_5, Folder.OPTIONS),
	OPTIONS_ZOOM_SLIDER_THUMB(SpriteID.OPTIONS_ZOOM_SLIDER_THUMB, Folder.OPTIONS),
	OPTIONS_ROUND_CHECK_BOX(SpriteID.OPTIONS_ROUND_CHECK_BOX, Folder.OPTIONS),
	OPTIONS_ROUND_CHECK_BOX_CHECKED(SpriteID.OPTIONS_ROUND_CHECK_BOX_CHECKED, Folder.OPTIONS),
	OPTIONS_ROUND_CHECK_BOX_CROSSED(SpriteID.OPTIONS_ROUND_CHECK_BOX_CROSSED, Folder.OPTIONS),
	OPTIONS_DISPLAY(SpriteID.OPTIONS_DISPLAY, Folder.OPTIONS),
	OPTIONS_SOUND_EFFECT_VOLUME(SpriteID.OPTIONS_SOUND_EFFECT_VOLUME, Folder.OPTIONS),
	OPTIONS_CHAT(SpriteID.OPTIONS_CHAT, Folder.OPTIONS),
	OPTIONS_CONTROLS(SpriteID.OPTIONS_CONTROLS, Folder.OPTIONS),
	OPTIONS_ACCEPT_AID(SpriteID.OPTIONS_ACCEPT_AID, Folder.OPTIONS),
	OPTIONS_RUN_ENERGY(SpriteID.OPTIONS_RUN_ENERGY, Folder.OPTIONS),
	OPTIONS_HOUSE_OPTIONS(SpriteID.OPTIONS_HOUSE_OPTIONS, Folder.OPTIONS),
	OPTIONS_SCROLL_WHEEL_ZOOM(SpriteID.OPTIONS_SCROLL_WHEEL_ZOOM, Folder.OPTIONS),
	OPTIONS_SCREEN_BRIGHTNESS(SpriteID.OPTIONS_SCREEN_BRIGHTNESS, Folder.OPTIONS),
	OPTIONS_FIXED_MODE_DISABLED(SpriteID.OPTIONS_FIXED_MODE_DISABLED, Folder.OPTIONS),
	OPTIONS_RESIZEABLE_MODE_DISABLED(SpriteID.OPTIONS_RESIZEABLE_MODE_DISABLED, Folder.OPTIONS),
	OPTIONS_FIXED_MODE_ENABLED(SpriteID.OPTIONS_FIXED_MODE_ENABLED, Folder.OPTIONS),
	OPTIONS_RESIZEABLE_MODE_ENABLED(SpriteID.OPTIONS_RESIZEABLE_MODE_ENABLED, Folder.OPTIONS),
	OPTIONS_MUSIC_VOLUME(SpriteID.OPTIONS_MUSIC_VOLUME, Folder.OPTIONS),
	OPTIONS_AREA_SOUND_VOLUME(SpriteID.OPTIONS_AREA_SOUND_VOLUME, Folder.OPTIONS),
	OPTIONS_ROUND_CHECK_BOX_CROSSED2(SpriteID.ROUND_CHECK_BOX_CROSSED, Folder.OPTIONS),
	OPTIONS_ROUND_CHECK_BOX_CHECKED_GREEN(SpriteID.ROUND_CHECK_BOX_CHECKED_GREEN, Folder.OPTIONS),
	OPTIONS_CHAT_EFFECTS(SpriteID.OPTIONS_CHAT_EFFECTS, Folder.OPTIONS),
	OPTIONS_SPLIT_PRIVATE_CHAT(SpriteID.OPTIONS_SPLIT_PRIVATE_CHAT, Folder.OPTIONS),
	OPTIONS_HIDE_PRIVATE_CHAT(SpriteID.OPTIONS_HIDE_PRIVATE_CHAT, Folder.OPTIONS),
	OPTIONS_PROFANITY_FILTER(SpriteID.OPTIONS_PROFANITY_FILTER, Folder.OPTIONS),
	OPTIONS_NOTIFICATIONS(SpriteID.OPTIONS_NOTIFICATIONS, Folder.OPTIONS),
	OPTIONS_LOGIN_LOGOUT_NOTIFICATION_TIMEOUT(SpriteID.OPTIONS_LOGIN_LOGOUT_NOTIFICATION_TIMEOUT, Folder.OPTIONS),
	OPTIONS_MOUSE_BUTTONS(SpriteID.OPTIONS_MOUSE_BUTTONS, Folder.OPTIONS),
	OPTIONS_DISABLED_OPTION_OVERLAY(SpriteID.OPTIONS_DISABLED_OPTION_OVERLAY, Folder.OPTIONS),
	OPTIONS_CAMERA(SpriteID.OPTIONS_CAMERA, Folder.OPTIONS),
	OPTIONS_FOLLOWER_RIGHT_CLICK_MENU(SpriteID.OPTIONS_FOLLOWER_RIGHT_CLICK_MENU, Folder.OPTIONS),
	OPTIONS_SHIFT_CLICK_DROP(SpriteID.OPTIONS_SHIFT_CLICK_DROP, Folder.OPTIONS),
	OPTIONS_KEYBINDINGS(SpriteID.OPTIONS_KEYBINDINGS, Folder.OPTIONS),
	OPTIONS_QUESTS_ICON(SpriteID.UNUSED_TAB_QUESTS_899, Folder.OPTIONS),
	OPTIONS_CHANNELS_ICON(SpriteID.TAB_FRIENDS_CHAT, Folder.OPTIONS),
	OPTIONS_SPELL_BOOK_ICON(SpriteID.UNUSED_TAB_MAGIC_903, Folder.OPTIONS),
	OPTIONS_FRIENDS_ICON(905, Folder.OPTIONS),
	OPTIONS_HOUSE_VIEWER(SpriteID.OPTIONS_HOUSE_VIEWER, Folder.OPTIONS),
	OPTIONS_HOUSE_DOORS_CLOSED(SpriteID.OPTIONS_HOUSE_DOORS_CLOSED, Folder.OPTIONS),
	OPTIONS_HOUSE_DOORS_OPEN(SpriteID.OPTIONS_HOUSE_DOORS_OPEN, Folder.OPTIONS),
	OPTIONS_HOUSE_DOORS_INVISIBLE(SpriteID.OPTIONS_HOUSE_DOORS_INVISIBLE, Folder.OPTIONS),
	OPTIONS_SQUARE_CHECK_BOX(SpriteID.SQUARE_CHECK_BOX, Folder.OPTIONS),
	OPTIONS_SQUARE_CHECK_BOX_CROSSED(SpriteID.SQUARE_CHECK_BOX_CROSSED, Folder.OPTIONS),
	OPTIONS_SQUARE_CHECK_BOX_CHECKED(SpriteID.SQUARE_CHECK_BOX_CHECKED, Folder.OPTIONS),
	OPTIONS_SQUARE_CHECK_BOX_HOVERED(SpriteID.SQUARE_CHECK_BOX_HOVERED, Folder.OPTIONS),
	OPTIONS_SQUARE_CHECK_BOX_CROSSED_HOVERED(SpriteID.SQUARE_CHECK_BOX_CROSSED_HOVERED, Folder.OPTIONS),
	OPTIONS_SQUARE_CHECK_BOX_CHECKED_HOVERED(SpriteID.SQUARE_CHECK_BOX_CHECKED_HOVERED, Folder.OPTIONS),
	OPTIONS_SCROLLBAR_ARROW_UP(SpriteID.RS2_SCROLLBAR_ARROW_UP, Folder.OPTIONS),
	OPTIONS_CHECKBOX_EMPTY(SpriteID.PURO_PURO_ROUND_CHECK_BOX, Folder.OPTIONS),
	OPTIONS_CHECKBOX_CHECKED_RED(SpriteID.PURO_PURO_ROUND_CHECK_BOX_CHECKED_RED, Folder.OPTIONS),
	OPTIONS_ROUND_SQUARE_CHECKBOX(SpriteID.UNKNOWN_ROUND_CHECK_BUTTON, Folder.OPTIONS),
	OPTIONS_ROUND_SQUARE_CHECKBOX_CHECKED(SpriteID.UNKNOWN_ROUND_CHECK_BUTTON_CHECKED, Folder.OPTIONS),
	OPTIONS_SQUARE_BORDERED_CHECKBOX(2847, Folder.OPTIONS),
	OPTIONS_SQUARE_BORDERED_CHECKBOX_CHECKED(2848, Folder.OPTIONS),
	OPTIONS_SQUARE_BORDERED_CHECKBOX_DISABLED(2849, Folder.OPTIONS),
	OPTIONS_SQUARE_BORDERED_CHECKBOX_DISABLED_CHECKED(2850, Folder.OPTIONS),
	OPTIONS_SQUARE_BORDERED_CHECKBOX_LOCKED(2851, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_LEFT_CARET(2852, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_RIGHT_CARET(2857, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_DOT_DARKER(2853, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_DOT_REGULAR(2854, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_DOT_LIGHTER(2856, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_EMPTY(2855, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_HALF_DOT_LEFT(2861, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_HALF_DOT_RIGHT(2862, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_JUST_DOT(2863, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_DOT_GREEN(2860, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_DOT_BLUE(2858, Folder.OPTIONS),
	OPTIONS_SLIDER_NEW_DOT_RED(2859, Folder.OPTIONS),
	OPTIONS_TAB_AUDIO_ICON(SpriteID.UNUSED_TAB_COMBAT_911, Folder.OPTIONS),
	OPTIONS_TAB_DISPLAY(2932, Folder.OPTIONS),

	GE_BUTTON(SpriteID.GE_BUTTON, Folder.GE),
	GE_BUTTON_HOVERED(SpriteID.GE_BUTTON_HOVERED, Folder.GE),
	GE_DECREMENT_BUTTON(SpriteID.GE_DECREMENT_BUTTON, Folder.GE),
	GE_INCREMENT_BUTTON(SpriteID.GE_INCREMENT_BUTTON, Folder.GE),
	GE_SELECTED_ITEM_BOX(SpriteID.GE_SELECTED_ITEM_BOX, Folder.GE),
	GE_SELECTED_ITEM_BOX_GLOWING(SpriteID.GE_SELECTED_ITEM_BOX_GLOWING, Folder.GE),
	GE_NUMBER_FIELD_EDGE_LEFT(SpriteID.GE_NUMBER_FIELD_EDGE_LEFT, Folder.GE),
	GE_NUMBER_FIELD_MIDDLE(SpriteID.GE_NUMBER_FIELD_MIDDLE, Folder.GE),
	GE_NUMBER_FIELD_EDGE_RIGHT(SpriteID.GE_NUMBER_FIELD_EDGE_RIGHT, Folder.GE),
	GE_BORDER_OFFER_TOP(SpriteID.UNKNOWN_BORDER_EDGE_HORIZONTAL, Folder.GE),
	GE_BORDER_OFFER_LEFT(SpriteID.UNKNOWN_BORDER_EDGE_VERTICAL, Folder.GE),
	GE_BORDER_OFFER_BOTTOM(SpriteID.UNKNOWN_BORDER_EDGE_HORIZONTAL_989, Folder.GE),
	GE_BORDER_OFFER_RIGHT(SpriteID.UNKNOWN_BORDER_EDGE_VERTICAL_990, Folder.GE),
	GE_BORDER_OFFER_CORNER_TOP_LEFT(SpriteID.UNKNOWN_BORDER_CORNER_TOP_LEFT, Folder.GE),
	GE_BORDER_OFFER_CORNER_TOP_RIGHT(SpriteID.UNKNOWN_BORDER_CORNER_TOP_RIGHT, Folder.GE),
	GE_BORDER_OFFER_CORNER_BOTTOM_LEFT(SpriteID.UNKNOWN_BORDER_CORNER_BOTTOM_LEFT, Folder.GE),
	GE_BORDER_OFFER_CORNER_BOTTOM_RIGHT(SpriteID.UNKNOWN_BORDER_CORNER_BOTTOM_RIGHT, Folder.GE),
	GE_BORDER_OFFER_HORIZONTAL(SpriteID.UNKNOWN_BORDER_EDGE_HORIZONTAL_995, Folder.GE),
	GE_BORDER_OFFER_INTERSECTION_LEFT(SpriteID.UNKNOWN_BORDER_INTERSECTION_LEFT, Folder.GE),
	GE_BORDER_OFFER_INTERSECTION_RIGHT(SpriteID.UNKNOWN_BORDER_INTERSECTION_RIGHT, Folder.GE),
	GE_SEARCH(SpriteID.GE_SEARCH, Folder.GE),
	GE_GUIDE_PRICE(SpriteID.GE_GUIDE_PRICE, Folder.GE),
	GE_FAST_DECREMENT_ARROW(SpriteID.GE_FAST_DECREMENT_ARROW, Folder.GE),
	GE_FAST_INCREMENT_ARROW(SpriteID.GE_FAST_INCREMENT_ARROW, Folder.GE),
	GE_COLLECTION_BOX_OFFER_BUY(SpriteID.GE_COLLECTION_BOX_OFFER_BUY, Folder.GE),
	GE_COLLECTION_BOX_OFFER_SELL(SpriteID.GE_COLLECTION_BOX_OFFER_SELL, Folder.GE),
	GE_BACK_ARROW_BUTTON(SpriteID.GE_BACK_ARROW_BUTTON, Folder.GE),
	GE_MAKE_OFFER_SELL(SpriteID.GE_MAKE_OFFER_SELL, Folder.GE),
	GE_MAKE_OFFER_SELL_HOVERED(SpriteID.GE_MAKE_OFFER_SELL_HOVERED, Folder.GE),
	GE_MAKE_OFFER_BUY(SpriteID.GE_MAKE_OFFER_BUY, Folder.GE),
	GE_MAKE_OFFER_BUY_HOVERED(SpriteID.GE_MAKE_OFFER_BUY_HOVERED, Folder.GE),
	GE_CANCEL_OFFER_BUTTON(SpriteID.GE_CANCEL_OFFER_BUTTON, Folder.GE),
	GE_CANCEL_OFFER_BUTTON_HOVERED(SpriteID.GE_CANCEL_OFFER_BUTTON_HOVERED, Folder.GE),
	GE_MODIFY_OFFER_BUTTON(6409, Folder.GE),
	GE_MODIFY_OFFER_BUTTON_HOVERED(6410, Folder.GE),

	WELCOME_SCREEN_BUTTON_MARBLE(SpriteID.WELCOME_SCREEN_BUTTON_MARBLE, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_BUTTON_CLICK_HERE_TO_PLAY(SpriteID.WELCOME_SCREEN_BUTTON_CLICK_HERE_TO_PLAY, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_BANK_CHEST(SpriteID.WELCOME_SCREEN_BANK_CHEST, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_COINS(SpriteID.WELCOME_SCREEN_COINS, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_KEY(SpriteID.WELCOME_SCREEN_KEY, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_KEYRING(SpriteID.WELCOME_SCREEN_KEYRING, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_SWORD(SpriteID.WELCOME_SCREEN_SWORD, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_SCROLL_MESSAGE_OF_THE_WEEK(SpriteID.WELCOME_SCREEN_SCROLL_MESSAGE_OF_THE_WEEK, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_SEALED_ENVELOPE(SpriteID.WELCOME_SCREEN_SEALED_ENVELOPE, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_BUTTON_COBBLESTONE(SpriteID.WELCOME_SCREEN_BUTTON_COBBLESTONE, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_BANNER_BORDER(2247, Folder.WELCOME_SCREEN),
	WELCOME_SCREEN_SIDE_BUTTON_BACKGROUND_NEW(2248, Folder.WELCOME_SCREEN),

	ADVANCED_OPTIONS_SCROLLBAR_POSITION(1571, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_TRANSPARENT_SIDE_PANEL(SpriteID.OPTIONS_TRANSPARENT_SIDE_PANEL, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_XP_TO_NEXT_LEVEL(SpriteID.OPTIONS_XP_TO_NEXT_LEVEL, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_PRAYER_TOOLTIPS(SpriteID.OPTIONS_PRAYER_TOOLTIPS, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_COLORED_HITSPLATS(1659, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_SPECIAL_ATTACK_TOOLTIP(SpriteID.OPTIONS_SPECIAL_ATTACK_TOOLTIP, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_ROOFS(SpriteID.OPTIONS_ROOFS, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_DATA_ORBS(SpriteID.OPTIONS_DATA_ORBS, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_WIKI(1657, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_HEALTH_OVERLAY(1660, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_TRANSPARENT_CHATBOX(SpriteID.OPTIONS_TRANSPARENT_CHATBOX, Folder.ADVANCED_OPTIONS),
	ADVANCED_OPTIONS_SIDE_PANELS(SpriteID.OPTIONS_SIDE_PANELS, Folder.ADVANCED_OPTIONS),

	ACCOUNT_MANAGEMENT_ACCOUNT_TAB_ICON(2410, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_COMMUNITY_TAB_ICON(2411, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_LINKS_TAB_ICON(2412, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_STORE_ICON(1704, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_BOND_ICON(1705, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_INBOX_ICON(1706, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_NAME_CHANGER_ICON(1707, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_POLL_ICON(2413, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_POLL_HISTORY_ICON(2414, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_NEWSPOST_ICON(2415, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_ARCHIVE_ICON(2416, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_VIEW_BENEFITS_ICON(2150, Folder.ACCOUNT_MANAGEMENT),
	ACCOUNT_MANAGEMENT_UPGRADE_NOW_ICON(2151, Folder.ACCOUNT_MANAGEMENT),

	QUESTS_TAB_COMBAT_ACHIEVEMENTS_ICON(2276, Folder.QUESTS_TAB),
	QUESTS_TAB_BLUE_QUESTS_ICON(SpriteID.QUESTS_PAGE_ICON_BLUE_QUESTS, Folder.QUESTS_TAB),
	QUESTS_TAB_GREEN_ACHIEVEMENT_DIARIES_ICON(SpriteID.QUESTS_PAGE_ICON_GREEN_ACHIEVEMENT_DIARIES, Folder.QUESTS_TAB),
	QUESTS_TAB_RED_MINIGAMES_ICON(3344, Folder.QUESTS_TAB),
	QUESTS_TAB_PURPLE_KOUREND_ICON(SpriteID.QUESTS_PAGE_ICON_PURPLE_KOUREND, Folder.QUESTS_TAB),
	QUESTS_TAB_COMBAT_ACHIEVEMENTS_COMBAT_LEVEL(3386, Folder.QUESTS_TAB),
	QUESTS_TAB_COMBAT_ACHIEVEMENTS_TOTAL_LEVEL(3387, Folder.QUESTS_TAB),
	QUESTS_TAB_COMBAT_ACHIEVEMENTS_XP(3388, Folder.QUESTS_TAB),
	QUESTS_TAB_COMBAT_ACHIEVEMENTS_TASKS_COMPLETED(3389, Folder.QUESTS_TAB),
	QUESTS_TAB_COMBAT_ACHIEVEMENTS_COLLECTIONS_LOGGED(3390, Folder.QUESTS_TAB),

	CLANS_TAB_CHAT_CHANNEL(3338, Folder.CLANS_TAB),
	CLANS_TAB_CLAN_CHANNEL(3339, Folder.CLANS_TAB),
	CLANS_TAB_GUEST_CLAN_CHANNEL(3340, Folder.CLANS_TAB),
	CLANS_TAB_REGULAR_GROUP_IRONMAN(3342, Folder.CLANS_TAB),
	CLANS_TAB_HARDCORE_GROUP_IRONMAN(3343, Folder.CLANS_TAB),
	CLANS_TAB_UNRANKED_GROUP_IRONMAN(3345, Folder.CLANS_TAB),
	CLANS_TAB_REFRESH(3341, Folder.CLANS_TAB),
	CLANS_TAB_LIVES(3522, Folder.CLANS_TAB),
	CLANS_TAB_PEOPLE(3595, Folder.CLANS_TAB),

	COMBAT_STYLE_AXE_BLOCK(SpriteID.COMBAT_STYLE_AXE_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_AXE_CHOP(SpriteID.COMBAT_STYLE_AXE_CHOP, Folder.COMBAT),
	COMBAT_STYLE_AXE_HACK(SpriteID.COMBAT_STYLE_AXE_HACK, Folder.COMBAT),
	COMBAT_STYLE_AXE_SMASH(SpriteID.COMBAT_STYLE_AXE_SMASH, Folder.COMBAT),
	COMBAT_STYLE_SWORD_BLOCK(SpriteID.COMBAT_STYLE_SWORD_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_SWORD_SLASH(SpriteID.COMBAT_STYLE_SWORD_SLASH, Folder.COMBAT),
	COMBAT_STYLE_SWORD_CHOP(SpriteID.COMBAT_STYLE_SWORD_CHOP, Folder.COMBAT),
	COMBAT_STYLE_SWORD_STAB(SpriteID.COMBAT_STYLE_SWORD_STAB, Folder.COMBAT),
	COMBAT_STYLE_SPEAR_LUNGE(SpriteID.COMBAT_STYLE_SPEAR_LUNGE, Folder.COMBAT),
	COMBAT_STYLE_SPEAR_POUND(SpriteID.COMBAT_STYLE_SPEAR_POUND, Folder.COMBAT),
	COMBAT_STYLE_MACE_BLOCK(SpriteID.COMBAT_STYLE_MACE_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_MACE_PUMMEL(SpriteID.COMBAT_STYLE_MACE_PUMMEL, Folder.COMBAT),
	COMBAT_STYLE_MACE_SPIKE(SpriteID.COMBAT_STYLE_MACE_SPIKE, Folder.COMBAT),
	COMBAT_STYLE_MACE_POUND(SpriteID.COMBAT_STYLE_MACE_POUND, Folder.COMBAT),
	COMBAT_STYLE_UNARMED_PUNCH(SpriteID.COMBAT_STYLE_UNARMED_PUNCH, Folder.COMBAT),
	COMBAT_STYLE_UNARMED_KICK(SpriteID.COMBAT_STYLE_UNARMED_KICK, Folder.COMBAT),
	COMBAT_STYLE_UNARMED_BLOCK(SpriteID.COMBAT_STYLE_UNARMED_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_SPEAR_BLOCK(SpriteID.COMBAT_STYLE_SPEAR_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_SPEAR_SWIPE(SpriteID.COMBAT_STYLE_SPEAR_SWIPE, Folder.COMBAT),
	COMBAT_STYLE_STAFF_BLOCK(SpriteID.COMBAT_STYLE_STAFF_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_HAMMER_BLOCK(SpriteID.COMBAT_STYLE_HAMMER_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_HAMMER_POUND(SpriteID.COMBAT_STYLE_HAMMER_POUND, Folder.COMBAT),
	COMBAT_STYLE_HAMMER_PUMMEL(SpriteID.COMBAT_STYLE_HAMMER_PUMMEL, Folder.COMBAT),
	COMBAT_STYLE_HAMMER_PUMMEL_DINHS(SpriteID.UNUSED_COMBAT_STYLE_HAMMER, Folder.COMBAT),
	COMBAT_STYLE_CROSSBOW_ACCURATE(SpriteID.COMBAT_STYLE_CROSSBOW_ACCURATE, Folder.COMBAT),
	COMBAT_STYLE_CROSSBOW_RAPID(SpriteID.COMBAT_STYLE_CROSSBOW_RAPID, Folder.COMBAT),
	COMBAT_STYLE_CROSSBOW_LONGRANGE(SpriteID.COMBAT_STYLE_CROSSBOW_LONGRANGE, Folder.COMBAT),
	COMBAT_STYLE_SCYTHE_BLOCK(SpriteID.COMBAT_STYLE_SCYTHE_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_SCYTHE_CHOP(SpriteID.COMBAT_STYLE_SCYTHE_CHOP, Folder.COMBAT),
	COMBAT_STYLE_MAGIC_ACCURATE(SpriteID.COMBAT_STYLE_MAGIC_ACCURATE, Folder.COMBAT),
	COMBAT_STYLE_MAGIC_RAPID(SpriteID.COMBAT_STYLE_MAGIC_RAPID, Folder.COMBAT),
	COMBAT_STYLE_MAGIC_LONGRANGE(SpriteID.COMBAT_STYLE_MAGIC_LONGRANGE, Folder.COMBAT),
	COMBAT_STYLE_STAFF_BASH(SpriteID.COMBAT_STYLE_STAFF_BASH, Folder.COMBAT),
	COMBAT_STYLE_STAFF_POUND(SpriteID.COMBAT_STYLE_STAFF_POUND, Folder.COMBAT),
	COMBAT_STYLE_BOW_ACCURATE(SpriteID.COMBAT_STYLE_BOW_ACCURATE, Folder.COMBAT),
	COMBAT_STYLE_BOW_RAPID(SpriteID.COMBAT_STYLE_BOW_RAPID, Folder.COMBAT),
	COMBAT_STYLE_BOW_LONGRANGE(SpriteID.COMBAT_STYLE_BOW_LONGRANGE, Folder.COMBAT),
	COMBAT_STYLE_SCYTHE_JAB(SpriteID.COMBAT_STYLE_SCYTHE_JAB, Folder.COMBAT),
	COMBAT_STYLE_SCYTHE_REAP(SpriteID.COMBAT_STYLE_SCYTHE_REAP, Folder.COMBAT),
	COMBAT_STYLE_PICKAXE_BLOCK(SpriteID.COMBAT_STYLE_PICKAXE_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_PICKAXE_SPIKE(SpriteID.COMBAT_STYLE_PICKAXE_SPIKE, Folder.COMBAT),
	COMBAT_STYLE_PICKAXE_SMASH(SpriteID.COMBAT_STYLE_PICKAXE_SMASH, Folder.COMBAT),
	COMBAT_STYLE_PICKAXE_IMPALE(SpriteID.COMBAT_STYLE_PICKAXE_IMPALE, Folder.COMBAT),
	COMBAT_STYLE_CLAWS_LUNGE(SpriteID.COMBAT_STYLE_CLAWS_LUNGE, Folder.COMBAT),
	COMBAT_STYLE_CLAWS_SLASH(SpriteID.COMBAT_STYLE_CLAWS_SLASH, Folder.COMBAT),
	COMBAT_STYLE_CLAWS_CHOP(SpriteID.COMBAT_STYLE_CLAWS_CHOP, Folder.COMBAT),
	COMBAT_STYLE_CLAWS_BLOCK(SpriteID.COMBAT_STYLE_CLAWS_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_CHINCHOMPA_LONG_FUSE(SpriteID.COMBAT_STYLE_CHINCHOMPA_LONG_FUSE, Folder.COMBAT),
	COMBAT_STYLE_CHINCHOMPA_MEDIUM_FUSE(SpriteID.COMBAT_STYLE_CHINCHOMPA_MEDIUM_FUSE, Folder.COMBAT),
	COMBAT_STYLE_HALBERD_BLOCK(SpriteID.COMBAT_STYLE_HALBERD_BLOCK, Folder.COMBAT),
	COMBAT_STYLE_HALBERD_JAB(SpriteID.COMBAT_STYLE_HALBERD_JAB, Folder.COMBAT),
	COMBAT_STYLE_HALBERD_SWIPE(SpriteID.COMBAT_STYLE_HALBERD_SWIPE, Folder.COMBAT),
	COMBAT_STYLE_WHIP_FLICK(SpriteID.COMBAT_STYLE_WHIP_FLICK, Folder.COMBAT),
	COMBAT_STYLE_WHIP_LASH(SpriteID.COMBAT_STYLE_WHIP_LASH, Folder.COMBAT),
	COMBAT_STYLE_CHINCHOMPA_SHORT_FUSE(SpriteID.COMBAT_STYLE_CHINCHOMPA_SHORT_FUSE, Folder.COMBAT),
	COMBAT_STYLE_SALAMANDER_SCORCH(SpriteID.COMBAT_STYLE_SALAMANDER_SCORCH, Folder.COMBAT),
	COMBAT_STYLE_SALAMANDER_FLARE(SpriteID.COMBAT_STYLE_SALAMANDER_FLARE, Folder.COMBAT),
	COMBAT_STYLE_SALAMANDER_BLAZE(SpriteID.COMBAT_STYLE_SALAMANDER_BLAZE, Folder.COMBAT),
	COMBAT_STYLE_DEFENSIVE_CASTING_SHIELD(SpriteID.COMBAT_STYLE_DEFENSIVE_CASTING_SHIELD, Folder.COMBAT),
	COMBAT_AUTO_RETALIATE(1748, Folder.COMBAT),
	COMBAT_AUTO_RETALIATE_SELECTED(1749, Folder.COMBAT),

	LOGIN_SCREEN_BACKGROUND(-1, Folder.LOGIN_SCREEN),

	ANCIENT_SPELL_ICE_RUSH_DISABLED(SpriteID.SPELL_ICE_RUSH_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BURST_DISABLED(SpriteID.SPELL_ICE_BURST_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BLITZ_DISABLED(SpriteID.SPELL_ICE_BLITZ_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BARRAGE_DISABLED(SpriteID.SPELL_ICE_BARRAGE_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_RUSH_DISABLED(SpriteID.SPELL_SMOKE_RUSH_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BURST_DISABLED(SpriteID.SPELL_SMOKE_BURST_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BLITZ_DISABLED(SpriteID.SPELL_SMOKE_BLITZ_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BARRAGE_DISABLED(SpriteID.SPELL_SMOKE_BARRAGE_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_RUSH_DISABLED(SpriteID.SPELL_BLOOD_RUSH_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BURST_DISABLED(SpriteID.SPELL_BLOOD_BURST_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BLITZ_DISABLED(SpriteID.SPELL_BLOOD_BLITZ_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BARRAGE_DISABLED(SpriteID.SPELL_BLOOD_BARRAGE_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_RUSH_DISABLED(SpriteID.SPELL_SHADOW_RUSH_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BURST_DISABLED(SpriteID.SPELL_SHADOW_BURST_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BLITZ_DISABLED(SpriteID.SPELL_SHADOW_BLITZ_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BARRAGE_DISABLED(SpriteID.SPELL_SHADOW_BARRAGE_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_PADDEWWA_TELEPORT_DISABLED(SpriteID.SPELL_PADDEWWA_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SENNTISTEN_TELEPORT_DISABLED(SpriteID.SPELL_SENNTISTEN_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_KHARYRLL_TELEPORT_DISABLED(SpriteID.SPELL_KHARYRLL_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_LASSAR_TELEPORT_DISABLED(SpriteID.SPELL_LASSAR_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_DAREEYAK_TELEPORT_DISABLED(SpriteID.SPELL_DAREEYAK_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_CARRALLANGAR_TELEPORT_DISABLED(SpriteID.SPELL_CARRALLANGAR_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ANNAKARL_TELEPORT_DISABLED(SpriteID.SPELL_ANNAKARL_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_GHORROCK_TELEPORT_DISABLED(SpriteID.SPELL_GHORROCK_TELEPORT_DISABLED, Folder.ANCIENT_SPELL),

	ANCIENT_SPELL_ICE_RUSH_DISABLED_RESIZED(1922, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BURST_DISABLED_RESIZED(1923, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BLITZ_DISABLED_RESIZED(1924, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BARRAGE_DISABLED_RESIZED(1925, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_RUSH_DISABLED_RESIZED(1926, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BURST_DISABLED_RESIZED(1927, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BLITZ_DISABLED_RESIZED(1928, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BARRAGE_DISABLED_RESIZED(1929, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_RUSH_DISABLED_RESIZED(1930, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BURST_DISABLED_RESIZED(1931, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BLITZ_DISABLED_RESIZED(1932, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BARRAGE_DISABLED_RESIZED(1933, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_RUSH_DISABLED_RESIZED(1934, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BURST_DISABLED_RESIZED(1935, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BLITZ_DISABLED_RESIZED(1936, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BARRAGE_DISABLED_RESIZED(1937, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_PADDEWWA_TELEPORT_DISABLED_RESIZED(1938, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SENNTISTEN_TELEPORT_DISABLED_RESIZED(1939, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_KHARYRLL_TELEPORT_DISABLED_RESIZED(1940, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_LASSAR_TELEPORT_DISABLED_RESIZED(1941, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_DAREEYAK_TELEPORT_DISABLED_RESIZED(1942, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_CARRALLANGAR_TELEPORT_DISABLED_RESIZED(1943, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ANNAKARL_TELEPORT_DISABLED_RESIZED(1944, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_GHORROCK_TELEPORT_DISABLED_RESIZED(1945, Folder.ANCIENT_SPELL),

	ANCIENT_SPELL_ICE_RUSH(SpriteID.SPELL_ICE_RUSH, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BURST(SpriteID.SPELL_ICE_BURST, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BLITZ(SpriteID.SPELL_ICE_BLITZ, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BARRAGE(SpriteID.SPELL_ICE_BARRAGE, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_RUSH(SpriteID.SPELL_SMOKE_RUSH, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BURST(SpriteID.SPELL_SMOKE_BURST, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BLITZ(SpriteID.SPELL_SMOKE_BLITZ, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BARRAGE(SpriteID.SPELL_SMOKE_BARRAGE, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_RUSH(SpriteID.SPELL_BLOOD_RUSH, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BURST(SpriteID.SPELL_BLOOD_BURST, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BLITZ(SpriteID.SPELL_BLOOD_BLITZ, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BARRAGE(SpriteID.SPELL_BLOOD_BARRAGE, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_RUSH(SpriteID.SPELL_SHADOW_RUSH, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BURST(SpriteID.SPELL_SHADOW_BURST, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BLITZ(SpriteID.SPELL_SHADOW_BLITZ, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BARRAGE(SpriteID.SPELL_SHADOW_BARRAGE, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_PADDEWWA_TELEPORT(SpriteID.SPELL_PADDEWWA_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SENNTISTEN_TELEPORT(SpriteID.SPELL_SENNTISTEN_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_KHARYRLL_TELEPORT(SpriteID.SPELL_KHARYRLL_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_LASSAR_TELEPORT(SpriteID.SPELL_LASSAR_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_DAREEYAK_TELEPORT(SpriteID.SPELL_DAREEYAK_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_CARRALLANGAR_TELEPORT(SpriteID.SPELL_CARRALLANGAR_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ANNAKARL_TELEPORT(SpriteID.SPELL_ANNAKARL_TELEPORT, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_GHORROCK_TELEPORT(SpriteID.SPELL_GHORROCK_TELEPORT, Folder.ANCIENT_SPELL),

	ANCIENT_SPELL_ICE_RUSH_RESIZED(1892, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BURST_RESIZED(1893, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BLITZ_RESIZED(1894, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ICE_BARRAGE_RESIZED(1895, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_RUSH_RESIZED(1896, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BURST_RESIZED(1897, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BLITZ_RESIZED(1898, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SMOKE_BARRAGE_RESIZED(1899, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_RUSH_RESIZED(1900, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BURST_RESIZED(1901, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BLITZ_RESIZED(1902, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_BLOOD_BARRAGE_RESIZED(1903, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_RUSH_RESIZED(1904, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BURST_RESIZED(1905, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BLITZ_RESIZED(1906, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SHADOW_BARRAGE_RESIZED(1907, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_PADDEWWA_TELEPORT_RESIZED(1908, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_SENNTISTEN_TELEPORT_RESIZED(1909, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_KHARYRLL_TELEPORT_RESIZED(1910, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_LASSAR_TELEPORT_RESIZED(1911, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_DAREEYAK_TELEPORT_RESIZED(1912, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_CARRALLANGAR_TELEPORT_RESIZED(1913, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_ANNAKARL_TELEPORT_RESIZED(1914, Folder.ANCIENT_SPELL),
	ANCIENT_SPELL_GHORROCK_TELEPORT_RESIZED(1915, Folder.ANCIENT_SPELL),

	ARCEUUS_SPELL_BASIC_REANIMATION_DISABLED(1272, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ADEPT_REANIMATION_DISABLED(1273, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_EXPERT_REANIMATION_DISABLED(1274, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MASTER_REANIMATION_DISABLED(1275, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HOME_TELEPORT_DISABLED(1276, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ARCEUUS_LIBRARY_TELEPORT_DISABLED(1277, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DRAYNOR_MANOR_TELEPORT_DISABLED(1278, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MIND_ALTAR_TELEPORT_DISABLED(1281, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESPAWN_TELEPORT_DISABLED(1282, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SALVE_GRAVEYARD_TELEPORT_DISABLED(1283, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_FENKENSTRAINS_CASTLE_TELEPORT_DISABLED(1284, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WEST_ARDOUGNE_TELEPORT_DISABLED(1285, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HARMONY_ISLAND_TELEPORT_DISABLED(1286, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_CEMETARY_TELEPORT_DISABLED(1289, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BARROWS_TELEPORT_DISABLED(1287, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BATTLEFRONT_TELEPORT_DISABLED(1280, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_APE_ATOLL_TELEPORT_DISABLED(1288, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_REANIMATE_CROPS_DISABLED(1291, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_INFERIOR_DEMONBANE_DISABLED(1321, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SUPERIOR_DEMONBANE_DISABLED(1322, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_DEMONBANE_DISABLED(1323, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MARK_OF_DARKNESS_DISABLED(1324, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GHOSTLY_GRASP_DISABLED(1292, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SKELETAL_GRASP_DISABLED(1293, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_UNDEAD_GRASP_DISABLED(1294, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WARD_OF_ARCEUUS_DISABLED(1325, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_LESSER_CORRUPTION_DISABLED(1326, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GREATER_CORRUPTION_DISABLED(1327, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEMONIC_OFFERING_DISABLED(1330, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SINISTER_OFFERING_DISABLED(1331, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEGRIME_DISABLED(1337, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SHADOW_VEIL_DISABLED(1334, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_VILE_VIGOUR_DISABLED(1336, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_LURE_DISABLED(1335, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEATH_CHARGE_DISABLED(1329, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_GHOST_DISABLED(1295, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_SKELETON_DISABLED(1296, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_ZOMBIE_DISABLED(1319, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_GHOST_DISABLED(2985, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_SKELETON_DISABLED(2987, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_ZOMBIE_DISABLED(2989, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_GHOST_DISABLED(2986, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_SKELETON_DISABLED(2988, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_ZOMBIE_DISABLED(2990, Folder.ARCEUUS_SPELL),

	ARCEUUS_SPELL_BASIC_REANIMATION_DISABLED_RESIZED(2092, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ADEPT_REANIMATION_DISABLED_RESIZED(2093, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_EXPERT_REANIMATION_DISABLED_RESIZED(2094, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MASTER_REANIMATION_DISABLED_RESIZED(2095, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HOME_TELEPORT_DISABLED_RESIZED(2096, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ARCEUUS_LIBRARY_TELEPORT_DISABLED_RESIZED(2097, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DRAYNOR_MANOR_TELEPORT_DISABLED_RESIZED(2098, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MIND_ALTAR_TELEPORT_DISABLED_RESIZED(2101, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESPAWN_TELEPORT_DISABLED_RESIZED(2102, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SALVE_GRAVEYARD_TELEPORT_DISABLED_RESIZED(2103, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_FENKENSTRAINS_CASTLE_TELEPORT_DISABLED_RESIZED(2104, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WEST_ARDOUGNE_TELEPORT_DISABLED_RESIZED(2105, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HARMONY_ISLAND_TELEPORT_DISABLED_RESIZED(2106, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_CEMETARY_TELEPORT_DISABLED_RESIZED(2109, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BARROWS_TELEPORT_DISABLED_RESIZED(2107, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BATTLEFRONT_TELEPORT_DISABLED_RESIZED(2100, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_APE_ATOLL_TELEPORT_DISABLED_RESIZED(2108, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_REANIMATE_CROPS_DISABLED_RESIZED(2111, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_INFERIOR_DEMONBANE_DISABLED_RESIZED(2119, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SUPERIOR_DEMONBANE_DISABLED_RESIZED(2120, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_DEMONBANE_DISABLED_RESIZED(2121, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MARK_OF_DARKNESS_DISABLED_RESIZED(2122, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GHOSTLY_GRASP_DISABLED_RESIZED(2112, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SKELETAL_GRASP_DISABLED_RESIZED(2113, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_UNDEAD_GRASP_DISABLED_RESIZED(2114, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WARD_OF_ARCEUUS_DISABLED_RESIZED(2123, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_LESSER_CORRUPTION_DISABLED_RESIZED(2124, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GREATER_CORRUPTION_DISABLED_RESIZED(2125, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEMONIC_OFFERING_DISABLED_RESIZED(2128, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SINISTER_OFFERING_DISABLED_RESIZED(2129, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEGRIME_DISABLED_RESIZED(3004, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SHADOW_VEIL_DISABLED_RESIZED(3001, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_VILE_VIGOUR_DISABLED_RESIZED(3003, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_LURE_DISABLED_RESIZED(3002, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEATH_CHARGE_DISABLED_RESIZED(2127, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_GHOST_DISABLED_RESIZED(2115, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_SKELETON_DISABLED_RESIZED(2116, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_ZOMBIE_DISABLED_RESIZED(2117, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_GHOST_DISABLED_RESIZED(3005, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_SKELETON_DISABLED_RESIZED(3007, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_ZOMBIE_DISABLED_RESIZED(3009, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_GHOST_DISABLED_RESIZED(3006, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_SKELETON_DISABLED_RESIZED(3008, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_ZOMBIE_DISABLED_RESIZED(3010, Folder.ARCEUUS_SPELL),

	ARCEUUS_SPELL_BASIC_REANIMATION(1247, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ADEPT_REANIMATION(1248, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_EXPERT_REANIMATION(1249, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MASTER_REANIMATION(1250, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HOME_TELEPORT(1251, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ARCEUUS_LIBRARY_TELEPORT(1252, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DRAYNOR_MANOR_TELEPORT(1253, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MIND_ALTAR_TELEPORT(1256, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESPAWN_TELEPORT(1257, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SALVE_GRAVEYARD_TELEPORT(1258, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_FENKENSTRAINS_CASTLE_TELEPORT(1259, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WEST_ARDOUGNE_TELEPORT(1260, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HARMONY_ISLAND_TELEPORT(1261, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_CEMETARY_TELEPORT(1264, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BARROWS_TELEPORT(1262, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BATTLEFRONT_TELEPORT(1255, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_APE_ATOLL_TELEPORT(1263, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_REANIMATE_CROPS(1266, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_INFERIOR_DEMONBANE(1302, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SUPERIOR_DEMONBANE(1303, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_DEMONBANE(1304, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MARK_OF_DARKNESS(1305, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GHOSTLY_GRASP(1267, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SKELETAL_GRASP(1268, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_UNDEAD_GRASP(1269, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WARD_OF_ARCEUUS(1306, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_LESSER_CORRUPTION(1307, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GREATER_CORRUPTION(1308, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEMONIC_OFFERING(1311, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SINISTER_OFFERING(1312, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEGRIME(1318, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SHADOW_VEIL(1315, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_VILE_VIGOUR(1317, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_LURE(1316, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEATH_CHARGE(1310, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_GHOST(1270, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_SKELETON(1271, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_ZOMBIE(1300, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_GHOST(2979, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_SKELETON(2981, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_ZOMBIE(2983, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_GHOST(2980, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_SKELETON(2982, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_ZOMBIE(2984, Folder.ARCEUUS_SPELL),

	ARCEUUS_SPELL_BASIC_REANIMATION_RESIZED(2052, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ADEPT_REANIMATION_RESIZED(2053, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_EXPERT_REANIMATION_RESIZED(2054, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MASTER_REANIMATION_RESIZED(2055, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HOME_TELEPORT_RESIZED(2056, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_ARCEUUS_LIBRARY_TELEPORT_RESIZED(2057, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DRAYNOR_MANOR_TELEPORT_RESIZED(2058, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MIND_ALTAR_TELEPORT_RESIZED(2061, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESPAWN_TELEPORT_RESIZED(2062, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SALVE_GRAVEYARD_TELEPORT_RESIZED(2063, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_FENKENSTRAINS_CASTLE_TELEPORT_RESIZED(2064, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WEST_ARDOUGNE_TELEPORT_RESIZED(2065, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_HARMONY_ISLAND_TELEPORT_RESIZED(2066, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_CEMETARY_TELEPORT_RESIZED(2069, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BARROWS_TELEPORT_RESIZED(2067, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_BATTLEFRONT_TELEPORT_RESIZED(2060, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_APE_ATOLL_TELEPORT_RESIZED(2068, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_REANIMATE_CROPS_RESIZED(2071, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_INFERIOR_DEMONBANE_RESIZED(2079, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SUPERIOR_DEMONBANE_RESIZED(2080, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_DEMONBANE_RESIZED(2081, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_MARK_OF_DARKNESS_RESIZED(2082, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GHOSTLY_GRASP_RESIZED(2072, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SKELETAL_GRASP_RESIZED(2073, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_UNDEAD_GRASP_RESIZED(2074, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_WARD_OF_ARCEUUS_RESIZED(2083, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_LESSER_CORRUPTION_RESIZED(2084, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_GREATER_CORRUPTION_RESIZED(2085, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEMONIC_OFFERING_RESIZED(2088, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SINISTER_OFFERING_RESIZED(2089, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEGRIME_RESIZED(2994, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_SHADOW_VEIL_RESIZED(2991, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_VILE_VIGOUR_RESIZED(2993, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DARK_LURE_RESIZED(2992, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_DEATH_CHARGE_RESIZED(2087, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_GHOST_RESIZED(2075, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_SKELETON_RESIZED(2076, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_LESSER_ZOMBIE_RESIZED(2077, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_GHOST_RESIZED(2995, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_SKELETON_RESIZED(2997, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_SUPERIOR_ZOMBIE_RESIZED(2999, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_GHOST_RESIZED(2996, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_SKELETON_RESIZED(2998, Folder.ARCEUUS_SPELL),
	ARCEUUS_SPELL_RESSURECT_GREATER_ZOMBIE_RESIZED(3000, Folder.ARCEUUS_SPELL),

	LUNAR_SPELL_BAKE_PIE_DISABLED(SpriteID.SPELL_BAKE_PIE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MOONCLAN_TELEPORT_DISABLED(SpriteID.SPELL_MOONCLAN_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_WATERBIRTH_TELEPORT_DISABLED(SpriteID.SPELL_WATERBIRTH_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BARBARIAN_TELEPORT_DISABLED(SpriteID.SPELL_BARBARIAN_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SUPERGLASS_MAKE_DISABLED(SpriteID.SPELL_SUPERGLASS_MAKE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_KHAZARD_TELEPORT_DISABLED(SpriteID.SPELL_KHAZARD_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STRING_JEWELLERY_DISABLED(SpriteID.SPELL_STRING_JEWELLERY_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BOOST_POTION_SHARE_DISABLED(SpriteID.SPELL_BOOST_POTION_SHARE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MAGIC_IMBUE_DISABLED(SpriteID.SPELL_MAGIC_IMBUE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FERTILE_SOIL_DISABLED(SpriteID.SPELL_FERTILE_SOIL_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_RESTORE_POT_SHARE_DISABLED(SpriteID.SPELL_STAT_RESTORE_POT_SHARE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FISHING_GUILD_TELEPORT_DISABLED(SpriteID.SPELL_FISHING_GUILD_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CATHERBY_TELEPORT_DISABLED(SpriteID.SPELL_CATHERBY_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ICE_PLATEAU_TELEPORT_DISABLED(SpriteID.SPELL_ICE_PLATEAU_TELEPORT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ENERGY_TRANSFER_DISABLED(SpriteID.SPELL_ENERGY_TRANSFER_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_OTHER_DISABLED(SpriteID.SPELL_CURE_OTHER_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_OTHER_DISABLED(SpriteID.SPELL_HEAL_OTHER_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_OTHER_DISABLED(SpriteID.SPELL_VENGEANCE_OTHER_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_ME_DISABLED(SpriteID.SPELL_CURE_ME_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_GEOMANCY_DISABLED(SpriteID.SPELL_GEOMANCY_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_DISABLED(SpriteID.SPELL_VENGEANCE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_GROUP_DISABLED(SpriteID.SPELL_CURE_GROUP_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_GROUP_DISABLED(SpriteID.SPELL_HEAL_GROUP_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_PLANT_DISABLED(SpriteID.SPELL_CURE_PLANT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_NPC_CONTACT_DISABLED(SpriteID.SPELL_NPC_CONTACT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_MOONCLAN_DISABLED(SpriteID.SPELL_TELE_GROUP_MOONCLAN_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_WATERBIRTH_DISABLED(SpriteID.SPELL_TELE_GROUP_WATERBIRTH_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_BARBARIAN_DISABLED(SpriteID.SPELL_TELE_GROUP_BARBARIAN_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_KHAZARD_DISABLED(SpriteID.SPELL_TELE_GROUP_KHAZARD_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_FISHING_GUILD_DISABLED(SpriteID.SPELL_TELE_GROUP_FISHING_GUILD_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_CATHERBY_DISABLED(SpriteID.SPELL_TELE_GROUP_CATHERBY_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_ICE_PLATEAU_DISABLED(SpriteID.SPELL_TELE_GROUP_ICE_PLATEAU_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_SPY_DISABLED(SpriteID.SPELL_STAT_SPY_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MONSTER_EXAMINE_DISABLED(SpriteID.SPELL_MONSTER_EXAMINE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUMIDIFY_DISABLED(SpriteID.SPELL_HUMIDIFY_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUNTER_KIT_DISABLED(SpriteID.SPELL_HUNTER_KIT_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_DREAM_DISABLED(SpriteID.SPELL_DREAM_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_PLANK_MAKE_DISABLED(SpriteID.SPELL_PLANK_MAKE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPELLBOOK_SWAP_DISABLED(SpriteID.SPELL_SPELLBOOK_SWAP_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TAN_LEATHER_DISABLED(SpriteID.SPELL_TAN_LEATHER_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_RECHARGE_DRAGONSTONE_DISABLED(SpriteID.SPELL_RECHARGE_DRAGONSTONE_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPIN_FLAX_DISABLED(SpriteID.SPELL_SPIN_FLAX_DISABLED, Folder.LUNAR_SPELL),
	LUNAR_SPELL_OURANIA_TELEPORT_DISABLED(SpriteID.SPELL_OURANIA_TELEPORT_DISABLED, Folder.LUNAR_SPELL),

	LUNAR_SPELL_BAKE_PIE_DISABLED_RESIZED(2002, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MOONCLAN_TELEPORT_DISABLED_RESIZED(2030, Folder.LUNAR_SPELL),
	LUNAR_SPELL_WATERBIRTH_TELEPORT_DISABLED_RESIZED(2032, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BARBARIAN_TELEPORT_DISABLED_RESIZED(2033, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SUPERGLASS_MAKE_DISABLED_RESIZED(2003, Folder.LUNAR_SPELL),
	LUNAR_SPELL_KHAZARD_TELEPORT_DISABLED_RESIZED(2034, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STRING_JEWELLERY_DISABLED_RESIZED(2004, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BOOST_POTION_SHARE_DISABLED_RESIZED(2005, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MAGIC_IMBUE_DISABLED_RESIZED(2007, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FERTILE_SOIL_DISABLED_RESIZED(2008, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_RESTORE_POT_SHARE_DISABLED_RESIZED(2006, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FISHING_GUILD_TELEPORT_DISABLED_RESIZED(2035, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CATHERBY_TELEPORT_DISABLED_RESIZED(2036, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ICE_PLATEAU_TELEPORT_DISABLED_RESIZED(2037, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ENERGY_TRANSFER_DISABLED_RESIZED(2009, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_OTHER_DISABLED_RESIZED(2012, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_OTHER_DISABLED_RESIZED(2013, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_OTHER_DISABLED_RESIZED(2010, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_ME_DISABLED_RESIZED(2014, Folder.LUNAR_SPELL),
	LUNAR_SPELL_GEOMANCY_DISABLED_RESIZED(2017, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_DISABLED_RESIZED(2011, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_GROUP_DISABLED_RESIZED(2015, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_GROUP_DISABLED_RESIZED(2016, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_PLANT_DISABLED_RESIZED(2018, Folder.LUNAR_SPELL),
	LUNAR_SPELL_NPC_CONTACT_DISABLED_RESIZED(2019, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_MOONCLAN_DISABLED_RESIZED(2038, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_WATERBIRTH_DISABLED_RESIZED(2039, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_BARBARIAN_DISABLED_RESIZED(2040, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_KHAZARD_DISABLED_RESIZED(2041, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_FISHING_GUILD_DISABLED_RESIZED(2042, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_CATHERBY_DISABLED_RESIZED(2043, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_ICE_PLATEAU_DISABLED_RESIZED(2044, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_SPY_DISABLED_RESIZED(2020, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MONSTER_EXAMINE_DISABLED_RESIZED(2021, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUMIDIFY_DISABLED_RESIZED(2022, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUNTER_KIT_DISABLED_RESIZED(2023, Folder.LUNAR_SPELL),
	LUNAR_SPELL_DREAM_DISABLED_RESIZED(2024, Folder.LUNAR_SPELL),
	LUNAR_SPELL_PLANK_MAKE_DISABLED_RESIZED(2025, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPELLBOOK_SWAP_DISABLED_RESIZED(2026, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TAN_LEATHER_DISABLED_RESIZED(2027, Folder.LUNAR_SPELL),
	LUNAR_SPELL_RECHARGE_DRAGONSTONE_DISABLED_RESIZED(2028, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPIN_FLAX_DISABLED_RESIZED(2029, Folder.LUNAR_SPELL),
	LUNAR_SPELL_OURANIA_TELEPORT_DISABLED_RESIZED(2031, Folder.LUNAR_SPELL),

	LUNAR_SPELL_BAKE_PIE(SpriteID.SPELL_BAKE_PIE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MOONCLAN_TELEPORT(SpriteID.SPELL_MOONCLAN_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_WATERBIRTH_TELEPORT(SpriteID.SPELL_WATERBIRTH_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BARBARIAN_TELEPORT(SpriteID.SPELL_BARBARIAN_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SUPERGLASS_MAKE(SpriteID.SPELL_SUPERGLASS_MAKE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_KHAZARD_TELEPORT(SpriteID.SPELL_KHAZARD_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STRING_JEWELLERY(SpriteID.SPELL_STRING_JEWELLERY, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BOOST_POTION_SHARE(SpriteID.SPELL_BOOST_POTION_SHARE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MAGIC_IMBUE(SpriteID.SPELL_MAGIC_IMBUE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FERTILE_SOIL(SpriteID.SPELL_FERTILE_SOIL, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_RESTORE_POT_SHARE(SpriteID.SPELL_STAT_RESTORE_POT_SHARE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FISHING_GUILD_TELEPORT(SpriteID.SPELL_FISHING_GUILD_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CATHERBY_TELEPORT(SpriteID.SPELL_CATHERBY_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ICE_PLATEAU_TELEPORT(SpriteID.SPELL_ICE_PLATEAU_TELEPORT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ENERGY_TRANSFER(SpriteID.SPELL_ENERGY_TRANSFER, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_OTHER(SpriteID.SPELL_CURE_OTHER, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_OTHER(SpriteID.SPELL_HEAL_OTHER, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_OTHER(SpriteID.SPELL_VENGEANCE_OTHER, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_ME(SpriteID.SPELL_CURE_ME, Folder.LUNAR_SPELL),
	LUNAR_SPELL_GEOMANCY(SpriteID.SPELL_GEOMANCY, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE(SpriteID.SPELL_VENGEANCE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_GROUP(SpriteID.SPELL_CURE_GROUP, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_GROUP(SpriteID.SPELL_HEAL_GROUP, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_PLANT(SpriteID.SPELL_CURE_PLANT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_NPC_CONTACT(SpriteID.SPELL_NPC_CONTACT, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_MOONCLAN(SpriteID.SPELL_TELE_GROUP_MOONCLAN, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_WATERBIRTH(SpriteID.SPELL_TELE_GROUP_WATERBIRTH, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_BARBARIAN(SpriteID.SPELL_TELE_GROUP_BARBARIAN, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_KHAZARD(SpriteID.SPELL_TELE_GROUP_KHAZARD, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_FISHING_GUILD(SpriteID.SPELL_TELE_GROUP_FISHING_GUILD, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_CATHERBY(SpriteID.SPELL_TELE_GROUP_CATHERBY, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_ICE_PLATEAU(SpriteID.SPELL_TELE_GROUP_ICE_PLATEAU, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_SPY(SpriteID.SPELL_STAT_SPY, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MONSTER_EXAMINE(SpriteID.SPELL_MONSTER_EXAMINE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUMIDIFY(SpriteID.SPELL_HUMIDIFY, Folder.LUNAR_SPELL),
	LUNAR_SPELL_DREAM(SpriteID.SPELL_DREAM, Folder.LUNAR_SPELL),
	LUNAR_SPELL_PLANK_MAKE(SpriteID.SPELL_PLANK_MAKE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPELLBOOK_SWAP(SpriteID.SPELL_SPELLBOOK_SWAP, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TAN_LEATHER(SpriteID.SPELL_TAN_LEATHER, Folder.LUNAR_SPELL),
	LUNAR_SPELL_RECHARGE_DRAGONSTONE(SpriteID.SPELL_RECHARGE_DRAGONSTONE, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPIN_FLAX(SpriteID.SPELL_SPIN_FLAX, Folder.LUNAR_SPELL),
	LUNAR_SPELL_OURANIA_TELEPORT(SpriteID.SPELL_OURANIA_TELEPORT, Folder.LUNAR_SPELL),

	LUNAR_SPELL_BAKE_PIE_RESIZED(1952, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MOONCLAN_TELEPORT_RESIZED(1980, Folder.LUNAR_SPELL),
	LUNAR_SPELL_WATERBIRTH_TELEPORT_RESIZED(1982, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BARBARIAN_TELEPORT_RESIZED(1983, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SUPERGLASS_MAKE_RESIZED(1953, Folder.LUNAR_SPELL),
	LUNAR_SPELL_KHAZARD_TELEPORT_RESIZED(1984, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STRING_JEWELLERY_RESIZED(1954, Folder.LUNAR_SPELL),
	LUNAR_SPELL_BOOST_POTION_SHARE_RESIZED(1955, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MAGIC_IMBUE_RESIZED(1957, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FERTILE_SOIL_RESIZED(1958, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_RESTORE_POT_SHARE_RESIZED(1956, Folder.LUNAR_SPELL),
	LUNAR_SPELL_FISHING_GUILD_TELEPORT_RESIZED(1985, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CATHERBY_TELEPORT_RESIZED(1986, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ICE_PLATEAU_TELEPORT_RESIZED(1987, Folder.LUNAR_SPELL),
	LUNAR_SPELL_ENERGY_TRANSFER_RESIZED(1959, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_OTHER_RESIZED(1962, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_OTHER_RESIZED(1963, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_OTHER_RESIZED(1960, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_ME_RESIZED(1964, Folder.LUNAR_SPELL),
	LUNAR_SPELL_GEOMANCY_RESIZED(1967, Folder.LUNAR_SPELL),
	LUNAR_SPELL_VENGEANCE_RESIZED(1961, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_GROUP_RESIZED(1965, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HEAL_GROUP_RESIZED(1966, Folder.LUNAR_SPELL),
	LUNAR_SPELL_CURE_PLANT_RESIZED(1968, Folder.LUNAR_SPELL),
	LUNAR_SPELL_NPC_CONTACT_RESIZED(1969, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_MOONCLAN_RESIZED(1988, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_WATERBIRTH_RESIZED(1989, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_BARBARIAN_RESIZED(1990, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_KHAZARD_RESIZED(1991, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_FISHING_GUILD_RESIZED(1992, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_CATHERBY_RESIZED(1993, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TELE_GROUP_ICE_PLATEAU_RESIZED(1994, Folder.LUNAR_SPELL),
	LUNAR_SPELL_STAT_SPY_RESIZED(1970, Folder.LUNAR_SPELL),
	LUNAR_SPELL_MONSTER_EXAMINE_RESIZED(1971, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUMIDIFY_RESIZED(1972, Folder.LUNAR_SPELL),
	LUNAR_SPELL_HUNTER_KIT_RESIZED(1973, Folder.LUNAR_SPELL),
	LUNAR_SPELL_DREAM_RESIZED(1974, Folder.LUNAR_SPELL),
	LUNAR_SPELL_PLANK_MAKE_RESIZED(1975, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPELLBOOK_SWAP_RESIZED(1976, Folder.LUNAR_SPELL),
	LUNAR_SPELL_TAN_LEATHER_RESIZED(1977, Folder.LUNAR_SPELL),
	LUNAR_SPELL_RECHARGE_DRAGONSTONE_RESIZED(1978, Folder.LUNAR_SPELL),
	LUNAR_SPELL_SPIN_FLAX_RESIZED(1979, Folder.LUNAR_SPELL),
	LUNAR_SPELL_OURANIA_TELEPORT_RESIZED(1981, Folder.LUNAR_SPELL),

	NORMAL_SPELL_WIND_STRIKE_DISABLED(SpriteID.SPELL_WIND_STRIKE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CONFUSE_DISABLED(SpriteID.SPELL_CONFUSE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_STRIKE_DISABLED(SpriteID.SPELL_WATER_STRIKE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_1_ENCHANT_DISABLED(SpriteID.SPELL_LVL_1_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_STRIKE_DISABLED(SpriteID.SPELL_EARTH_STRIKE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WEAKEN_DISABLED(SpriteID.SPELL_WEAKEN_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_STRIKE_DISABLED(SpriteID.SPELL_FIRE_STRIKE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_BANANAS_DISABLED(SpriteID.SPELL_BONES_TO_BANANAS_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BOLT_DISABLED(SpriteID.SPELL_WIND_BOLT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CURSE_DISABLED(SpriteID.SPELL_CURSE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LOW_LEVEL_ALCHEMY_DISABLED(SpriteID.SPELL_LOW_LEVEL_ALCHEMY_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BOLT_DISABLED(SpriteID.SPELL_WATER_BOLT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VARROCK_TELEPORT_DISABLED(SpriteID.SPELL_VARROCK_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_2_ENCHANT_DISABLED(SpriteID.SPELL_LVL_2_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BOLT_DISABLED(SpriteID.SPELL_EARTH_BOLT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_TELEPORT_DISABLED(SpriteID.SPELL_LUMBRIDGE_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEKINETIC_GRAB_DISABLED(SpriteID.SPELL_TELEKINETIC_GRAB_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BOLT_DISABLED(SpriteID.SPELL_FIRE_BOLT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FALADOR_TELEPORT_DISABLED(SpriteID.SPELL_FALADOR_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CRUMBLE_UNDEAD_DISABLED(SpriteID.SPELL_CRUMBLE_UNDEAD_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BLAST_DISABLED(SpriteID.SPELL_WIND_BLAST_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SUPERHEAT_ITEM_DISABLED(SpriteID.SPELL_SUPERHEAT_ITEM_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CAMELOT_TELEPORT_DISABLED(SpriteID.SPELL_CAMELOT_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BLAST_DISABLED(SpriteID.SPELL_WATER_BLAST_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_3_ENCHANT_DISABLED(SpriteID.SPELL_LVL_3_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BLAST_DISABLED(SpriteID.SPELL_EARTH_BLAST_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_HIGH_LEVEL_ALCHEMY_DISABLED(SpriteID.SPELL_HIGH_LEVEL_ALCHEMY_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_WATER_ORB_DISABLED(SpriteID.SPELL_CHARGE_WATER_ORB_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_4_ENCHANT_DISABLED(SpriteID.SPELL_LVL_4_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BLAST_DISABLED(SpriteID.SPELL_FIRE_BLAST_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_EARTH_ORB_DISABLED(SpriteID.SPELL_CHARGE_EARTH_ORB_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_WAVE_DISABLED(SpriteID.SPELL_WIND_WAVE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_FIRE_ORB_DISABLED(SpriteID.SPELL_CHARGE_FIRE_ORB_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_WAVE_DISABLED(SpriteID.SPELL_WATER_WAVE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_AIR_ORB_DISABLED(SpriteID.SPELL_CHARGE_AIR_ORB_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_5_ENCHANT_DISABLED(SpriteID.SPELL_LVL_5_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_WAVE_DISABLED(SpriteID.SPELL_EARTH_WAVE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_WAVE_DISABLED(SpriteID.SPELL_FIRE_WAVE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_IBAN_BLAST_DISABLED(SpriteID.SPELL_IBAN_BLAST_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ARDOUGNE_TELEPORT_DISABLED(SpriteID.SPELL_ARDOUGNE_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATCHTOWER_TELEPORT_DISABLED(SpriteID.SPELL_WATCHTOWER_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VULNERABILITY_DISABLED(SpriteID.SPELL_VULNERABILITY_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENFEEBLE_DISABLED(SpriteID.SPELL_ENFEEBLE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_STUN_DISABLED(SpriteID.SPELL_STUN_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FLAMES_OF_ZAMORAK_DISABLED(SpriteID.SPELL_FLAMES_OF_ZAMORAK_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CLAWS_OF_GUTHIC_DISABLED(SpriteID.SPELL_CLAWS_OF_GUTHIX_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SARADOMIN_STRIKE_DISABLED(SpriteID.SPELL_SARADOMIN_STRIKE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BIND_DISABLED(SpriteID.SPELL_BIND_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SNARE_DISABLED(SpriteID.SPELL_SNARE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENTANGLE_DISABLED(SpriteID.SPELL_ENTANGLE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_DISABLED(SpriteID.SPELL_CHARGE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TROLLHEIM_TELEPORT_DISABLED(SpriteID.SPELL_TROLLHEIM_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MAGIC_DART_DISABLED(SpriteID.SPELL_MAGIC_DART_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_LUMBRIDGE_DISABLED(SpriteID.SPELL_TELEOTHER_LUMBRIDGE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_FALADOR_DISABLED(SpriteID.SPELL_TELEOTHER_FALADOR_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_CAMELOT_DISABLED(SpriteID.SPELL_TELEOTHER_CAMELOT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELE_BLOCK_DISABLED(SpriteID.SPELL_TELE_BLOCK_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_6_ENCHANT_DISABLED(SpriteID.SPELL_LVL_6_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_PEACHES_DISABLED(SpriteID.SPELL_BONES_TO_PEACHES_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_HOUSE_DISABLED(SpriteID.SPELL_TELEPORT_TO_HOUSE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_HOME_TELEPORT_DISABLED(SpriteID.SPELL_LUMBRIDGE_HOME_TELEPORT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_APE_ATOLL_DISABLED(SpriteID.SPELL_TELEPORT_TO_APE_ATOLL_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENCHANT_CROSSBOW_BOLT_DISABLED(SpriteID.SPELL_ENCHANT_CROSSBOW_BOLT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_BOUNTY_TARGET_DISABLED(SpriteID.SPELL_TELEPORT_TO_BOUNTY_TARGET_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_KOUREND_DISABLED(SpriteID.SPELL_TELEPORT_TO_KOUREND_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_7_ENCHANT_DISABLED(SpriteID.SPELL_LVL_7_ENCHANT_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_SURGE_DISABLED(SpriteID.SPELL_WIND_SURGE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_SURGE_DISABLED(SpriteID.SPELL_WATER_SURGE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_SURGE_DISABLED(SpriteID.SPELL_EARTH_SURGE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_SURGE_DISABLED(SpriteID.SPELL_FIRE_SURGE_DISABLED, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MONSTER_INSPECT_DISABLED(418, Folder.NORMAL_SPELL),

	NORMAL_SPELL_WIND_STRIKE_DISABLED_RESIZED(1812, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CONFUSE_DISABLED_RESIZED(1862, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_STRIKE_DISABLED_RESIZED(1813, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_1_ENCHANT_DISABLED_RESIZED(1845, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_STRIKE_DISABLED_RESIZED(1814, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WEAKEN_DISABLED_RESIZED(1863, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_STRIKE_DISABLED_RESIZED(1815, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_BANANAS_DISABLED_RESIZED(1857, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BOLT_DISABLED_RESIZED(1816, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CURSE_DISABLED_RESIZED(1864, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LOW_LEVEL_ALCHEMY_DISABLED_RESIZED(1860, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BOLT_DISABLED_RESIZED(1817, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VARROCK_TELEPORT_DISABLED_RESIZED(1832, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_2_ENCHANT_DISABLED_RESIZED(1846, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BOLT_DISABLED_RESIZED(1818, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_TELEPORT_DISABLED_RESIZED(1833, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEKINETIC_GRAB_DISABLED_RESIZED(1858, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BOLT_DISABLED_RESIZED(1819, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FALADOR_TELEPORT_DISABLED_RESIZED(1834, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CRUMBLE_UNDEAD_DISABLED_RESIZED(1859, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BLAST_DISABLED_RESIZED(1820, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SUPERHEAT_ITEM_DISABLED_RESIZED(1880, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CAMELOT_TELEPORT_DISABLED_RESIZED(1836, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BLAST_DISABLED_RESIZED(1821, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_3_ENCHANT_DISABLED_RESIZED(1847, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BLAST_DISABLED_RESIZED(1822, Folder.NORMAL_SPELL),
	NORMAL_SPELL_HIGH_LEVEL_ALCHEMY_DISABLED_RESIZED(1861, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_WATER_ORB_DISABLED_RESIZED(1873, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_4_ENCHANT_DISABLED_RESIZED(1848, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BLAST_DISABLED_RESIZED(1823, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_EARTH_ORB_DISABLED_RESIZED(1874, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_WAVE_DISABLED_RESIZED(1824, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_FIRE_ORB_DISABLED_RESIZED(1875, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_WAVE_DISABLED_RESIZED(1825, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_AIR_ORB_DISABLED_RESIZED(1876, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_5_ENCHANT_DISABLED_RESIZED(1849, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_WAVE_DISABLED_RESIZED(1826, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_WAVE_DISABLED_RESIZED(1827, Folder.NORMAL_SPELL),
	NORMAL_SPELL_IBAN_BLAST_DISABLED_RESIZED(1852, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ARDOUGNE_TELEPORT_DISABLED_RESIZED(1837, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATCHTOWER_TELEPORT_DISABLED_RESIZED(1838, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VULNERABILITY_DISABLED_RESIZED(1865, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENFEEBLE_DISABLED_RESIZED(1866, Folder.NORMAL_SPELL),
	NORMAL_SPELL_STUN_DISABLED_RESIZED(1867, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FLAMES_OF_ZAMORAK_DISABLED_RESIZED(1853, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CLAWS_OF_GUTHIC_DISABLED_RESIZED(1854, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SARADOMIN_STRIKE_DISABLED_RESIZED(1855, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BIND_DISABLED_RESIZED(1868, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SNARE_DISABLED_RESIZED(1869, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENTANGLE_DISABLED_RESIZED(1870, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_DISABLED_RESIZED(1856, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TROLLHEIM_TELEPORT_DISABLED_RESIZED(1839, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MAGIC_DART_DISABLED_RESIZED(1878, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_LUMBRIDGE_DISABLED_RESIZED(1842, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_FALADOR_DISABLED_RESIZED(1843, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_CAMELOT_DISABLED_RESIZED(1844, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELE_BLOCK_DISABLED_RESIZED(1872, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_6_ENCHANT_DISABLED_RESIZED(1850, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_PEACHES_DISABLED_RESIZED(1881, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_HOUSE_DISABLED_RESIZED(1835, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_HOME_TELEPORT_DISABLED_RESIZED(1882, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_APE_ATOLL_DISABLED_RESIZED(1840, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENCHANT_CROSSBOW_BOLT_DISABLED_RESIZED(1877, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_BOUNTY_TARGET_DISABLED_RESIZED(1879, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_KOUREND_DISABLED_RESIZED(1841, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_7_ENCHANT_DISABLED_RESIZED(1851, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_SURGE_DISABLED_RESIZED(1828, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_SURGE_DISABLED_RESIZED(1829, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_SURGE_DISABLED_RESIZED(1830, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_SURGE_DISABLED_RESIZED(1831, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MONSTER_INSPECT_DISABLED_RESIZED(1885, Folder.NORMAL_SPELL),

	NORMAL_SPELL_WIND_STRIKE(SpriteID.SPELL_WIND_STRIKE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CONFUSE(SpriteID.SPELL_CONFUSE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_STRIKE(SpriteID.SPELL_WATER_STRIKE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_1_ENCHANT(SpriteID.SPELL_LVL_1_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_STRIKE(SpriteID.SPELL_EARTH_STRIKE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WEAKEN(SpriteID.SPELL_WEAKEN, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_STRIKE(SpriteID.SPELL_FIRE_STRIKE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_BANANAS(SpriteID.SPELL_BONES_TO_BANANAS, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BOLT(SpriteID.SPELL_WIND_BOLT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CURSE(SpriteID.SPELL_CURSE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LOW_LEVEL_ALCHEMY(SpriteID.SPELL_LOW_LEVEL_ALCHEMY, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BOLT(SpriteID.SPELL_WATER_BOLT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VARROCK_TELEPORT(SpriteID.SPELL_VARROCK_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_2_ENCHANT(SpriteID.SPELL_LVL_2_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BOLT(SpriteID.SPELL_EARTH_BOLT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_TELEPORT(SpriteID.SPELL_LUMBRIDGE_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEKINETIC_GRAB(SpriteID.SPELL_TELEKINETIC_GRAB, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BOLT(SpriteID.SPELL_FIRE_BOLT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FALADOR_TELEPORT(SpriteID.SPELL_FALADOR_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CRUMBLE_UNDEAD(SpriteID.SPELL_CRUMBLE_UNDEAD, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BLAST(SpriteID.SPELL_WIND_BLAST, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SUPERHEAT_ITEM(SpriteID.SPELL_SUPERHEAT_ITEM, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CAMELOT_TELEPORT(SpriteID.SPELL_CAMELOT_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BLAST(SpriteID.SPELL_WATER_BLAST, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_3_ENCHANT(SpriteID.SPELL_LVL_3_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BLAST(SpriteID.SPELL_EARTH_BLAST, Folder.NORMAL_SPELL),
	NORMAL_SPELL_HIGH_LEVEL_ALCHEMY(SpriteID.SPELL_HIGH_LEVEL_ALCHEMY, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_WATER_ORB(SpriteID.SPELL_CHARGE_WATER_ORB, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_4_ENCHANT(SpriteID.SPELL_LVL_4_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BLAST(SpriteID.SPELL_FIRE_BLAST, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_EARTH_ORB(SpriteID.SPELL_CHARGE_EARTH_ORB, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_WAVE(SpriteID.SPELL_WIND_WAVE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_FIRE_ORB(SpriteID.SPELL_CHARGE_FIRE_ORB, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_WAVE(SpriteID.SPELL_WATER_WAVE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_AIR_ORB(SpriteID.SPELL_CHARGE_AIR_ORB, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_5_ENCHANT(SpriteID.SPELL_LVL_5_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_WAVE(SpriteID.SPELL_EARTH_WAVE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_WAVE(SpriteID.SPELL_FIRE_WAVE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_IBAN_BLAST(SpriteID.SPELL_IBAN_BLAST, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ARDOUGNE_TELEPORT(SpriteID.SPELL_ARDOUGNE_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATCHTOWER_TELEPORT(SpriteID.SPELL_WATCHTOWER_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VULNERABILITY(SpriteID.SPELL_VULNERABILITY, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENFEEBLE(SpriteID.SPELL_ENFEEBLE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_STUN(SpriteID.SPELL_STUN, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FLAMES_OF_ZAMORAK(SpriteID.SPELL_FLAMES_OF_ZAMORAK, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CLAWS_OF_GUTHIC(SpriteID.SPELL_CLAWS_OF_GUTHIX, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SARADOMIN_STRIKE(SpriteID.SPELL_SARADOMIN_STRIKE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BIND(SpriteID.SPELL_BIND, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SNARE(SpriteID.SPELL_SNARE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENTANGLE(SpriteID.SPELL_ENTANGLE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE(SpriteID.SPELL_CHARGE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TROLLHEIM_TELEPORT(SpriteID.SPELL_TROLLHEIM_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MAGIC_DART(SpriteID.SPELL_MAGIC_DART, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_LUMBRIDGE(SpriteID.SPELL_TELEOTHER_LUMBRIDGE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_FALADOR(SpriteID.SPELL_TELEOTHER_FALADOR, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_CAMELOT(SpriteID.SPELL_TELEOTHER_CAMELOT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELE_BLOCK(SpriteID.SPELL_TELE_BLOCK, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_6_ENCHANT(SpriteID.SPELL_LVL_6_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_PEACHES(SpriteID.SPELL_BONES_TO_PEACHES, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_HOUSE(SpriteID.SPELL_TELEPORT_TO_HOUSE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_HOME_TELEPORT(SpriteID.SPELL_LUMBRIDGE_HOME_TELEPORT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_APE_ATOLL(SpriteID.SPELL_TELEPORT_TO_APE_ATOLL, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENCHANT_CROSSBOW_BOLT(SpriteID.SPELL_ENCHANT_CROSSBOW_BOLT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_BOUNTY_TARGET(SpriteID.SPELL_TELEPORT_TO_BOUNTY_TARGET, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_KOUREND(SpriteID.SPELL_TELEPORT_TO_KOUREND, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_7_ENCHANT(SpriteID.SPELL_LVL_7_ENCHANT, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_SURGE(SpriteID.SPELL_WIND_SURGE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_SURGE(SpriteID.SPELL_WATER_SURGE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_SURGE(SpriteID.SPELL_EARTH_SURGE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_SURGE(SpriteID.SPELL_FIRE_SURGE, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MONSTER_INSPECT(368, Folder.NORMAL_SPELL),

	NORMAL_SPELL_WIND_STRIKE_RESIZED(0, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CONFUSE_RESIZED(1782, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_STRIKE_RESIZED(1, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_1_ENCHANT_RESIZED(1765, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_STRIKE_RESIZED(2, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WEAKEN_RESIZED(1783, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_STRIKE_RESIZED(3, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_BANANAS_RESIZED(1777, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BOLT_RESIZED(5, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CURSE_RESIZED(1784, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LOW_LEVEL_ALCHEMY_RESIZED(1780, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BOLT_RESIZED(6, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VARROCK_TELEPORT_RESIZED(1752, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_2_ENCHANT_RESIZED(1766, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BOLT_RESIZED(7, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_TELEPORT_RESIZED(1753, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEKINETIC_GRAB_RESIZED(1778, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BOLT_RESIZED(8, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FALADOR_TELEPORT_RESIZED(1754, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CRUMBLE_UNDEAD_RESIZED(1779, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_BLAST_RESIZED(9, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SUPERHEAT_ITEM_RESIZED(1800, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CAMELOT_TELEPORT_RESIZED(1756, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_BLAST_RESIZED(10, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_3_ENCHANT_RESIZED(1767, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_BLAST_RESIZED(11, Folder.NORMAL_SPELL),
	NORMAL_SPELL_HIGH_LEVEL_ALCHEMY_RESIZED(1781, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_WATER_ORB_RESIZED(1793, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_4_ENCHANT_RESIZED(1768, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_BLAST_RESIZED(13, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_EARTH_ORB_RESIZED(1794, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_WAVE_RESIZED(14, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_FIRE_ORB_RESIZED(1795, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_WAVE_RESIZED(305, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_AIR_ORB_RESIZED(1796, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_5_ENCHANT_RESIZED(1769, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_WAVE_RESIZED(306, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_WAVE_RESIZED(307, Folder.NORMAL_SPELL),
	NORMAL_SPELL_IBAN_BLAST_RESIZED(1772, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ARDOUGNE_TELEPORT_RESIZED(1757, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATCHTOWER_TELEPORT_RESIZED(1758, Folder.NORMAL_SPELL),
	NORMAL_SPELL_VULNERABILITY_RESIZED(1785, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENFEEBLE_RESIZED(1786, Folder.NORMAL_SPELL),
	NORMAL_SPELL_STUN_RESIZED(1787, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FLAMES_OF_ZAMORAK_RESIZED(1773, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CLAWS_OF_GUTHIC_RESIZED(1774, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SARADOMIN_STRIKE_RESIZED(1775, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BIND_RESIZED(1788, Folder.NORMAL_SPELL),
	NORMAL_SPELL_SNARE_RESIZED(1789, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENTANGLE_RESIZED(1790, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CHARGE_RESIZED(1776, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TROLLHEIM_TELEPORT_RESIZED(1759, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MAGIC_DART_RESIZED(1798, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_LUMBRIDGE_RESIZED(1762, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_FALADOR_RESIZED(1763, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEOTHER_CAMELOT_RESIZED(1764, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELE_BLOCK_RESIZED(1792, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_6_ENCHANT_RESIZED(1770, Folder.NORMAL_SPELL),
	NORMAL_SPELL_BONES_TO_PEACHES_RESIZED(1801, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_HOUSE_RESIZED_RESIZED(1755, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LUMBRIDGE_HOME_TELEPORT_RESIZED(1802, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_APE_ATOLL_RESIZED(1760, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENCHANT_CROSSBOW_BOLT_RESIZED(1797, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_BOUNTY_TARGET_RESIZED(1799, Folder.NORMAL_SPELL),
	NORMAL_SPELL_TELEPORT_TO_KOUREND_RESIZED(1761, Folder.NORMAL_SPELL),
	NORMAL_SPELL_LVL_7_ENCHANT_RESIZED(1771, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WIND_SURGE_RESIZED(1098, Folder.NORMAL_SPELL),
	NORMAL_SPELL_WATER_SURGE_RESIZED(1099, Folder.NORMAL_SPELL),
	NORMAL_SPELL_EARTH_SURGE_RESIZED(1100, Folder.NORMAL_SPELL),
	NORMAL_SPELL_FIRE_SURGE_RESIZED(1751, Folder.NORMAL_SPELL),
	NORMAL_SPELL_MONSTER_INSPECT_RESIZED(1805, Folder.NORMAL_SPELL),

	PRAYER_THICK_SKIN_DISABLED(SpriteID.PRAYER_THICK_SKIN_DISABLED, Folder.PRAYER),
	PRAYER_BURST_OF_STRENGTH_DISABLED(SpriteID.PRAYER_BURST_OF_STRENGTH_DISABLED, Folder.PRAYER),
	PRAYER_CLARITY_OF_THOUGHT_DISABLED(SpriteID.PRAYER_CLARITY_OF_THOUGHT_DISABLED, Folder.PRAYER),
	PRAYER_ROCK_SKIN_DISABLED(SpriteID.PRAYER_ROCK_SKIN_DISABLED, Folder.PRAYER),
	PRAYER_SUPERHUMAN_STRENGTH_DISABLED(SpriteID.PRAYER_SUPERHUMAN_STRENGTH_DISABLED, Folder.PRAYER),
	PRAYER_IMPROVED_REFLEXES_DISABLED(SpriteID.PRAYER_IMPROVED_REFLEXES_DISABLED, Folder.PRAYER),
	PRAYER_RAPID_RESTORE_DISABLED(SpriteID.PRAYER_RAPID_RESTORE_DISABLED, Folder.PRAYER),
	PRAYER_RAPID_HEAL_DISABLED(SpriteID.PRAYER_RAPID_HEAL_DISABLED, Folder.PRAYER),
	PRAYER_PROTECT_ITEM_DISABLED(SpriteID.PRAYER_PROTECT_ITEM_DISABLED, Folder.PRAYER),
	PRAYER_STEEL_SKIN_DISABLED(SpriteID.PRAYER_STEEL_SKIN_DISABLED, Folder.PRAYER),
	PRAYER_ULTIMATE_STRENGTH_DISABLED(SpriteID.PRAYER_ULTIMATE_STRENGTH_DISABLED, Folder.PRAYER),
	PRAYER_INCREDIBLE_REFLEXES_DISABLED(SpriteID.PRAYER_INCREDIBLE_REFLEXES_DISABLED, Folder.PRAYER),
	PRAYER_PROTECT_FROM_MAGIC_DISABLED(SpriteID.PRAYER_PROTECT_FROM_MAGIC_DISABLED, Folder.PRAYER),
	PRAYER_PROTECT_FROM_MISSILES_DISABLED(SpriteID.PRAYER_PROTECT_FROM_MISSILES_DISABLED, Folder.PRAYER),
	PRAYER_PROTECT_FROM_MELEE_DISABLED(SpriteID.PRAYER_PROTECT_FROM_MELEE_DISABLED, Folder.PRAYER),
	PRAYER_REDEMPTION_DISABLED(SpriteID.PRAYER_REDEMPTION_DISABLED, Folder.PRAYER),
	PRAYER_RETRIBUTION_DISABLED(SpriteID.PRAYER_RETRIBUTION_DISABLED, Folder.PRAYER),
	PRAYER_SMITE_DISABLED(SpriteID.PRAYER_SMITE_DISABLED, Folder.PRAYER),
	PRAYER_SHARP_EYE_DISABLED(SpriteID.PRAYER_SHARP_EYE_DISABLED, Folder.PRAYER),
	PRAYER_MYSTIC_WILL_DISABLED(SpriteID.PRAYER_MYSTIC_WILL_DISABLED, Folder.PRAYER),
	PRAYER_HAWK_EYE_DISABLED(SpriteID.PRAYER_HAWK_EYE_DISABLED, Folder.PRAYER),
	PRAYER_MYSTIC_LORE_DISABLED(SpriteID.PRAYER_MYSTIC_LORE_DISABLED, Folder.PRAYER),
	PRAYER_EAGLE_EYE_DISABLED(SpriteID.PRAYER_EAGLE_EYE_DISABLED, Folder.PRAYER),
	PRAYER_MYSTIC_MIGHT_DISABLED(SpriteID.PRAYER_MYSTIC_MIGHT_DISABLED, Folder.PRAYER),
	PRAYER_CHIVALRY_DISABLED(SpriteID.PRAYER_CHIVALRY_DISABLED, Folder.PRAYER),
	PRAYER_PIETY_DISABLED(SpriteID.PRAYER_PIETY_DISABLED, Folder.PRAYER),
	PRAYER_PRESERVE_DISABLED(SpriteID.PRAYER_PRESERVE_DISABLED, Folder.PRAYER),
	PRAYER_RIGOUR_DISABLED(SpriteID.PRAYER_RIGOUR_DISABLED, Folder.PRAYER),
	PRAYER_AUGURY_DISABLED(SpriteID.PRAYER_AUGURY_DISABLED, Folder.PRAYER),
	PRAYER_DEADEYE_DISABLED(1426, Folder.PRAYER),
	PRAYER_MYSTIC_VIGOUR_DISABLED(1427, Folder.PRAYER),

	PRAYER_THICK_SKIN(SpriteID.PRAYER_THICK_SKIN, Folder.PRAYER),
	PRAYER_BURST_OF_STRENGTH(SpriteID.PRAYER_BURST_OF_STRENGTH, Folder.PRAYER),
	PRAYER_CLARITY_OF_THOUGHT(SpriteID.PRAYER_CLARITY_OF_THOUGHT, Folder.PRAYER),
	PRAYER_ROCK_SKIN(SpriteID.PRAYER_ROCK_SKIN, Folder.PRAYER),
	PRAYER_SUPERHUMAN_STRENGTH(SpriteID.PRAYER_SUPERHUMAN_STRENGTH, Folder.PRAYER),
	PRAYER_IMPROVED_REFLEXES(SpriteID.PRAYER_IMPROVED_REFLEXES, Folder.PRAYER),
	PRAYER_RAPID_RESTORE(SpriteID.PRAYER_RAPID_RESTORE, Folder.PRAYER),
	PRAYER_RAPID_HEAL(SpriteID.PRAYER_RAPID_HEAL, Folder.PRAYER),
	PRAYER_PROTECT_ITEM(SpriteID.PRAYER_PROTECT_ITEM, Folder.PRAYER),
	PRAYER_STEEL_SKIN(SpriteID.PRAYER_STEEL_SKIN, Folder.PRAYER),
	PRAYER_ULTIMATE_STRENGTH(SpriteID.PRAYER_ULTIMATE_STRENGTH, Folder.PRAYER),
	PRAYER_INCREDIBLE_REFLEXES(SpriteID.PRAYER_INCREDIBLE_REFLEXES, Folder.PRAYER),
	PRAYER_PROTECT_FROM_MAGIC(SpriteID.PRAYER_PROTECT_FROM_MAGIC, Folder.PRAYER),
	PRAYER_PROTECT_FROM_MISSILES(SpriteID.PRAYER_PROTECT_FROM_MISSILES, Folder.PRAYER),
	PRAYER_PROTECT_FROM_MELEE(SpriteID.PRAYER_PROTECT_FROM_MELEE, Folder.PRAYER),
	PRAYER_REDEMPTION(SpriteID.PRAYER_REDEMPTION, Folder.PRAYER),
	PRAYER_RETRIBUTION(SpriteID.PRAYER_RETRIBUTION, Folder.PRAYER),
	PRAYER_SMITE(SpriteID.PRAYER_SMITE, Folder.PRAYER),
	PRAYER_SHARP_EYE(SpriteID.PRAYER_SHARP_EYE, Folder.PRAYER),
	PRAYER_MYSTIC_WILL(SpriteID.PRAYER_MYSTIC_WILL, Folder.PRAYER),
	PRAYER_HAWK_EYE(SpriteID.PRAYER_HAWK_EYE, Folder.PRAYER),
	PRAYER_MYSTIC_LORE(SpriteID.PRAYER_MYSTIC_LORE, Folder.PRAYER),
	PRAYER_EAGLE_EYE(SpriteID.PRAYER_EAGLE_EYE, Folder.PRAYER),
	PRAYER_MYSTIC_MIGHT(SpriteID.PRAYER_MYSTIC_MIGHT, Folder.PRAYER),
	PRAYER_CHIVALRY(SpriteID.PRAYER_CHIVALRY, Folder.PRAYER),
	PRAYER_PIETY(SpriteID.PRAYER_PIETY, Folder.PRAYER),
	PRAYER_PRESERVE(SpriteID.PRAYER_PRESERVE, Folder.PRAYER),
	PRAYER_RIGOUR(SpriteID.PRAYER_RIGOUR, Folder.PRAYER),
	PRAYER_AUGURY(SpriteID.PRAYER_AUGURY, Folder.PRAYER),
	PRAYER_ACTIVATED_BACKGROUND(SpriteID.ACTIVATED_PRAYER_BACKGROUND, Folder.PRAYER),
	PRAYER_ICON_SMALL(SpriteID.UNKNOWN_PRAYER_ICON, Folder.PRAYER),
	PRAYER_DEADEYE(1422, Folder.PRAYER),
	PRAYER_MYSTIC_VIGOUR(1423, Folder.PRAYER),

	EMOTE_SHRUG_LOCKED(SpriteID.EMOTE_SHRUG_LOCKED, Folder.EMOTE),
	EMOTE_BLOW_KISS_LOCKED(SpriteID.EMOTE_BLOW_KISS_LOCKED, Folder.EMOTE),
	EMOTE_GLASS_BOX_LOCKED(SpriteID.EMOTE_GLASS_BOX_LOCKED, Folder.EMOTE),
	EMOTE_CLIMB_ROPE_LOCKED(SpriteID.EMOTE_CLIMB_ROPE_LOCKED, Folder.EMOTE),
	EMOTE_LEAN_LOCKED(SpriteID.EMOTE_LEAN_LOCKED, Folder.EMOTE),
	EMOTE_GLASS_WALL_LOCKED(SpriteID.EMOTE_GLASS_WALL_LOCKED, Folder.EMOTE),
	EMOTE_GOBLIN_BOW_LOCKED(SpriteID.EMOTE_GOBLIN_BOW_LOCKED, Folder.EMOTE),
	EMOTE_GOBLIN_SALUTE_LOCKED(SpriteID.EMOTE_GOBLIN_SALUTE_LOCKED, Folder.EMOTE),
	EMOTE_SCARED_LOCKED(SpriteID.EMOTE_SCARED_LOCKED, Folder.EMOTE),
	EMOTE_SLAP_HEAD_LOCKED(SpriteID.EMOTE_SLAP_HEAD_LOCKED, Folder.EMOTE),
	EMOTE_STAMP_LOCKED(SpriteID.EMOTE_STAMP_LOCKED, Folder.EMOTE),
	EMOTE_FLAP_LOCKED(SpriteID.EMOTE_FLAP_LOCKED, Folder.EMOTE),
	EMOTE_IDEA_LOCKED(SpriteID.EMOTE_IDEA_LOCKED, Folder.EMOTE),
	EMOTE_ZOMBIE_WALK_LOCKED(SpriteID.EMOTE_ZOMBIE_WALK_LOCKED, Folder.EMOTE),
	EMOTE_ZOMBIE_DANCE_LOCKED(SpriteID.EMOTE_ZOMBIE_DANCE_LOCKED, Folder.EMOTE),
	EMOTE_RABBIT_HOP_LOCKED(SpriteID.EMOTE_RABBIT_HOP_LOCKED, Folder.EMOTE),
	EMOTE_SKILLCAPE_LOCKED(SpriteID.EMOTE_SKILLCAPE_LOCKED, Folder.EMOTE),
	EMOTE_ZOMBIE_HAND_LOCKED(SpriteID.EMOTE_ZOMBIE_HAND_LOCKED, Folder.EMOTE),
	EMOTE_AIR_GUITAR_LOCKED(SpriteID.EMOTE_AIR_GUITAR_LOCKED, Folder.EMOTE),
	EMOTE_JOG_LOCKED(SpriteID.EMOTE_JOG_LOCKED, Folder.EMOTE),
	EMOTE_SIT_UP_LOCKED(SpriteID.EMOTE_SIT_UP_LOCKED, Folder.EMOTE),
	EMOTE_STAR_JUMP_LOCKED(SpriteID.EMOTE_STAR_JUMP_LOCKED, Folder.EMOTE),
	EMOTE_PUSH_UP_LOCKED(SpriteID.EMOTE_PUSH_UP_LOCKED, Folder.EMOTE),
	EMOTE_HYPERMOBILE_DRINKER_LOCKED(SpriteID.EMOTE_HYPERMOBILE_DRINKER_LOCKED, Folder.EMOTE),
	EMOTE_URI_TRANSFORM_LOCKED(SpriteID.EMOTE_URI_TRANSFORM_LOCKED, Folder.EMOTE),
	EMOTE_SMOOTH_DANCE_LOCKED(SpriteID.EMOTE_SMOOTH_DANCE_LOCKED, Folder.EMOTE),
	EMOTE_CRAZY_DANCE_LOCKED(SpriteID.EMOTE_CRAZY_DANCE_LOCKED, Folder.EMOTE),
	EMOTE_PREMIER_SHIELD_LOCKED(SpriteID.EMOTE_PREMIER_SHIELD_LOCKED, Folder.EMOTE),
	EMOTE_EXPLORER_LOCKED(2427, Folder.EMOTE),
	EMOTE_RELIC_UNLOCK_LOCKED(2428, Folder.EMOTE),
	EMOTE_FLEX_LOCKED(2429, Folder.EMOTE),
	EMOTE_PARTY_LOCKED(2430, Folder.EMOTE),
	EMOTE_TRICK_LOCKED(5249, Folder.EMOTE),
	EMOTE_FORTIS_SALUTE_LOCKED(5251, Folder.EMOTE),

	EMOTE_YES(SpriteID.EMOTE_YES, Folder.EMOTE),
	EMOTE_NO(SpriteID.EMOTE_NO, Folder.EMOTE),
	EMOTE_THINK(SpriteID.EMOTE_THINK, Folder.EMOTE),
	EMOTE_BOW(SpriteID.EMOTE_BOW, Folder.EMOTE),
	EMOTE_ANGRY(SpriteID.EMOTE_ANGRY, Folder.EMOTE),
	EMOTE_CRY(SpriteID.EMOTE_CRY, Folder.EMOTE),
	EMOTE_LAUGH(SpriteID.EMOTE_LAUGH, Folder.EMOTE),
	EMOTE_CHEER(SpriteID.EMOTE_CHEER, Folder.EMOTE),
	EMOTE_WAVE(SpriteID.EMOTE_WAVE, Folder.EMOTE),
	EMOTE_BECKON(SpriteID.EMOTE_BECKON, Folder.EMOTE),
	EMOTE_DANCE(SpriteID.EMOTE_DANCE, Folder.EMOTE),
	EMOTE_CLAP(SpriteID.EMOTE_CLAP, Folder.EMOTE),
	EMOTE_PANIC(SpriteID.EMOTE_PANIC, Folder.EMOTE),
	EMOTE_JIG(SpriteID.EMOTE_JIG, Folder.EMOTE),
	EMOTE_SPIN(SpriteID.EMOTE_SPIN, Folder.EMOTE),
	EMOTE_HEADBANG(SpriteID.EMOTE_HEADBANG, Folder.EMOTE),
	EMOTE_JUMP_FOR_JOY(SpriteID.EMOTE_JUMP_FOR_JOY, Folder.EMOTE),
	EMOTE_RASPBERRY(SpriteID.EMOTE_RASPBERRY, Folder.EMOTE),
	EMOTE_YAWN(SpriteID.EMOTE_YAWN, Folder.EMOTE),
	EMOTE_SALUTE(SpriteID.EMOTE_SALUTE, Folder.EMOTE),
	EMOTE_SHRUG(SpriteID.EMOTE_SHRUG, Folder.EMOTE),
	EMOTE_BLOW_KISS(SpriteID.EMOTE_BLOW_KISS, Folder.EMOTE),
	EMOTE_GLASS_BOX(SpriteID.EMOTE_GLASS_BOX, Folder.EMOTE),
	EMOTE_CLIMB_ROPE(SpriteID.EMOTE_CLIMB_ROPE, Folder.EMOTE),
	EMOTE_LEAN(SpriteID.EMOTE_LEAN, Folder.EMOTE),
	EMOTE_GLASS_WALL(SpriteID.EMOTE_GLASS_WALL, Folder.EMOTE),
	EMOTE_GOBLIN_BOW(SpriteID.EMOTE_GOBLIN_BOW, Folder.EMOTE),
	EMOTE_GOBLIN_SALUTE(SpriteID.EMOTE_GOBLIN_SALUTE, Folder.EMOTE),
	EMOTE_SCARED(SpriteID.EMOTE_SCARED, Folder.EMOTE),
	EMOTE_SLAP_HEAD(SpriteID.EMOTE_SLAP_HEAD, Folder.EMOTE),
	EMOTE_STAMP(SpriteID.EMOTE_STAMP, Folder.EMOTE),
	EMOTE_FLAP(SpriteID.EMOTE_FLAP, Folder.EMOTE),
	EMOTE_IDEA(SpriteID.EMOTE_IDEA, Folder.EMOTE),
	EMOTE_ZOMBIE_WALK(SpriteID.EMOTE_ZOMBIE_WALK, Folder.EMOTE),
	EMOTE_ZOMBIE_DANCE(SpriteID.EMOTE_ZOMBIE_DANCE, Folder.EMOTE),
	EMOTE_RABBIT_HOP(SpriteID.EMOTE_RABBIT_HOP, Folder.EMOTE),
	EMOTE_SKILLCAPE(SpriteID.EMOTE_SKILLCAPE, Folder.EMOTE),
	EMOTE_ZOMBIE_HAND(SpriteID.EMOTE_ZOMBIE_HAND, Folder.EMOTE),
	EMOTE_AIR_GUITAR(SpriteID.EMOTE_AIR_GUITAR, Folder.EMOTE),
	EMOTE_JOG(SpriteID.EMOTE_JOG, Folder.EMOTE),
	EMOTE_PENGUIN_SHIVER(SpriteID.EMOTE_PENGUIN_SHIVER, Folder.EMOTE),
	EMOTE_PENGUIN_SPIN(SpriteID.EMOTE_PENGUIN_SPIN, Folder.EMOTE),
	EMOTE_PENGUIN_CLAP(SpriteID.EMOTE_PENGUIN_CLAP, Folder.EMOTE),
	EMOTE_PENGUIN_BOW(SpriteID.EMOTE_PENGUIN_BOW, Folder.EMOTE),
	EMOTE_PENGUIN_CHEER(SpriteID.EMOTE_PENGUIN_CHEER, Folder.EMOTE),
	EMOTE_PENGUIN_WAVE(SpriteID.EMOTE_PENGUIN_WAVE, Folder.EMOTE),
	EMOTE_PENGUIN_PREEN(SpriteID.EMOTE_PENGUIN_PREEN, Folder.EMOTE),
	EMOTE_PENGUIN_FLAP(SpriteID.EMOTE_PENGUIN_FLAP, Folder.EMOTE),
	EMOTE_SIT_UP(SpriteID.EMOTE_SIT_UP, Folder.EMOTE),
	EMOTE_STAR_JUMP(SpriteID.EMOTE_STAR_JUMP, Folder.EMOTE),
	EMOTE_PUSH_UP(SpriteID.EMOTE_PUSH_UP, Folder.EMOTE),
	EMOTE_HYPERMOBILE_DRINKER(SpriteID.EMOTE_HYPERMOBILE_DRINKER, Folder.EMOTE),
	EMOTE_URI_TRANSFORM(SpriteID.EMOTE_URI_TRANSFORM, Folder.EMOTE),
	EMOTE_SMOOTH_DANCE(SpriteID.EMOTE_SMOOTH_DANCE, Folder.EMOTE),
	EMOTE_CRAZY_DANCE(SpriteID.EMOTE_CRAZY_DANCE, Folder.EMOTE),
	EMOTE_PREMIER_SHIELD(SpriteID.EMOTE_PREMIER_SHIELD, Folder.EMOTE),
	EMOTE_EXPLORER(2423, Folder.EMOTE),
	EMOTE_RELIC_UNLOCK(2424, Folder.EMOTE),
	EMOTE_RELIC_UNLOCK_SHATTERED(3604, Folder.EMOTE),
	EMOTE_RELIC_UNLOCK_TRAILBLAZER(2425, Folder.EMOTE),
	EMOTE_RELIC_UNLOCK_TRAILBLAZER_RELOADED(3608, Folder.EMOTE),
	EMOTE_FLEX(2426, Folder.EMOTE),
	EMOTE_PARTY(3606, Folder.EMOTE),
	EMOTE_TRICK(3607, Folder.EMOTE),
	EMOTE_FORTIS_SALUTE(5246, Folder.EMOTE),
	EMOTE_SIT_DOWN(5248, Folder.EMOTE),

	IMPLING_GOURMET(SpriteID.PURO_PURO_GOURMET_IMPLING, Folder.IMPLING),
	IMPLING_BABY(SpriteID.PURO_PURO_BABY_IMPLING, Folder.IMPLING),
	IMPLING_DRAGON(SpriteID.PURO_PURO_DRAGON_IMPLING, Folder.IMPLING),
	IMPLING_NATURE(SpriteID.PURO_PURO_NATURE_IMPLING, Folder.IMPLING),
	IMPLING_ECLECTIC(SpriteID.PURO_PURO_ECLECTIC_IMPLING, Folder.IMPLING),
	IMPLING_IN_JAR(SpriteID.PURO_PURO_IMPLING_IN_JAR, Folder.IMPLING),
	IMPLING_YOUNG(SpriteID.PURO_PURO_YOUNG_IMPLING, Folder.IMPLING),
	IMPLING_MAGPIE(SpriteID.PURO_PURO_MAGPIE_IMPLING, Folder.IMPLING),
	IMPLING_ESSENCE(SpriteID.PURO_PURO_ESSENCE_IMPLING, Folder.IMPLING),
	IMPLING_EARTH(SpriteID.PURO_PURO_EARTH_IMPLING, Folder.IMPLING),
	IMPLING_NINJA(SpriteID.PURO_PURO_NINJA_IMPLING, Folder.IMPLING),
	IMPLING_LUCKY(SpriteID.PURO_PURO_LUCKY_IMPLING, Folder.IMPLING),

	CROSS_SPRITES_YELLOW_FRAME1(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 0, Folder.CROSS_SPRITES),
	CROSS_SPRITES_YELLOW_FRAME2(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 1, Folder.CROSS_SPRITES),
	CROSS_SPRITES_YELLOW_FRAME3(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 2, Folder.CROSS_SPRITES),
	CROSS_SPRITES_YELLOW_FRAME4(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 3, Folder.CROSS_SPRITES),
	CROSS_SPRITES_RED_FRAME1(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 4, Folder.CROSS_SPRITES),
	CROSS_SPRITES_RED_FRAME2(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 5, Folder.CROSS_SPRITES),
	CROSS_SPRITES_RED_FRAME3(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 6, Folder.CROSS_SPRITES),
	CROSS_SPRITES_RED_FRAME4(SpriteID.RS2_YELLOW_CLICK_ANIMATION_1, 7, Folder.CROSS_SPRITES),

	COMBAT_ACHIEVEMENTS_BRONZE_SWORD_LARGE(3393, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_STEEL_SWORD_LARGE(3394, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_BLACK_SWORD_LARGE(3395, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_RUNE_SWORD_LARGE(3396, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_DRAGON_SWORD_LARGE(3397, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_ARMADYL_GODSWORD_LARGE(3398, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_BRONZE_SWORD_SMALL(3399, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_STEEL_SWORD_SMALL(3400, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_BLACK_SWORD_SMALL(3401, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_RUNE_SWORD_SMALL(3402, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_DRAGON_SWORD_SMALL(3403, Folder.COMBAT_ACHIEVEMENTS),
	COMBAT_ACHIEVEMENTS_ARMADYL_GODSWORD_SMALL(3404, Folder.COMBAT_ACHIEVEMENTS),

	BANK_SEND_TO_INVENTORY(SpriteID.BANK_RAID_SEND_TO_INVENTORY, Folder.BANK),
	BANK_SEND_TO_BANK(SpriteID.BANK_RAID_SEND_TO_BANK, Folder.BANK),
	BANK_SEND_TO_TRASH(SpriteID.BANK_RAID_SEND_TO_TRASH, Folder.BANK),

	WINDOW_SWITCH_VIEW(4669, Folder.OTHER),
	WINDOW_SWITCH_VIEW_HOVERED(4670, Folder.OTHER),
	WINDOW_ARROW_LEFT(4668, Folder.OTHER),
	WINDOW_ARROW_LEFT_HOVERED(4668, Folder.OTHER),
	ORANGE_UP_ARROW(4734, Folder.OTHER),
	ORANGE_RIGHT_ARROW(4735, Folder.OTHER),
	ORANGE_DOWN_ARROW(4736, Folder.OTHER),
	ORANGE_LEFT_ARROW(4737, Folder.OTHER),
	SMALL_PLUS_ICON(2291, Folder.OTHER),
	SMALL_PLUS_ICON_HOVERED(2292, Folder.OTHER),
	SMALL_MINUS_ICON(2293, Folder.OTHER),
	SMALL_MINUS_ICON_HOVERED(2294, Folder.OTHER),
	WORLD_SWITCHER_BETA_FLAG(4924, Folder.OTHER),
	WORLD_SWITCHER_STAR_SEASONAL(2311, Folder.OTHER),
	WORLD_SWITCHER_STAR_SPECIAL(1338, Folder.OTHER),
	WORLD_SWITCHER_STAR_FRESH_START(4671, Folder.OTHER),
	WORLD_SWITCHER_FILTER_SMALL(4940, Folder.OTHER),
	WORLD_SWITCHER_FILTER_BIG(4939, Folder.OTHER),
	WORLD_FILTER_PVP_ARENA(4929, Folder.OTHER),
	WORLD_FILTER_HIGH_RISK(4928, Folder.OTHER),
	WORLD_FILTER_SKILL_TOTAL(4927, Folder.OTHER),
	SELECTOR_ARROW(2519, Folder.OTHER),

	MINIMAP_ORB_SOULREAPER_AXE_ICON(3019, Folder.OTHER),
	MINIMAP_ORB_PRAYER_CORRUPTION(1637, Folder.OTHER),
	MINIMAP_ORB_PRAYER_CORRUPTION_ACTIVATED(2208, Folder.OTHER),

	OPTIONS_CHECKBOX_EMPTY_ROUND(SpriteID.ROUND_CHECK_BOX, Folder.OPTIONS),

	DIALOG_IRON_RIVETS_VERTICAL_MIDDLE(2561, Folder.DIALOG),
	DIALOG_DRAG_CORNER_DOTS(2523, Folder.DIALOG),
	DIALOG_VERTICAL_SEPARATOR_LINE(2147, Folder.DIALOG),
	DIALOG_HORIZONTAL_SEPARATOR_LINE(2146, Folder.DIALOG),
	DIALOG_PROGRESS_BAR_NOTCH(2388, Folder.DIALOG),

	DIALOG_SOUL_WARS_TOP_LEFT(2897, Folder.DIALOG),
	DIALOG_SOUL_WARS_TOP_RIGHT(2898, Folder.DIALOG),
	DIALOG_SOUL_WARS_BOTTOM_LEFT(2899, Folder.DIALOG),
	DIALOG_SOUL_WARS_BOTTOM_RIGHT(2900, Folder.DIALOG),

	DIALOG_TAN_BORDER_CORNER_TOP_LEFT(2487, Folder.DIALOG),
	DIALOG_TAN_BORDER_CORNER_TOP_RIGHT(2488, Folder.DIALOG),
	DIALOG_TAN_BORDER_CORNER_BOTTOM_LEFT(2489, Folder.DIALOG),
	DIALOG_TAN_BORDER_CORNER_BOTTOM_RIGHT(2490, Folder.DIALOG),
	DIALOG_TAN_BORDER_LEFT(2491, Folder.DIALOG),
	DIALOG_TAN_BORDER_TOP(2492, Folder.DIALOG),
	DIALOG_TAN_BORDER_RIGHT(2493, Folder.DIALOG),
	DIALOG_TAN_BORDER_BOTTOM(2494, Folder.DIALOG),

	DIALOG_TAN_BORDER_THICK_CORNER_TOP_LEFT(2524, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_CORNER_TOP_RIGHT(2525, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_CORNER_BOTTOM_LEFT(2526, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_CORNER_BOTTOM_RIGHT(2527, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_LEFT(2528, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_TOP(2529, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_RIGHT(2530, Folder.DIALOG),
	DIALOG_TAN_BORDER_THICK_BOTTOM(2531, Folder.DIALOG),

	BUTTON_SKILL_GUIDE_UNSELECTED_EDGE_TOP(3544, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_EDGE_BOTTOM(3545, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_EDGE_LEFT(3546, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_EDGE_RIGHT(3547, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_CORNER_TOP_LEFT(3540, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_CORNER_TOP_RIGHT(3541, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_CORNER_BOTTOM_LEFT(3542, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_UNSELECTED_CORNER_BOTTOM_RIGHT(3543, Folder.BUTTON),

	BUTTON_SKILL_GUIDE_HOVERED_EDGE_TOP(3536, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_EDGE_BOTTOM(3537, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_EDGE_LEFT(3538, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_EDGE_RIGHT(3539, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_CORNER_TOP_LEFT(3532, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_CORNER_TOP_RIGHT(3533, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_CORNER_BOTTOM_LEFT(3534, Folder.BUTTON),
	BUTTON_SKILL_GUIDE_HOVERED_CORNER_BOTTOM_RIGHT(3535, Folder.BUTTON),

	TAB_QUESTS_ORANGE_PATHS(SpriteID.TAB_QUESTS_ORANGE_ADVENTURE_PATHS, Folder.TAB),

	QUESTS_TAB_ORANGE_PATHS_ICON(SpriteID.QUESTS_PAGE_ICON_ORANGE_ADVENTURE_PATHS, Folder.QUESTS_TAB),

//
//	HITSPLAT_DAMAGE(1359, Folder.HITSPLAT),
//	HITSPLAT_DAMAGE_CRIT(3571, Folder.HITSPLAT),
//	HITSPLAT_BLOCK(1358, Folder.HITSPLAT),
//	HITSPLAT_HEAL(1629, Folder.HITSPLAT),
//	HITSPLAT_DAMAGE_OTHER(1631, Folder.HITSPLAT),
//	HITSPLAT_BLOCK_OTHER(1630, Folder.HITSPLAT),
//	HITSPLAT_ARMOUR(1628, Folder.HITSPLAT),
//	HITSPLAT_ARMOUR_OTHER(1544, Folder.HITSPLAT),
//	HITSPLAT_ARMOUR_CRIT(4557, Folder.HITSPLAT),
//	HITSPLAT_SHIELD(1419, Folder.HITSPLAT),
//	HITSPLAT_SHIELD_CRIT(4556, Folder.HITSPLAT),
//	HITSPLAT_SHIELD_OTHER(1339, Folder.HITSPLAT),
//	HITSPLAT_PRAYER_DRAIN(4561, Folder.HITSPLAT),
//	HITSPLAT_PRAYER_DRAIN_CRIT(4562, Folder.HITSPLAT),
//	HITSPLAT_PRAYER_DRAIN_OTHER(4563, Folder.HITSPLAT),
//	HITSPLAT_CHARGED(1362, Folder.HITSPLAT),
//	HITSPLAT_CHARGED_CRIT(1634, Folder.HITSPLAT),
//	HITSPLAT_CHARGED_OTHER(3572, Folder.HITSPLAT),
//	HITSPLAT_UNCHARGE(1363, Folder.HITSPLAT),
//	HITSPLAT_UNCHARGE_CRIT(3573, Folder.HITSPLAT),
//	HITSPLAT_CHARGED_2(3519, Folder.HITSPLAT),
//	HITSPLAT_CHARGED_2_OTHER(3569, Folder.HITSPLAT),
//	HITSPLAT_UNCHARGE_2(3520, Folder.HITSPLAT),
//	HITSPLAT_UNCHARGE_2_OTHER(3570, Folder.HITSPLAT),
//	HITSPLAT_POISE(4558, Folder.HITSPLAT),
//	HITSPLAT_POISE_CRIT(4559, Folder.HITSPLAT),
//	HITSPLAT_POISE_OTHER(4560, Folder.HITSPLAT),
//	HITSPLAT_DODGE(3405, Folder.HITSPLAT),
//	HITSPLAT_DODGE_OTHER(3512, Folder.HITSPLAT),
//	HITSPLAT_STATUS_POISON(SpriteID.HITSPLAT_GREEN_POISON, Folder.HITSPLAT),
//	HITSPLAT_STATUS_POISON_CRIT(4763, Folder.HITSPLAT),
//	HITSPLAT_STATUS_DISEASE(1633, Folder.HITSPLAT),
//	HITSPLAT_STATUS_VENOM(SpriteID.HITSPLAT_DARK_GREEN_VENOM, Folder.HITSPLAT),
//	HITSPLAT_STATUS_POISON_OTHER(2245, Folder.HITSPLAT),
//	HITSPLAT_STATUS_INSANITY_LOSS(4764, Folder.HITSPLAT),
//	HITSPLAT_STATUS_INSANITY_GAIN(4765, Folder.HITSPLAT),
//	HITSPLAT_STATUS_CORRUPTION(2270, Folder.HITSPLAT),
//	HITSPLAT_STATUS_BLEED(4564, Folder.HITSPLAT),
//	HITSPLAT_STATUS_BURN(4767, Folder.HITSPLAT),
//	HITSPLAT_STATUS_DOOM(4766, Folder.HITSPLAT),
//	HITSPLAT_NO_DROP(3521, Folder.HITSPLAT),

	SCROLLBAR_ARROW_LEFT(4533, Folder.SCROLLBAR),
	SCROLLBAR_ARROW_RIGHT(4534, Folder.SCROLLBAR),
	SCROLLBAR_HORIZONTAL_THUMB_LEFT(4537, Folder.SCROLLBAR),
	SCROLLBAR_HORIZONTAL_THUMB_MIDDLE(4536, Folder.SCROLLBAR),
	SCROLLBAR_HORIZONTAL_THUMB_RIGHT(4535, Folder.SCROLLBAR),
	SCROLLBAR_HORIZONTAL_THUMB_MIDDLE_DARK(4538, Folder.SCROLLBAR),

	JEWELLERY_ENCHANT_BACK_ARROW(5592, Folder.OTHER),
	JEWELLERY_ENCHANT_BACK_ARROW_RESIZED(5597, Folder.OTHER),

	NORMAL_SPELL_ENCHANT_JEWELLERY(366, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENCHANT_JEWELLERY_DISABLED(416, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CIVITAS_ILLA_FORTIS_TELEPORT(367, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CIVITAS_ILLA_FORTIS_TELEPORT_DISABLED(417, Folder.NORMAL_SPELL),

	NORMAL_SPELL_ENCHANT_JEWELLERY_RESIZED(1803, Folder.NORMAL_SPELL),
	NORMAL_SPELL_ENCHANT_JEWELLERY_DISABLED_RESIZED(1883, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CIVITAS_ILLA_FORTIS_TELEPORT_RESIZED(1804, Folder.NORMAL_SPELL),
	NORMAL_SPELL_CIVITAS_ILLA_FORTIS_TELEPORT_DISABLED_RESIZED(1884, Folder.NORMAL_SPELL),

	BONDS_POUCH_BOND(5253, Folder.BONDS_POUCH),
	BONDS_POUCH_NAME_CHANGE(5254, Folder.BONDS_POUCH),
	BONDS_POUCH_BOND_PASSCODE(5255, Folder.BONDS_POUCH),
	BONDS_POUCH_BANNER(5256, Folder.BONDS_POUCH),
	BONDS_POUCH_INVENTORY(5257, Folder.BONDS_POUCH),
	BONDS_POUCH_GOLD_POUCH(5258, Folder.BONDS_POUCH),
	BONDS_POUCH_VAULT(5259, Folder.BONDS_POUCH),
	BONDS_POUCH_ARROW_RIGHT(5260, Folder.BONDS_POUCH),
	BONDS_POUCH_ARROW_LEFT(5261, Folder.BONDS_POUCH),
	BONDS_POUCH_ARROW_RIGHT_HOVERED(5262, Folder.BONDS_POUCH),
	BONDS_POUCH_ARROW_LEFT_HOVERED(5263, Folder.BONDS_POUCH),
	;

	@Getter
	private final int spriteID;
	private final int frameID;
	@Getter
	private final Folder folder;
	@Getter
	private static final ImmutableSetMultimap<Folder, SpriteOverride> overrides;

	static
	{
		ImmutableSetMultimap.Builder<Folder, SpriteOverride> builder = new ImmutableSetMultimap.Builder<>();
		for (SpriteOverride spriteOverride : values())
		{
			builder.put(spriteOverride.getFolder(), spriteOverride);
		}
		overrides = builder.build();
	}

	SpriteOverride(int spriteID, Folder folder)
	{
		this(spriteID, -1, folder);
	}


	enum Folder
	{
		BUTTON,
		CHATBOX,
		FIXED_MODE,
		RESIZEABLE_MODE,
		SCROLLBAR,
		SKILL,
		TAB,
		OTHER,
		BANK,
		DIALOG,
		EQUIPMENT,
		STATS,
		OPTIONS,
		GE,
		WELCOME_SCREEN,
		ADVANCED_OPTIONS,
		ACCOUNT_MANAGEMENT,
		QUESTS_TAB,
		CLANS_TAB,
		COMBAT,
		LOGIN_SCREEN,
		ANCIENT_SPELL,
		ARCEUUS_SPELL,
		LUNAR_SPELL,
		NORMAL_SPELL,
		PRAYER,
		EMOTE,
		IMPLING,
		CROSS_SPRITES,
		COMBAT_ACHIEVEMENTS,
		HITSPLAT,
		BONDS_POUCH,
	}
}
package melky.resourcepacks;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.annotations.Component;

@Getter
@RequiredArgsConstructor
public enum WidgetResize
{
	;

	@Component
	private final int component;
	private final Integer modifiedX;
	private final Integer modifiedY;
	private final Integer originalX;
	private final Integer originalY;
	private final Integer modifiedWidth;
	private final Integer modifiedHeight;
	private final Integer originalWidth;
	private final Integer originalHeight;
}

package melky.resourcepacks;

import com.google.common.base.Strings;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.io.MoreFiles;
import com.google.common.io.RecursiveDeleteOption;
import com.google.gson.stream.JsonReader;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Function;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import melky.resourcepacks.ConfigKeys.InterfaceStyles;
import melky.resourcepacks.ConfigKeys.Plugins;
import melky.resourcepacks.ResourcePacksConfig.ResourcePack;
import static melky.resourcepacks.ResourcePacksPlugin.GITHUB;
import static melky.resourcepacks.ResourcePacksPlugin.OVERLAY_COLOR_CONFIG;
import melky.resourcepacks.event.ResourcePacksChanged;
import melky.resourcepacks.hub.ResourcePackManifest;
import melky.resourcepacks.hub.ResourcePacksClient;
import melky.resourcepacks.overrides.Overrides;
import melky.resourcepacks.overrides.WidgetOverride;
import net.runelite.api.Client;
import net.runelite.api.SpriteID;
import net.runelite.api.SpritePixels;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import net.runelite.http.api.RuneLiteAPI;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Singleton
@Slf4j
public class ResourcePacksManager
{
	final List<SpritePixels> clientCrossSprites = new ArrayList<>();
	private boolean rsCrossSprites;

	@Inject
	private Client client;

	@Inject
	private ResourcePacksConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private SpriteManager spriteManager;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private ResourcePacksClient resourcePacksClient;

	@Inject
	private ClientThread clientThread;

	@Inject
	private EventBus eventBus;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private Overrides overrides;

	public void touchFolder()
	{
		var currentFolder = getLocalPath().toFile();
		if (!currentFolder.exists())
		{
			currentFolder.mkdirs();
		}
	}

	public void refreshPlugins()
	{
		HashMap<String, ResourcePackManifest> loadedPacks = new HashMap<>();
		File[] resourcePackDirectories = getLocalPath().toFile().listFiles();
		if (resourcePackDirectories != null)
		{
			for (File resourcePackDirectory : resourcePackDirectories)
			{
				if (resourcePackDirectory.isDirectory())
				{
					try
					{
						ResourcePackManifest man = getResourcePackManifest(resourcePackDirectory);
						if (man != null)
						{
							loadedPacks.put(man.getInternalName(), man);
						}
					}
					catch (IOException ignored)
					{
					}
				}
			}
		}

		List<String> installedIDs = getInstalledResourcePacks();
		if (installedIDs.isEmpty() && loadedPacks.isEmpty())
		{
			return;
		}

		Set<ResourcePackManifest> resourcePacks = new HashSet<>();
		List<ResourcePackManifest> manifestList;
		try
		{
			manifestList = resourcePacksClient.downloadManifest();
			Map<String, ResourcePackManifest> manifests = manifestList
				.stream().collect(ImmutableMap.toImmutableMap(ResourcePackManifest::getInternalName, Function.identity()));

			Set<ResourcePackManifest> needsDownload = new HashSet<>();
			Set<File> keep = new HashSet<>();
			assert resourcePackDirectories != null;
			List<File> resourcePackDirectoryList = Arrays.asList(resourcePackDirectories);

			// Check for changed commits and packs that need to be downloaded
			for (String name : installedIDs)
			{
				ResourcePackManifest manifest = manifests.get(name);
				if (manifest != null)
				{
					resourcePacks.add(manifest);
					ResourcePackManifest loadedResourcePack = loadedPacks.get(manifest.getInternalName());
					File resourcePackDirectory = getLocalPath(manifest.getInternalName()).toFile();
					if (loadedResourcePack == null || !loadedResourcePack.equals(manifest))
					{
						needsDownload.add(manifest);
					}
					else if (loadedResourcePack.getCommit().equals(manifest.getCommit()) && resourcePackDirectoryList.contains(resourcePackDirectory))
					{
						keep.add(resourcePackDirectory);
					}
				}
			}

			// delete old packs
			for (File fi : resourcePackDirectoryList)
			{
				if (!keep.contains(fi))
				{
					MoreFiles.deleteRecursively(fi.toPath(), RecursiveDeleteOption.ALLOW_INSECURE);
				}
			}

			// Download packs that need updates/install
			for (ResourcePackManifest manifest : needsDownload)
			{
				HttpUrl url = GITHUB.newBuilder()
					.addPathSegment("archive")
					.addPathSegment(manifest.getCommit() + ".zip")
					.build();

				try (Response res = okHttpClient.newCall(new Request.Builder().url(url).build()).execute())
				{
					BufferedInputStream is = new BufferedInputStream(res.body().byteStream());
					ZipInputStream zipInputStream = new ZipInputStream(is);
					ZipEntry entry;
					while ((entry = zipInputStream.getNextEntry()) != null)
					{
						var filePath = getLocalPath(entry.getName().replaceAll("resource-packs-" + manifest.getCommit(), manifest.getInternalName()));
						if (!entry.isDirectory())
						{
							// if the entry is a file, extracts it
							BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath + ""));
							byte[] bytesIn = new byte[2048];
							int read;
							while ((read = zipInputStream.read(bytesIn)) != -1)
							{
								bos.write(bytesIn, 0, read);
							}
							bos.close();
						}
						else
						{
							// if the entry is a directory, make the directory
							File dir = filePath.toFile();
							dir.mkdir();
						}
					}
					zipInputStream.close();
					is.close();

					File manifestFile = getLocalPath(manifest.getInternalName(), "manifest.js").toFile();
					FileWriter manifestWriter = new FileWriter(manifestFile);
					RuneLiteAPI.GSON.toJson(manifest, manifestWriter);
					manifestWriter.close();
					// In case of total resource folder nuke
					if (config.selectedHubPack().equals(manifest.getInternalName()))
					{
						clientThread.invokeLater(this::updateAllOverrides);
					}
				}
				catch (IOException e)
				{
					resourcePacks.remove(manifest);
					log.error("Unable to download resource pack \"{}\"", manifest.getInternalName(), e);
				}
			}
		}
		catch (IOException e)
		{
			log.error("Unable to download resource packs", e);
			return;
		}
		for (ResourcePackManifest ex : resourcePacks)
		{
			loadedPacks.remove(ex.getInternalName());
		}

		// list of installed packs that aren't in the manifest
		Collection<ResourcePackManifest> remove = loadedPacks.values();
		for (ResourcePackManifest rem : remove)
		{
			log.info("Removing pack \"{}\"", rem.getInternalName());
			Set<String> packs = new HashSet<>(getInstalledResourcePacks());
			if (packs.remove(rem.getInternalName()))
			{
				config.selectedHubPack(Text.toCSV(packs));
			}
		}

		eventBus.post(new ResourcePacksChanged(manifestList));
	}

	private ResourcePackManifest getResourcePackManifest(File resourcePackDirectory) throws IOException
	{
		File manifest = Path.of(resourcePackDirectory.getPath(), "manifest.js").toFile();
		JsonReader reader = new JsonReader(new FileReader(manifest));
		ResourcePackManifest packManifest = RuneLiteAPI.GSON.fromJson(reader, ResourcePackManifest.class);
		reader.close();
		return packManifest;
	}

	public HashMultimap<String, ResourcePackManifest> getCurrentManifests() throws IOException
	{
		HashMultimap<String, ResourcePackManifest> currentManifests = HashMultimap.create();
		File[] directories = getLocalPath().toFile().listFiles();
		if (directories != null)
		{
			for (File resourcePackDirectory : directories)
			{
				if (!resourcePackDirectory.isDirectory())
				{
					continue;
				}
				ResourcePackManifest resourcePackManifest = getResourcePackManifest(resourcePackDirectory);
				currentManifests.put(resourcePackManifest.getInternalName(), resourcePackManifest);
			}
		}
		return currentManifests;
	}

	public void setSelectedHubPack(String internalName)
	{
		if (!internalName.equals("None"))
		{
			config.resourcePack(ResourcePack.HUB);
			config.selectedHubPack(internalName);
			clientThread.invokeLater(this::updateAllOverrides);
		}
		else
		{
			config.selectedHubPack("");
			clientThread.invokeLater(() ->
			{
				adjustWidgetDimensions(false);
				resetWidgetOverrides();
				resetLoginScreen();
				removeGameframe();
				resetCrossSprites();
				resetOverlayColor();
			});
		}
	}

	public List<String> getInstalledResourcePacks()
	{
		String resourcePacksString = config.hubPacks();
		return Text.fromCSV(resourcePacksString == null ? "" : resourcePacksString);
	}

	public void install(String internalName)
	{
		Set<String> packs = new HashSet<>(getInstalledResourcePacks());
		if (packs.add(internalName))
		{
			log.debug("Installing: {}", internalName);
			config.hubPacks(Text.toCSV(packs));
			config.resourcePack(ResourcePack.HUB);

			executor.submit(() ->
			{
				refreshPlugins();
				setSelectedHubPack(internalName);
			});
		}
	}

	public void remove(String internalName)
	{
		Set<String> packs = new HashSet<>(getInstalledResourcePacks());
		if (packs.remove(internalName))
		{
			log.debug("Removing: {}", internalName);
			config.hubPacks(Text.toCSV(packs));
			if (config.selectedHubPack() != null && config.selectedHubPack().equals(internalName))
			{
				setSelectedHubPack("None");
			}
			executor.submit(this::refreshPlugins);
		}
	}

	void updateAllOverrides()
	{
		if (!checkIfResourcePackPathIsNotEmpty())
		{
			return;
		}

		log.debug("updating all overrides");

		removeGameframe();
		overrideSprites();
		reloadWidgetOverrides();

		applyWidgetOverrides();
		adjustWidgetDimensions(false);
		adjustWidgetDimensions(true);

		saveClientSprites();
		resetCrossSprites();
		changeCrossSprites();
	}

	void removeGameframe()
	{
		restoreSprites();

		BufferedImage compassImage = spriteManager.getSprite(SpriteID.COMPASS_TEXTURE, 0);

		if (compassImage != null)
		{
			SpritePixels compass = ImageUtil.getImageSpritePixels(compassImage, client);
			client.setCompass(compass);
		}
	}

	void adjustWidgetDimensions(boolean modify)
	{
		for (WidgetResize widgetResize : WidgetResize.values())
		{
			Widget widget = client.getWidget(widgetResize.getComponent());

			if (widget != null)
			{
				if (widgetResize.getOriginalX() != null)
				{
					widget.setOriginalX(modify ? widgetResize.getModifiedX() : widgetResize.getOriginalX());
				}

				if (widgetResize.getOriginalY() != null)
				{
					widget.setOriginalY(modify ? widgetResize.getModifiedY() : widgetResize.getOriginalY());
				}

				if (widgetResize.getOriginalWidth() != null)
				{
					widget.setOriginalWidth(modify ? widgetResize.getModifiedWidth() : widgetResize.getOriginalWidth());
				}

				if (widgetResize.getOriginalHeight() != null)
				{
					widget.setOriginalHeight(modify ? widgetResize.getModifiedHeight() : widgetResize.getOriginalHeight());
				}

				widget.revalidate();
			}
		}
	}

	public void saveClientSprites()
	{
		boolean interfaceStylesEnabled = configManager.getConfiguration(RuneLiteConfig.GROUP_NAME, Plugins.interfacestylesplugin, Boolean.class);
		boolean isRs3 = configManager.getConfiguration(InterfaceStyles.GROUP_NAME, InterfaceStyles.rsCrossSprites, Boolean.class);
		isRs3 &= interfaceStylesEnabled;
		if (!clientCrossSprites.isEmpty() && rsCrossSprites == isRs3)
		{
			return;
		}

		clientCrossSprites.clear();
		rsCrossSprites = isRs3;

		String path = "/cross_sprites/" + (rsCrossSprites ? "rs3" : "osrs") + "/";

		SpritePixels[] crossSprites = client.getCrossSprites();
		if (crossSprites == null)
		{
			return;
		}

		int frames = crossSprites.length;
		for (int i = 0; i < frames; i++)
		{
			SpritePixels newSprite = loadResourceSprite(path + i + ".png");
			if (newSprite == null)
			{
				continue;
			}

			clientCrossSprites.add(newSprite);
		}
	}

	void restoreSprites()
	{
		client.getWidgetSpriteCache().reset();

		for (SpriteOverride spriteOverride : SpriteOverride.values())
		{
			if (spriteOverride.equals(SpriteOverride.LOGIN_SCREEN_BACKGROUND))
			{
				continue;
			}
			client.getSpriteOverrides().remove(spriteOverride.getSpriteID());
		}
		for (TabSprites tabSprite : TabSprites.values())
		{
			BufferedImage image = ImageUtil.loadImageResource(getClass(), tabSprite.getFileName());
			SpritePixels sp = ImageUtil.getImageSpritePixels(image, client);
			client.getSpriteOverrides().put(tabSprite.getSpriteId(), sp);
		}
	}

	public String getCurrentPackPath()
	{
		String path;
		switch (config.resourcePack())
		{
			case SECOND:
				path = config.resourcePack2Path();
				break;
			case THIRD:
				path = config.resourcePack3Path();
				break;
			case HUB:
				path = getLocalPath(config.selectedHubPack()) + "";
				break;
			case FIRST:
			default:
				path = config.resourcePackPath();
				break;
		}
		return path;
	}

	public boolean checkIfResourcePackPathIsNotEmpty()
	{
		switch (config.resourcePack())
		{
			case FIRST:
				if (config.resourcePackPath().isEmpty())
				{
					return false;
				}
				break;
			case SECOND:
				if (config.resourcePack2Path().isEmpty())
				{
					return false;
				}
				break;
			case HUB:
				if (config.selectedHubPack().isEmpty())
				{
					return false;
				}
				break;
			case THIRD:
				if (config.resourcePack3Path().isEmpty())
				{
					return false;
				}
				break;
		}
		return true;
	}

	public SpritePixels loadResourceSprite(String path)
	{
		try
		{
			BufferedImage image = ImageUtil.loadImageResource(ResourcePacksManager.class, path);
			return ImageUtil.getImageSpritePixels(image, client);
		}
		catch (RuntimeException e)
		{
			log.debug("Unable to find resource ({}): ", path);
		}

		return null;
	}

	public SpritePixels getSpritePixels(SpriteOverride spriteOverride, String currentPackPath)
	{
		String folder = spriteOverride.getFolder().name().toLowerCase();
		String name = spriteOverride.name().toLowerCase();
		if (!folder.equals("other"))
		{
			name = name.replaceFirst(folder + "_", "");
		}

		File spriteFile = Path.of(currentPackPath, folder, name + ".png").toFile();
		if (!spriteFile.exists())
		{
//			log.debug("Sprite doesn't exist ({}): ", spriteFile.getPath());
			return null;
		}
		try
		{
			BufferedImage image = ImageIO.read(spriteFile);
			if (config.allowColorPack() && config.colorPack() != null)
			{
				image = dye(image, config.colorPack());
			}
			return ImageUtil.getImageSpritePixels(image, client);
		}
		catch (RuntimeException | IOException ex)
		{
			log.debug("Unable to find image ({}): ", spriteFile.getPath());
		}
		return null;
	}

	void overrideSprites()
	{
		String currentPackPath = getCurrentPackPath();
		SpriteOverride.getOverrides().asMap().forEach((key, collection) ->
		{
			if (!Files.isDirectory(Paths.get(currentPackPath + File.separator + key.name().toLowerCase())) ||
				(!config.allowSpellsPrayers() && (key.name().contains("SPELL") || key.equals(SpriteOverride.Folder.PRAYER))) ||
				key == SpriteOverride.Folder.CROSS_SPRITES)
			{
				return;
			}

			for (SpriteOverride spriteOverride : collection)
			{

				SpritePixels spritePixels = getSpritePixels(spriteOverride, currentPackPath);
				if (config.allowLoginScreen() && spriteOverride == SpriteOverride.LOGIN_SCREEN_BACKGROUND)
				{
					if (spritePixels != null)
					{
						client.setLoginScreen(spritePixels);
					}
					else
					{
						resetLoginScreen();
					}
				}
				if (spritePixels == null)
				{
					continue;
				}

				if (spriteOverride.getSpriteID() == SpriteID.COMPASS_TEXTURE)
				{
					client.setCompass(spritePixels);
				}
				else
				{
					if (spriteOverride.getSpriteID() < -200)
					{
						client.getSpriteOverrides().remove(spriteOverride.getSpriteID());
					}
					client.getSpriteOverrides().put(spriteOverride.getSpriteID(), spritePixels);
				}
			}
		});
	}

	void reloadBankTagSprites()
	{
		String currentPackPath = getCurrentPackPath();
		SpriteOverride.getOverrides().asMap().forEach((key, collection) ->
		{
			if (!Files.isDirectory(Paths.get(currentPackPath + File.separator + key.name().toLowerCase())))
			{
				return;
			}
			for (SpriteOverride spriteOverride : collection)
			{
				if (spriteOverride.getSpriteID() < -200)
				{
					SpritePixels spritePixels = getSpritePixels(spriteOverride, currentPackPath);
					client.getSpriteOverrides().remove(spriteOverride.getSpriteID());
					client.getSpriteOverrides().put(spriteOverride.getSpriteID(), spritePixels);
				}
			}
		});
	}

	void resetLoginScreen()
	{
		ConfigChanged loginScreenConfigChanged = new ConfigChanged();
		loginScreenConfigChanged.setGroup(ConfigKeys.LoginScreen.GROUP_NAME);
		loginScreenConfigChanged.setKey("doesn't matter");
		loginScreenConfigChanged.setOldValue(null);
		loginScreenConfigChanged.setNewValue("");
		eventBus.post(loginScreenConfigChanged);
	}

	void resetInterfaceStyles()
	{
		ConfigChanged loginScreenConfigChanged = new ConfigChanged();
		loginScreenConfigChanged.setGroup(InterfaceStyles.GROUP_NAME);
		loginScreenConfigChanged.setKey("doesn't matter");
		loginScreenConfigChanged.setOldValue(null);
		loginScreenConfigChanged.setNewValue("");
		eventBus.post(loginScreenConfigChanged);
	}

	void reloadWidgetOverrides()
	{
		try
		{
			File overridesFile = Path.of(getCurrentPackPath(), "overrides.toml").toFile();
			if (overridesFile.exists())
			{
				var data = com.google.common.io.Files.asCharSource(overridesFile, Charset.defaultCharset()).read();
				overrides.buildOverrides(data);
			}
			else
			{
				log.debug("overrides.toml not found, trying color.properties");
				var backwardsMap = new Properties();
				var properties = new Properties();

				File propertiesFile = Path.of(getCurrentPackPath(), "color.properties").toFile();
				try (var is = new FileInputStream(propertiesFile); var is2 = ResourcePacksManager.class.getResourceAsStream("/overrides/backwards-map.properties"))
				{
					properties.load(is);
					backwardsMap.load(is2);
				}

				var lines = new ArrayList<String>();
				for (var entry : backwardsMap.entrySet())
				{
					if (properties.containsKey(entry.getValue()))
					{
						lines.add("[" + entry.getKey() + "]");
						lines.add("color=" + properties.get(entry.getValue()));
					}
				}

				log.debug("built {}", String.join("\n", lines));
				overrides.buildOverrides(String.join("\n", lines));
			}
		}
		catch (IOException e)
		{
			log.debug("error loading color overrides", e);


			overrides.buildOverrides("");
			resetOverlayColor();

			return;
		}

		if (config.allowOverlayColor())
		{
			changeOverlayColor();
		}
	}

	void changeOverlayColor()
	{
		if (Strings.isNullOrEmpty(config.originalOverlayColor()))
		{
			config.originalOverlayColor(configManager.getConfiguration(RuneLiteConfig.GROUP_NAME, OVERLAY_COLOR_CONFIG));
		}

		ResourcePacksPlugin.setIgnoreOverlayConfig(true);
		Color overlayColor = overrides.getOverlayColor();
		if (config.allowColorPack() && config.colorPack() != null && config.colorPack().getAlpha() != 0 && config.colorPackOverlay())
		{
			overlayColor = config.colorPack();
		}

		configManager.setConfiguration(RuneLiteConfig.GROUP_NAME, OVERLAY_COLOR_CONFIG, overlayColor);
		ResourcePacksPlugin.setIgnoreOverlayConfig(false);
	}

	void resetOverlayColor()
	{
		if (!Strings.isNullOrEmpty(config.originalOverlayColor()))
		{
			configManager.setConfiguration(RuneLiteConfig.GROUP_NAME, OVERLAY_COLOR_CONFIG, config.originalOverlayColor());
			configManager.unsetConfiguration(ResourcePacksConfig.GROUP_NAME, ResourcePacksConfig.ORIGINAL_OVERLAY_COLOR);
		}
	}

	void changeCrossSprites()
	{
		if (!config.allowCrossSprites())
		{
			return;
		}

		SpritePixels[] crossSprites = client.getCrossSprites();
		if (crossSprites == null)
		{
			return;
		}

		String currentPackPath = getCurrentPackPath();
		SpriteOverride.getOverrides().asMap().forEach((key, collection) ->
		{
			if (key != SpriteOverride.Folder.CROSS_SPRITES || !Files.isDirectory(Paths.get(currentPackPath + File.separator + key.name().toLowerCase())))
			{
				return;
			}

			for (SpriteOverride spriteOverride : collection)
			{
				SpritePixels spritePixels = getSpritePixels(spriteOverride, currentPackPath);
				if (spritePixels == null)
				{
					continue;
				}
				crossSprites[spriteOverride.getFrameID()] = spritePixels;
			}
		});
	}

	void resetCrossSprites()
	{
		SpritePixels[] crossSprites = client.getCrossSprites();

		if (crossSprites != null && clientCrossSprites.size() == crossSprites.length)
		{
			System.arraycopy(clientCrossSprites.toArray(new SpritePixels[0]), 0, crossSprites, 0, crossSprites.length);
		}
	}

	private BufferedImage dye(BufferedImage image, Color color)
	{
		int w = image.getWidth();
		int h = image.getHeight();
		BufferedImage dyed = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g = dyed.createGraphics();
		g.drawImage(image, 0, 0, null);
		g.setComposite(AlphaComposite.SrcAtop);
		g.setColor(color);
		g.fillRect(0, 0, w, h);
		g.dispose();
		return dyed;
	}

	private void applyWidgetOverrides()
	{
		if (overrides.isEmpty())
		{
			return;
		}

		for (WidgetOverride widgetOverride : overrides.values())
		{
			addPropertyToWidget(widgetOverride, false);
		}
	}

	public void resetWidgetOverrides()
	{
		log.debug("resetting widget overrides");

		for (WidgetOverride widgetOverride : overrides.values())
		{
			addPropertyToWidget(widgetOverride, true);
		}

		overrides.clear();
	}

	public void addPropertyToWidget(WidgetOverride widgetOverride, boolean reset)
	{
		Widget widgetToOverride = client.getWidget(widgetOverride.getInterfaceId(), widgetOverride.getChildId());
		if (widgetToOverride == null)
		{
			return;
		}

		if (!widgetOverride.getDynamicChildren().isEmpty())
		{
			for (var arrayId : widgetOverride.getDynamicChildren())
			{
				Widget arrayWidget = widgetToOverride.getChild(arrayId);
				if (arrayWidget == null)
				{
					continue;
				}

				applyWidgetProperties(arrayWidget, widgetOverride, reset);
			}
		}
		else if (widgetOverride.isAllChildren())
		{
			for (var widget : widgetToOverride.getDynamicChildren())
			{
				if (widget == null)
				{
					continue;
				}

				applyWidgetProperties(widget, widgetOverride, reset);
			}
		}
		else
		{
			applyWidgetProperties(widgetToOverride, widgetOverride, reset);
		}
	}

	private void applyWidgetProperties(Widget widget, WidgetOverride widgetOverride, boolean reset)
	{
		if (widget == null || widget.getTextColor() == -1)
		{
			return;
		}

		int oldColor = widgetOverride.getColor();
		int newColor = widgetOverride.getNewColor();

		if (reset)
		{
			widget.setTextColor(oldColor);

			if (widget.getType() == widgetOverride.getNewType())
			{
				widget.setType(widgetOverride.getType());
			}

			if (widgetOverride.getOpacity() > -1)
			{
				widget.setOpacity(widgetOverride.getOpacity());
			}

			return;
		}

		if (widget.getTextColor() == newColor ||
			!widgetOverride.checkVarbit(client) ||
			typeCompare(widgetOverride, widget) ||
			explicitCompare(widgetOverride, widget))
		{
			return;
		}

		if (widgetOverride.isActiveWidget())
		{
			var w = client.getScriptActiveWidget();
			if (w == null || w.getId() != widget.getId() || w.getTextColor() != widgetOverride.getColor())
			{
				return;
			}

			widget = w;
		}

		widget.setTextColor(widgetOverride.getNewColor());

		if (widgetOverride.getNewOpacity() > -1)
		{
			widget.setOpacity(widgetOverride.getNewOpacity());
		}

		if (widgetOverride.getNewType() > -1)
		{
			log.debug("{} overriding widget type {} to {}", widget.getId(), widget.getType(), widgetOverride.getNewType());
			widget.setType(widgetOverride.getNewType());
			if (widgetOverride.getNewType() == 3)
			{
				widget.setFilled(true);
			}
		}
	}

	private static boolean typeCompare(WidgetOverride widgetOverride, Widget widget)
	{
		return widgetOverride.getType() > -1 && (widget.getType() != widgetOverride.getType() && widgetOverride.getNewType() != widget.getType());
	}

	private static boolean explicitCompare(WidgetOverride widgetOverride, Widget widget)
	{
		return widgetOverride.isExplicit() &&
			(widget.getTextColor() != widgetOverride.getColor() ||
				(widgetOverride.getType() > -1 && widget.getType() != widgetOverride.getType())
			);
	}

	public Path getLocalPath(String... path)
	{
		var p = Path.of(ResourcePacksPlugin.PACKS_BASE_DIR + "", configManager.getProfile().getId() + "");
		return Path.of(p + "", path);
	}
}

package melky.resourcepacks.event;

import java.util.List;
import lombok.Value;
import melky.resourcepacks.hub.ResourcePackManifest;

@Value
public class ResourcePacksChanged
{
	List<ResourcePackManifest> newManifest;
}

/*
 * Copyright (c) 2025, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks.overrides;

import com.google.common.base.Charsets;
import com.google.common.base.Strings;
import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import com.google.common.io.Files;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.tomlj.Toml;
import org.tomlj.TomlArray;
import org.tomlj.TomlParseResult;
import org.tomlj.TomlTable;

@Slf4j
public class SampleGenerator
{
	public void addKeys(final TomlTable table, Collection<String> keys, Multimap<String, String> values, String path)
	{
		for (var k : keys)
		{
			var s = k.replaceAll("\\.?color|\\.?opacity", "");
			if (k.endsWith("color"))
			{
				values.put(path + s, String.format("# color=0x%06x", new Color(table.getLong(k).intValue()).getRGB() & 16777215));
			}
			else if (k.endsWith("opacity"))
			{
				values.put(path + s, String.format("# opacity=%d", table.getLong(k).intValue()));
			}
		}
	}

	@Test
	public void createSample()
	{
		try (var stream = Overrides.class.getResourceAsStream("/overrides/overrides.toml"))
		{
			assert stream != null;

			TomlParseResult toml = Toml.parse(stream);
			toml.errors().forEach(error -> log.error(error.toString()));

			var keys = toml.dottedKeySet()
				.stream()
				.filter(k -> k.contains("color") || k.contains("opacity"))
				.sorted()
				.collect(Collectors.toList());

			var lists = toml.dottedKeySet()
				.stream()
				.filter(k -> !(k.contains("scripts") || k.contains("dynamicChildren") || k.contains("children")) && toml.isArray(k))
				.sorted()
				.collect(Collectors.toList());

			var sb = new StringBuilder();
			sb.append("# remove comments (#) on lines to see changes affected\n")
				.append("# overlay color is in ARGB hex format\n")
				.append("# [overlay]\n")
				.append("# color=0x9C463D32\n");

			Multimap<String, String> tables = TreeMultimap.create();
			addKeys(toml, keys, tables, "");

			for (var l : lists)
			{
				TomlArray a = toml.getArray(l);
				assert a != null;

				for (var o : a.toList())
				{
					if (o instanceof TomlTable)
					{
						var t = (TomlTable) o;
						addKeys(t, t.keySet(), tables, l);
					}
				}
			}

			for (var k : tables.keySet())
			{
				sb.append(String.format("\n# [%s]\n", k));
				sb.append(String.join("\n", tables.get(k)));
				sb.append("\n");
			}

			log.info("{}", sb + "");

			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
			var selection = new StringSelection((sb + ""));
			clipboard.setContents(selection, null);

			if (!Strings.isNullOrEmpty(System.getProperty("sampleOutput")))
			{
				File file = new File(System.getProperty("sampleOutput"));
				Files.write(sb + "", file, Charsets.UTF_8);
			}
		}
		catch (IOException e)
		{
			log.error("error loading overrides", e);
		}
	}

	@Test
	public void createSampleMinified()
	{
		try (var stream = Overrides.class.getResourceAsStream("/overrides/overrides.toml"))
		{
			assert stream != null;

			TomlParseResult toml = Toml.parse(stream);
			toml.errors().forEach(error -> log.error(error.toString()));

			var keys = toml.dottedKeySet()
				.stream()
				.filter(k -> k.contains("color") || k.contains("opacity"))
				.sorted()
				.collect(Collectors.toList());

			var lists = toml.dottedKeySet()
				.stream()
				.filter(k -> !(k.contains("scripts") || k.contains("dynamicChildren") || k.contains("children")) && toml.isArray(k))
				.sorted()
				.collect(Collectors.toList());

			var sb = new StringBuilder();
			sb.append("# remove comments (#) on lines to see changes affected\n")
				.append("# overlay color is in ARGB hex format\n")
				.append("# overlay.color=0x9C463D32\n\n");

			Multimap<String, String> tables = TreeMultimap.create();
			addKeys(toml, keys, tables, "");

			for (var l : lists)
			{
				TomlArray a = toml.getArray(l);
				assert a != null;

				for (var o : a.toList())
				{
					if (o instanceof TomlTable)
					{
						var t = (TomlTable) o;
						addKeys(t, t.keySet(), tables, l);
					}
				}
			}

			for (var k : tables.keySet())
			{
				sb.append(tables.get(k)
					.stream()
					.map(s -> String.format("# %s.%s", k, s.replace("# ", "")))
					.collect(Collectors.joining("\n")));
				sb.append("\n\n");
			}

			log.info("{}", sb + "");

			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
			var selection = new StringSelection((sb + ""));
			clipboard.setContents(selection, null);

			if (!Strings.isNullOrEmpty(System.getProperty("sampleMinifiedOutput")))
			{
				File file = new File(System.getProperty("sampleMinifiedOutput"));
				Files.write(sb + "", file, Charsets.UTF_8);
			}
		}
		catch (IOException e)
		{
			log.error("error loading overrides", e);
		}
	}

}

/*
 * Copyright (c) 2024, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks.overrides;

import com.google.common.io.Resources;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import org.junit.BeforeClass;
import org.junit.Test;

@Slf4j
public class OverridesTest
{

	@Test
	public void parentColor() throws IOException
	{
		Overrides defaultValues = new Overrides("/overrides/sources/base.toml").buildOverrides("");
		Overrides overrides = new Overrides("/overrides/sources/base.toml");

		String text = Resources.toString(Resources.getResource("overrides/tests/parent-color.toml"), StandardCharsets.UTF_8);
		overrides.buildOverrides(text);

		var list = overrides.get(1);
		var defaultList = defaultValues.get(1);

		assertFalse("override list is empty", list.isEmpty());
		assertFalse("default list is empty", defaultList.isEmpty());


		var fillers = list.stream().filter(w -> w.getChildId() == 59).collect(Collectors.toList());
		var defaultFillers = defaultList.stream().filter(w -> w.getChildId() == 59).collect(Collectors.toList());

		assertEquals(2, fillers.size());
		assertEquals(2, defaultFillers.size());

		assertNotEquals(fillers.get(0), defaultFillers.get(0));
		assertNotEquals(fillers.get(1), defaultFillers.get(1));

		assertEquals(0x9D6A76, fillers.get(0).getNewColor());
		assertEquals(0x643A4B, fillers.get(1).getNewColor());
	}

	@Test
	public void nestedColor() throws IOException
	{
		Overrides defaultValues = new Overrides("/overrides/sources/base.toml").buildOverrides("");
		Overrides overrides = new Overrides("/overrides/sources/base.toml");

		String text = Resources.toString(Resources.getResource("overrides/tests/nested-color.toml"), StandardCharsets.UTF_8);
		overrides.buildOverrides(text);

		var list = overrides.get(2);
		var defaultList = defaultValues.get(2);

		assertFalse("override list is empty", list.isEmpty());
		assertFalse("default list is empty", defaultList.isEmpty());


		var fillers = list.stream().filter(w -> w.getChildId() == 65).collect(Collectors.toList());
		var defaultFillers = defaultList.stream().filter(w -> w.getChildId() == 65).collect(Collectors.toList());

		assertEquals(2, fillers.size());
		assertEquals(2, defaultFillers.size());

		assertNotEquals(fillers.get(0), defaultFillers.get(0));
		assertNotEquals(fillers.get(1), defaultFillers.get(1));

		log.info("{}", fillers.get(0));

		assertEquals(0x643A4B, fillers.get(1).getNewColor());
		assertEquals(0x726451, fillers.get(1).getColor());

		assertEquals(0x9D6A76, fillers.get(0).getNewColor());
		assertEquals(0x2e2b23, fillers.get(0).getColor());
	}

	@Test
	public void allDynamicChildren() throws IOException
	{
		Overrides defaultValues = new Overrides("/overrides/sources/base.toml").buildOverrides("");
		Overrides overrides = new Overrides("/overrides/sources/base.toml");

		String text = Resources.toString(Resources.getResource("overrides/tests/all-children.toml"), StandardCharsets.UTF_8);
		overrides.buildOverrides(text);

		var list = overrides.get(123);
		var defaultList = defaultValues.get(123);

		assertFalse("override list is empty", list.isEmpty());
		assertFalse("default list is empty", defaultList.isEmpty());


		var fillers = list.stream().filter(w -> w.getChildId() == 2).collect(Collectors.toList());
		var defaultFillers = defaultList.stream().filter(w -> w.getChildId() == 2).collect(Collectors.toList());

		assertEquals(1, fillers.size());
		assertEquals(1, defaultFillers.size());

		assertNotEquals(fillers.get(0), defaultFillers.get(0));

		log.info("{}", fillers.get(0));

		assertEquals(true, fillers.get(0).isAllChildren());
		assertEquals(0, fillers.get(0).getDynamicChildren().size());
	}
}

/*
 * Copyright (c) 2024, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package melky.resourcepacks.overrides;

import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import org.junit.Before;
import org.junit.Test;
import org.tomlj.Toml;
import org.tomlj.TomlParseResult;

@Slf4j
public class InterfacesTest
{
	Overrides overrides;

	@Before
	public void beforeEach()
	{
		overrides = new Overrides();
	}

	@Test
	public void buildOverrides() throws IOException
	{
		testOverride("settings");
//		overrides.buildOverrides("");
//		var bank1 = overrides.get(274).get(0);
//
//		overrides.buildOverrides("[bank.separator]\ncolor=0xff0000");
//		var bank2 = overrides.get(274).get(0);
//
//		assertFalse(Objects.equals(bank1, bank2));
	}

	public void testOverride(String key)
	{
		overrides.clear();

		try (var stream = Overrides.class.getResourceAsStream("/overrides/overrides.toml"))
		{
			assert stream != null;

			TomlParseResult toml = Toml.parse(stream);
			toml.errors().forEach(error -> log.error(error.toString()));

			TomlParseResult pack = Toml.parse("");
			pack.errors().forEach(error -> log.error(error.toString()));

			var table = toml.getTableOrEmpty(key);
			overrides.walkChildren(new WidgetOverride().withName(key), table, pack);
		}
		catch (IOException e)
		{
			log.error("error loading overrides", e);
		}
	}
}

package melky.resourcepacks;

import com.google.common.base.Strings;
import com.google.common.io.Files;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;
import org.junit.AfterClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;


@Slf4j
public class ResourcePacksPluginTest
{
	private static final int EOF = -1;


	private static final List<String> errors = new ArrayList<>();
	private static final List<String> warnings = new ArrayList<>();

	@AfterClass
	public static void afterClass() throws IOException
	{
		String basePath = System.getProperty("user.dir");

		log.info("logging {}", errors);

		PrintWriter errorFile = new PrintWriter(basePath + '/' + "errors.txt", "UTF-8");
		errorFile.write(String.join("\n", errors));
		errorFile.close();

		log.info("logging {}", warnings);

		PrintWriter warningsFile = new PrintWriter(basePath + '/' + "warnings.txt", "UTF-8");
		warningsFile.write(String.join("\n", warnings));
		warningsFile.close();
	}

	@Rule
	public TestWatcher watcher = new TestWatcher()
	{

		@Override
		protected void failed(Throwable e, Description description)
		{
			if (e != null)
			{
				errors.add(e.getMessage());
			}
		}

		@Override
		protected void succeeded(Description description)
		{
		}
	};

	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ResourcePacksPlugin.class);
		RuneLite.main(args);
	}

	/**
	 * Allow you to build your own sample-vanilla pack (with some drawbacks)
	 * Sprite 990 is custom made (is janky when using a dumper), login screen is also not being moved and also runelite's tag tab sprites are not moved. These have to be manually added
	 * <p>
	 * spriteFolder needs sprites to be dumped using correct offsets/correct max dimensions otherwise most of the sprites will be not positioned correctly (can be downloaded from sprite-exporter repo)
	 * packFolder where to output the sample-vanilla pack to
	 *
	 * @throws IOException
	 */
	public void moveImages() throws IOException
	{
		String spriteFolder = System.getProperty("spriteFolder");
		String packFolder = System.getProperty("packFolder");
		if (Strings.isNullOrEmpty(spriteFolder) || Strings.isNullOrEmpty(packFolder))
		{
			throw new RuntimeException("inputFolder and outputFolder need to be defined");
		}

		for (SpriteOverride override : SpriteOverride.values())
		{
			// TODO:
			// Grab the tag tab images from rl repo and make an exception for login screen
			if (override.getSpriteID() < 0)
			{
				continue;
			}
			File folder = createOrRetrieve(packFolder + "/" + override.getFolder().toString().toLowerCase());
			File destinationSprite = new File(folder, override.toString().toLowerCase().replaceFirst(override.getFolder().toString().toLowerCase() + "_", "") + ".png");
			File sourceSprite;
			if (override.getFrameID() != -1)
			{
				sourceSprite = new File(spriteFolder + "/" + override.getSpriteID() + "-" + override.getFrameID() + ".png");
			}
			else
			{
				sourceSprite = new File(spriteFolder + "/" + override.getSpriteID() + "-0.png");
			}


			if (sourceSprite.exists() && !(destinationSprite.exists() && fileContentEquals(sourceSprite, destinationSprite)))
			{
				Files.copy(sourceSprite, destinationSprite);
				log.info("Updated sprite " + override.name() + " (" + override.getSpriteID() + ")");
			}
		}
		File outputFolderFile = new File(packFolder);
		loopDirectory(outputFolderFile.listFiles(), outputFolderFile.getName(), spriteFolder, true);
	}

	/**
	 * Allow you to check whether a pack does not contain files that should not be in there or sprites that are the same as vanilla
	 * <p>
	 * spriteFolder needs to be dumped using correct offsets/correct max dimensions for the vanilla comparison to work (can be downloaded from sprite-exporter repo)
	 * packFolder is the path to the pack you want to be testing against
	 *
	 * @throws IOException
	 */
	@Test
	public void checkUnneededFiles() throws IOException
	{
		String spriteFolder = System.getProperty("spriteFolder");
		String packFolder = System.getProperty("packFolder");
		if (Strings.isNullOrEmpty(spriteFolder) || Strings.isNullOrEmpty(packFolder))
		{
			throw new RuntimeException("spriteFolder and packFolder need to be defined");
		}

		File packFolderFile = new File(packFolder);
		var errorMessages = loopDirectory(packFolderFile.listFiles(), packFolderFile.getName(), spriteFolder, false);
		if (!errorMessages.isEmpty())
		{
			throw new IllegalArgumentException(String.join("\n", errorMessages));
		}
	}

	@Test
	public void checkPackProperties() throws IOException
	{
		String packFolder = System.getProperty("packFolder");
		if (Strings.isNullOrEmpty(packFolder))
		{
			throw new RuntimeException("spriteFolder and packFolder need to be defined");
		}

		File propertiesFile = new File(packFolder, "/pack.properties");
		if (!propertiesFile.exists())
		{
			throw new IllegalArgumentException("Pack does not contain a pack.properties file");
		}

		Properties properties = new Properties();
		properties.load(new FileInputStream(propertiesFile));

		List<String> errorMessages = new ArrayList<>();

		if (Strings.isNullOrEmpty(properties.getProperty("displayName")))
		{
			errorMessages.add("pack.properties does not contain a displayName property");
		}

		if (Strings.isNullOrEmpty(properties.getProperty("author")))
		{
			errorMessages.add("pack.properties does not contain a author property");
		}

		if (!properties.containsKey("tags"))
		{
			errorMessages.add("pack.properties does not contain a tags property");
		}

		if (!errorMessages.isEmpty())
		{
			throw new IllegalArgumentException(String.join("\n", errorMessages));
		}
	}

	private File createOrRetrieve(final String target) throws IOException
	{
		File outputDir = new File(target);
		if (!outputDir.exists())
		{
			outputDir.mkdirs();
		}

		return outputDir;
	}

	private boolean fileContentEquals(File file1, File file2) throws IOException
	{
		try (FileInputStream finput1 = new FileInputStream(file1);
			 FileInputStream finput2 = new FileInputStream(file2))
		{
			try (BufferedInputStream binput1 = new BufferedInputStream(finput1);
				 BufferedInputStream binput2 = new BufferedInputStream(finput2))
			{
				int b1 = binput1.read();
				while (EOF != b1)
				{
					int b2 = binput2.read();
					if (b1 != b2)
					{
						return false;
					}
					b1 = binput1.read();
				}
				return binput2.read() == EOF;
			}
		}
	}

	private List<String> loopDirectory(File[] directory, String dirName, String spriteDir, boolean delete) throws IOException
	{
		List<String> errorMessages = new ArrayList<String>();
		if (dirName.equals(".git"))
		{
			return errorMessages;
		}

		if (directory == null)
		{
			warn("\u001B[33mDirectory " + dirName + " is not needed as it is empty\u001B[0m");
			return errorMessages;
		}
		for (File file : directory)
		{
			if (file.isDirectory())
			{
				loopDirectory(file.listFiles(), file.getName(), spriteDir, delete);
			}
			else
			{
				if (file.getName().contains(".png") && !file.getName().equals("icon.png"))
				{
					try
					{
						SpriteOverride override;
						if (dirName.equalsIgnoreCase("other"))
						{
							override = SpriteOverride.valueOf(file.getName().replace(".png", "").toUpperCase());
						}
						else
						{
							override = SpriteOverride.valueOf(dirName.toUpperCase() + "_" + file.getName().replace(".png", "").toUpperCase());
						}

						if (override.getSpriteID() < 0)
						{
							continue;
						}

						File originalSprite;
						if (override.getFrameID() != -1)
						{
							originalSprite = new File(spriteDir + "/" + override.getSpriteID() + "-" + override.getFrameID() + ".png");
						}
						else
						{
							originalSprite = new File(spriteDir + "/" + override.getSpriteID() + "-0.png");
						}
						if (fileContentEquals(file, originalSprite) && !delete)
						{
							warn("\u001B[33mFile " + file.getName() + " (" + override.getSpriteID() + ") in folder " + dirName + " is the same as the vanilla sprite\u001B[0m");
						}
					}
					catch (IllegalArgumentException e)
					{
						if (delete)
						{
							file.delete();
						}
						else
						{
							warn("\u001B[33mFile " + file.getName() + " in folder " + dirName + " is redundant\u001B[0m");
						}
					}
				}
				else if (!file.getName().contains(".properties") && !file.getName().contains(".toml") && !file.getName().contains(".md") && !file.getName().equals("icon.png"))
				{
					errorMessages.add("\u001B[31mFound a file " + file.getName() + " in folder " + dirName + " that is not a sprite, icon, properties or markdown file\u001B[0m");
				}
			}
		}
		return errorMessages;
	}

	private void warn(String msg)
	{
		log.warn(msg);
		warnings.add(msg);
	}
}
