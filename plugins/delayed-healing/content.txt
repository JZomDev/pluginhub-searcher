package com.github.dappermickie.delayed.healing;

import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

public class DelayedHealingInfoBox extends InfoBox
{
	private final int tickDelay;
	private int ticksPast;

	@Inject
	public DelayedHealingInfoBox(BufferedImage image, Plugin plugin, int tickDelay)
	{
		super(image, plugin);
		this.tickDelay = tickDelay;
		this.ticksPast = 0;
	}

	@Override
	public String getText()
	{
		return String.valueOf(ticksLeft());
	}

	@Override
	public Color getTextColor()
	{
		return Color.WHITE;
	}

	public void tickTimer()
	{
		ticksPast++;
	}

	public int ticksLeft()
	{
		return tickDelay - ticksPast;
	}
}
package com.github.dappermickie.delayed.healing;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.gameval.*;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Delayed Healing"
)
public class DelayedHealingPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private DelayedHealingConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private DelayedHealingOverlay delayedHealingOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ItemManager itemManager;

	private DelayedHealingInfoBox activeInfobox = null;

	private final Map<Integer, Integer> previousInventory = new HashMap<>();
	private boolean isEating = false;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(delayedHealingOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(delayedHealingOverlay);
		if (activeInfobox != null)
		{
			infoBoxManager.removeInfoBox(activeInfobox);
			activeInfobox = null;
		}
	}

	@Subscribe
	private void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState().equals(GameState.LOGGED_IN))
		{
			isEating = false;
			updateInventoryState();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("DelayedHealing"))
		{
			return;
		}
		if (!config.infobox())
		{
			infoBoxManager.removeInfoBox(activeInfobox);
			activeInfobox = null;
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		String menuOption = Text.removeTags(event.getMenuOption());
		if (menuOption.equals("Eat") && isApplicableConsumable(event.getItemId()))
		{
			isEating = true;
		}
	}

	@Subscribe
	private void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() != InventoryID.INV && event.getContainerId() != InventoryID.BANK)
		{
			return;
		}
		if (isEating)
		{
			detectConsumableUsage();
			isEating = false;
		}
		updateInventoryState();
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (activeInfobox != null)
		{
			activeInfobox.tickTimer();
			if (activeInfobox.ticksLeft() <= 0)
			{
				infoBoxManager.removeInfoBox(activeInfobox);
				activeInfobox = null;
			}
		}
		isEating = false;
	}

	private void updateInventoryState()
	{
		previousInventory.clear();
		ItemContainer inventory = client.getItemContainer(InventoryID.INV);
		if (inventory != null)
		{
			for (Item item : inventory.getItems())
			{
				previousInventory.merge(item.getId(), item.getQuantity(), Integer::sum);
			}
		}
	}

	private void detectConsumableUsage()
	{
		ItemContainer inventory = client.getItemContainer(InventoryID.INV);
		if (inventory == null)
		{
			return;
		}

		Map<Integer, Integer> currentInventory = new HashMap<>();
		for (Item item : inventory.getItems())
		{
			currentInventory.merge(item.getId(), item.getQuantity(), Integer::sum);
		}

		for (Map.Entry<Integer, Integer> entry : previousInventory.entrySet())
		{
			int itemID = entry.getKey();
			int previousItemQuantity = entry.getValue();
			if (previousItemQuantity > currentInventory.getOrDefault(itemID, 0) && isApplicableConsumable(itemID))
			{
				handleConsumable(itemID);
			}
		}
	}

	private boolean isApplicableConsumable(int itemId)
	{
		DelayedHeals item = DelayedHeals.getDelayedHealByItemId(itemId);
		return item != null && isItemEnabled(item);
	}

	private void handleConsumable(int itemId)
	{
		DelayedHeals item = DelayedHeals.getDelayedHealByItemId(itemId);
		delayedHealingOverlay.setActiveHeal(item);
		if (config.infobox())
		{
			BufferedImage itemImage = itemManager.getImage(itemId);
			DelayedHealingInfoBox infobox = new DelayedHealingInfoBox(itemImage, this, item.getTickDelay() + 1);
			if (activeInfobox != null)
			{
				infoBoxManager.removeInfoBox(activeInfobox);
			}
			infoBoxManager.addInfoBox(infobox);
			activeInfobox = infobox;
		}
	}

	private boolean isItemEnabled(DelayedHeals item)
	{
		switch (item)
		{
			case COOKED_WILD_KEBBIT:
				return config.wildKebbit();
			case COOKED_LARUPIA:
				return config.larupia();
			case COOKED_BARBTAILED_KEBBIT:
				return config.barbTailedKebbit();
			case COOKED_GRAAHK:
				return config.cookedGraahk();
			case COOKED_KYATT:
				return config.cookedKyatt();
			case COOKED_PYRE_FOX:
				return config.cookedPyreFox();
			case COOKED_DASHING_KEBBIT:
				return config.cookedDashingKebbit();
			case COOKED_SUNLIGHT_ANTELOPE:
				return config.cookedSunlightAntelope();
			case COOKED_MOONLIGHT_ANTELOPE:
				return config.cookedMoonlightAntelope();
			default:
				return false;
		}
	}

	@Provides
	DelayedHealingConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DelayedHealingConfig.class);
	}
}

package com.github.dappermickie.delayed.healing;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.Point;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class DelayedHealingOverlay extends Overlay
{
	private final Client client;
	private final DelayedHealingConfig config;
	private DelayedHeals activeHeal;
	private int startingTick;

	private static final int BankInventoryID = 983043;

	@Inject
	public DelayedHealingOverlay(Client client, DelayedHealingConfig config)
	{
		this.client = client;
		this.config = config;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setPriority(Overlay.PRIORITY_HIGH);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.overlay() && activeHeal != null)
		{
			int ticksLeft = activeHeal.getTickDelay() + 1 - (client.getTickCount() - startingTick);
			if (ticksLeft <= 0)
			{
				clearActiveHeal();
				return null;
			}
			Widget inventoryWidget = client.getWidget(InterfaceID.Inventory.ITEMS);
			if (inventoryWidget.isHidden())
			{
				inventoryWidget = client.getWidget(BankInventoryID);
				if (inventoryWidget.isHidden())
				{
					return null;
				}
			}
			Item[] items = client.getItemContainer(InventoryID.INV).getItems();
			for (int i = 0; i < items.length; i++)
			{
				Item item = items[i];
				if (DelayedHeals.getDelayedHealByItemId(item.getId()) != null)
				{
					drawTicksOverlay(graphics, inventoryWidget, ticksLeft, i);
				}
			}
		}
		return null;
	}

	public void setActiveHeal(DelayedHeals heal)
	{
		this.activeHeal = heal;
		this.startingTick = client.getTickCount();
	}

	public void clearActiveHeal()
	{
		this.activeHeal = null;
	}

	private void drawTicksOverlay(Graphics2D graphics, Widget inventoryWidget, int ticksLeft, int index)
	{
		Point location = inventoryWidget
			.getChild(index)
			.getCanvasLocation();
		String text = String.valueOf(ticksLeft);
		graphics.setColor(config.overlayColor());
		graphics.setFont(config.overlayFont().getFont());
		graphics.drawString(text, location.getX() + config.overlayXOffset(), location.getY() + config.overlayYOffset());
	}
}

package com.github.dappermickie.delayed.healing;

import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ItemID;

@AllArgsConstructor
public enum DelayedHeals
{
	COOKED_WILD_KEBBIT(ItemID.COOKED_WILD_KEBBIT, 7),
	COOKED_LARUPIA(ItemID.COOKED_LARUPIA, 7),
	COOKED_BARBTAILED_KEBBIT(ItemID.COOKED_BARBTAILED_KEBBIT, 7),
	COOKED_GRAAHK(ItemID.COOKED_GRAAHK, 7),
	COOKED_KYATT(ItemID.COOKED_KYATT, 7),
	COOKED_PYRE_FOX(ItemID.COOKED_PYRE_FOX, 7),
	COOKED_DASHING_KEBBIT(ItemID.COOKED_DASHING_KEBBIT, 7),
	COOKED_SUNLIGHT_ANTELOPE(ItemID.COOKED_SUNLIGHT_ANTELOPE, 7),
	COOKED_MOONLIGHT_ANTELOPE(ItemID.COOKED_MOONLIGHT_ANTELOPE, 7);

	@Getter
	private final int itemId;
	@Getter
	private final int tickDelay;

	private static final Map<Integer, DelayedHeals> ITEM_MAP = new HashMap<>();

	static
	{
		for (DelayedHeals heal : DelayedHeals.values())
		{
			ITEM_MAP.put(heal.itemId, heal);
		}
	}

	public static DelayedHeals getDelayedHealByItemId(int itemId)
	{
		return ITEM_MAP.get(itemId);
	}
}

package com.github.dappermickie.delayed.healing;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.FontType;
import net.runelite.client.config.Range;

@ConfigGroup("DelayedHealing")
public interface DelayedHealingConfig extends Config
{
	@ConfigItem(
		keyName = "overlay",
		name = "Overlay",
		description = "Configures whether or not the overlay is enabled",
		position = 1
	)
	default boolean overlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = "overlayColor",
		name = "Overlay Color",
		description = "Configures the color of the text in the overlay",
		position = 2
	)
	default Color overlayColor()
	{
		return Color.BLUE.darker();
	}

	@ConfigItem(
		keyName = "overlayXOffset",
		name = "Overlay X Offset",
		description = "Configures the x offset of the text in the overlay",
		position = 3
	)
	@Range(max = 20)
	default int overlayXOffset()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "overlayYOffset",
		name = "Overlay Y Offset",
		description = "Configures the Y offset of the text in the overlay",
		position = 4
	)
	@Range(max = 20)
	default int overlayYOffset()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "overlayFont",
		name = "Overlay Font",
		description = "Configures the font of the text in the overlay",
		position = 5
	)
	default FontType overlayFont()
	{
		return FontType.BOLD;
	}

	@ConfigItem(
		keyName = "infobox",
		name = "Infobox",
		description = "Configures whether or not the infobox is enabled",
		position = 6
	)
	default boolean infobox()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedWildKebbit",
		name = "Wild Kebbit",
		description = "Toggles the delayed timer infobox for cooked Wild Kebbits.",
		position = 7
	)
	default boolean wildKebbit()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedLarupia",
		name = "Larupia",
		description = "Toggles the delayed timer infobox for cooked Larupia.",
		position = 7
	)
	default boolean larupia()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedBarbTailedKebbit",
		name = "Barb-Tailed Kebbit",
		description = "Toggles the delayed timer infobox for cooked Barb-Tailed Kebbit.",
		position = 7
	)
	default boolean barbTailedKebbit()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedGraahk",
		name = "Graahk",
		description = "Toggles the delayed timer infobox for cooked Graahks.",
		position = 7
	)
	default boolean cookedGraahk()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedKyatt",
		name = "Kyatt",
		description = "Toggles the delayed timer infobox for cooked Kyatts.",
		position = 7
	)
	default boolean cookedKyatt()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedPyreFox",
		name = "Pyre Fox",
		description = "Toggles the delayed timer infobox for cooked Pyre Foxes.",
		position = 7
	)
	default boolean cookedPyreFox()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedDashingKebbit",
		name = "Dashing Kebbit",
		description = "Toggles the delayed timer infobox for cooked Dashing Kebbits.",
		position = 7
	)
	default boolean cookedDashingKebbit()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedSunlightAntelope",
		name = "Sunlight Antelope",
		description = "Toggles the delayed timer infobox for cooked Sunlight Antelopes.",
		position = 7
	)
	default boolean cookedSunlightAntelope()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cookedMoonlightAntelope",
		name = "Moonlight Antelope",
		description = "Toggles the delayed timer infobox for cooked Moonlight Antelopes.",
		position = 7
	)
	default boolean cookedMoonlightAntelope()
	{
		return true;
	}
}

package com.github.dappermickie.delayed.healing;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DelayedHealingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DelayedHealingPlugin.class);
		RuneLite.main(args);
	}
}
