package net.runelite.client.plugins.burneralarm;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.Notifier;
import net.runelite.client.audio.AudioPlayer;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
        // Synced name, description, and tags with runelite-plugin.properties
        name = "Burner Alarm",
        description = "Sends a notification and plays a really annoying sound when your poh burners are about to go out",
        tags = {"poh", "player owned house", "prayer", "altar", "burner", "incense", "notification", "alarm"}
)
public class BurnerAlarmPlugin extends Plugin {
    private static final Set<Integer> LIT_BURNER_IDS = ImmutableSet.of(13211, 13213);
    private static final int NOTIFICATION_COOLDOWN_TICKS = 25; // Prevents notification spam

    @RequiredArgsConstructor
    private static class BurnerState {
        final int startTick;
        boolean preNotificationSent = false;
        boolean soundNotificationSent = false;
    }

    private final Map<GameObject, BurnerState> litBurners = new HashMap<>();
    private int lastTextAlertTick = 0; // Cooldown for text notifications
    private int lastSoundAlertTick = 0; // Cooldown for sound notifications

    @Inject
    private Client client;

    @Inject
    private Notifier notifier;

    @Inject
    private BurnerAlarmConfig config;

    @Inject
    private AudioPlayer audioPlayer;

    @Provides
    BurnerAlarmConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(BurnerAlarmConfig.class);
    }

    @Override
    protected void startUp() {
    }

    @Override
    protected void shutDown() {
        litBurners.clear();
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        final GameObject gameObject = event.getGameObject();
        if (LIT_BURNER_IDS.contains(gameObject.getId())) {
            litBurners.put(gameObject, new BurnerState(client.getTickCount()));
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event) {
        litBurners.remove(event.getGameObject());
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        // Clears burners when game state transitions to LOGGED_IN (e.g., after loading a new area like POH exit/entry)
        // or during other critical state changes (logout, disconnect).
        if (event.getGameState() == GameState.LOGGED_IN ||
                event.getGameState() == GameState.LOGIN_SCREEN ||
                event.getGameState() == GameState.HOPPING ||
                event.getGameState() == GameState.CONNECTION_LOST ||
                event.getGameState() == GameState.STARTING ||
                event.getGameState() == GameState.UNKNOWN)
        {
            if (!litBurners.isEmpty()) {
                log.debug("Cleared lit burners due to game state change: {}", event.getGameState());
                litBurners.clear();
            }
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        // Only process if client is logged in and there are burners to track
        if (client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null || litBurners.isEmpty()) {
            return;
        }

        final int currentTick = client.getTickCount();
        final int fmLevel = client.getRealSkillLevel(Skill.FIREMAKING);
        final int certainDurationTicks = 200 + fmLevel;
        final int preNotificationTriggerTicks = certainDurationTicks - config.preNotificationLeadTimeTicks();

        boolean triggerTextNotificationThisTick = false;
        boolean triggerSoundNotificationThisTick = false;

        for (BurnerState burnerState : litBurners.values()) {
            final int ticksSinceLit = currentTick - burnerState.startTick;

            // Trigger pre-notification if conditions met and not already sent for this burner
            if (!burnerState.preNotificationSent && ticksSinceLit >= preNotificationTriggerTicks) {
                triggerTextNotificationThisTick = true;
                burnerState.preNotificationSent = true; // Mark as sent for this specific burner
            }

            // Trigger sound notification if conditions met and not already sent for this burner
            if (!burnerState.soundNotificationSent && ticksSinceLit >= certainDurationTicks) {
                triggerSoundNotificationThisTick = true;
                burnerState.soundNotificationSent = true; // Mark as sent for this specific burner
            }
        }

        // Apply global cooldowns and send notifications (once per tick per type)
        if (triggerTextNotificationThisTick && config.sendNotification() && currentTick >= lastTextAlertTick + NOTIFICATION_COOLDOWN_TICKS) {
            notifier.notify("A gilded altar burner will enter its random burnout phase soon!");
            lastTextAlertTick = currentTick;
        }

        if (triggerSoundNotificationThisTick) {
            if (config.playAlertSound() && currentTick >= lastSoundAlertTick + NOTIFICATION_COOLDOWN_TICKS) {
                playSound();
                lastSoundAlertTick = currentTick;
            }
        }
    }

    private void playSound() {
        try {
            audioPlayer.play(getClass(), "alarm.wav", config.soundVolume());
        } catch (Exception e) {
            log.warn("Failed to play Burner Alarm sound", e);
        }
    }
}
package net.runelite.client.plugins.burneralarm;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup("burneralarm")
public interface BurnerAlarmConfig extends Config
{
    @ConfigItem(
            keyName = "sendNotification",
            name = "Send Notification",
            description = "Toggle the notification pre-warning.",
            position = 1
    )
    default boolean sendNotification()
    {
        return true;
    }

    @ConfigItem(
            keyName = "playAlertSound",
            name = "Play Alert Sound",
            description = "Toggle the main audible alarm. Volume is controlled by the 'Sound Volume' setting below.",
            position = 2
    )
    default boolean playAlertSound()
    {
        return true;
    }

    @Range(
            min = -40,
            max = 6
    )
    @ConfigItem(
            keyName = "soundVolume",
            name = "Sound Volume (dB)",
            description = "Adjust the volume of the alarm sound in decibels (dB) from -40 for quiet to 6 for loud.",
            position = 3
    )
    default int soundVolume()
    {
        return -20;
    }

    @Range(
            min = 0,
            max = 50
    )
    @Units(Units.TICKS)
    @ConfigItem(
            keyName = "leadTime",
            name = "Pre-warning Lead Time",
            description = "How many ticks before the alarm to send the notification pre-warning (0.6 seconds per tick).",
            position = 4
    )
    default int preNotificationLeadTimeTicks()
    {
        return 17;
    }
}
