package thestonedturtle.runiterocks;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RuniteRocksPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RuniteRocksPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks;

import java.time.Instant;
import lombok.AccessLevel;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.http.api.worlds.World;

@Data
@Slf4j
public class RuniteRock
{
	private final World world;
	private final Rock rock;
	private boolean available = false;
	private Instant updatedAt = Instant.now();
	private Instant lastSeenAt = Instant.now();
	@Getter(AccessLevel.NONE)
	@Setter(AccessLevel.NONE)
	private boolean witnessedDepletion = false;

	public Instant getRespawnTime()
	{
		if (available)
		{
			return lastSeenAt;
		}

		return updatedAt.plus(rock.getRespawnDuration());
	}

	public void setAvailable(final int gameObjectId)
	{
		lastSeenAt = Instant.now();

		if (gameObjectId == rock.getActivateState())
		{
			if (available)
			{
				return;
			}

			available = true;
			updatedAt = Instant.now();
			witnessedDepletion = false;
		}
		else if (gameObjectId == rock.getDepletedState())
		{
			// If rocks depleted and wasn't previously available there's no change
			if (!available)
			{
				// If the respawn timer is in the past we need to assume it was updated when we couldn't see it.
				if (getRespawnTime().compareTo(Instant.now()) < 0)
				{
					updatedAt = Instant.now();
					witnessedDepletion = false;
				}
				return;
			}

			available = false;
			updatedAt = Instant.now();
			witnessedDepletion = true;
		}
		else
		{
			log.warn("Unexpected object id for Rock: {} | {}", gameObjectId, rock);
		}
	}

	public boolean matches(final RuniteRock other)
	{
		return this.getRock() == other.getRock() && this.getWorld().getId() == other.getWorld().getId();
	}

	public boolean hasWitnessedDepletion()
	{
		return witnessedDepletion;
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

@Slf4j
@PluginDescriptor(
	name = "Runite Rocks"
)
public class RuniteRocksPlugin extends Plugin
{
	private static final int DISPLAY_SWITCHER_MAX_ATTEMPTS = 3;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	public RuniteRocksConfig config;

	@Inject
	private WorldService worldService;

	@Inject
	private ScheduledExecutorService executorService;

	private ScheduledFuture panelUpdateFuture;

	@Provides
	RuniteRocksConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RuniteRocksConfig.class);
	}

	// Rocks that were spawned and not despawned should have their last visited time updated when hopping or logging out
	private final Map<WorldPoint, GameObject> spawnedRocks = new HashMap<>();
	private final Map<WorldPoint, GameObject> queue = new HashMap<>();
	@Getter
	private final Map<Integer, WorldTracker> worldMap = new HashMap<>();
	@Getter
	private WorldTracker tracker;

	private NavigationButton navButton;
	private RuniteRocksPanel panel;

	private net.runelite.api.World quickHopTargetWorld;
	private int displaySwitcherAttempts = 0;

	// Game state will change to loading between hopping and LOGGED_IN
	// We need to ignore this state as the game loads with all Runite rocks available
	private boolean isHopping = true;

	@Override
	protected void startUp()
	{
		panel = new RuniteRocksPanel(this);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");
		navButton = NavigationButton.builder()
			.tooltip("Runite Rocks")
			.icon(icon)
			.priority(10)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);

		if (client.getGameState().equals(GameState.LOGGED_IN))
		{
			final World world = getWorld(client.getWorld());
			if (world == null)
			{
				log.warn("couldn't find world for id: {}", client.getWorld());
				return;
			}
			tracker = new WorldTracker(world);
			worldMap.put(client.getWorld(), tracker);
		}

		isHopping = client.getGameState().equals(GameState.HOPPING);

		panelUpdateFuture = executorService.scheduleAtFixedRate(this::updatePanel, 1000, 500, TimeUnit.MILLISECONDS);
	}

	@Override
	protected void shutDown()
	{
		if (panelUpdateFuture != null)
		{
			panelUpdateFuture.cancel(true);
			panelUpdateFuture = null;
		}
		clientToolbar.removeNavigation(navButton);
		panel = null;
		queue.clear();
		worldMap.clear();
		tracker = null;
		spawnedRocks.clear();
		isHopping = false;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		switch (gameStateChanged.getGameState())
		{
			case LOADING:
				spawnedRocks.clear();
				if (isHopping)
				{
					return;
				}
				break;
			case HOPPING:
				isHopping = true;
				// intentional fall through
			case LOGIN_SCREEN:
				processSpawnedRocks();
				break;
			case LOGGING_IN:
			case CONNECTION_LOST:
				spawnedRocks.clear();
				return;
			case LOGGED_IN:
				isHopping = false;
				break;
			default:
				return;
		}

		final int currentWorld = client.getWorld();
		if (tracker != null)
		{
			if (currentWorld == tracker.getWorld().getId())
			{
				return;
			}

			final int oldWorld = tracker.getWorld().getId();
			SwingUtilities.invokeLater(() -> panel.switchCurrentHighlight(currentWorld, oldWorld));
		}

		final World world = getWorld(currentWorld);
		if (world == null)
		{
			log.warn("couldn't find world for id: {}", currentWorld);
			return;
		}

		tracker = worldMap.getOrDefault(currentWorld, new WorldTracker(world));
		// Ensure it exists on the map since getOrDefault doesn't do that
		worldMap.put(currentWorld, tracker);
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned e)
	{
		if (tracker == null)
		{
			return;
		}

		final WorldPoint tileLocation = e.getTile().getWorldLocation();
		if (Rock.getByWorldPoint(tileLocation) != null)
		{
			queue.put(tileLocation, e.getGameObject());
		}
	}

	@Subscribe
	public void onGameObjectDespawned(final GameObjectDespawned e)
	{
		if (tracker == null)
		{
			return;
		}

		final WorldPoint tileLocation = e.getTile().getWorldLocation();
		if (Rock.getByWorldPoint(tileLocation) != null)
		{
			queue.put(tileLocation, e.getGameObject());
		}
	}

	@Subscribe
	public void onGameTick(final GameTick tick)
	{
		// Quick hoping
		if (quickHopTargetWorld != null)
		{
			if (client.getWidget(ComponentID.WORLD_SWITCHER_WORLD_LIST) == null)
			{
				client.openWorldHopper();

				if (++displaySwitcherAttempts >= DISPLAY_SWITCHER_MAX_ATTEMPTS)
				{
					String chatMessage = new ChatMessageBuilder()
						.append(ChatColorType.NORMAL)
						.append("Failed to hop after ")
						.append(ChatColorType.HIGHLIGHT)
						.append(Integer.toString(displaySwitcherAttempts))
						.append(ChatColorType.NORMAL)
						.append(" attempts.")
						.build();

					chatMessageManager
						.queue(QueuedMessage.builder()
							.type(ChatMessageType.CONSOLE)
							.runeLiteFormattedMessage(chatMessage)
							.build());

					resetQuickHopper();
				}
			}
			else
			{
				client.hopToWorld(quickHopTargetWorld);
				resetQuickHopper();
			}
		}

		if (tracker != null && !queue.isEmpty())
		{
			final Collection<RuniteRock> rocks = new ArrayList<>();
			for (final Map.Entry<WorldPoint, GameObject> entry : queue.entrySet())
			{
				final RuniteRock rock = tracker.updateRockState(entry.getKey(), entry.getValue());
				if (rock == null)
				{
					log.warn("Error updating rock state: {} | {}", entry.getKey(), entry.getValue());
					continue;
				}
				rocks.add(rock);
				spawnedRocks.put(entry.getKey(), entry.getValue());
			}

			queue.clear();
			SwingUtilities.invokeLater(() -> panel.updateRuniteRocks(rocks));
		}
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged e)
	{
		if (!e.getGroup().equals(config.GROUP))
		{
			return;
		}

		SwingUtilities.invokeLater(panel::populate);
	}

	private void processSpawnedRocks()
	{
		if (spawnedRocks.isEmpty())
		{
			return;
		}

		final Collection<RuniteRock> rocks = new ArrayList<>();
		for (final Map.Entry<WorldPoint, GameObject> entry : spawnedRocks.entrySet())
		{
			final RuniteRock rock = tracker.updateRockState(entry.getKey(), entry.getValue());
			if (rock == null)
			{
				log.warn("Error updating spawned rock state: {} | {}", entry.getKey(), entry.getValue());
				continue;
			}
			rocks.add(rock);
		}

		spawnedRocks.clear();
		SwingUtilities.invokeLater(() -> panel.updateRuniteRocks(rocks));
	}

	@Subscribe
	public void onChatMessage(final ChatMessage event)
	{
		if (event.getMessage().equals("Please finish what you're doing before using the World Switcher."))
		{
			resetQuickHopper();
		}
	}

	@Nullable
	private World getWorld(final int worldNumber)
	{
		WorldResult worldResult = worldService.getWorlds();
		if (worldResult != null)
		{
			return worldResult.findWorld(worldNumber);
		}

		return null;
	}

	void hopToWorld(final World world)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		if (world.getId() == client.getWorld())
		{
			final String chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.NORMAL)
				.append("You are already in World ")
				.append(ChatColorType.HIGHLIGHT)
				.append(Integer.toString(world.getId()))
				.build();

			chatMessageManager
				.queue(QueuedMessage.builder()
					.type(ChatMessageType.CONSOLE)
					.runeLiteFormattedMessage(chatMessage)
					.build());
			return;
		}

		final String chatMessage = new ChatMessageBuilder()
			.append(ChatColorType.NORMAL)
			.append("Attempting to hop to World ")
			.append(ChatColorType.HIGHLIGHT)
			.append(Integer.toString(world.getId()))
			.append(ChatColorType.NORMAL)
			.append("..")
			.build();

		chatMessageManager
			.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(chatMessage)
				.build());

		quickHopTargetWorld = toRsWorld(world);
		client.changeWorld(quickHopTargetWorld);
		displaySwitcherAttempts = 0;
	}

	private net.runelite.api.World toRsWorld(final World world)
	{
		final net.runelite.api.World rsWorld = client.createWorld();
		rsWorld.setActivity(world.getActivity());
		rsWorld.setAddress(world.getAddress());
		rsWorld.setId(world.getId());
		rsWorld.setPlayerCount(world.getPlayers());
		rsWorld.setLocation(world.getLocation());
		rsWorld.setTypes(WorldUtil.toWorldTypes(world.getTypes()));

		return rsWorld;
	}

	private void resetQuickHopper()
	{
		displaySwitcherAttempts = 0;
		quickHopTargetWorld = null;
	}

	private void updatePanel()
	{
		if (tracker == null || panel.getRows().isEmpty())
		{
			return;
		}

		SwingUtilities.invokeLater(panel::updateList);
	}

	void removeRock(final int world, final Rock rock)
	{
		final WorldTracker track = worldMap.get(world);
		if (track == null)
		{
			return;
		}

		track.removeRock(rock);
		SwingUtilities.invokeLater(panel::populate);
	}

	void clearRocks()
	{
		worldMap.clear();
		tracker.clear();
		worldMap.put(client.getWorld(), tracker);
		SwingUtilities.invokeLater(panel::populate);
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks;

import com.google.common.collect.ImmutableMap;
import java.time.Duration;
import javax.annotation.Nullable;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.ObjectID;
import net.runelite.api.coords.WorldPoint;

@RequiredArgsConstructor
@AllArgsConstructor
@Getter
public enum Rock
{
	LAVA_MINE_1("LM1", "Lava Maze Mine (46 wildy)", new WorldPoint(3059, 3885, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	LAVA_MINE_2("LM2", "Lava Maze Mine (46 wildy)", new WorldPoint(3060, 3884, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),

	MINING_GUILD_1("MG1", "Mining Guild", new WorldPoint(3056, 9721, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390, 0.5),
	MINING_GUILD_2("MG2", "Mining Guild", new WorldPoint(3054, 9725, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391, 0.5),

	// Outside llyeta
	ISAFDAR_1("ELF1", "Isafdar (Outside Llyeta)", new WorldPoint(2280, 3160, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	ISAFDAR_2("ELF2", "Isafdar (Outside Llyeta)", new WorldPoint(2278, 3156, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),

	HEROES_GUILD_1("HG1", "Heroe's Guild", new WorldPoint(2941, 9884, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	HEROES_GUILD_2("HG2", "Heroe's Guild", new WorldPoint(2937, 9882, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),

	FROZEN_WASTE_PLATEAU_1("FWP1", "Frozen Waste Plateau (50+ wildy)", new WorldPoint(2948, 3914, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	FROZEN_WASTE_PLATEAU_2("FWP2", "Frozen Waste Plateau (50+ wildy)", new WorldPoint(2964, 3933, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	FROZEN_WASTE_PLATEAU_3("FWP3", "Frozen Waste Plateau (50+ wildy)", new WorldPoint(2976, 3937, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),

	LAVA_MAZE_DUNGEON("LMD", "Lava Maze Dungeon", new WorldPoint(3046, 10265, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),

	FOSSIL_ISLAND_1("FI1", "Fossil Island", new WorldPoint(3781, 3817, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	FOSSIL_ISLAND_2("FI2", "Fossil Island", new WorldPoint(3779, 3814, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),

	CENTRAL_FREMENNIK_ISLES("CFI", "Central Fremennik isles (NE Neitiznot)", new WorldPoint(2375, 3850, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),

	// Dark Beasts
	MOURNER_TUNNELS("MT", "Mourner Tunnels", new WorldPoint(1993, 4664, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),

	MYTHS_GUILD_1("MYTH1", "Myths' Guild", new WorldPoint(1937, 9020, 1), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	MYTHS_GUILD_2("MYTH2", "Myths' Guild", new WorldPoint(1939, 9019, 1), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),

	// Tzhaar city (reqs firecape)
	SOUTH_MOR_UI_REK_1("MUR1", "South Mor UI Rek (Tzhaar city)", new WorldPoint(2501, 5066, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	SOUTH_MOR_UI_REK_2("MUR2", "South Mor UI Rek (Tzhaar city)", new WorldPoint(2498, 5065, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	SOUTH_MOR_UI_REK_3("MUR3", "South Mor UI Rek (Tzhaar city)", new WorldPoint(2504, 5059, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),

	// Prifddinas mining area
	TRAHAEARN_1("PRIF1", "Trahaearn (Prifddinas mine)", new WorldPoint(3284, 12459, 0), ObjectID.RUNITE_ROCKS_36209, ObjectID.ROCKS_36202),
	TRAHAEARN_2("PRIF2", "Trahaearn (Prifddinas mine)", new WorldPoint(3287, 12455, 0), ObjectID.RUNITE_ROCKS_36209, ObjectID.ROCKS_36202),
	TRAHAEARN_3("PRIF3", "Trahaearn (Prifddinas mine)", new WorldPoint(3291, 12441, 0), ObjectID.RUNITE_ROCKS_36209, ObjectID.ROCKS_36202),
	TRAHAEARN_4("PRIF4", "Trahaearn (Prifddinas mine)", new WorldPoint(3301, 12438, 0), ObjectID.RUNITE_ROCKS_36209, ObjectID.ROCKS_36202),

	ISLE_OF_SOULS("IOSD", "Isles of Souls Dungeon", new WorldPoint(2152, 9301, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),
	
	RUINS_OF_TAPOYAUIK_1("TAPO1", "Ruins of Tapoyauik", new WorldPoint(1581, 9659, 0), ObjectID.RUNITE_ROCKS_11377, ObjectID.ROCKS_11391),
	RUINS_OF_TAPOYAUIK_2("TAPO2", "Ruins of Tapoyauik", new WorldPoint(1582, 9660, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),

	THE_STRANGLEWOOD_MINE("SWM", "The Stranglewood mine", new WorldPoint(1168, 3326, 0), ObjectID.RUNITE_ROCKS, ObjectID.ROCKS_11390),

	;

	public static final Duration RESPAWN_TIME = Duration.ofMinutes(12);
	private static final ImmutableMap<WorldPoint, Rock> ROCK_LOCATIONS;
	static
	{
		final ImmutableMap.Builder<WorldPoint, Rock> set = ImmutableMap.builder();
		for (Rock rock : values())
		{
			set.put(rock.getWorldPoint(), rock);
		}
		ROCK_LOCATIONS = set.build();
	}

	private final String name;
	private final String location;
	private final WorldPoint worldPoint;
	private final int activateState;
	private final int depletedState;
	@Getter(AccessLevel.NONE)
	private double respawnRate = 1.0;

	public Duration getRespawnDuration()
	{
		if (respawnRate == 1.0)
		{
			return RESPAWN_TIME;
		}

		return Duration.ofMillis(Math.round(RESPAWN_TIME.toMillis() * respawnRate));
	}

	@Nullable
	public static Rock getByWorldPoint(WorldPoint point)
	{
		return ROCK_LOCATIONS.get(point);
	}
}

package thestonedturtle.runiterocks;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(RuniteRocksConfig.GROUP)
public interface RuniteRocksConfig extends Config
{
	String GROUP = "runiterocks";

	@ConfigItem(
		position = 0,
		keyName = "respawnCounter",
		name = "Respawn Counter",
		description = "<html>If enabled shows a ticking countdown to the respawn time" +
			"<br/>If disabled shows the time at which the rock should respawn</html>"
	)
	default boolean respawnCounter()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "visitCounter",
		name = "Last Visit Counter",
		description = "<html>If enabled shows a ticking timer for how long since you checked on that rock" +
			"<br/>If disabled shows the time at which you last checked on that rock</html>"
	)
	default boolean visitCounter()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "accurateRespawnPriority",
		name = "Accurate Respawn Priority",
		description = "<html>When enabled and sorting by respawn time Accurate times will be prioritized over Inaccurate times</html>"
	)
	default boolean accurateRespawnPriority()
	{
		return false;
	}

	@ConfigItem(
		position = 3,
		keyName = "ignoreInaccurate",
		name = "Ignore Inaccurate",
		description = "<html>Should rocks that are inaccurate be ignored from the tracker?</html>"
	)
	default boolean ignoreInaccurate()
	{
		return false;
	}

	@ConfigItem(
		position = 4,
		keyName = "doubleClickToHop",
		name = "Hop on double click",
		description = "<html>Do you want to hop worlds when double left clicking an entry in the table?</html>"
	)
	default boolean doubleLeftClickToHop()
	{
		return true;
	}
}

/*
 * Copyright (c) 2018, Psikoi <https://github.com/Psikoi>
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import javax.annotation.Nonnull;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import lombok.NonNull;
import net.runelite.client.plugins.worldhopper.WorldHopperPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.ImageUtil;

/**
 * Modified version of the WorldTableHeader from the WorldHopper plugin
 */
public class TableHeader extends JPanel
{
	private static final ImageIcon ARROW_UP;
	private static final ImageIcon HIGHLIGHT_ARROW_DOWN;
	private static final ImageIcon HIGHLIGHT_ARROW_UP;

	private static final Color ARROW_COLOR = ColorScheme.LIGHT_GRAY_COLOR;
	private static final Color HIGHLIGHT_COLOR = ColorScheme.BRAND_ORANGE;

	static
	{
		final BufferedImage arrowDown = ImageUtil.getResourceStreamFromClass(WorldHopperPlugin.class, "arrow_down.png");
		final BufferedImage arrowUp = ImageUtil.rotateImage(arrowDown, Math.PI);
		final BufferedImage arrowUpFaded = ImageUtil.luminanceOffset(arrowUp, -80);
		ARROW_UP = new ImageIcon(arrowUpFaded);

		final BufferedImage highlightArrowDown = ImageUtil.fillImage(arrowDown, HIGHLIGHT_COLOR);
		final BufferedImage highlightArrowUp = ImageUtil.fillImage(arrowUp, HIGHLIGHT_COLOR);
		HIGHLIGHT_ARROW_DOWN = new ImageIcon(highlightArrowDown);
		HIGHLIGHT_ARROW_UP = new ImageIcon(highlightArrowUp);
	}

	private final JLabel textLabel = new JLabel();
	private final JLabel arrowLabel = new JLabel();
	// Determines if this header column is being used to order the list
	private boolean ordering = false;

	public TableHeader(String title, boolean ordered, boolean ascending, @Nonnull Runnable onRefresh, @NonNull Runnable onClear)
	{
		setLayout(new BorderLayout(5, 0));
		setBorder(new CompoundBorder(
			BorderFactory.createMatteBorder(0, 0, 0, 1, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(0, 5, 0, 2)));
		setBackground(ColorScheme.SCROLL_TRACK_COLOR);

		addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseEntered(MouseEvent mouseEvent)
			{
				textLabel.setForeground(HIGHLIGHT_COLOR);
				if (!ordering)
				{
					arrowLabel.setIcon(HIGHLIGHT_ARROW_UP);
				}
			}

			@Override
			public void mouseExited(MouseEvent mouseEvent)
			{
				if (!ordering)
				{
					textLabel.setForeground(ARROW_COLOR);
					arrowLabel.setIcon(ARROW_UP);
				}
			}
		});

		textLabel.setText(title);
		textLabel.setFont(FontManager.getRunescapeSmallFont());

		final JMenuItem refresh = new JMenuItem("Refresh worlds");
		refresh.addActionListener(e ->
		{
			onRefresh.run();
		});

		final JMenuItem clear = new JMenuItem("Clear all");
		clear.addActionListener(e ->
		{
			onClear.run();
		});

		final JPopupMenu popupMenu = new JPopupMenu();
		popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
		popupMenu.add(refresh);
		popupMenu.add(clear);

		textLabel.setComponentPopupMenu(popupMenu);
		setComponentPopupMenu(popupMenu);

		highlight(ordered, ascending);

		add(textLabel, BorderLayout.WEST);
		add(arrowLabel, BorderLayout.EAST);
	}

	/**
	 * The labels inherit the parent's mouse listeners.
	 */
	@Override
	public void addMouseListener(MouseListener mouseListener)
	{
		super.addMouseListener(mouseListener);
		textLabel.addMouseListener(mouseListener);
		arrowLabel.addMouseListener(mouseListener);
	}

	/**
	 * If this column header is being used to order, then it should be
	 * highlighted, changing it's font color and icon.
	 */
	public void highlight(boolean on, boolean ascending)
	{
		ordering = on;
		arrowLabel.setIcon(on ? (ascending ? HIGHLIGHT_ARROW_DOWN : HIGHLIGHT_ARROW_UP) : ARROW_UP);
		textLabel.setForeground(on ? HIGHLIGHT_COLOR : ARROW_COLOR);
	}
}

/*
 * Copyright (c) 2018, Psikoi <https://github.com/Psikoi>
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.EnumSet;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.EmptyBorder;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldType;
import thestonedturtle.runiterocks.Rock;
import thestonedturtle.runiterocks.RuniteRock;
import thestonedturtle.runiterocks.RuniteRocksPanel;

/**
 * Modified version of the WorldTableHeader from the WorldHopper plugin
 */
public class TableRow extends JPanel
{
	private static final int WORLD_COLUMN_WIDTH = RuniteRocksPanel.WORLD_COLUMN_WIDTH;
	private static final int LOCATION_COLUMN_WIDTH = RuniteRocksPanel.LOCATION_COLUMN_WIDTH;
	private static final int TIME_COLUMN_WIDTH = RuniteRocksPanel.TIME_COLUMN_WIDTH;

	private static final Color RUNITE_COLOR = new Color(113, 160, 167);
	private static final Color CURRENT_WORLD = new Color(66, 227, 17);
	private static final Color DANGEROUS_WORLD = new Color(251, 62, 62);
	private static final Color MEMBERS_WORLD = new Color(210, 193, 53);
	private static final Color FREE_WORLD = new Color(200, 200, 200);

	private static final DateFormat TIME_FORMATTER = new SimpleDateFormat("h:mm:ss a");

	private JLabel worldLabel;
	private JLabel locationLabel;

	private final JLabel respawnLabel = new JLabel();
	private final JLabel lastVisitedLabel = new JLabel();

	@Getter
	private final World world;
	@Getter
	private final RuniteRock runiteRock;
	private final boolean respawnCounter;
	private final boolean visitCounter;

	@Getter(AccessLevel.PACKAGE)
	private int updatedPlayerCount;

	private Color lastBackground;
	private boolean current = false;

	private long lastTimeClicked = System.currentTimeMillis();

	public TableRow(World world, RuniteRock rock, Consumer<World> hopToWorld, BiConsumer<Integer, Rock> removeRock, boolean respawnCounter, boolean visitCounter, boolean doubleLeftClickToHop)
	{
		this.world = world;
		this.runiteRock = rock;
		this.updatedPlayerCount = world.getPlayers();
		this.respawnCounter = respawnCounter;
		this.visitCounter = visitCounter;

		setLayout(new BorderLayout());
		setBorder(new EmptyBorder(2, 0, 2, 0));
		setForeground(getWorldColor());

		addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseEntered(MouseEvent mouseEvent)
			{
				lastBackground = getBackground();
				setBackground(getBackground().brighter());
			}

			@Override
			public void mouseExited(MouseEvent mouseEvent)
			{
				setBackground(lastBackground);
			}

			@Override
			public void mouseClicked(MouseEvent mouseEvent)
			{
				if (doubleLeftClickToHop && (System.currentTimeMillis() - lastTimeClicked) <= 500) {
					hopToWorld.accept(world);
				}
				lastTimeClicked = System.currentTimeMillis();
			}
		});

		JPanel leftSide = new JPanel(new BorderLayout());
		JPanel rightSide = new JPanel(new BorderLayout());
		leftSide.setOpaque(false);
		rightSide.setOpaque(false);

		JPanel worldField = buildWorldField();
		worldField.setPreferredSize(new Dimension(WORLD_COLUMN_WIDTH, 0));
		worldField.setOpaque(false);

		JPanel locationField = buildLocationField();
		locationField.setPreferredSize(new Dimension(LOCATION_COLUMN_WIDTH, 0));
		locationField.setOpaque(false);

		JPanel respawnField = buildRespawnField();
		respawnField.setPreferredSize(new Dimension(TIME_COLUMN_WIDTH, 0));
		respawnField.setOpaque(false);

		JPanel lastVisitedField = buildLastVisitedField();
		lastVisitedField.setBorder(new EmptyBorder(5, 5, 5, 5));
		lastVisitedField.setOpaque(false);

		leftSide.add(worldField, BorderLayout.WEST);
		leftSide.add(locationField, BorderLayout.CENTER);

		rightSide.add(respawnField, BorderLayout.WEST);
		rightSide.add(lastVisitedField, BorderLayout.CENTER);

		add(leftSide, BorderLayout.WEST);
		add(rightSide, BorderLayout.CENTER);

		final JMenuItem hopTo = new JMenuItem("Hop-to world");
		hopTo.addActionListener(e -> hopToWorld.accept(world));

		final JMenuItem remove = new JMenuItem("Remove entry");
		remove.addActionListener(e -> removeRock.accept(world.getId(), runiteRock.getRock()));

		final JPopupMenu popupMenu = new JPopupMenu();
		popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
		popupMenu.add(hopTo);
		popupMenu.add(remove);

		setComponentPopupMenu(popupMenu);
	}

	/**
	 * Builds the world list field (containing the the world index)
	 */
	private JPanel buildWorldField()
	{
		final JPanel column = new JPanel(new BorderLayout(7, 0));
		column.setBorder(new EmptyBorder(0, 5, 0, 5));

		worldLabel = new JLabel(String.valueOf(world.getId()));
		column.add(worldLabel, BorderLayout.CENTER);

		return column;
	}

	/**
	 * Builds the location list field (containing the location of the rock in-game)
	 */
	private JPanel buildLocationField()
	{
		final JPanel column = new JPanel(new BorderLayout());
		column.setBorder(new EmptyBorder(0, 5, 0, 5));

		locationLabel = new JLabel(runiteRock.getRock().getName());
		locationLabel.setFont(FontManager.getRunescapeSmallFont());
		locationLabel.setToolTipText(runiteRock.getRock().getLocation());

		column.add(locationLabel, BorderLayout.WEST);

		return column;
	}

	/**
	 * Builds the respawn list field (shows the time at which the rock would or should have respawned)
	 */
	private JPanel buildRespawnField()
	{
		final JPanel column = new JPanel(new BorderLayout());
		column.setBorder(new EmptyBorder(0, 5, 0, 5));

		respawnLabel.setFont(FontManager.getRunescapeSmallFont());
		updateRespawnLabel();

		column.add(respawnLabel, BorderLayout.WEST);

		return column;
	}

	private void updateRespawnLabel()
	{
		if (runiteRock.isAvailable())
		{
			respawnLabel.setText("Available");
			respawnLabel.setForeground(RUNITE_COLOR);
			return;
		}

		final Instant respawn = runiteRock.getRespawnTime();
		if (respawnCounter)
		{
			final Duration seconds = Duration.between(respawn, Instant.now());
			if (!seconds.isNegative())
			{
				respawnLabel.setText("Available");
				respawnLabel.setForeground(ColorScheme.BRAND_ORANGE);
				return;
			}

			final String timer = "-" + getReadableTimeElapsed(seconds).trim();
			respawnLabel.setText(timer);
			respawnLabel.setForeground(Color.LIGHT_GRAY);
		}
		else
		{
			respawnLabel.setText(TIME_FORMATTER.format(Date.from(respawn)));
			respawnLabel.setForeground(ColorScheme.DARK_GRAY_COLOR);
		}

		if (!runiteRock.hasWitnessedDepletion())
		{
			respawnLabel.setForeground(ColorScheme.BRAND_ORANGE);
		}
	}

	/**
	 * Builds the last visited list field (shows the time at which the rock was last updated).
	 */
	private JPanel buildLastVisitedField()
	{
		final JPanel column = new JPanel(new BorderLayout());
		column.setBorder(new EmptyBorder(0, 5, 0, 5));

		lastVisitedLabel.setFont(FontManager.getRunescapeSmallFont());
		updateLastVisitedLabel();

		column.add(lastVisitedLabel, BorderLayout.WEST);

		return column;
	}

	private void updateLastVisitedLabel()
	{
		final Instant time = runiteRock.getLastSeenAt();
		String text;
		if (time == null)
		{
			text = "Unknown";
		}
		else if (visitCounter)
		{
			final Duration seconds = Duration.between(time, Instant.now());
			text = seconds.isNegative() ? "-" : "";
			text += getReadableTimeElapsed(seconds).trim();
		}
		else
		{
			text = TIME_FORMATTER.format(Date.from(time));
		}

		lastVisitedLabel.setText(text);
	}

	public void setCurrent(final boolean current)
	{
		this.current = current;
		final Color foreground = getWorldColor();
		worldLabel.setForeground(foreground);
		locationLabel.setForeground(foreground);
	}

	public void refresh()
	{
		updateRespawnLabel();
		updateLastVisitedLabel();

		revalidate();
		repaint();
	}

	private Color getWorldColor()
	{
		return current ? CURRENT_WORLD : getWorldColor(world);
	}

	private static Color getWorldColor(final World world)
	{
		final EnumSet<WorldType> types = world.getTypes();
		if (types.contains(WorldType.PVP) || types.contains(WorldType.HIGH_RISK) || types.contains(WorldType.DEADMAN))
		{
			return DANGEROUS_WORLD;
		}

		return types.contains(WorldType.MEMBERS) ? MEMBERS_WORLD : FREE_WORLD;
	}

	private static String getReadableTimeElapsed(final Duration duration)
	{
		final double seconds = Math.abs(duration.getSeconds());
		if (seconds <= 60)
		{
			return String.format("%2.0f", seconds) + "s";
		}

		final double s = seconds % 3600 % 60;
		final double m = Math.floor(seconds % 3600 / 60);
		final double h = Math.floor(seconds / 3600);

		return h < 1 ? String.format("%2.0f:%02.0f", m, s) : String.format("%2.0f:%02.0f:%02.0f", h, m, s);
	}
}

/*
 * Copyright (c) 2018, Psikoi <https://github.com/Psikoi>
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks;

import com.google.common.collect.Ordering;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.Nullable;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import lombok.Getter;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.PluginPanel;
import net.runelite.http.api.worlds.World;
import thestonedturtle.runiterocks.ui.TableHeader;
import thestonedturtle.runiterocks.ui.TableRow;

/**
 * Modified version of the WorldSwitcherPanel
 */
public class RuniteRocksPanel extends PluginPanel
{
	public static final int WORLD_COLUMN_WIDTH = 55;
	public static final int LOCATION_COLUMN_WIDTH = 45;
	public static final int TIME_COLUMN_WIDTH = 70;
	private static final int HEADER_HEIGHT = 20;

	@Getter
	private final List<TableRow> rows = new ArrayList<>();
	private final JPanel listContainer = new JPanel();
	private final RuniteRocksPlugin plugin;

	private TableHeader worldHeader;
	private TableHeader locationHeader;
	private TableHeader respawnHeader;
	private TableHeader lastVisitHeader;

	private ListOrdering sortOrder = ListOrdering.WORLD;
	private boolean ascendingOrder = false;

	RuniteRocksPanel(RuniteRocksPlugin plugin)
	{
		this.plugin = plugin;

		setBorder(null);
		setLayout(new DynamicGridLayout(0, 1));

		final JPanel headerContainer = buildHeader();

		listContainer.setLayout(new GridLayout(0, 1));

		add(headerContainer);
		add(listContainer);
	}

	void switchCurrentHighlight(int newWorld, int lastWorld)
	{
		for (TableRow row : rows)
		{
			final int rowWorld = row.getWorld().getId();
			if (rowWorld == newWorld)
			{
				row.setCurrent(true);
			}
			else if (rowWorld == lastWorld)
			{
				row.setCurrent(false);
			}
		}

		listContainer.revalidate();
		listContainer.repaint();
	}

	public void updateRuniteRocks(final Collection<RuniteRock> runeRocks)
	{
		for (final RuniteRock runiteRock : runeRocks)
		{
			updateRuniteRock(runiteRock);
		}

		updateList();
	}

	public void updateRuniteRock(@Nullable final RuniteRock runeRock)
	{
		if (runeRock == null)
		{
			return;
		}

		final boolean currentWorld = runeRock.getWorld() == plugin.getTracker().getWorld();
		for (TableRow row : rows)
		{
			if (runeRock.matches(row.getRuniteRock()))
			{
				rows.remove(row);
				break;
			}
		}

		rows.add(buildRow(runeRock.getWorld(), currentWorld, runeRock));
	}

	public void populate()
	{
		rows.clear();

		for (final WorldTracker tracker : plugin.getWorldMap().values())
		{
			final World world = tracker.getWorld();
			final boolean currentWorld = world == plugin.getTracker().getWorld();

			for (final RuniteRock rock : tracker.getRuniteRocks())
			{
				rows.add(buildRow(world, currentWorld, rock));
			}
		}

		updateList();
	}

	public void updateList()
	{
		Ordering<TableRow> ordering = new Ordering<TableRow>()
		{
			@Override
			public int compare(@Nullable TableRow r1, @Nullable TableRow r2)
			{
				// ordering.nullsLast() handles these
				if (r1 == null || r2 == null)
				{
					return 0;
				}

				switch (sortOrder)
				{
					case WORLD:
						return Integer.compare(r1.getRuniteRock().getWorld().getId(), r2.getRuniteRock().getWorld().getId());
					case LOCATION:
						return r1.getRuniteRock().getRock().compareTo(r2.getRuniteRock().getRock());
					case RESPAWN_TIME:
						// Accurate timers should be prioritized, if both times are accurate use normal comparison.
						if (plugin.config.accurateRespawnPriority())
						{
							final boolean r1Accurate = r1.getRuniteRock().hasWitnessedDepletion() || r1.getRuniteRock().isAvailable();
							final boolean r2Accurate = r2.getRuniteRock().hasWitnessedDepletion() || r2.getRuniteRock().isAvailable();
							if (r1Accurate && !r2Accurate)
							{
								return -1;
							}
							else if (!r1Accurate && r2Accurate)
							{
								return 1;
							}
						}

						return r1.getRuniteRock().getRespawnTime().compareTo(r2.getRuniteRock().getRespawnTime());
					case LAST_VISITED:
						return r1.getRuniteRock().getLastSeenAt().compareTo(r2.getRuniteRock().getLastSeenAt());
					default:
						return 0;
				}
			}
		};

		if (!ascendingOrder)
		{
			ordering = ordering.reverse();
		}
		ordering = ordering.nullsLast();

		rows.sort(ordering);
		listContainer.removeAll();

		for (TableRow row : rows)
		{
			if (plugin.config.ignoreInaccurate() && !(row.getRuniteRock().hasWitnessedDepletion() || row.getRuniteRock().isAvailable()))
			{
				continue;
			}
			listContainer.add(row);
			row.refresh();
		}

		listContainer.revalidate();
		listContainer.repaint();
	}

	private void orderBy(final ListOrdering order)
	{
		worldHeader.highlight(order == ListOrdering.WORLD, ascendingOrder);
		locationHeader.highlight(order == ListOrdering.LOCATION, ascendingOrder);
		respawnHeader.highlight(order == ListOrdering.RESPAWN_TIME, ascendingOrder);
		lastVisitHeader.highlight(order == ListOrdering.LAST_VISITED, ascendingOrder);

		this.sortOrder = order;
		updateList();
	}

	/**
	 * Builds the entire table header.
	 */
	private JPanel buildHeader()
	{
		JPanel header = new JPanel(new DynamicGridLayout(0, 2));
		JPanel leftSide = new JPanel(new BorderLayout());
		JPanel rightSide = new JPanel(new BorderLayout());

		worldHeader = new TableHeader("World", sortOrder == ListOrdering.WORLD, ascendingOrder, this::populate, plugin::clearRocks);
		worldHeader.setPreferredSize(new Dimension(WORLD_COLUMN_WIDTH, HEADER_HEIGHT));
		worldHeader.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				if (SwingUtilities.isRightMouseButton(mouseEvent))
				{
					return;
				}
				ascendingOrder = sortOrder != ListOrdering.WORLD || !ascendingOrder;
				orderBy(ListOrdering.WORLD);
			}
		});

		locationHeader = new TableHeader("Loc", sortOrder == ListOrdering.LOCATION, ascendingOrder, this::populate, plugin::clearRocks);
		locationHeader.setPreferredSize(new Dimension(LOCATION_COLUMN_WIDTH, HEADER_HEIGHT));
		locationHeader.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				if (SwingUtilities.isRightMouseButton(mouseEvent))
				{
					return;
				}
				ascendingOrder = sortOrder != ListOrdering.LOCATION || !ascendingOrder;
				orderBy(ListOrdering.LOCATION);
			}
		});

		respawnHeader = new TableHeader("Respawn", sortOrder == ListOrdering.RESPAWN_TIME, ascendingOrder, this::populate, plugin::clearRocks);
		respawnHeader.setPreferredSize(new Dimension(TIME_COLUMN_WIDTH, HEADER_HEIGHT));
		respawnHeader.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				if (SwingUtilities.isRightMouseButton(mouseEvent))
				{
					return;
				}
				ascendingOrder = sortOrder != ListOrdering.RESPAWN_TIME || !ascendingOrder;
				orderBy(ListOrdering.RESPAWN_TIME);
			}
		});

		lastVisitHeader = new TableHeader("Last Visit", sortOrder == ListOrdering.LAST_VISITED, ascendingOrder, this::populate, plugin::clearRocks);
		lastVisitHeader.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				if (SwingUtilities.isRightMouseButton(mouseEvent))
				{
					return;
				}
				ascendingOrder = sortOrder != ListOrdering.LAST_VISITED || !ascendingOrder;
				orderBy(ListOrdering.LAST_VISITED);
			}
		});

		leftSide.add(worldHeader, BorderLayout.WEST);
		leftSide.add(locationHeader, BorderLayout.CENTER);

		rightSide.add(respawnHeader, BorderLayout.WEST);
		rightSide.add(lastVisitHeader, BorderLayout.CENTER);

		header.add(leftSide);
		header.add(rightSide);

		return header;
	}

	/**
	 * Builds a table row, that displays the world's information.
	 */
	private TableRow buildRow(World world, boolean current, RuniteRock rock)
	{
		TableRow row = new TableRow(world, rock, plugin::hopToWorld, plugin::removeRock, plugin.config.respawnCounter(), plugin.config.visitCounter(), plugin.config.doubleLeftClickToHop());
		row.setCurrent(current);

		return row;
	}

	private enum ListOrdering
	{
		WORLD,
		LOCATION,
		RESPAWN_TIME,
		LAST_VISITED
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.runiterocks;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.GameObject;
import net.runelite.api.coords.WorldPoint;
import net.runelite.http.api.worlds.World;

@Getter
public class WorldTracker
{
	@Getter(AccessLevel.NONE)
	private final Map<Rock, RuniteRock> rockMap = new HashMap<>();
	private final World world;

	public WorldTracker(final World world)
	{
		this.world = world;
	}

	@Nullable
	public RuniteRock updateRockState(final WorldPoint worldPoint, final GameObject gameObject)
	{
		final Rock rock = Rock.getByWorldPoint(worldPoint);
		if (rock == null)
		{
			return null;
		}

		final RuniteRock runeRock = rockMap.getOrDefault(rock, new RuniteRock(world, rock));
		runeRock.setAvailable(gameObject.getId());
		rockMap.put(rock, runeRock);

		return runeRock;
	}

	public void removeRock(final Rock rock)
	{
		rockMap.remove(rock);
	}

	public void clear()
	{
		rockMap.clear();
	}

	public Collection<RuniteRock> getRuniteRocks()
	{
		return rockMap.values();
	}
}

