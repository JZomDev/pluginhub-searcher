package com.snake;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SnakePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SnakePlugin.class);
		RuneLite.main(args);
	}
}
package com.snake;

import com.google.inject.Provides;
import java.awt.Color;
import java.util.Collections;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Provider;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MenuAction;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Snake",
	description = "Play snake in game!"
)
public class SnakePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private SnakeConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Provider<MenuManager> menuManager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private SnakeOverlay overlay;

	@Inject
	private SnakeController snakeController;

	@Inject
	private SnakeView snakeView;

	private static final String ADD_PLAYER_MENU = ColorUtil.wrapWithColorTag("Add snake player", Color.GREEN);

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);

		if (config.addPlayerMenuEntry() && client != null)
		{
			menuManager.get().addPlayerMenuItem(ADD_PLAYER_MENU);
		}
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		clientThread.invokeLater(() ->
		{
			resetGame();
			return true;
		});

		if (client != null)
		{
			menuManager.get().removePlayerMenuItem(ADD_PLAYER_MENU);
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		snakeController.tick();
		snakeView.update();
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (event.getMenuAction() == MenuAction.RUNELITE_PLAYER && event.getMenuOption().equals(ADD_PLAYER_MENU))
		{
			String playerName = event.getMenuEntry().getPlayer().getName();
			String newPlayerNames = config.playerNames() + "," + playerName;
			configManager.setConfiguration(SnakeConfig.GROUP, "playerNames", newPlayerNames);
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			resetGame();
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() == ChatMessageType.PUBLICCHAT)
		{
			String playerName = Text.sanitize(Text.removeTags(event.getName()));
			String message = Text.sanitize(Text.removeTags(event.getMessage())).toLowerCase();
			snakeController.handleChatMessage(playerName, message);
		}
	}

	private void initializeGame()
	{
		resetGame();

		List<String> playerNames = config.enableMultiplayer() ?
			Text.fromCSV(config.playerNames()) : Collections.singletonList(client.getLocalPlayer().getName());
		snakeController.initialize(playerNames, getGameSize(), config.allowRun(), config.enableMultiplayer(), config.isSameFoodSpawn(), config.seed());
		snakeView.initialize(snakeController.getSnakePlayers(), getGameSize(), config.gridTheme(), snakeController.getWalkableTiles(), config.isSameFoodSpawn(), config.showAllFood());
	}

	private void resetGame()
	{
		snakeController.reset();
		snakeView.reset();
	}


	private int getGameSize()
	{
		return 1 + 2 * config.gameSize();
	}

	@Subscribe
	public void onOverlayMenuClicked(OverlayMenuClicked overlayMenuClicked)
	{
		OverlayMenuEntry overlayMenuEntry = overlayMenuClicked.getEntry();
		if (overlayMenuEntry.getMenuAction() == MenuAction.RUNELITE_OVERLAY
			&& overlayMenuClicked.getEntry().getOption().equals("Start")
			&& overlayMenuClicked.getOverlay() == overlay)
		{
			initializeGame();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (configChanged.getGroup().equals(SnakeConfig.GROUP))
		{
			clientThread.invokeLater(() ->
			{
				resetGame();
				return true;
			});

			if (client != null)
			{
				menuManager.get().removePlayerMenuItem(ADD_PLAYER_MENU);

				if (config.addPlayerMenuEntry())
				{
					menuManager.get().addPlayerMenuItem(ADD_PLAYER_MENU);
				}
			}
		}
	}

	@Provides
	SnakeConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SnakeConfig.class);
	}
}

package com.snake;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(SnakeConfig.GROUP)
public interface SnakeConfig extends Config
{
	String GROUP = "snakeConfig";

	@ConfigItem(
		keyName = "gameSize",
		name = "Game size",
		description = "The size of the game.",
		position = 0
	)
	@Range(min = 1, max = 30)
	default int gameSize()
	{
		return 2;
	}

	@ConfigItem(
		keyName = "allowRun",
		name = "Allow run",
		description = "Allow running.",
		position = 1
	)
	default boolean allowRun()
	{
		return false;
	}

	@ConfigItem(
		keyName = "gridTheme",
		name = "Grid theme",
		description = "The theme of the grid.",
		position = 2
	)
	default SnakeGridTheme gridTheme()
	{
		return SnakeGridTheme.ORIGINAL;
	}

	@ConfigSection(
		name = "Multiplayer options",
		description = "Refer to the readme via support link for more info.",
		position = 3
	)
	String multiplayerOptionsSection = "multiplayerOptionsSection";

	@ConfigItem(
		keyName = "enableMultiplayer",
		name = "Enable multiplayer",
		description = "Enable multiplayer mode.",
		position = 0,
		section = multiplayerOptionsSection
	)
	default boolean enableMultiplayer()
	{
		return false;
	}

	@ConfigItem(
		keyName = "seed",
		name = "Seed",
		description = "The seed used to randomize spawn locations.",
		position = 1,
		section = multiplayerOptionsSection
	)
	default int seed()
	{
		return 1;
	}

	@ConfigItem(
		keyName = "isSameFoodSpawn",
		name = "Same food spawn",
		description = "If enabled all players have the same food spawn location, otherwise it is per player.",
		position = 2,
		section = multiplayerOptionsSection
	)
	default boolean isSameFoodSpawn()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showAllFood",
		name = "Show all food",
		description = "Show all food spawns if same food spawn is enabled.",
		position = 3,
		section = multiplayerOptionsSection
	)
	default boolean showAllFood()
	{
		return false;
	}

	@ConfigItem(
		keyName = "playerNames",
		name = "Player names",
		description = "RSN of all the players participating, as comma separated list.",
		position = 4,
		section = multiplayerOptionsSection
	)
	default String playerNames()
	{
		return "";
	}

	@ConfigItem(
		keyName = "addPlayerMenuEntry",
		name = "Show add player menu",
		description = "Show add player menu on players.",
		position = 5,
		section = multiplayerOptionsSection
	)
	default boolean addPlayerMenuEntry()
	{
		return false;
	}
}

package com.snake;

import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Player;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;

public class SnakeUtils
{
	public static WorldPoint getWallStartPoint(WorldPoint playerWorldPosition, int gameSize)
	{
		int offset = (int) Math.ceil(gameSize / 2.0f);
		return playerWorldPosition.dx(-offset).dy(offset);
	}

	public static LocalPoint getWorldPointLocationInScene(Client client, WorldPoint worldPoint)
	{
		Tile[][][] tiles = client.getScene().getTiles();
		int z = client.getPlane();
		for (int x = 0; x < Constants.SCENE_SIZE; ++x)
		{
			for (int y = 0; y < Constants.SCENE_SIZE; ++y)
			{
				Tile tile = tiles[z][x][y];
				if (tile.getWorldLocation().equals(worldPoint))
				{
					return new LocalPoint(x, y);
				}
			}
		}
		return null;
	}

	public static Player findPlayer(List<Player> players, String name)
	{
		for (Player player : players)
		{
			if (name.equals(player.getName()))
			{
				return player;
			}
		}
		return null;
	}
}

package com.snake;

import java.awt.Color;
import java.util.ArrayDeque;
import java.util.Queue;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.util.ColorUtil;

public class SnakePlayer
{
	private static final int INITIAL_TRAIL_SIZE = 2;

	@Getter
	private WorldPoint currentLocation;
	private WorldPoint previousLocation;

	@Getter
	private boolean isAlive;
	@Getter
	@Setter
	private boolean isReady;

	private final Player player;
	@Getter
	private final String playerName;
	@Getter
	private final Color color;
	@Getter
	private final boolean isActivePlayer;

	@Setter
	private boolean shouldGrow;

	@Getter
	private final Queue<WorldPoint> snakeTrail = new ArrayDeque<>();
	@Getter
	@Setter
	private WorldPoint foodLocation;

	@Getter
	@Setter
	private int score;

	public SnakePlayer(Player player, Color color, boolean isActivePlayer)
	{
		this.player = player;
		this.color = color;
		this.isActivePlayer = isActivePlayer;
		this.score = INITIAL_TRAIL_SIZE;

		currentLocation = player.getWorldLocation();
		previousLocation = currentLocation;
		isAlive = true;
		playerName = player.getName();
		isReady = false;

		shouldGrow = false;

		snakeTrail.add(currentLocation);
		foodLocation = null;
	}

    public void setOverHeadText(String text)
	{
		setOverHeadText(text, 50);
	}

	public void setOverHeadText(String text, int duration)
	{
		player.setOverheadCycle(duration);
		player.setOverheadText(ColorUtil.wrapWithColorTag(text, color));
	}

	public void fillInitialSnakeTrail()
	{
		for (int i = 0; i < INITIAL_TRAIL_SIZE - 1; i++)
		{
			snakeTrail.add(player.getWorldLocation());
		}
	}

	public void increaseScore()
	{
		score++;
	}

	public void updateLocation()
	{
		previousLocation = currentLocation;
		currentLocation = player.getWorldLocation();
	}

	public void moveSnakeTrail()
	{
		if (shouldGrow)
		{
			snakeTrail.add(currentLocation);
			shouldGrow = false;
		}
		else
		{
			snakeTrail.poll();
			snakeTrail.add(currentLocation);
		}
	}

	public void setAlive(boolean isAlive)
	{
		this.isAlive = isAlive;
		if (!isAlive)
		{
			setOverHeadText("Game Over!");
			player.setAnimation(2925);
			player.setAnimationFrame(0);
			snakeTrail.clear();
		}
	}

	public boolean isRunning()
	{
		return previousLocation.distanceTo(currentLocation) > 1;
	}
}

package com.snake;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.TreeSet;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;

@Slf4j
@Singleton
public class SnakeController
{
	public static final String READY_MESSAGE = "r";

	public enum State
	{
		IDLE,
		WAITING_TO_START,
		READY,
		PLAYING,
		GAME_OVER,
	}

	private static final List<Color> PLAYER_COLORS = Arrays.asList(
		Color.BLUE, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.RED
	);
	private static final int READY_COUNTDOWN_TICKS = 5;
	private static final int MAX_RANDOM_POINT_TRIES = 100;

	private final Client client;

	@Getter
	private State currentState = State.IDLE;

	@Getter
	private List<SnakePlayer> snakePlayers;
	@Getter
	private boolean[][] walkableTiles;

	private WorldPoint wallStartPoint;
	private int gameSize;
	private boolean allowRun;
	private boolean isSameFoodSpawn;

	private int readyCount;
	@Getter
	private int readyTickCountdown;
	private int deadCount;
	private int gameOverDeadCount;

	private Random generator;

	@Inject
	public SnakeController(Client client)
	{
		this.client = client;
	}

	public void initialize(List<String> playerNames, int gameSize, boolean allowRun, boolean isMultiplayer, boolean isSameFoodSpawn, int seed)
	{
		this.wallStartPoint = SnakeUtils.getWallStartPoint(client.getLocalPlayer().getWorldLocation(), gameSize);
		this.gameSize = gameSize;
		this.allowRun = allowRun;
		this.isSameFoodSpawn = isSameFoodSpawn;
		generator = new Random(isMultiplayer ? seed : System.nanoTime());

		reset();

		List<Player> players = client.getPlayers();
		String currentPlayer = client.getLocalPlayer().getName();
		walkableTiles = getWalkableTiles(wallStartPoint.dx(1).dy(-1));

		int colorIndex = 0;
		TreeSet<String> uniquePlayerNames = new TreeSet<>(playerNames);
		for (String playerName : uniquePlayerNames)
		{
			Player player = SnakeUtils.findPlayer(players, playerName);
			if (player != null)
			{
				boolean isActivePlayer = playerName.equals(currentPlayer);
				Color color = PLAYER_COLORS.get(colorIndex);
				if (isActivePlayer)
				{
					color = Color.GREEN;
				}
				snakePlayers.add(new SnakePlayer(player, color, isActivePlayer));
				colorIndex = (colorIndex + 1) % PLAYER_COLORS.size();
			}
		}

		gameOverDeadCount = snakePlayers.size() - (isMultiplayer && snakePlayers.size() != 1 ? 1 : 0);

		if (!isMultiplayer)
		{
			snakePlayers.get(0).setReady(true);
			readyTickCountdown = READY_COUNTDOWN_TICKS;
			currentState = State.READY;
		}
		else
		{
			currentState = State.WAITING_TO_START;
		}
	}

	public void reset()
	{
		snakePlayers = new ArrayList<>();
		readyCount = 0;
		readyTickCountdown = 0;
		deadCount = 0;
		this.currentState = State.IDLE;
	}

	public void tick()
	{
		State nextState = currentState;
		switch (currentState)
		{
			case WAITING_TO_START:
				nextState = waiting();
				break;
			case READY:
				nextState = ready();
				break;
			case PLAYING:
				nextState = playing();
				break;
			case IDLE:
			case GAME_OVER:
				break;
		}
		currentState = nextState;
	}

	public void handleChatMessage(String playerName, String message)
	{
		if (currentState == State.WAITING_TO_START && message.equals(READY_MESSAGE))
		{
			for (SnakePlayer snakePlayer : snakePlayers)
			{
				if (snakePlayer.getPlayerName().equals(playerName) && !snakePlayer.isReady())
				{
					snakePlayer.setReady(true);
					readyCount++;
				}
			}
		}
	}

	private State waiting()
	{
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			snakePlayer.updateLocation();
			snakePlayer.moveSnakeTrail();
		}

		if (readyCount == snakePlayers.size())
		{
			readyTickCountdown = READY_COUNTDOWN_TICKS;
			return State.READY;
		}
		return currentState;
	}

	private State ready()
	{
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			snakePlayer.updateLocation();
			snakePlayer.moveSnakeTrail();
		}

		readyTickCountdown--;
		setAllOverheadText(String.valueOf(readyTickCountdown));
		if (readyTickCountdown == 0)
		{
			for (SnakePlayer snakePlayer : snakePlayers)
			{
				snakePlayer.fillInitialSnakeTrail();
			}
			setAllOverheadText("Go!");

			respawnAllFood();
			return State.PLAYING;
		}
		return currentState;
	}

	private State playing()
	{
		updateAllPlayers();

		if (deadCount >= gameOverDeadCount)
		{
			return State.GAME_OVER;
		}

		updatePlayersOnFood();
		updateAllSnakeTrails();

		return currentState;
	}

	private void updateAllPlayers()
	{
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			if (snakePlayer.isAlive())
			{
				snakePlayer.updateLocation();
				boolean isAlive = checkValidMovement(snakePlayer);
				if (!isAlive)
				{
					snakePlayer.setAlive(false);
					deadCount++;
				}
			}
		}
	}

	private void updatePlayersOnFood()
	{
		List<SnakePlayer> onFoodPlayers = new ArrayList<>();
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			if (snakePlayer.isAlive() && snakePlayer.getCurrentLocation().equals(snakePlayer.getFoodLocation()))
			{
				onFoodPlayers.add(snakePlayer);
			}
		}

		if (onFoodPlayers.size() >= 1)
		{
			if (isSameFoodSpawn)
			{
				int randomIndex = generator.nextInt(onFoodPlayers.size());
				SnakePlayer snakePlayerGrow = onFoodPlayers.get(randomIndex);
				snakePlayerGrow.setShouldGrow(true);
				snakePlayerGrow.increaseScore();
				snakePlayerGrow.setOverHeadText("+1");
				respawnAllFood();
			}
			else
			{
				for (SnakePlayer snakePlayerGrow : onFoodPlayers)
				{
					snakePlayerGrow.setShouldGrow(true);
					snakePlayerGrow.setOverHeadText("+1");
					snakePlayerGrow.increaseScore();
					snakePlayerGrow.setFoodLocation(getRandomPointInGrid());
				}
			}
		}
	}

	private void updateAllSnakeTrails()
	{
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			if (snakePlayer.isAlive())
			{
				snakePlayer.moveSnakeTrail();
			}
		}
	}

	private boolean checkValidMovement(SnakePlayer snakePlayer)
	{
		WorldPoint playerWorldPosition = snakePlayer.getCurrentLocation();
		boolean inGameBoundary =
			playerWorldPosition.getX() > wallStartPoint.getX() &&
				playerWorldPosition.getX() <= (wallStartPoint.getX() + gameSize) &&
				playerWorldPosition.getY() < wallStartPoint.getY() &&
				playerWorldPosition.getY() >= (wallStartPoint.getY() - gameSize);

		if (!inGameBoundary)
		{
			return false;
		}

		if (!allowRun && snakePlayer.isRunning())
		{
			return false;
		}

		return !checkCollision(snakePlayer);
	}

	private boolean checkCollision(SnakePlayer sPlayer)
	{
		WorldPoint playerLocation = sPlayer.getCurrentLocation();
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			for (WorldPoint trailPoint : snakePlayer.getSnakeTrail())
			{
				if (trailPoint.equals(playerLocation))
				{
					return true;
				}
			}
		}
		return false;
	}

	private void setAllOverheadText(String text)
	{
		for (SnakePlayer snakePlayer : snakePlayers)
		{
			snakePlayer.setOverHeadText(text);
		}
	}

	private void respawnAllFood()
	{
		if (isSameFoodSpawn)
		{
			WorldPoint foodLocation = getRandomPointInGrid();
			for (SnakePlayer snakePlayer : snakePlayers)
			{
				snakePlayer.setFoodLocation(foodLocation);
			}
		}
		else
		{
			for (SnakePlayer snakePlayer : snakePlayers)
			{
				snakePlayer.setFoodLocation(getRandomPointInGrid());
			}
		}
	}

	private WorldPoint getRandomPointInGrid()
	{
		WorldPoint randomPoint;
		int x;
		int y;
		int count = 0;
		do
		{
			x = generator.nextInt(gameSize);
			y = generator.nextInt(gameSize);
			randomPoint = wallStartPoint.dx(x + 1).dy(-(y + 1));
			count++;
		} while (count < MAX_RANDOM_POINT_TRIES && !isFoodSpawnValid(randomPoint, x, y));

		return randomPoint;
	}

	private boolean isFoodSpawnValid(WorldPoint point, int x, int y)
	{
		if (!walkableTiles[x][y])
		{
			return false;
		}

		for (SnakePlayer snakePlayer : snakePlayers)
		{
			if (point.equals(snakePlayer.getFoodLocation()))
			{
				return false;
			}
		}
		return true;
	}

	private boolean[][] getWalkableTiles(WorldPoint gridStart)
	{
		boolean[][] walkable = new boolean[gameSize][gameSize];

		int[][] flags = client.getCollisionMaps()[client.getPlane()].getFlags();
		LocalPoint gridStartInScene = SnakeUtils.getWorldPointLocationInScene(client, gridStart);
		for (int x = 0; x < gameSize; ++x)
		{
			for (int y = 0; y < gameSize; ++y)
			{
				int data = flags[x + gridStartInScene.getX()][gridStartInScene.getY() - y];
				walkable[x][y] = data == 0;
			}
		}
		return walkable;
	}
}

package com.snake;

import static com.snake.SnakeController.READY_MESSAGE;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

class SnakeOverlay extends OverlayPanel
{

	private final SnakeController snakeController;

	@Inject
	SnakeOverlay(SnakePlugin plugin, SnakeController snakeController)
	{
		super(plugin);
		this.snakeController = snakeController;

		setPosition(OverlayPosition.TOP_LEFT);
		addMenuEntry(RUNELITE_OVERLAY, "Start", "new game");
		addMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Snake");
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		SnakeController.State currentState = snakeController.getCurrentState();
		String status = getStatusText(currentState);

		panelComponent.getChildren().add(TitleComponent.builder()
			.text("Snake - " + status)
			.build());

		if (currentState == SnakeController.State.WAITING_TO_START ||
			currentState == SnakeController.State.READY ||
			currentState == SnakeController.State.PLAYING ||
			currentState == SnakeController.State.GAME_OVER)
		{
			buildScoreOverlay(currentState);
		}
		else
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("shift right-click to start a new game")
				.build());
		}

		return super.render(graphics);
	}

	private void buildScoreOverlay(SnakeController.State currentState)
	{
		panelComponent.getChildren().add(LineComponent.builder()
			.left("Score")
			.build());

		for (SnakePlayer snakePlayer : snakeController.getSnakePlayers())
		{
			String rightText = (currentState == SnakeController.State.GAME_OVER ? "Win: " : "") + snakePlayer.getScore();
			if (currentState == SnakeController.State.WAITING_TO_START)
			{
				rightText = snakePlayer.isReady() ? "R" : "-";
			}
			else if (!snakePlayer.isAlive())
			{
				rightText = "Dead: " + snakePlayer.getScore();
			}

			panelComponent.getChildren().add(LineComponent.builder()
				.left(snakePlayer.getPlayerName())
				.leftColor(snakePlayer.isAlive() ? snakePlayer.getColor() : Color.DARK_GRAY)
				.right(rightText)
				.build());

			if (!snakePlayer.isReady() && snakePlayer.isActivePlayer())
			{
				panelComponent.getChildren().add(LineComponent.builder()
					.left("Type " + READY_MESSAGE + " in chat to ready!")
					.leftColor(Color.RED)
					.build());
			}
		}

		if (currentState == SnakeController.State.READY)
		{
			int tickCountDown = snakeController.getReadyTickCountdown();
			panelComponent.getChildren().add(LineComponent.builder()
				.left(tickCountDown == 0 ? "Go!" : "Starting in " + snakeController.getReadyTickCountdown())
				.build());
		}
	}

	private String getStatusText(SnakeController.State state)
	{
		switch (state)
		{
			case IDLE:
				return "Idle";
			case WAITING_TO_START:
				return "Waiting";
			case READY:
				return "Get Ready!";
			case PLAYING:
				return "Playing";
			case GAME_OVER:
				return "Game Over";
			default:
				return "-";
		}
	}
}

package com.snake;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.JagexColor;
import net.runelite.api.Model;
import net.runelite.api.ModelData;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;

public class SnakeView
{
	private final Client client;

	private List<SnakePlayer> snakePlayers;
	private int gameSize;
	private boolean[][] walkableTiles;
	private SnakeGridTheme theme;
	private boolean isSameFoodSpawn;
	private boolean showAllFood;

	private final Map<SnakePlayer, List<RuneLiteObject>> snakePlayerTrails = new HashMap<>();
	private final List<RuneLiteObject> walls = new ArrayList<>();
	private final List<RuneLiteObject> tiles = new ArrayList<>();
	private final List<RuneLiteObject> foods = new ArrayList<>();

	private WorldPoint wallStartPoint;

	private static final int TRAIL_MODEL_ID = 29311;
	private static final int FOOD_MODEL_ID = 2317;

	private static final Color DEFAULT_FOOD_COLOR = new Color(186, 16, 225);

	@Inject
	public SnakeView(Client client)
	{
		this.client = client;
	}

	public void initialize(List<SnakePlayer> snakePlayers, int gameSize, SnakeGridTheme theme, boolean[][] walkableTiles, boolean isSameFoodSpawn, boolean showAllFood)
	{
		this.snakePlayers = snakePlayers;
		this.gameSize = gameSize;
		this.theme = theme;
		this.walkableTiles = walkableTiles;
		this.isSameFoodSpawn = isSameFoodSpawn;
		this.showAllFood = showAllFood;

		wallStartPoint = SnakeUtils.getWallStartPoint(client.getLocalPlayer().getWorldLocation(), gameSize);

		if (theme.getWallModelId() != -1)
		{
			spawnWalls();
		}
		if (theme.getTileModelId1() != -1 && theme.getTileModelId2() != -1)
		{
			spawnGridTiles();
		}

		spawnFoods();
	}

	public void update()
	{
		updateFoodObjects();
		updateSnakeTrails();
	}

	public void reset()
	{
		clearAll(Arrays.asList(tiles, walls, foods));
		clearSnakeTrails();

		snakePlayers = null;
	}

	private void updateSnakeTrails()
	{
		if (snakePlayers == null)
		{
			return;
		}

		for (SnakePlayer snakePlayer : snakePlayers)
		{
			if (snakePlayer.isAlive())
			{
				if (!snakePlayerTrails.containsKey(snakePlayer))
				{
					snakePlayerTrails.put(snakePlayer, new ArrayList<>());
				}

				List<RuneLiteObject> snakeObjectTrail = snakePlayerTrails.get(snakePlayer);
				Queue<WorldPoint> snakePointTrail = snakePlayer.getSnakeTrail();
				for (int i = 0; i <= (snakePointTrail.size() - snakeObjectTrail.size()); i++)
				{
					snakeObjectTrail.add(spawnSnakeTrailObject(snakePlayer.getColor()));
				}

				int index = 0;
				for (WorldPoint point : snakePointTrail)
				{
					RuneLiteObject obj = snakeObjectTrail.get(index);
					LocalPoint lp = LocalPoint.fromWorld(client, point);
					obj.setLocation(lp, client.getPlane());
					if (!obj.isActive())
					{
						obj.setActive(true);
					}
					index++;
				}

			}
			else if (snakePlayerTrails.containsKey(snakePlayer))
			{
				for (RuneLiteObject rlObject : snakePlayerTrails.get(snakePlayer))
				{
					rlObject.setActive(false);
				}
				snakePlayerTrails.remove(snakePlayer);
			}
		}
	}

	private void updateFoodObjects()
	{
		if (snakePlayers == null)
		{
			return;
		}

		if (isSameFoodSpawn)
		{
			drawFoodAtLocation(foods.get(0), snakePlayers.get(0).getFoodLocation());
		}
		else
		{
			for (int i = 0; i < snakePlayers.size(); i++)
			{
				if (showAllFood)
				{
					drawFoodAtLocation(foods.get(i), snakePlayers.get(i).getFoodLocation());
				}
				else if (snakePlayers.get(i).isActivePlayer())
				{
					drawFoodAtLocation(foods.get(0), snakePlayers.get(i).getFoodLocation());
				}
			}
		}
	}

	private void drawFoodAtLocation(RuneLiteObject food, WorldPoint location)
	{
		if (location == null)
		{
			return;
		}

		food.setLocation(LocalPoint.fromWorld(client, location), client.getPlane());
		if (!food.isActive())
		{
			food.setActive(true);
		}
	}

	private void spawnWalls()
	{
		for (int x = 0; x < gameSize + 2; x++)
		{
			walls.add(spawnWallObject(wallStartPoint.dx(x)));
		}

		for (int x = 0; x < gameSize + 2; x++)
		{
			walls.add(spawnWallObject(wallStartPoint.dx(x).dy(-gameSize - 1)));
		}

		for (int y = 0; y < gameSize; y++)
		{
			walls.add(spawnWallObject(wallStartPoint.dy(-y - 1)));
		}

		for (int y = 0; y < gameSize; y++)
		{
			walls.add(spawnWallObject(wallStartPoint.dx(gameSize + 1).dy(-y - 1)));
		}
	}

	private void spawnGridTiles()
	{
		int tileObjectId;
		for (int x = 0; x < gameSize; x++)
		{
			for (int y = 0; y < gameSize; y++)
			{
				if ((x + y) % 2 == 0)
				{
					tileObjectId = theme.getTileModelId1();
				}
				else
				{
					tileObjectId = theme.getTileModelId2();
				}

				if (walkableTiles[x][y])
				{
					tiles.add(spawnGridTileObject(wallStartPoint.dx(x + 1).dy(-(y + 1)), tileObjectId));
				}
			}
		}
	}

	private void spawnFoods()
	{
		if (isSameFoodSpawn || !showAllFood || snakePlayers.size() == 1)
		{
			foods.add(spawnFoodObject(DEFAULT_FOOD_COLOR));
		}
		else
		{
			for (SnakePlayer snakePlayer : snakePlayers)
			{
				foods.add(spawnFoodObject(snakePlayer.getColor()));
			}
		}
	}

	private void clearAll(List<List<RuneLiteObject>> allObjectLists)
	{
		for (List<RuneLiteObject> objectList : allObjectLists)
		{
			for (RuneLiteObject obj : objectList)
			{
				obj.setActive(false);
			}
			objectList.clear();
		}
	}

	private void clearSnakeTrails()
	{
		snakePlayerTrails.forEach((snakePlayer, runeLiteObjects) -> {
			for (RuneLiteObject runeLiteObject : runeLiteObjects)
			{
				runeLiteObject.setActive(false);
			}
		});
		snakePlayerTrails.clear();
	}

	private RuneLiteObject spawnSnakeTrailObject(Color color)
	{
		RuneLiteObject obj = client.createRuneLiteObject();
		ModelData trailModel = client.loadModelData(TRAIL_MODEL_ID).cloneColors();

		trailModel.recolor(trailModel.getFaceColors()[0],
			JagexColor.rgbToHSL(color.getRGB(), 0.01d));
		trailModel.recolor(trailModel.getFaceColors()[1],
			JagexColor.rgbToHSL(color.getRGB(), 1.0d));

		obj.setModel(trailModel.light());

		return obj;
	}

	private RuneLiteObject spawnWallObject(WorldPoint point)
	{
		RuneLiteObject obj = client.createRuneLiteObject();

		Model wall = client.loadModel(theme.getWallModelId());
		obj.setModel(wall);
		LocalPoint lp = LocalPoint.fromWorld(client, point);
		obj.setLocation(lp, client.getPlane());
		obj.setActive(true);
		return obj;
	}

	private RuneLiteObject spawnGridTileObject(WorldPoint point, int tileObjectId)
	{
		RuneLiteObject obj = client.createRuneLiteObject();

		Model tile = client.loadModel(tileObjectId);
		obj.setModel(tile);
		LocalPoint lp = LocalPoint.fromWorld(client, point);
		obj.setLocation(lp, client.getPlane());

		obj.setActive(true);
		return obj;
	}

	private RuneLiteObject spawnFoodObject(Color color)
	{
		RuneLiteObject obj = client.createRuneLiteObject();

		ModelData foodModel = client.loadModelData(FOOD_MODEL_ID)
			.cloneVertices()
			.translate(0, 200, 0)
			.cloneColors();
		foodModel.recolor(foodModel.getFaceColors()[0],
			JagexColor.rgbToHSL(color.getRGB(), 1.0d));
		obj.setModel(foodModel.light());

		obj.setAnimation(client.loadAnimation(502));
		obj.setShouldLoop(true);

		obj.setDrawFrontTilesFirst(true);

		return obj;
	}
}

package com.snake;

import lombok.Getter;

@Getter
public enum SnakeGridTheme
{
	ORIGINAL(32693, -1, -1),
	TOA(-1, 45510, 45432);

	private final int wallModelId;
	private final int tileModelId1;
	private final int tileModelId2;

	SnakeGridTheme(int wallModelId, int tileModelId1, int tileModelId2)
	{
		this.wallModelId = wallModelId;
		this.tileModelId1 = tileModelId1;
		this.tileModelId2 = tileModelId2;
	}
}

