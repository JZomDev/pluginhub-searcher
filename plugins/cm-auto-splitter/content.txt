package sky.cmAutoSplitter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class autoSplitterTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CoxCMAutoSplitter.class);
		RuneLite.main(args);
	}
}

/*
 * Plugin for automating LiveSplits for Cox Challenge Mode.
 * Based on De0's CoxTimers.
 */

package sky.cmAutoSplitter;

import com.google.inject.Provides;
import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.io.PrintWriter;
import javax.inject.Inject;

import static sky.cmAutoSplitter.CoxUtil.ICE_DEMON;
import static sky.cmAutoSplitter.CoxUtil.getroom_type;

@PluginDescriptor(name = "CoX Auto splitter", description = "Auto splitter for LiveSplit for cox cm")
public class CoxCMAutoSplitter extends Plugin {

    @Inject
    private Client client;

    @Inject
    private CoxCMAutoSplitterConfig config;

    @Inject
    private ClientToolbar clientToolbar;

    // LiveSplit server
    PrintWriter writer;

    // side panel
    private NavigationButton navButton;
    private CoxCMAutoSplitterPanel panel;

    // for determining raid start
    private static final int RAID_STATE_VARBIT = 5425;
    private int prevRaidState = -1;

    // Room state
    private boolean in_raid;
    private final int[] cryp = new int[16];
    private final int[] cryx = new int[16];
    private final int[] cryy = new int[16];

    // Olm state
    private int olm_phase;

    // Misc state
    private boolean iceout, treecut;

    @Provides
    CoxCMAutoSplitterConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(CoxCMAutoSplitterConfig.class);
    }

    @Subscribe
    public void onClientTick(ClientTick e) {
        if (client.getGameState() != GameState.LOGGED_IN)
            return;

        if (clock() == 0 || !client.isInInstancedRegion()) {
            in_raid = false;
            return;
        }
        if (!in_raid) {
            in_raid = true;
            olm_phase = ~0;
            iceout = false;
            treecut = false;
        }
        for (int i = 0; i < 16; i++) {
            if (this.cryp[i] == -1)
                continue;
            int p = cryp[i];
            int x = cryx[i] - client.getBaseX();
            int y = cryy[i] - client.getBaseY();
            if (p != client.getPlane() || x < 0 || x >= 104 || y < 0 || y >= 104) {
                this.cryp[i] = -1;
                continue;
            }
            int flags = client.getCollisionMaps()[p].getFlags()[x][y];
            if ((flags & 0x100) == 0 && !config.regular()) {
                // combat and puzzle rooms
                send_split();
                this.cryp[i] = -1;
            }
        }
    }

    private static final String FL_COMPLETE_MES = "level complete! Duration: </col><col=ff0000>";

    @Subscribe
    public void onChatMessage(ChatMessage e) {
        String mes = e.getMessage();
        if (e.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION && mes.startsWith("<col=ef20ff>")) {
            int duration = mes.indexOf(FL_COMPLETE_MES);
            boolean is_fl_time = duration != -1;

            if (!is_fl_time)
                return;

            send_split();

        } else if (e.getType() == ChatMessageType.GAMEMESSAGE && mes.equals(
                "The Great Olm is giving its all. This is its final stand.")) {
            // head phase
            send_split();
            olm_phase = 99;
        }
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned e) {
        GameObject go = e.getGameObject();
        switch (go.getId()) {
            case 29881: // Olm spawned
                if (olm_phase < 0) {
                    olm_phase = ~olm_phase;
                }
                break;
            case 30013:
                // Muttadile tree placeholder spawned after tree cut
                if (config.splitMuttadileTree() && !treecut && !config.regular()) {
                    send_split();
                    treecut = true;
                }
                break;
            case 26209: // shamans/thieving/guardians
            case 29741: // mystics
            case 29749: // tightrope
            case 29753: // crabs
            case 29754:
            case 29755:
            case 29756:
            case 29757:
            case 29876: // ice
            case 30016: // vasa
            case 30017: // tekton/vanguards
            case 30018: // mutt
            case 30070: // vespula
                Point pt = go.getSceneMinLocation();
                int p = go.getPlane();
                int x = pt.getX();
                int y = pt.getY();
                int template = client.getInstanceTemplateChunks()[p][x / 8][y / 8];
                int roomtype = getroom_type(template);
                if (roomtype < 16) {
                    // add obstacle to list
                    cryp[roomtype] = p;
                    cryx[roomtype] = x + client.getBaseX();
                    cryy[roomtype] = y + client.getBaseY();
                }
                break;
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned e) {
        if (e.getGameObject().getId() == ObjectID.LARGE_HOLE_29881) {
            send_split();
            olm_phase = ~olm_phase;
        }
    }

    private static final int SMOKE_PUFF = 188;

    @Subscribe
    public void onGraphicsObjectCreated(GraphicsObjectCreated e) {
        if (config.splitIcePop() && e.getGraphicsObject().getId() == SMOKE_PUFF && !iceout && !config.regular()) {
            WorldPoint wp = WorldPoint.fromLocal(client, e.getGraphicsObject().getLocation());
            int p = client.getPlane();
            int x = wp.getX() - client.getBaseX();
            int y = wp.getY() - client.getBaseY();
            int template = client.getInstanceTemplateChunks()[p][x / 8][y / 8];
            if (CoxUtil.getroom_type(template) == ICE_DEMON) {
                send_split();
                iceout = true;
            }
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged e)
    {
        // when the raid starts
        int raidState = client.getVarbitValue(RAID_STATE_VARBIT);
        if (prevRaidState == 0 && raidState == 1){
            if (config.autoReset()) {
                send_reset();
            }
            send_split();
        }
        prevRaidState = raidState;
    }

    private void send_split() {
        try {
            writer.write("startorsplit\r\n");
            writer.flush();
        } catch (Exception ignored) { }
    }

    private void send_reset() {
        try {
            writer.write("reset\r\n");
            writer.flush();
        } catch (Exception ignored) { }
    }

    private int clock() {
        return client.getVarbitValue(6386);
    }

    @Override
    protected void startUp() {
        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon.png");
        panel = new CoxCMAutoSplitterPanel(client, writer, config, this);
        navButton = NavigationButton.builder().tooltip("LiveSplit controller")
                .icon(icon).priority(6).panel(panel).build();
        clientToolbar.addNavigation(navButton);

        panel.startPanel();
    }

    @Override
    protected void shutDown() {
        clientToolbar.removeNavigation(navButton);
        panel.disconnect();  // terminates active socket
    }
}

package sky.cmAutoSplitter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("autosplitter")
public interface CoxCMAutoSplitterConfig extends Config {

    @ConfigItem(position = 0, keyName = "splitIcePop", name = "Split on Ice demon pop-out", description = "Partial room split for Ice Demon")
    default boolean splitIcePop() {
        return false;
    }

    @ConfigItem(position = 1, keyName = "splitMuttadileTree", name = "Split on Muttadile tree cut", description = "Partial room split for Muttadiles")
    default boolean splitMuttadileTree() {
        return false;
    }

    @ConfigItem(position = 2, keyName = "port", name = "Port", description = "Port for the LiveSplit server. (Restart required)")
    default int port() {
        return 16834;
    }

    @ConfigItem(position = 3, keyName = "regular", name = "Split only on floors", description = "Split only on floor changes, useful for regular cox.")
    default boolean regular() {
        return false;
    }

    @ConfigItem(position = 4, keyName = "autoReset", name = "Automatic reset", description = "Automatically reset when starting a new raid.")
    default boolean autoReset() {
        return false;
    }
}

/*
 * De0's CoxUtils
 */


package sky.cmAutoSplitter;

public class CoxUtil {

  // p=plane, y=y_8, x=x_8, r=rot pp_xxxxxxxxxx_yyyyyyyyyy_rr0
  private static final int COX_ROOM_MASK = 0b11_1111111100_11111111100_00_0;

  private static final int FL_END1 = 0 << 24 | 102 << 16 | 160 << 5;

  private static final int FL_END2 = 0 << 24 | 102 << 16 | 161 << 5;
  private static final int FL_END3 = 0 << 24 | 103 << 16 | 161 << 5;

  private static final int LOBBY_CCW = 0 << 24 | 102 << 16 | 162 << 5;
  private static final int LOBBY_THRU = 0 << 24 | 103 << 16 | 162 << 5;
  private static final int LOBBY_CW = 0 << 24 | 104 << 16 | 162 << 5;

  private static final int SCAVS_SM_CCW = 0 << 24 | 102 << 16 | 163 << 5;
  private static final int SCAVS_SM_THRU = 0 << 24 | 103 << 16 | 163 << 5;
  private static final int SCAVS_SM_CW = 0 << 24 | 104 << 16 | 163 << 5;

  private static final int SHAMANS_CCW = 0 << 24 | 102 << 16 | 164 << 5;
  private static final int SHAMANS_THRU = 0 << 24 | 103 << 16 | 164 << 5;
  private static final int SHAMANS_CW = 0 << 24 | 104 << 16 | 164 << 5;

  private static final int VASA_CCW = 0 << 24 | 102 << 16 | 165 << 5;
  private static final int VASA_THRU = 0 << 24 | 103 << 16 | 165 << 5;
  private static final int VASA_CW = 0 << 24 | 104 << 16 | 165 << 5;

  private static final int VANGUARDS_CCW = 0 << 24 | 102 << 16 | 166 << 5;
  private static final int VANGUARDS_THRU = 0 << 24 | 103 << 16 | 166 << 5;
  private static final int VANGUARDS_CW = 0 << 24 | 104 << 16 | 166 << 5;

  private static final int ICE_DEMON_CCW = 0 << 24 | 102 << 16 | 167 << 5;
  private static final int ICE_DEMON_THRU = 0 << 24 | 103 << 16 | 167 << 5;
  private static final int ICE_DEMON_CW = 0 << 24 | 104 << 16 | 167 << 5;

  private static final int THIEVING_CCW = 0 << 24 | 102 << 16 | 168 << 5;
  private static final int THIEVING_THRU = 0 << 24 | 103 << 16 | 168 << 5;
  private static final int THIEVING_CW = 0 << 24 | 104 << 16 | 168 << 5;

  private static final int FARM_FISH_CCW = 0 << 24 | 102 << 16 | 170 << 5;
  private static final int FARM_FISH_THRU = 0 << 24 | 103 << 16 | 170 << 5;
  private static final int FARM_FISH_CW = 0 << 24 | 104 << 16 | 170 << 5;

  private static final int FL_START1_CCW = 0 << 24 | 102 << 16 | 178 << 5;
  private static final int FL_START1_THRU = 0 << 24 | 103 << 16 | 178 << 5;
  private static final int FL_START1_CW = 0 << 24 | 104 << 16 | 178 << 5;

  private static final int FL_START2_CCW = 0 << 24 | 102 << 16 | 179 << 5;
  private static final int FL_START2_THRU = 0 << 24 | 103 << 16 | 179 << 5;
  private static final int FL_START2_CW = 0 << 24 | 104 << 16 | 179 << 5;

  private static final int SCAVS_LG_CCW = 1 << 24 | 102 << 16 | 163 << 5;
  private static final int SCAVS_LG_THRU = 1 << 24 | 103 << 16 | 163 << 5;
  private static final int SCAVS_LG_CW = 1 << 24 | 104 << 16 | 163 << 5;

  private static final int MYSTICS_CCW = 1 << 24 | 102 << 16 | 164 << 5;
  private static final int MYSTICS_THRU = 1 << 24 | 103 << 16 | 164 << 5;
  private static final int MYSTICS_CW = 1 << 24 | 104 << 16 | 164 << 5;

  private static final int TEKTON_CCW = 1 << 24 | 102 << 16 | 165 << 5;
  private static final int TEKTON_THRU = 1 << 24 | 103 << 16 | 165 << 5;
  private static final int TEKTON_CW = 1 << 24 | 104 << 16 | 165 << 5;

  private static final int MUTTADILES_CCW = 1 << 24 | 102 << 16 | 166 << 5;
  private static final int MUTTADILES_THRU = 1 << 24 | 103 << 16 | 166 << 5;
  private static final int MUTTADILES_CW = 1 << 24 | 104 << 16 | 166 << 5;

  private static final int TIGHTROPE_CCW = 1 << 24 | 102 << 16 | 167 << 5;
  private static final int TIGHTROPE_THRU = 1 << 24 | 103 << 16 | 167 << 5;
  private static final int TIGHTROPE_CW = 1 << 24 | 104 << 16 | 167 << 5;

  private static final int FARM_BATS_CCW = 1 << 24 | 102 << 16 | 170 << 5;
  private static final int FARM_BATS_THRU = 1 << 24 | 103 << 16 | 170 << 5;
  private static final int FARM_BATS_CW = 1 << 24 | 104 << 16 | 170 << 5;

  private static final int GUARDIANS_CCW = 2 << 24 | 102 << 16 | 164 << 5;
  private static final int GUARDIANS_THRU = 2 << 24 | 103 << 16 | 164 << 5;
  private static final int GUARDIANS_CW = 2 << 24 | 104 << 16 | 164 << 5;

  private static final int VESPULA_CCW = 2 << 24 | 102 << 16 | 165 << 5;
  private static final int VESPULA_THRU = 2 << 24 | 103 << 16 | 165 << 5;
  private static final int VESPULA_CW = 2 << 24 | 104 << 16 | 165 << 5;

  private static final int CRABS_CCW = 2 << 24 | 102 << 16 | 167 << 5;
  private static final int CRABS_THRU = 2 << 24 | 103 << 16 | 167 << 5;
  private static final int CRABS_CW = 2 << 24 | 104 << 16 | 167 << 5;

  private static final int OLM_ROOM_MASK = 0b11_1111111000_11111111000_00_0;

  private static final int OLM_ = 0 << 24 | 50 << 17 | 89 << 6;

  public static final int FL_START = 0;
  public static final int FL_END = 1;
  public static final int SCAVENGERS = 2;
  public static final int FARMING = 3;

  public static final int SHAMANS = 4;
  public static final int VASA = 5;
  public static final int VANGUARDS = 6;
  public static final int MYSTICS = 7;
  public static final int TEKTON = 8;
  public static final int MUTTADILES = 9;
  public static final int GUARDIANS = 10;
  public static final int VESPULA = 11;

  public static final int ICE_DEMON = 12;
  public static final int THIEVING = 13;
  public static final int TIGHTROPE = 14;
  public static final int CRABS = 15;
  public static final int OLM = 16;

  public static final int UNKNOWN = 17;

  private static final char[] ROOM_SORTS = new char[] { '*', '*', 'S', 'F', 'C',
      'C', 'C', 'C', 'C', 'C', 'C', 'C', 'P', 'P', 'P', 'P', 'O' };

  private static final String[] ROOM_NAMES = new String[] { "Floor start",
      "Floor end", "Scavengers", "Farming", "Shamans", "Vasa", "Vanguards",
      "Mystics", "Tekton", "Muttadiles", "Guardians", "Vespula", "Ice demon",
      "Thieving", "Tightrope", "Crabs", "Olm" };

  public static int getroom_type(int zonecode) {
    switch (zonecode & COX_ROOM_MASK) {
    case LOBBY_CCW:
    case LOBBY_THRU:
    case LOBBY_CW:
    case FL_START1_CCW:
    case FL_START1_THRU:
    case FL_START1_CW:
    case FL_START2_CCW:
    case FL_START2_THRU:
    case FL_START2_CW:
      return FL_START;
    case FL_END1:
    case FL_END2:
    case FL_END3:
      return FL_END;
    case SCAVS_SM_CCW:
    case SCAVS_SM_THRU:
    case SCAVS_SM_CW:
    case SCAVS_LG_CCW:
    case SCAVS_LG_THRU:
    case SCAVS_LG_CW:
      return SCAVENGERS;
    case FARM_FISH_CCW:
    case FARM_FISH_THRU:
    case FARM_FISH_CW:
    case FARM_BATS_CCW:
    case FARM_BATS_THRU:
    case FARM_BATS_CW:
      return FARMING;
    case SHAMANS_CCW:
    case SHAMANS_THRU:
    case SHAMANS_CW:
      return SHAMANS;
    case VASA_CCW:
    case VASA_THRU:
    case VASA_CW:
      return VASA;
    case VANGUARDS_CCW:
    case VANGUARDS_THRU:
    case VANGUARDS_CW:
      return VANGUARDS;
    case MYSTICS_CCW:
    case MYSTICS_THRU:
    case MYSTICS_CW:
      return MYSTICS;
    case TEKTON_CCW:
    case TEKTON_THRU:
    case TEKTON_CW:
      return TEKTON;
    case MUTTADILES_CCW:
    case MUTTADILES_THRU:
    case MUTTADILES_CW:
      return MUTTADILES;
    case GUARDIANS_CCW:
    case GUARDIANS_THRU:
    case GUARDIANS_CW:
      return GUARDIANS;
    case VESPULA_CCW:
    case VESPULA_THRU:
    case VESPULA_CW:
      return VESPULA;
    case ICE_DEMON_CCW:
    case ICE_DEMON_THRU:
    case ICE_DEMON_CW:
      return ICE_DEMON;
    case THIEVING_CCW:
    case THIEVING_THRU:
    case THIEVING_CW:
      return THIEVING;
    case TIGHTROPE_CCW:
    case TIGHTROPE_THRU:
    case TIGHTROPE_CW:
      return TIGHTROPE;
    case CRABS_CCW:
    case CRABS_THRU:
    case CRABS_CW:
      return CRABS;
    }

    if ((zonecode & OLM_ROOM_MASK) == OLM_)
      return OLM;

    return UNKNOWN;
  }

  public static char getroom_sort(int roomtype) {
    if (roomtype >= 0 && roomtype < UNKNOWN)
      return ROOM_SORTS[roomtype];

    return '?';
  }

  public static String getroom_name(int roomtype) {
    if (roomtype >= 0 && roomtype < UNKNOWN)
      return ROOM_NAMES[roomtype];

    return "Unknown";
  }

  public static int room_winding(int zonecode) {
    return (((zonecode >> 16) & 0xff) - 103) & 0x3;
  }

  public static int room_rot(int zonecode) {
    return zonecode >> 1 & 0x3;
  }

  public static int room_exitside(int zonecode) {
    return (room_winding(zonecode) + room_rot(zonecode)) & 0x3;
  }

}

package sky.cmAutoSplitter;

import java.awt.*;
import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.LineBorder;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import java.io.PrintWriter;
import java.net.Socket;

public class CoxCMAutoSplitterPanel extends PluginPanel
{
    private final Client client;
    private final CoxCMAutoSplitterConfig config;
    private final CoxCMAutoSplitter splitter;
    private PrintWriter writer;
    private Socket socket;
    private JLabel status;

    @Inject
    CoxCMAutoSplitterPanel(Client client, PrintWriter writer, CoxCMAutoSplitterConfig config, CoxCMAutoSplitter splitter){
        this.client = client;
        this.writer = writer;
        this.config = config;
        this.splitter = splitter;
    }

    private void connect(){
        try {
            socket = new Socket("localhost", config.port());
            writer = new PrintWriter(socket.getOutputStream());
            splitter.writer = writer;

            set_connected();

            if (client.getGameState() == GameState.LOGGED_IN) {
                String message = "Socket started at port <col=ff0000>" + config.port() + "</col>.";
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", message, null);
            }

        } catch (Exception e) {
            if (client.getGameState() == GameState.LOGGED_IN) {
                String message = "Could not start socket, did you start the LiveSplit server?";
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", message, null);
            }
        }
    }

    public void disconnect(){
        try {
            socket.close();
            set_disconnected();

            if (client.getGameState() == GameState.LOGGED_IN) {
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Socket closed.", null);
            }
        } catch (Exception ignored) {}
    }

    private void control(String cmd){
        try {
            writer.write(cmd + "\r\n");
            writer.flush();
        } catch (Exception ignored) { }
    }

    public void startPanel(){
        getParent().setLayout(new BorderLayout());
        getParent().add(this, BorderLayout.CENTER);

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        final JPanel layout = new JPanel();
        BoxLayout boxLayout = new BoxLayout(layout, BoxLayout.Y_AXIS);
        layout.setLayout(boxLayout);
        add(layout, BorderLayout.NORTH);

        JPanel statusFrame = new JPanel();
        statusFrame.setLayout(new GridBagLayout());
        statusFrame.setBorder(BorderFactory.createTitledBorder(new LineBorder(Color.CYAN), "Status"));

        status = new JLabel("Not connected");
        status.setForeground(Color.RED);
        statusFrame.add(status);


        JPanel connectionFrame = new JPanel();
        connectionFrame.setLayout(new GridLayout(2, 1));
        connectionFrame.setBorder(BorderFactory.createTitledBorder(new LineBorder(Color.CYAN), "Connection"));

        JButton b_connect = new JButton("Connect");
        JButton b_disconnect = new JButton("Disconnect");
        b_connect.setFocusable(false);
        b_disconnect.setFocusable(false);

        b_connect.addActionListener(e -> connect());
        b_disconnect.addActionListener(e -> disconnect());

        connectionFrame.add(b_connect);
        connectionFrame.add(b_disconnect);


        JPanel controllerFrame = new JPanel();
        controllerFrame.setLayout(new GridLayout(6, 1));
        controllerFrame.setBorder(BorderFactory.createTitledBorder(new LineBorder(Color.CYAN), "LiveSplit Controller"));

        JButton[] controllerButtons = {new JButton("Split"), new JButton("Reset"), new JButton("Undo split"),
                                       new JButton("Skip split"), new JButton("Pause"), new JButton("Resume")};
        String[] controls = {"startorsplit", "reset", "unsplit", "skipsplit", "pause", "resume"};

        for (int i = 0; i < controllerButtons.length; i++){
            int finalI = i; // because lambda forces my hand
            controllerButtons[i].addActionListener(e -> control(controls[finalI]));

            controllerButtons[i].setFocusable(false);
            controllerFrame.add(controllerButtons[i], BorderLayout.CENTER);
        }

        layout.add(statusFrame);
        layout.add(Box.createRigidArea(new Dimension(0, 15)));
        layout.add(connectionFrame);
        layout.add(Box.createRigidArea(new Dimension(0, 15)));
        layout.add(controllerFrame);
    }

    public void set_connected(){
        status.setText("Connected");
        status.setForeground(Color.GREEN);
    }

    public void set_disconnected(){
        status.setText("Not connected");
        status.setForeground(Color.RED);
    }
}

