package com.raidsclipboard;

import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import com.raidsclipboard.raids.Tob;
import junit.framework.TestCase;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.chat.ChatMessageManager;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static net.runelite.api.ChatMessageType.FRIENDSCHATNOTIFICATION;
import static net.runelite.api.ChatMessageType.GAMEMESSAGE;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class TobTest extends TestCase
{
    @Mock
    @Bind
    private Client client;

    @Mock
    @Bind
    private RaidsClipboardConfig raidsClipboardConfig;

    @Mock
    @Bind
    private ChatMessageManager chatMessageManager;

    @Inject
    private Tob tob;

    @Before
    public void setUp()
    {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);

        StringSelection selection = new StringSelection("");
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }

    @Test
    public void TestTobOnChatMessage()
    {
        when(client.getGameState()).thenReturn(GameState.LOGGED_IN);
        when(client.getVarbitValue(Varbits.THEATRE_OF_BLOOD)).thenReturn(2);

        Map<Integer, Object> varcmap = new HashMap<>();
        varcmap.put(330, "TobPro");
        varcmap.put(330 + 1, "TobFeeder");

        when(client.getVarcMap()).thenReturn(varcmap);

        String format = "kc: " + "$kc" +
                " deaths: " + "$deaths" +
                " size: " + "$size" +
                " reward: " + "$reward";

        String kc = "73";
        String deaths = "3";
        String size = "2";
        String reward = "450,230";
        String rewardNoComma = reward.replaceAll(",", "");

        when(raidsClipboardConfig.tobInfoFormat()).thenReturn(format);

        ChatMessage chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "<col=ff0000>TobFeeder</col> has died. Death count: <col=ff0000>1</col>.", null, 0);
        tob.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "<col=ff0000>TobFeeder</col> has logged out. Death count: <col=ff0000>2</col>.", null, 0);
        tob.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "You have died. Death count: 3.", null, 0);
        tob.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, FRIENDSCHATNOTIFICATION, "", "Your completed Theatre of Blood count is: <col=ff0000>" + kc + "</col>.", null, 0);
        tob.onChatMessage(chatMessage);

        String clipboardString = getClipboardContent();
        assertTrue(clipboardString.isEmpty());

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "Your loot is worth around <col=ff0000>" + reward + "</col> coins.", null, 0);
        tob.onChatMessage(chatMessage);

        clipboardString = getClipboardContent();
        String expected = "kc: " + kc + " deaths: " + deaths +
                " size: " + size + " reward: " + rewardNoComma;
        assertEquals(expected, clipboardString);

        format = "kc: " + "$kc" +
                " deaths: " + "$deaths";

        when(raidsClipboardConfig.tobInfoFormat()).thenReturn(format);

        kc = "100";
        deaths = "1";

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "<col=ff0000>TobFeeder</col> has died. Death count: <col=ff0000>1</col>.", null, 0);
        tob.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "Your completed Theatre of Blood count is: <col=ff0000>" + kc + "</col>.", null, 0);
        tob.onChatMessage(chatMessage);

        clipboardString = getClipboardContent();
        expected = "kc: " + kc + " deaths: " + deaths;
        assertEquals(expected, clipboardString);
    }

    private String getClipboardContent()
    {
        String clipboardString;
        try {
            clipboardString = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
        } catch (UnsupportedFlavorException | IOException e) {
            clipboardString = null;
        }

        return clipboardString;
    }
}

package com.raidsclipboard;

import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import com.raidsclipboard.raids.Toa;
import junit.framework.TestCase;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.widgets.Widget;
import net.runelite.client.chat.ChatMessageManager;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

import static net.runelite.api.ChatMessageType.FRIENDSCHATNOTIFICATION;
import static net.runelite.api.ChatMessageType.GAMEMESSAGE;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ToaTest extends TestCase
{
    @Mock
    @Bind
    private Client client;

    @Mock
    @Bind
    private RaidsClipboardConfig raidsClipboardConfig;

    @Mock
    @Bind
    private ChatMessageManager chatMessageManager;

    @Inject
    private Toa toa;

    @Before
    public void setUp()
    {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);

        StringSelection selection = new StringSelection("");
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }

    @Test
    public void TestToaOnChatMessage()
    {
        int partySize = 2;
        int raidLvl = 155;
        when(client.getVarbitValue(14345)).thenReturn(partySize);
        when(client.getVarbitValue(14380)).thenReturn(raidLvl);

        String format = "kc: " + "$kc" +
                " deaths: " + "$deaths" +
                " raid level: " + "$raid_lvl" +
                " raid type: " + "$raid_type" +
                " size: " + "$size" +
                " reward: " + "$reward";

        String kc = "73";
        String deaths = "1";
        String size = String.valueOf(partySize);
        String reward = "450,230";
        String rewardNoComma = reward.replaceAll(",", "");
        String raidType = "Entry Mode";

        when(raidsClipboardConfig.toaInfoFormat()).thenReturn(format);
        when(client.getWidget(481, 40)).thenReturn(mock(Widget.class));

        ChatMessage chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "You enter the Tombs of Amascut " + raidType + "...", null, 0);
        toa.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "<col=ff0000>Feeder</col> has died. Total deaths: <col=ff0000>1</col>.", null, 0);
        toa.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, FRIENDSCHATNOTIFICATION, "", "Your completed Tombs of Amascut: " + raidType + " count is: <col=ff0000>" + kc + "</col>.", null, 0);
        toa.onChatMessage(chatMessage);

        String clipboardString = getClipboardContent();
        assertTrue(clipboardString.isEmpty());

        chatMessage = new ChatMessage(null, GAMEMESSAGE, "", "Your loot is worth around <col=ff0000>" + reward + "</col> coins.", null, 0);
        toa.onChatMessage(chatMessage);

        clipboardString = getClipboardContent();
        String expected = "kc: " + kc +
                " deaths: " + deaths +
                " raid level: " + raidLvl +
                " raid type: " + raidType +
                " size: " + size +
                " reward: " + rewardNoComma;

        assertEquals(expected, clipboardString);
    }

    private String getClipboardContent()
    {
        String clipboardString;
        try {
            clipboardString = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
        } catch (UnsupportedFlavorException | IOException e) {
            clipboardString = null;
        }

        return clipboardString;
    }
}

package com.raidsclipboard;

import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import com.raidsclipboard.raids.Cox;
import junit.framework.TestCase;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.chat.ChatMessageManager;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

import static net.runelite.api.ChatMessageType.FRIENDSCHATNOTIFICATION;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CoxTest extends TestCase
{
    @Mock
    @Bind
    private Client client;

    @Mock
    @Bind
    private RaidsClipboardConfig raidsClipboardConfig;

    @Mock
    @Bind
    private ChatMessageManager chatMessageManager;

    @Inject
    private Cox cox;

    @Before
    public void setUp()
    {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);

        StringSelection selection = new StringSelection("");
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }

    @Test
    public void TestOnChatMessage()
    {
        when(client.getGameState()).thenReturn(GameState.LOGGED_IN);
        when(client.getVarbitValue(Varbits.IN_RAID)).thenReturn(1);

        String format = "kc: " + "$kc" +
                " total points: " + "$t_pts" +
                " personal points: " + "$p_pts" +
                " team size: " + "$size";

        String kc = "73";
        int totalPts = 82000;
        int personalPts = 35000;
        int teamSize = 5;

        when(raidsClipboardConfig.coxInfoFormat()).thenReturn(format);
        when(client.getVarbitValue(Varbits.TOTAL_POINTS)).thenReturn(totalPts);
        when(client.getVarbitValue(Varbits.PERSONAL_POINTS)).thenReturn(personalPts);
        when(client.getVarbitValue(Varbits.RAID_PARTY_SIZE)).thenReturn(teamSize);

        ChatMessage chatMessage = new ChatMessage(null, FRIENDSCHATNOTIFICATION, "", "<col=ef20ff>Congratulations - your raid is complete!</col><br>Team size: <col=ff0000>24+ players</col> Duration:</col> <col=ff0000>37:04</col> (new personal best)</col>>", null, 0);
        cox.onChatMessage(chatMessage);

        chatMessage = new ChatMessage(null, FRIENDSCHATNOTIFICATION, "", "Your completed Chambers of Xeric count is: <col=ff0000>" + kc + "</col>.", null, 0);
        cox.onChatMessage(chatMessage);

        String clipboardString = getClipboardContent();

        String expected = "kc: " + kc + " total points: " + totalPts +
                " personal points: " + personalPts + " team size: " + teamSize;
        assertEquals(expected, clipboardString);
    }

    private String getClipboardContent()
    {
        String clipboardString;
        try {
            clipboardString = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
        } catch (UnsupportedFlavorException | IOException e) {
            clipboardString = null;
        }

        return clipboardString;
    }
}

package com.raidsclipboard;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RunClientAndPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RaidsClipboardPlugin.class);
		RuneLite.main(args);
	}
}
package com.raidsclipboard;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.raidsclipboard.raids.Cox;
import com.raidsclipboard.raids.Toa;
import com.raidsclipboard.raids.Tob;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Raids Clipboard",
	description = "Copies raids info such as kc, points & deaths to clipboard"
)
public class RaidsClipboardPlugin extends Plugin
{
	@Inject
	private RaidsClipboardConfig config;

	@Inject
	private EventBus eventBus;

	@Inject
	private Cox cox;

	@Inject
	private Tob tob;

	@Inject
	private Toa toa;

	@Override
	protected void startUp() throws Exception
	{
		eventBus.register(cox);
		eventBus.register(tob);
		eventBus.register(toa);
	}

	@Override
	protected void shutDown() throws Exception
	{
		eventBus.unregister(cox);
		eventBus.unregister(tob);
		eventBus.unregister(toa);
	}

	@Provides
	RaidsClipboardConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RaidsClipboardConfig.class);
	}
}

package com.raidsclipboard.raids;

import com.raidsclipboard.RaidsClipboardConfig;
import com.raidsclipboard.data.RaidData;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;

import javax.inject.Inject;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.HashMap;
import java.util.Map;

public abstract class Raid
{
    @Inject
    protected Client client;

    @Inject
    protected ChatMessageManager chatMessageManager;

    @Inject
    protected RaidsClipboardConfig config;

    protected final Map<RaidData, String> raidData = new HashMap<>();

    protected void handleRaidInfoToClipboard(String format)
    {
        String clipboardString = copyRaidInfoToClipboard(format, raidData);
        if (config.clipboardChatMessage())
        {
            showClipboardTextGameMessage(clipboardString);
        }
    }

    private void showClipboardTextGameMessage(String str)
    {
        final String message = new ChatMessageBuilder()
                .append("Copied to clipboard: ")
                .append(str)
                .build();

        chatMessageManager.queue(
                QueuedMessage.builder()
                        .type(ChatMessageType.GAMEMESSAGE)
                        .runeLiteFormattedMessage(message)
                        .build());
    }

    private String copyRaidInfoToClipboard(String format, Map<RaidData, String> raidData)
    {
        String clipBoardString = buildClipboardString(format, raidData);
        copyStringToClipboard(clipBoardString);

        return clipBoardString;
    }

    private String buildClipboardString(String format, Map<RaidData, String> raidData)
    {
        String clipboardString = format;

        for (RaidData data : raidData.keySet())
        {
            clipboardString = data.getPattern().matcher(clipboardString).replaceAll(raidData.get(data));
        }

        return clipboardString;
    }

    private void copyStringToClipboard(String clipboardString)
    {
        StringSelection selection = new StringSelection(clipboardString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }
}

package com.raidsclipboard.raids;

import com.raidsclipboard.data.TobData;
import net.runelite.api.ChatMessageType;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.util.Text;

import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Tob extends Raid
{
    private static final int TOB_RAIDERS_VARP = 330;
    private static final int TOB_MAX_SIZE = 5;

    private static final Pattern KC_PATTERN = Pattern.compile("Your completed (.+) count is: (\\d+)\\.");
    private static final Pattern REWARD_PATTERN = Pattern.compile("Your loot is worth around (.*) coins\\.");

    private static final Pattern DEATH_SELF = Pattern.compile("You have died. Death count: \\d+\\.");
    private static final Pattern DEATH_OTHER = Pattern.compile(".* has (?:died|logged out). Death count: \\d+\\.");

    private int tobCurrentDeaths = 0;
    private int currentTobState = 0;

    @Subscribe
    public void onChatMessage(ChatMessage event)
    {
        if (isInTob() && (event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION || event.getType() == ChatMessageType.GAMEMESSAGE))
        {
            String message = Text.sanitize(Text.removeTags(event.getMessage()));

            Matcher self = DEATH_SELF.matcher(message);
            Matcher other = DEATH_OTHER.matcher(message);
            if (self.matches() || other.matches())
            {
                tobCurrentDeaths++;
                return;
            }

            Matcher matcherKc = KC_PATTERN.matcher(message);
            if (matcherKc.find())
            {
                raidData.put(TobData.KILL_COUNT, matcherKc.group(2));
                raidData.put(TobData.DEATHS, String.valueOf(tobCurrentDeaths));
                raidData.put(TobData.TEAM_SIZE, getTobTeamSize());

                if (!TobData.REWARD.getPattern().matcher(config.tobInfoFormat()).find())
                {
                    handleRaidInfoToClipboard(config.tobInfoFormat());
                }

                tobCurrentDeaths = 0;
                return;
            }

            Matcher matcherRewards = REWARD_PATTERN.matcher(message);
            if (matcherRewards.find() && TobData.REWARD.getPattern().matcher(config.tobInfoFormat()).find())
            {
                raidData.put(TobData.REWARD, matcherRewards.group(1).replaceAll(",", ""));
                handleRaidInfoToClipboard(config.tobInfoFormat());
                tobCurrentDeaths = 0;
            }
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event)
    {
        int nextState = client.getVarbitValue(Varbits.THEATRE_OF_BLOOD);
        if (currentTobState != nextState)
        {
            if (nextState == 2)
            {
                tobCurrentDeaths = 0;
            }
            currentTobState = nextState;
        }
    }

    private boolean isInTob()
    {
        return (client.getGameState() == GameState.LOGGED_IN &&
                ((client.getVarbitValue(Varbits.THEATRE_OF_BLOOD) == 2) || (client.getVarbitValue(Varbits.THEATRE_OF_BLOOD) == 3)));
    }

    private String getTobTeamSize()
    {
        int teamSize = 0;
        Map<Integer, Object> varcmap = client.getVarcMap();
        for (int i = 0; i < TOB_MAX_SIZE; i++) {
            Integer playervarp = TOB_RAIDERS_VARP + i;
            if (varcmap.containsKey(playervarp)) {
                String tName = Text.sanitize(varcmap.get(playervarp).toString());
                if (tName != null && !tName.equals("")) {
                    teamSize++;
                }
            }
        }

        return String.valueOf(teamSize);
    }
}

package com.raidsclipboard.raids;

import com.raidsclipboard.data.ToaData;
import lombok.RequiredArgsConstructor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.util.Text;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Toa extends Raid
{
    @RequiredArgsConstructor
    enum RaidType
    {
        ENTRY("Entry Mode"),
        NORMAL("Normal Mode"),
        EXPERT("Expert Mode");

        private final String name;
    }

    private static final int RAID_LEVEL_VAR = 14380;
    private static final int PARTY_SIZE_VAR = 14345;

    private static final Pattern KC_PATTERN = Pattern.compile("Your completed (.+) count is: (\\d+)\\.");
    private static final Pattern ENTRY_PATTERN = Pattern.compile("You enter the Tombs of Amascut");
    private static final Pattern REWARD_PATTERN = Pattern.compile("Your loot is worth around (.*) coins\\.");

    private static final Pattern DEATH_SELF = Pattern.compile("You have died. Total deaths: \\d+\\.");
    private static final Pattern DEATH_OTHER = Pattern.compile(".* has (?:died|logged out). Total deaths: \\d+\\.");

    private static final int WIDGET_PARENT_ID = 481;
    private static final int WIDGET_CHILD_ID = 40;

    private int currentDeaths = 0;

    @Subscribe
    public void onChatMessage(ChatMessage event)
    {
        if (event.getType() == ChatMessageType.GAMEMESSAGE)
        {
            String message = Text.sanitize(Text.removeTags(event.getMessage()));

            Matcher entry = ENTRY_PATTERN.matcher(message);
            if (entry.find())
            {
                String raidType = RaidType.NORMAL.name;
                if (message.contains(RaidType.ENTRY.name))
                {
                    raidType = RaidType.ENTRY.name;
                }
                else if (message.contains(RaidType.EXPERT.name))
                {
                    raidType = RaidType.EXPERT.name;
                }

                raidData.put(ToaData.RAID_TYPE, raidType);
                currentDeaths = 0;
                return;
            }
        }

        if (isInToa() && (event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION || event.getType() == ChatMessageType.GAMEMESSAGE))
        {
            String message = Text.sanitize(Text.removeTags(event.getMessage()));

            Matcher self = DEATH_SELF.matcher(message);
            Matcher other = DEATH_OTHER.matcher(message);
            if (self.matches() || other.matches())
            {
                currentDeaths++;
                return;
            }

            Matcher matcherKc = KC_PATTERN.matcher(message);
            if (matcherKc.find())
            {
                raidData.put(ToaData.KILL_COUNT, matcherKc.group(2));
                raidData.put(ToaData.DEATHS, String.valueOf(currentDeaths));

                int teamSize = client.getVarbitValue(PARTY_SIZE_VAR);
                int raidLvl = client.getVarbitValue(RAID_LEVEL_VAR);

                raidData.put(ToaData.TEAM_SIZE, String.valueOf(teamSize));
                raidData.put(ToaData.RAID_LEVEL, String.valueOf(raidLvl));

                if (!ToaData.REWARD.getPattern().matcher(config.toaInfoFormat()).find())
                {
                    handleRaidInfoToClipboard(config.toaInfoFormat());
                }
                return;
            }

            Matcher matcherRewards = REWARD_PATTERN.matcher(message);
            if (matcherRewards.find() && ToaData.REWARD.getPattern().matcher(config.toaInfoFormat()).find())
            {
                raidData.put(ToaData.REWARD, matcherRewards.group(1).replaceAll(",", ""));
                handleRaidInfoToClipboard(config.toaInfoFormat());
            }
        }
    }

    private boolean isInToa()
    {
        Widget w = client.getWidget(WIDGET_PARENT_ID, WIDGET_CHILD_ID);
        return (w != null && !w.isHidden());
    }
}

package com.raidsclipboard.raids;

import com.raidsclipboard.data.CoxData;
import net.runelite.api.ChatMessageType;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.util.Text;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Cox extends Raid
{
    private static final String COMPLETED_MESSAGE = "Congratulations - your raid is complete!";
    private static final Pattern KC_PATTERN = Pattern.compile("Your completed (.+) count is: (\\d+)\\.");

    @Subscribe
    public void onChatMessage(ChatMessage event)
    {
        if (isInCox() && (event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION || event.getType() == ChatMessageType.GAMEMESSAGE))
        {
            String message = Text.sanitize(Text.removeTags(event.getMessage()));
            if (message.startsWith(COMPLETED_MESSAGE))
            {
                int totalPoints = client.getVarbitValue(Varbits.TOTAL_POINTS);
                int personalPoints = client.getVarbitValue(Varbits.PERSONAL_POINTS);
                int teamSize = client.getVarbitValue(Varbits.RAID_PARTY_SIZE);

                raidData.put(CoxData.TOTAL_POINTS, String.valueOf(totalPoints));
                raidData.put(CoxData.PERSONAL_POINTS, String.valueOf(personalPoints));
                raidData.put(CoxData.TEAM_SIZE, String.valueOf(teamSize));
                return;
            }

            Matcher matcher = KC_PATTERN.matcher(message);
            if (matcher.find())
            {
                raidData.put(CoxData.KILL_COUNT, matcher.group(2));
                handleRaidInfoToClipboard(config.coxInfoFormat());
            }
        }
    }

    private boolean isInCox()
    {
        return (client.getGameState() == GameState.LOGGED_IN && client.getVarbitValue(Varbits.IN_RAID) == 1);
    }
}

package com.raidsclipboard.data;

import java.util.regex.Pattern;

public enum CoxData implements RaidData
{
    PERSONAL_POINTS(Pattern.compile("\\$p_pts")),
    TOTAL_POINTS(Pattern.compile("\\$t_pts")),
    KILL_COUNT(Pattern.compile("\\$kc")),
    TEAM_SIZE(Pattern.compile("\\$size"));

    private final Pattern pattern;

    CoxData(Pattern pattern)
    {
        this.pattern = pattern;
    }

    public Pattern getPattern()
    {
        return pattern;
    }
}

package com.raidsclipboard.data;

import java.util.regex.Pattern;

public enum ToaData implements RaidData
{
    KILL_COUNT(Pattern.compile("\\$kc")),
    DEATHS(Pattern.compile("\\$deaths")),
    RAID_LEVEL(Pattern.compile("\\$raid_lvl")),
    RAID_TYPE(Pattern.compile("\\$raid_type")),
    REWARD(Pattern.compile("\\$reward")),
    TEAM_SIZE(Pattern.compile("\\$size"));

    private final Pattern pattern;

    ToaData(Pattern pattern)
    {
        this.pattern = pattern;
    }

    public Pattern getPattern()
    {
        return pattern;
    }
}

package com.raidsclipboard.data;

import java.util.regex.Pattern;

public interface RaidData
{
    Pattern getPattern();
}

package com.raidsclipboard.data;

import java.util.regex.Pattern;

public enum TobData implements RaidData
{
    DEATHS(Pattern.compile("\\$deaths")),
    REWARD(Pattern.compile("\\$reward")),
    KILL_COUNT(Pattern.compile("\\$kc")),
    TEAM_SIZE(Pattern.compile("\\$size"));

    private final Pattern pattern;

    TobData(Pattern pattern)
    {
        this.pattern = pattern;
    }

    public Pattern getPattern()
    {
        return pattern;
    }
}

package com.raidsclipboard;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("raidsclipboard")
public interface RaidsClipboardConfig extends Config
{
	@ConfigItem(
			keyName = "clipboardChatMessage",
			name = "Show chat message when copied",
			description = "Adds a chat message with the raids info that is copied to the clipboard.",
			position = 0
	)
	default boolean clipboardChatMessage()
	{
		return false;
	}

	@ConfigItem(
			keyName = "coxInfoFormat",
			name = "CoX clipboard format",
			description = "Type in the format of the info to clipboard.<br>" +
					"Available variables:<br>" +
					"$t_pts: total points<br>" +
					"$p_pts: personal points<br>" +
					"$kc: kill count<br>" +
					"$size: team size"
	)

	default String coxInfoFormat()
	{
		return "";
	}

	@ConfigItem(
			keyName = "tobInfoFormat",
			name = "ToB clipboard format",
			description = "Type in the format of the info to clipboard.<br>" +
					"Available variables:<br>" +
					"$deaths: total deaths<br>" +
					"$kc: kill count<br>" +
					"$size: team size<br>" +
					"$reward: reward value"
	)
	default String tobInfoFormat()
	{
		return "";
	}

	@ConfigItem(
			keyName = "toaInfoFormat",
			name = "ToA clipboard format",
			description = "Type in the format of the info to clipboard.<br>" +
					"Available variables:<br>" +
					"$kc: kill count<br>" +
					"$deaths: total deaths<br>" +
					"$raid_lvl: raid level<br>" +
					"$raid_type: raid type<br>" +
					"$reward: reward value" +
					"$size: team size<br>"
	)
	default String toaInfoFormat()
	{
		return "";
	}
}

