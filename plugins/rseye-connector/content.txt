package com.rseye;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(ConnectorPlugin.class);
		RuneLite.main(args);
	}
}
package com.rseye.io;

import com.google.gson.Gson;
import com.rseye.ConnectorConfig;
import com.rseye.util.Postable;
import okhttp3.*;
import okhttp3.internal.annotations.EverythingIsNonNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.UUID;

public class RequestHandler {
    public static final Logger log = LoggerFactory.getLogger(RequestHandler.class);
    private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
    private final OkHttpClient client;
    private final Gson gson;
    private final ConnectorConfig config;

    public RequestHandler(OkHttpClient client, Gson gson, ConnectorConfig config) {
        this.client = client;
        this.gson = gson;
        this.config = config;
    }

    public <T extends Postable> void submit(T update) {
        Request request = new Request.Builder()
                .url(config.baseEndpoint() + update.endpoint().location)
                .header("Authorization", "Bearer: " + config.bearerToken())
                .header("X-Request-Id", UUID.randomUUID().toString())
                .post(RequestBody.create(JSON, gson.toJson(update)))
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            @EverythingIsNonNull
            public void onResponse(Call call, Response response) {
                log.debug("Call response: Endpoint: {}, Contents: {}", update.endpoint().ordinal(), response.body() != null ? response.body().toString() : "");
                response.close();
            }
            @Override
            @EverythingIsNonNull
            public void onFailure(Call call, IOException e) {
                log.debug("Issue detected while posting to endpoint: {}", e.getMessage());
            }
        });
    }

    public enum Endpoint {
        POSITION_UPDATE("position_update/"),
        LOGIN_UPDATE("login_update/"),
        STAT_UPDATE("stat_update/"),
        QUEST_UPDATE("quest_update/"),
        BANK_UPDATE("bank_update/"),
        LOOT_UPDATE("loot_update/"),
        INVENTORY_UPDATE("inventory_update/"),
        EQUIPMENT_UPDATE("equipment_update/"),
        DEATH_UPDATE("death_update/"),
        OVERHEAD_UPDATE("overhead_update/"),
        SKULL_UPDATE("skull_update/");

        public final String location;
        Endpoint(String location) {
            this.location = location;
        }
    }
}

package com.rseye.util;

import com.rseye.io.RequestHandler;

public interface Postable {
    RequestHandler.Endpoint endpoint();
}

package com.rseye;

import net.runelite.client.config.*;

@ConfigGroup("rseye-connector")
public interface ConnectorConfig extends Config {
	@ConfigSection(
			position = 0,
			name = "Endpoint Configuration",
			description = "Endpoint POST configuration"
	)
	String apiConfig = "apiConfig";

	@ConfigSection(
			position = 1,
			name = "Data Toggles",
			description = "Enable/Disable which data is sent"
	)
	String dataToggles = "dataToggles";

	@ConfigSection(
			position = 2,
			name = "Data Frequency",
			description = "Set the frequency that data is sent"
	)
	String dataFrequency = "dataFrequency";

	@ConfigItem(
			position = 0,
			keyName = "Base Endpoint",
			name = "Endpoint",
			description = "Endpoint to send data to: (example: http://localhost/api/v1/)",
			section = apiConfig
	)
	default String baseEndpoint() {
		return "http://localhost/api/v1/";
	}

	@ConfigItem(
			position = 1,
			keyName = "Bearer Token",
			name = "bearerToken",
			description = "Token provided to endpoint",
			section = apiConfig
	)
	default String bearerToken() {
		return "token";
	}

	@ConfigItem(
			position = 0,
			keyName = "Send Position Data",
			name = "Position Data",
			description = "Toggle to send/omit player position data",
			section = dataToggles
	)
	default boolean positionData() {
		return true;
	}

	@ConfigItem(
			position = 1,
			keyName = "Send Login Data",
			name = "Login Data",
			description = "Toggle to send/omit login state data",
			section = dataToggles
	)
	default boolean loginData() {
		return true;
	}

	@ConfigItem(
			position = 2,
			keyName = "Send Stat Data",
			name = "Stat Data",
			description = "Toggle to send/omit level-xp-boostedLevel data",
			section = dataToggles
	)
	default boolean statsData() {
		return true;
	}

	@ConfigItem(
			position = 3,
			keyName = "Send Quest Data",
			name = "Quest Data",
			description = "Toggle to send/omit quest data",
			section = dataToggles
	)
	default boolean questData() {
		return true;
	}

	@ConfigItem(
			position = 4,
			keyName = "Send Bank Data",
			name = "Bank Data",
			description = "Toggle to send/omit bank data",
			section = dataToggles
	)
	default boolean bankData() {
		return true;
	}

	@ConfigItem(
			position = 5,
			keyName = "Send Loot Data",
			name = "Loot Data",
			description = "Toggle to send/omit loot data",
			section = dataToggles
	)
	default boolean lootData() {
		return true;
	}

	@ConfigItem(
			position = 6,
			keyName = "Send Inventory Data",
			name = "Inventory Data",
			description = "Toggle to send/omit inventory data",
			section = dataToggles
	)
	default boolean inventoryData() {
		return true;
	}

	@ConfigItem(
			position = 7,
			keyName = "Send Equipment Data",
			name = "Equipment Data",
			description = "Toggle to send/omit equipment data",
			section = dataToggles
	)
	default boolean equipmentData() {
		return true;
	}

	@ConfigItem(
			position = 8,
			keyName = "Send Death Data",
			name = "Death Data",
			description = "Toggle to send/omit death data",
			section = dataToggles
	)
	default boolean deathData() {
		return true;
	}

	@ConfigItem(
			position = 9,
			keyName = "Send Overhead Data",
			name = "Overhead Data",
			description = "Toggle to send/omit player overhead icon data",
			section = dataToggles
	)
	default boolean overheadData() {
		return true;
	}

	@ConfigItem(
			position = 10,
			keyName = "Send Skull Data",
			name = "Skull Data",
			description = "Toggle to send/omit player skull icon data",
			section = dataToggles
	)
	default boolean skullData() {
		return true;
	}

	@ConfigItem(
			position = 0,
			keyName = "Position Data Frequency",
			name = "Position Data",
			description = "How often to send position data",
			section = dataFrequency
	)
	@Units(Units.TICKS)
	default int positionDataFrequency() {
		return 1;
	}

	@ConfigItem(
			position = 1,
			keyName = "Overhead Data Frequency",
			name = "Overhead Data",
			description = "How often to send overhead icon data",
			section = dataFrequency
	)
	@Units(Units.TICKS)
	default int overheadDataFrequency() {
		return 1;
	}

	@ConfigItem(
			position = 2,
			keyName = "Skull Data Frequency",
			name = "Skull Data",
			description = "How often to send skull icon data",
			section = dataFrequency
	)
	@Units(Units.TICKS)
	default int skullDataFrequency() {
		return 1;
	}
}

package com.rseye;

import com.google.gson.Gson;
import com.google.inject.Provides;
import com.rseye.io.RequestHandler;
import com.rseye.update.*;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.events.PlayerLootReceived;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import okhttp3.OkHttpClient;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
@PluginDescriptor(name = "rseye-connector")
public class ConnectorPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private Gson gson;

	@Inject
	private ConnectorConfig config;

	@Inject
	private ItemManager itemManager;

	private AtomicInteger ticks = new AtomicInteger(0);
	private RequestHandler requestHandler;
	private GameState gameState = GameState.UNKNOWN;
	private Player player;
	private PositionUpdate lastPositionUpdate;
	private CopyOnWriteArrayList<StatChanged> lastStatUpdate;
	private CopyOnWriteArrayList<QuestUpdate.Quest> lastQuestStateUpdate;
	private ConcurrentHashMap<Integer, QuestUpdate.Quest> questStates;
	private ItemContainer lastBankState;
	private OverheadUpdate lastOverheadState;
	private SkullUpdate lastSkullState;
	private boolean isBankOpen = false;

	@Override
	protected void startUp() {
		log.info("rseye-connector started!");
		this.ticks = new AtomicInteger(0);
		this.requestHandler = new RequestHandler(okHttpClient, gson, config);
		this.lastStatUpdate = new CopyOnWriteArrayList<>();
		this.lastQuestStateUpdate = new CopyOnWriteArrayList<>();
		this.questStates = new ConcurrentHashMap<>();
		this.lastOverheadState = new OverheadUpdate("", null);
		this.lastSkullState = new SkullUpdate("", -1);
	}

	@Override
	protected void shutDown() {
		log.info("rseye-connector stopped!");
		this.ticks = null;
		this.requestHandler = null;
		this.gameState = GameState.UNKNOWN;
		this.lastStatUpdate = null;
		this.lastQuestStateUpdate = null;
		this.questStates = null;
		this.lastOverheadState = null;
		this.lastSkullState = null;
	}

	@Subscribe
	public void onGameTick(final GameTick tick) {
		if(playerIsNull() || gameState != GameState.LOGGED_IN){
			return; // player is set in #onGameStateChanged
		}

		if(ticks.get() % config.positionDataFrequency() == 0) {
			processPositionUpdate();
		}

		if(ticks.get() % config.overheadDataFrequency() == 0) {
			processOverheadUpdate();
		}

		if(ticks.get() % config.skullDataFrequency() == 0) {
			processSkullUpdate();
		}

		processStatUpdate(); // group together stat changes since there can be multiple per tick
		processQuestUpdate();
		processBankUpdate();

		ticks.set(ticks.get() > 144000 ? 0 : ticks.get() + 1); // reset tick count after 24 hours - otherwise we'll run into an int overflow in roughly 45 years.
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged gsc) {
		gameState = gsc.getGameState();

		// if state is login_screen, clear player. this happens if the player logs out (not hop)
		if(gameState == GameState.LOGIN_SCREEN) {
			ticks.set(0);
			player = null;
			questStates = new ConcurrentHashMap<>();
			return;
		}

		if(gameState == GameState.LOGGED_IN) {
			ticks.set(0);
			player = client.getLocalPlayer();
			questStates = new ConcurrentHashMap<>(); // re-init quest states else the initial quest data will only ever be sent once, unlike other similar events which fire every time a "LOGGED_IN" event occurs
			return;
		}

		if(playerIsNull() || !config.loginData()) {
			return;
		}

		requestHandler.submit(new LoginUpdate(player.getName(), gsc.getGameState()));
	}

	@Subscribe
	public void onStatChanged(final StatChanged statChanged) {
		lastStatUpdate.add(statChanged);
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged itemContainerChanged) {
		if(itemContainerChanged.getItemContainer() == client.getItemContainer(InventoryID.INVENTORY)) {
			processInventoryUpdate(itemContainerChanged); // process inventory
			return;
		}
		if(itemContainerChanged.getItemContainer() == client.getItemContainer(InventoryID.EQUIPMENT)) {
			processEquipmentUpdate(itemContainerChanged); // process equipment
			return;
		}

		if(playerIsNull() || !config.lootData()) {
			return;
		}

		if(itemContainerChanged.getItemContainer() == client.getItemContainer(itemContainerChanged.getContainerId())) {
			LootUpdate lootUpdate = new LootUpdate(player.getName(), itemContainerChanged.getContainerId(), itemContainerChanged.getItemContainer());
			if(lootUpdate.getItems().size() < 1) {
				return;
			}
			requestHandler.submit(lootUpdate);
		}
	}

	@Subscribe
	public void onNpcLootReceived(final NpcLootReceived npcLootReceived) {
		if(playerIsNull() || !config.lootData()) {
			return;
		}

		requestHandler.submit(new LootUpdate(player.getName(), npcLootReceived));
	}

	@Subscribe
	public void onPlayerLootReceived(final PlayerLootReceived playerLootReceived) {
		if(playerIsNull() || !config.lootData()) {
			return;
		}

		requestHandler.submit(new LootUpdate(player.getName(), playerLootReceived));
	}

	@Subscribe
	public void onActorDeath(final ActorDeath actorDeath) {
		if(playerIsNull() || !config.deathData()) {
			return;
		}

		if(actorDeath.getActor().getName() != null && actorDeath.getActor().getName().equals(player.getName())) {
			requestHandler.submit(new DeathUpdate(player.getName()));
		}
	}

	private void processPositionUpdate() {
		if(playerIsNull() || !config.positionData()) {
			return;
		}

		if(lastPositionUpdate == null || !player.getWorldLocation().equals(lastPositionUpdate.getPosition())) {
			requestHandler.submit(lastPositionUpdate = new PositionUpdate(player.getName(), player.getWorldLocation()));
		}
	}

	private void processStatUpdate() {
		if(playerIsNull() || !config.statsData()) {
			lastStatUpdate.clear(); // stops lastStateUpdate becoming an issue if config.statsData is false
			return;
		}

		if(!lastStatUpdate.isEmpty()) {
			requestHandler.submit(new StatUpdate(player.getName(), player.getCombatLevel(), lastStatUpdate));
			lastStatUpdate.clear();
		}
	}

	private void processQuestUpdate() {
		if(playerIsNull() || !config.questData()) {
			return;
		}

		for(Quest quest: Quest.values()) {
			QuestUpdate.Quest existingObject = questStates.getOrDefault(quest.getId(), null);
			QuestUpdate.Quest newObject = new QuestUpdate.Quest(quest.getId(), quest.getName(), quest.getState(client));
			if(existingObject == null || !existingObject.getState().equals(newObject.getState())) {
				questStates.put(quest.getId(), newObject);
				lastQuestStateUpdate.add(newObject);
			}
		}
		if(!lastQuestStateUpdate.isEmpty()) {
			requestHandler.submit(new QuestUpdate(player.getName(), client.getVarpValue(VarPlayer.QUEST_POINTS), lastQuestStateUpdate));
			lastQuestStateUpdate.clear();
		}
	}

	private void processBankUpdate() {
		if(playerIsNull() || !config.bankData()) {
			return;
		}

		if(client.getWidget(ComponentID.BANK_ITEM_CONTAINER) != null) {
			isBankOpen = true;
			lastBankState = client.getItemContainer(InventoryID.BANK);
			return;
		}
		if(isBankOpen && lastBankState != null) {
			isBankOpen = false;
			List<Item> items = Arrays.asList(lastBankState.getItems());
			requestHandler.submit(new BankUpdate(player.getName(), items));
		}
	}

	private void processInventoryUpdate(ItemContainerChanged icc) {
		if(playerIsNull() || !config.inventoryData()) {
			return;
		}

		List<Item> items = Arrays.asList(icc.getItemContainer().getItems());
		requestHandler.submit(new InventoryUpdate(player.getName(), items));
	}

	private void processEquipmentUpdate(ItemContainerChanged icc) {
		if(playerIsNull() || !config.equipmentData()) {
			return;
		}

		List<Item> items = Arrays.asList(icc.getItemContainer().getItems());
		HashMap<EquipmentInventorySlot, Item> equipped = new HashMap<>();
		for(EquipmentInventorySlot equipmentInventorySlot : EquipmentInventorySlot.values()) {
			if(equipmentInventorySlot.getSlotIdx() < items.size()) {
				Item item = items.get(equipmentInventorySlot.getSlotIdx());
				if(item.getId() > -1 && item.getQuantity() > 0) {
					equipped.put(equipmentInventorySlot, item);
				}
			}
		}
		requestHandler.submit(new EquipmentUpdate(player.getName(), equipped));
	}

	private void processOverheadUpdate() {
		if(playerIsNull() || !config.overheadData()) {
			return;
		}

		if(lastOverheadState.getOverhead() != null && !lastOverheadState.getOverhead().equals(player.getOverheadIcon())
				|| lastOverheadState.getOverhead() == null && player.getOverheadIcon() != null) {
			requestHandler.submit(lastOverheadState = new OverheadUpdate(player.getName(), player.getOverheadIcon()));
		}
	}

	private void processSkullUpdate() {
		if(playerIsNull() || !config.skullData()) {
			return;
		}

		if(lastSkullState.getSkull() != -1 && lastSkullState.getSkull() != player.getSkullIcon()
				|| lastSkullState.getSkull() == -1 && player.getSkullIcon() != -1) {
			requestHandler.submit(lastSkullState = new SkullUpdate(player.getName(), player.getSkullIcon()));
		}
	}

	private boolean playerIsNull() {
		return player == null || player.getName() == null;
	}

	@Provides
	ConnectorConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ConnectorConfig.class);
	}
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.events.PlayerLootReceived;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class LootUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private String lootType;

    @Getter
    @Setter
    private Integer entityId;

    @Getter
    @Setter
    private String entityName;

    @Getter
    @Setter
    private List<Item> items = new ArrayList<>();

    public LootUpdate(String username, NpcLootReceived npcLootReceived) {
        this.username = username;
        this.lootType = "NPC";
        this.entityId = npcLootReceived.getNpc().getId();
        this.entityName = npcLootReceived.getNpc().getName();
        npcLootReceived.getItems().forEach(itemStack -> this.items.add(new Item(itemStack.getId(), itemStack.getQuantity())));
    }

    public LootUpdate(String username, PlayerLootReceived playerLootReceived) {
        this.username = username;
        this.lootType = "Player";
        this.entityId = playerLootReceived.getPlayer().getId();
        this.entityName = playerLootReceived.getPlayer().getName();
        playerLootReceived.getItems().forEach(itemStack -> this.items.add(new Item(itemStack.getId(), itemStack.getQuantity())));
    }

    public LootUpdate(String username, int type, ItemContainer itemContainer) {
        this.username = username;
        if(type == InventoryID.BARROWS_REWARD.getId()) {
            this.lootType = "Barrows";
            this.items.addAll(Arrays.asList(itemContainer.getItems()));
            return;
        }
        if(type == InventoryID.CHAMBERS_OF_XERIC_CHEST.getId()) {
            this.lootType = "Chambers of Xeric";
            this.items.addAll(Arrays.asList(itemContainer.getItems()));
            return;
        }
        if(type == InventoryID.THEATRE_OF_BLOOD_CHEST.getId()) {
            this.lootType = "Theatre of Blood";
            this.items.addAll(Arrays.asList(itemContainer.getItems()));
            return;
        }
        if(type == InventoryID.TOA_REWARD_CHEST.getId()) {
            this.lootType = "Tombs of Amascut";
            this.items.addAll(Arrays.asList(itemContainer.getItems()));
            return;
        }
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.LOOT_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Item;

import java.util.List;

public class BankUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private List<Item> items;

    public BankUpdate(String username, List<Item> items) {
        this.username = username;
        this.items = items;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.BANK_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.coords.WorldPoint;

public class PositionUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private WorldPoint position;

    public PositionUpdate(String username, WorldPoint position) {
        this.username = username;
        this.position = position;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.POSITION_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;

public class SkullUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private int skull;

    public SkullUpdate(String username, int skull) {
        this.username = username;
        this.skull = skull;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.SKULL_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;

public class DeathUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    public DeathUpdate(String username) {
        this.username = username;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.DEATH_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.GameState;

public class LoginUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private GameState state;

    public LoginUpdate(String username, GameState state) {
        this.username = username;
        this.state = state;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.LOGIN_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Item;

import java.util.List;

public class InventoryUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private List<Item> items;

    public InventoryUpdate(String username, List<Item> items) {
        this.username = username;
        this.items = items;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.INVENTORY_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Item;

import java.util.HashMap;

public class EquipmentUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private HashMap<EquipmentInventorySlot, Item> items;

    public EquipmentUpdate(String username, HashMap<EquipmentInventorySlot, Item> items) {
        this.username = username;
        this.items = items;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.EQUIPMENT_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.HeadIcon;

public class OverheadUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private HeadIcon overhead;

    public OverheadUpdate(String username, HeadIcon overhead) {
        this.username = username;
        this.overhead = overhead;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.OVERHEAD_UPDATE;
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.QuestState;

import java.util.concurrent.CopyOnWriteArrayList;

public class QuestUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private int questPoints;

    @Getter
    @Setter
    private CopyOnWriteArrayList<Quest> questChanges;

    public QuestUpdate(String username, int questPoints, CopyOnWriteArrayList<Quest> questChanges) {
        this.username = username;
        this.questPoints = questPoints;
        this.questChanges = questChanges;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.QUEST_UPDATE;
    }

    /**
     * QuestChanges inner Quest class used for comparison
     */
    public static class Quest {
        @Getter
        @Setter
        private Integer id;

        @Getter
        @Setter
        private String name;

        @Getter
        @Setter
        private QuestState state;

        public Quest(Integer id, String name, QuestState state) {
            this.id = id;
            this.name = name;
            this.state = state;
        }
    }
}

package com.rseye.update;

import com.rseye.io.RequestHandler;
import com.rseye.util.Postable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.events.StatChanged;

import java.util.concurrent.CopyOnWriteArrayList;

public class StatUpdate implements Postable {
    @Getter
    @Setter
    private String username;

    @Getter
    @Setter
    private int combatLevel;

    @Getter
    @Setter
    private CopyOnWriteArrayList<StatChanged> statChanges;

    public StatUpdate(String username, int combatLevel, CopyOnWriteArrayList<StatChanged> statChanges) {
        this.username = username;
        this.combatLevel = combatLevel;
        this.statChanges = statChanges;
    }

    @Override
    public RequestHandler.Endpoint endpoint() {
        return RequestHandler.Endpoint.STAT_UPDATE;
    }
}

