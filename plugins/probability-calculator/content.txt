package pharros.probabilitycalculator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ProbabilityCalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ProbabilityCalculatorPlugin.class);
		RuneLite.main(args);
	}
}
package pharros.probabilitycalculator;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.swing.border.EmptyBorder;
import java.awt.*;

class ProbabilityCalculatorPanel extends PluginPanel
{

    private ProbabilityCalculatorInputArea inputArea;
    private ProbabilityCalculatorOutputArea outputArea;

    ProbabilityCalculatorPanel(ProbabilityCalculatorInputArea inputArea, ProbabilityCalculatorOutputArea outputArea)
    {
        super();
        this.inputArea = inputArea;
        this.outputArea = outputArea;
        setBorder(new EmptyBorder(10, 10, 10, 10));
        setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 0;

        inputArea.setBorder(new EmptyBorder(12, 0, 12, 0));
        inputArea.setBackground(ColorScheme.DARK_GRAY_COLOR);

        add(inputArea, c);
        c.gridy++;
        add(outputArea, c);
        c.gridy++;
    }

    /*
    void init(ProbabilityCalculatorConfig config) {

    }
    */

}

package pharros.probabilitycalculator;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("probability_calculator")
public interface ProbabilityCalculatorConfig extends Config
{
	@Range(max = 10)
	@ConfigItem(
		keyName = "decimalPlaces",
		name = "Decimal Places",
		description = "The maximum number of decimal places to round the output up to"
	)
	default int getDecimalPlaces()
	{
		return 2;
	}
}

package pharros.probabilitycalculator;

import lombok.Setter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;

import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.BorderFactory;
import java.awt.*;
import java.text.DecimalFormat;

@Setter
public class ProbabilityCalculatorOutputArea extends JPanel
{

    private JTextArea textArea;
    private double atLeastChance;
    private double zeroChance;
    private double exactChance;
    private long killCount;
    private long dropsReceived;
    private double dropRate;
    private String strAtLeastChance;
    private String strExactChance;
    private String strZeroChance;
    private String outputMsg;
    private DecimalFormat df;
    private String dfPattern;
    private final ProbabilityCalculatorConfig config;
    private StringBuilder strBldr;

    ProbabilityCalculatorOutputArea(double dropRate, int killCount, int dropsReceived, ProbabilityCalculatorConfig config)
    {
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createLineBorder(ColorScheme.DARKER_GRAY_COLOR, 5));
        setBackground(ColorScheme.DARK_GRAY_HOVER_COLOR);

        this.killCount = killCount;
        this.dropsReceived = dropsReceived;
        this.dropRate = dropRate;
        this.config = config;

        updatedfPattern();

        calculateProbabilities();

        textArea = new JTextArea(outputMsg);
        textArea.setEditable(false);
        textArea.setFont(FontManager.getRunescapeBoldFont());
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        add(textArea);

    }

    private double nCx(double n, double x)
    {

        if (x > n / 2)
        {
            x = n - x;
        }

        double ret = 1.0;
        for (int i = 1; i <= x; i++)
        {
            ret *= (n - x + i);
            ret /= i;
        }

        return ret;
         /*
         //alternative method of computing nCx
        if (x < 0 || x > n) {
            return 0;
        }
        if (x == 0 || x == n) {
            return 1;
        }
        x = Math.min(x, n-x);
        double c = 1.0;
        for (int i = 0; i <= x-1; i++) {
            c = c * (n - i)/(i + 1);
        }
        return c;
        */
    }

    private double binomialProb(double n, double x, double p)
    {
        return nCx(n, x) * Math.pow(p, x) * (Math.pow(1.0 - p, n - x));
    }

    void calculateProbabilities()
    {
        if (killCount < dropsReceived)
        {
            outputMsg = "You've somehow cheated the RNG gods and managed to get more drops than you got kills. What is this sorcery?!";
        }
        else if (dropRate >= 1.0 || dropRate <= 0.0)
        {
            outputMsg = "Please use a drop rate value that is between 0.0 and 1.0, exclusively.";
        }
        else
        {
            exactChance = binomialProb(killCount, dropsReceived, dropRate);
            if (Double.isNaN(exactChance))
            {
                outputMsg = "Your input for kill count or drops received is too large for this calculator. Please user smaller amounts.";
                return;
            }
            zeroChance = Math.pow(1.0 - dropRate, killCount);
            if (Double.isNaN(zeroChance))
            {
                outputMsg = "Your input for kill count or drops received is too large for this calculator. Please user smaller amounts.";
                return;
            }
            if (dropsReceived == 1.0)
            {
                atLeastChance = 1.0 - zeroChance;
            }
            else
            {
                atLeastChance = 0.0;
                for (int i = 0; i < dropsReceived; i++)
                {
                    atLeastChance += binomialProb(killCount, i, dropRate);
                }
                atLeastChance = 1.0 - atLeastChance;
                if (Double.isNaN(atLeastChance))
                {
                    outputMsg = "Your input for kill count or drops received is too large for this calculator. Please user smaller amounts.";
                    return;
                }
            }

            strAtLeastChance = df.format(Math.abs(atLeastChance * 100.0));
            if (strAtLeastChance.equals("0") || strAtLeastChance.equals("100"))
            {
                strAtLeastChance = "~" + strAtLeastChance;
            }
            strExactChance = df.format(Math.abs(exactChance * 100.0));
            if (strExactChance.equals("0") || strExactChance.equals("100"))
            {
                strExactChance = "~" + strExactChance;
            }
            strZeroChance = df.format(Math.abs(zeroChance * 100.0));
            if (strZeroChance.equals("0") || strZeroChance.equals("100"))
            {
                strZeroChance = "~" + strZeroChance;
            }

            outputMsg = "At " + killCount + " kill(s), " + dropsReceived + " drop(s), and a drop rate of " + dropRate + ", your chances are:\n\n" +
                "Chance to get at least " + dropsReceived + " drop(s):\n" + strAtLeastChance + "%\n\n" +
                "Chance to get exactly " + dropsReceived + " drop(s):\n" + strExactChance + "%\n\n" +
                "Chance to get zero drops:\n" + strZeroChance + "%\n\n" + "==========================\n\n" + "Expected drop(s) for given input:\n" + (int)Math.round(dropRate*killCount) +
                "\n\nExpected kill count for given input:\n" + (int)Math.ceil(dropsReceived/dropRate);
        }
    }

    void updateTextArea()
    {
        remove(textArea);
        updatedfPattern();
        calculateProbabilities();
        textArea = new JTextArea(outputMsg);
        textArea.setEditable(false);
        textArea.setFont(FontManager.getRunescapeBoldFont());
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        add(textArea);
        revalidate();
        repaint();
    }

    private void updatedfPattern()
    {
        if (config.getDecimalPlaces() > 0)
        {
            strBldr = new StringBuilder();
            strBldr.append("#.");
            for (int i = 0; i < config.getDecimalPlaces(); i++)
            {
                strBldr.append("#");
            }
            dfPattern = strBldr.toString();
        }
        else
        {
            dfPattern = "#";
        }
        df = new DecimalFormat(dfPattern);
    }

}

package pharros.probabilitycalculator;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.FlatTextField;

import lombok.Getter;

import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.border.EmptyBorder;
import java.awt.*;

@Getter
public class ProbabilityCalculatorInputArea extends JPanel
{

    private final JTextField uiDropRate;
    private final JTextField uiKillCount;
    private final JTextField uiDropsReceived;

    ProbabilityCalculatorInputArea()
    {
        setLayout(new GridLayout(3, 1, 0, 4));

        uiDropRate = addComponent("Drop Rate:");
        uiKillCount = addComponent("Kill Count:");
        uiDropsReceived = addComponent("Drops Received:");
    }

    String getDropRateInput()
    {
        JTextField field = uiDropRate;
        field.setText(field.getText().trim());
        try
        {
            if (field.getText().contains("/") && field.getText().replaceAll("/", "").length() == field.getText().length() - 1)
            {
                String num = field.getText().split("/")[0];
                String den = field.getText().split("/")[1];
                if (tryParseDouble(num) && tryParseDouble(den))
                {
                    return field.getText();
                } else
                {
                    return "0.1";
                }
            } else if (tryParseDouble(field.getText()))
            {
                return field.getText();
            } else
            {
                return "0.1";
            }
        } catch (NumberFormatException e)
        {
            return "0.1";
        }
    }

    void setDropRateInput(String value)
    {
        setInput(uiDropRate, value);
    }

    int getKillCountInput()
    {
        if (tryParseInt(uiKillCount.getText()))
        {
            return Integer.parseInt(uiKillCount.getText());
        } else
        {
            return 100;
        }
    }

    void setKillCountInput(int value)
    {
        setInput(uiKillCount, value);
    }

    int getDropsReceivedInput()
    {
        if (tryParseInt(uiDropsReceived.getText()))
        {
            return Integer.parseInt(uiDropsReceived.getText());
        } else
        {
            return 1;
        }
    }

    void setDropsReceivedInput(int value)
    {
        setInput(uiDropsReceived, value);
    }

    private void setInput(JTextField field, Object value)
    {
        field.setText(String.valueOf(value));
    }

    boolean tryParseDouble(String input)
    {
        try
        {
            Double.parseDouble(input);
            return true;
        } catch (NumberFormatException e)
        {
            return false;
        }
    }

    boolean tryParseInt(String input)
    {
        try
        {
            {
                Integer.parseInt(input);
                return true;
            }
        } catch (NumberFormatException e)
        {
            return false;
        }
    }

    private JTextField addComponent(String label)
    {
        final JPanel container = new JPanel();
        container.setLayout(new GridLayout(1, 2, 0, 4));

        final JLabel uiLabel = new JLabel(label);
        final FlatTextField uiInput = new FlatTextField();

        uiLabel.setFont(FontManager.getRunescapeSmallFont());
        uiLabel.setBorder(new EmptyBorder(0, 0, 0, 0));
        uiLabel.setForeground(Color.WHITE);

        uiInput.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        uiInput.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        uiInput.setBorder(new EmptyBorder(5, 7, 5, 7));

        container.add(uiLabel, BorderLayout.WEST);
        container.add(uiInput, BorderLayout.EAST);

        add(container);

        return uiInput.getTextField();
    }
}

package pharros.probabilitycalculator;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.image.BufferedImage;
import java.util.function.Consumer;

@Slf4j
@PluginDescriptor(
    name = "Probability Calculator"
)
public class ProbabilityCalculatorPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private ProbabilityCalculatorConfig config;

    @Inject
    private ClientToolbar clientToolbar;

    private ProbabilityCalculatorPanel panel;
    private ProbabilityCalculatorInputArea input;
    private ProbabilityCalculatorOutputArea output;
    private NavigationButton navButton;
    private double dropRate = 1.0 / 100;
    private int killCount = 100;
    private int dropsReceived = 1;

    @Override
    protected void startUp()
    {
        log.info("prob-calc: Plugin started!");
        input = new ProbabilityCalculatorInputArea();
        output = new ProbabilityCalculatorOutputArea(dropRate, killCount, dropsReceived, config);
        panel = new ProbabilityCalculatorPanel(input, output);
        //panel.init(config);

        final BufferedImage icon = ImageUtil.getResourceStreamFromClass(ProbabilityCalculatorPlugin.class, "probabilitycalculator_icon.png");

        //Action listeners
        input.getUiDropRate().addActionListener(e ->
            onFieldDropRateUpdated());
        input.getUiKillCount().addActionListener(e ->
            onFieldKillCountUpdated());
        input.getUiDropsReceived().addActionListener(e ->
            onFieldDropsReceivedUpdated());

        //Focus listeners
        input.getUiDropRate().addFocusListener(buildFocusAdapter(e -> onFieldDropRateUpdated()));
        input.getUiKillCount().addFocusListener(buildFocusAdapter(e -> onFieldKillCountUpdated()));
        input.getUiDropsReceived().addFocusListener(buildFocusAdapter(e -> onFieldDropsReceivedUpdated()));

        updateInputFields();

        navButton = NavigationButton.builder()
            .tooltip("Probability Calculator")
            .icon(icon)
            .priority(7)
            .panel(panel)
            .build();

        clientToolbar.addNavigation(navButton);

    }

    private void onFieldDropRateUpdated()
    {
        if (input.getDropRateInput().contains("/"))
        {
            String num = input.getDropRateInput().split("/")[0];
            String den = input.getDropRateInput().split("/")[1];
            dropRate = Double.parseDouble(num) / Double.parseDouble(den);
        } else
        {
            dropRate = Double.parseDouble(input.getDropRateInput());
        }
        updateInputFields();
    }

    private void onFieldKillCountUpdated()
    {
        killCount = input.getKillCountInput();
        updateInputFields();
    }

    private void onFieldDropsReceivedUpdated()
    {
        dropsReceived = input.getDropsReceivedInput();
        updateInputFields();
    }

    private void updateInputFields()
    {
        input.setDropRateInput(input.getDropRateInput());
        input.setDropsReceivedInput(dropsReceived);
        input.setKillCountInput(killCount);

        output.setDropRate(dropRate);
        output.setKillCount(killCount);
        output.setDropsReceived(dropsReceived);
        output.updateTextArea();

        log.info("prob-calc: Input fields updated!");
    }

    private FocusAdapter buildFocusAdapter(Consumer<FocusEvent> focusLostConsumer)
    {
        return new FocusAdapter()
        {
            @Override
            public void focusLost(FocusEvent e)
            {
                focusLostConsumer.accept(e);
            }
        };
    }

    @Override
    protected void shutDown()
    {
        clientToolbar.removeNavigation(navButton);
        log.info("prob-calc: Plugin stopped!");
    }

    @Provides
    ProbabilityCalculatorConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(ProbabilityCalculatorConfig.class);
    }
}

