/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace;

import com.wastedbankspace.ui.overlay.OverlayImage;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.util.Set;

@ConfigGroup(WastedBankSpaceConfig.GROUP)
public interface WastedBankSpaceConfig extends Config
{
	String GROUP = "Wasted Bank Space";
	/* Storage Location Keys */
	String CLUE_ITEM_CHECK_KEY = "clueItemCheck";
	String FANCY_DRESS_BOX_KEY = "poHFancyDressBox";
	String MAGIC_WARDROBE_KEY = "poHMagicWardrobe";
	String SEED_CHECK_KEY = "seedCheck";
	String TACKLE_BOX_CHECK_KEY = "tackleBoxCheck";
	String STEEL_KEY_RING_CHECK_KEY = "keyRingCheck";
	String TOOL_LEP_CHECK_KEY = "toolLepCheck";
	String MASTER_SCROLL_BOOK_CHECK_KEY = "masterScrollBookCheck";
	String FOSSIL_STORAGE_CHECK_KEY = "fossilStorageCheck";
	String ELNOCK_INQUISITOR_CHECK_KEY = "elnockInquisitorCheck";
	String FLAMTAER_BAG_CHECK_KEY = "flamtaerBagCheck";
	String NIGHTMARE_ZONE_CHECK_KEY = "nightmareZoneCheck";
	String TOY_BOX_CHECK_KEY = "toyBoxCheck";
	String SPICE_RACK_CHECK_KEY = "spiceRackCheck";
	String ARMOUR_CASE_CHECK_KEY = "armourCaseCheck";
	String FORESTRY_KIT_CHECK_KEY = "forestryKitCheck";
	String MYSTERIOUS_STRANGER_CHECK_KEY = "mysteriousStrangerCheck";
	String PET_HOUSE_SPACE_CHECK_KEY = "petHouseSpaceCheck";
	String HOUSE_BOOKCASE_CHECK_KEY = "bookcaseHouseSpaceCheck";
	String CAPE_RACK_CHECK_KEY = "capeRackCheck";
	String HUNTSMANS_KIT_SPACE_CHECK_KEY = "huntsmansKitSpaceCheck";

	/* Filtering and Blacklist Flags */
	String FILTER_ENABLED_CHECK_KEY = "filterEnabledCheck";
	String BIS_FILTER_ENABLED_CHECK_KEY = "bisFilterEnabledCheck";

	static Set<String> getStorageLocationKeys()
	{
		return Set.of(
			CLUE_ITEM_CHECK_KEY,
			FANCY_DRESS_BOX_KEY,
			MAGIC_WARDROBE_KEY,
			SEED_CHECK_KEY,
			TACKLE_BOX_CHECK_KEY,
			STEEL_KEY_RING_CHECK_KEY,
			TOOL_LEP_CHECK_KEY,
			MASTER_SCROLL_BOOK_CHECK_KEY,
			FOSSIL_STORAGE_CHECK_KEY,
			ELNOCK_INQUISITOR_CHECK_KEY,
			FLAMTAER_BAG_CHECK_KEY,
			NIGHTMARE_ZONE_CHECK_KEY,
			TOY_BOX_CHECK_KEY,
			SPICE_RACK_CHECK_KEY,
			ARMOUR_CASE_CHECK_KEY,
			FORESTRY_KIT_CHECK_KEY,
			MYSTERIOUS_STRANGER_CHECK_KEY,
			PET_HOUSE_SPACE_CHECK_KEY,
			HOUSE_BOOKCASE_CHECK_KEY,
			CAPE_RACK_CHECK_KEY,
			HUNTSMANS_KIT_SPACE_CHECK_KEY);
	}

	@ConfigSection(
		name = "General Config",
		description = "General plugin config flags",
		position = 0
	)
	String generalConfig = "generalConfig";

	@ConfigSection(
		name = "Non Flagged Items",
		description = "Items blacklisted for being flagged",
		position = 1
	)
	String nonFlaggedItems = "nonFlaggedItems";

	@ConfigSection(
		name = "Bank Interface Config",
		description = "Configure bank interface changes",
		position = 2
	)
	String bankInterfaceConfig = "bankInterfaceConfig";

	@ConfigItem(keyName = FILTER_ENABLED_CHECK_KEY,
		name = "Enable Filtering",
		description = "Enable Item Filters and Blacklist",
		position = 0,
		section = nonFlaggedItems
	)
	default boolean filterEnabledCheck()
	{
		return true;
	}

	@ConfigItem(keyName = BIS_FILTER_ENABLED_CHECK_KEY,
		name = "Never Filter BIS",
		description = "Never Filter Best in Slot Items",
		position = 1,
		section = nonFlaggedItems
	)
	default boolean bisFilterEnabledCheck()
	{
		return true;
	}

	@ConfigItem(
		keyName = "nonFlaggedItems",
		name = "",
		description = "Configures items to not be flagged as wasted bank space. Format: item, item",
		section = nonFlaggedItems,
		hidden = true
	)
	default String nonFlaggedItems()
	{
		return "";
	}

	@ConfigItem(
		keyName = "nonFlaggedItems",
		name = "",
		description = "Setter for storing notes data"
	)
	void nonFlaggedItems(String str);

	@ConfigItem(keyName = CLUE_ITEM_CHECK_KEY,
		name = "PoH Clue Item Storage",
		description = "Treasure Chest Storage",
		position = 1,
		section = generalConfig
	)
	default boolean treasureChestStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = FANCY_DRESS_BOX_KEY,
		name = "PoH Fancy Dress Box",
		description = "Random Event Items",
		position = 2,
		section = generalConfig
	)
	default boolean fancyDressBoxStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = MAGIC_WARDROBE_KEY,
		name = "PoH Magic Wardrobe Storage",
		description = "Magic armour and robe sets",
		position = 3,
		section = generalConfig
	)
	default boolean magicWardrobeStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = SEED_CHECK_KEY,
		name = "Seed Box/Vault",
		description = "Seeds can be stored in a seed box, saplings and seeds in the vault",
		position = 4,
		section = generalConfig
	)
	default boolean seedVaultStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = TACKLE_BOX_CHECK_KEY,
		name = "Tackle Box Items",
		description = "Check for items that could be in your tackle box",
		position = 5,
		section = generalConfig
	)
	default boolean tackleBoxStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = STEEL_KEY_RING_CHECK_KEY,
		name = "Steel Key Ring",
		description = "Stores some keys - One small favor reward",
		position = 6,
		section = generalConfig
	)
	default boolean steelKeyRingStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = TOOL_LEP_CHECK_KEY,
		name = "Tool Leprechaun",
		description = "Stores farming items, note low limits on many items",
		position = 7,
		section = generalConfig
	)
	default boolean toolLeprechaunStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = MASTER_SCROLL_BOOK_CHECK_KEY,
		name = "Master Scroll Book",
		description = "Stores teleport scrolls",
		position = 8,
		section = generalConfig
	)
	default boolean masterScrollBookStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = FOSSIL_STORAGE_CHECK_KEY,
		name = "Fossil Storage",
		description = "Storage for fossils on Fossil Island and in Varrock Museum",
		position = 9,
		section = generalConfig
	)
	default boolean fossilStorageStrorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = ELNOCK_INQUISITOR_CHECK_KEY,
		name = "Puro Puro Storage",
		description = "Elnock Inquisitor will hold some items in Puro Puro",
		position = 10,
		section = generalConfig
	)
	default boolean elnockInquisitorStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = FLAMTAER_BAG_CHECK_KEY,
		name = "Flamtaer Bag Storage",
		description = "Storage for Shades of Morton (minigame) items",
		position = 11,
		section = generalConfig
	)
	default boolean flamtaerBagStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = NIGHTMARE_ZONE_CHECK_KEY,
		name = "Nightmare Zone Potion Storage",
		description = "Potion's which store in the barrels at the nmz (minigame)",
		position = 12,
		section = generalConfig
	)
	default boolean nightmareZoneStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = TOY_BOX_CHECK_KEY,
		name = "PoH Toy Box Storage",
		description = "Toy and holiday item storage",
		position = 13,
		section = generalConfig
	)
	default boolean toyBoxStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = SPICE_RACK_CHECK_KEY,
		name = "Spice rack storage",
		description = "Storage for spicy stew spices in the PoH kitchen",
		position = 14,
		section = generalConfig
	)
	default boolean spiceRackStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = FORESTRY_KIT_CHECK_KEY,
		name = "Forestry kit storage",
		description = "Storage for Forestry-related items",
		position = 15,
		section = generalConfig
	)
	default boolean forestryKitStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = ARMOUR_CASE_CHECK_KEY,
		name = "PoH Armour Case storage",
		description = "Armour and outfit storage",
		position = 16,
		section = generalConfig
	)
	default boolean armourCaseStorageCheck()
	{
		return false; // Only for people to turn on if they want it on, nobody wants BIS gear with little triangles
	}

	@ConfigItem(keyName = MYSTERIOUS_STRANGER_CHECK_KEY,
		name = "Mysterious Stranger",
		description = "Storage for Hallowed Sepulchre items",
		position = 17,
		section = generalConfig
	)
	default boolean mysteriousStrangerStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = PET_HOUSE_SPACE_CHECK_KEY,
		name = "Pet House Space",
		description = "Pet House Space inside the POH",
		position = 18,
		section = generalConfig
	)
	default boolean petHouseStorageCheck()
	{
		return false; // Disabled by Default. Most people don't lose pets in their bank alike BIS gear.
	}

	@ConfigItem(keyName = HOUSE_BOOKCASE_CHECK_KEY,
		name = "PoH Bookcase",
		description = "Bookcase inside the PoH",
		position = 19,
		section = generalConfig
	)
	default boolean bookcaseStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = CAPE_RACK_CHECK_KEY,
		name = "Cape rack storage",
		description = "Storage for capes in the costume room",
		position = 20,
		section = generalConfig
	)
	default boolean capeRackStorageCheck()
	{
		return true;
	}

	@ConfigItem(keyName = HUNTSMANS_KIT_SPACE_CHECK_KEY,
		name = "Huntsman's Kit",
		description = "Check for items that could go in your Huntsman's kit",
		position = 21,
		section = generalConfig
	)
	default boolean huntsmansKitStorageCheck()
	{
		return true;
	}

	@ConfigItem(
		keyName = "overlayImage",
		name = "Overlay Image",
		description = "Configures images to overlay on items wasting space",
		position = 0,
		section = bankInterfaceConfig
	)
	default OverlayImage overlayImage()
	{
		return OverlayImage.DEFAULT;
	}
}



/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model;

import lombok.Getter;

import java.util.function.Supplier;

@Getter
public class StorageLocationEnabler
{
	private final Supplier<Boolean> storageLocationEnabled;
	private final StorableItem[] storableItems;

	public StorageLocationEnabler(Supplier<Boolean> storageLocationEnabled, StorableItem[] storableItems)
	{
		this.storageLocationEnabled = storageLocationEnabled;
		this.storableItems = storableItems;
	}

	public StorableItem[] GetStorableItemsIfEnabled()
	{
		return storageLocationEnabled.get() ? storableItems : new StorableItem[0];
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum ToolLeprechaun implements StorableItem {
    RAKE(ItemID.RAKE),
    SPADE(ItemID.SPADE),
    SEED_DIBBER(ItemID.SEED_DIBBER),
    SECATEURS(ItemID.SECATEURS),
    MAGIC_SECATEURS(ItemID.MAGIC_SECATEURS),
    GARDENING_TROWEL(ItemID.GARDENING_TROWEL),
    BOTOMLESS_COMPOST(ItemID.BOTTOMLESS_COMPOST_BUCKET),
    BOTTOMLESS_COMPOST_BUCKET_22997(ItemID.BOTTOMLESS_COMPOST_BUCKET_22997),
    PLANT_CURE(ItemID.PLANT_CURE),
    PLANT_CURE_6468(ItemID.PLANT_CURE_6468),
    COMPOST(ItemID.COMPOST),
    SUPERCOMPOST(ItemID.SUPERCOMPOST),
    ULTRACOMPOST(ItemID.ULTRACOMPOST),
    WATERING_CAN(ItemID.WATERING_CAN),
    WATERING_CAN1(ItemID.WATERING_CAN1),
    WATERING_CAN2(ItemID.WATERING_CAN2),
    WATERING_CAN3(ItemID.WATERING_CAN3),
    WATERING_CAN4(ItemID.WATERING_CAN4),
    WATERING_CAN5(ItemID.WATERING_CAN5),
    WATERING_CAN6(ItemID.WATERING_CAN6),
    WATERING_CAN7(ItemID.WATERING_CAN7),
    WATERING_CAN8(ItemID.WATERING_CAN8),
    GRICOLLERS_CAN(ItemID.GRICOLLERS_CAN);

    private final int itemID;
    @Getter
    private final String location = "Tool Leprechaun";
    @Getter
    private final boolean isBis;
    ToolLeprechaun(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum ForestryKit implements StorableItem {
    ANIMAINFUSED_BARK(ItemID.ANIMAINFUSED_BARK),
    FORESTERS_RATION(ItemID.FORESTERS_RATION),
    SECATEURS_ATTACHMENT(ItemID.SECATEURS_ATTACHMENT),
    NATURE_OFFERINGS(ItemID.NATURE_OFFERINGS),
    WOODCUTTING_CAPE(ItemID.WOODCUTTING_CAPE),
    LUMBERJACK_TOP(ItemID.LUMBERJACK_TOP),
    LUMBERJACK_HAT(ItemID.LUMBERJACK_HAT),
    LUMBERJACK_BOOTS(ItemID.LUMBERJACK_BOOTS),
    LUMBERJACK_LEGS(ItemID.LUMBERJACK_LEGS),
    FORESTRY_TOP(ItemID.FORESTRY_TOP),
    FORESTRY_HAT(ItemID.FORESTRY_HAT),
    FORESTRY_BOOTS(ItemID.FORESTRY_BOOTS),
    FORESTRY_LEGS(ItemID.FORESTRY_LEGS),
    BEE_ON_A_STICK(ItemID.BEE_ON_A_STICK),
    LEPRECHAUN_CHARM(ItemID.LEPRECHAUN_CHARM),
    PADDED_SPOON(ItemID.PADDED_SPOON),
    PETAL_CIRCLET(ItemID.PETAL_CIRCLET),
    SMOKER_CANISTER(ItemID.SMOKER_CANISTER),
    TRAP_DISARMER(ItemID.TRAP_DISARMER),
    MAGIC_LEAVES(ItemID.MAGIC_LEAVES),
    YEW_LEAVES(ItemID.YEW_LEAVES),
    MAPLE_LEAVES(ItemID.MAPLE_LEAVES),
    WILLOW_LEAVES(ItemID.WILLOW_LEAVES),
    OAK_LEAVES(ItemID.OAK_LEAVES),
    LEAVES(ItemID.LEAVES);

    private final int itemID;
    @Getter
    private final String location = "Forestry Kit";
    @Getter
    private final boolean isBis;

    ForestryKit(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum TreasureChest implements StorableItem {
    AMULET_OF_DEFENCE_T(ItemID.AMULET_OF_DEFENCE_T),
    BEAR_FEET(ItemID.BEAR_FEET),
    DEMON_FEET(ItemID.DEMON_FEET),
    FROG_SLIPPERS(ItemID.FROG_SLIPPERS),
    JESTER_CAPE(ItemID.JESTER_CAPE),
    MOLE_SLIPPERS(ItemID.MOLE_SLIPPERS),
    MONKS_ROBE_T(ItemID.MONKS_ROBE_T),
    MONKS_ROBE_TOP_T(ItemID.MONKS_ROBE_TOP_T),
    RUNE_SCIMITAR_GUTHIX(ItemID.RUNE_SCIMITAR_23330),
    RUNE_SCIMITAR_ZAMORAK(ItemID.RUNE_SCIMITAR_23332),
    RUNE_SCIMITAR_SARADOMIN(ItemID.RUNE_SCIMITAR_23334),
    SANDWICH_LADY_BOTTOM(ItemID.SANDWICH_LADY_BOTTOM),
    SANDWICH_LADY_HAT(ItemID.SANDWICH_LADY_HAT),
    SANDWICH_LADY_TOP(ItemID.SANDWICH_LADY_TOP),
    SHOULDER_PARROT(ItemID.SHOULDER_PARROT),
    //Easy Clues
    AMULET_OF_MAGIC_T(ItemID.AMULET_OF_MAGIC_T),
    AMULET_OF_POWER_T(ItemID.AMULET_OF_POWER_T),
    BEANIE(ItemID.BEANIE),
    BLACK_BERET(ItemID.BLACK_BERET),
    BLUE_BERET(ItemID.BLUE_BERET),
    RED_BERET(ItemID.RED_BERET),
    WHITE_BERET(ItemID.WHITE_BERET),
    BERET_MASK(ItemID.BERET_MASK),
    BLACK_KITESHIELD_G(ItemID.BLACK_KITESHIELD_G),
    BLACK_PLATEBODY_G(ItemID.BLACK_PLATEBODY_G),
    BLACK_PLATELEGS_G(ItemID.BLACK_PLATELEGS_G),
    BLACK_PLATESKIRT_G(ItemID.BLACK_PLATESKIRT_G),
    BLACK_FULL_HELM_G(ItemID.BLACK_FULL_HELM_G),
    BLACK_KITESHIELD_T(ItemID.BLACK_KITESHIELD_T),
    BLACK_PLATEBODY_T(ItemID.BLACK_PLATEBODY_T),
    BLACK_PLATELEGS_T(ItemID.BLACK_PLATELEGS_T),
    BLACK_PLATESKIRT_T(ItemID.BLACK_PLATESKIRT_T),
    BLACK_FULL_HELM_T(ItemID.BLACK_FULL_HELM_T),
    BRONZE_KITESHIELD_G(ItemID.BRONZE_KITESHIELD_G),
    BRONZE_PLATEBODY_G(ItemID.BRONZE_PLATEBODY_G),
    BRONZE_PLATELEGS_G(ItemID.BRONZE_PLATELEGS_G),
    BRONZE_PLATESKIRT_G(ItemID.BRONZE_PLATESKIRT_G),
    BRONZE_FULL_HELM_G(ItemID.BRONZE_FULL_HELM_G),
    BRONZE_KITESHIELD_T(ItemID.BRONZE_KITESHIELD_T),
    BRONZE_PLATEBODY_T(ItemID.BRONZE_PLATEBODY_T),
    BRONZE_PLATELEGS_T(ItemID.BRONZE_PLATELEGS_T),
    BRONZE_PLATESKIRT_T(ItemID.BRONZE_PLATESKIRT_T),
    BRONZE_FULL_HELM_T(ItemID.BRONZE_FULL_HELM_T),
    IRON_KITESHIELD_G(ItemID.IRON_KITESHIELD_G),
    IRON_PLATEBODY_G(ItemID.IRON_PLATEBODY_G),
    IRON_PLATELEGS_G(ItemID.IRON_PLATELEGS_G),
    IRON_PLATESKIRT_G(ItemID.IRON_PLATESKIRT_G),
    IRON_FULL_HELM_G(ItemID.IRON_FULL_HELM_G),
    IRON_KITESHIELD_T(ItemID.IRON_KITESHIELD_T),
    IRON_PLATEBODY_T(ItemID.IRON_PLATEBODY_T),
    IRON_PLATELEGS_T(ItemID.IRON_PLATELEGS_T),
    IRON_PLATESKIRT_T(ItemID.IRON_PLATESKIRT_T),
    IRON_FULL_HELM_T(ItemID.IRON_FULL_HELM_T),
    STEEL_KITESHIELD_G(ItemID.STEEL_KITESHIELD_G),
    STEEL_PLATEBODY_G(ItemID.STEEL_PLATEBODY_G),
    STEEL_PLATELEGS_G(ItemID.STEEL_PLATELEGS_G),
    STEEL_PLATESKIRT_G(ItemID.STEEL_PLATESKIRT_G),
    STEEL_FULL_HELM_G(ItemID.STEEL_FULL_HELM_G),
    STEEL_KITESHIELD_T(ItemID.STEEL_KITESHIELD_T),
    STEEL_PLATEBODY_T(ItemID.STEEL_PLATEBODY_T),
    STEEL_PLATELEGS_T(ItemID.STEEL_PLATELEGS_T),
    STEEL_PLATESKIRT_T(ItemID.STEEL_PLATESKIRT_T),
    STEEL_FULL_HELM_T(ItemID.STEEL_FULL_HELM_T),
    BLACK_HELM_H1(ItemID.BLACK_HELM_H1),
    BLACK_HELM_H2(ItemID.BLACK_HELM_H2),
    BLACK_HELM_H3(ItemID.BLACK_HELM_H3),
    BLACK_HELM_H4(ItemID.BLACK_HELM_H4),
    BLACK_HELM_H5(ItemID.BLACK_HELM_H5),
    BLACK_SHIELD_H1(ItemID.BLACK_SHIELD_H1),
    BLACK_SHIELD_H2(ItemID.BLACK_SHIELD_H2),
    BLACK_SHIELD_H3(ItemID.BLACK_SHIELD_H3),
    BLACK_SHIELD_H4(ItemID.BLACK_SHIELD_H4),
    BLACK_SHIELD_H5(ItemID.BLACK_SHIELD_H5),
    BLACK_PLATEBODY_H1(ItemID.BLACK_PLATEBODY_H1),
    BLACK_PLATEBODY_H2(ItemID.BLACK_PLATEBODY_H2),
    BLACK_PLATEBODY_H3(ItemID.BLACK_PLATEBODY_H3),
    BLACK_PLATEBODY_H4(ItemID.BLACK_PLATEBODY_H4),
    BLACK_PLATEBODY_H5(ItemID.BLACK_PLATEBODY_H5),
    BLACK_WIZARD_HAT_G(ItemID.BLACK_WIZARD_HAT_G),
    BLACK_WIZARD_ROBE_G(ItemID.BLACK_WIZARD_ROBE_G),
    BLACK_SKIRT_G(ItemID.BLACK_SKIRT_G),
    BLACK_WIZARD_HAT_T(ItemID.BLACK_WIZARD_HAT_T),
    BLACK_WIZARD_ROBE_T(ItemID.BLACK_WIZARD_ROBE_T),
    BLACK_SKIRT_T(ItemID.BLACK_SKIRT_T),
    ANCIENT_BLESSING(ItemID.ANCIENT_BLESSING),
    HOLY_BLESSING(ItemID.HOLY_BLESSING),
    HONOURABLE_BLESSING(ItemID.HONOURABLE_BLESSING),
    PEACEFUL_BLESSING(ItemID.PEACEFUL_BLESSING),
    UNHOLY_BLESSING(ItemID.UNHOLY_BLESSING),
    WAR_BLESSING(ItemID.WAR_BLESSING),
    BLUE_WIZARD_HAT_G(ItemID.BLUE_WIZARD_HAT_G),
    BLUE_WIZARD_ROBE_G(ItemID.BLUE_WIZARD_ROBE_G),
    BLUE_SKIRT_G(ItemID.BLUE_SKIRT_G),
    BLUE_WIZARD_HAT_T(ItemID.BLUE_WIZARD_HAT_T),
    BLUE_WIZARD_ROBE_T(ItemID.BLUE_WIZARD_ROBE_T),
    BLUE_SKIRT_T(ItemID.BLUE_SKIRT_T),
    BOBS_BLUE_SHIRT(ItemID.BOBS_BLUE_SHIRT),
    BOBS_BLACK_SHIRT(ItemID.BOBS_BLACK_SHIRT),
    BOBS_GREEN_SHIRT(ItemID.BOBS_GREEN_SHIRT),
    BOBS_PURPLE_SHIRT(ItemID.BOBS_PURPLE_SHIRT),
    BOBS_RED_SHIRT(ItemID.BOBS_RED_SHIRT),
    BLACK_CANE(ItemID.BLACK_CANE),
    CAPE_OF_SKULLS(ItemID.CAPE_OF_SKULLS),
    WILLOW_COMP_BOW(ItemID.WILLOW_COMP_BOW),
    BLUE_ELEGANT_BLOUSE(ItemID.BLUE_ELEGANT_BLOUSE),
    BLUE_ELEGANT_LEGS(ItemID.BLUE_ELEGANT_LEGS),
    BLUE_ELEGANT_SHIRT(ItemID.BLUE_ELEGANT_SHIRT),
    BLUE_ELEGANT_SKIRT(ItemID.BLUE_ELEGANT_SKIRT),
    GREEN_ELEGANT_BLOUSE(ItemID.GREEN_ELEGANT_BLOUSE),
    GREEN_ELEGANT_LEGS(ItemID.GREEN_ELEGANT_LEGS),
    GREEN_ELEGANT_SHIRT(ItemID.GREEN_ELEGANT_SHIRT),
    GREEN_ELEGANT_SKIRT(ItemID.GREEN_ELEGANT_SKIRT),
    RED_ELEGANT_BLOUSE(ItemID.RED_ELEGANT_BLOUSE),
    RED_ELEGANT_LEGS(ItemID.RED_ELEGANT_LEGS),
    RED_ELEGANT_SHIRT(ItemID.RED_ELEGANT_SHIRT),
    RED_ELEGANT_SKIRT(ItemID.RED_ELEGANT_SKIRT),
    FLARED_TROUSERS(ItemID.FLARED_TROUSERS),
    GOLDEN_APRON(ItemID.GOLDEN_APRON),
    GOLDEN_CHEFS_HAT(ItemID.GOLDEN_CHEFS_HAT),
    HAM_JOINT(ItemID.HAM_JOINT),
    HIGHWAYMAN_MASK(ItemID.HIGHWAYMAN_MASK),
    LARGE_SPADE(ItemID.LARGE_SPADE),
    LEATHER_BODY_G(ItemID.LEATHER_BODY_G),
    LEATHER_CHAPS_G(ItemID.LEATHER_CHAPS_G),
    GOBLIN_MASK(ItemID.GOBLIN_MASK),
    IMP_MASK(ItemID.IMP_MASK),
    MONKS_ROBE_G(ItemID.MONKS_ROBE_G),
    MONKS_ROBE_TOP_G(ItemID.MONKS_ROBE_TOP_G),
    PANTALOONS(ItemID.PANTALOONS),
    RAIN_BOW(ItemID.RAIN_BOW),
    SLEEPING_CAP(ItemID.SLEEPING_CAP),
    STAFF_OF_BOB_THE_CAT(ItemID.STAFF_OF_BOB_THE_CAT),
    STUDDED_BODY_G(ItemID.STUDDED_BODY_G),
    STUDDED_CHAPS_G(ItemID.STUDDED_CHAPS_G),
    STUDDED_BODY_T(ItemID.STUDDED_BODY_T),
    STUDDED_CHAPS_T(ItemID.STUDDED_CHAPS_T),
    A_POWDERED_WIG(ItemID.A_POWDERED_WIG),
    WOODEN_SHIELD_G(ItemID.WOODEN_SHIELD_G),
    ANCIENT_MITRE(ItemID.ANCIENT_MITRE),
    ANCIENT_ROBE_TOP(ItemID.ANCIENT_ROBE_TOP),
    ANCIENT_ROBE_LEGS(ItemID.ANCIENT_ROBE_LEGS),
    ANCIENT_CLOAK(ItemID.ANCIENT_CLOAK),
    ANCIENT_STOLE(ItemID.ANCIENT_STOLE),
    ANCIENT_CROZIER(ItemID.ANCIENT_CROZIER),
    ARMADYL_MITRE(ItemID.ARMADYL_MITRE),
    ARMADYL_ROBE_TOP(ItemID.ARMADYL_ROBE_TOP),
    ARMADYL_ROBE_LEGS(ItemID.ARMADYL_ROBE_LEGS),
    ARMADYL_CLOAK(ItemID.ARMADYL_CLOAK),
    ARMADYL_STOLE(ItemID.ARMADYL_STOLE),
    ARMADYL_CROZIER(ItemID.ARMADYL_CROZIER),
    BANDOS_MITRE(ItemID.BANDOS_MITRE),
    BANDOS_ROBE_TOP(ItemID.BANDOS_ROBE_TOP),
    BANDOS_ROBE_LEGS(ItemID.BANDOS_ROBE_LEGS),
    BANDOS_CLOAK(ItemID.BANDOS_CLOAK),
    BANDOS_STOLE(ItemID.BANDOS_STOLE),
    BANDOS_CROZIER(ItemID.BANDOS_CROZIER),
    GUTHIX_MITRE(ItemID.GUTHIX_MITRE),
    GUTHIX_ROBE_TOP(ItemID.GUTHIX_ROBE_TOP),
    GUTHIX_ROBE_LEGS(ItemID.GUTHIX_ROBE_LEGS),
    GUTHIX_CLOAK(ItemID.GUTHIX_CLOAK),
    GUTHIX_STOLE(ItemID.GUTHIX_STOLE),
    GUTHIX_CROZIER(ItemID.GUTHIX_CROZIER),
    SARADOMIN_MITRE(ItemID.SARADOMIN_MITRE),
    SARADOMIN_ROBE_TOP(ItemID.SARADOMIN_ROBE_TOP),
    SARADOMIN_ROBE_LEGS(ItemID.SARADOMIN_ROBE_LEGS),
    SARADOMIN_CLOAK(ItemID.SARADOMIN_CLOAK),
    SARADOMIN_STOLE(ItemID.SARADOMIN_STOLE),
    SARADOMIN_CROZIER(ItemID.SARADOMIN_CROZIER),
    ZAMORAK_MITRE(ItemID.ZAMORAK_MITRE),
    ZAMORAK_ROBE_TOP(ItemID.ZAMORAK_ROBE_TOP),
    ZAMORAK_ROBE_LEGS(ItemID.ZAMORAK_ROBE_LEGS),
    ZAMORAK_CLOAK(ItemID.ZAMORAK_CLOAK),
    ZAMORAK_STOLE(ItemID.ZAMORAK_STOLE),
    ZAMORAK_CROZIER(ItemID.ZAMORAK_CROZIER),

    //Teak treasure chest
    ADAMANT_KITESHIELD_G(ItemID.ADAMANT_KITESHIELD_G),
    ADAMANT_PLATEBODY_G(ItemID.ADAMANT_PLATEBODY_G),
    ADAMANT_PLATELEGS_G(ItemID.ADAMANT_PLATELEGS_G),
    ADAMANT_PLATESKIRT_G(ItemID.ADAMANT_PLATESKIRT_G),
    ADAMANT_FULL_HELM_G(ItemID.ADAMANT_FULL_HELM_G),
    ADAMANT_KITESHIELD_T(ItemID.ADAMANT_KITESHIELD_T),
    ADAMANT_PLATEBODY_T(ItemID.ADAMANT_PLATEBODY_T),
    ADAMANT_PLATELEGS_T(ItemID.ADAMANT_PLATELEGS_T),
    ADAMANT_PLATESKIRT_T(ItemID.ADAMANT_PLATESKIRT_T),
    ADAMANT_FULL_HELM_T(ItemID.ADAMANT_FULL_HELM_T),
    ADAMANT_HELM_H1(ItemID.ADAMANT_HELM_H1),
    ADAMANT_HELM_H2(ItemID.ADAMANT_HELM_H2),
    ADAMANT_HELM_H3(ItemID.ADAMANT_HELM_H3),
    ADAMANT_HELM_H4(ItemID.ADAMANT_HELM_H4),
    ADAMANT_HELM_H5(ItemID.ADAMANT_HELM_H5),
    ADAMANT_SHIELD_H1(ItemID.ADAMANT_SHIELD_H1),
    ADAMANT_SHIELD_H2(ItemID.ADAMANT_SHIELD_H2),
    ADAMANT_SHIELD_H3(ItemID.ADAMANT_SHIELD_H3),
    ADAMANT_SHIELD_H4(ItemID.ADAMANT_SHIELD_H4),
    ADAMANT_SHIELD_H5(ItemID.ADAMANT_SHIELD_H5),
    ADAMANT_PLATEBODY_H1(ItemID.ADAMANT_PLATEBODY_H1),
    ADAMANT_PLATEBODY_H2(ItemID.ADAMANT_PLATEBODY_H2),
    ADAMANT_PLATEBODY_H3(ItemID.ADAMANT_PLATEBODY_H3),
    ADAMANT_PLATEBODY_H4(ItemID.ADAMANT_PLATEBODY_H4),
    ADAMANT_PLATEBODY_H5(ItemID.ADAMANT_PLATEBODY_H5),
    ADAMANT_CANE(ItemID.ADAMANT_CANE),
    STRENGTH_AMULET_T(ItemID.STRENGTH_AMULET_T),
    CABBAGE_ROUND_SHIELD(ItemID.CABBAGE_ROUND_SHIELD),
    CLIMBING_BOOTS_G(ItemID.CLIMBING_BOOTS_G),
    CLUELESS_SCROLL(ItemID.CLUELESS_SCROLL),
    YEW_COMP_BOW(ItemID.YEW_COMP_BOW),
    BLACK_ELEGANT_LEGS(ItemID.BLACK_ELEGANT_LEGS),
    BLACK_ELEGANT_SHIRT(ItemID.BLACK_ELEGANT_SHIRT),
    WHITE_ELEGANT_BLOUSE(ItemID.WHITE_ELEGANT_BLOUSE),
    WHITE_ELEGANT_SKIRT(ItemID.WHITE_ELEGANT_SKIRT),
    GOLD_ELEGANT_LEGS(ItemID.GOLD_ELEGANT_LEGS),
    GOLD_ELEGANT_SHIRT(ItemID.GOLD_ELEGANT_SHIRT),
    GOLD_ELEGANT_BLOUSE(ItemID.GOLD_ELEGANT_BLOUSE),
    GOLD_ELEGANT_SKIRT(ItemID.GOLD_ELEGANT_SKIRT),
    PINK_ELEGANT_LEGS(ItemID.PINK_ELEGANT_LEGS),
    PINK_ELEGANT_SHIRT(ItemID.PINK_ELEGANT_SHIRT),
    PINK_ELEGANT_BLOUSE(ItemID.PINK_ELEGANT_BLOUSE),
    PINK_ELEGANT_SKIRT(ItemID.PINK_ELEGANT_SKIRT),
    PURPLE_ELEGANT_LEGS(ItemID.PURPLE_ELEGANT_LEGS),
    PURPLE_ELEGANT_SHIRT(ItemID.PURPLE_ELEGANT_SHIRT),
    PURPLE_ELEGANT_BLOUSE(ItemID.PURPLE_ELEGANT_BLOUSE),
    PURPLE_ELEGANT_SKIRT(ItemID.PURPLE_ELEGANT_SKIRT),
    GREEN_DHIDE_BODY_G(ItemID.GREEN_DHIDE_BODY_G),
    GREEN_DHIDE_CHAPS_G(ItemID.GREEN_DHIDE_CHAPS_G),
    GREEN_DHIDE_BODY_T(ItemID.GREEN_DHIDE_BODY_T),
    GREEN_DHIDE_CHAPS_T(ItemID.GREEN_DHIDE_CHAPS_T),
    BLACK_HEADBAND(ItemID.BLACK_HEADBAND),
    BLUE_HEADBAND(ItemID.BLUE_HEADBAND),
    BROWN_HEADBAND(ItemID.BROWN_HEADBAND),
    GOLD_HEADBAND(ItemID.GOLD_HEADBAND),
    GREEN_HEADBAND(ItemID.GREEN_HEADBAND),
    PINK_HEADBAND(ItemID.PINK_HEADBAND),
    RED_HEADBAND(ItemID.RED_HEADBAND),
    WHITE_HEADBAND(ItemID.WHITE_HEADBAND),
    HOLY_SANDALS(ItemID.HOLY_SANDALS),
    ARCEUUS_BANNER(ItemID.ARCEUUS_BANNER),
    HOSIDIUS_BANNER(ItemID.HOSIDIUS_BANNER),
    LOVAKENGJ_BANNER(ItemID.LOVAKENGJ_BANNER),
    PISCARILIUS_BANNER(ItemID.PISCARILIUS_BANNER),
    SHAYZIEN_BANNER(ItemID.SHAYZIEN_BANNER),
    LEPRECHAUN_HAT(ItemID.LEPRECHAUN_HAT),
    BLACK_LEPRECHAUN_HAT(ItemID.BLACK_LEPRECHAUN_HAT),
    CAT_MASK(ItemID.CAT_MASK),
    PENGUIN_MASK(ItemID.PENGUIN_MASK),
    WHITE_UNICORN_MASK(ItemID.WHITE_UNICORN_MASK),
    WOLF_MASK(ItemID.WOLF_MASK),
    MITHRIL_KITESHIELD_G(ItemID.MITHRIL_KITESHIELD_G),
    MITHRIL_PLATEBODY_G(ItemID.MITHRIL_PLATEBODY_G),
    MITHRIL_PLATELEGS_G(ItemID.MITHRIL_PLATELEGS_G),
    MITHRIL_PLATESKIRT_G(ItemID.MITHRIL_PLATESKIRT_G),
    MITHRIL_FULL_HELM_G(ItemID.MITHRIL_FULL_HELM_G),
    MITHRIL_KITESHIELD_T(ItemID.MITHRIL_KITESHIELD_T),
    MITHRIL_PLATEBODY_T(ItemID.MITHRIL_PLATEBODY_T),
    MITHRIL_PLATELEGS_T(ItemID.MITHRIL_PLATELEGS_T),
    MITHRIL_PLATESKIRT_T(ItemID.MITHRIL_PLATESKIRT_T),
    MITHRIL_FULL_HELM_T(ItemID.MITHRIL_FULL_HELM_T),
    RANGER_BOOTS(ItemID.RANGER_BOOTS),
    SPIKED_MANACLES(ItemID.SPIKED_MANACLES),
    BLACK_BOATER(ItemID.BLACK_BOATER),
    BLUE_BOATER(ItemID.BLUE_BOATER),
    GREEN_BOATER(ItemID.GREEN_BOATER),
    ORANGE_BOATER(ItemID.ORANGE_BOATER),
    PINK_BOATER(ItemID.PINK_BOATER),
    PURPLE_BOATER(ItemID.PURPLE_BOATER),
    RED_BOATER(ItemID.RED_BOATER),
    WHITE_BOATER(ItemID.WHITE_BOATER),
    CRIER_BELL(ItemID.CRIER_BELL),
    CRIER_COAT(ItemID.CRIER_COAT),
    CRIER_HAT(ItemID.CRIER_HAT),
    WIZARD_BOOTS(ItemID.WIZARD_BOOTS),
    WOLF_CLOAK(ItemID.WOLF_CLOAK),

    // Mahogany treasure chest
    _3RD_AGE_AMULET(ItemID._3RD_AGE_AMULET),
    _3RD_AGE_MAGE_HAT(ItemID._3RD_AGE_MAGE_HAT),
    _3RD_AGE_ROBE(ItemID._3RD_AGE_ROBE),
    _3RD_AGE_ROBE_20577(ItemID._3RD_AGE_ROBE_20577),
    _3RD_AGE_ROBE_TOP(ItemID._3RD_AGE_ROBE_TOP),
    _3RD_AGE_ROBE_TOP_20576(ItemID._3RD_AGE_ROBE_TOP_20576),
    _3RD_AGE_FULL_HELMET(ItemID._3RD_AGE_FULL_HELMET),
    _3RD_AGE_KITESHIELD(ItemID._3RD_AGE_KITESHIELD),
    _3RD_AGE_PLATEBODY(ItemID._3RD_AGE_PLATEBODY),
    _3RD_AGE_PLATELEGS(ItemID._3RD_AGE_PLATELEGS),
    _3RD_AGE_PLATESKIRT(ItemID._3RD_AGE_PLATESKIRT),
    _3RD_AGE_RANGE_COIF(ItemID._3RD_AGE_RANGE_COIF),
    _3RD_AGE_RANGE_LEGS(ItemID._3RD_AGE_RANGE_LEGS),
    _3RD_AGE_RANGE_TOP(ItemID._3RD_AGE_RANGE_TOP),
    _3RD_AGE_VAMBRACES(ItemID._3RD_AGE_VAMBRACES),
    AMULET_OF_GLORY_T(ItemID.AMULET_OF_GLORY_T),
    AMULET_OF_GLORY_T1(ItemID.AMULET_OF_GLORY_T1),
    AMULET_OF_GLORY_T2(ItemID.AMULET_OF_GLORY_T2),
    AMULET_OF_GLORY_T3(ItemID.AMULET_OF_GLORY_T3),
    AMULET_OF_GLORY_T4(ItemID.AMULET_OF_GLORY_T4),
    AMULET_OF_GLORY_T5(ItemID.AMULET_OF_GLORY_T5),
    AMULET_OF_GLORY_T6(ItemID.AMULET_OF_GLORY_T6),
    ANCIENT_DHIDE_BODY(ItemID.ANCIENT_DHIDE_BODY),
    ANCIENT_DHIDE_BOOTS(ItemID.ANCIENT_DHIDE_BOOTS),
    ANCIENT_BRACERS(ItemID.ANCIENT_BRACERS),
    ANCIENT_CHAPS(ItemID.ANCIENT_CHAPS),
    ANCIENT_COIF(ItemID.ANCIENT_COIF),
    ANCIENT_DHIDE_SHIELD(ItemID.ANCIENT_DHIDE_SHIELD),
    ARMADYL_DHIDE_BODY(ItemID.ARMADYL_DHIDE_BODY),
    ARMADYL_DHIDE_BOOTS(ItemID.ARMADYL_DHIDE_BOOTS),
    ARMADYL_BRACERS(ItemID.ARMADYL_BRACERS),
    ARMADYL_CHAPS(ItemID.ARMADYL_CHAPS),
    ARMADYL_COIF(ItemID.ARMADYL_COIF),
    ARMADYL_DHIDE_SHIELD(ItemID.ARMADYL_DHIDE_SHIELD),
    BANDOS_DHIDE_BODY(ItemID.BANDOS_DHIDE_BODY),
    BANDOS_DHIDE_BOOTS(ItemID.BANDOS_DHIDE_BOOTS),
    BANDOS_BRACERS(ItemID.BANDOS_BRACERS),
    BANDOS_CHAPS(ItemID.BANDOS_CHAPS),
    BANDOS_COIF(ItemID.BANDOS_COIF),
    BANDOS_DHIDE_SHIELD(ItemID.BANDOS_DHIDE_SHIELD),
    GUTHIX_DHIDE_BODY(ItemID.GUTHIX_DHIDE_BODY),
    GUTHIX_DHIDE_BOOTS(ItemID.GUTHIX_DHIDE_BOOTS),
    GUTHIX_BRACERS(ItemID.GUTHIX_BRACERS),
    GUTHIX_CHAPS(ItemID.GUTHIX_CHAPS),
    GUTHIX_COIF(ItemID.GUTHIX_COIF),
    GUTHIX_DHIDE_SHIELD(ItemID.GUTHIX_DHIDE_SHIELD),
    SARADOMIN_DHIDE_BODY(ItemID.SARADOMIN_DHIDE_BODY),
    SARADOMIN_DHIDE_BOOTS(ItemID.SARADOMIN_DHIDE_BOOTS),
    SARADOMIN_BRACERS(ItemID.SARADOMIN_BRACERS),
    SARADOMIN_CHAPS(ItemID.SARADOMIN_CHAPS),
    SARADOMIN_COIF(ItemID.SARADOMIN_COIF),
    SARADOMIN_DHIDE_SHIELD(ItemID.SARADOMIN_DHIDE_SHIELD),
    ZAMORAK_DHIDE_BODY(ItemID.ZAMORAK_DHIDE_BODY),
    ZAMORAK_DHIDE_BOOTS(ItemID.ZAMORAK_DHIDE_BOOTS),
    ZAMORAK_BRACERS(ItemID.ZAMORAK_BRACERS),
    ZAMORAK_CHAPS(ItemID.ZAMORAK_CHAPS),
    ZAMORAK_COIF(ItemID.ZAMORAK_COIF),
    ZAMORAK_DHIDE_SHIELD(ItemID.ZAMORAK_DHIDE_SHIELD),
    BLUE_DHIDE_BODY_G(ItemID.BLUE_DHIDE_BODY_G),
    BLUE_DHIDE_CHAPS_G(ItemID.BLUE_DHIDE_CHAPS_G),
    BLUE_DHIDE_BODY_T(ItemID.BLUE_DHIDE_BODY_T),
    BLUE_DHIDE_CHAPS_T(ItemID.BLUE_DHIDE_CHAPS_T),
    RUNE_CANE(ItemID.RUNE_CANE),
    BLACK_CAVALIER(ItemID.BLACK_CAVALIER),
    NAVY_CAVALIER(ItemID.NAVY_CAVALIER),
    TAN_CAVALIER(ItemID.TAN_CAVALIER),
    DARK_CAVALIER(ItemID.DARK_CAVALIER),
    RED_CAVALIER(ItemID.RED_CAVALIER),
    WHITE_CAVALIER(ItemID.WHITE_CAVALIER),
    CAVALIER_MASK(ItemID.CAVALIER_MASK),
    MAGIC_COMP_BOW(ItemID.MAGIC_COMP_BOW),
    CYCLOPS_HEAD(ItemID.CYCLOPS_HEAD),
    DRAGON_BOOTS_G(ItemID.DRAGON_BOOTS_G),
    BLACK_DRAGON_MASK(ItemID.BLACK_DRAGON_MASK),
    BLUE_DRAGON_MASK(ItemID.BLUE_DRAGON_MASK),
    GREEN_DRAGON_MASK(ItemID.GREEN_DRAGON_MASK),
    RED_DRAGON_MASK(ItemID.RED_DRAGON_MASK),
    NUNCHAKU(ItemID.NUNCHAKU),
    ENCHANTED_HAT(ItemID.ENCHANTED_HAT),
    ENCHANTED_ROBE(ItemID.ENCHANTED_ROBE),
    ENCHANTED_TOP(ItemID.ENCHANTED_TOP),
    DUAL_SAI(ItemID.DUAL_SAI),
    EXPLORER_BACKPACK(ItemID.EXPLORER_BACKPACK),
    PIRATES_HAT(ItemID.PIRATES_HAT),
    PITH_HELMET(ItemID.PITH_HELMET),
    RED_DHIDE_BODY_G(ItemID.RED_DHIDE_BODY_G),
    RED_DHIDE_CHAPS_G(ItemID.RED_DHIDE_CHAPS_G),
    RED_DHIDE_BODY_T(ItemID.RED_DHIDE_BODY_T),
    RED_DHIDE_CHAPS_T(ItemID.RED_DHIDE_CHAPS_T),
    ROBIN_HOOD_HAT(ItemID.ROBIN_HOOD_HAT),
    GILDED_2H_SWORD(ItemID.GILDED_2H_SWORD),
    ANCIENT_KITESHIELD(ItemID.ANCIENT_KITESHIELD),
    ANCIENT_PLATEBODY(ItemID.ANCIENT_PLATEBODY),
    ANCIENT_PLATELEGS(ItemID.ANCIENT_PLATELEGS),
    ANCIENT_PLATESKIRT(ItemID.ANCIENT_PLATESKIRT),
    ANCIENT_FULL_HELM(ItemID.ANCIENT_FULL_HELM),
    ARMADYL_KITESHIELD(ItemID.ARMADYL_KITESHIELD),
    ARMADYL_PLATEBODY(ItemID.ARMADYL_PLATEBODY),
    ARMADYL_PLATELEGS(ItemID.ARMADYL_PLATELEGS),
    ARMADYL_PLATESKIRT(ItemID.ARMADYL_PLATESKIRT),
    ARMADYL_FULL_HELM(ItemID.ARMADYL_FULL_HELM),
    BANDOS_KITESHIELD(ItemID.BANDOS_KITESHIELD),
    BANDOS_PLATEBODY(ItemID.BANDOS_PLATEBODY),
    BANDOS_PLATELEGS(ItemID.BANDOS_PLATELEGS),
    BANDOS_PLATESKIRT(ItemID.BANDOS_PLATESKIRT),
    BANDOS_FULL_HELM(ItemID.BANDOS_FULL_HELM),
    GILDED_KITESHIELD(ItemID.GILDED_KITESHIELD),
    GILDED_PLATEBODY(ItemID.GILDED_PLATEBODY),
    GILDED_PLATELEGS(ItemID.GILDED_PLATELEGS),
    GILDED_PLATESKIRT(ItemID.GILDED_PLATESKIRT),
    GILDED_FULL_HELM(ItemID.GILDED_FULL_HELM),
    GUTHIX_KITESHIELD(ItemID.GUTHIX_KITESHIELD),
    GUTHIX_PLATEBODY(ItemID.GUTHIX_PLATEBODY),
    GUTHIX_PLATELEGS(ItemID.GUTHIX_PLATELEGS),
    GUTHIX_PLATESKIRT(ItemID.GUTHIX_PLATESKIRT),
    GUTHIX_FULL_HELM(ItemID.GUTHIX_FULL_HELM),
    SARADOMIN_KITESHIELD(ItemID.SARADOMIN_KITESHIELD),
    SARADOMIN_PLATEBODY(ItemID.SARADOMIN_PLATEBODY),
    SARADOMIN_PLATELEGS(ItemID.SARADOMIN_PLATELEGS),
    SARADOMIN_PLATESKIRT(ItemID.SARADOMIN_PLATESKIRT),
    SARADOMIN_FULL_HELM(ItemID.SARADOMIN_FULL_HELM),
    ZAMORAK_KITESHIELD(ItemID.ZAMORAK_KITESHIELD),
    ZAMORAK_PLATEBODY(ItemID.ZAMORAK_PLATEBODY),
    ZAMORAK_PLATELEGS(ItemID.ZAMORAK_PLATELEGS),
    ZAMORAK_PLATESKIRT(ItemID.ZAMORAK_PLATESKIRT),
    ZAMORAK_FULL_HELM(ItemID.ZAMORAK_FULL_HELM),
    RUNE_KITESHIELD_G(ItemID.RUNE_KITESHIELD_G),
    RUNE_PLATEBODY_G(ItemID.RUNE_PLATEBODY_G),
    RUNE_PLATELEGS_G(ItemID.RUNE_PLATELEGS_G),
    RUNE_PLATESKIRT_G(ItemID.RUNE_PLATESKIRT_G),
    RUNE_FULL_HELM_G(ItemID.RUNE_FULL_HELM_G),
    RUNE_KITESHIELD_T(ItemID.RUNE_KITESHIELD_T),
    RUNE_PLATEBODY_T(ItemID.RUNE_PLATEBODY_T),
    RUNE_PLATELEGS_T(ItemID.RUNE_PLATELEGS_T),
    RUNE_PLATESKIRT_T(ItemID.RUNE_PLATESKIRT_T),
    RUNE_FULL_HELM_T(ItemID.RUNE_FULL_HELM_T),
    GILDED_CHAINBODY(ItemID.GILDED_CHAINBODY),
    GILDED_HASTA(ItemID.GILDED_HASTA),
    GILDED_MED_HELM(ItemID.GILDED_MED_HELM),
    GILDED_SPEAR(ItemID.GILDED_SPEAR),
    GILDED_SQ_SHIELD(ItemID.GILDED_SQ_SHIELD),
    RUNE_HELM_H1(ItemID.RUNE_HELM_H1),
    RUNE_HELM_H2(ItemID.RUNE_HELM_H2),
    RUNE_HELM_H3(ItemID.RUNE_HELM_H3),
    RUNE_HELM_H4(ItemID.RUNE_HELM_H4),
    RUNE_HELM_H5(ItemID.RUNE_HELM_H5),
    RUNE_SHIELD_H1(ItemID.RUNE_SHIELD_H1),
    RUNE_SHIELD_H2(ItemID.RUNE_SHIELD_H2),
    RUNE_SHIELD_H3(ItemID.RUNE_SHIELD_H3),
    RUNE_SHIELD_H4(ItemID.RUNE_SHIELD_H4),
    RUNE_SHIELD_H5(ItemID.RUNE_SHIELD_H5),
    RUNE_PLATEBODY_H1(ItemID.RUNE_PLATEBODY_H1),
    RUNE_PLATEBODY_H2(ItemID.RUNE_PLATEBODY_H2),
    RUNE_PLATEBODY_H3(ItemID.RUNE_PLATEBODY_H3),
    RUNE_PLATEBODY_H4(ItemID.RUNE_PLATEBODY_H4),
    RUNE_PLATEBODY_H5(ItemID.RUNE_PLATEBODY_H5),
    THIEVING_BAG(ItemID.THIEVING_BAG),
    ZOMBIE_HEAD_19912(ItemID.ZOMBIE_HEAD_19912),

    //ELITE CLUES
    _3RD_AGE_BOW(ItemID._3RD_AGE_BOW),
    _3RD_AGE_CLOAK(ItemID._3RD_AGE_CLOAK),
    _3RD_AGE_LONGSWORD(ItemID._3RD_AGE_LONGSWORD),
    _3RD_AGE_WAND(ItemID._3RD_AGE_WAND),
    AFRO(ItemID.AFRO),
    BLACK_DHIDE_BODY_G(ItemID.BLACK_DHIDE_BODY_G),
    BLACK_DHIDE_CHAPS_G(ItemID.BLACK_DHIDE_CHAPS_G),
    BLACK_DHIDE_BODY_T(ItemID.BLACK_DHIDE_BODY_T),
    BLACK_DHIDE_CHAPS_T(ItemID.BLACK_DHIDE_CHAPS_T),
    BLACKSMITHS_HELM(ItemID.BLACKSMITHS_HELM),
    BRIEFCASE(ItemID.BRIEFCASE),
    BUCKET_HELM(ItemID.BUCKET_HELM),
    DRAGON_CANE(ItemID.DRAGON_CANE),
    DEERSTALKER(ItemID.DEERSTALKER),
    DRAGON_KITESHIELD_G(ItemID.DRAGON_KITESHIELD_G),
    DRAGON_SQ_SHIELD_G(ItemID.DRAGON_SQ_SHIELD_G),
    DRAGON_PLATEBODY_G(ItemID.DRAGON_PLATEBODY_G),
    DRAGON_PLATELEGS_G(ItemID.DRAGON_PLATELEGS_G),
    DRAGON_PLATESKIRT_G(ItemID.DRAGON_PLATESKIRT_G),
    DRAGON_FULL_HELM_G(ItemID.DRAGON_FULL_HELM_G),
    ADAMANT_DRAGON_MASK(ItemID.ADAMANT_DRAGON_MASK),
    RUNE_DRAGON_MASK(ItemID.RUNE_DRAGON_MASK),
    BRONZE_DRAGON_MASK(ItemID.BRONZE_DRAGON_MASK),
    IRON_DRAGON_MASK(ItemID.IRON_DRAGON_MASK),
    LAVA_DRAGON_MASK(ItemID.LAVA_DRAGON_MASK),
    MITHRIL_DRAGON_MASK(ItemID.MITHRIL_DRAGON_MASK),
    STEEL_DRAGON_MASK(ItemID.STEEL_DRAGON_MASK),
    DRAGON_SCIMITAR_OR(ItemID.DRAGON_SCIMITAR_OR),
    GILDED_DHIDE_BODY(ItemID.GILDED_DHIDE_BODY),
    GILDED_DHIDE_CHAPS(ItemID.GILDED_DHIDE_CHAPS),
    GILDED_DHIDE_VAMBRACES(ItemID.GILDED_DHIDE_VAMBRACES),
    GILDED_COIF(ItemID.GILDED_COIF),
    FREMENNIK_KILT(ItemID.FREMENNIK_KILT),
    GIANT_BOOT(ItemID.GIANT_BOOT),
    HEAVY_CASKET(ItemID.HEAVY_CASKET),
    HOLY_WRAPS(ItemID.HOLY_WRAPS),
    KATANA(ItemID.KATANA),
    ARCEUUS_SCARF(ItemID.ARCEUUS_SCARF),
    HOSIDIUS_SCARF(ItemID.HOSIDIUS_SCARF),
    LOVAKENGJ_SCARF(ItemID.LOVAKENGJ_SCARF),
    PISCARILIUS_SCARF(ItemID.PISCARILIUS_SCARF),
    SHAYZIEN_SCARF(ItemID.SHAYZIEN_SCARF),
    MONOCLE(ItemID.MONOCLE),
    MUSKETEER_HAT(ItemID.MUSKETEER_HAT),
    MUSKETEER_PANTS(ItemID.MUSKETEER_PANTS),
    MUSKETEER_TABARD(ItemID.MUSKETEER_TABARD),
    PARTYHAT__SPECS(ItemID.PARTYHAT__SPECS),
    PIRATE_HAT__PATCH(ItemID.PIRATE_HAT__PATCH),
    BIG_PIRATE_HAT(ItemID.BIG_PIRATE_HAT),
    RANGER_GLOVES(ItemID.RANGER_GLOVES),
    RANGERS_TIGHTS(ItemID.RANGERS_TIGHTS),
    RANGERS_TUNIC(ItemID.RANGERS_TUNIC),
    RING_OF_3RD_AGE(ItemID.RING_OF_3RD_AGE),
    RING_OF_NATURE(ItemID.RING_OF_NATURE),
    ROYAL_CROWN(ItemID.ROYAL_CROWN),
    ROYAL_SCEPTRE(ItemID.ROYAL_SCEPTRE),
    ROYAL_GOWN_BOTTOM(ItemID.ROYAL_GOWN_BOTTOM),
    ROYAL_GOWN_TOP(ItemID.ROYAL_GOWN_TOP),
    GILDED_AXE(ItemID.GILDED_AXE),
    GILDED_BOOTS(ItemID.GILDED_BOOTS),
    GILDED_PICKAXE(ItemID.GILDED_PICKAXE),
    GILDED_SCIMITAR(ItemID.GILDED_SCIMITAR),
    GILDED_SPADE(ItemID.GILDED_SPADE),
    SAGACIOUS_SPECTACLES(ItemID.SAGACIOUS_SPECTACLES),
    TOP_HAT__MONOCLE(ItemID.TOP_HAT__MONOCLE),
    TOP_HAT(ItemID.TOP_HAT),
    DARK_TUXEDO_CUFFS(ItemID.DARK_TUXEDO_CUFFS),
    DARK_TUXEDO_JACKET(ItemID.DARK_TUXEDO_JACKET),
    DARK_TUXEDO_SHOES(ItemID.DARK_TUXEDO_SHOES),
    DARK_BOW_TIE(ItemID.DARK_BOW_TIE),
    DARK_TROUSERS(ItemID.DARK_TROUSERS),
    LIGHT_TUXEDO_CUFFS(ItemID.LIGHT_TUXEDO_CUFFS),
    LIGHT_TUXEDO_JACKET(ItemID.LIGHT_TUXEDO_JACKET),
    LIGHT_TUXEDO_SHOES(ItemID.LIGHT_TUXEDO_SHOES),
    LIGHT_BOW_TIE(ItemID.LIGHT_BOW_TIE),
    LIGHT_TROUSERS(ItemID.LIGHT_TROUSERS),
    URIS_HAT(ItemID.URIS_HAT),


    //MASTER CLUES
    _3RD_AGE_AXE(ItemID._3RD_AGE_AXE),
    _3RD_AGE_DRUIDIC_CLOAK(ItemID._3RD_AGE_DRUIDIC_CLOAK),
    _3RD_AGE_DRUIDIC_ROBE_BOTTOMS(ItemID._3RD_AGE_DRUIDIC_ROBE_BOTTOMS),
    _3RD_AGE_DRUIDIC_ROBE_TOP(ItemID._3RD_AGE_DRUIDIC_ROBE_TOP),
    _3RD_AGE_DRUIDIC_STAFF(ItemID._3RD_AGE_DRUIDIC_STAFF),
    _3RD_AGE_PICKAXE(ItemID._3RD_AGE_PICKAXE),
    ANKOU_GLOVES(ItemID.ANKOU_GLOVES),
    ANKOU_MASK(ItemID.ANKOU_MASK),
    ANKOU_SOCKS(ItemID.ANKOU_SOCKS),
    ANKOU_TOP(ItemID.ANKOU_TOP),
    ANKOUS_LEGGINGS(ItemID.ANKOUS_LEGGINGS),
    BOWL_WIG(ItemID.BOWL_WIG),
    BUCKET_HELM_G(ItemID.BUCKET_HELM_G),
    LEFT_EYE_PATCH(ItemID.LEFT_EYE_PATCH),
    FANCY_TIARA(ItemID.FANCY_TIARA),
    HALF_MOON_SPECTACLES(ItemID.HALF_MOON_SPECTACLES),
    ARCEUUS_HOOD(ItemID.ARCEUUS_HOOD),
    HOSIDIUS_HOOD(ItemID.HOSIDIUS_HOOD),
    LOVAKENGJ_HOOD(ItemID.LOVAKENGJ_HOOD),
    PISCARILIUS_HOOD(ItemID.PISCARILIUS_HOOD),
    SHAYZIEN_HOOD(ItemID.SHAYZIEN_HOOD),
    BLACK_DEMON_MASK(ItemID.BLACK_DEMON_MASK),
    GREATER_DEMON_MASK(ItemID.GREATER_DEMON_MASK),
    JUNGLE_DEMON_MASK(ItemID.JUNGLE_DEMON_MASK),
    LESSER_DEMON_MASK(ItemID.LESSER_DEMON_MASK),
    OLD_DEMON_MASK(ItemID.OLD_DEMON_MASK),
    MUMMYS_BODY(ItemID.MUMMYS_BODY),
    MUMMYS_FEET(ItemID.MUMMYS_FEET),
    MUMMYS_HANDS(ItemID.MUMMYS_HANDS),
    MUMMYS_HEAD(ItemID.MUMMYS_HEAD),
    MUMMYS_LEGS(ItemID.MUMMYS_LEGS),
    OBSIDIAN_CAPE_R(ItemID.OBSIDIAN_CAPE_R),
    RING_OF_COINS(ItemID.RING_OF_COINS),
    HOOD_OF_DARKNESS(ItemID.HOOD_OF_DARKNESS),
    BOOTS_OF_DARKNESS(ItemID.BOOTS_OF_DARKNESS),
    GLOVES_OF_DARKNESS(ItemID.GLOVES_OF_DARKNESS),
    ROBE_BOTTOM_OF_DARKNESS(ItemID.ROBE_BOTTOM_OF_DARKNESS),
    ROBE_TOP_OF_DARKNESS(ItemID.ROBE_TOP_OF_DARKNESS),
    SAMURAI_BOOTS(ItemID.SAMURAI_BOOTS),
    SAMURAI_GLOVES(ItemID.SAMURAI_GLOVES),
    SAMURAI_GREAVES(ItemID.SAMURAI_GREAVES),
    SAMURAI_SHIRT(ItemID.SAMURAI_SHIRT),
    SAMURAI_KASA(ItemID.SAMURAI_KASA),
    SCROLL_SACK(ItemID.SCROLL_SACK);
    
    private final int itemID;
    @Getter
    private final String location = "Treasure Chest";
    @Getter
    private final boolean isBis;
    TreasureChest(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum FlamtaerBag implements StorableItem {
    TIMBER_BEAMS(ItemID.TIMBER_BEAM),
    LIMESTONE_BRICK(ItemID.LIMESTONE_BRICK),
    SWAMP_PASTE(ItemID.SWAMP_PASTE);

    private final int itemID;
    @Getter
    private final String location = "Flamtaer Bag";
    @Getter
    private final boolean isBis;

    FlamtaerBag(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum SpiceRack implements StorableItem {
    ORANGE_SPICE_1(ItemID.ORANGE_SPICE_1),
    ORANGE_SPICE_2(ItemID.ORANGE_SPICE_2),
    ORANGE_SPICE_3(ItemID.ORANGE_SPICE_3),
    ORANGE_SPICE_4(ItemID.ORANGE_SPICE_4),
    RED_SPICE_1(ItemID.RED_SPICE_1),
    RED_SPICE_2(ItemID.RED_SPICE_2),
    RED_SPICE_3(ItemID.RED_SPICE_3),
    RED_SPICE_4(ItemID.RED_SPICE_4),
    YELLOW_SPICE_1(ItemID.YELLOW_SPICE_1),
    YELLOW_SPICE_2(ItemID.YELLOW_SPICE_2),
    YELLOW_SPICE_3(ItemID.YELLOW_SPICE_3),
    YELLOW_SPICE_4(ItemID.YELLOW_SPICE_4),
    BROWN_SPICE_1(ItemID.BROWN_SPICE_1),
    BROWN_SPICE_2(ItemID.BROWN_SPICE_2),
    BROWN_SPICE_3(ItemID.BROWN_SPICE_3),
    BROWN_SPICE_4(ItemID.BROWN_SPICE_4);

    private final int itemID;
    @Getter
    private final String location = "Spice Rack";
    @Getter
    private final boolean isBis;
    SpiceRack(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum HuntsmansKit implements StorableItem {
    BIRD_SNARE(ItemID.BIRD_SNARE),
    NOOSE_WAND(ItemID.NOOSE_WAND),
    BUTTERFLY_NET_(ItemID.BUTTERFLY_NET),
    MAGIC_BUTTERFLY_NET_(ItemID.MAGIC_BUTTERFLY_NET),
    BUTTERFLY_JAR_(ItemID.BUTTERFLY_JAR),
    BOX_TRAP(ItemID.BOX_TRAP),
    RABBIT_SNARE(ItemID.RABBIT_SNARE),
    UNLIT_TORCH(ItemID.UNLIT_TORCH),
    SMALL_FISHING_NET_(ItemID.SMALL_FISHING_NET),
    ROPE(ItemID.ROPE),
    MAGIC_BOX(ItemID.MAGIC_BOX),
    IMPINABOX1(ItemID.IMPINABOX1),
    IMPINABOX2(ItemID.IMPINABOX2),
    TEASING_STICK(ItemID.TEASING_STICK),
    HUNTERS_SPEAR(ItemID.HUNTERS_SPEAR),
    WOOD_CAMO_TOP_(ItemID.WOOD_CAMO_TOP),
    WOOD_CAMO_LEGS_(ItemID.WOOD_CAMO_LEGS),
    POLAR_CAMO_TOP_(ItemID.POLAR_CAMO_TOP),
    POLAR_CAMO_LEGS_(ItemID.POLAR_CAMO_LEGS),
    JUNGLE_CAMO_TOP_(ItemID.JUNGLE_CAMO_TOP),
    JUNGLE_CAMO_LEGS_(ItemID.JUNGLE_CAMO_LEGS),
    DESERT_CAMO_TOP_(ItemID.DESERT_CAMO_TOP),
    DESERT_CAMO_LEGS_(ItemID.DESERT_CAMO_LEGS),
    LARUPIA_HAT_(ItemID.LARUPIA_HAT),
    LARUPIA_TOP_(ItemID.LARUPIA_TOP),
    LARUPIA_LEGS_(ItemID.LARUPIA_LEGS),
    GRAAKH_HEADDRESS(ItemID.GRAAHK_HEADDRESS),
    GRAAKH_TOP(ItemID.GRAAHK_TOP),
    GRAAKH_LEGS(ItemID.GRAAHK_LEGS),
    KYATT_HAT_(ItemID.KYATT_HAT),
    KYATT_TOP_(ItemID.KYATT_TOP),
    KYATT_LEGS_(ItemID.KYATT_LEGS),
    HUNTER_HOOD(ItemID.HUNTER_HOOD),
    HUNTER_CAPE(ItemID.HUNTER_CAPE),
    HUNTER_CAPET(ItemID.HUNTER_CAPET),
    GUILD_HUNTER_HEADWEAR(ItemID.GUILD_HUNTER_HEADWEAR),
    GUILD_HUNTER_TOP(ItemID.GUILD_HUNTER_TOP),
    GUILD_HUNTER_LEGS(ItemID.GUILD_HUNTER_LEGS),
    GUILD_HUNTER_BOOTS(ItemID.GUILD_HUNTER_BOOTS),
    RING_OF_PURSUIT(ItemID.RING_OF_PURSUIT),
    IMPLING_JAR_(ItemID.IMPLING_JAR);

    private final int itemID;
    @Getter
    private final String location = "Huntsman's Kit";
    @Getter
    private final boolean isBis;

    HuntsmansKit(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum FossilStorage implements StorableItem {
    UNIDENTIFIED_SMALL_FOSSIL(ItemID.UNIDENTIFIED_SMALL_FOSSIL),
    SMALL_FOSSILISED_LIMBS(ItemID.SMALL_FOSSILISED_LIMBS),
    SMALL_FOSSILISED_SPINE(ItemID.SMALL_FOSSILISED_SPINE),
    SMALL_FOSSILISED_RIBS(ItemID.SMALL_FOSSILISED_RIBS),
    SMALL_FOSSILISED_PELVIS(ItemID.SMALL_FOSSILISED_PELVIS),
    SMALL_FOSSILISED_SKULL(ItemID.SMALL_FOSSILISED_SKULL),
    UNIDENTIFIED_MEDIUM_FOSSIL(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL),
    MEDIUM_FOSSILISED_LIMBS(ItemID.MEDIUM_FOSSILISED_LIMBS),
    MEDIUM_FOSSILISED_SPINE(ItemID.MEDIUM_FOSSILISED_SPINE),
    MEDIUM_FOSSILISED_RIBS(ItemID.MEDIUM_FOSSILISED_RIBS),
    MEDIUM_FOSSILISED_PELVIS(ItemID.MEDIUM_FOSSILISED_PELVIS),
    MEDIUM_FOSSILISED_SKULL(ItemID.MEDIUM_FOSSILISED_SKULL),
    UNIDENTIFIED_LARGE_FOSSIL(ItemID.UNIDENTIFIED_LARGE_FOSSIL),
    LARGE_FOSSILISED_LIMBS(ItemID.LARGE_FOSSILISED_LIMBS),
    LARGE_FOSSILISED_SPINE(ItemID.LARGE_FOSSILISED_SPINE),
    LARGE_FOSSILISED_RIBS(ItemID.LARGE_FOSSILISED_RIBS),
    LARGE_FOSSILISED_PELVIS(ItemID.LARGE_FOSSILISED_PELVIS),
    LARGE_FOSSILISED_SKULL(ItemID.LARGE_FOSSILISED_SKULL),
    FOSSILISED_ROOTS(ItemID.FOSSILISED_ROOTS),
    FOSSILISED_STUMP(ItemID.FOSSILISED_STUMP),
    FOSSILISED_BRANCH(ItemID.FOSSILISED_BRANCH),
    FOSSILISED_LEAF(ItemID.FOSSILISED_LEAF),
    FOSSILISED_MUSHROOM(ItemID.FOSSILISED_MUSHROOM),
    UNIDENTIFIED_RARE_FOSSIL(ItemID.UNIDENTIFIED_RARE_FOSSIL),
    RARE_FOSSILISED_LIMBS(ItemID.RARE_FOSSILISED_LIMBS),
    RARE_FOSSILISED_PELVIS(ItemID.RARE_FOSSILISED_PELVIS),
    RARE_FOSSILISED_RIBS(ItemID.RARE_FOSSILISED_RIBS),
    RARE_FOSSILISED_SKULL(ItemID.RARE_FOSSILISED_SKULL),
    RARE_FOSSILISED_SPINE(ItemID.RARE_FOSSILISED_SPINE),
    RARE_FOSSILISED_TUSK(ItemID.RARE_FOSSILISED_TUSK);

    private final int itemID;
    @Getter
    private final String location = "Fossil Storage";
    @Getter
    private final boolean isBis;

    FossilStorage(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum SteelKeyRing implements StorableItem {
    ANCESTREAL_KEY(ItemID.ANCESTRAL_KEY),
    BATTERED_KEY(ItemID.BATTERED_KEY),
    BONE_KEY(ItemID.BONE_KEY),
    BRASS_KEY(ItemID.BRASS_KEY),
    CRYSTALMINE_KEY(ItemID.CRYSTALMINE_KEY),
    DUSTY_KEY(ItemID.DUSTY_KEY),
    ENCHANTED_KEY(ItemID.ENCHANTED_KEY),
    WEAPON_STORE_KEY(ItemID.WEAPON_STORE_KEY),
    MAZE_KEY(ItemID.MAZE_KEY),
    METAL_KEY(ItemID.METAL_KEY),
    NEW_KEY(ItemID.NEW_KEY),
    SHINY_KEY(ItemID.SHINY_KEY),
    WROUGHT_IRON_KEY(ItemID.WROUGHT_IRON_KEY);

    private final int itemID;
    @Getter
    private final String location = "Steel Key Ring";
    @Getter
    private final boolean isBis;
    SteelKeyRing(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;

@Getter
public enum ArmourCase implements StorableItem
{
    ADVENTURERS_HOOD_T1(ItemID.ADVENTURERS_HOOD_T1),
    ADVENTURERS_TOP_T1(ItemID.ADVENTURERS_TOP_T1),
    ADVENTURERS_TROUSERS_T1(ItemID.ADVENTURERS_TROUSERS_T1),
    ADVENTURERS_BOOTS_T1(ItemID.ADVENTURERS_BOOTS_T1),
    ADVENTURERS_HOOD_T2(ItemID.ADVENTURERS_HOOD_T2),
    ADVENTURERS_TOP_T2(ItemID.ADVENTURERS_TOP_T2),
    ADVENTURERS_TROUSERS_T2(ItemID.ADVENTURERS_TROUSERS_T2),
    ADVENTURERS_BOOTS_T2(ItemID.ADVENTURERS_BOOTS_T2),
    ADVENTURERS_HOOD_T3(ItemID.ADVENTURERS_HOOD_T3),
    ADVENTURERS_TOP_T3(ItemID.ADVENTURERS_TOP_T3),
    ADVENTURERS_TROUSERS_T3(ItemID.ADVENTURERS_TROUSERS_T3),
    ADVENTURERS_BOOTS_T3(ItemID.ADVENTURERS_BOOTS_T3),
    // Angler outfit is storable in the tackle box
    // Spirit angler outfit is storable in the tackle box
    ARDOUGNE_KNIGHT_HELM(ItemID.ARDOUGNE_KNIGHT_HELM),
    ARDOUGNE_KNIGHT_PLATEBODY(ItemID.ARDOUGNE_KNIGHT_PLATEBODY),
    ARDOUGNE_KNIGHT_PLATELEGS(ItemID.ARDOUGNE_KNIGHT_PLATELEGS),
    BOMBER_CAP(ItemID.BOMBER_CAP),
    CAP_AND_GOGGLES(ItemID.CAP_AND_GOGGLES),
    BOMBER_JACKET(ItemID.BOMBER_JACKET),
    HARD_HAT(ItemID.HARD_HAT),
    BUILDERS_SHIRT(ItemID.BUILDERS_SHIRT),
    BUILDERS_TROUSERS(ItemID.BUILDERS_TROUSERS),
    BUILDERS_BOOTS(ItemID.BUILDERS_BOOTS),
    DESERT_CAMO_TOP(ItemID.DESERT_CAMO_TOP),
    DESERT_CAMO_LEGS(ItemID.DESERT_CAMO_LEGS),
    JUNGLE_CAMO_TOP(ItemID.JUNGLE_CAMO_TOP),
    JUNGLE_CAMO_LEGS(ItemID.JUNGLE_CAMO_LEGS),
    POLAR_CAMO_TOP(ItemID.POLAR_CAMO_TOP),
    POLAR_CAMO_LEGS(ItemID.POLAR_CAMO_LEGS),
    WOOD_CAMO_TOP(ItemID.WOOD_CAMO_TOP),
    WOOD_CAMO_LEGS(ItemID.WOOD_CAMO_LEGS),
    SHATTERED_CANE(ItemID.SHATTERED_CANE),
    TRAILBLAZER_CANE(ItemID.TRAILBLAZER_CANE),
    TWISTED_CANE(ItemID.TWISTED_CANE),
    // Castle Wars armour (1)
    DECORATIVE_HELM(ItemID.DECORATIVE_HELM),
    DECORATIVE_FULL_HELM(ItemID.DECORATIVE_FULL_HELM),
    DECORATIVE_ARMOUR(ItemID.DECORATIVE_ARMOUR),
    DECORATIVE_ARMOUR_4070(ItemID.DECORATIVE_ARMOUR_4070),
    DECORATIVE_ARMOUR_11893(ItemID.DECORATIVE_ARMOUR_11893),
    DECORATIVE_SHIELD(ItemID.DECORATIVE_SHIELD),
    DECORATIVE_BOOTS(ItemID.DECORATIVE_BOOTS),
    // Castle Wars armour (2)
    DECORATIVE_HELM_4506(ItemID.DECORATIVE_HELM_4506),
    DECORATIVE_FULL_HELM_25169(ItemID.DECORATIVE_FULL_HELM_25169),
    DECORATIVE_ARMOUR_4504(ItemID.DECORATIVE_ARMOUR_4504),
    DECORATIVE_ARMOUR_4505(ItemID.DECORATIVE_ARMOUR_4505),
    DECORATIVE_ARMOUR_11894(ItemID.DECORATIVE_ARMOUR_11894),
    DECORATIVE_SHIELD_4507(ItemID.DECORATIVE_SHIELD_4507),
    DECORATIVE_BOOTS_25167(ItemID.DECORATIVE_BOOTS_25167),
    // Castle Wars armour (3)
    DECORATIVE_HELM_4511(ItemID.DECORATIVE_HELM_4511),
    DECORATIVE_FULL_HELM_25174(ItemID.DECORATIVE_FULL_HELM_25174),
    DECORATIVE_ARMOUR_4509(ItemID.DECORATIVE_ARMOUR_4509),
    DECORATIVE_ARMOUR_4510(ItemID.DECORATIVE_ARMOUR_4510),
    DECORATIVE_ARMOUR_11895(ItemID.DECORATIVE_ARMOUR_11895),
    DECORATIVE_SHIELD_4512(ItemID.DECORATIVE_SHIELD_4512),
    DECORATIVE_BOOTS_25171(ItemID.DECORATIVE_BOOTS_25171),
    // Castle Wars sword (1)
    DECORATIVE_SWORD(ItemID.DECORATIVE_SWORD),
    // Castle Wars sword (2)
    DECORATIVE_SWORD_4503(ItemID.DECORATIVE_SWORD_4503),
    // Castle Wars sword (3)
    DECORATIVE_SWORD_4508(ItemID.DECORATIVE_SWORD_4508),
    // Castle Wars mage armour
    DECORATIVE_ARMOUR_11896(ItemID.DECORATIVE_ARMOUR_11896),
    DECORATIVE_ARMOUR_MAGIC_LEGS(ItemID.DECORATIVE_ARMOUR_11897),
    DECORATIVE_ARMOUR_11898(ItemID.DECORATIVE_ARMOUR_11898),
    // Castle Wars ranger armour
    DECORATIVE_ARMOUR_11899(ItemID.DECORATIVE_ARMOUR_11899),
    DECORATIVE_ARMOUR_11900(ItemID.DECORATIVE_ARMOUR_11900),
    DECORATIVE_ARMOUR_11901(ItemID.DECORATIVE_ARMOUR_11901),
    CLUE_HUNTER_GARB(ItemID.CLUE_HUNTER_GARB),
    CLUE_HUNTER_TROUSERS(ItemID.CLUE_HUNTER_TROUSERS),
    CLUE_HUNTER_GLOVES(ItemID.CLUE_HUNTER_GLOVES),
    CLUE_HUNTER_BOOTS(ItemID.CLUE_HUNTER_BOOTS),
    CLUE_HUNTER_CLOAK(ItemID.CLUE_HUNTER_CLOAK),
    CORRUPTED_HELM(ItemID.CORRUPTED_HELM),
    CORRUPTED_PLATEBODY(ItemID.CORRUPTED_PLATEBODY),
    CORRUPTED_PLATELEGS(ItemID.CORRUPTED_PLATELEGS),
    CORRUPTED_PLATESKIRT(ItemID.CORRUPTED_PLATESKIRT),
    CORRUPTED_KITESHIELD(ItemID.CORRUPTED_KITESHIELD),
    DEADMANS_CHEST(ItemID.DEADMANS_CHEST),
    DEADMANS_LEGS(ItemID.DEADMANS_LEGS),
    DEADMANS_CAPE(ItemID.DEADMANS_CAPE),
    DRAGONSTONE_FULL_HELM(ItemID.DRAGONSTONE_FULL_HELM),
    DRAGONSTONE_PLATEBODY(ItemID.DRAGONSTONE_PLATEBODY),
    DRAGONSTONE_PLATELEGS(ItemID.DRAGONSTONE_PLATELEGS),
    DRAGONSTONE_BOOTS(ItemID.DRAGONSTONE_BOOTS),
    DRAGONSTONE_GAUNTLETS(ItemID.DRAGONSTONE_GAUNTLETS),
    FARMERS_STRAWHAT(ItemID.FARMERS_STRAWHAT),
    FARMERS_JACKET(ItemID.FARMERS_JACKET),
    FARMERS_SHIRT(ItemID.FARMERS_SHIRT),
    FARMERS_BORO_TROUSERS(ItemID.FARMERS_BORO_TROUSERS),
    FARMERS_BOOTS(ItemID.FARMERS_BOOTS),
    FEDORA(ItemID.FEDORA),
    GIANT_STOPWATCH(ItemID.GIANT_STOPWATCH),
    HAM_HOOD(ItemID.HAM_HOOD),
    HAM_SHIRT(ItemID.HAM_SHIRT),
    HAM_ROBE(ItemID.HAM_ROBE),
    HAM_GLOVES(ItemID.HAM_GLOVES),
    HAM_BOOTS(ItemID.HAM_BOOTS),
    HAM_CLOAK(ItemID.HAM_CLOAK),
    HAM_LOGO(ItemID.HAM_LOGO),
    ANCIENT_HALO(ItemID.ANCIENT_HALO),
    ARMADYL_HALO(ItemID.ARMADYL_HALO),
    BANDOS_HALO(ItemID.BANDOS_HALO),
    BRASSICA_HALO(ItemID.BRASSICA_HALO),
    GUTHIX_HALO(ItemID.GUTHIX_HALO),
    SARADOMIN_HALO(ItemID.SARADOMIN_HALO),
    SEREN_HALO(ItemID.SEREN_HALO),
    ZAMORAK_HALO(ItemID.ZAMORAK_HALO),
    HELM_OF_RAEDWALD(ItemID.HELM_OF_RAEDWALD),
    GRAAHK_HEADDRESS(ItemID.GRAAHK_HEADDRESS),
    GRAAHK_TOP(ItemID.GRAAHK_TOP),
    GRAAHK_LEGS(ItemID.GRAAHK_LEGS),
    KYATT_HAT(ItemID.KYATT_HAT),
    KYATT_TOP(ItemID.KYATT_TOP),
    KYATT_LEGS(ItemID.KYATT_LEGS),
    LARUPIA_HAT(ItemID.LARUPIA_HAT),
    LARUPIA_TOP(ItemID.LARUPIA_TOP),
    LARUPIA_LEGS(ItemID.LARUPIA_LEGS),
    INQUISITORS_GREAT_HELM(ItemID.INQUISITORS_GREAT_HELM, true),
    INQUISITORS_HAUBERK(ItemID.INQUISITORS_HAUBERK, true),
    INQUISITORS_PLATESKIRT(ItemID.INQUISITORS_PLATESKIRT, true),
    JUSTICIAR_FACEGUARD(ItemID.JUSTICIAR_FACEGUARD, true),
    JUSTICIAR_CHESTGUARD(ItemID.JUSTICIAR_CHESTGUARD, true),
    JUSTICIAR_LEGGUARDS(ItemID.JUSTICIAR_LEGGUARDS, true),
    LUMBERJACK_HAT_AC(ItemID.LUMBERJACK_HAT),
    LUMBERJACK_TOP_AC(ItemID.LUMBERJACK_TOP),
    LUMBERJACK_LEGS_AC(ItemID.LUMBERJACK_LEGS),
    LUMBERJACK_BOOTS_AC(ItemID.LUMBERJACK_BOOTS),
    MASORI_MASK(ItemID.MASORI_MASK, true),
    MASORI_BODY(ItemID.MASORI_BODY, true),
    MASORI_CHAPS(ItemID.MASORI_CHAPS, true),
    MASORI_MASK_F(ItemID.MASORI_MASK_F, true),
    MASORI_BODY_F(ItemID.MASORI_BODY_F, true),
    MASORI_CHAPS_F(ItemID.MASORI_CHAPS_F, true),
    MINING_GLOVES(ItemID.MINING_GLOVES),
    SUPERIOR_MINING_GLOVES(ItemID.SUPERIOR_MINING_GLOVES),
    EXPERT_MINING_GLOVES(ItemID.EXPERT_MINING_GLOVES),
    MIXED_HIDE_TOP(ItemID.MIXED_HIDE_TOP),
    MIXED_HIDE_LEGS(ItemID.MIXED_HIDE_LEGS),
    MIXED_HIDE_BOOTS(ItemID.MIXED_HIDE_BOOTS),
    MIXED_HIDE_CAPE(ItemID.MIXED_HIDE_CAPE),
    GAS_MASK(ItemID.GAS_MASK),
    MOURNER_TOP(ItemID.MOURNER_TOP),
    MOURNER_TROUSERS(ItemID.MOURNER_TROUSERS),
    MOURNER_BOOTS(ItemID.MOURNER_BOOTS),
    MOURNER_GLOVES(ItemID.MOURNER_GLOVES),
    MOURNER_CLOAK(ItemID.MOURNER_CLOAK),
    OBSIDIAN_HELMET(ItemID.OBSIDIAN_HELMET),
    OBSIDIAN_PLATEBODY(ItemID.OBSIDIAN_PLATEBODY),
    OBSIDIAN_PLATELEGS(ItemID.OBSIDIAN_PLATELEGS),
    ORNATE_HELM(ItemID.ORNATE_HELM),
    ORNATE_TOP(ItemID.ORNATE_TOP),
    ORNATE_LEGS(ItemID.ORNATE_LEGS),
    ORNATE_GLOVES(ItemID.ORNATE_GLOVES),
    ORNATE_BOOTS(ItemID.ORNATE_BOOTS),
    ORNATE_CAPE(ItemID.ORNATE_CAPE),
    FIGHTER_HAT(ItemID.FIGHTER_HAT),
    FIGHTER_TORSO(ItemID.FIGHTER_TORSO),
    PENANCE_GLOVES(ItemID.PENANCE_GLOVES),
    HEALER_HAT(ItemID.HEALER_HAT),
    RANGER_HAT(ItemID.RANGER_HAT),
    RUNNER_BOOTS(ItemID.RUNNER_BOOTS),
    RUNNER_HAT(ItemID.RUNNER_HAT),
    PENANCE_SKIRT(ItemID.PENANCE_SKIRT),
    PROSPECTOR_HELMET(ItemID.PROSPECTOR_HELMET),
    PROSPECTOR_JACKET(ItemID.PROSPECTOR_JACKET),
    PROSPECTOR_LEGS(ItemID.PROSPECTOR_LEGS),
    PROSPECTOR_BOOTS(ItemID.PROSPECTOR_BOOTS),
    GOLDEN_PROSPECTOR_HELMET(ItemID.GOLDEN_PROSPECTOR_HELMET),
    GOLDEN_PROSPECTOR_JACKET(ItemID.GOLDEN_PROSPECTOR_JACKET),
    GOLDEN_PROSPECTOR_LEGS(ItemID.GOLDEN_PROSPECTOR_LEGS),
    GOLDEN_PROSPECTOR_BOOTS(ItemID.GOLDEN_PROSPECTOR_BOOTS),
    ROCKSHELL_HELM(ItemID.ROCKSHELL_HELM),
    ROCKSHELL_PLATE(ItemID.ROCKSHELL_PLATE),
    ROCKSHELL_LEGS(ItemID.ROCKSHELL_LEGS),
    ROCKSHELL_GLOVES(ItemID.ROCKSHELL_GLOVES),
    ROCKSHELL_BOOTS(ItemID.ROCKSHELL_BOOTS),
    ROGUE_MASK(ItemID.ROGUE_MASK),
    ROGUE_TOP(ItemID.ROGUE_TOP),
    ROGUE_GLOVES(ItemID.ROGUE_GLOVES),
    ROGUE_TROUSERS(ItemID.ROGUE_TROUSERS),
    ROGUE_BOOTS(ItemID.ROGUE_BOOTS),
    SHATTERED_HOOD_T1(ItemID.SHATTERED_HOOD_T1),
    SHATTERED_TOP_T1(ItemID.SHATTERED_TOP_T1),
    SHATTERED_TROUSERS_T1(ItemID.SHATTERED_TROUSERS_T1),
    SHATTERED_BOOTS_T1(ItemID.SHATTERED_BOOTS_T1),
    SHATTERED_HOOD_T2(ItemID.SHATTERED_HOOD_T2),
    SHATTERED_TOP_T2(ItemID.SHATTERED_TOP_T2),
    SHATTERED_TROUSERS_T2(ItemID.SHATTERED_TROUSERS_T2),
    SHATTERED_BOOTS_T2(ItemID.SHATTERED_BOOTS_T2),
    SHATTERED_HOOD_T3(ItemID.SHATTERED_HOOD_T3),
    SHATTERED_TOP_T3(ItemID.SHATTERED_TOP_T3),
    SHATTERED_TROUSERS_T3(ItemID.SHATTERED_TROUSERS_T3),
    SHATTERED_BOOTS_T3(ItemID.SHATTERED_BOOTS_T3),
    SHAYZIEN_HELM_1(ItemID.SHAYZIEN_HELM_1),
    SHAYZIEN_PLATEBODY_1(ItemID.SHAYZIEN_PLATEBODY_1),
    SHAYZIEN_GREAVES_1(ItemID.SHAYZIEN_GREAVES_1),
    SHAYZIEN_GLOVES_1(ItemID.SHAYZIEN_GLOVES_1),
    SHAYZIEN_BOOTS_1(ItemID.SHAYZIEN_BOOTS_1),
    SHAYZIEN_HELM_2(ItemID.SHAYZIEN_HELM_2),
    SHAYZIEN_PLATEBODY_2(ItemID.SHAYZIEN_PLATEBODY_2),
    SHAYZIEN_GREAVES_2(ItemID.SHAYZIEN_GREAVES_2),
    SHAYZIEN_GLOVES_2(ItemID.SHAYZIEN_GLOVES_2),
    SHAYZIEN_BOOTS_2(ItemID.SHAYZIEN_BOOTS_2),
    SHAYZIEN_HELM_3(ItemID.SHAYZIEN_HELM_3),
    SHAYZIEN_PLATEBODY_3(ItemID.SHAYZIEN_PLATEBODY_3),
    SHAYZIEN_GREAVES_3(ItemID.SHAYZIEN_GREAVES_3),
    SHAYZIEN_GLOVES_3(ItemID.SHAYZIEN_GLOVES_3),
    SHAYZIEN_BOOTS_3(ItemID.SHAYZIEN_BOOTS_3),
    SHAYZIEN_HELM_4(ItemID.SHAYZIEN_HELM_4),
    SHAYZIEN_PLATEBODY_4(ItemID.SHAYZIEN_PLATEBODY_4),
    SHAYZIEN_GREAVES_4(ItemID.SHAYZIEN_GREAVES_4),
    SHAYZIEN_GLOVES_4(ItemID.SHAYZIEN_GLOVES_4),
    SHAYZIEN_BOOTS_4(ItemID.SHAYZIEN_BOOTS_4),
    SHAYZIEN_HELM_5(ItemID.SHAYZIEN_HELM_5),
    SHAYZIEN_PLATEBODY_5(ItemID.SHAYZIEN_BODY_5),
    SHAYZIEN_GREAVES_5(ItemID.SHAYZIEN_GREAVES_5),
    SHAYZIEN_GLOVES_5(ItemID.SHAYZIEN_GLOVES_5),
    SHAYZIEN_BOOTS_5(ItemID.SHAYZIEN_BOOTS_5),
    SNAKESKIN_BANDANA(ItemID.SNAKESKIN_BANDANA),
    SNAKESKIN_BODY(ItemID.SNAKESKIN_BODY),
    SNAKESKIN_BOOTS(ItemID.SNAKESKIN_BOOTS),
    SNAKESKIN_CHAPS(ItemID.SNAKESKIN_CHAPS),
    SNAKESKIN_VAMBRACES(ItemID.SNAKESKIN_VAMBRACES),
    SPINED_HELM(ItemID.SPINED_HELM),
    SPINED_BODY(ItemID.SPINED_BODY),
    SPINED_CHAPS(ItemID.SPINED_CHAPS),
    SPINED_GLOVES(ItemID.SPINED_GLOVES),
    SPINED_BOOTS(ItemID.SPINED_BOOTS),
    FANCY_BOOTS(ItemID.FANCY_BOOTS),
    FIGHTING_BOOTS(ItemID.FIGHTING_BOOTS),
    FANCIER_BOOTS(ItemID.FANCIER_BOOTS),
    SUNFIRE_FANATIC_HELM(ItemID.SUNFIRE_FANATIC_HELM, true),
    SUNFIRE_FANATIC_CUIRASS(ItemID.SUNFIRE_FANATIC_CUIRASS, true),
    SUNFIRE_FANATIC_CHAUSSES(ItemID.SUNFIRE_FANATIC_CHAUSSES, true),
    SWIFT_BLADE(ItemID.SWIFT_BLADE, true),
    INITIATE_SALLET(ItemID.INITIATE_SALLET),
    INITIATE_HAUBERK(ItemID.INITIATE_HAUBERK),
    INITIATE_CUISSE(ItemID.INITIATE_CUISSE),
    PROSELYTE_SALLET(ItemID.PROSELYTE_SALLET),
    PROSELYTE_TASSET(ItemID.PROSELYTE_TASSET),
    PROSELYTE_HAUBERK(ItemID.PROSELYTE_HAUBERK),
    PROSELYTE_CUISSE(ItemID.PROSELYTE_CUISSE),
    TRAILBLAZER_HOOD_T1(ItemID.TRAILBLAZER_HOOD_T1),
    TRAILBLAZER_TOP_T1(ItemID.TRAILBLAZER_TOP_T1),
    TRAILBLAZER_TROUSERS_T1(ItemID.TRAILBLAZER_TROUSERS_T1),
    TRAILBLAZER_BOOTS_T1(ItemID.TRAILBLAZER_BOOTS_T1),
    TRAILBLAZER_HOOD_T2(ItemID.TRAILBLAZER_HOOD_T2),
    TRAILBLAZER_TOP_T2(ItemID.TRAILBLAZER_TOP_T2),
    TRAILBLAZER_TROUSERS_T2(ItemID.TRAILBLAZER_TROUSERS_T2),
    TRAILBLAZER_BOOTS_T2(ItemID.TRAILBLAZER_BOOTS_T2),
    TRAILBLAZER_HOOD_T3(ItemID.TRAILBLAZER_HOOD_T3),
    TRAILBLAZER_TOP_T3(ItemID.TRAILBLAZER_TOP_T3),
    TRAILBLAZER_TROUSERS_T3(ItemID.TRAILBLAZER_TROUSERS_T3),
    TRAILBLAZER_BOOTS_T3(ItemID.TRAILBLAZER_BOOTS_T3),
    TRIBAL_MASK(ItemID.TRIBAL_MASK),
    TRIBAL_MASK_6337(ItemID.TRIBAL_MASK_6337),
    TRIBAL_MASK_6339(ItemID.TRIBAL_MASK_6339),
    TWISTED_HAT_T1(ItemID.TWISTED_HAT_T1),
    TWISTED_COAT_T1(ItemID.TWISTED_COAT_T1),
    TWISTED_TROUSERS_T1(ItemID.TWISTED_TROUSERS_T1),
    TWISTED_BOOTS_T1(ItemID.TWISTED_BOOTS_T1),
    TWISTED_HAT_T2(ItemID.TWISTED_HAT_T2),
    TWISTED_COAT_T2(ItemID.TWISTED_COAT_T2),
    TWISTED_TROUSERS_T2(ItemID.TWISTED_TROUSERS_T2),
    TWISTED_BOOTS_T2(ItemID.TWISTED_BOOTS_T2),
    TWISTED_HAT_T3(ItemID.TWISTED_HAT_T3),
    TWISTED_COAT_T3(ItemID.TWISTED_COAT_T3),
    TWISTED_TROUSERS_T3(ItemID.TWISTED_TROUSERS_T3),
    TWISTED_BOOTS_T3(ItemID.TWISTED_BOOTS_T3),
    VOID_KNIGHT_TOP(ItemID.VOID_KNIGHT_TOP, true),
    VOID_KNIGHT_ROBE(ItemID.VOID_KNIGHT_ROBE, true),
    VOID_KNIGHT_GLOVES(ItemID.VOID_KNIGHT_GLOVES, true),
    VOID_KNIGHT_TOP_OR(ItemID.VOID_KNIGHT_TOP_OR, true),
    VOID_KNIGHT_ROBE_OR(ItemID.VOID_KNIGHT_ROBE_OR, true),
    VOID_KNIGHT_GLOVES_OR(ItemID.VOID_KNIGHT_GLOVES_OR, true),
    ELITE_VOID_TOP(ItemID.ELITE_VOID_TOP, true),
    ELITE_VOID_ROBE(ItemID.ELITE_VOID_ROBE, true),
    ELITE_VOID_TOP_OR(ItemID.ELITE_VOID_TOP_OR, true),
    ELITE_VOID_ROBE_OR(ItemID.ELITE_VOID_ROBE_OR, true),
    VOID_MAGE_HELM(ItemID.VOID_MAGE_HELM, true),
    VOID_MAGE_HELM_OR(ItemID.VOID_MAGE_HELM_OR, true),
    VOID_MELEE_HELM(ItemID.VOID_MELEE_HELM, true),
    VOID_MELEE_HELM_OR(ItemID.VOID_MELEE_HELM_OR, true),
    VOID_RANGER_HELM(ItemID.VOID_RANGER_HELM, true),
    VOID_RANGER_HELM_OR(ItemID.VOID_RANGER_HELM_OR, true),
    VYRE_NOBLE_TOP(ItemID.VYRE_NOBLE_TOP),
    VYRE_NOBLE_LEGS(ItemID.VYRE_NOBLE_LEGS),
    VYRE_NOBLE_SHOES(ItemID.VYRE_NOBLE_SHOES),
    WHITE_FULL_HELM(ItemID.WHITE_FULL_HELM),
    WHITE_PLATEBODY(ItemID.WHITE_PLATEBODY),
    WHITE_PLATESKIRT(ItemID.WHITE_PLATESKIRT),
    WHITE_PLATELEGS(ItemID.WHITE_PLATELEGS),
    WHITE_GLOVES(ItemID.WHITE_GLOVES),
    WHITE_BOOTS(ItemID.WHITE_BOOTS),
    WHITE_KITESHIELD(ItemID.WHITE_KITESHIELD),
    XERICIAN_HAT(ItemID.XERICIAN_HAT),
    XERICIAN_TOP(ItemID.XERICIAN_TOP),
    XERICIAN_ROBE(ItemID.XERICIAN_ROBE),
    ELITE_BLACK_FULL_HELM(ItemID.ELITE_BLACK_FULL_HELM),
    ELITE_BLACK_PLATEBODY(ItemID.ELITE_BLACK_PLATEBODY),
    ELITE_BLACK_PLATELEGS(ItemID.ELITE_BLACK_PLATELEGS),
    PRESCRIPTION_GOGGLES(ItemID.PRESCRIPTION_GOGGLES),
    ALCHEMIST_LABCOAT(ItemID.ALCHEMIST_LABCOAT),
    ALCHEMIST_GLOVES(ItemID.ALCHEMIST_GLOVES),
    ALCHEMIST_PANTS(ItemID.ALCHEMIST_PANTS);

    private final int itemID;
    @Getter
    private final String location = "Armour Case";

    @Getter
    private final boolean isBis;


    ArmourCase(int itemID) {
        this.itemID = itemID; this.isBis = false;
    }

    ArmourCase(int itemID, boolean isBis) {
        this.itemID = itemID; this.isBis = isBis;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum ToyBox implements StorableItem {
    BUNNY_EARS(ItemID.BUNNY_EARS),
    SCYTHE(ItemID.SCYTHE),
    YOYO(ItemID.YOYO),
    EASTER_BASKET(ItemID.EASTER_BASKET),
    RED_MARIONETTE(ItemID.RED_MARIONETTE),
    BLUE_MARIONETTE(ItemID.BLUE_MARIONETTE),
    GREEN_MARIONETTE(ItemID.GREEN_MARIONETTE),
    RUBBER_CHICKEN(ItemID.RUBBER_CHICKEN),
    BOBBLE_HAT(ItemID.BOBBLE_HAT),
    JESTER_HAT(ItemID.JESTER_HAT),
    TRIJESTER_HAT(ItemID.TRIJESTER_HAT),
    WOOLLY_HAT(ItemID.WOOLLY_HAT),
    BOBBLE_SCARF(ItemID.BOBBLE_SCARF),
    JESTER_SCARF(ItemID.JESTER_SCARF),
    TRIJESTER_SCARF(ItemID.TRIJESTER_SCARF),
    WOOLLY_SCARF(ItemID.WOOLLY_SCARF),
    ZOMBIE_HEAD(ItemID.ZOMBIE_HEAD),
    JACK_LANTERN_MASK(ItemID.JACK_LANTERN_MASK),
    REINDEER_HAT(ItemID.REINDEER_HAT),
    EASTER_RING(ItemID.EASTER_RING),
    SKELETON_MASK(ItemID.SKELETON_MASK),
    SKELETON_SHIRT(ItemID.SKELETON_SHIRT),
    SKELETON_LEGGINGS(ItemID.SKELETON_LEGGINGS),
    SKELETON_GLOVES(ItemID.SKELETON_GLOVES),
    SKELETON_BOOTS(ItemID.SKELETON_BOOTS),
    CHICKEN_HEAD(ItemID.CHICKEN_HEAD),
    CHICKEN_WINGS(ItemID.CHICKEN_WINGS),
    CHICKEN_LEGS(ItemID.CHICKEN_LEGS),
    CHICKEN_FEET(ItemID.CHICKEN_FEET),
    GRIM_REAPER_HOOD(ItemID.GRIM_REAPER_HOOD),
    BLACK_HWEEN_MASK(ItemID.BLACK_HWEEN_MASK),
    BLACK_PARTY_HAT(ItemID.BLACK_PARTYHAT),
    RAINBOW_PARTY_HAT(ItemID.RAINBOW_PARTYHAT),
    COW_MASK(ItemID.COW_MASK),
    COW_TOP(ItemID.COW_TOP),
    COW_TROUSERS(ItemID.COW_TROUSERS),
    COW_GLOVES(ItemID.COW_GLOVES),
    COW_SHOES(ItemID.COW_SHOES),
    ANTISANTA_MASK(ItemID.ANTISANTA_MASK),
    ANTISANTA_JACKET(ItemID.ANTISANTA_JACKET),
    ANTISANTA_PANTALOONS(ItemID.ANTISANTA_PANTALOONS),
    ANTISANTA_GLOVES(ItemID.ANTISANTA_GLOVES),
    ANTISANTA_BOOTS(ItemID.ANTISANTA_BOOTS),
    DRUIDIC_WREATH(ItemID.DRUIDIC_WREATH),
    SANTA_MASK(ItemID.SANTA_MASK),
    SANTA_JACKET(ItemID.SANTA_JACKET),
    SANTA_PANTALOONS(ItemID.SANTA_PANTALOONS),
    SANTA_GLOVES(ItemID.SANTA_GLOVES),
    SANTA_BOOTS(ItemID.SANTA_BOOTS),
    BUNNY_TOP(ItemID.BUNNY_TOP),
    BUNNY_LEGS(ItemID.BUNNY_LEGS),
    BUNNY_PAWS(ItemID.BUNNY_PAWS),
    BUNNY_FEET(ItemID.BUNNY_FEET),
    ANTIPANTIES(ItemID.ANTIPANTIES),
    BLACK_SANTA_HAT(ItemID.BLACK_SANTA_HAT),
    INVERTED_SANTA_HAT(ItemID.INVERTED_SANTA_HAT),
    MASK_OF_BALANCE(ItemID.MASK_OF_BALANCE),
    TIGER_TOY(ItemID.TIGER_TOY),
    LION_TOY(ItemID.LION_TOY),
    SNOW_LEOPARD_TOY(ItemID.SNOW_LEOPARD_TOY),
    AMUR_LEOPARAD_TOY(ItemID.AMUR_LEOPARD_TOY),
    GRAVEDIGGER_MASK(ItemID.GRAVEDIGGER_MASK),
    GRAVEDIGGER_TOP(ItemID.GRAVEDIGGER_TOP),
    GRAVEDIGGER_LEGGINGS(ItemID.GRAVEDIGGER_LEGGINGS),
    GRAVEDIGGER_GLOVES(ItemID.GRAVEDIGGER_GLOVES),
    GRAVEDIGGER_BOOTS(ItemID.GRAVEDIGGER_BOOTS),
    CABBAGE_CAPE(ItemID.CABBAGE_CAPE),
    CRUCIFERROUS_CODEX(ItemID.CRUCIFEROUS_CODEX),
    GIANT_PRESENT(ItemID.GIANT_PRESENT),
    GNOME_CHILD_HAT(ItemID.GNOME_CHILD_HAT),
    HORNWOOD_HELM(ItemID.HORNWOOD_HELM),
    BANSHEE_MASK(ItemID.BANSHEE_MASK),
    BANSHEE_TOP(ItemID.BANSHEE_TOP),
    BANSHEE_ROBE(ItemID.BANSHEE),
    HUNTING_KNIFE(ItemID.HUNTING_KNIFE),
    SACK_OF_PRESENTS(ItemID.SACK_OF_PRESENTS),
    SNOW_GLOBE(ItemID.SNOW_GLOBE),
    _4TH_BIRTHDAY_HAT(ItemID._4TH_BIRTHDAY_HAT),
    BIRTHDAY_BALLOONS(ItemID.BIRTHDAY_BALLOONS),
    EASTER_EGG_HELM(ItemID.EASTER_EGG_HELM),
    HAND_FAN(ItemID.HAND_FAN),
    JONAS_MASK(ItemID.JONAS_MASK),
    RAINBOW_SCARF(ItemID.RAINBOW_SCARF),
    RUNEFEST_SHIELD(ItemID.RUNEFEST_SHIELD),
    SNOW_IMP_COSTUME_HEAD(ItemID.SNOW_IMP_COSTUME_HEAD),
    SNOW_IMP_COSTUME_BODY(ItemID.SNOW_IMP_COSTUME_BODY),
    SNOW_IMP_COSTUME_LEGS(ItemID.SNOW_IMP_COSTUME_LEGS),
    SNOW_IMP_COSTUME_TAIL(ItemID.SNOW_IMP_COSTUME_TAIL),
    SNOW_IMP_COSTUME_GLOVES(ItemID.SNOW_IMP_COSTUME_GLOVES),
    SNOW_IMP_COSTUME_FEET(ItemID.SNOW_IMP_COSTUME_FEET),
    WISE_OLD_MANS_SANTA_HAT(ItemID.WISE_OLD_MANS_SANTA_HAT),
    PROP_SWORD(ItemID.PROP_SWORD),
    STARFACE(ItemID.STARFACE),
    TREE_TOP(ItemID.TREE_TOP),
    TREE_SKIRT(ItemID.TREE_SKIRT),
    CANDY_CANE(ItemID.CANDY_CANE),
    CLOWN_MASK(ItemID.CLOWN_MASK),
    CLOWN_GOWN(ItemID.CLOWN_GOWN),
    CLOW_BOW_TIE(ItemID.CLOWN_BOW_TIE),
    CLOWN_TROUSERS(ItemID.CLOWN_TROUSERS),
    CLOWN_SHOES(ItemID.CLOWN_SHOES),
    EEK(ItemID.EEK),
    EGGSHELL_PLATEBODY(ItemID.EGGSHELL_PLATEBODY),
    EGGSHELL_PLATELEGS(ItemID.EGGSHELL_PLATELEGS),
    BIRTHDAY_CAKE(ItemID.BIRTHDAY_CAKE),
    BUNNYMAN_MASK(ItemID.BUNNYMAN_MASK),
    GIANT_EASTER_EGG(ItemID.GIANT_EASTER_EGG),
    GREEN_GINGERBREAD_SHIELD(ItemID.GREEN_GINGERBREAD_SHIELD),
    PUMPKIN_LANTERN(ItemID.PUMPKIN_LANTERN),
    SKELETON_LANTERN(ItemID.SKELETON_LANTERN),
    SPOOKIER_HOOD(ItemID.SPOOKIER_HOOD),
    SPOOKIER_ROBE(ItemID.SPOOKIER_ROBE),
    SPOOKIER_SKIRT(ItemID.SPOOKIER_SKIRT),
    SPOOKIER_GLOVES(ItemID.SPOOKIER_GLOVES),
    SPOOKIER_BOOTS(ItemID.SPOOKIER_BOOTS),
    SPOOKY_HOOD(ItemID.SPOOKY_HOOD),
    SPOOKY_ROBE(ItemID.SPOOKY_ROBE),
    SPOOKY_SKIRT(ItemID.SPOOKY_SKIRT),
    SPOOKY_GLOVES(ItemID.SPOOKY_GLOVES),
    SPOOKY_BOOTS(ItemID.SPOOKY_BOOTS),
    CAT_EARS(ItemID.CAT_EARS),
    GIANT_BOULDER(ItemID.GIANT_BOULDER),
    CARROT_SWORD(ItemID.CARROT_SWORD),
    _24CARAT_SWORD(ItemID._24CARAT_SWORD),
    MAGIC_EGG_BALL(ItemID.MAGIC_EGG_BALL),
    GOBLIN_DECORATIONS(ItemID.GOBLIN_DECORATIONS),
    HEADLESS_HEAD(ItemID.HEADLESS_HEAD),
    MAGICAL_PUMPKIN(ItemID.MAGICAL_PUMPKIN),
    _20th_ANNIVERSARY_HAT(ItemID._20TH_ANNIVERSARY_HAT),
    _20th_ANNIVERSARY_TOP(ItemID._20TH_ANNIVERSARY_TOP),
    _20th_ANNIVERSARY_BOTTOM(ItemID._20TH_ANNIVERSARY_BOTTOM),
    _20th_ANNIVERSARY_NECKLACE(ItemID._20TH_ANNIVERSARY_NECKLACE),
    _20th_ANNIVERSARY_CAPE(ItemID._20TH_ANNIVERSARY_CAPE),
    _20th_ANNIVERSARY_GLOVES(ItemID._20TH_ANNIVERSARY_GLOVES),
    _20th_ANNIVERSARY_BOOTS(ItemID._20TH_ANNIVERSARY_BOOTS),
    BANANA_CAPE(ItemID.BANANA_CAPE),
    BANANA_HAT(ItemID.BANANA_HAT),
    CURSED_BANANA(ItemID.CURSED_BANANA),
    FESTIVE_ELF_HAT(ItemID.FESTIVE_ELF_HAT), // find ID
    FESTIVE_ELF_SLIPPERS(ItemID.FESTIVE_ELF_SLIPPERS),
    GNOME_CHILD_MASK(ItemID.GNOME_CHILD_MASK),
    GNOME_CHILD_ICON(ItemID.GNOME_CHILD_ICON),
    GREGGS_EASTDOOR(ItemID.GREGGS_EASTDOOR),
    HAUNTED_WINE_BOTTLE(ItemID.HAUNTED_WINE_BOTTLE),
    SNOWMAN_RING(ItemID.SNOWMAN_RING),
    PROPELLER_HAT(ItemID.PROPELLER_HAT),
    SAUCEPAN(ItemID.SAUCEPAN),
    SECRET_SANTA_PRESENT_RED(ItemID.SECRET_SANTA_PRESENT_RED),
    SECRET_SANTA_PRESENT_BLUE(ItemID.SECRET_SANTA_PRESENT_BLUE),
    SECRET_SANTA_PRESENT_GREEN(ItemID.SECRET_SANTA_PRESENT_GREEN),
    SECRET_SANTA_PRESENT_BLACK(ItemID.SECRET_SANTA_PRESENT_BLACK),
    SECRET_SANTA_PRESENT_GOLD(ItemID.SECRET_SANTA_PRESENT_GOLD),
    ORANGE_HALLOWEEN_JUMPER(ItemID.UGLY_HALLOWEEN_JUMPER_ORANGE),
    BLACK_HALLOWEEN_JUMPER(ItemID.UGLY_HALLOWEEN_JUMPER_BLACK),
    SACK_OF_COAL(ItemID.SACK_OF_COAL),
    CRATE_RING(ItemID.CRATE_RING),
    EASTER_HAT(ItemID.EASTER_HAT),
    FESTIVE_GAMES_CROWN(ItemID.FESTIVE_GAMES_CROWN),
    CHRISTMAS_JUMPER(ItemID.CHRISTMAS_JUMPER),
    HALLOWEEN_WIG(ItemID.HALLOWEEN_WIG),
    HALLOWEEN_WIG_27499(ItemID.HALLOWEEN_WIG_27499),
    HALLOWEEN_WIG_27501(ItemID.HALLOWEEN_WIG_27501),
    HALLOWEEN_WIG_27503(ItemID.HALLOWEEN_WIG_27503),
    HALLOWEEN_WIG_27505(ItemID.HALLOWEEN_WIG_27505),
    HALLOWEEN_WIG_27507(ItemID.HALLOWEEN_WIG_27507),
    FESTIVE_NUTCRACKER_HAT(ItemID.FESTIVE_NUTCRACKER_HAT ),
    FEFSTIVE_NUTCRACKER_TOP(ItemID.FESTIVE_NUTCRACKER_TOP),
    FEFSTIVE_NUTCRACKER_TROUSERS(ItemID.FESTIVE_NUTCRACKER_TROUSERS),
    FEFSTIVE_NUTCRACKER_BOOTS(ItemID.FESTIVE_NUTCRACKER_BOOTS),
    FEFSTIVE_NUTCRACKER_STAFF(ItemID.FESTIVE_NUTCRACKER_STAFF),
    SWEET_NUTCRACKER_HAT(ItemID.SWEET_NUTCRACKER_HAT),
    SWEET_NUTCRACKER_TOP(ItemID.SWEET_NUTCRACKER_TOP),
    SWEET_NUTCRACKER_TROUSERS(ItemID.SWEET_NUTCRACKER_TROUSERS),
    SWEET_NUTCRACKER_BOOTS(ItemID.SWEET_NUTCRACKER_BOOTS),
    SWEET_NUTCRACKER_STAFF(ItemID.SWEET_NUTCRACKER_STAFF),
    FLOWER_CROWN(ItemID.FLOWER_CROWN),
    FLOWER_CROWN_27141(ItemID.FLOWER_CROWN_27141),
    FLOWER_CROWN_27143(ItemID.FLOWER_CROWN_27143),
    FLOWER_CROWN_27145(ItemID.FLOWER_CROWN_27145),
    FLOWER_CROWN_27147(ItemID.FLOWER_CROWN_27147),
    FLOWER_CROWN_27149(ItemID.FLOWER_CROWN_27149),
    FLOWER_CROWN_27151(ItemID.FLOWER_CROWN_27151),
    FLOWER_CROWN_27153(ItemID.FLOWER_CROWN_27153),
    FLOWER_CROWN_27155(ItemID.FLOWER_CROWN_27155),
    SKIS(ItemID.SKIS),
    SANTAS_LIST(ItemID.SANTAS_LIST),
    SNOW_GOGGLES__HAT(ItemID.SNOW_GOGGLES__HAT),
    TREAT_CAULDRON(ItemID.TREAT_CAULDRON),
    TREAT_CAULDRON_27465(ItemID.TREAT_CAULDRON_27465),
    TREAT_CAULDRON_27467(ItemID.TREAT_CAULDRON_27467),
    TREAT_CAULDRON_27469(ItemID.TREAT_CAULDRON_27469),
    TREAT_CAULDRON_27471(ItemID.TREAT_CAULDRON_27471),
    WITCH_HAT(ItemID.WITCH_HAT),
    WITCH_TOP(ItemID.WITCH_TOP),
    WITCH_ROBES(ItemID.WITCH_ROBES),
    WITCH_BOOTS(ItemID.WITCH_BOOTS),
    WITCH_CAPE(ItemID.WITCH_CAPE),
    _10TH_BIRTHDAY_CAPE(ItemID._10TH_BIRTHDAY_CAPE),
    _10TH_BIRTHDAY_BALLOONS(ItemID._10TH_BIRTHDAY_BALLOONS),
    CAKE_HAT(ItemID.CAKE_HAT),
    OLDSCHOOL_JUMPER(ItemID.OLDSCHOOL_JUMPER),
    OLDSCHOOL_JUMPER_27823(ItemID.OLDSCHOOL_JUMPER_27823),
    OLDSCHOOL_JUMPER_27824(ItemID.OLDSCHOOL_JUMPER_27824),
    OLDSCHOOL_JUMPER_27825(ItemID.OLDSCHOOL_JUMPER_27825),
    OLDSCHOOL_JUMPER_27826(ItemID.OLDSCHOOL_JUMPER_27826),
    OLDSCHOOL_JUMPER_27827(ItemID.OLDSCHOOL_JUMPER_27827),
    GNOME_CHILD_PLUSH(ItemID.GNOME_CHILD_PLUSH),
    STRAY_DOG_PLUSH(ItemID.STRAY_DOG_PLUSH),
    JAD_PLUSH(ItemID.JAD_PLUSH),
    BOB_THE_CAT_SLIPPERS(ItemID.BOB_THE_CAT_SLIPPERS),
    JAD_SLIPPERS(ItemID.JAD_SLIPPERS),
    DRAGON_CANDLE_DAGGER(ItemID.DRAGON_CANDLE_DAGGER),
    GNOME_CHILD_BACKPACK(ItemID.GNOME_CHILD_BACKPACK),
    MYSTIC_CARDS(ItemID.MYSTIC_CARDS),
    SILVER_PARTYHAT(ItemID.SILVER_PARTYHAT),
    WAR_SHIP(ItemID.WAR_SHIP),
    GIANT_BRONZE_DAGGER(ItemID.GIANT_BRONZE_DAGGER),
    EASTFLOOR_SPADE(ItemID.EASTFLOOR_SPADE),
    NEST_HAT(ItemID.NEST_HAT),
    NEST_HAT_27877(ItemID.NEST_HAT_27877),
    LOVE_CROSSBOW(ItemID.LOVE_CROSSBOW),
    POETS_JACKET(ItemID.POETS_JACKET),
    RAINBOW_JUMPER(ItemID.RAINBOW_JUMPER),
    COBWEB_CAPE(ItemID.COBWEB_CAPE),
    SPIDER_HAT(ItemID.SPIDER_HAT),
    SPIDER_HAT_28605(ItemID.SPIDER_HAT_28605),
    SPIDER_HAT_28607(ItemID.SPIDER_HAT_28607),
    SPIDER_HAT_28609(ItemID.SPIDER_HAT_28609),
    SPIDER_HAT_28611(ItemID.SPIDER_HAT_28611),
    ICY_JUMPER(ItemID.ICY_JUMPER),
    SNOWGLOBE_HELMET(ItemID.SNOWGLOBE_HELMET),
    BOOK_OF_EGG(ItemID.BOOK_OF_EGG),
    EGG_PRIEST_ROBE_TOP(ItemID.EGG_PRIEST_ROBE_TOP),
    EGG_PRIEST_ROBE(ItemID.EGG_PRIEST_ROBE),
    EGG_PRIEST_MITRE(ItemID.EGG_PRIEST_MITRE),
    EGG_PRIEST_NECKLACE(ItemID.EGG_PRIEST_NECKLACE),
    COLOURFUL_CAPE(ItemID.COLOURFUL_CAPE),
    COLOURFUL_CAPE_29493(ItemID.COLOURFUL_CAPE_29493),
    COLOURFUL_CAPE_29497(ItemID.COLOURFUL_CAPE_29497),
    COLOURFUL_CAPE_29501(ItemID.COLOURFUL_CAPE_29501),
    COLOURFUL_CAPE_29495(ItemID.COLOURFUL_CAPE_29495),
    COLOURFUL_CAPE_29499(ItemID.COLOURFUL_CAPE_29499),
    COLOURFUL_CAPE_29503(ItemID.COLOURFUL_CAPE_29503),
    COLOURFUL_CAPE_29505(ItemID.COLOURFUL_CAPE_29505),
    RAINBOW_CAPE(ItemID.RAINBOW_CAPE),
    RAINBOW_CROWN_SHIRT(ItemID.RAINBOW_CROWN_SHIRT),
    COLOURFUL_CROWN_SHIRT(ItemID.COLOURFUL_CROWN_SHIRT),
    COLOURFUL_CROWN_SHIRT_29510(ItemID.COLOURFUL_CROWN_SHIRT_29510),
    COLOURFUL_CROWN_SHIRT_29511(ItemID.COLOURFUL_CROWN_SHIRT_29511),
    COLOURFUL_CROWN_SHIRT_29512(ItemID.COLOURFUL_CROWN_SHIRT_29512),
    COLOURFUL_CROWN_SHIRT_29513(ItemID.COLOURFUL_CROWN_SHIRT_29513),
    COLOURFUL_CROWN_SHIRT_29514(ItemID.COLOURFUL_CROWN_SHIRT_29514),
    COLOURFUL_CROWN_SHIRT_29515(ItemID.COLOURFUL_CROWN_SHIRT_29515),
    COLOURFUL_CROWN_SHIRT_29516(ItemID.COLOURFUL_CROWN_SHIRT_29516),
    BEIGE_PUMPKIN_ANGRY(ItemID.BEIGE_PUMPKIN_ANGRY),
    BEIGE_PUMPKIN_DEPRESSED(ItemID.BEIGE_PUMPKIN_DEPRESSED),
    BEIGE_PUMPKIN_DISGUSTED(ItemID.BEIGE_PUMPKIN_DISGUSTED),
    BEIGE_PUMPKIN_EVIL(ItemID.BEIGE_PUMPKIN_EVIL),
    BEIGE_PUMPKIN_HAPPY(ItemID.BEIGE_PUMPKIN_HAPPY),
    BEIGE_PUMPKIN_LAUGHING(ItemID.BEIGE_PUMPKIN_LAUGHING),
    BEIGE_PUMPKIN_SAD(ItemID.BEIGE_PUMPKIN_SAD),
    BEIGE_PUMPKIN_SHOCKED(ItemID.BEIGE_PUMPKIN_SHOCKED),
    BEIGE_PUMPKIN_SILLY(ItemID.BEIGE_PUMPKIN_SILLY),
    HALLOWEEN_SCARECROW(ItemID.HALLOWEEN_SCARECROW),
    SCARECROW_SHIRT(ItemID.SCARECROW_SHIRT),
    //63 Carved Pumpkin Heads omitted https://oldschool.runescape.wiki/w/Carved_pumpkin_head
    DOG_BOOTS(ItemID.DOG_BOOTS),
    DOG_DISGUISE(ItemID.DOG_DISGUISE),
    FESTIVE_SCARF(ItemID.FESTIVE_SCARF),
    PRESENT_BOX_HAT(ItemID.PRESENT_BOX_HAT),
    CLASSIC_IMP_HOOD(ItemID.CLASSIC_IMP_HOOD),
    CLASSIC_IMP_TAIL(ItemID.CLASSIC_IMP_TAIL),
    CARROT_COSTUME_HAT(ItemID.CARROT_COSTUME_HAT),
    CARROT_COSTUME_BODY(ItemID.CARROT_COSTUME_BODY),
    CARROT_COSTUME_TIGHTS(ItemID.CARROT_COSTUME_TIGHTS),
    CARROT_COSTUME_GLOVES(ItemID.CARROT_COSTUME_GLOVES);

    private final int itemID;
    @Getter
    private final String location = "Toy Box";
    @Getter
    private final boolean isBis;
    ToyBox(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum NightmareZone implements StorableItem {
    ABSORPTION_1(ItemID.ABSORPTION_1),
    ABSORPTION_2(ItemID.ABSORPTION_2),
    ABSORPTION_3(ItemID.ABSORPTION_3),
    ABSORPTION_4(ItemID.ABSORPTION_4),
    OVERLOAD_1(ItemID.OVERLOAD_1),
    OVERLOAD_2(ItemID.OVERLOAD_2),
    OVERLOAD_3(ItemID.OVERLOAD_3),
    OVERLOAD_4(ItemID.OVERLOAD_4),
    SUPER_MAGIC_POTION_1(ItemID.SUPER_MAGIC_POTION_1),
    SUPER_MAGIC_POTION_2(ItemID.SUPER_MAGIC_POTION_2),
    SUPER_MAGIC_POTION_3(ItemID.SUPER_MAGIC_POTION_3),
    SUPER_MAGIC_POTION_4(ItemID.SUPER_MAGIC_POTION_4),
    SUPER_RANGING_1(ItemID.SUPER_RANGING_1),
    SUPER_RANGING_2(ItemID.SUPER_RANGING_2),
    SUPER_RANGING_3(ItemID.SUPER_RANGING_3),
    SUPER_RANGING_4(ItemID.SUPER_RANGING_4);

    private final int itemID;
    @Getter
    private final String location = "Nightmare Zone";
    @Getter
    private final boolean isBis;
    NightmareZone(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum MysteriousStranger implements StorableItem {
    HALLOWED_GRAPPLE(ItemID.HALLOWED_GRAPPLE),
    HALLOWED_HAMMER(ItemID.HALLOWED_HAMMER),
    HALLOWED_FOCUS(ItemID.HALLOWED_FOCUS),
    HALLOWED_SYMBOL(ItemID.HALLOWED_SYMBOL),
    HALLOWED_RING(ItemID.HALLOWED_RING),
    HALLOWED_TOKEN(ItemID.HALLOWED_TOKEN);

    private final int itemID;
    @Getter
    private final String location = "Mysterious Stranger";
    @Getter
    private final boolean isBis;

    MysteriousStranger(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}


/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum FancyDressBox implements StorableItem {
    BEEKEEPERS_BOOTS(ItemID.BEEKEEPERS_BOOTS),
    BEEKEEPERS_GLOVES(ItemID.BEEKEEPERS_GLOVES),
    BEEKEEPERS_HAT(ItemID.BEEKEEPERS_HAT),
    BEEKEEPERS_LEGS(ItemID.BEEKEEPERS_LEGS),
    BEEKEEPERS_TOP(ItemID.BEEKEEPERS_TOP),
    FROG_MASK(ItemID.FROG_MASK),
    ROYAL_FROG_LEGGINGS(ItemID.ROYAL_FROG_LEGGINGS),
    ROYAL_FROG_TUNIC(ItemID.ROYAL_FROG_TUNIC),
    ROYAL_FROG_BLOUSE(ItemID.ROYAL_FROG_BLOUSE),
    ROYAL_FROG_SKIRT(ItemID.ROYAL_FROG_SKIRT),
    CAMO_BOTTOMS(ItemID.CAMO_BOTTOMS),
    CAMO_HELMET(ItemID.CAMO_HELMET),
    CAMO_TOP(ItemID.CAMO_TOP),
    LEDERHOSEN_HAT(ItemID.LEDERHOSEN_HAT),
    LEDERHOSEN_SHORTS(ItemID.LEDERHOSEN_SHORTS),
    LEDERHOSEN_TOP(ItemID.LEDERHOSEN_TOP),
    MIME_BOOTS(ItemID.MIME_BOOTS),
    MIME_GLOVES(ItemID.MIME_GLOVES),
    MIME_MASK(ItemID.MIME_MASK),
    MIME_LEGS(ItemID.MIME_LEGS),
    MIME_TOP(ItemID.MIME_TOP),
    SHADE_ROBE(ItemID.SHADE_ROBE),
    SHADE_ROBE_TOP(ItemID.SHADE_ROBE_TOP),
    STALE_BAGUETTE(ItemID.STALE_BAGUETTE),
    ZOMBIE_BOOTS(ItemID.ZOMBIE_BOOTS),
    ZOMBIE_GLOVES(ItemID.ZOMBIE_GLOVES),
    ZOMBIE_MASK(ItemID.ZOMBIE_MASK),
    ZOMBIE_TROUSERS(ItemID.ZOMBIE_TROUSERS),
    ZOMBIE_SHIRT(ItemID.ZOMBIE_SHIRT);

    private final int itemID;
    @Getter
    private final String location = "Fancy Dress Box";
    @Getter
    private final boolean isBis;

    FancyDressBox(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum ElnockInquisitor implements StorableItem {
    BUTTERFLY_NET(ItemID.BUTTERFLY_NET),
    MAGIC_BUTTERFLY_NET(ItemID.MAGIC_BUTTERFLY_NET),
    IMPLING_JAR(ItemID.IMPLING_JAR),
    IMP_REPELLENT(ItemID.IMP_REPELLENT);
    private final int itemID;
    @Getter
    private final String location = "Elnock Inquisitor";
    @Getter
    private final boolean isBis;

    ElnockInquisitor(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.Item;
import net.runelite.api.ItemID;

@Getter
public enum PetHouse implements StorableItem {
    //PVM and Minigame Pets
    PET_CHAOS_ELEMENTAL(ItemID.PET_CHAOS_ELEMENTAL),
    PET_DAGANNOTH_SUPREME(ItemID.PET_DAGANNOTH_SUPREME),
    PET_DAGANNOTH_PRIME(ItemID.PET_DAGANNOTH_PRIME),
    PET_DAGANNOTH_REX(ItemID.PET_DAGANNOTH_REX),
    PET_PENANCE_QUEEN(ItemID.PET_PENANCE_QUEEN),
    PET_KREEARRA(ItemID.PET_KREEARRA),
    PET_GENERAL_GRAARDOR(ItemID.PET_GENERAL_GRAARDOR),
    PET_ZILYANA(ItemID.PET_ZILYANA),
    PET_KRIL_TSUTAROTH(ItemID.PET_KRIL_TSUTSAROTH),
    PET_BABY_MOLE(ItemID.BABY_MOLE),
    PET_PRINCE_BLACK_DRAGON(ItemID.PRINCE_BLACK_DRAGON),
    PET_KALPHITE_PRINCESS(ItemID.KALPHITE_PRINCESS),
    KALPHITE_PRINCESS_12654(ItemID.KALPHITE_PRINCESS_12654), //KQ Transmog FLying
    PET_SMOKE_DEVIL(ItemID.PET_SMOKE_DEVIL),
    PET_KRAKEN(ItemID.PET_KRAKEN),
    PET_DARK_CORE(ItemID.PET_DARK_CORE),
    CORPOREAL_CRITTER(ItemID.PET_CORPOREAL_CRITTER),
    PET_SNAKELING(ItemID.PET_SNAKELING),
    PET_SNAKELING_12939(ItemID.PET_SNAKELING_12939),
    PET_SNAKELING_12940(ItemID.PET_SNAKELING_12940),
    CHOMPY_CHICK(ItemID.CHOMPY_CHICK),
    VENENATIS_SPIDERLING(ItemID.VENENATIS_SPIDERLING),
    VENENATIS_SPIDERLING_27648(ItemID.VENENATIS_SPIDERLING_27648),
    CALLISTO_CUB(ItemID.CALLISTO_CUB),
    CALLISTO_CUB_27649(ItemID.CALLISTO_CUB_27649),
    VETION_JR(ItemID.VETION_JR),
    VETION_JR_13180(ItemID.VETION_JR_13180),
    VETION_JR_27650(ItemID.VETION_JR_27650),
    VETION_JR_27651(ItemID.VETION_JR_27651),
    SCORPIAS_OFFSPRING(ItemID.SCORPIAS_OFFSPRING),
    TZREKJAD(ItemID.TZREKJAD),
    JALREKJA(ItemID.JALREKJAD),
    HELLPUPPY(ItemID.HELLPUPPY),
    ABYSSAL_ORPHAN(ItemID.ABYSSAL_ORPHAN),
    OLMLET(ItemID.OLMLET),
    PUPPADILE(ItemID.PUPPADILE),
    TEKTINY(ItemID.TEKTINY),
    ENRAGED_TEKTINY(ItemID.ENRAGED_TEKTINY),
    VANGUARD(ItemID.VANGUARD),
    VASA_MINIRIO(ItemID.VASA_MINIRIO),
    VESPINA(ItemID.VESPINA),
    FLYING_VESPINA(ItemID.FLYING_VESPINA),
    SKOTOS(ItemID.SKOTOS),
    JALNIBREK(ItemID.JALNIBREK),
    TZREKZUK(ItemID.TZREKZUK),
    HERBI(ItemID.HERBI),
    NOON(ItemID.NOON),
    VORKI(ItemID.VORKI),
    LIL_ZIK(ItemID.LIL_ZIK),
    LIL_MAIDEN(ItemID.LIL_MAIDEN),
    LIL_BLOAT(ItemID.LIL_BLOAT),
    LIL_NYLO(ItemID.LIL_NYLO),
    LIL_SOT(ItemID.LIL_SOT),
    LIL_XARP(ItemID.LIL_XARP),
    IKKLE_HYDRA(ItemID.IKKLE_HYDRA),
    IKKLE_HYDRA_22748(ItemID.IKKLE_HYDRA_22748),
    IKKLE_HYDRA_22750(ItemID.IKKLE_HYDRA_22750),
    IKKLE_HYDRA_22752(ItemID.IKKLE_HYDRA_22752),
    SRARACHA(ItemID.SRARACHA),
    SRARACHA_25842(ItemID.SRARACHA_25842),
    SRARACHA_25843(ItemID.SRARACHA_25843),
    YOUNGLLEF(ItemID.YOUNGLLEF),
    CORRUPTED_YOUNGLLEF(ItemID.CORRUPTED_YOUNGLLEF),
    SMOLCANO(ItemID.SMOLCANO),
    LITTLE_NIGHTMARE(ItemID.LITTLE_NIGHTMARE),
    LITTLE_PARASITE(ItemID.LITTLE_PARASITE),
    LIL_CREATOR(ItemID.LIL_CREATOR),
    LIL_DESTRUCTOR(ItemID.LIL_DESTRUCTOR),
    TINY_TEMPOR(ItemID.TINY_TEMPOR),
    NEXLING(ItemID.NEXLING),
    ABYSSAL_PROTECTOR(ItemID.ABYSSAL_PROTECTOR),
    TUMEKENS_GUARDIAN(ItemID.TUMEKENS_GUARDIAN),
    TUMEKENS_DAMAGED_GUARDIAN(ItemID.TUMEKENS_DAMAGED_GUARDIAN),
    ELIDINIS_GUARDIAN(ItemID.ELIDINIS_GUARDIAN),
    ELIDINIS_DAMAGED_GUARDIAN(ItemID.ELIDINIS_DAMAGED_GUARDIAN),
    AKKHITO(ItemID.AKKHITO),
    BABI(ItemID.BABI),
    KEPHRITI(ItemID.KEPHRITI),
    ZEBO(ItemID.ZEBO),
    MUPHIN(ItemID.MUPHIN),
    WISP(ItemID.WISP),
    BUTCH(ItemID.BUTCH),
    LILVIATHAN(ItemID.LILVIATHAN),
    BARON(ItemID.BARON),
    SCURRY(ItemID.SCURRY),
    SMOL_HEREDIT(ItemID.SMOL_HEREDIT),
    QUETZIN(ItemID.QUETZIN),
    NID(ItemID.NID),
    RAX(ItemID.RAX),    //NID Transmog
    HUBERTE(ItemID.HUBERTE),
    MOXI(ItemID.MOXI),
    BRAN(ItemID.BRAN),
    RIC(ItemID.RIC),    //BRAN Transmog
    YAMI(ItemID.YAMI),
    DOM(ItemID.DOM),

    //Skilling Pets
    HERON(ItemID.HERON),
    GREAT_BLUE_HERON(ItemID.GREAT_BLUE_HERON),
    ROCK_GOLEM(ItemID.ROCK_GOLEM),
    ROCK_GOLEM_21188(ItemID.ROCK_GOLEM_21188),
    ROCK_GOLEM_21189(ItemID.ROCK_GOLEM_21189),
    ROCK_GOLEM_21190(ItemID.ROCK_GOLEM_21190),
    ROCK_GOLEM_21187(ItemID.ROCK_GOLEM_21187),
    ROCK_GOLEM_21191(ItemID.ROCK_GOLEM_21191),
    ROCK_GOLEM_21192(ItemID.ROCK_GOLEM_21192),
    ROCK_GOLEM_21193(ItemID.ROCK_GOLEM_21193),
    ROCK_GOLEM_21194(ItemID.ROCK_GOLEM_21194),
    ROCK_GOLEM_21195(ItemID.ROCK_GOLEM_21195),
    ROCK_GOLEM_21196(ItemID.ROCK_GOLEM_21196),
    ROCK_GOLEM_21197(ItemID.ROCK_GOLEM_21197),
    ROCK_GOLEM_21340(ItemID.ROCK_GOLEM_21340),
    ROCK_GOLEM_21358(ItemID.ROCK_GOLEM_21358),
    ROCK_GOLEM_21359(ItemID.ROCK_GOLEM_21359),
    ROCK_GOLEM_21360(ItemID.ROCK_GOLEM_21360),
    BEAVER(ItemID.BEAVER),
    BEAVER_28229(ItemID.BEAVER_28229),
    BEAVER_28230(ItemID.BEAVER_28230),
    BEAVER_28231(ItemID.BEAVER_28231),
    BEAVER_28232(ItemID.BEAVER_28232),
    BEAVER_28233(ItemID.BEAVER_28233),
    BEAVER_28234(ItemID.BEAVER_28234),
    BEAVER_28235(ItemID.BEAVER_28235),
    BEAVER_28236(ItemID.BEAVER_28236),
    BEAVER_28237(ItemID.BEAVER_28237),
    FOX_28670(ItemID.FOX_28670),
    PHEASANT(ItemID.PHEASANT),
    BABY_CHINCHOMPA(ItemID.BABY_CHINCHOMPA),
    BABY_CHINCHOMPA_13324(ItemID.BABY_CHINCHOMPA_13324),
    BABY_CHINCHOMPA_13325(ItemID.BABY_CHINCHOMPA_13325),
    BABY_CHINCHOMPA_13326(ItemID.BABY_CHINCHOMPA_13326),
    BLOODHOUND(ItemID.BLOODHOUND),
    GIANT_SQUIRREL(ItemID.GIANT_SQUIRREL),
    DARK_SQUIRREL(ItemID.DARK_SQUIRREL),
    BONE_SQUIRREL(ItemID.BONE_SQUIRREL),
    TANGLEROOT(ItemID.TANGLEROOT),
    TANGLEROOT_24555(ItemID.TANGLEROOT_24555),
    TANGLEROOT_24557(ItemID.TANGLEROOT_24557),
    TANGLEROOT_24559(ItemID.TANGLEROOT_24559),
    TANGLEROOT_24561(ItemID.TANGLEROOT_24561),
    TANGLEROOT_24563(ItemID.TANGLEROOT_24563),
    RIFT_GUARDIAN(ItemID.RIFT_GUARDIAN),
    RIFT_GUARDIAN_20667(ItemID.RIFT_GUARDIAN_20667),
    RIFT_GUARDIAN_20669(ItemID.RIFT_GUARDIAN_20669),
    RIFT_GUARDIAN_20671(ItemID.RIFT_GUARDIAN_20671),
    RIFT_GUARDIAN_20673(ItemID.RIFT_GUARDIAN_20673),
    RIFT_GUARDIAN_20675(ItemID.RIFT_GUARDIAN_20675),
    RIFT_GUARDIAN_20677(ItemID.RIFT_GUARDIAN_20677),
    RIFT_GUARDIAN_20679(ItemID.RIFT_GUARDIAN_20679),
    RIFT_GUARDIAN_20681(ItemID.RIFT_GUARDIAN_20681),
    RIFT_GUARDIAN_20683(ItemID.RIFT_GUARDIAN_20683),
    RIFT_GUARDIAN_20685(ItemID.RIFT_GUARDIAN_20685),
    RIFT_GUARDIAN_20687(ItemID.RIFT_GUARDIAN_20687),
    RIFT_GUARDIAN_20689(ItemID.RIFT_GUARDIAN_20689),
    RIFT_GUARDIAN_21990(ItemID.RIFT_GUARDIAN_21990),
    RIFT_GUARDIAN_20691(ItemID.RIFT_GUARDIAN_20691),
    GREATISH_GUARDIAN(ItemID.GREATISH_GUARDIAN),
    ROCKY(ItemID.ROCKY),
    RED(ItemID.RED),
    ZIGGY(ItemID.ZIGGY),
    PHOENIX(ItemID.PHOENIX),
    PHOENIX_24483(ItemID.PHOENIX_24483),
    PHOENIX_24484(ItemID.PHOENIX_24484),
    PHOENIX_24485(ItemID.PHOENIX_24485),
    PHOENIX_24486(ItemID.PHOENIX_24486),

    // Extras
    PET_KITTEN(ItemID.PET_KITTEN),
    PET_KITTEN_1556(ItemID.PET_KITTEN_1556),
    PET_KITTEN_1557(ItemID.PET_KITTEN_1557),
    PET_KITTEN_1558(ItemID.PET_KITTEN_1558),
    PET_KITTEN_1559(ItemID.PET_KITTEN_1559),
    PET_KITTEN_1560(ItemID.PET_KITTEN_1560),
    PET_CAT(ItemID.PET_CAT),
    PET_CAT_1562(ItemID.PET_CAT_1562),
    PET_CAT_1563(ItemID.PET_CAT_1563),
    PET_CAT_1564(ItemID.PET_CAT_1564),
    PET_CAT_1565(ItemID.PET_CAT_1565),
    PET_CAT_1566(ItemID.PET_CAT_1566),
    PET_CAT_1567(ItemID.PET_CAT_1567), // overgrown
    PET_CAT_1568(ItemID.PET_CAT_1568), // overgrown
    PET_CAT_1569(ItemID.PET_CAT_1569), // overgrown
    PET_CAT_1570(ItemID.PET_CAT_1570), // overgrown
    PET_CAT_1571(ItemID.PET_CAT_1571), // overgrown
    PET_CAT_1572(ItemID.PET_CAT_1572), // overgrown
    WILY_CAT(ItemID.WILY_CAT),
    WILY_CAT_6556(ItemID.WILY_CAT_6556),
    WILY_CAT_6557(ItemID.WILY_CAT_6557),
    WILY_CAT_6558(ItemID.WILY_CAT_6558),
    WILY_CAT_6559(ItemID.WILY_CAT_6559),
    WILY_CAT_6560(ItemID.WILY_CAT_6560),
    LAZY_CAT(ItemID.LAZY_CAT),
    LAZY_CAT_6550(ItemID.LAZY_CAT_6550),
    LAZY_CAT_6551(ItemID.LAZY_CAT_6551),
    LAZY_CAT_6552(ItemID.LAZY_CAT_6552),
    LAZY_CAT_6553(ItemID.LAZY_CAT_6553),
    LAZY_CAT_6554(ItemID.LAZY_CAT_6554),
    HELLKITTEN(ItemID.HELLKITTEN),
    HELL_CAT(ItemID.HELL_CAT),
    OVERGROWN_HELLCAT(ItemID.OVERGROWN_HELLCAT),
    WILY_HELLCAT(ItemID.WILY_HELLCAT),
    LAZY_HELL_CAT(ItemID.LAZY_HELL_CAT),
    TOY_CAT(ItemID.TOY_CAT),
    FISHBOWL_6670(ItemID.FISHBOWL_6670),
    FISHBOWL_6671(ItemID.FISHBOWL_6671),
    FISHBOWL_6672(ItemID.FISHBOWL_6672),
    PET_ROCK(ItemID.PET_ROCK),
    EGG_30970(ItemID.EGG_30970), //Humphry Dumphry
    BROAV(ItemID.BROAV);

    private final int itemID;
    @Getter
    private final String location = "Pet House";
    @Getter
    private final boolean isBis;
    PetHouse(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum Bookcase implements StorableItem {
    CONSTRUCTION_GUIDE(ItemID.CONSTRUCTION_GUIDE),
    GAME_BOOK(ItemID.GAME_BOOK),
    SECURITY_BOOK(ItemID.SECURITY_BOOK),
    STRONGHOLD_NOTES(ItemID.STRONGHOLD_NOTES),
    ABYSSAL_BOOK(ItemID.ABYSSAL_BOOK),
    GIANNES_COOK_BOOK(ItemID.GIANNES_COOK_BOOK),
    COCKTAIL_GUIDE(ItemID.COCKTAIL_GUIDE),
    QUEEN_HELP_BOOK(ItemID.QUEEN_HELP_BOOK),
    DIARY(ItemID.DIARY),
    INSTRUCTION_MANUAL(ItemID.INSTRUCTION_MANUAL),
    BOOK_ON_CHEMICALS(ItemID.BOOK_ON_CHEMICALS),
    BATTERED_BOOK(ItemID.BATTERED_BOOK),
    VARMENS_NOTES(ItemID.VARMENS_NOTES),
    GOBLIN_SYMBOL_BOOK(ItemID.GOBLIN_SYMBOL_BOOK),
    TRANSLATION(ItemID.TRANSLATION),
    TRANSLATION_BOOK(ItemID.TRANSLATION_BOOK),
    GLOUGHS_JOURNAL(ItemID.GLOUGHS_JOURNAL),
    JOURNAL_3845(ItemID.JOURNAL_3845),
    DIARY_3846(ItemID.DIARY_3846),
    MANUAL(ItemID.MANUAL),
    SHAMANS_TOME(ItemID.SHAMANS_TOME),
    BINDING_BOOK(ItemID.BINDING_BOOK),
    GHRIMS_BOOK(ItemID.GHRIMS_BOOK),
    ASTRONOMY_BOOK(ItemID.ASTRONOMY_BOOK),
    OLD_JOURNAL(ItemID.OLD_JOURNAL),
    HISTORY_OF_IBAN(ItemID.HISTORY_OF_IBAN),
    BIG_BOOK_OF_BANGS(ItemID.BIG_BOOK_OF_BANGS),
    CADARN_LINEAGE(ItemID.CADARN_LINEAGE),
    CRYSTAL_SINGING_FOR_BEGINNERS(ItemID.CRYSTAL_SINGING_FOR_BEGINNERS),
    DIARY_3395(ItemID.DIARY_3395),
    BOOK(ItemID.BOOK),
    GUIDE_BOOK(ItemID.GUIDE_BOOK),
    BOOK_ON_BAXTORIAN(ItemID.BOOK_ON_BAXTORIAN),
    DWARVEN_LORE(ItemID.DWARVEN_LORE),
    EMBALMING_MANUAL(ItemID.EMBALMING_MANUAL),
    DEMONIC_TOME(ItemID.DEMONIC_TOME),
    CRUMBLING_TOME(ItemID.CRUMBLING_TOME),
    BOOK_6767(ItemID.BOOK_6767),
    EDERNS_JOURNAL(ItemID.EDERNS_JOURNAL),
    PRIFDDINAS_HISTORY(ItemID.PRIFDDINAS_HISTORY),
    EASTERN_DISCOVERY(ItemID.EASTERN_DISCOVERY),
    EASTERN_SETTLEMENT(ItemID.EASTERN_SETTLEMENT),
    THE_GREAT_DIVIDE(ItemID.THE_GREAT_DIVIDE),
    JOURNAL_6755(ItemID.JOURNAL_6755),
    MOONCLAN_MANUAL(ItemID.MOONCLAN_MANUAL),
    HERMANS_BOOK(ItemID.HERMANS_BOOK),
    PIE_RECIPE_BOOK(ItemID.PIE_RECIPE_BOOK),
    BOOK_O_PIRACY(ItemID.BOOK_O_PIRACY),
    BREWIN_GUIDE(ItemID.BREWIN_GUIDE),
    BURNT_DIARY(ItemID.BURNT_DIARY),
    ARENA_BOOK(ItemID.ARENA_BOOK),
    SINKETHS_DIARY(ItemID.SINKETHS_DIARY),
    DAGONHAI_HISTORY(ItemID.DAGONHAI_HISTORY),
    TARNS_DIARY(ItemID.TARNS_DIARY),
    BIRD_BOOK(ItemID.BIRD_BOOK),
    FEATHERED_JOURNAL(ItemID.FEATHERED_JOURNAL),
    FARMING_MANUAL(ItemID.FARMING_MANUAL),
    PRAYER_BOOK(ItemID.PRAYER_BOOK),
    BEATEN_BOOK(ItemID.BEATEN_BOOK),
    A_HANDWRITTEN_BOOK(ItemID.A_HANDWRITTEN_BOOK),
    HISTORIES_OF_THE_HALLOWLAND(ItemID.HISTORIES_OF_THE_HALLOWLAND),
    MODERN_DAY_MORYTANIA(ItemID.MODERN_DAY_MORYTANIA),
    THE_SLEEPING_SEVEN(ItemID.THE_SLEEPING_SEVEN),
    CLOCKWORK_BOOK(ItemID.CLOCKWORK_BOOK),
    GOBLIN_BOOK(ItemID.GOBLIN_BOOK),
    MY_NOTES(ItemID.MY_NOTES),
    EXPLORERS_NOTES(ItemID.EXPLORERS_NOTES),
    GLASSBLOWING_BOOK(ItemID.GLASSBLOWING_BOOK),
    ENTOMOLOGISTS_DIARY(ItemID.ENTOMOLOGISTS_DIARY),
    OHNS_DIARY(ItemID.OHNS_DIARY),
    OVERSEERS_BOOK(ItemID.OVERSEERS_BOOK),
    BOOK_OF_SPYOLOGY(ItemID.BOOK_OF_SPYOLOGY),
    CREATURE_KEEPERS_JOURNAL(ItemID.CREATURE_KEEPERS_JOURNAL),
    NISTIRIOS_MANIFESTO(ItemID.NISTIRIOS_MANIFESTO),
    TEKTONS_JOURNAL(ItemID.TEKTONS_JOURNAL),
    TRANSDIMENSIONAL_NOTES(ItemID.TRANSDIMENSIONAL_NOTES),
    VANGUARD_JUDGEMENT(ItemID.VANGUARD_JUDGEMENT),
    DARK_JOURNAL(ItemID.DARK_JOURNAL),
    HOUNDMASTERS_DIARY(ItemID.HOUNDMASTERS_DIARY),
    FOSSIL_ISLAND_NOTE_BOOK(ItemID.FOSSIL_ISLAND_NOTE_BOOK),
    ARCHAEOLOGISTS_DIARY(ItemID.ARCHAEOLOGISTS_DIARY),
    ANCIENT_DIARY(ItemID.ANCIENT_DIARY),
    VARLAMORE_ENVOY(ItemID.VARLAMORE_ENVOY),
    AIVAS_DIARY(ItemID.AIVAS_DIARY),
    MALUMACS_JOURNAL(ItemID.MALUMACS_JOURNAL),
    UNGAEL_LAB_NOTES(ItemID.UNGAEL_LAB_NOTES),
    LITHKREN_VAULT_NOTES(ItemID.LITHKREN_VAULT_NOTES),
    ABLENKIANS_ESCAPE(ItemID.ABLENKIANS_ESCAPE),
    IMCANDORIAS_FALL(ItemID.IMCANDORIAS_FALL),
    IMAFORES_BETRAYAL(ItemID.IMAFORES_BETRAYAL),
    LUTWIDGE_AND_THE_MOONFLY(ItemID.LUTWIDGE_AND_THE_MOONFLY),
    SERAFINA(ItemID.SERAFINA),
    THE_WEEPING(ItemID.THE_WEEPING),
    OLD_DIARY(ItemID.OLD_DIARY),
    SERAFINAS_DIARY(ItemID.SERAFINAS_DIARY),
    THE_BUTCHER(ItemID.THE_BUTCHER),
    ARACHNIDS_OF_VAMPYRIUM(ItemID.ARACHNIDS_OF_VAMPYRIUM),
    THE_SHADOW_REALM(ItemID.THE_SHADOW_REALM),
    THE_WILD_HUNT(ItemID.THE_WILD_HUNT),
    VERZIK_VITUR__PATIENT_RECORD(ItemID.VERZIK_VITUR__PATIENT_RECORD),
    WEISS_FIRE_NOTES(ItemID.WEISS_FIRE_NOTES),
    COLLECTION_LOG(ItemID.COLLECTION_LOG),
    GIELINORS_FLORA__FLOWERS(ItemID.GIELINORS_FLORA__FLOWERS),
    GIELINORS_FLORA__BUSHES(ItemID.GIELINORS_FLORA__BUSHES),
    GIELINORS_FLORA__HOPS(ItemID.GIELINORS_FLORA__HOPS),
    GIELINORS_FLORA__ALLOTMENTS(ItemID.GIELINORS_FLORA__ALLOTMENTS),
    GIELINORS_FLORA__HERBS(ItemID.GIELINORS_FLORA__HERBS),
    GIELINORS_FLORA__TREES(ItemID.GIELINORS_FLORA__TREES),
    GIELINORS_FLORA__FRUIT(ItemID.GIELINORS_FLORA__FRUIT),
    TOME_OF_THE_SUN(ItemID.TOME_OF_THE_SUN),
    TOME_OF_THE_MOON(ItemID.TOME_OF_THE_MOON),
    TOME_OF_THE_TEMPLE(ItemID.TOME_OF_THE_TEMPLE),
    ODE_TO_ETERNITY(ItemID.ODE_TO_ETERNITY),
    CRAZED_SCRIBBLES(ItemID.CRAZED_SCRIBBLES),
    A_DEAR_FRIEND(ItemID.A_DEAR_FRIEND),
    ON_LEPRECHAUNS(ItemID.ON_LEPRECHAUNS),
    BLOODY_DIARY(ItemID.BLOODY_DIARY),
    THE_EIGHT_CLANS(ItemID.THE_EIGHT_CLANS),
    GOLLWYNS_FINAL_STATEMENT(ItemID.GOLLWYNS_FINAL_STATEMENT),
    NIFF__HARRY(ItemID.NIFF__HARRY),
    SOGGY_JOURNAL(ItemID.SOGGY_JOURNAL),
    EBRILLS_JOURNAL(ItemID.EBRILLS_JOURNAL),
    STAINED_JOURNAL(ItemID.STAINED_JOURNAL),
    THE_TRUTH_BEHIND_THE_MYTH_EXCERPT(ItemID.THE_TRUTH_BEHIND_THE_MYTH_EXCERPT),
    THE_LIVING_STATUES(ItemID.THE_LIVING_STATUES),
    THE_SPURNED_DEMON(ItemID.THE_SPURNED_DEMON),
    LEGENDS_OF_THE_MOUNTAIN(ItemID.LEGENDS_OF_THE_MOUNTAIN),
    HARMONY(ItemID.HARMONY),
    BALLAD_OF_THE_BASILISK(ItemID.BALLAD_OF_THE_BASILISK),
    A_TASTE_OF_HOPE(ItemID.A_TASTE_OF_HOPE),
    STRANGE_HALLOWED_TOME(ItemID.STRANGE_HALLOWED_TOME),
    NEILANS_JOURNAL(ItemID.NEILANS_JOURNAL),
    SOUL_WARS_GUIDE(ItemID.SOUL_WARS_GUIDE),
    TREE_WIZARDS_JOURNAL(ItemID.TREE_WIZARDS_JOURNAL),
    BLOODY_NOTES(ItemID.BLOODY_NOTES),
    THE_DESERT_TROUT__SHIPS_LOG(ItemID.THE_DESERT_TROUT__SHIPS_LOG),
    SPIRIT_ANGLERS_RESEARCH_NOTES(ItemID.SPIRIT_ANGLERS_RESEARCH_NOTES),
    MOUNT_KARUULM_DIARY(ItemID.MOUNT_KARUULM_DIARY),
    ATLAXS_DIARY(ItemID.ATLAXS_DIARY),
    AKILAS_JOURNAL(ItemID.AKILAS_JOURNAL),
    HETS_CAPTURE(ItemID.HETS_CAPTURE),
    APMEKENS_CAPTURE(ItemID.APMEKENS_CAPTURE),
    SCABARAS_CAPTURE(ItemID.SCABARAS_CAPTURE),
    CRONDIS_CAPTURE(ItemID.CRONDIS_CAPTURE),
    THE_WARDENS(ItemID.THE_WARDENS),
    THE_JACKALS_TORCH(ItemID.THE_JACKALS_TORCH),
    KASONDES_JOURNAL(ItemID.KASONDES_JOURNAL),
    YEWNOCKS_NOTES(ItemID.YEWNOCKS_NOTES),
    MOVARIOS_NOTES_VOLUME_1(ItemID.MOVARIOS_NOTES_VOLUME_1),
    MOVARIOS_NOTES_VOLUME_2(ItemID.MOVARIOS_NOTES_VOLUME_2),
    THE_HUEYCOATL(ItemID.THE_HUEYCOATL),
    MOONRISE_WINES(ItemID.MOONRISE_WINES);

    private final int itemID;
    @Getter
    private final String location = "Bookcase";

    @Getter
    private final boolean isBis;

    Bookcase(int itemID)
    {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum TackleBox implements StorableItem {
    //Equipment
    ANGLER_BOOTS(ItemID.ANGLER_BOOTS),
    ANGLER_HAT(ItemID.ANGLER_HAT),
    ANGLER_TOP(ItemID.ANGLER_TOP),
    ANGLER_WADERS(ItemID.ANGLER_WADERS),

    SPIRIT_ANGLER_BOOTS(ItemID.SPIRIT_ANGLER_BOOTS),
    SPIRIT_ANGLER_HEADBAND(ItemID.SPIRIT_ANGLER_HEADBAND),
    SPIRIT_ANGLER_TOP(ItemID.SPIRIT_ANGLER_TOP),
    SPIRIT_ANGLER_WADERS(ItemID.SPIRIT_ANGLER_WADERS),

    FISHBOWL_HELMET(ItemID.FISHBOWL_HELMET),
    FLIPPERS(ItemID.FLIPPERS),
    DARK_FLIPPERS(ItemID.DARK_FLIPPERS),
    DIVING_APPARATUS(ItemID.DIVING_APPARATUS),

    RADAS_BLESSING_1(ItemID.RADAS_BLESSING_1),
    RADAS_BLESSING_2(ItemID.RADAS_BLESSING_2),
    RADAS_BLESSING_3(ItemID.RADAS_BLESSING_3),
    RADAS_BLESSING_4(ItemID.RADAS_BLESSING_4),

    TINY_NET(ItemID.TINY_NET),
    HARPOON(ItemID.HARPOON),
    BARBTAIL_HARPOON(ItemID.BARBTAIL_HARPOON),
    DRAGON_HARPOON(ItemID.DRAGON_HARPOON),
    INFERNAL_HARPOON(ItemID.INFERNAL_HARPOON),
    DRAGON_HARPOON_OR(ItemID.DRAGON_HARPOON_OR),
    INFERNAL_HARPOON_OR(ItemID.INFERNAL_HARPOON_OR),
    CRYSTAL_HARPOON(ItemID.CRYSTAL_HARPOON),
    MERFOLK_TRIDENT(ItemID.MERFOLK_TRIDENT),
    FISHING_ROD(ItemID.FISHING_ROD),
    FLY_FISHING_ROD(ItemID.FLY_FISHING_ROD),
    OILY_FISHING_ROD(ItemID.OILY_FISHING_ROD),
    BARBARIAN_ROD(ItemID.BARBARIAN_ROD),
    PEARL_FISHING_ROD(ItemID.PEARL_FISHING_ROD),
    PEARL_FLY_FISHING_ROD(ItemID.PEARL_FLY_FISHING_ROD),
    OILY_PEARL_FISHING_ROD(ItemID.OILY_PEARL_FISHING_ROD),
    PEARL_BARBARIAN_ROD(ItemID.PEARL_BARBARIAN_ROD),
    SMALL_FISHING_NET(ItemID.SMALL_FISHING_NET),
    BIG_FISHING_NET(ItemID.BIG_FISHING_NET),
    DRIFT_NET(ItemID.DRIFT_NET),
    LOBSTER_POT(ItemID.LOBSTER_POT),
    KARAMBWAN_VESSEL(ItemID.KARAMBWAN_VESSEL),
    KARAMBWAN_VESSEL_FILLED(ItemID.KARAMBWAN_VESSEL_3159),

    //Bait
    SPIRIT_FLAKES(ItemID.SPIRIT_FLAKES),
    FEATHERS(ItemID.FEATHER),
    RAW_KARAMBWANJI(ItemID.RAW_KARAMBWANJI),
    FISHING_BAIT(ItemID.FISHING_BAIT),
    DARK_FISHING_BAIT(ItemID.DARK_FISHING_BAIT),
    SANDWORMS(ItemID.SANDWORMS),
    FISH_OFFCUTS(ItemID.FISH_OFFCUTS),
    FISH_CHUNKS(ItemID.FISH_CHUNKS),
    //Misc
    FISHING_POTION1(ItemID.FISHING_POTION1),
    FISHING_POTION2(ItemID.FISHING_POTION2),
    FISHING_POTION3(ItemID.FISHING_POTION3),
    FISHING_POTION4(ItemID.FISHING_POTION4),
    MOLCH_PEARLS(ItemID.MOLCH_PEARL);

    private final int itemID;
    @Getter
    private final String location = "Tackle Box";
    @Getter
    private final boolean isBis;
    TackleBox(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum MagicWardrobe implements StorableItem {
    AMYS_SAW(ItemID.AMYS_SAW, true),
    AMYS_SAW_OFFHAND(ItemID.AMYS_SAW_OFFHAND, true),
    ANCESTRAL_HAT(ItemID.ANCESTRAL_HAT, true),
    ANCESTRAL_ROBE_BOTTOM(ItemID.ANCESTRAL_ROBE_BOTTOM, true),
    ANCESTRAL_ROBE_TOP(ItemID.ANCESTRAL_ROBE_TOP, true),
    TWISTED_ANCESTRAL_HAT(ItemID.TWISTED_ANCESTRAL_HAT, true),
    TWISTED_ANCESTRAL_ROBE_BOTTOM(ItemID.TWISTED_ANCESTRAL_ROBE_BOTTOM, true),
    TWISTED_ANCESTRAL_ROBE_TOP(ItemID.TWISTED_ANCESTRAL_ROBE_TOP, true),
    BLOODBARK_BODY(ItemID.BLOODBARK_BODY),
    BLOODBARK_BOOTS(ItemID.BLOODBARK_BOOTS),
    BLOODBARK_HELM(ItemID.BLOODBARK_HELM),
    BLOODBARK_LEGS(ItemID.BLOODBARK_LEGS),
    BLOODBARK_GAUNTLETS(ItemID.BLOODBARK_GAUNTLETS),
    BOUNTY_HUNTER_HAT_TIER_1(ItemID.BOUNTY_HUNTER_HAT_TIER_1),
    BOUNTY_HUNTER_HAT_TIER_2(ItemID.BOUNTY_HUNTER_HAT_TIER_2),
    BOUNTY_HUNTER_HAT_TIER_3(ItemID.BOUNTY_HUNTER_HAT_TIER_3),
    BOUNTY_HUNTER_HAT_TIER_4(ItemID.BOUNTY_HUNTER_HAT_TIER_4),
    BOUNTY_HUNTER_HAT_TIER_5(ItemID.BOUNTY_HUNTER_HAT_TIER_5),
    BOUNTY_HUNTER_HAT_TIER_6(ItemID.BOUNTY_HUNTER_HAT_TIER_6),
    BRUMA_TORCH(ItemID.BRUMA_TORCH),
    CARPENTERS_BOOTS(ItemID.CARPENTERS_BOOTS),
    CARPENTERS_HELMET(ItemID.CARPENTERS_HELMET),
    CARPENTERS_SHIRT(ItemID.CARPENTERS_SHIRT),
    CARPENTERS_TROUSERS(ItemID.CARPENTERS_TROUSERS),
    DAGONHAI_HAT(ItemID.DAGONHAI_HAT),
    DAGONHAI_ROBE_TOP(ItemID.DAGONHAI_ROBE_TOP),
    DAGONHAI_ROBE_BOTTOM(ItemID.DAGONHAI_ROBE_BOTTOM),
    DARK_FLIPPERS_MAGIC_WARDROBE(ItemID.DARK_FLIPPERS),
    ELDER_CHAOS_HOOD(ItemID.ELDER_CHAOS_HOOD),
    ELDER_CHAOS_ROBE(ItemID.ELDER_CHAOS_ROBE),
    ELDER_CHAOS_TOP(ItemID.ELDER_CHAOS_TOP),
    EVIL_CHICKEN_FEET(ItemID.EVIL_CHICKEN_FEET),
    EVIL_CHICKEN_HEAD(ItemID.EVIL_CHICKEN_HEAD),
    EVIL_CHICKEN_LEGS(ItemID.EVIL_CHICKEN_LEGS),
    EVIL_CHICKEN_WINGS(ItemID.EVIL_CHICKEN_WINGS),
    FISH_SACK(ItemID.BRONZE_FIST_FLAG),
    CUTTHROAT_FLAG(ItemID.CUTTHROAT_FLAG),
    GILDED_SMILE_FLAG(ItemID.GILDED_SMILE_FLAG),
    LUCKY_SHOT_FLAG(ItemID.LUCKY_SHOT_FLAG),
    PHASMATYS_FLAG(ItemID.PHASMATYS_FLAG),
    GHOSTLY_BOOTS(ItemID.GHOSTLY_BOOTS),
    GHOSTLY_CLOAK(ItemID.GHOSTLY_CLOAK),
    GHOSTLY_HOOD(ItemID.GHOSTLY_HOOD),
    GHOSTLY_ROBE(ItemID.GHOSTLY_ROBE),
    GHOSTLY_GLOVES(ItemID.GHOSTLY_GLOVES),
    GHOSTLY_ROBE_6108(ItemID.GHOSTLY_ROBE_6108),
    //GRACEFUL
    IMCANDO_HAMMER(ItemID.IMCANDO_HAMMER, true),
    IMCANDO_HAMMER_OFFHAND(ItemID.IMCANDO_HAMMER_OFFHAND, true),
    INFINITY_BOOTS(ItemID.INFINITY_BOOTS),
    INFINITY_BOTTOMS(ItemID.INFINITY_BOTTOMS),
    INFINITY_HAT(ItemID.INFINITY_HAT),
    INFINITY_TOP(ItemID.INFINITY_TOP),
    INFINITY_GLOVES(ItemID.INFINITY_GLOVES),
    DARK_INFINITY_BOTTOMS(ItemID.DARK_INFINITY_BOTTOMS),
    DARK_INFINITY_HAT(ItemID.DARK_INFINITY_HAT),
    DARK_INFINITY_TOP(ItemID.DARK_INFINITY_TOP),
    LIGHT_INFINITY_BOTTOMS(ItemID.LIGHT_INFINITY_BOTTOMS),
    LIGHT_INFINITY_HAT(ItemID.LIGHT_INFINITY_HAT),
    LIGHT_INFINITY_TOP(ItemID.LIGHT_INFINITY_TOP),
    LUNAR_HELM(ItemID.LUNAR_HELM),
    LUNAR_CAPE(ItemID.LUNAR_CAPE),
    LUNAR_AMULET(ItemID.LUNAR_AMULET),
    LUNAR_BOOTS(ItemID.LUNAR_BOOTS),
    LUNAR_GLOVES(ItemID.LUNAR_GLOVES),
    LUNAR_LEGS(ItemID.LUNAR_LEGS),
    LUNAR_RING(ItemID.LUNAR_RING),
    LUNAR_TORSO(ItemID.LUNAR_TORSO),
    MOONCLAN_HELM(ItemID.MOONCLAN_HELM),
    MOONCLAN_CAPE(ItemID.MOONCLAN_CAPE),
    MOONCLAN_BOOTS(ItemID.MOONCLAN_BOOTS),
    MOONCLAN_GLOVES(ItemID.MOONCLAN_GLOVES),
    MOONCLAN_ARMOUR(ItemID.MOONCLAN_ARMOUR),
    MOONCLAN_SKIRT(ItemID.MOONCLAN_SKIRT),
    MUDSKIPPER_HAT(ItemID.MUDSKIPPER_HAT),
    FLIPPERS_MAGIC_WARDROBE(ItemID.FLIPPERS),
    MYSTIC_BOOTS(ItemID.MYSTIC_BOOTS),
    MYSTIC_HAT(ItemID.MYSTIC_HAT),
    MYSTIC_ROBE_BOTTOM(ItemID.MYSTIC_ROBE_BOTTOM),
    MYSTIC_ROBE_TOP(ItemID.MYSTIC_ROBE_TOP),
    MYSTIC_GLOVES(ItemID.MYSTIC_GLOVES),
    MYSTIC_BOOTS_DARK(ItemID.MYSTIC_BOOTS_DARK),
    MYSTIC_HAT_DARK(ItemID.MYSTIC_HAT_DARK),
    MYSTIC_ROBE_BOTTOM_DARK(ItemID.MYSTIC_ROBE_BOTTOM_DARK),
    MYSTIC_ROBE_TOP_DARK(ItemID.MYSTIC_ROBE_TOP_DARK),
    MYSTIC_GLOVES_DARK(ItemID.MYSTIC_GLOVES_DARK),
    MYSTIC_BOOTS_LIGHT(ItemID.MYSTIC_BOOTS_LIGHT),
    MYSTIC_HAT_LIGHT(ItemID.MYSTIC_HAT_LIGHT),
    MYSTIC_ROBE_BOTTOM_LIGHT(ItemID.MYSTIC_ROBE_BOTTOM_LIGHT),
    MYSTIC_ROBE_TOP_LIGHT(ItemID.MYSTIC_ROBE_TOP_LIGHT),
    MYSTIC_GLOVES_LIGHT(ItemID.MYSTIC_GLOVES_LIGHT),
    MYSTIC_BOOTS_DUSK(ItemID.MYSTIC_BOOTS_DUSK),
    MYSTIC_HAT_DUSK(ItemID.MYSTIC_HAT_DUSK),
    MYSTIC_ROBE_BOTTOM_DUSK(ItemID.MYSTIC_ROBE_BOTTOM_DUSK),
    MYSTIC_ROBE_TOP_DUSK(ItemID.MYSTIC_ROBE_TOP_DUSK),
    MYSTIC_GLOVES_DUSK(ItemID.MYSTIC_GLOVES_DUSK),
    MYSTIC_BOOTS_OR(ItemID.MYSTIC_BOOTS_OR),
    MYSTIC_HAT_OR(ItemID.MYSTIC_HAT_OR),
    MYSTIC_ROBE_BOTTOM_OR(ItemID.MYSTIC_ROBE_BOTTOM_OR),
    MYSTIC_ROBE_TOP_OR(ItemID.MYSTIC_ROBE_TOP_OR),
    MYSTIC_GLOVES_OR(ItemID.MYSTIC_GLOVES_OR),
    BLACK_NAVAL_SHIRT(ItemID.BLACK_NAVAL_SHIRT),
    BLACK_NAVY_SLACKS(ItemID.BLACK_NAVY_SLACKS),
    BLACK_TRICORN_HAT(ItemID.BLACK_TRICORN_HAT),
    BLUE_NAVAL_SHIRT(ItemID.BLUE_NAVAL_SHIRT),
    BLUE_NAVY_SLACKS(ItemID.BLUE_NAVY_SLACKS),
    BLUE_TRICORN_HAT(ItemID.BLUE_TRICORN_HAT),
    BROWN_NAVAL_SHIRT(ItemID.BROWN_NAVAL_SHIRT),
    BROWN_NAVY_SLACKS(ItemID.BROWN_NAVY_SLACKS),
    BROWN_TRICORN_HAT(ItemID.BROWN_TRICORN_HAT),
    GREEN_NAVAL_SHIRT(ItemID.GREEN_NAVAL_SHIRT),
    GREEN_NAVY_SLACKS(ItemID.GREEN_NAVY_SLACKS),
    GREEN_TRICORN_HAT(ItemID.GREEN_TRICORN_HAT),
    GREY_NAVAL_SHIRT(ItemID.GREY_NAVAL_SHIRT),
    GREY_NAVY_SLACKS(ItemID.GREY_NAVY_SLACKS),
    GREY_TRICORN_HAT(ItemID.GREY_TRICORN_HAT),
    PURPLE_NAVAL_SHIRT(ItemID.PURPLE_NAVAL_SHIRT),
    PURPLE_NAVY_SLACKS(ItemID.PURPLE_NAVY_SLACKS),
    PURPLE_TRICORN_HAT(ItemID.PURPLE_TRICORN_HAT),
    RED_NAVAL_SHIRT(ItemID.RED_NAVAL_SHIRT),
    RED_NAVY_SLACKS(ItemID.RED_NAVY_SLACKS),
    RED_TRICORN_HAT(ItemID.RED_TRICORN_HAT),
    OILY_PEARL_FISHING_ROD_MAGIC_WARDROBE(ItemID.OILY_PEARL_FISHING_ROD),
    PEARL_BARBARIAN_ROD_MAGIC_WARDROBE(ItemID.PEARL_BARBARIAN_ROD),
    PEARL_FISHING_ROD_MAGIC_WARDROBE(ItemID.PEARL_FISHING_ROD),
    PEARL_FLY_FISHING_ROD_MAGIC_WARDROBE(ItemID.PEARL_FLY_FISHING_ROD),
    PYROMANCER_BOOTS(ItemID.PYROMANCER_BOOTS),
    PYROMANCER_GARB(ItemID.PYROMANCER_GARB),
    PYROMANCER_HOOD(ItemID.PYROMANCER_HOOD),
    PYROMANCER_ROBE(ItemID.PYROMANCER_ROBE),
    SKELETAL_HELM(ItemID.SKELETAL_HELM),
    SKELETAL_BOTTOMS(ItemID.SKELETAL_BOTTOMS),
    SKELETAL_BOOTS(ItemID.SKELETAL_BOOTS),
    SKELETAL_GLOVES(ItemID.SKELETAL_GLOVES),
    SKELETAL_TOP(ItemID.SKELETAL_TOP),
    SMITHS_TUNIC(ItemID.SMITHS_TUNIC),
    SMITHS_TROUSERS(ItemID.SMITHS_TROUSERS),
    SMITHS_GLOVES(ItemID.SMITHS_GLOVES),
    SMITHS_GLOVES_I(ItemID.SMITHS_GLOVES_I),
    SMITHS_BOOTS(ItemID.SMITHS_BOOTS),
    SPLITBARK_BODY(ItemID.SPLITBARK_BODY),
    SPLITBARK_BOOTS(ItemID.SPLITBARK_BOOTS),
    SPLITBARK_HELM(ItemID.SPLITBARK_HELM),
    SPLITBARK_LEGS(ItemID.SPLITBARK_LEGS),
    SPLITBARK_GAUNTLETS(ItemID.SPLITBARK_GAUNTLETS),
    SWAMPBARK_BODY(ItemID.SWAMPBARK_BODY),
    SWAMPBARK_BOOTS(ItemID.SWAMPBARK_BOOTS),
    SWAMPBARK_HELM(ItemID.SWAMPBARK_HELM),
    SWAMPBARK_LEGS(ItemID.SWAMPBARK_LEGS),
    SWAMPBARK_GAUNTLETS(ItemID.SWAMPBARK_GAUNTLETS),
    VILLAGER_ARMBAND(ItemID.VILLAGER_ARMBAND),
    VILLAGER_ARMBAND_6359(ItemID.VILLAGER_ARMBAND_6359),
    VILLAGER_ARMBAND_6369(ItemID.VILLAGER_ARMBAND_6369),
    VILLAGER_ARMBAND_6379(ItemID.VILLAGER_ARMBAND_6379),
    VILLAGER_HAT(ItemID.VILLAGER_HAT),
    VILLAGER_HAT_6355(ItemID.VILLAGER_HAT_6355),
    VILLAGER_HAT_6365(ItemID.VILLAGER_HAT_6365),
    VILLAGER_HAT_6375(ItemID.VILLAGER_HAT_6375),
    VILLAGER_ROBE(ItemID.VILLAGER_ROBE),
    VILLAGER_ROBE_6353(ItemID.VILLAGER_ROBE_6353),
    VILLAGER_ROBE_6363(ItemID.VILLAGER_ROBE_6363),
    VILLAGER_ROBE_6373(ItemID.VILLAGER_ROBE_6373),
    VILLAGER_SANDALS(ItemID.VILLAGER_SANDALS),
    VILLAGER_SANDALS_6357(ItemID.VILLAGER_SANDALS_6357),
    VILLAGER_SANDALS_6367(ItemID.VILLAGER_SANDALS_6367),
    VILLAGER_SANDALS_6377(ItemID.VILLAGER_SANDALS_6377),
    TRIBAL_TOP(ItemID.TRIBAL_TOP),
    TRIBAL_TOP_6351(ItemID.TRIBAL_TOP_6351),
    TRIBAL_TOP_6361(ItemID.TRIBAL_TOP_6361),
    TRIBAL_TOP_6371(ItemID.TRIBAL_TOP_6371),
    WARM_GLOVES(ItemID.WARM_GLOVES),
    ZEALOTS_BOOTS(ItemID.ZEALOTS_BOOTS),
    ZEALOTS_HELM(ItemID.ZEALOTS_HELM),
    ZEALOTS_ROBE_BOTTOM(ItemID.ZEALOTS_ROBE_BOTTOM),
    ZEALOTS_ROBE_TOP(ItemID.ZEALOTS_ROBE_TOP),
    HOOD_OF_RUIN(ItemID.HOOD_OF_RUIN),
    ROBE_TOP_OF_RUIN(ItemID.ROBE_TOP_OF_RUIN),
    ROBE_BOTTOM_OF_RUIN(ItemID.ROBE_BOTTOM_OF_RUIN),
    GLOVES_OF_RUIN(ItemID.GLOVES_OF_RUIN),
    SOCKS_OF_RUIN(ItemID.SOCKS_OF_RUIN),
    CLOAK_OF_RUIN(ItemID.CLOAK_OF_RUIN),
    HAT_OF_THE_EYE(ItemID.HAT_OF_THE_EYE),
    ROBE_TOP_OF_THE_EYE(ItemID.ROBE_TOP_OF_THE_EYE),
    ROBE_BOTTOMS_OF_THE_EYE(ItemID.ROBE_BOTTOMS_OF_THE_EYE),
    BOOTS_OF_THE_EYE(ItemID.BOOTS_OF_THE_EYE),
    HAT_OF_THE_EYE_BLUE(ItemID.HAT_OF_THE_EYE_BLUE),
    ROBE_TOP_OF_THE_EYE_BLUE(ItemID.ROBE_TOP_OF_THE_EYE_BLUE),
    ROBE_BOTTOMS_OF_THE_EYE_BLUE(ItemID.ROBE_BOTTOMS_OF_THE_EYE_BLUE),
    HAT_OF_THE_EYE_RED(ItemID.HAT_OF_THE_EYE_RED),
    ROBE_TOP_OF_THE_EYE_RED(ItemID.ROBE_TOP_OF_THE_EYE_RED),
    ROBE_BOTTOMS_OF_THE_EYE_RED(ItemID.ROBE_BOTTOMS_OF_THE_EYE_RED),
    HAT_OF_THE_EYE_GREEN(ItemID.HAT_OF_THE_EYE_GREEN),
    ROBE_TOP_OF_THE_EYE_GREEN(ItemID.ROBE_TOP_OF_THE_EYE_GREEN),
    ROBE_BOTTOMS_OF_THE_EYE_GREEN(ItemID.ROBE_BOTTOMS_OF_THE_EYE_GREEN),
    PHEASANT_HAT(ItemID.PHEASANT_HAT),
    PHEASANT_CAPE(ItemID.PHEASANT_CAPE),
    PHEASANT_LEGS(ItemID.PHEASANT_LEGS),
    PHEASANT_BOOTS(ItemID.PHEASANT_BOOTS),
    LOG_BASKET(ItemID.LOG_BASKET, true),
    FORESTRY_KIT(ItemID.FORESTRY_KIT, true),
    VIRTUS_MASK(ItemID.VIRTUS_MASK, true),
    VIRTUS_ROBE_BOTTOM(ItemID.VIRTUS_ROBE_BOTTOM, true),
    VIRTUS_ROBE_TOP(ItemID.VIRTUS_ROBE_TOP, true),
    DARK_SQUALL_HOOD(ItemID.DARK_SQUALL_HOOD),
    DARK_SQUALL_ROBE_TOP(ItemID.DARK_SQUALL_ROBE_TOP),
    DARK_SQUALL_ROBE_BOTTOM(ItemID.DARK_SQUALL_ROBE_BOTTOM),
    EMISSARY_HOOD(ItemID.EMISSARY_HOOD),
    EMISSARY_ROBE_TOP(ItemID.EMISSARY_ROBE_TOP),
    EMISSARY_ROBE_BOTTOM(ItemID.EMISSARY_ROBE_BOTTOM),
    EMISSARY_SANDALS(ItemID.EMISSARY_SANDALS),
    MASK_OF_REBIRTH(ItemID.MASK_OF_REBIRTH),
    ANCIENT_CEREMONIAL_BOOTS(ItemID.ANCIENT_CEREMONIAL_BOOTS),
    ANCIENT_CEREMONIAL_GLOVES(ItemID.ANCIENT_CEREMONIAL_GLOVES),
    ANCIENT_CEREMONIAL_MASK(ItemID.ANCIENT_CEREMONIAL_MASK),
    ANCIENT_CEREMONIAL_LEGS(ItemID.ANCIENT_CEREMONIAL_LEGS),
    ANCIENT_CEREMONIAL_TOP(ItemID.ANCIENT_CEREMONIAL_TOP);


    private final int itemID;
    @Getter
    private final String location = "Magic Wardrobe";
    @Getter
    private final boolean isBis;

    MagicWardrobe(int itemID, boolean isBis) {
        this.itemID = itemID; this.isBis = isBis;
    }
    MagicWardrobe(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum CapeRack implements StorableItem {
    ACHIEVEMENT_DIARY_HOOD(ItemID.ACHIEVEMENT_DIARY_HOOD),
    ACHIEVEMENT_DIARY_CAPE(ItemID.ACHIEVEMENT_DIARY_CAPE, true),
    ACHIEVEMENT_DIARY_CAPE_T(ItemID.ACHIEVEMENT_DIARY_CAPE_T, true),
    AGILITY_HOOD(ItemID.AGILITY_HOOD),
    AGILITY_CAPE(ItemID.AGILITY_CAPE, true),
    AGILITY_CAPET(ItemID.AGILITY_CAPET, true),
    ATTACK_HOOD(ItemID.ATTACK_HOOD),
    ATTACK_CAPE(ItemID.ATTACK_CAPE, true),
    ATTACK_CAPET(ItemID.ATTACK_CAPET, true),
    CHAMPIONS_CAPE(ItemID.CHAMPIONS_CAPE, true),
    CONSTRUCT_HOOD(ItemID.CONSTRUCT_HOOD),
    CONSTRUCT_CAPE(ItemID.CONSTRUCT_CAPE, true),
    CONSTRUCT_CAPET(ItemID.CONSTRUCT_CAPET, true),
    COOKING_HOOD(ItemID.COOKING_HOOD),
    COOKING_CAPE(ItemID.COOKING_CAPE, true),
    COOKING_CAPET(ItemID.COOKING_CAPET, true),
    CRAFTING_HOOD(ItemID.CRAFTING_HOOD),
    CRAFTING_CAPE(ItemID.CRAFTING_CAPE, true),
    CRAFTING_CAPET(ItemID.CRAFTING_CAPET, true),
    DEFENCE_HOOD(ItemID.DEFENCE_HOOD),
    DEFENCE_CAPE(ItemID.DEFENCE_CAPE, true),
    DEFENCE_CAPET(ItemID.DEFENCE_CAPET, true),
    FARMING_HOOD(ItemID.FARMING_HOOD),
    FARMING_CAPE(ItemID.FARMING_CAPE, true),
    FARMING_CAPET(ItemID.FARMING_CAPET, true),
    FIRE_CAPE(ItemID.FIRE_CAPE, true),
    FIREMAKING_HOOD(ItemID.FIREMAKING_HOOD),
    FIREMAKING_CAPE(ItemID.FIREMAKING_CAPE, true),
    FIREMAKING_CAPET(ItemID.FIREMAKING_CAPET, true),
    FISHING_HOOD(ItemID.FISHING_HOOD),
    FISHING_CAPE(ItemID.FISHING_CAPE, true),
    FISHING_CAPET(ItemID.FISHING_CAPET, true),
    FLETCHING_HOOD(ItemID.FLETCHING_HOOD),
    FLETCHING_CAPE(ItemID.FLETCHING_CAPE, true),
    FLETCHING_CAPET(ItemID.FLETCHING_CAPET, true),
    GAUNTLET_CAPE(ItemID.GAUNTLET_CAPE),
    HERBLORE_HOOD(ItemID.HERBLORE_HOOD),
    HERBLORE_CAPE(ItemID.HERBLORE_CAPE, true),
    HERBLORE_CAPET(ItemID.HERBLORE_CAPET, true),
    HITPOINTS_HOOD(ItemID.HITPOINTS_HOOD),
    HITPOINTS_CAPE(ItemID.HITPOINTS_CAPE, true),
    HITPOINTS_CAPET(ItemID.HITPOINTS_CAPET, true),
    HUNTER_HOOD_PoHCapeRack(ItemID.HUNTER_HOOD),
    HUNTER_CAPE_PoHCapeRack(ItemID.HUNTER_CAPE, true),
    HUNTER_CAPET_PoHCapeRack(ItemID.HUNTER_CAPET, true),
    ICTHLARINS_SHROUD_TIER_1(ItemID.ICTHLARINS_SHROUD_TIER_1),
    ICTHLARINS_SHROUD_TIER_2(ItemID.ICTHLARINS_SHROUD_TIER_2),
    ICTHLARINS_SHROUD_TIER_3(ItemID.ICTHLARINS_SHROUD_TIER_3),
    ICTHLARINS_SHROUD_TIER_4(ItemID.ICTHLARINS_SHROUD_TIER_4),
    ICTHLARINS_SHROUD_TIER_5(ItemID.ICTHLARINS_SHROUD_TIER_5),
    INFERNAL_CAPE(ItemID.INFERNAL_CAPE, true),
    CAPE_OF_LEGENDS(ItemID.CAPE_OF_LEGENDS),
    GUTHIX_CAPE(ItemID.GUTHIX_CAPE),
    IMBUED_GUTHIX_CAPE(ItemID.IMBUED_GUTHIX_CAPE, true),
    SARADOMIN_CAPE(ItemID.SARADOMIN_CAPE),
    IMBUED_SARADOMIN_CAPE(ItemID.IMBUED_SARADOMIN_CAPE, true),
    ZAMORAK_CAPE(ItemID.ZAMORAK_CAPE),
    IMBUED_ZAMORAK_CAPE(ItemID.IMBUED_ZAMORAK_CAPE, true),
    MAGIC_HOOD(ItemID.MAGIC_HOOD),
    MAGIC_CAPE(ItemID.MAGIC_CAPE, true),
    MAGIC_CAPET(ItemID.MAGIC_CAPET, true),
    // MAX CAPES
    MAX_HOOD(ItemID.MAX_HOOD),
    MAX_CAPE(ItemID.MAX_CAPE, true),
    ARDOUGNE_MAX_HOOD(ItemID.ARDOUGNE_MAX_HOOD),
    ARDOUGNE_MAX_CAPE(ItemID.ARDOUGNE_MAX_CAPE, true),
    ACCUMULATOR_MAX_HOOD(ItemID.ACCUMULATOR_MAX_HOOD),
    ACCUMULATOR_MAX_CAPE(ItemID.ACCUMULATOR_MAX_CAPE, true),
    ASSEMBLER_MAX_HOOD(ItemID.ASSEMBLER_MAX_HOOD),
    ASSEMBLER_MAX_CAPE(ItemID.ASSEMBLER_MAX_CAPE, true),
    DIZANAS_MAX_HOOD(ItemID.DIZANAS_MAX_HOOD),
    DIZANAS_MAX_CAPE(ItemID.DIZANAS_MAX_CAPE, true),
    FIRE_MAX_HOOD(ItemID.FIRE_MAX_HOOD),
    FIRE_MAX_CAPE(ItemID.FIRE_MAX_CAPE, true),
    INFERNAL_MAX_HOOD(ItemID.INFERNAL_MAX_HOOD),
    INFERNAL_MAX_CAPE(ItemID.INFERNAL_MAX_CAPE, true),
    IMBUED_GUTHIX_MAX_HOOD(ItemID.IMBUED_GUTHIX_MAX_HOOD),
    IMBUED_GUTHIX_MAX_CAPE(ItemID.IMBUED_GUTHIX_MAX_CAPE, true),
    IMBUED_SARADOMIN_MAX_HOOD(ItemID.IMBUED_SARADOMIN_MAX_HOOD),
    IMBUED_SARADOMIN_MAX_CAPE(ItemID.IMBUED_SARADOMIN_MAX_CAPE, true),
    IMBUED_ZAMORAK_MAX_HOOD(ItemID.IMBUED_ZAMORAK_MAX_HOOD),
    IMBUED_ZAMORAK_MAX_CAPE(ItemID.IMBUED_ZAMORAK_MAX_CAPE, true),
    MASORI_ASSEMBLER_MAX_HOOD(ItemID.MASORI_ASSEMBLER_MAX_HOOD),
    MASORI_ASSEMBLER_MAX_CAPE(ItemID.MASORI_ASSEMBLER_MAX_CAPE, true),
    MYTHICAL_MAX_HOOD(ItemID.MYTHICAL_MAX_HOOD),
    MYTHICAL_MAX_CAPE(ItemID.MYTHICAL_MAX_CAPE, true),
    GUTHIX_MAX_HOOD(ItemID.GUTHIX_MAX_HOOD),
    GUTHIX_MAX_CAPE(ItemID.GUTHIX_MAX_CAPE, true),
    SARADOMIN_MAX_HOOD_MAX_CAPE(ItemID.SARADOMIN_MAX_HOOD),
    SARADOMIN_MAX_CAPE(ItemID.SARADOMIN_MAX_CAPE, true),
    ZAMORAK_MAX_HOOD(ItemID.ZAMORAK_MAX_HOOD),
    ZAMORAK_MAX_CAPE(ItemID.ZAMORAK_MAX_CAPE, true),

    MINING_HOOD(ItemID.MINING_HOOD),
    MINING_CAPE(ItemID.MINING_CAPE, true),
    MINING_CAPET(ItemID.MINING_CAPET, true),
    MUSIC_HOOD(ItemID.MUSIC_HOOD),
    MUSIC_CAPE(ItemID.MUSIC_CAPE, true),
    MUSIC_CAPET(ItemID.MUSIC_CAPET, true),
    MYTHICAL_CAPE(ItemID.MYTHICAL_CAPE, true),
    OBSIDIAN_CAPE(ItemID.OBSIDIAN_CAPE),
    PRAYER_HOOD(ItemID.PRAYER_HOOD),
    PRAYER_CAPE(ItemID.PRAYER_CAPE, true),
    PRAYER_CAPET(ItemID.PRAYER_CAPET, true),
    QUEST_POINT_HOOD(ItemID.QUEST_POINT_HOOD),
    QUEST_POINT_CAPE(ItemID.QUEST_POINT_CAPE, true),
    QUEST_POINT_CAPE_T(ItemID.QUEST_POINT_CAPE_T, true),
    RANGING_HOOD(ItemID.RANGING_HOOD),
    RANGING_CAPE(ItemID.RANGING_CAPE, true),
    RANGING_CAPET(ItemID.RANGING_CAPET, true),
    RUNECRAFT_HOOD(ItemID.RUNECRAFT_HOOD),
    RUNECRAFT_CAPE(ItemID.RUNECRAFT_CAPE, true),
    RUNECRAFT_CAPET(ItemID.RUNECRAFT_CAPET, true),
    SOUL_CAPE(ItemID.SOUL_CAPE),
    SINHAZA_SHROUD_TIER_1(ItemID.SINHAZA_SHROUD_TIER_1),
    SINHAZA_SHROUD_TIER_2(ItemID.SINHAZA_SHROUD_TIER_2),
    SINHAZA_SHROUD_TIER_3(ItemID.SINHAZA_SHROUD_TIER_3),
    SINHAZA_SHROUD_TIER_4(ItemID.SINHAZA_SHROUD_TIER_4),
    SINHAZA_SHROUD_TIER_5(ItemID.SINHAZA_SHROUD_TIER_5),
    SLAYER_HOOD(ItemID.SLAYER_HOOD),
    SLAYER_CAPE(ItemID.SLAYER_CAPE, true),
    SLAYER_CAPET(ItemID.SLAYER_CAPET, true),
    SMITHING_HOOD(ItemID.SMITHING_HOOD),
    SMITHING_CAPE(ItemID.SMITHING_CAPE, true),
    SMITHING_CAPET(ItemID.SMITHING_CAPET, true),
    SPOTTED_CAPE(ItemID.SPOTTED_CAPE),
    SPOTTIER_CAPE(ItemID.SPOTTIER_CAPE),
    STRENGTH_HOOD(ItemID.STRENGTH_HOOD),
    STRENGTH_CAPE(ItemID.STRENGTH_CAPE, true),
    STRENGTH_CAPET(ItemID.STRENGTH_CAPET, true),
    THIEVING_HOOD(ItemID.THIEVING_HOOD),
    THIEVING_CAPE(ItemID.THIEVING_CAPE, true),
    THIEVING_CAPET(ItemID.THIEVING_CAPET, true),
    VICTORS_CAPE_1(ItemID.VICTORS_CAPE_1),
    VICTORS_CAPE_10(ItemID.VICTORS_CAPE_10),
    VICTORS_CAPE_50(ItemID.VICTORS_CAPE_50),
    VICTORS_CAPE_100(ItemID.VICTORS_CAPE_100),
    VICTORS_CAPE_500(ItemID.VICTORS_CAPE_500),
    VICTORS_CAPE_1000(ItemID.VICTORS_CAPE_1000),
    // TEAM CAPE
    TEAM1_CAPE(ItemID.TEAM1_CAPE),
    TEAM2_CAPE(ItemID.TEAM2_CAPE),
    TEAM3_CAPE(ItemID.TEAM3_CAPE),
    TEAM4_CAPE(ItemID.TEAM4_CAPE),
    TEAM5_CAPE(ItemID.TEAM5_CAPE),
    TEAM6_CAPE(ItemID.TEAM6_CAPE),
    TEAM7_CAPE(ItemID.TEAM7_CAPE),
    TEAM8_CAPE(ItemID.TEAM8_CAPE),
    TEAM9_CAPE(ItemID.TEAM9_CAPE),
    TEAM10_CAPE(ItemID.TEAM10_CAPE),
    TEAM11_CAPE(ItemID.TEAM11_CAPE),
    TEAM12_CAPE(ItemID.TEAM12_CAPE),
    TEAM13_CAPE(ItemID.TEAM13_CAPE),
    TEAM14_CAPE(ItemID.TEAM14_CAPE),
    TEAM15_CAPE(ItemID.TEAM15_CAPE),
    TEAM16_CAPE(ItemID.TEAM16_CAPE),
    TEAM17_CAPE(ItemID.TEAM17_CAPE),
    TEAM18_CAPE(ItemID.TEAM18_CAPE),
    TEAM19_CAPE(ItemID.TEAM19_CAPE),
    TEAM20_CAPE(ItemID.TEAM20_CAPE),
    TEAM21_CAPE(ItemID.TEAM21_CAPE),
    TEAM22_CAPE(ItemID.TEAM22_CAPE),
    TEAM23_CAPE(ItemID.TEAM23_CAPE),
    TEAM24_CAPE(ItemID.TEAM24_CAPE),
    TEAM25_CAPE(ItemID.TEAM25_CAPE),
    TEAM26_CAPE(ItemID.TEAM26_CAPE),
    TEAM27_CAPE(ItemID.TEAM27_CAPE),
    TEAM28_CAPE(ItemID.TEAM28_CAPE),
    TEAM29_CAPE(ItemID.TEAM29_CAPE),
    TEAM30_CAPE(ItemID.TEAM30_CAPE),
    TEAM31_CAPE(ItemID.TEAM31_CAPE),
    TEAM32_CAPE(ItemID.TEAM32_CAPE),
    TEAM33_CAPE(ItemID.TEAM33_CAPE),
    TEAM34_CAPE(ItemID.TEAM34_CAPE),
    TEAM35_CAPE(ItemID.TEAM35_CAPE),
    TEAM36_CAPE(ItemID.TEAM36_CAPE),
    TEAM37_CAPE(ItemID.TEAM37_CAPE),
    TEAM38_CAPE(ItemID.TEAM38_CAPE),
    TEAM39_CAPE(ItemID.TEAM39_CAPE),
    TEAM40_CAPE(ItemID.TEAM40_CAPE),
    TEAM41_CAPE(ItemID.TEAM41_CAPE),
    TEAM42_CAPE(ItemID.TEAM42_CAPE),
    TEAM43_CAPE(ItemID.TEAM43_CAPE),
    TEAM44_CAPE(ItemID.TEAM44_CAPE),
    TEAM45_CAPE(ItemID.TEAM45_CAPE),
    TEAM46_CAPE(ItemID.TEAM46_CAPE),
    TEAM47_CAPE(ItemID.TEAM47_CAPE),
    TEAM48_CAPE(ItemID.TEAM48_CAPE),
    TEAM49_CAPE(ItemID.TEAM49_CAPE),
    TEAM50_CAPE(ItemID.TEAM50_CAPE),

    TEAM_CAPE_ZERO(ItemID.TEAM_CAPE_ZERO),
    TEAM_CAPE_I(ItemID.TEAM_CAPE_I),
    TEAM_CAPE_X(ItemID.TEAM_CAPE_X),

    WOODCUTTING_HOOD(ItemID.WOODCUTTING_HOOD),
    WOODCUTTING_CAPE_2(ItemID.WOODCUTTING_CAPE, true),
    WOODCUTTING_CAPE_T(ItemID.WOODCUT_CAPET, true),

    XERICS_CHAMPION(ItemID.XERICS_CHAMPION),
    XERICS_GENERAL(ItemID.XERICS_GENERAL),
    XERICS_GUARD(ItemID.XERICS_GUARD),
    XERICS_SENTINEL(ItemID.XERICS_SENTINEL),
    XERICS_WARRIOR(ItemID.XERICS_WARRIOR);

    private final int itemID;
    @Getter
    private final String location = "Cape Rack";

    @Getter
    private final boolean isBis;

    CapeRack(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
    CapeRack(int itemID, boolean isBis) {
        this.itemID = itemID; this.isBis = isBis;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum MasterScrollBook implements StorableItem {
    NARDAH_TELEPORT(ItemID.NARDAH_TELEPORT),
    DIGSITE_TELEPORT(ItemID.DIGSITE_TELEPORT),
    FELDIP_HILLS_TELEPORT(ItemID.FELDIP_HILLS_TELEPORT),
    LUNAR_ISLE_TELEPORT(ItemID.LUNAR_ISLE_TELEPORT),
    MORTTON_TELEPORT(ItemID.MORTTON_TELEPORT),
    PEST_CONTROL_TELEPORT(ItemID.PEST_CONTROL_TELEPORT),
    PISCATORIS_TELEPORT(ItemID.PISCATORIS_TELEPORT),
    TAI_BWO_WANNAI_TELEPORT(ItemID.TAI_BWO_WANNAI_TELEPORT),
    IORWERTH_CAMP_TELEPORT(ItemID.IORWERTH_CAMP_TELEPORT),
    MOS_LEHARMLESS_TELEPORT(ItemID.MOS_LEHARMLESS_TELEPORT),
    LUMBERYARD_TELEPORT(ItemID.LUMBERYARD_TELEPORT),
    ZULANDRA_TELEPORT(ItemID.ZULANDRA_TELEPORT),
    KEY_MASTER_TELEPORT(ItemID.KEY_MASTER_TELEPORT),
    REVENANT_CAVE_TELEPORT(ItemID.REVENANT_CAVE_TELEPORT),
    WATSON_TELEPORT(ItemID.WATSON_TELEPORT),
    GUTHIXIAN_TEMPLE_TELEPORT(ItemID.GUTHIXIAN_TEMPLE_TELEPORT),
    SPIDER_CAVE_TELEPORT(ItemID.SPIDER_CAVE_TELEPORT),
    COLOSSAL_WYRM_TELEPORT_SCROLL(ItemID.COLOSSAL_WYRM_TELEPORT_SCROLL);

    private final int itemID;
    @Getter
    private final String location = "Master Scroll Book";
    @Getter
    private final boolean isBis;

    MasterScrollBook(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model.locations;

import com.wastedbankspace.model.StorableItem;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum SeedVault implements StorableItem {
    // Allotment Seeds
    POTATO_SEED(ItemID.POTATO_SEED),
    ONION_SEED(ItemID.ONION_SEED),
    CABBAGE_SEED(ItemID.CABBAGE_SEED),
    TOMATO_SEED(ItemID.TOMATO_SEED),
    SWEETCORN_SEED(ItemID.SWEETCORN_SEED),
    STRAWBERRY_SEED(ItemID.STRAWBERRY_SEED),
    WATERMELON_SEED(ItemID.WATERMELON_SEED),
    SNAPE_GRASS_SEED(ItemID.SNAPE_GRASS_SEED),

    // Flower Seeds
    MARIGOLD_SEED(ItemID.MARIGOLD_SEED),
    ROSEMARY_SEED(ItemID.ROSEMARY_SEED),
    NASTURTIUM_SEED(ItemID.NASTURTIUM_SEED),
    WOAD_SEED(ItemID.WOAD_SEED),
    LIMPWURT_SEED(ItemID.LIMPWURT_SEED),
    WHITE_LILY_SEED(ItemID.WHITE_LILY_SEED),

    // Herb Seeds
    GUAM_SEED(ItemID.GUAM_SEED),
    MARRENTILL_SEED(ItemID.MARRENTILL_SEED),
    TARROMIN_SEED(ItemID.TARROMIN_SEED),
    HARRALANDER_SEED(ItemID.HARRALANDER_SEED),
    RANARR_SEED(ItemID.RANARR_SEED),
    TOADFLAX_SEED(ItemID.TOADFLAX_SEED),
    IRIT_SEED(ItemID.IRIT_SEED),
    AVANTOE_SEED(ItemID.AVANTOE_SEED),
    KWUARM_SEED(ItemID.KWUARM_SEED),
    SNAPDRAGON_SEED(ItemID.SNAPDRAGON_SEED),
    CADANTINE_SEED(ItemID.CADANTINE_SEED),
    LANTADYME_SEED(ItemID.LANTADYME_SEED),
    DWARF_WEED_SEED(ItemID.DWARF_WEED_SEED),
    TORSTOL_SEED(ItemID.TORSTOL_SEED),

    // Hop Seeds
    BARLEY_SEED(ItemID.BARLEY_SEED),
    HAMMERSTONE_SEED(ItemID.HAMMERSTONE_SEED),
    ASGARNIAN_SEED(ItemID.ASGARNIAN_SEED),
    JUTE_SEED(ItemID.JUTE_SEED),
    YANILLIAN_SEED(ItemID.YANILLIAN_SEED),
    KRANDORIAN_SEED(ItemID.KRANDORIAN_SEED),
    WILDBLOOD_SEED(ItemID.WILDBLOOD_SEED),

    // Bush Seeds
    REDBERRY_SEED(ItemID.REDBERRY_SEED),
    CADAVABERRY_SEED(ItemID.CADAVABERRY_SEED),
    DWELLBERRY_SEED(ItemID.DWELLBERRY_SEED),
    JANGERBERRY_SEED(ItemID.JANGERBERRY_SEED),
    WHITEBERRY_SEED(ItemID.WHITEBERRY_SEED),
    POISON_IVY_SEED(ItemID.POISON_IVY_SEED),

    // Tree Seeds
    ACORN(ItemID.ACORN),
    WILLOW_SEED(ItemID.WILLOW_SEED),
    TEAK_SEED(ItemID.TEAK_SEED),
    MAPLE_SEED(ItemID.MAPLE_SEED),
    MAHOGANY_SEED(ItemID.MAHOGANY_SEED),
    YEW_SEED(ItemID.YEW_SEED),
    MAGIC_SEED(ItemID.MAGIC_SEED),
    REDWOOD_TREE_SEED(ItemID.REDWOOD_TREE_SEED),

    // Fruit Tree Seeds
    APPLE_TREE_SEED(ItemID.APPLE_TREE_SEED),
    BANANA_TREE_SEED(ItemID.BANANA_TREE_SEED),
    ORANGE_TREE_SEED(ItemID.ORANGE_TREE_SEED),
    CURRY_TREE_SEED(ItemID.CURRY_TREE_SEED),
    PINEAPPLE_SEED(ItemID.PINEAPPLE_SEED),
    PAPAYA_TREE_SEED(ItemID.PAPAYA_TREE_SEED),
    PALM_TREE_SEED(ItemID.PALM_TREE_SEED),
    DRAGONFRUIT_TREE_SEED(ItemID.DRAGONFRUIT_TREE_SEED),

    // Exotic Seeds
    SEAWEED_SPORE(ItemID.SEAWEED_SPORE),
    GRAPE_SEED(ItemID.GRAPE_SEED),
    MUSHROOM_SPORE(ItemID.MUSHROOM_SPORE),
    CACTUS_SEED(ItemID.CACTUS_SEED),
    BELLADONNA_SEED(ItemID.BELLADONNA_SEED),
    POTATO_CACTUS_SEED(ItemID.POTATO_CACTUS_SEED),
    HESPORI_SEED(ItemID.HESPORI_SEED),
    CALQUAT_TREE_SEED(ItemID.CALQUAT_TREE_SEED),
    SPIRIT_SEED(ItemID.SPIRIT_SEED),
    CELASTRUS_SEED(ItemID.CELASTRUS_SEED),
    CRYSTAL_ACORN(ItemID.CRYSTAL_ACORN),

    // Anima Seeds
    ATTAS_SEED(ItemID.ATTAS_SEED),
    IASOR_SEED(ItemID.IASOR_SEED),
    KRONOS_SEED(ItemID.KRONOS_SEED),

    // Saplings
    OAK_SAPLING(ItemID.OAK_SAPLING),
    APPLE_SAPLING(ItemID.APPLE_SAPLING),
    WILLOW_SAPLING(ItemID.WILLOW_SAPLING),
    BANANA_SAPLING(ItemID.BANANA_SAPLING),
    TEAK_SAPLING(ItemID.TEAK_SAPLING),
    ORANGE_SAPLING(ItemID.ORANGE_SAPLING),
    CURRY_SAPLING(ItemID.CURRY_SAPLING),
    MAPLE_SAPLING(ItemID.MAPLE_SAPLING),
    PINEAPPLE_SAPLING(ItemID.PINEAPPLE_SAPLING),
    MAHOGANY_SAPLING(ItemID.MAHOGANY_SAPLING),
    PAPAYA_SAPLING(ItemID.PAPAYA_SAPLING),
    YEW_SAPLING(ItemID.YEW_SAPLING),
    PALM_SAPLING(ItemID.PALM_SAPLING),
    CALQUAT_SAPLING(ItemID.CALQUAT_SAPLING),
    MAGIC_SAPLING(ItemID.MAGIC_SAPLING),
    DRAGONFRUIT_SAPLING(ItemID.DRAGONFRUIT_SAPLING),
    SPIRIT_SAPLING(ItemID.SPIRIT_SAPLING),
    CELASTRUS_SAPLING(ItemID.CELASTRUS_SAPLING),
    REDWOOD_SAPLING(ItemID.REDWOOD_SAPLING),
    CRYSTAL_SAPLING(ItemID.CRYSTAL_SAPLING);

    private final int itemID;
    @Getter
    private final String location = "Seed vault";
    @Getter
    private final boolean isBis;
    SeedVault(int itemID) {
        this.itemID = itemID;
        this.isBis = false;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model;

public interface StorableItem {
    int getItemID();
    String getLocation();
    boolean isBis();
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.model;

import com.wastedbankspace.model.locations.*;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemManager;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Getter
public class StorageLocations
{
	/**
	 * itemNameMap: Maps a storable item ID to the corresponding item name
	 */
	private static final Map<Integer, String> itemNameMap = new HashMap<>();

	/**
	 *	itemIdMap: Maps item ID to items that are storable (see registerItems)
	 */
	@Getter
	private static final Map<Integer, StorableItem> itemIdMap = new HashMap<>();

	/**
	 *	modifiedItemNameMap: Maps item name to item ID after cleaning name string.
	 *	Note: Use TreeMap instead of hashmap so that we can use string case-insensitive comparison
	 *		in order to access values
	 */
	@Getter
	private static final Map<String, Integer> modifiedItemNameMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);

	static
	{
		// Currently just run ([A-Za-z]+)\.java replaced with registerItems($1.class);
		// on the ls of the model.locations folder
		registerItems(ArmourCase.class);
		registerItems(Bookcase.class);
		registerItems(CapeRack.class);
		registerItems(ElnockInquisitor.class);
		registerItems(FancyDressBox.class);
		registerItems(FlamtaerBag.class);
		registerItems(ForestryKit.class);
		registerItems(FossilStorage.class);
		registerItems(HuntsmansKit.class);
		registerItems(MagicWardrobe.class);
		registerItems(MasterScrollBook.class);
		registerItems(MysteriousStranger.class);
		registerItems(NightmareZone.class);
		registerItems(PetHouse.class);
		registerItems(SeedVault.class);
		registerItems(SpiceRack.class);
		registerItems(SteelKeyRing.class);
		registerItems(TackleBox.class);
		registerItems(ToolLeprechaun.class);
		registerItems(ToyBox.class);
		registerItems(TreasureChest.class);
	}

	private static <E extends Enum<E> & StorableItem> void registerItems(Class<E> enumClass)
	{
		for (E item : enumClass.getEnumConstants())
		{
			itemIdMap.put(item.getItemID(), item);
		}
		log.debug("Registered items from {}", enumClass.getSimpleName());
	}

	public static void prepareStorableItemNames(ItemManager itemManager)
	{
		log.debug("Starting prepareStorableItemNames()");
		log.debug("itemIdMap contents before preparing: {}", itemIdMap.values());

		for (StorableItem item : itemIdMap.values())
		{
			String item_name = itemManager.getItemComposition(item.getItemID()).getName();
			itemNameMap.put(item.getItemID(), item_name);
			// Standardize name's to lowercase and remove spaces for case-insensitive comparison
			String cleaned_item_name = item_name.toLowerCase().replaceAll("\\s+", "");
			modifiedItemNameMap.put(cleaned_item_name, item.getItemID());
		}
		if (itemIdMap.size() == itemNameMap.size())
		{
			log.debug("Successfully prepared storableItemNameMap");
		}
		else
		{
			log.warn("prepareStorableItemNames() did not successfully prepare storableItemNameMap");
		}
	}

	public static boolean isItemStorable(int id)
	{
		return itemIdMap.containsKey(id);
	}

	/**
	 * Converts a set of item IDs into a set of their corresponding item names.
	 *
	 * @param itemIds A set of item IDs to be converted.
	 * @return A set of item names corresponding to the provided item IDs.
	 */
	public static List<String> itemIdsToString(Set<Integer> itemIds)
	{
		return itemIds.stream()
			.map(itemNameMap::get)
			.collect(Collectors.toList());
	}

	public static StorableItem getStorableItem(Integer id)
	{
		return itemIdMap.get(id);
	}

	public static String getStorableItemName(Integer id)
	{
		return itemNameMap.get(id);
	}

	public static Integer getStorableItemId(String name)
	{
		return modifiedItemNameMap.get(name);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace;

import com.google.inject.Provides;
import com.wastedbankspace.model.StorableItem;
import com.wastedbankspace.model.StorageLocationEnabler;
import com.wastedbankspace.model.StorageLocations;
import com.wastedbankspace.model.locations.*;
import com.wastedbankspace.ui.WastedBankSpacePanel;
import com.wastedbankspace.ui.overlay.OverlayImage;
import com.wastedbankspace.ui.overlay.StorageItemOverlay;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.concurrent.ScheduledExecutorService;

import static com.wastedbankspace.model.StorageLocations.isItemStorable;


@Slf4j
@PluginDescriptor(
	name = "Wasted Bank Space"
)
public class WastedBankSpacePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ItemManager itemManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private StorageItemOverlay storageItemOverlay;

	@Inject
	private TooltipManager tooltipManager;

	@Inject
	private WastedBankSpaceConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ScheduledExecutorService scheduledExecutorService;

	@Provides
	WastedBankSpaceConfig provideConfig(ConfigManager configManager)
	{

		return configManager.getConfig(WastedBankSpaceConfig.class);
	}

	private static final BufferedImage ICON = ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/overlaySmoll.png");

	private int bankContentsHash = 0;

	private NavigationButton navButton;
	private WastedBankSpacePanel panel;

	private boolean isBankOpen = false;
	private boolean bisFilterEnabled = false;

	private static boolean prepared = false;

	/**
	 * List of storage location enablers (sle) in Plugin Configuration. These map a boolean function to the list of
	 * 	storable items which they enable.
	 */
	private final List<StorageLocationEnabler> storageLocationEnablers = Arrays.asList(
		new StorageLocationEnabler(() -> config.tackleBoxStorageCheck(), TackleBox.values()),
		new StorageLocationEnabler(() -> config.steelKeyRingStorageCheck(), SteelKeyRing.values()),
		new StorageLocationEnabler(() -> config.toolLeprechaunStorageCheck(), ToolLeprechaun.values()),
		new StorageLocationEnabler(() -> config.masterScrollBookStorageCheck(), MasterScrollBook.values()),
		new StorageLocationEnabler(() -> config.fossilStorageStrorageCheck(), FossilStorage.values()),
		new StorageLocationEnabler(() -> config.elnockInquisitorStorageCheck(), ElnockInquisitor.values()),
		new StorageLocationEnabler(() -> config.flamtaerBagStorageCheck(), FlamtaerBag.values()),
		new StorageLocationEnabler(() -> config.nightmareZoneStorageCheck(), NightmareZone.values()),
		new StorageLocationEnabler(() -> config.seedVaultStorageCheck(), SeedVault.values()),
		new StorageLocationEnabler(() -> config.treasureChestStorageCheck(), TreasureChest.values()),
		new StorageLocationEnabler(() -> config.fancyDressBoxStorageCheck(), FancyDressBox.values()),
		new StorageLocationEnabler(() -> config.magicWardrobeStorageCheck(), MagicWardrobe.values()),
		new StorageLocationEnabler(() -> config.toyBoxStorageCheck(), ToyBox.values()),
		new StorageLocationEnabler(() -> config.spiceRackStorageCheck(), SpiceRack.values()),
		new StorageLocationEnabler(() -> config.forestryKitStorageCheck(), ForestryKit.values()),
		new StorageLocationEnabler(() -> config.armourCaseStorageCheck(), ArmourCase.values()),
		new StorageLocationEnabler(() -> config.mysteriousStrangerStorageCheck(), MysteriousStranger.values()),
		new StorageLocationEnabler(() -> config.petHouseStorageCheck(), PetHouse.values()),
		new StorageLocationEnabler(() -> config.bookcaseStorageCheck(), Bookcase.values()),
		new StorageLocationEnabler(() -> config.capeRackStorageCheck(), CapeRack.values()),
		new StorageLocationEnabler(() -> config.huntsmansKitStorageCheck(), HuntsmansKit.values())
	);


	/* Note: Static values, will never change once initialized */
	/**
	 * All items possible for all storage locations
	 * Note: Only set once during Initialize
	 */
	private static final Set<Integer> allStorableItems = new HashSet<>();

	/**
	 * Hashmap containing all itemIds per category. Used for enabling/disabling specific categories on config change.
	 * Note: Only set once during Initialize
	 */
	private static final Map<String, Set<Integer>> allStorableItemsByCategory = new HashMap<>();

	/**
	 * bis (Best in Slot) item ID's as tagged in each respective Storage Location.
	 * Note: Only set once during Initialize
	 */
	private static final Set<Integer> bisItems = new HashSet<>();

	/* The Below Sets are dynamic depending on config change (Panel for Ignore items),
	 items present in bank, filtered, etc. */

	/**
	 All Items ID's found in the players bank
	 */
	private final Set<Integer> itemsInBank = new HashSet<>();

	/**
	 *  Items populated from enabled storage types
	 */
	@Getter
	private final Set<Integer> enabledItems = new HashSet<>();

	/**
	 * Set of Item IDs which are Ignored regardless of being storable
	 * 	This is Managed in the plugin's panel
	 */
	private final Set<Integer> ignoredItemIds = new HashSet<>();

	/**
	 * Items matching enabled items that are also present in bank. AKA the Items Wasting Space.
	 * ID in itemsInBank AND enabledItems AND NOT ignoredItemIds
	 */
	private final Set<Integer> storableItemsInBank = new HashSet<>();

	@Override
	protected void startUp() throws Exception
	{
		panel = new WastedBankSpacePanel(client, tooltipManager, config, itemManager, this::processIgnoreListChanged, scheduledExecutorService);
		navButton = NavigationButton.builder()
			.tooltip("Wasted Bank Space")
			.priority(8)
			.icon(ICON)
			.panel(panel)
			.build();
		clientToolbar.addNavigation(navButton);

		overlayManager.add(storageItemOverlay);

		log.debug("Attempting to prepare WastedBankSpace upon startup.");
		if (!prepared)
		{
			log.debug("Not prepared, invoking clientThread");
			clientThread.invoke(() ->
			{
				switch (client.getGameState())
				{
					case LOGIN_SCREEN:
					case LOGIN_SCREEN_AUTHENTICATOR:
					case LOGGING_IN:
					case LOADING:
					case LOGGED_IN:
					case CONNECTION_LOST:
					case HOPPING:
						log.debug("Inside switch case for initializing");
						StorageLocations.prepareStorableItemNames(itemManager);
						initializeItemSets();
						bisFilterEnabled = config.bisFilterEnabledCheck();
						panel.updatePluginFilter();
						prepared = true;
						return true;
					default:
						log.debug("In default case, returning false");
						return false;
				}
			});
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
		overlayManager.remove(storageItemOverlay);

		navButton = null;
		panel = null;
	}

	/**
	 * Populate data sets/maps at initialization with items ID's for what is storable/bis for fast lookups
	 * @param enumClass StorableItem child see model.locations
	 * @param configKey	Key for Storage Location from Plugin Configuration
	 * @param bisCheck Flag if bis items exist for storage location
	 * @param <E> enumClass
	 */
	private static <E extends Enum<E> & StorableItem> void populateStorageItemIds(
			Class<E> enumClass, String configKey, boolean bisCheck)
	{
		for (E item : enumClass.getEnumConstants())
		{
			int itemId = item.getItemID();
			allStorableItems.add(itemId);
			allStorableItemsByCategory.computeIfAbsent(configKey, val -> new HashSet<>()).add(itemId);
			if (bisCheck && item.isBis())
			{
				bisItems.add(itemId);
			}
		}
	}

	/**
	 *	1. populateStorageItemIds for all items at each storage location
	 * 	2. Update the initial enabledItems
	 * 	Note: this function is called only once for setup purposes
	 */
	private void initializeItemSets()
	{
		// Get all item ids from each storage category. Those with 'true' contain BIS items and need to identify them.
		populateStorageItemIds(ArmourCase.class, WastedBankSpaceConfig.ARMOUR_CASE_CHECK_KEY, true);
		populateStorageItemIds(Bookcase.class, WastedBankSpaceConfig.HOUSE_BOOKCASE_CHECK_KEY, false);
		populateStorageItemIds(CapeRack.class, WastedBankSpaceConfig.CAPE_RACK_CHECK_KEY, true);
		populateStorageItemIds(ElnockInquisitor.class, WastedBankSpaceConfig.ELNOCK_INQUISITOR_CHECK_KEY, false);
		populateStorageItemIds(FancyDressBox.class, WastedBankSpaceConfig.FANCY_DRESS_BOX_KEY, false);
		populateStorageItemIds(FlamtaerBag.class, WastedBankSpaceConfig.FLAMTAER_BAG_CHECK_KEY, false);
		populateStorageItemIds(ForestryKit.class, WastedBankSpaceConfig.FORESTRY_KIT_CHECK_KEY, false);
		populateStorageItemIds(FossilStorage.class, WastedBankSpaceConfig.FOSSIL_STORAGE_CHECK_KEY, false);
		populateStorageItemIds(HuntsmansKit.class, WastedBankSpaceConfig.HUNTSMANS_KIT_SPACE_CHECK_KEY, false);
		populateStorageItemIds(MagicWardrobe.class, WastedBankSpaceConfig.MAGIC_WARDROBE_KEY, true);
		populateStorageItemIds(MasterScrollBook.class, WastedBankSpaceConfig.MASTER_SCROLL_BOOK_CHECK_KEY, false);
		populateStorageItemIds(MysteriousStranger.class, WastedBankSpaceConfig.MYSTERIOUS_STRANGER_CHECK_KEY, false);
		populateStorageItemIds(NightmareZone.class, WastedBankSpaceConfig.NIGHTMARE_ZONE_CHECK_KEY, false);
		populateStorageItemIds(PetHouse.class, WastedBankSpaceConfig.PET_HOUSE_SPACE_CHECK_KEY, false);
		populateStorageItemIds(SeedVault.class, WastedBankSpaceConfig.SEED_CHECK_KEY, false);
		populateStorageItemIds(SpiceRack.class, WastedBankSpaceConfig.SPICE_RACK_CHECK_KEY, false);
		populateStorageItemIds(SteelKeyRing.class, WastedBankSpaceConfig.STEEL_KEY_RING_CHECK_KEY, false);
		populateStorageItemIds(TackleBox.class, WastedBankSpaceConfig.TACKLE_BOX_CHECK_KEY, false);
		populateStorageItemIds(ToolLeprechaun.class, WastedBankSpaceConfig.TOOL_LEP_CHECK_KEY, false);
		populateStorageItemIds(ToyBox.class, WastedBankSpaceConfig.TOY_BOX_CHECK_KEY, false);
		populateStorageItemIds(TreasureChest.class, WastedBankSpaceConfig.CLUE_ITEM_CHECK_KEY, false);

		// Initialize the enabled item values
		for (StorageLocationEnabler sle : storageLocationEnablers)
		{
			for (StorableItem item : sle.GetStorableItemsIfEnabled())
			{
				if (ignoredItemIds.contains(item.getItemID())
					|| (item.isBis() && config.bisFilterEnabledCheck())
				)
				{
					continue;
				}
				enabledItems.add(item.getItemID());
			}
		}
	}


	public OverlayImage getOverlayImage()
	{
		return config.overlayImage();
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() == InventoryID.BANK.getId())
		{
			isBankOpen = true;
			log.debug("isBankOpen set to true");

			// check if bank contents have changed by utilizing hashcode of items array
			Item[] items = event.getItemContainer().getItems();
			int hash = Arrays.hashCode(items);
			if (hash == bankContentsHash)
			{
				log.debug("Bank contents hash matched ({}), not running updateItemsFromBankContainer()",
					bankContentsHash);
				return;
			}
			bankContentsHash = hash;
			updateItemsFromBankContainer(event.getItemContainer());
		}
		else
		{
			isBankOpen = false;
			log.debug("isBankOpen set to false");
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(WastedBankSpaceConfig.GROUP))
		{
			return;
		}

		String eventKey = event.getKey();
		log.debug("onConfigChanged key: {}", eventKey);

		// only attempt to run updating of enabledItems hashset if event key is one of the keys that affect enabledItems
		if (WastedBankSpaceConfig.getStorageLocationKeys().contains(eventKey))
		{
			boolean result;
			if ((event.getNewValue() == null) || event.getNewValue().equalsIgnoreCase("false"))
			{
				// then config group was disabled, so remove them from the enabledItems set
				result = enabledItems.removeAll(allStorableItemsByCategory.getOrDefault(eventKey, new HashSet<>()));
			}
			else
			{
				result = enabledItems.addAll(allStorableItemsByCategory.getOrDefault(eventKey, new HashSet<>()));
			}

			if (!result)
			{
				// enabledItems failed to update from the call above, indicating an issue with
				log.debug("onConfigChanged(): Attempted update of enabledItems hashset failed.\nEvent: {}\n", event);
			}
			updateWastedBankSpace();
		} else if(eventKey.equals(WastedBankSpaceConfig.FILTER_ENABLED_CHECK_KEY) || eventKey.equals(WastedBankSpaceConfig.BIS_FILTER_ENABLED_CHECK_KEY)){
			//Moderate jank to reforce filter and BIS check. TODO These should be separated into two functions
			processIgnoreListChanged(panel.getFilterdItemsText());
		} else {
			//Note this currently is hit when Overlay Image is changed but seems to have no effect on the software
			log.debug("onConfigChanged(): Event not handled! \nEvent: {}\n", event);
		}
	}

	@Subscribe
	public void onMenuOpened(final MenuOpened event)
	{
		// TODO: refactor this
		if (!client.isKeyPressed(KeyCode.KC_SHIFT) || !isBankOpen)
		{
			return;
		}

		final MenuEntry[] entries = event.getMenuEntries();

		for (int i = entries.length - 1; i >= 0; i--)
		{
			final MenuEntry entry = entries[i];
			final Widget w = entry.getWidget();

			if (w != null && (WidgetUtil.componentToInterface(w.getId()) == InterfaceID.BANK))
			{
				final int itemId = w.getItemId();
				final boolean flagged = !ignoredItemIds.contains(itemId);
				if (isItemStorable(itemId))
				{
					final MenuEntry parent = client.createMenuEntry(i)
						.setOption(flagged ? "Unflag Item" : "Flag Item")
						.setTarget(entry.getTarget())
						.setType(MenuAction.RUNELITE)
						.onClick(x -> toggleItemInIgnoreList(itemId));
				}
				return;
			}
		}
	}

	/**
	 * Toggles whether an item is ignored or not from list of items considered wasting space.
	 *
	 * @param id Item Id for the item being toggled for ignore.
	 */
	private void toggleItemInIgnoreList(int id)
	{
		if (ignoredItemIds.contains(id))
		{
			ignoredItemIds.remove(id);
			panel.removeFilteredItem(StorageLocations.getStorableItemName(id), id);
		}
		else
		{
			ignoredItemIds.add(id);
			panel.addFilteredItem(StorageLocations.getStorableItemName(id));
		}
	}

	private void updateItemsFromBankContainer(final ItemContainer c)
	{
		// Check if the contents have changed.
		if (c == null)
		{
			return;
		}

		itemsInBank.clear();
		for (Item item : c.getItems())
		{
			if (item.getId() == -1)
			{
				continue;
			}

			// Account for noted items, ignore placeholders.
			int itemId = item.getId();
			final ItemComposition itemComposition = itemManager.getItemComposition(itemId);
			if (itemComposition.getPlaceholderTemplateId() != -1)
			{
				continue;
			}

			itemsInBank.add(itemId);
		}

		updateWastedBankSpace();
	}


	/**
	 * Calculate and update the wasted space Panel via the following algorithm:
	 * Wasted Space = Bank Items Where Item is Storable in an enabled Storable Location AND Item is not Ignored by user
	 * 	Wasted Space = (itemsInBank interset enabledItems) - ignoredItemIds
	 */
	private void updateWastedBankSpace()
	{
		log.debug("running updateWastedBankSpace, getting every item after regenerating the enabled item list");

		// Recalculate storable items in the bank
		Set<Integer> prevStorableItemsInBank = new HashSet<>(storableItemsInBank);
		log.debug("prevStorableItemsInBank: {}", prevStorableItemsInBank);
		storableItemsInBank.clear();
		storableItemsInBank.addAll(itemsInBank);
		storableItemsInBank.retainAll(enabledItems);
		storableItemsInBank.removeAll(ignoredItemIds);
		log.debug("new storableItemsInBank: {}", storableItemsInBank);

		/* Update the panel UI only if there are changes to storable items in bank,
			except when empty. (empty will occur on startup, and in edge conditions where everything is disabled) */
		if (!storableItemsInBank.isEmpty() && prevStorableItemsInBank.equals(storableItemsInBank))
		{
			log.debug("storableItemsInBank matched previous, not updating panel");
			return;
		}
		SwingUtilities.invokeLater(() -> panel.setWastedBankSpaceItems(storableItemsInBank));
	}

	/**
	 * Function to be invoked when the Ignore list is modified by the player in the plugin's panel.
	 * @param filter
	 */
	private void processIgnoreListChanged(String filter)
	{
		log.debug("Starting processIgnoreListChanged() with filter: {}", filter);
		log.debug("Contents of StorageLocations.getItemNameMap(): {}", StorageLocations.getModifiedItemNameMap());

		List<String> ignoredItemList = Text.fromCSV(filter);
		log.debug("processIgnoreListChanged() - ignoredItemList: {}", ignoredItemList);

		ignoredItemIds.clear();
		if(config.filterEnabledCheck()) {
			for (String ignoredItem : ignoredItemList) {
				log.debug("processIgnoreListChanged - ignoredItem: {}", ignoredItem);
				String cleanedIgnoredItem = ignoredItem.replaceAll("\\s+", "");
				log.debug("Original value: {}, ModValue: {}", ignoredItem, cleanedIgnoredItem);

				// check if is only digits, i.e. an itemId
				if (cleanedIgnoredItem.matches("^\\d+$")) {
					ignoredItemIds.add(Integer.parseInt(ignoredItem));
				}
				// check if cleanedIgnoredItem has a corresponding itemId in the modifiedItemNameMap
				else {
					Integer itemId = StorageLocations.getStorableItemId(cleanedIgnoredItem);
					if (itemId != null) {
						ignoredItemIds.add(itemId);
					}
				}
			}
		}

		// Recalculate enabled items
		enabledItems.clear();
		for (StorageLocationEnabler sle : storageLocationEnablers)
		{
			for (StorableItem item : sle.GetStorableItemsIfEnabled())
			{
				if (!ignoredItemIds.contains(item.getItemID()) &&
					(!item.isBis() || !config.bisFilterEnabledCheck()))
				{
					enabledItems.add(item.getItemID());
				}
			}
		}
		updateWastedBankSpace();
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.ui;

import com.wastedbankspace.WastedBankSpaceConfig;
import com.wastedbankspace.model.StorableItem;
import com.wastedbankspace.model.StorageLocations;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.Text;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.Collectors;

@Slf4j
public class WastedBankSpacePanel extends PluginPanel
{
	private final WastedBankSpaceConfig config;
	private final JTextArea filtersEditor;
	private final JLabel numberOfItemsText;
	private final JList<String> data;
	private List<StorableItem> items;
	private Document filterDoc;
	private final Consumer<String> filterUiCallback;

	public WastedBankSpacePanel(Client client, TooltipManager tooltipManager, WastedBankSpaceConfig config,
								ItemManager itemManager, Consumer<String> filterUi,
								ScheduledExecutorService scheduledExecutorService)
	{
		super();
		this.config = config;
		this.filterUiCallback = filterUi;

		setBorder(new EmptyBorder(10, 10, 10, 10));
		setLayout(new GridBagLayout());
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;

		/* FILTERS */
		JLabel filtersLabel = new JLabel("Filters");

		filtersEditor = new JTextArea();
		String filterData = config.nonFlaggedItems();
		filtersEditor.setText(filterData);
		filtersEditor.setRows(6);
		filtersEditor.setLineWrap(true);
		filtersEditor.addFocusListener(new FocusListener()
		{
			private Future<?> updateFilterFuture = CompletableFuture.completedFuture(null);

			@Override
			public void focusGained(FocusEvent e)
			{

			}

			@Override
			public void focusLost(FocusEvent e)
			{
				this.updateFilterFuture.cancel(false);
				this.updateFilterFuture = scheduledExecutorService.schedule(
					WastedBankSpacePanel.this::updatePluginFilter,
					250,
					TimeUnit.MILLISECONDS);
			}

		});
		filtersEditor.setToolTipText("Format as comma separated values " +
			"\n Item ID, <OR> name of item ignore case");
		add(filtersLabel, c);
		c.gridy++;
		add(filtersEditor, c);
		c.gridy += 6;

		/* WASTED SLOTS PRINT */
		JLabel statsLabel = new JLabel("\nWasted Space Stats");
		numberOfItemsText = new JLabel("Please Visit Your Bank");

		data = new JList<String>()
		{
			public String getToolTipText(MouseEvent me)
			{
				int index = locationToIndex(me.getPoint());
				if (index > -1 && items != null)
				{
					return items.get(index).getLocation();
				}
				return null;
			}
		};
		data.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		data.setSelectedIndex(0);
		data.setVisibleRowCount(10);

		/* TIPS */
		final String tipTab = "    ";
		final String[] tips = new String[]{
			"\nTips",
			"1: Talk to the Wise Old Man",
			tipTab + "to remove Junk Quest Items",
			"2: Murky Matt combines ",
			tipTab + "jewelery charges",
			"3: Make item sets at the ge",
			"3.1: PHat and Mask can be combined",
			"4: Clue items in PoH (future update)",
			"5: Costumes, sets, and capes in PoH",
			"6: Store bolts in a bolt pouch"
		};


		add(numberOfItemsText, c);
		c.gridy++;
		add(data, c);
		c.gridy++;
		for (String tipString : tips)
		{
			add(new JLabel(tipString), c);
			c.gridy++;
		}

	}

	public void setWastedBankSpaceItems(Set<Integer> item_ids)
	{
		log.debug("setWastedBankSpaceItems() called with items: {}", item_ids);
		// use StorageLocations.getItemIdMap() to get an Int/StorableItem list and use items set for all keys to get values
		log.debug("in setWastedBankSpaceItems, provided item_ids: {}", item_ids);

		// assign to a previously-null this.items.
		this.items = item_ids.stream()
			.map(StorageLocations.getItemIdMap()::get)
			.collect(Collectors.toList());
		// Update number of items that can be moved
		numberOfItemsText.setText("Number of Items Wasting Space: " + this.items.size());
		data.setListData(new Vector<>(StorageLocations.itemIdsToString(item_ids)));
		this.updateUI();
	}

	public void updatePluginFilter()
	{
		try
		{
			Document doc = filtersEditor.getDocument();
			String data = doc.getText(0, doc.getLength());
			// Save data to config
			config.nonFlaggedItems(data);

			// Update the UI with changed filters
			filterUiCallback.accept(data);
		}
		catch (BadLocationException ex)
		{
			// Should not get here
		}
	}

	public void removeFilteredItem(String item, int id)
	{
		Document doc = filtersEditor.getDocument();
		try
		{
			String data = doc.getText(0, doc.getLength());
			List<String> filtersReadOnly = Text.fromCSV(data);
			List<String> filters = filtersReadOnly.stream().collect(Collectors.toList());
			List<Integer> pop = new ArrayList<>();

			for (int i = 0; i < filters.size(); i++)
			{
				if (item.equalsIgnoreCase(filters.get(i))
					|| Integer.toString(id).equalsIgnoreCase(filters.get(i)))
				{
					// Add to start to loop reverse for no issues when popping
					pop.add(0, i);
				}
			}

			for (Integer i : pop)
			{
				filters.remove((int) i);
			}

			filtersEditor.setText(String.join(",", filters));
			updatePluginFilter();
		}
		catch (BadLocationException ex)
		{
			// Should not get here
		}

	}

	public void addFilteredItem(String item)
	{
		try
		{
			// ID isn't needed as the tool only adds the name for ease of reading by user
			Document doc = filtersEditor.getDocument();
			String data = doc.getText(0, doc.getLength());
			filtersEditor.setText(data + (data.isEmpty() ? "" : ",") + item);
			updatePluginFilter();
		}
		catch (BadLocationException ex)
		{
			// Should not get here
		}
	}

	public String getFilterdItemsText(){
		return filtersEditor.getText();
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace.ui.overlay;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.inject.Inject;
import com.wastedbankspace.WastedBankSpacePlugin;
import com.wastedbankspace.model.StorableItem;
import com.wastedbankspace.model.StorageLocations;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Set;
import java.util.concurrent.TimeUnit;

@Slf4j
public class StorageItemOverlay extends WidgetItemOverlay
{
	private final Point point;

	private final Client client;
	private final WastedBankSpacePlugin plugin;
	private final ItemManager itemManager;
	private final TooltipManager tooltipManager;

	@Getter
	private final Cache<Integer, BufferedImage> wastedSpaceImages = CacheBuilder.newBuilder()
		.maximumSize(160)
		.expireAfterWrite(2, TimeUnit.MINUTES)
		.build();

	@Inject
	StorageItemOverlay(Client client, WastedBankSpacePlugin plugin, ItemManager itemManager, TooltipManager tooltipManager)
	{
		this.client = client;
		this.plugin = plugin;
		this.itemManager = itemManager;
		this.tooltipManager = tooltipManager;
		this.point = new Point();
		showOnBank();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
	{
		Set<Integer> items = plugin.getEnabledItems();

		if (items.isEmpty()
			|| itemWidget.getWidget().getParentId() != ComponentID.BANK_ITEM_CONTAINER
			|| !items.contains(itemId)
		)
		{
			return;
		}

		StorableItem item = StorageLocations.getStorableItem(itemId);
		Rectangle bounds = itemWidget.getCanvasBounds();

		if (bounds.contains(client.getMouseCanvasPosition().getX(), client.getMouseCanvasPosition().getY()))
		{
			Tooltip t = new Tooltip(ColorUtil.prependColorTag("Store @ " + item.getLocation(), new Color(238, 238, 238)));
			tooltipManager.add(t);
		}

		renderRibbon(graphics, plugin.getOverlayImage().getImage(), bounds.x + bounds.width - 12, bounds.y + bounds.height - 12);
	}

	private void renderRibbon(Graphics2D graphics, ImageComponent ribbon, int x, int y)
	{
		this.point.setLocation(x, y);
		ribbon.setPreferredLocation(this.point);
		ribbon.render(graphics);
	}
}
package com.wastedbankspace.ui.overlay;

import com.wastedbankspace.WastedBankSpacePlugin;
import lombok.Getter;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.util.ImageUtil;

@Getter
public enum OverlayImage {
    DEFAULT("Default", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/000-overlaySmoller.png"))),
    X("X", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/001-close.png"))),
    ARROW("Arrow", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/002-arrow-bottom.png"))),
    PUMPKIN("Spooky", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/003-pumpkin.png"))),
    TRASH_1("Trash 1", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/004-trash.png"))),
    TRASH_2("Trash 2", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/005-trash-bin.png"))),
    MAX("Max", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/006-maximize.png"))),
    W("W",new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/007-letter-w.png"))),
    ONE("Finger", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/008-one.png"))),
    PRETTY_1("Pretty 1", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/009-thai-pattern.png"))),
    PRETTY_2("Pretty 2", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/010-Pretty2.png"))),
    PRETTY_3("Pretty 3", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/011-Pretty3.png"))),
    DOT_BLUE("Blue Dot", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/012-Dot_Blue.png"))),
    DOT_RED("Red Dot", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/013-Dot_Red.png"))),
    DOT_GREEN("Green Dot", new ImageComponent(ImageUtil.loadImageResource(WastedBankSpacePlugin.class, "/014-Dot_green.png")));

    private final String name;
    private final ImageComponent image;

    OverlayImage(String name, ImageComponent image)
    {
        this.name = name;
        this.image = image;
    }

    @Override
    public String toString()
    {
        return getName();
    }

    public ImageComponent getImage()
    {
        return image;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Riley McGee
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.wastedbankspace;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WastedBankSpacePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WastedBankSpacePlugin.class);
		RuneLite.main(args);
	}
}
