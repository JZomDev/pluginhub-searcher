/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClanEventAttendancePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClanEventAttendancePlugin.class);
		RuneLite.main(args);
	}
}
/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance;

import java.awt.Color;

import com.ClanEventAttendance.config.ClanChannelType;
import com.ClanEventAttendance.config.OutputFormat;
import net.runelite.client.config.*;

@ConfigGroup(ClanEventAttendancePlugin.CONFIG_GROUP)
public interface ClanEventAttendanceConfig extends Config
{
	@ConfigSection(
			name = "General",
			description = "General configurations.",
			position = 1
	)
	String generalSection = "general";

	@ConfigSection(
			name = "Data Export",
			description = "How to export the data after the event is stopped.",
			position = 2
	)
	String dataExportSection = "dataExport";

	@ConfigSection(
			name = "User Interface",
			description = "User interface configurations.",
			position = 3
	)
	String userInterfaceSection = "userInterface";


	@ConfigItem(
		keyName = "filterType",
		name = "Event Chat",
		description = "The chat(s) an event is for.",
		section = generalSection,
		position = 0
	)
	default ClanChannelType filterType()
	{
		return ClanChannelType.CLAN_CHAT;
	}

	@ConfigItem(
			keyName = "presentThreshold",
			name = "Time Threshold",
			description = "The required time for a member to be consider part of the event expressed in seconds.",
			section = generalSection,
			position = 1
	)
	@Units(Units.SECONDS)
	default int presentThreshold()
	{
		return 60 * 10;
	}

	@ConfigItem(
			keyName = "lateMembers",
			name = "Include Late Members",
			description = "Enables keeping track of members who are late to an event.",
			section = generalSection,
			position = 2
	)
	default boolean lateMembers()
	{
		return true;
	}

	@ConfigItem(
			keyName = "lateThreshold",
			name = "Late Threshold",
			description = "The required time for a member to be consider late expressed in seconds.",
			section = generalSection,
			position = 3
	)
	@Units(Units.SECONDS)
	default int lateThreshold()
	{
		return 60 * 5;
	}

	@ConfigItem(
			keyName = "outputFormat",
			name = "Output Format",
			description = "What gets output to the user's clipboard when the copy button is pressed.",
			section = dataExportSection,
			position = 1
	)
	default OutputFormat outputFormat()
	{
		return OutputFormat.TEXT;
	}

	@ConfigItem(
			keyName = "discordMarkdown",
			name = "Discord Code Block",
			description = "Surrounds text attendance lists with a Discord multi-line code block.",
			section = dataExportSection,
			position = 2
	)
	default boolean discordMarkdown()
	{
		return true;
	}

	@ConfigItem(
			keyName = "textPrefix",
			name = "List Prefix",
			description = "Text that gets added as a prefix to attendance lists.",
			section = dataExportSection,
			position = 3
	)
	default String listPrefix()
	{
		return "Event name: \nHosted by: ";
	}

	@ConfigItem(
			keyName = "textSuffix",
			name = "List Suffix",
			description = "Text that gets added as a suffix to attendance lists.",
			section = dataExportSection,
			position = 4
	)
	default String listSuffix()
	{
		return "Thanks for coming!";
	}

	@ConfigItem(
			keyName = "presentColor",
			name = "Present Color",
			description = "The color used for present members in attendance lists.",
			section = userInterfaceSection,
			position = 0
	)
	default Color presentColor()
	{
		return Color.green;
	}

	@ConfigItem(
			keyName = "absentColor",
			name = "Absent Color",
			description = "The color used for absent members in attendance lists.",
			section = userInterfaceSection,
			position = 1
	)
	default Color absentColor()
	{
		return Color.red;
	}

	@ConfigItem(
			keyName = "blockCopyButtons",
			name = "Block Copy Button",
			description = "Blocks the copy button while an event is in progress.",
			section = userInterfaceSection,
			position = 2
	)
	default boolean blockCopyButton()
	{
		return true;
	}

	@ConfigItem(
			keyName = "topCopyButton",
			name = "Top Copy Button",
			description = "Places the copy button at the top instead of the bottom.",
			section = userInterfaceSection,
			position = 1
	)
	default boolean topCopyButton()
	{
		return true;
	}

	@ConfigItem(
			keyName = "confirmationMessages",
			name = "Confirmation Messages",
			description = "Enables confirmation messages when stopping and starting events.",
			section = userInterfaceSection,
			position = 2
	)
	default boolean confirmationMessages()
	{
		return true;
	}
}

/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance;

import com.ClanEventAttendance.config.OutputFormat;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.datatransfer.*;
import java.awt.image.BufferedImage;

@Slf4j
class ClanEventAttendancePanel extends PluginPanel
{
    private final JButton startButton = new JButton();
    private final JButton copyTextButton = new JButton();
    private final JLabel textLabel = new JLabel();
    private final JPanel topButtonsPanel = new JPanel();
    private final JPanel textPanel = new JPanel();
    private final JPanel bottomButtonsPanel = new JPanel();

    private static final String BTN_START_TEXT = "Start Event";
    private static final String BTN_STOP_TEXT = "Stop Event";
    private static final String BTN_COPY_TEXT_TEXT = "Copy to Clipboard";


    void init(ClanEventAttendanceConfig config, ClanEventAttendancePlugin plugin)
    {
        getParent().setLayout(new BorderLayout());
        getParent().add(this, BorderLayout.CENTER);

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 5));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        topButtonsPanel.setLayout(new BorderLayout(0, 10));
        topButtonsPanel.setBorder(new EmptyBorder(0, 0, 10, 0));

        startButton.setText(plugin.eventRunning ? BTN_STOP_TEXT : BTN_START_TEXT);
        startButton.setFocusable(false);

        topButtonsPanel.add(startButton, BorderLayout.CENTER);

        textPanel.setLayout(new BorderLayout());
        textPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        textPanel.setBorder(new EmptyBorder(0, 5, 0, 5));

        textLabel.setOpaque(false);
        textLabel.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        textLabel.setBorder(new EmptyBorder(5, 5, 5, 5));

        textPanel.add(textLabel, BorderLayout.NORTH);

        bottomButtonsPanel.setLayout(new BorderLayout());
        bottomButtonsPanel.setBorder(new EmptyBorder(10, 0, 0, 0));

        copyTextButton.setText(BTN_COPY_TEXT_TEXT);
        copyTextButton.setFocusable(false);

        add(topButtonsPanel, BorderLayout.NORTH);
        add(textPanel, BorderLayout.CENTER);
        if (config.topCopyButton())
        {
            topButtonsPanel.add(copyTextButton, BorderLayout.SOUTH);
        }
        else
        {
            bottomButtonsPanel.add(copyTextButton, BorderLayout.CENTER);
            add(bottomButtonsPanel, BorderLayout.SOUTH);
        }

        if (startButton.getActionListeners().length > 0)
        {
            startButton.removeActionListener(startButton.getActionListeners()[0]);
        }

        startButton.addActionListener(e ->
        {
            if (plugin.eventRunning)
            {
                if (config.confirmationMessages())
                {
                    final int result = JOptionPane.showOptionDialog(topButtonsPanel,
                            "Are you sure you want to TERMINATE the event?\nYou won't be able to restart it.",
                            "Are you sure?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                            null, new String[]{"Yes", "No"}, "No");

                    if(result == JOptionPane.YES_OPTION){
                        plugin.stopEvent();
                    }
                }
                else
                {
                    plugin.stopEvent();
                }
            }
            else
            {
                if (config.confirmationMessages())
                {
                    final int result = JOptionPane.showOptionDialog(topButtonsPanel,
                            "Are you sure you want to START a new event?\nThis will delete current data.",
                            "Are you sure?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                            null, new String[]{"Yes", "No"}, "No");

                    if (result == JOptionPane.YES_OPTION)
                    {
                        plugin.startEvent();
                    }
                }
                else
                {
                    plugin.startEvent();
                }
            }
        });

        copyTextButton.addActionListener(e ->
        {
            String text = textLabel.getText();
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

            if (config.outputFormat() == OutputFormat.PNG)
            {
                BufferedImage image = createImage(textLabel);
                TransferableImage trans = new TransferableImage(image);

                // Copied PNG image to clipboard
                clipboard.setContents(trans, null);
            }
            else
            {
                text = text.replaceAll("(<br/>)", "\n");
                text = text.replaceAll("<[^>]*>", "");
                StringSelection stringSelection = new StringSelection(text);

                // Copied text to clipboard
                clipboard.setContents(stringSelection, null);
            }
        });

        updatePanel(config, plugin);
    }

    void setText(String data)
    {
        textLabel.setText(data);
    }

    void updatePanel(ClanEventAttendanceConfig config, ClanEventAttendancePlugin plugin)
    {

        startButton.setText(plugin.eventRunning ? BTN_STOP_TEXT : BTN_START_TEXT);
        copyTextButton.setEnabled(!config.blockCopyButton() || !plugin.eventRunning);
    }

    public BufferedImage createImage(JLabel label) {

        int w = label.getWidth();
        int h = label.getHeight();
        BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = bi.createGraphics();
        label.paint(g);
        g.dispose();
        return bi;
    }

    private static class TransferableImage implements Transferable {

        Image i;

        public TransferableImage( Image i ) {
            this.i = i;
        }

        public Object getTransferData( DataFlavor flavor )
                throws UnsupportedFlavorException
        {
            if ( flavor.equals( DataFlavor.imageFlavor ) && i != null ) {
                return i;
            }
            else {
                throw new UnsupportedFlavorException( flavor );
            }
        }

        public DataFlavor[] getTransferDataFlavors() {
            DataFlavor[] flavors = new DataFlavor[ 1 ];
            flavors[ 0 ] = DataFlavor.imageFlavor;
            return flavors;
        }

        public boolean isDataFlavorSupported( DataFlavor flavor ) {
            DataFlavor[] flavors = getTransferDataFlavors();
            for (DataFlavor dataFlavor : flavors)
            {
                if (flavor.equals(dataFlavor))
                {
                    return true;
                }
            }

            return false;
        }
    }
}

/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance;

import com.ClanEventAttendance.config.ClanChannelType;
import com.ClanEventAttendance.config.OutputFormat;
import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.FriendsChatMember;
import net.runelite.api.Player;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.events.ClanChannelChanged;
import net.runelite.api.events.ClanMemberJoined;
import net.runelite.api.events.ClanMemberLeft;
import net.runelite.api.events.FriendsChatMemberJoined;
import net.runelite.api.events.FriendsChatMemberLeft;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.PlayerDespawned;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;

@Slf4j
@PluginDescriptor(
	name = "Clan Event Attendance",
	description = "Tracks clan attendance and time spent at events.",
	tags = {"clan", "event", "attendance", "time"}
)
public class ClanEventAttendancePlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private Client client;

	@Inject
	private ClanEventAttendanceConfig config;

	private ClanEventAttendancePanel panel;
	private NavigationButton navButton;

	private int eventStartedAt;
	private int eventStoppedAt;
	public boolean eventRunning;

	private final Map<String, MemberAttendance> attendanceBuffer = new TreeMap<>();

	private String presentColorText;
	private String absentColorText;

	private boolean CC_Valid;
	private boolean FC_Valid;

	private int ScanDelay;

	private final ArrayList<String> ClanMembers = new ArrayList<>();

	static final String CONFIG_GROUP = "ClanEventAttendance";

	@Provides
	ClanEventAttendanceConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClanEventAttendanceConfig.class);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch (event.getGameState())
		{
			case HOPPING:
			case LOGGING_IN:
				ScanDelay = 1;
		}
	}

	@Override
	protected void startUp()
	{
		panel = injector.getInstance(ClanEventAttendancePanel.class);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "panel_icon.png");

		navButton = NavigationButton.builder()
				.tooltip("Clan Event Attendance")
				.icon(icon)
				.priority(20)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);

		attendanceBuffer.clear();
		eventRunning = false;

		initConfig();
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);

		attendanceBuffer.clear();
		eventRunning = false;
	}

	public void startEvent()
	{
		//log.info("startEvent");

		attendanceBuffer.clear();

		eventStartedAt = client.getTickCount();
		eventRunning = true;

		ScanDelay = 1;

		panel.updatePanel(config, this);
		panel.setText("");
	}

	public void stopEvent()
	{
		//log.info("stopEvent");

		for (String key : attendanceBuffer.keySet())
		{
			compileTicks(key);
		}

		eventStoppedAt = client.getTickCount();
		eventRunning = false;

		panel.setText(generateTextData(true));
		panel.updatePanel(config, this);
	}

	private boolean IsValid(Player player, boolean validateCC, boolean validateFC)
	{
		if (validateCC && CC_Valid && player.isClanMember())
			return true;

		if (validateFC && FC_Valid && player.isFriendsChatMember())
			return true;

		return validateCC && CC_Valid && ClanMembers.contains(nameToKey(player.getName()));
	}

	@Subscribe
	public void onPlayerSpawned(PlayerSpawned event)
	{
		if (!eventRunning)
			return;

		final Player player = event.getPlayer();

		if (!IsValid(player, true, true))
			return;

		final String playerName = player.getName();

		//log.info("Player spawned: " + playerName);

		addPlayer(player);
		unpausePlayer(playerName);
	}

	@Subscribe
	public void onPlayerDespawned(PlayerDespawned event)
	{
		if (!eventRunning)
			return;

		final Player player = event.getPlayer();
		final String playerName = player.getName();
		final String playerKey = nameToKey(player.getName());

		//log.info("Player despawned: " + playerName);

		if (!attendanceBuffer.containsKey(playerKey))
			return;

		compileTicks(playerName);
		pausePlayer(playerName);
	}

	@Subscribe
	public void onClanChannelChanged(ClanChannelChanged event)
	{
		ClanMembers.clear();

		if (event.getClanChannel() == null)
		{
			//log.info("onClanChannelChanged, null");
			return;
		}
		//else
		//{
		//	log.info("onClanChannelChanged, " + event.getClanChannel());
		//}

		ScanDelay = 1;
	}

	@Subscribe
	public void onClanMemberJoined(ClanMemberJoined event)
	{
		if (!eventRunning)
			return;

		if (!CC_Valid)
			return;

		final ClanChannelMember member = event.getClanMember();
		ClanMembers.add(nameToKey(member.getName()));

		//log.info("Member joined: " + member.getName());

		if (member.getWorld() != client.getWorld())
			return;

		final String memberName = member.getName();


		for (final Player player : client.getPlayers())
		{
			if (player == null)
				continue;

			String playerName = player.getName();

			// If they're the one that joined the cc
			if (nameToKey(memberName).equals(nameToKey(playerName)))
			{
				addPlayer(player);
				unpausePlayer(playerName);
				break;
			}
		}
	}

	// Does not fire at all when I myself leave a cc
	@Subscribe
	public void onClanMemberLeft(ClanMemberLeft event)
	{
		if (!eventRunning)
			return;

		if (!CC_Valid)
			return;

		final ClanChannelMember member = event.getClanMember();
		ClanMembers.remove(nameToKey(member.getName()));

		//log.info("Member left: " + member.getName());

		if (member.getWorld() != client.getWorld())
			return;

		final String memberName = member.getName();

		final String playerKey = nameToKey(memberName);
		if (!attendanceBuffer.containsKey(playerKey))
			return;

		MemberAttendance ma = attendanceBuffer.get(playerKey);

		if (IsValid(ma.member, false, true))
			return;

		compileTicks(memberName);
		pausePlayer(memberName);
	}

	// Fires for every online member when I myself join a cc (including myself, after everyone else)
	@Subscribe
	public void onFriendsChatMemberJoined(FriendsChatMemberJoined event)
	{
		if (!eventRunning)
			return;

		if (!FC_Valid)
			return;

		final FriendsChatMember member = event.getMember();

		if (member.getWorld() != client.getWorld())
			return;

		final String memberName = member.getName();

		for (final Player player : client.getPlayers())
		{
			if (player == null)
				continue;

			String playerName = player.getName();

			// If they're the one that joined the fc
			if (nameToKey(memberName).equals(nameToKey(playerName)))
			{
				addPlayer(player);
				unpausePlayer(playerName);
				break;
			}
		}
	}

	// Does not fire at all when I myself leave a cc
	@Subscribe
	public void onFriendsChatMemberLeft(FriendsChatMemberLeft event)
	{
		if (!eventRunning)
			return;

		if (!FC_Valid)
			return;

		final FriendsChatMember member = event.getMember();

		if (member.getWorld() != client.getWorld())
			return;

		final String memberName = member.getName();

		final String playerKey = nameToKey(memberName);
		if (!attendanceBuffer.containsKey(playerKey))
			return;

		MemberAttendance ma = attendanceBuffer.get(playerKey);

		if (IsValid(ma.member, true, false))
			return;

		compileTicks(memberName);
		pausePlayer(memberName);
	}

	private void addPlayer(Player player)
	{
		final String playerKey = nameToKey(player.getName());

		// if player is not in the attendance buffer, add it
		if (!attendanceBuffer.containsKey(playerKey))
		{
			MemberAttendance memberAttendance = new MemberAttendance(player,
					client.getTickCount() - eventStartedAt,
					client.getTickCount(),
					0,
					false);
			attendanceBuffer.put(playerKey, memberAttendance);
		}
	}

	private void pausePlayer(String playerName)
	{
		final String playerKey = nameToKey(playerName);

		if (!attendanceBuffer.containsKey(playerKey))
			return;

		//log.info("Player paused: " + playerName);

		MemberAttendance ma = attendanceBuffer.get(playerKey);
		ma.isPresent = false;
	}

	private void unpausePlayer(String playerName)
	{
		final String playerKey = nameToKey(playerName);

		if (!attendanceBuffer.containsKey(playerKey))
			return;

		MemberAttendance ma = attendanceBuffer.get(playerKey);

		//log.info("Player unpaused: " + playerName);

		if (ma.isPresent)
			return;

		ma.isPresent = true;
		ma.tickActivityStarted = client.getTickCount();
	}

	private void compileTicks(String playerName)
	{
		final String playerKey = nameToKey(playerName);

		if (!attendanceBuffer.containsKey(playerKey))
			return;

		MemberAttendance ma = attendanceBuffer.get(playerKey);

		if (!ma.isPresent)
			return;

		// Add elapsed tick to the total
		ma.ticksTotal += client.getTickCount() - ma.tickActivityStarted;
		ma.tickActivityStarted = client.getTickCount();
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (!eventRunning)
			return;

		if (ScanDelay == 0)
		{
			ClanMembers.clear();

			if (client.getClanChannel() != null)
			{
				client.getClanChannel().getMembers().forEach(member -> ClanMembers.add(nameToKey(member.getName())));
			}

			for (final Player player : client.getPlayers())
			{
				if (player == null || !IsValid(player, true, true))
					continue;

				addPlayer(player);
				unpausePlayer(player.getName());
			}

			//log.info("Scanned " + attendanceBuffer.size() + " surrounding players");
		}

		if (ScanDelay >= 0)
		{
			--ScanDelay;
		}

		for (String key : attendanceBuffer.keySet())
		{
			compileTicks(key);
		}

		// Update the text area with the collected data
		panel.setText(generateTextData(false));
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(CONFIG_GROUP))
		{
			initConfig();
		}
	}

	private void initConfig()
	{
		//log.info("initConfig");

		CC_Valid = config.filterType() == ClanChannelType.CLAN_CHAT || config.filterType() == ClanChannelType.BOTH_CHATS;
		FC_Valid = config.filterType() == ClanChannelType.FRIENDS_CHAT || config.filterType() == ClanChannelType.BOTH_CHATS;

		presentColorText = "#" + Integer.toHexString(config.presentColor().getRGB()).substring(2);
		absentColorText = "#" + Integer.toHexString(config.absentColor().getRGB()).substring(2);

		if (!attendanceBuffer.isEmpty())
		{
			panel.setText(generateTextData(!eventRunning));
		}

		panel.removeAll();
		panel.init(config, this);
	}

	private String generateTextData(boolean finalDisplay)
	{
		//log.info("generateTextData");

		StringBuilder activeSB = new StringBuilder();
		StringBuilder inactiveSB = new StringBuilder();

		// Split the members into 2 lists
		for (String key : attendanceBuffer.keySet())
		{
			MemberAttendance ma = attendanceBuffer.get(key);

			if (ticksToSeconds(ma.ticksTotal) < config.presentThreshold())
				inactiveSB.append(memberAttendanceToString(ma));
			else
				activeSB.append(memberAttendanceToString(ma));
		}

		StringBuilder attendanceString = new StringBuilder();
		attendanceString.append("<html><body><pre>");

		if (finalDisplay)
		{
			if (!config.listPrefix().isEmpty())
			{
				attendanceString.append(config.listPrefix().replaceAll("(\r\n|\n\r|\r|\n)", "<br/>"));
				attendanceString.append("<br/><br/>");
			}
		}

		// ex: Event duration: 18:36
		attendanceString.append("Event Duration: ");
		final int durationTargetTick = eventRunning ? client.getTickCount() : eventStoppedAt;
		attendanceString.append(timeFormat(ticksToSeconds(durationTargetTick - eventStartedAt)));
		attendanceString.append("<br/><br/>");

		if (finalDisplay && config.discordMarkdown() && (config.outputFormat() == OutputFormat.TEXT))
			attendanceString.append("```<br/>");

		if(activeSB.length() > 0)
		{
			attendanceString.append("Present Members<br/>");
			attendanceString.append("------------------------------<br/>");
			if (config.lateMembers())
			{
				attendanceString.append(String.format("%-12s | %-6s | %-6s<br/>", "Name", "Time", "Late"));
			}
			else
			{
				attendanceString.append(String.format("%-12s | %-6s<br/>", "Name", "Time"));
			}

			attendanceString.append(activeSB);
		}

		if(inactiveSB.length() > 0)
		{
			// Add spacing with previous list if any
			if (activeSB.length() > 0)
				attendanceString.append("<br/>");

			// ex: Below time threshold (03:00)
			attendanceString.append("Below Threshold (");
			attendanceString.append(timeFormat(config.presentThreshold()));
			attendanceString.append(")<br/>");

			attendanceString.append("------------------------------<br/>");
			if (config.lateMembers())
			{
				attendanceString.append(String.format("%-12s | %-6s | %-6s<br/>", "Name", "Time", "Late"));
			}
			else
			{
				attendanceString.append(String.format("%-12s | %-6s<br/>", "Name", "Time"));
			}

			attendanceString.append(inactiveSB);
		}

		if (finalDisplay && config.discordMarkdown() && (config.outputFormat() == OutputFormat.TEXT))
			attendanceString.append("```");

		if (finalDisplay)
		{
			if (!config.listSuffix().isEmpty())
			{
				attendanceString.append("<br/><br/>");
				attendanceString.append(config.listSuffix().replaceAll("(\r\n|\n\r|\r|\n)", "<br/>"));
			}
		}

		attendanceString.append("</pre></body></html>");

		return attendanceString.toString();
	}

	private String memberAttendanceToString(MemberAttendance ma)
	{
		boolean isLate = ticksToSeconds(ma.ticksLate) > config.lateThreshold();
		//white
		String lineColor = "#FFFFFF";
		String ret;

		if(eventRunning)
			lineColor = ma.isPresent ? presentColorText : absentColorText;

		// config.lateMembers()
		// ex: JoRouss      | 06:46  | 01:07  // isLate
		// ex: SomeDude     | 236:46 | -      // !isLate

		// !config.lateMembers()
		// ex: JoRouss      | 06:46

		if (config.lateMembers())
		{
			ret = String.format("%s%-12s | %-6s | %-6s%s<br/>",
					"<font color='" + lineColor + "'>",
					ma.member.getName(),
					timeFormat(ticksToSeconds(ma.ticksTotal)),
					isLate ? timeFormat(ticksToSeconds(ma.ticksLate)) : "-",
					"</font>");
		}
		else
		{
			ret = String.format("%s%-12s | %-6s%s<br/>",
					"<font color='" + lineColor + "'>",
					ma.member.getName(),
					timeFormat(ticksToSeconds(ma.ticksTotal)),
					"</font>");
		}

		return ret;
	}

	private String timeFormat(int totalSeconds)
	{
		long minute = TimeUnit.SECONDS.toMinutes(totalSeconds);
		long second = TimeUnit.SECONDS.toSeconds(totalSeconds) - (TimeUnit.SECONDS.toMinutes(totalSeconds) * 60);

		if (minute > 99)
		{
			//ex: 118:26
			return String.format("%03d:%02d", minute, second);
		}

		//ex: 18:26
		return String.format("%02d:%02d", minute, second);
	}

	private int ticksToSeconds(int ticks)
	{
		return (int)(ticks * 0.6f);
	}

	private String nameToKey(String playerName)
	{
		return Text.toJagexName(playerName).toLowerCase();
	}
}

/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum ClanChannelType
{
	FRIENDS_CHAT("Friends Chat", 0),
	CLAN_CHAT("Clan Chat", 1),
	BOTH_CHATS("Both Chats", 2);

	private final String name;
	private final int value;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum OutputFormat
{
    PNG("PNG ", 0),
    TEXT("Text", 1);

    private final String name;
    private final int value;

    @Override
    public String toString()
    {
        return name;
    }
}

/*
BSD 2-Clause License

Copyright (c) 2021, Jonathan Rousseau <https://github.com/JoRouss>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ClanEventAttendance;

import lombok.AllArgsConstructor;
import net.runelite.api.Player;

@AllArgsConstructor
class MemberAttendance
{
    public Player member;
    public Integer ticksLate;
    public Integer tickActivityStarted;
    public Integer ticksTotal;
    public boolean isPresent;
}
