package com.afkdimmer;

import com.google.inject.Provides;
import javax.inject.Inject;

import net.runelite.api.Constants;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "Afk Dimmer",
		description = "Dims the screen when you are afk."
)

public class AfkDimmerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private AfkDimmerConfig config;

	@Inject
	private AfkDimmerOverlay overlay;

	@Inject
	public OverlayManager overlayManager;

	@Provides
	AfkDimmerConfig provideConfig(ConfigManager configManager){
		return configManager.getConfig((AfkDimmerConfig.class));
	}
	public boolean afkDimmerEnabled;

	@Override
	protected void startUp() throws Exception
	{
		afkDimmerEnabled = afkCheck();
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameTick(GameTick event){
		afkDimmerEnabled = afkCheck();
	}

	public boolean afkCheck(){
		boolean playerIdle = client.getLocalPlayer() != null
				&& client.getLocalPlayer().getAnimation() == -1; // Standing still animation codes
		if (config.idleUndim() && playerIdle){
			return false;
		}

		final int idleClientTicks = Math.min(client.getKeyboardIdleTicks(), client.getMouseIdleTicks());
		int afkTicks = (int) Math.ceil(config.afkTime()*1000 / Constants.CLIENT_TICK_LENGTH);
        return idleClientTicks > afkTicks;
	}
}

package com.afkdimmer;

import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import java.awt.*;

public class AfkDimmerOverlay extends Overlay {

    public final AfkDimmerConfig config;
    public final AfkDimmerPlugin plugin;
    public final Client client;

    @Inject
    public AfkDimmerOverlay(AfkDimmerPlugin plugin, AfkDimmerConfig config, Client client) {

        super(plugin);

        this.plugin = plugin;
        this.config = config;
        this.client = client;

        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGH);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);

    }

    private float currentAlpha = 0f;
    public Dimension render(Graphics2D graphics) {


        Widget welcome = client.getWidget(InterfaceID.WelcomeScreen.PLAY);
        if (welcome != null)
        {
            return null; // skip drawing if news screen is up
        }


        // Shorthand if-else statement, dim when true
        float targetAlpha = plugin.afkDimmerEnabled
                ? config.dimmerStrength()/100f
                : 0f;

        // Smoothly move currentAlpha towards targetAlpha
        float speed = 0.06f; // lower = slower fade
        if (Math.abs(currentAlpha - targetAlpha) > 0.01f)
        {
            currentAlpha += (targetAlpha - currentAlpha) * speed;
        }
        else
        {
            currentAlpha = targetAlpha;
        }

        // Draw the dimmer overlay
        graphics.setColor(new Color(0, 0, 0, currentAlpha));
        graphics.fill(client.getCanvas().getBounds());

        return null;
    }

}
package com.afkdimmer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup(AfkDimmerConfig.GROUP)
public interface AfkDimmerConfig extends Config
{
	String GROUP = "afkDimmer";
	@ConfigItem(
		position = 1,
		keyName = "dimmerStrength",
		name = "Dimmer Strength",
		description = "Sets the strength of the dimmer."
	)
	@Range(
			min = 0,
			max = 100
	)

	default int dimmerStrength(){
		return 50;
	}

	@ConfigItem(
			position = 2,
			keyName = "afkTime",
			name = "Afk Time",
			description = "Time(s) spent afk before dimming."
		)
	@Range(
			min = 0,
			max = 100
	)

	default int afkTime(){
		return 3;
	}

	@ConfigItem(
			position = 3,
			keyName = "idleUndim",
			name = "Undim while idle",
			description = "Undim the screen when you are idle."
	)

	default boolean idleUndim(){
		return false;
	}

}

package com.afkdimmer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AfkDimmerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AfkDimmerPlugin.class);
		RuneLite.main(args);
	}
}
