package trevor.raidpointsoverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RaidPointsOverlayPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RaidPointsOverlayPlugin.class);
		RuneLite.main(args);
	}
}
package trevor.raidpointsoverlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("raidpointsoverlay")
public interface RaidsPointsConfig extends Config
{
	@ConfigItem(
		keyName = "teamSize",
		name = "Display team size",
		description = "Display team size on the overlay if team size is greater than 1."
	)
	default boolean showTeamSize()
	{
		return true;
	}

	@ConfigItem(
		keyName = "raidsTimer",
		name = "Display elapsed raid time",
		description = "Display elapsed raid time"
	)
	default boolean raidsTimer()
	{
		return true;
	}

	@ConfigItem(
		keyName = "raidsPointsPercent",
		name = "Display personal points percent",
		description = "Displays the personal points percents of the total points"
	)
	default boolean raidsPointsPercent()
	{
		return true;
	}

	@ConfigItem(
		keyName = "raidsUniqueChance",
		name = "Display the chance of an unique",
		description = "Displays the chance that a single unique could be in raid loot"
	)
	default UniqueConfigOptions raidsUniqueChance()
	{
		return UniqueConfigOptions.BOTH;
	}
}

package trevor.raidpointsoverlay;

public enum UniqueConfigOptions
{
	OFF,
	PERSONAL_CHANCE,
	TEAM_CHANCE,
	BOTH
}

/*
 * Copyright (c) 2018, Kamiel
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package trevor.raidpointsoverlay;

import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

public class RaidsPointsOverlay extends OverlayPanel
{
	private static final DecimalFormat POINTS_FORMAT = new DecimalFormat("#,###");
	private static final DecimalFormat POINTS_PERCENT_FORMAT = new DecimalFormat(" (##0.00%)");
	private static final DecimalFormat UNIQUE_FORMAT = new DecimalFormat("#0.00%");

	private Client client;
	private RaidPointsOverlayPlugin plugin;
	private RaidsPointsConfig config;
	private TooltipManager tooltipManager;

	@Inject
	private RaidsPointsOverlay(Client client,
							   RaidPointsOverlayPlugin plugin,
							   RaidsPointsConfig config,
							   TooltipManager tooltipManager)
	{
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.tooltipManager = tooltipManager;
		setPosition(OverlayPosition.TOP_RIGHT);
		setPriority(OverlayPriority.HIGH);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isInRaidChambers())
		{
			return null;
		}

		int totalPoints = client.getVar(Varbits.TOTAL_POINTS);
		int personalPoints = client.getVar(Varbits.PERSONAL_POINTS);
		int partySize = client.getVar(Varbits.RAID_PARTY_SIZE);
		FontMetrics metrics = graphics.getFontMetrics();

		panelComponent.getChildren().add(LineComponent.builder()
			.left("Total:")
			.right(POINTS_FORMAT.format(totalPoints))
			.build());

		String personalPointsPercent = "";
		if (config.raidsPointsPercent() && partySize > 1)
		{
			personalPointsPercent += totalPoints > 0 ?
				POINTS_PERCENT_FORMAT.format((double) personalPoints / totalPoints) :
				POINTS_PERCENT_FORMAT.format(0);
		}
		String personalPointsString = POINTS_FORMAT.format(personalPoints) + personalPointsPercent;

		panelComponent.getChildren().add(LineComponent.builder()
			.left(client.getLocalPlayer().getName() + ":")
			.right(personalPointsString)
			.build());

		if (config.raidsTimer())
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Time:")
				.right(plugin.getTime())
				.build());
		}

		if (partySize > 1 && config.showTeamSize())
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Party size:")
				.right(String.valueOf(partySize))
				.build());
		}

		if (config.raidsUniqueChance() != UniqueConfigOptions.OFF)
		{
			// 0.675 is rate at which the droprate switches to other roll and doesn't go up for a single drop per wiki
			double personalUniqueChance = Math.min((double) personalPoints / 867500, 0.657);
			String personalUniqueChanceStr = UNIQUE_FORMAT.format(personalUniqueChance);

			double totalUniqueChance = Math.min((double) totalPoints / 867500, 0.657);
			String totalUniqueChanceStr = UNIQUE_FORMAT.format(totalUniqueChance);

			String uniqueChance;
			if (config.raidsUniqueChance() == UniqueConfigOptions.BOTH)
			{
				uniqueChance = personalUniqueChanceStr;

				if(partySize > 1)
				{
					uniqueChance += " (" + totalUniqueChanceStr + ")";
				}
			}
			else if (config.raidsUniqueChance() == UniqueConfigOptions.PERSONAL_CHANCE)
			{
				uniqueChance = personalUniqueChanceStr;
			}
			else
			{
				uniqueChance = totalUniqueChanceStr;
			}

			panelComponent.getChildren().add(LineComponent.builder()
				.left("Unique:")
				.right(uniqueChance)
				.build());
		}

		final Rectangle bounds = this.getBounds();
		if (bounds.getX() > 0)
		{
			final Point mousePosition = client.getMouseCanvasPosition();

			if (bounds.contains(mousePosition.getX(), mousePosition.getY()))
			{
				String tooltip = plugin.getTooltip();

				if (tooltip != null)
				{
					tooltipManager.add(new Tooltip(tooltip));
				}
			}
		}
		return super.render(graphics);
	}
}

package trevor.raidpointsoverlay;

import com.google.inject.Provides;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@PluginDescriptor(
	name = "Raid Points Overlay"
)
public class RaidPointsOverlayPlugin extends Plugin
{
	private static final Pattern LEVEL_COMPLETE_REGEX = Pattern.compile("(.+) level complete! Duration: ([0-9:]+)");
	private static final Pattern RAID_COMPLETE_REGEX = Pattern.compile("Congratulations - your raid is complete! Duration: ([0-9:]+)");

	private static final int RAID_TIMER_VARBIT = 6386;
	private static final int RAID_STATE_VARBIT = 5425;
	private static final int RAID_BANK_REGION = 4919;
	private static final int RAID_POINT_WIDGET_SCRIPT = 1510;

	@Inject
	private Client client;

	@Inject
	private RaidsPointsOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClientThread clientThread;

	@Getter
	private boolean inRaidChambers;

	private int raidState;
	private int timerVarb;
	private int upperTime = -1;
	private int middleTime = -1;
	private int lowerTime = -1;
	private int raidTime = -1;

	@Getter
	private String tooltip;

	@Provides
	RaidsPointsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RaidsPointsConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);

		clientThread.invoke(() -> setHidden(true));
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);

		clientThread.invoke(() -> setHidden(false));
		reset();
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		inRaidChambers = client.getVar(Varbits.IN_RAID) == 1;
		raidState = client.getVarbitValue(RAID_STATE_VARBIT);
		timerVarb = client.getVarbitValue(RAID_TIMER_VARBIT);
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() != RAID_POINT_WIDGET_SCRIPT || !inRaidChambers)
		{
			return;
		}

		Widget widget = client.getWidget(WidgetInfo.RAIDS_POINTS_INFOBOX);

		if (widget == null || widget.isHidden())
		{
			return;
		}

		widget.setHidden(true);
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		if (timerVarb > 0 && raidState < 5)
		{
			//mimic the script when the widget is hidden
			client.runScript(2289, 0, 0, 0);
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (inRaidChambers && event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION)
		{
			String message = Text.removeTags(event.getMessage());
			Matcher matcher;

			matcher = LEVEL_COMPLETE_REGEX.matcher(message);
			if (matcher.find())
			{
				String floor = matcher.group(1);
				int time = timeToSeconds(matcher.group(2));
				if (floor.equals("Upper"))
				{
					upperTime = time;
				}
				else if (floor.equals("Middle"))
				{
					middleTime = time;
				}
				else if (floor.equals("Lower"))
				{
					lowerTime = time;
				}
				updateTooltip();
			}

			matcher = RAID_COMPLETE_REGEX.matcher(message);
			if (matcher.find())
			{
				raidTime = timeToSeconds(matcher.group(1));
				updateTooltip();
			}
		}
	}

	@Subscribe
	private void onGameStateChanged(GameStateChanged event)
	{
		// lazy way to reset
		if (event.getGameState() == GameState.LOGGED_IN
			&& client.getLocalPlayer() != null
			&& client.getLocalPlayer().getWorldLocation().getRegionID() == RAID_BANK_REGION)
		{
			reset();
		}
	}

	private void setHidden(boolean shouldHide)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		inRaidChambers = client.getVar(Varbits.IN_RAID) == 1;

		if (!inRaidChambers)
		{
			return;
		}

		final Widget widget = client.getWidget(WidgetInfo.RAIDS_POINTS_INFOBOX);
		if (widget != null)
		{
			widget.setHidden(shouldHide);
		}
	}

	public void reset()
	{
		upperTime = -1;
		middleTime = -1;
		lowerTime = -1;
		raidTime = -1;
		tooltip = null;
	}

	private int timeToSeconds(String s)
	{
		int seconds = -1;
		String[] split = s.split(":");
		if (split.length == 2)
		{
			seconds = Integer.parseInt(split[0]) * 60 + Integer.parseInt(split[1]);
		}
		if (split.length == 3)
		{
			seconds = Integer.parseInt(split[0]) * 3600 + Integer.parseInt(split[1]) * 60 + Integer.parseInt(split[2]);
		}
		return seconds;
	}

	private String secondsToTime(int seconds)
	{
		StringBuilder builder = new StringBuilder();
		if (seconds >= 3600)
		{
			builder.append((int)Math.floor(seconds / 3600) + ":");
		}
		seconds %= 3600;
		if (builder.toString().equals(""))
		{
			builder.append((int)Math.floor(seconds / 60));
		}
		else
		{
			builder.append(StringUtils.leftPad(String.valueOf((int)Math.floor(seconds / 60)), 2, '0'));
		}
		builder.append(":");
		seconds %= 60;
		builder.append(StringUtils.leftPad(String.valueOf(seconds), 2, '0'));
		return builder.toString();
	}

	private void updateTooltip()
	{
		StringBuilder builder = new StringBuilder();
		if (upperTime == -1)
		{
			tooltip = null;
			return;
		}
		builder.append("Upper level: " + secondsToTime(upperTime));
		if (middleTime == -1)
		{
			if (lowerTime == -1)
			{
				tooltip = builder.toString();
				return;
			}
			else
			{
				builder.append("</br>Lower level: " + secondsToTime(lowerTime - upperTime));
			}
		}
		else
		{
			builder.append("</br>Middle level: " + secondsToTime(middleTime - upperTime));
			if (lowerTime == -1)
			{
				tooltip = builder.toString();
				return;
			}
			else
			{
				builder.append("</br>Lower level: " + secondsToTime(lowerTime - middleTime));
			}
		}
		if (raidTime == -1)
		{
			tooltip = builder.toString();
			return;
		}
		builder.append("</br>Olm: " + secondsToTime(raidTime - lowerTime));
		tooltip = builder.toString();
	}

	String getTime()
	{
		int seconds = (int) Math.floor(client.getVarbitValue(RAID_TIMER_VARBIT) * .6);
		return secondsToTime(seconds);
	}
}

