package com.currentspellbook;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("com.currentspellbook")
public interface CurrentSpellbookConfig extends Config
{
	@ConfigItem(
		keyName = "fontSize",
		name = "Font size",
		description = "How big the overlay text should be"
	)
	default int fontSize()
	{
		return 32;
	}

	@ConfigItem(
			position = 2,
			keyName = "changeColors",
			name = "Change font colors",
			description = "Whether or not the font color should change according to the spellbook"
	)
	default boolean changeColors()
	{
		return true;
	}
}

package com.currentspellbook;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Current Spellbook"
)
public class CurrentSpellbookPlugin extends Plugin
{
	private static final int SPELLBOOK_VARBIT = 4070;

	@Inject
	private Client client;

	@Inject
	private CurrentSpellbookConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private CurrentSpellbookOverlay currentSpellbookOverlay;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(currentSpellbookOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(currentSpellbookOverlay);
	}

	@Provides
	CurrentSpellbookConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CurrentSpellbookConfig.class);
	}

	public int getCurrentSpellbook() {
		return client.getVarbitValue(SPELLBOOK_VARBIT);
	}
}

package com.currentspellbook;

import javax.inject.Inject;
import java.awt.*;

import net.runelite.api.Client;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.util.ColorUtil;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class CurrentSpellbookOverlay extends OverlayPanel {
    private final com.currentspellbook.CurrentSpellbookConfig config;
    private final CurrentSpellbookPlugin plugin;

    @Inject
    private CurrentSpellbookOverlay(Client client, CurrentSpellbookConfig config, CurrentSpellbookPlugin plugin)
    {
        super(plugin);
        this.config = config;
        this.plugin = plugin;

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Current spellbook overlay."));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        int spellbook = plugin.getCurrentSpellbook();
        final Color strColor = getTextColor(spellbook);
        graphics.setFont(new Font(FontManager.getRunescapeFont().getName(), Font.PLAIN, config.fontSize()));

        String str = ColorUtil.prependColorTag(getName(spellbook), strColor);

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Current spellbook:\n" + str)
                .leftColor(strColor)
                .build());

        return super.render(graphics);
    }

    private String getName(int spellbook)
    {
        switch (spellbook)
        {
            case 0: return "Standard";
            case 1: return "Ancient";
            case 2: return "Lunar";
            case 3: return "Arceuus";
            default: return "Unknown";
        }
    }

    private Color getTextColor(int spellbook)
    {
        if (!config.changeColors())
        {
            return Color.WHITE;
        }
        switch (spellbook)
        {
            case 0: return new Color(196, 169, 132);
            case 1: return new Color(169, 132, 196);
            case 2: return Color.WHITE;
            case 3: return Color.CYAN;
            default: return Color.RED;
        }
    }
}

package com.currentspellbook;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CurrentSpellbookPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CurrentSpellbookPlugin.class);
		RuneLite.main(args);
	}
}
