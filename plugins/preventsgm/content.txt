package com.preventsgm;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.events.*;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.Arrays;

import static com.preventsgm.IsTeleportItem.isWearableParam1;
import static com.preventsgm.IsTeleportItem.itemIsTeleportItem;

@Slf4j
@PluginDescriptor(
        name = "Prevent Misclicks",
        description = "Prevents certain missclicks in spellbooks, such as superglass make if you don't "
                + "have exactly 18 buckets of sand and 3 giant seaweed. Formerly known as 'Prevent superglass make'")
public class PreventSGMPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private PreventSGMConfig config;

    // These numbers were found with print debugging
    private static final int WITHDRAW = 786445;
    private static final int DEPOSIT_ALL = 786476;
    private static final int DEPOSIT = 983043;
    private static final int SUPERGLASS_MAKE = 14286969;
    private static final int DEMONIC_OFFERING = 14287025;
    private static final int SINISTER_OFFERING = 14287026;
    private static final int WEARABLE_TELEPORT = 25362449;

    private int amountOfSeaweed = 0;
    private int amountOfSand = 0;
    private boolean sinister = false;
    private boolean demonic = false;

    @Override
    protected void startUp() throws Exception {
    }

    @Override
    protected void shutDown() throws Exception {
        if (client == null) {
            return;
        }
        toggle(client.getWidget(SUPERGLASS_MAKE), true);
        toggle(client.getWidget(DEMONIC_OFFERING), true);
        toggle(client.getWidget(SINISTER_OFFERING), true);
    }

    @Subscribe
    public void onPlayerSpawned(PlayerSpawned event) {
        if (event.getPlayer().equals(client.getLocalPlayer())) {
            Widget inventory = client.getWidget(ComponentID.INVENTORY_CONTAINER);
            Widget[] items = inventory.getChildren();
            amountOfSand = (int) Arrays.stream(items).filter(item -> item.getItemId() == ItemID.BUCKET_SAND).count();
            amountOfSeaweed = (int) Arrays.stream(items).filter(item -> item.getItemId() == ItemID.GIANT_SEAWEED).count();
            int amountBones = (int) Arrays.stream(items).filter(item -> isSinisterBone(item.getItemId())).count();
            int amountAshes = (int) Arrays.stream(items).filter(item -> isDemonicAsh(item.getItemId())).count();
            demonic = amountAshes >= config.demonic();
            sinister = amountBones >= config.sinister();
        }
    }

    @Subscribe
    public void onBeforeRender(BeforeRender event) {
        if (client == null) {
            return;
        }
        if (config.seaweedToggle()) {
            toggle(client.getWidget(SUPERGLASS_MAKE), checkSeaweedAndSand());
        }
        if (config.demonicToggle()) {
            toggle(client.getWidget(DEMONIC_OFFERING), demonic);
        }
        if (config.sinisterToggle()) {
            toggle(client.getWidget(SINISTER_OFFERING), sinister);
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        int inventoryContainerId = 93;
        if (event.getContainerId() == inventoryContainerId) {
            Item[] items = event.getItemContainer().getItems();
            updateBonesAndAshes(items);
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (client == null) {
            return;
        }
        Widget inventory = client.getWidget(ComponentID.INVENTORY_CONTAINER);
        if (inventory == null) {
            return;
        }
        Widget[] items = inventory.getChildren();
        int amountBones = (int) Arrays.stream(items).filter(item -> isSinisterBone(item.getItemId())).count();
        int amountAshes = (int) Arrays.stream(items).filter(item -> isDemonicAsh(item.getItemId())).count();
        demonic = amountAshes >= config.demonic();
        sinister = amountBones >= config.sinister();
    }
    /*
     * This is a pretty silly way of doing this, but
     * onMenuOptionClicked gives the fastest response
     * and so has to be used if you want it to work
     * being tick perfect (that is to say, pressing
     * the superglass make spell before your inventory
     * has updated)
     */
    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event) {
        if (config.sulphurTeleportToggle()) {
            if (client == null) {
            } else {
                Widget inventory = client.getWidget(ComponentID.INVENTORY_CONTAINER);
                if (inventory == null) {
                    return;
                }
                Widget[] items = inventory.getChildren();
                if (items == null) {
                    return;
                }
                Widget[] inventoryFiltered = Arrays.stream(items).filter(item -> item.getItemId() == ItemID.SULPHUROUS_ESSENCE).toArray(Widget[]::new);
                int amountSulphurAsh = inventoryFiltered[0].getItemQuantity();
                if (amountSulphurAsh >= config.sulphurAmountToggle()) {
                    //I haven't figured out a good way to detect if someone is trying to teleport, so this will have to do
                    String menu = event.getMenuOption();
                    boolean specialCases = itemIsTeleportItem(event.getItemId()) && !menu.equals("Wear") && !menu.equals("Equip");
                    specialCases = specialCases && !menu.equals("Drop") && !menu.equals("Remove") && !menu.equals("Examine") && !menu.equals("Check");
                    specialCases = specialCases && !menu.equals("Use") && !menu.equals("Take") && !menu.equals("Trim");
                    if (event.getItemId() == -1) {
                        specialCases = specialCases || isWearableParam1(event.getParam1()) && !menu.equals("Remove") && !menu.equals("Examine") && !menu.equals("Check");
                    }
                    if (specialCases || event.getMenuOption().contains("Teleport") || event.getMenuTarget().contains("Teleport")) {
                        event.consume();
                        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "[Prevent Misclicks] Teleporting disabled since you have " + amountSulphurAsh + " sulphurous essence in your inventory!", null);
                    }
                }
            }
        }
        switch (event.getParam1()) {
            case WITHDRAW:
                if (config.disableWithdraw()) {
                    if (amountOfSand == config.sand() && event.getItemId() == ItemID.BUCKET_SAND) {
                        event.consume();
                        return;
                    } else if (amountOfSeaweed == config.seaweed() && event.getItemId() == ItemID.GIANT_SEAWEED) {
                        event.consume();
                        return;
                    }
                }
                updateInventory(event.getItemId());
                break;
            case DEPOSIT:
                if (event.getItemId() == ItemID.GIANT_SEAWEED) {
                    amountOfSeaweed -= 1;
                } else if (event.getItemId() == ItemID.BUCKET_SAND) {
                    amountOfSand = 0;
                }
                break;
            case DEPOSIT_ALL:
            case SUPERGLASS_MAKE:
                amountOfSand = 0;
                amountOfSeaweed = 0;
                break;
            default:
        }
    }

    private void updateInventory(int itemID) {
        Widget bank = client.getWidget(ComponentID.BANK_CONTAINER);
        if (bank == null || bank.isHidden()) {
            return;
        }
        if (itemID == ItemID.GIANT_SEAWEED) {
            amountOfSeaweed += 1;
        } else if (itemID == ItemID.BUCKET_SAND) {
            amountOfSand += config.sand();
        }
    }

    private boolean checkSeaweedAndSand() {
        return amountOfSeaweed == config.seaweed() && amountOfSand == config.sand();
    }

    private boolean isSinisterBone(int id) {
        switch (id) {
            case ItemID.BONES:
            case ItemID.MM_NORMAL_MONKEY_BONES:
            case ItemID.BAT_BONES:
            case ItemID.DRAGON_BONES_SUPERIOR:
            case ItemID.ZOGRE_ANCESTRAL_BONES_OURG:
            case ItemID.DAGANNOTH_KING_BONES:
            case ItemID.HYDRA_BONES:
            case ItemID.ZOGRE_ANCESTRAL_BONES_RAURG:
            case ItemID.LAVA_DRAGON_BONES:
            case ItemID.ZOGRE_ANCESTRAL_BONES_FAYG:
            case ItemID.DRAKE_BONES:
            case ItemID.WYVERN_BONES:
            case ItemID.DRAGON_BONES:
            case ItemID.WYRM_BONES:
            case ItemID.BABYDRAGON_BONES:
            case ItemID.TBWT_BEAST_BONES:
            case ItemID.ZOGRE_BONES:
            case ItemID.BABYWYRM_BONES:
            case ItemID.TBWT_JOGRE_BONES:
            case ItemID.BIG_BONES:
                return true;
        }
        return false;
    }

    private boolean isDemonicAsh(int id) {
        switch (id) {
            case ItemID.FIENDISH_ASHES:
            case ItemID.VILE_ASHES:
            case ItemID.MALICIOUS_ASHES:
            case ItemID.ABYSSAL_ASHES:
            case ItemID.INFERNAL_ASHES:
                return true;
        }
        return false;
    }

    private void updateBonesAndAshes(Item[] items) {
        int amountOfBones = (int) Arrays.stream(items).filter(item -> isSinisterBone(item.getId())).count();
        int amountOfAshes = (int) Arrays.stream(items).filter(item -> isDemonicAsh(item.getId())).count();
        sinister = amountOfBones >= config.sinister();
        demonic = amountOfAshes >= config.demonic();
    }

    private void toggle(Widget spell, boolean check) {
        if (spell == null) {
            return;
        }
        if (check) {
            spell.setOpacity(0);
            spell.setAction(0, "Cast");
        }
        else {
            spell.setOpacity(128);
            spell.setAction(0, "");
        }
    }

    @Provides
    PreventSGMConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(PreventSGMConfig.class);
    }
}

package com.preventsgm;

import net.runelite.client.config.*;

@ConfigGroup("preventsgm")
public interface PreventSGMConfig extends Config {
    @ConfigSection(
            name = "Superglass Make",
            description = "Toggles for superglass make",
            position = 0
    )
    String sgmSection = "Superglass Make";

    @ConfigSection(
            name = "Offerings",
            description = "Toggles for demonic and sinister offering",
            position = 1
    )
    String offeringSection = "Offerings";

    @ConfigSection(
            name = "Sulphurous essence",
            description = "Toggles for behaviour of sulphur essence",
            position = 2
    )
    String sulphurSection = "Sulphur";

    @ConfigItem(
            keyName = "seaweedToggle",
            name = "Disable superglass",
            description = "Disable superglass make given the conditions given below",
            section = sgmSection,
            position = 0

    )
    default boolean seaweedToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "seaweed",
            name = "Amount of seaweed",
            description = "The amount of seaweed needed to allow the casting of superglass make",
            section = sgmSection,
            position = 1
    )
    @Range(
            min = 1,
            max = 3
    )
    default int seaweed() {
        return 3;
    }

    @ConfigItem(
            keyName = "sand",
            name = "Amount of sand",
            description = "The amount of sand needed to allow the casting of superglass make",
            section = sgmSection,
            position = 2
    )
    @Range(
            min = 6,
            max = 18
    )
    default int sand() {
        return 18;
    }

    @ConfigItem(
            keyName = "disableWithdraw",
            name = "Disable withdraw given condition",
            description = "Disables the withdraw button on sand and seaweed if you have the given amount of sand and seaweed",
            section = sgmSection,
            position = 3
    )
    default boolean disableWithdraw() {
        return true;
    }

    @ConfigItem(
            keyName = "demonicToggle",
            name = "Disable demonic offering",
            description = "Disable demonic offering given the conditions given below",
            section = offeringSection,
            position = 0
    )
    default boolean demonicToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "demonic",
            name = "Amount of ashes",
            description = "Minimum amount of ashes needed to cast demonic offering",
            section = offeringSection,
            position = 1
    )
    @Range(
            min = 1,
            max = 3
    )
    default int demonic() {
        return 3;
    }

    @ConfigItem(
            keyName = "sinisterToggle",
            name = "Disable sinister offering",
            description = "Disable sinister offering given the conditions given below",
            section = offeringSection,
            position = 2
    )
    default boolean sinisterToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "sinister",
            name = "Amount of bones",
            description = "Minimum amount of bones needed to cast sinister offering",
            section = offeringSection,
            position = 3
    )
    @Range(
            min = 1,
            max = 3
    )
    default int sinister() {
        return 3;
    }

    @ConfigItem(
            keyName = "sulphurTeleportToggle",
            name = "Disable teleports",
            description = "Disables teleport items/spells if you have sulphur essence in your inventory",
            section = sulphurSection,
            position = 0

    )
    default boolean sulphurTeleportToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "sulphurAmountToggle",
            name = "Amount of sulphur essence",
            description = "At how many essences should teleports be disabled?",
            section = sulphurSection,
            position = 1

    )
    @Range(
            min = 1
    )
    default int sulphurAmountToggle() {
        return 1;
    }
}

package com.preventsgm;

import net.runelite.api.gameval.ItemID;

public class IsTeleportItem {

    public static boolean isWearableParam1 (int param1) {
        switch (param1) {
            case 25362447: //Helmet
            case 25362448: //Cape
            case 25362457: //Pocket slot
            case 25362456: //Ring
            case 25362449: //Necklace
            case 25362455: //Boots
            case 25362452: //Off hand
            case 25362450: //Main hand
            case 25362454: //Gloves
            case 25362451: //Chest plate
            case 25362453: //legs
                return true;
        }
        return false;
    }

    /**
     *
     * Sigh... I have no clue how to otherwise determine the player is trying to teleport if it doesn't say in the item's name or menu action "Teleport"
     * @param itemID the items id
     * @return true if it's an item you use to teleport, otherwise false
     */
    public static boolean itemIsTeleportItem (int itemID) {
        switch (itemID) {
            case ItemID.SKILLCAPE_AD_HOOD:
            case ItemID.AMULET_OF_GLORY_INF:
            case ItemID.AMULET_OF_GLORY_6:
            case ItemID.AMULET_OF_GLORY_5:
            case ItemID.AMULET_OF_GLORY_4:
            case ItemID.AMULET_OF_GLORY_3:
            case ItemID.AMULET_OF_GLORY_2:
            case ItemID.AMULET_OF_GLORY_1:
            case ItemID.TRAIL_AMULET_OF_GLORY_6:
            case ItemID.TRAIL_AMULET_OF_GLORY_5:
            case ItemID.TRAIL_AMULET_OF_GLORY_4:
            case ItemID.TRAIL_AMULET_OF_GLORY_3:
            case ItemID.TRAIL_AMULET_OF_GLORY_2:
            case ItemID.TRAIL_AMULET_OF_GLORY_1:
            case ItemID.TELETAB_LUMBRIDGE :
            case ItemID.ARDY_CAPE_EASY:
            case ItemID.ARDY_CAPE_MEDIUM:
            case ItemID.ARDY_CAPE_HARD:
            case ItemID.ARDY_CAPE_ELITE:
            case ItemID.SKILLCAPE_MAX:
            case ItemID.HG_QUETZALWHISTLE_BASIC:
            case ItemID.HG_QUETZALWHISTLE_ENHANCED:
            case ItemID.HG_QUETZALWHISTLE_PERFECTED:
            case ItemID.BOOK_OF_THE_DEAD:
            case ItemID.BURNING_AMULET_5:
            case ItemID.BURNING_AMULET_4:
            case ItemID.BURNING_AMULET_3:
            case ItemID.BURNING_AMULET_2:
            case ItemID.BURNING_AMULET_1:
            case ItemID.VARLAMORE_MINING_TELEPORT:
            case ItemID.VARLAMORE_MINING_TELEPORT_1:
            case ItemID.VARLAMORE_MINING_TELEPORT_2:
            case ItemID.VARLAMORE_MINING_TELEPORT_3:
            case ItemID.VARLAMORE_MINING_TELEPORT_4:
            case ItemID.VARLAMORE_MINING_TELEPORT_5:
            case ItemID.VARLAMORE_MINING_TELEPORT_25:
            case ItemID.CAMULET:
            case ItemID.CHRONICLE:
            case ItemID.JEWL_BRACELET_OF_COMBAT_6:
            case ItemID.JEWL_BRACELET_OF_COMBAT_5:
            case ItemID.JEWL_BRACELET_OF_COMBAT_4:
            case ItemID.JEWL_BRACELET_OF_COMBAT_3:
            case ItemID.JEWL_BRACELET_OF_COMBAT_2:
            case ItemID.JEWL_BRACELET_OF_COMBAT_1:
            case ItemID.SKILLCAPE_CONSTRUCTION:
            case ItemID.SKILLCAPE_CRAFTING:
            case ItemID.SKILLCAPE_FARMING:
            case ItemID.PRIF_TELEPORT_CRYSTAL:
            case ItemID.DESERT_AMULET_EASY:
            case ItemID.DESERT_AMULET_MEDIUM:
            case ItemID.DESERT_AMULET_HARD:
            case ItemID.DESERT_AMULET_ELITE:
            case ItemID.NECKLACE_OF_DIGSITE_5:
            case ItemID.NECKLACE_OF_DIGSITE_4:
            case ItemID.NECKLACE_OF_DIGSITE_3:
            case ItemID.NECKLACE_OF_DIGSITE_2:
            case ItemID.NECKLACE_OF_DIGSITE_1:
            case ItemID.DORGESH_TELEPORT_ARTIFACT:
            case ItemID.DRAKANS_MEDALLION:
            case ItemID.ECTOPHIAL:
            case ItemID.MAGIC_STRUNG_LYRE_INFINITE:
            case ItemID.MAGIC_STRUNG_LYRE_5:
            case ItemID.MAGIC_STRUNG_LYRE_4:
            case ItemID.MAGIC_STRUNG_LYRE_3:
            case ItemID.MAGIC_STRUNG_LYRE_2:
            case ItemID.MAGIC_STRUNG_LYRE:
            case ItemID.LUMBRIDGE_RING_EASY:
            case ItemID.LUMBRIDGE_RING_MEDIUM:
            case ItemID.LUMBRIDGE_RING_HARD:
            case ItemID.LUMBRIDGE_RING_ELITE:
            case ItemID.SKILLCAPE_FISHING:
            case ItemID.FREMENNIK_BOOTS_EASY:
            case ItemID.FREMENNIK_BOOTS_MEDIUM:
            case ItemID.FREMENNIK_BOOTS_HARD:
            case ItemID.FREMENNIK_BOOTS_ELITE:
            case ItemID.NECKLACE_OF_MINIGAMES_8:
            case ItemID.NECKLACE_OF_MINIGAMES_7:
            case ItemID.NECKLACE_OF_MINIGAMES_6:
            case ItemID.NECKLACE_OF_MINIGAMES_5:
            case ItemID.NECKLACE_OF_MINIGAMES_4:
            case ItemID.NECKLACE_OF_MINIGAMES_3:
            case ItemID.NECKLACE_OF_MINIGAMES_2:
            case ItemID.NECKLACE_OF_MINIGAMES_1:
            case ItemID.CA_OFFHAND_EASY:
            case ItemID.CA_OFFHAND_MEDIUM:
            case ItemID.CA_OFFHAND_HARD:
            case ItemID.CA_OFFHAND_ELITE:
            case ItemID.CA_OFFHAND_MASTER:
            case ItemID.CA_OFFHAND_GRANDMASTER:
            case ItemID.GIANTSOUL_AMULET_CHARGED:
            case ItemID.ALUFT_SEED_POD:
            case ItemID.MM2_ROYAL_SEED_POD:
            case ItemID.HALLOWED_TELEPORT:
            case ItemID.SKILLCAPE_HUNTING:
            case ItemID.WEISS_TELEPORT_BASALT:
            case ItemID.SEERS_HEADBAND_EASY:
            case ItemID.SEERS_HEADBAND_MEDIUM:
            case ItemID.SEERS_HEADBAND_HARD:
            case ItemID.SEERS_HEADBAND_ELITE:
            case ItemID.ATJUN_GLOVES_EASY:
            case ItemID.ATJUN_GLOVES_MED:
            case ItemID.ATJUN_GLOVES_HARD:
            case ItemID.ATJUN_GLOVES_ELITE:
            case ItemID.MAGIC_WHISTLE:
            case ItemID.BOOKOFSCROLLS_CHARGED:
            case ItemID.MORYTANIA_LEGS_EASY:
            case ItemID.MORYTANIA_LEGS_MEDIUM:
            case ItemID.MORYTANIA_LEGS_HARD:
            case ItemID.MORYTANIA_LEGS_ELITE:
            case ItemID.MUSIC_CAPE:
            case ItemID.MYTHICAL_CAPE:
            case ItemID.PENDANT_OF_ATES:
            case ItemID.PHARAOHS_SCEPTRE:
            case ItemID.SKILLCAPE_QP:
            case ItemID.ZEAH_BLESSING_EASY:
            case ItemID.ZEAH_BLESSING_MEDIUM:
            case ItemID.ZEAH_BLESSING_HARD:
            case ItemID.ZEAH_BLESSING_ELITE:
            case ItemID.RING_OF_DUELING_8:
            case ItemID.RING_OF_DUELING_7:
            case ItemID.RING_OF_DUELING_6:
            case ItemID.RING_OF_DUELING_5:
            case ItemID.RING_OF_DUELING_4:
            case ItemID.RING_OF_DUELING_3:
            case ItemID.RING_OF_DUELING_2:
            case ItemID.RING_OF_DUELING_1:
            case ItemID.RING_OF_LIFE:
            case ItemID.RING_OF_RETURNING_5:
            case ItemID.RING_OF_RETURNING_4:
            case ItemID.RING_OF_RETURNING_3:
            case ItemID.RING_OF_RETURNING_2:
            case ItemID.RING_OF_RETURNING_1:
            case ItemID.RING_OF_ELEMENTS:
            case ItemID.RING_OF_WEALTH:
            case ItemID.RING_OF_WEALTH_I:
            case ItemID.JEWL_NECKLACE_OF_SKILLS_6:
            case ItemID.JEWL_NECKLACE_OF_SKILLS_5:
            case ItemID.JEWL_NECKLACE_OF_SKILLS_4:
            case ItemID.JEWL_NECKLACE_OF_SKILLS_3:
            case ItemID.JEWL_NECKLACE_OF_SKILLS_2:
            case ItemID.JEWL_NECKLACE_OF_SKILLS_1:
            case ItemID.SOS_SKULL_SCEPTRE_IMBUED:
            case ItemID.SOS_SKULL_SCEPTRE:
            case ItemID.SLAYER_RING_8:
            case ItemID.SLAYER_RING_7:
            case ItemID.SLAYER_RING_6:
            case ItemID.SLAYER_RING_5:
            case ItemID.SLAYER_RING_4:
            case ItemID.SLAYER_RING_3:
            case ItemID.SLAYER_RING_2:
            case ItemID.SLAYER_RING_1:
            case ItemID.SLAYER_RING_ETERNAL:
            case ItemID.STRONGHOLD_TELEPORT_BASALT:
            case ItemID.SKILLCAPE_STRENGTH:
            case ItemID.WESTERN_BANNER_EASY:
            case ItemID.WESTERN_BANNER_MEDIUM:
            case ItemID.WESTERN_BANNER_HARD:
            case ItemID.WESTERN_BANNER_ELITE:
            case ItemID.WILDERNESS_SWORD_EASY:
            case ItemID.WILDERNESS_SWORD_MEDIUM:
            case ItemID.WILDERNESS_SWORD_HARD:
            case ItemID.WILDERNESS_SWORD_ELITE:
            case ItemID.XERIC_TALISMAN:
                return true;
        }
        return false;
    }
}

package com.preventsgm;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PreventSGMTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(PreventSGMPlugin.class);
        RuneLite.main(args);
    }
}

