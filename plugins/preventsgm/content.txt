package com.preventsgm;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.Arrays;

@Slf4j
@PluginDescriptor(
        name = "Prevent Misclicks",
        description = "Prevents certain missclicks in spellbooks, such as superglass make if you don't "
                + "have exactly 18 buckets of sand and 3 giant seaweed. Formerly known as 'Prevent superglass make'")
public class PreventSGMPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private PreventSGMConfig config;

    // These numbers were found with print debugging
    private static final int WITHDRAW = 786445;
    private static final int DEPOSIT_ALL = 786476;
    private static final int DEPOSIT = 983043;
    private static final int SUPERGLASS_MAKE = 14286969;
    private static final int DEMONIC_OFFERING = 14287025;
    private static final int SINISTER_OFFERING = 14287026;

    private int amountOfSeaweed = 0;
    private int amountOfSand = 0;
    private boolean sinister = false;
    private boolean demonic = false;

    @Override
    protected void startUp() throws Exception {
    }

    @Override
    protected void shutDown() throws Exception {
        if (client == null) {
            return;
        }
        toggle(client.getWidget(SUPERGLASS_MAKE), true);
        toggle(client.getWidget(DEMONIC_OFFERING), true);
        toggle(client.getWidget(SINISTER_OFFERING), true);
    }

    @Subscribe
    public void onPlayerSpawned(PlayerSpawned event) {
        if (event.getPlayer().equals(client.getLocalPlayer())) {
            Widget inventory = client.getWidget(ComponentID.INVENTORY_CONTAINER);
            Widget[] items = inventory.getChildren();
            amountOfSand = (int) Arrays.stream(items).filter(item -> item.getItemId() == ItemID.BUCKET_SAND).count();
            amountOfSeaweed = (int) Arrays.stream(items).filter(item -> item.getItemId() == ItemID.GIANT_SEAWEED).count();
            int amountBones = (int) Arrays.stream(items).filter(item -> isSinisterBone(item.getItemId())).count();
            int amountAshes = (int) Arrays.stream(items).filter(item -> isDemonicAsh(item.getItemId())).count();
            demonic = amountAshes >= config.demonic();
            sinister = amountBones >= config.sinister();
        }
    }

    @Subscribe
    public void onBeforeRender(BeforeRender event) {
        if (client == null) {
            return;
        }
        if (config.seaweedToggle()) {
            toggle(client.getWidget(SUPERGLASS_MAKE), checkSeaweedAndSand());
        }
        if (config.demonicToggle()) {
            toggle(client.getWidget(DEMONIC_OFFERING), demonic);
        }
        if (config.sinisterToggle()) {
            toggle(client.getWidget(SINISTER_OFFERING), sinister);
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        int inventoryContainerId = 93;
        if (event.getContainerId() == inventoryContainerId) {
            Item[] items = event.getItemContainer().getItems();
            updateBonesAndAshes(items);
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (client == null) {
            return;
        }
        Widget inventory = client.getWidget(ComponentID.INVENTORY_CONTAINER);
        if (inventory == null) {
            return;
        }
        Widget[] items = inventory.getChildren();
        int amountBones = (int) Arrays.stream(items).filter(item -> isSinisterBone(item.getItemId())).count();
        int amountAshes = (int) Arrays.stream(items).filter(item -> isDemonicAsh(item.getItemId())).count();
        demonic = amountAshes >= config.demonic();
        sinister = amountBones >= config.sinister();
    }

    /*
     * This is a pretty silly way of doing this, but
     * onMenuOptionClicked gives the fastest response
     * and so has to be used if you want it to work
     * being tick perfect (that is to say, pressing
     * the superglass make spell before your inventory
     * has updated)
     */
    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event) {
        switch (event.getParam1()) {
            case WITHDRAW:
                if (config.disableWithdraw()) {
                    if (amountOfSand == config.sand() && event.getItemId() == ItemID.BUCKET_SAND) {
                        event.consume();
                        return;
                    } else if (amountOfSeaweed == config.seaweed() && event.getItemId() == ItemID.GIANT_SEAWEED) {
                        event.consume();
                        return;
                    }
                }
                updateInventory(event.getItemId());
                break;
            case DEPOSIT:
                if (event.getItemId() == ItemID.GIANT_SEAWEED) {
                    amountOfSeaweed -= 1;
                } else if (event.getItemId() == ItemID.BUCKET_SAND) {
                    amountOfSand = 0;
                }
                break;
            case DEPOSIT_ALL:
            case SUPERGLASS_MAKE:
                amountOfSand = 0;
                amountOfSeaweed = 0;
                break;
            default:
        }
    }

    private void updateInventory(int itemID) {
        Widget bank = client.getWidget(ComponentID.BANK_CONTAINER);
        if (bank == null || bank.isHidden()) {
            return;
        }
        if (itemID == ItemID.GIANT_SEAWEED) {
            amountOfSeaweed += 1;
        } else if (itemID == ItemID.BUCKET_SAND) {
            amountOfSand += config.sand();
        }
    }

    private boolean checkSeaweedAndSand() {
        return amountOfSeaweed == config.seaweed() && amountOfSand == config.sand();
    }

    private boolean isSinisterBone(int id) {
        switch (id) {
            case ItemID.BONES:
            case ItemID.MM_NORMAL_MONKEY_BONES:
            case ItemID.BAT_BONES:
            case ItemID.DRAGON_BONES_SUPERIOR:
            case ItemID.ZOGRE_ANCESTRAL_BONES_OURG:
            case ItemID.DAGANNOTH_KING_BONES:
            case ItemID.HYDRA_BONES:
            case ItemID.ZOGRE_ANCESTRAL_BONES_RAURG:
            case ItemID.LAVA_DRAGON_BONES:
            case ItemID.ZOGRE_ANCESTRAL_BONES_FAYG:
            case ItemID.DRAKE_BONES:
            case ItemID.WYVERN_BONES:
            case ItemID.DRAGON_BONES:
            case ItemID.WYRM_BONES:
            case ItemID.BABYDRAGON_BONES:
            case ItemID.TBWT_BEAST_BONES:
            case ItemID.ZOGRE_BONES:
            case ItemID.BABYWYRM_BONES:
            case ItemID.TBWT_JOGRE_BONES:
            case ItemID.BIG_BONES:
                return true;
        }
        return false;
    }

    private boolean isDemonicAsh(int id) {
        switch (id) {
            case ItemID.FIENDISH_ASHES:
            case ItemID.VILE_ASHES:
            case ItemID.MALICIOUS_ASHES:
            case ItemID.ABYSSAL_ASHES:
            case ItemID.INFERNAL_ASHES:
                return true;
        }
        return false;
    }

    private void updateBonesAndAshes(Item[] items) {
        int amountOfBones = (int) Arrays.stream(items).filter(item -> isSinisterBone(item.getId())).count();
        int amountOfAshes = (int) Arrays.stream(items).filter(item -> isDemonicAsh(item.getId())).count();
        sinister = amountOfBones >= config.sinister();
        demonic = amountOfAshes >= config.demonic();
    }

    private void toggle(Widget spell, boolean check) {
        if (spell == null) {
            return;
        }
        if (check) {
            spell.setOpacity(0);
            spell.setAction(0, "Cast");
        }
        else {
            spell.setOpacity(128);
            spell.setAction(0, "");
        }
    }

    @Provides
    PreventSGMConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(PreventSGMConfig.class);
    }
}

package com.preventsgm;

import net.runelite.client.config.*;

@ConfigGroup("preventsgm")
public interface PreventSGMConfig extends Config {
    @ConfigSection(
            name = "Superglass Make",
            description = "Toggles for superglass make",
            position = 0
    )
    String sgmSection = "Superglass Make";

    @ConfigSection(
            name = "Offerings",
            description = "Toggles for demonic and sinister offering",
            position = 1
    )
    String offeringSection = "Offerings";

    @ConfigItem(
            keyName = "seaweedToggle",
            name = "Disable superglass",
            description = "Disable superglass make given the conditions given below",
            section = sgmSection,
            position = 0

    )
    default boolean seaweedToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "seaweed",
            name = "Amount of seaweed",
            description = "The amount of seaweed needed to allow the casting of superglass make",
            section = sgmSection,
            position = 1
    )
    @Range(
            min = 1,
            max = 3
    )
    default int seaweed() {
        return 3;
    }

    @ConfigItem(
            keyName = "sand",
            name = "Amount of sand",
            description = "The amount of sand needed to allow the casting of superglass make",
            section = sgmSection,
            position = 2
    )
    @Range(
            min = 6,
            max = 18
    )
    default int sand() {
        return 18;
    }

    @ConfigItem(
            keyName = "disableWithdraw",
            name = "Disable withdraw given condition",
            description = "Disables the withdraw button on sand and seaweed if you have the given amount of sand and seaweed",
            section = sgmSection,
            position = 3
    )
    default boolean disableWithdraw() {
        return true;
    }

    @ConfigItem(
            keyName = "demonicToggle",
            name = "Disable demonic offering",
            description = "Disable demonic offering given the conditions given below",
            section = offeringSection,
            position = 0
    )
    default boolean demonicToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "demonic",
            name = "Amount of ashes",
            description = "Minimum amount of ashes needed to cast demonic offering",
            section = offeringSection,
            position = 1
    )
    @Range(
            min = 1,
            max = 3
    )
    default int demonic() {
        return 3;
    }

    @ConfigItem(
            keyName = "sinisterToggle",
            name = "Disable sinister offering",
            description = "Disable sinister offering given the conditions given below",
            section = offeringSection,
            position = 2
    )
    default boolean sinisterToggle() {
        return true;
    }

    @ConfigItem(
            keyName = "sinister",
            name = "Amount of bones",
            description = "Minimum amount of bones needed to cast sinister offering",
            section = offeringSection,
            position = 3
    )
    @Range(
            min = 1,
            max = 3
    )
    default int sinister() {
        return 3;
    }
}

package com.preventsgm;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PreventSGMTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(PreventSGMPlugin.class);
        RuneLite.main(args);
    }
}

