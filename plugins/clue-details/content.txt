/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import net.runelite.api.coords.WorldPoint;

public class Zone
{
	private final int x;
	private final int y;

	public Zone(WorldPoint wp)
	{
		x = wp.getX() / 8;
		y = wp.getY() / 8;
	}

	public int maxDistanceTo(Zone zone)
	{
		return Math.max(Math.abs(zone.x - x), Math.abs(zone.y - y));
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.util.stream.Collectors;
import lombok.Getter;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;

import java.util.*;
import net.runelite.client.config.ConfigManager;

public class ClueGroundManager
{
	private final Client client;

	private final ClueDetailsPlugin clueDetailsPlugin;
	@Getter
	private final ClueGroundSaveDataManager clueGroundSaveDataManager;
	@Getter
	private final Map<WorldPoint, List<ClueInstance>> groundClues = new HashMap<>();
	private final List<PendingGroundClue> pendingGroundClues = new ArrayList<>();
	private final Set<Tile> itemHasSpawnedOnTileThisTick = new HashSet<>();

	@Getter
	private final List<ClueInstance> despawnedClueQueueForInventoryCheck = new ArrayList<>();
	private final int MAX_DESPAWN_TIMER = 6100;
	private Zone lastZone;
	private Zone currentZone;

	public ClueGroundManager(Client client, ConfigManager configManager, ClueDetailsPlugin clueDetailsPlugin)
	{
		this.client = client;
		this.clueDetailsPlugin = clueDetailsPlugin;
		this.clueGroundSaveDataManager = new ClueGroundSaveDataManager(configManager, clueDetailsPlugin.gson);
		clueGroundSaveDataManager.loadStateFromConfig(client);
	}

	public void onItemSpawned(ItemSpawned event)
	{
		// On item spawned, check if is in known tile stack
		// If log in on tile with clues on it, spawned. Won't be dropped, but could be dropped?
		// Main issue is we don't want to create a new groundClue if it was dropped, as we will then also be doing another new one after.
		TileItem item = event.getItem();
		if (!Clues.isTrackedClueOrTornClue(item.getId(), clueDetailsPlugin.isDeveloperMode())) return;
		if (checkIfItemMatchesKnownItem(event.getTile(), item, event.getTile().getWorldLocation())) return;

		// New despawn timer, probably been dropped. Track to see what it was.
		if (item.getDespawnTime() - client.getTickCount() >= MAX_DESPAWN_TIMER || (
			clueDetailsPlugin.isDeveloperMode() && Clues.DEV_MODE_IDS.contains(item.getId()) && item.getDespawnTime() - client.getTickCount() >= 300))
		{
			pendingGroundClues.add(new PendingGroundClue(item, event.getTile().getWorldLocation(), client.getTickCount()));
		}
		else
		{
			// Handle items spawned on tile without aligned times and not dropped
			itemHasSpawnedOnTileThisTick.add(event.getTile());
		}
	}

	public void onItemDespawned(ItemDespawned event)
	{
		TileItem item = event.getItem();
		if (!Clues.isTrackedClueOrTornClue(item.getId(), clueDetailsPlugin.isDeveloperMode())) return;
		WorldPoint location = event.getTile().getWorldLocation();
		List<ClueInstance> cluesAtLocation = groundClues.get(location);

		// Catch despawn in vicinity
		if (cluesAtLocation == null) return;

		// If no logging out/reloading and such happens, despawnTime remains off by 1, so need to account for it
		if (item.getDespawnTime() - client.getTickCount() <= 1)
		{
			Optional<ClueInstance> optionalClue = cluesAtLocation.stream()
				.filter((clue) -> clue.getTileItem() == item)
				.findFirst();
			optionalClue.ifPresent(this::removeClue);
			return;
		}

		if (getTileAtWorldPoint(location) == null)
		{
			return;
		}

		// If despawned on a tile still in the scene, AND hasn't timed out, we might have:
		// 1. Picked up the clue
		// 2. Done nothing, clue is still there just with a new ID
		// We know it's 2 if we've gone from 5 zones distance to 4 zones distance
		Zone clueZone = new Zone(location);
		Zone currentZone = new Zone(client.getLocalPlayer().getWorldLocation());
		if (lastZone != null)
		{
			int distFromLastZone = clueZone.maxDistanceTo(lastZone);
			int distFromCurrentZone = clueZone.maxDistanceTo(currentZone);
			if (distFromLastZone == 4 && distFromCurrentZone == 3)
			{
				return;
			}
		}

		// Not gone over a zone to load, probably picked up
		Optional<ClueInstance> optionalClue = cluesAtLocation.stream()
			.filter((clue) -> clue.getTileItem() == item)
			.findFirst();
		optionalClue.ifPresent(despawnedClueQueueForInventoryCheck::add);

		// Remove the clue with matching tileItem
		cluesAtLocation.removeIf(clue -> clue.getTileItem() == item);

		// Clue despawned, don't know if it will spawn again as a new TileItem, or if it is gonezo
		// If it does respawn, we need it still in groundItems to check
		// If it doesn't respawn, we have nothing which is checking the tile

		if (cluesAtLocation.isEmpty())
		{
			groundClues.remove(location);
		}
	}

	private void addClue(ClueInstance clue)
	{
		groundClues.computeIfAbsent(clue.getLocation(), k -> new ArrayList<>()).add(clue);
	}

	private void removeClue(ClueInstance clue)
	{
		groundClues.get(clue.getLocation()).remove(clue);
	}

	public boolean checkIfItemMatchesKnownItem(Tile tile, TileItem tileItem, WorldPoint tileWp)
	{
		List<ClueInstance> knownItemsOnTile = groundClues.get(tileWp);
		if (knownItemsOnTile == null) return false;

		for (ClueInstance clueInstance : knownItemsOnTile)
		{
			int currentTick = client.getTickCount();
			if (getTrackedItemsAtTile(tile).contains(clueInstance.getTileItem())) continue;

			// For some reason this is always off by 1? IDK, but need to allow for it
			if (Math.abs(tileItem.getDespawnTime() - clueInstance.getDespawnTick(currentTick)) <= 1)
			{
				clueInstance.setTileItem(tileItem);
				return true;
			}
		}
		return false;
	}

	public void onGameTick()
	{
		currentZone = new Zone(client.getLocalPlayer().getWorldLocation());
		processPendingGroundCluesOnGameTick();
		processEmptyTiles();

		for (Tile tile : itemHasSpawnedOnTileThisTick)
		{
			checkClueThroughRelativeDespawnTimers(tile);
		}
		itemHasSpawnedOnTileThisTick.clear();
		removeDespawnedClues();

		lastZone = currentZone;
	}

	private void processEmptyTiles()
	{
		groundClues.entrySet().removeIf(entry -> {
			Tile tile = getTileAtWorldPoint(entry.getKey());
			if (tile == null) return false;

			Zone clueZone = new Zone(tile.getWorldLocation());
			// Item won't have potentially spawned if too far, so don't remove
			int zonesDistance = clueZone.maxDistanceTo(currentZone);
			if (zonesDistance >= 4) return false;
			return tile.getGroundItems() == null || tile.getGroundItems().isEmpty();
		});
	}

	public void processPendingGroundCluesFromInventoryChanged(ClueInstance removedClue)
	{
		Iterator<PendingGroundClue> groundClueIterator = pendingGroundClues.iterator();
		while (groundClueIterator.hasNext())
		{
			PendingGroundClue pendingGroundClue = groundClueIterator.next();
			// This should be enough, as a player shouldn't be able to drop two of the same item in the same tick
			// As you can only have one of each item on you at once
			if (removedClue.getItemId() == pendingGroundClue.getItem().getId())
			{
				// Found a match
				ClueInstance groundClueInstance = new ClueInstance(
					removedClue.getClueIds(),
					pendingGroundClue.getItem().getId(),
					pendingGroundClue.getLocation(),
					pendingGroundClue.getItem(),
					client.getTickCount()
				);

				addClue(groundClueInstance);

				// Remove matched clues from pending lists
				groundClueIterator.remove();
				break;
			}
		}
	}

	public void processPendingGroundCluesOnGameTick()
	{
		// Remove any with TileItem matching a properly tracked tile item
		pendingGroundClues.removeIf(pendingGroundClue ->
		{
			List<ClueInstance> groundCluesOnTile = groundClues.get(pendingGroundClue.getLocation());
			if (groundCluesOnTile == null) return false;
			return groundCluesOnTile
				.stream()
				.anyMatch(clueInstance -> clueInstance.getTileItem() == pendingGroundClue.getItem());
		});

		// If a tick has passed, and we've not associated the pending clue yet, mark it unknown
		pendingGroundClues.removeIf(pendingGroundClue ->
		{
			if (pendingGroundClue.getSpawnTick() < client.getTickCount())
			{
				ClueInstance groundClueInstance = new ClueInstance(
					List.of(),
					pendingGroundClue.getItem().getId(),
					pendingGroundClue.getLocation(),
					pendingGroundClue.getItem(),
					client.getTickCount()
				);

				addClue(groundClueInstance);
				return true;
			}
			return false;
		});
	}

	private void removeDespawnedClues()
	{
		groundClues.entrySet().removeIf(entry -> {
			List<ClueInstance> cluesList = entry.getValue();
			cluesList.removeIf(clueInstance -> clueInstance.getDespawnTick(client.getTickCount()) <= client.getTickCount());
			return cluesList.isEmpty();
		});
	}

	private void checkClueThroughRelativeDespawnTimers(Tile tile)
	{
		WorldPoint tileWp = tile.getWorldLocation();

		List<TileItem> itemsOnTile = getTrackedItemsAtTile(tile);
		if (itemsOnTile.isEmpty())
		{
			return;
		}

		if (!groundClues.containsKey(tileWp))
		{
			groundClues.put(tileWp, new ArrayList<>());
		}

		List<ClueInstance> storedClues = groundClues.get(tileWp);

		List<ClueInstance> updatedStoredClues = generateNewCluesOnTile(tileWp, storedClues, itemsOnTile);

		if (updatedStoredClues.isEmpty())
		{
			groundClues.remove(tileWp);
		}
		else
		{
			// If we didn't find an item for it on the tile, remove it
			updatedStoredClues.removeIf((clue) -> clue.getTileItem() == null);

			// Update the stored clues
			groundClues.put(tileWp, updatedStoredClues);
		}
	}

	private List<ClueInstance> generateNewCluesOnTile(WorldPoint tileWp, List<ClueInstance> storedClues, List<TileItem> cluesOnTile)
	{
		int currentTick = client.getTickCount();

		if (storedClues.size() == 1 && cluesOnTile.size() == 1)
		{
			// We assume it is the same clue. It is possible for it to be swapped with another clue though in
			// another client/mobile, and this will be wrong
			if (storedClues.get(0).getDespawnTick(currentTick) >= cluesOnTile.get(0).getDespawnTime())
			{
				storedClues.get(0).setTileItem(cluesOnTile.get(0));
				return storedClues;
			}
		}

		List<ClueInstance> sortedStoredClues = new ArrayList<>(storedClues);
		sortedStoredClues.sort(Comparator.comparingInt((clue) -> clue.getTicksToDespawnConsideringTileItem(currentTick)));

		// If only 1 of either but not both, less certainty as can't use diffs.
		// Could assume things like last clue expired, probs let's just assume nothing
		if (storedClues.size() <= 1 || cluesOnTile.size() == 1)
		{
			List<ClueInstance> actualCluesOnTile = new ArrayList<>();
			// Set tile's clues to just be unknown for all clues on tile
			for (TileItem groundClue : cluesOnTile)
			{
				ClueInstance clueInstance = new ClueInstance(List.of(),
					groundClue.getId(),
					tileWp,
					groundClue,
					client.getTickCount()
				);
				clueInstance.setTileItem(groundClue);
				actualCluesOnTile.add(clueInstance);
			}
			return actualCluesOnTile;
		}

		// Sort ground clues by despawn time ascending
		List<TileItem> sortedGroundClues = new ArrayList<>(cluesOnTile);
		sortedGroundClues.removeIf((tileItem -> tileItem.getDespawnTime() > sortedStoredClues.get(sortedStoredClues.size() - 1).getDespawnTick(currentTick)));
		sortedGroundClues.sort(Comparator.comparingInt(TileItem::getDespawnTime));

		Map<Integer, List<TileItem>> groundItemsByItemID = sortedGroundClues.stream()
			.collect(Collectors.groupingBy(TileItem::getId, LinkedHashMap::new, Collectors.toList()));
		Map<Integer, List<ClueInstance>> sortedItemsByItemID = sortedStoredClues.stream()
			.collect(Collectors.groupingBy(ClueInstance::getItemId, LinkedHashMap::new, Collectors.toList()));

		for (Integer itemID : groundItemsByItemID.keySet())
		{
			if (sortedItemsByItemID.get(itemID) == null) continue;
			findMatchingClues(sortedItemsByItemID.get(itemID), groundItemsByItemID.get(itemID));
		}
		
		List<ClueInstance> foundClues = new ArrayList<>();

		cluesOnTile.stream()
			.map(tileItem -> sortedStoredClues.stream()
				.filter(clue -> clue.getTileItem() == tileItem)
				.findFirst()
				.orElseGet(() -> {
					ClueInstance clueInstance = new ClueInstance(List.of(), tileItem.getId(), tileWp, tileItem, client.getTickCount());
					clueInstance.setTileItem(tileItem);
					return clueInstance;
				}))
			.forEach(foundClues::add);

		return foundClues;
	}

	private void findMatchingClues(List<ClueInstance> sortedStoredClues, List<TileItem> sortedGroundClues)
	{
		int currentTick = client.getTickCount();

		// Need to loop diffs, and see matches in each.
		// For items with the same ID, no matter what item you click in a stack, you will always pick up the first item dropped in the stack
		// This means we don't need to worry about considering gaps where a clue has been taken from the middle of a stack.
		int minGroundItemFound = 0;
		for (int i = 0; i < sortedStoredClues.size() - 1; i++)
		{
			ClueInstance clueInstance1 = sortedStoredClues.get(i);
			ClueInstance clueInstance2 = sortedStoredClues.get(i + 1);

			TileItem groundClue1 = sortedGroundClues.get(minGroundItemFound);
			TileItem groundClue2 = sortedGroundClues.get(minGroundItemFound + 1);

			int currentStoredClueDiff = clueInstance2.getTimeToDespawnFromDataInTicks() - clueInstance1.getTimeToDespawnFromDataInTicks();
			int currentGroundClueDiff = groundClue2.getDespawnTime() - groundClue1.getDespawnTime();

			// Same diff, probs same thing
			if (currentGroundClueDiff != currentStoredClueDiff) continue;
			// If item will despawn later than the stored clue, it can't be it.
			if (groundClue1.getDespawnTime() > clueInstance1.getDespawnTick(currentTick)) continue;
			if (groundClue2.getDespawnTime() > clueInstance2.getDespawnTick(currentTick)) continue;
			clueInstance1.setTileItem(groundClue1);
			clueInstance2.setTileItem(groundClue2);
			minGroundItemFound++;
		}
	}

	private Tile getTileAtWorldPoint(WorldPoint tileWp)
	{
		WorldView worldView = client.getTopLevelWorldView();
		LocalPoint tileLp = LocalPoint.fromWorld(worldView, tileWp);
		if (tileLp == null)
		{
			return null;
		}
		return worldView.getScene().getTiles()[tileWp.getPlane()][tileLp.getSceneX()][tileLp.getSceneY()];
	}

	private List<TileItem> getTrackedItemsAtTile(Tile tile)
	{
		List<TileItem> items = tile.getGroundItems();
		if (items == null)
		{
			return Collections.emptyList();
		}
		return items.stream()
			.filter(item -> Clues.isTrackedClueOrTornClue(item.getId(), clueDetailsPlugin.isDeveloperMode()))
			.collect(Collectors.toList());
	}

	public void saveStateToConfig()
	{
		clueGroundSaveDataManager.saveStateToConfig(client, groundClues);
	}

	public void loadStateFromConfig()
	{
		groundClues.clear();
		groundClues.putAll(clueGroundSaveDataManager.loadStateFromConfig(client));
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import static com.cluedetails.ClueDetailsConfig.CLUE_ITEMS_CONFIG;
import com.google.gson.reflect.TypeToken;
import java.util.List;
import net.runelite.client.config.ConfigManager;

public class CluePreferenceManager
{
	private final ClueDetailsPlugin clueDetailsPlugin;
	private final ConfigManager configManager;

	public CluePreferenceManager(ClueDetailsPlugin clueDetailsPlugin, ConfigManager configManager)
	{
		this.clueDetailsPlugin = clueDetailsPlugin;
		this.configManager = configManager;
	}

	public boolean getHighlightPreference(int clueID)
	{
		return Boolean.TRUE.equals(configManager.getConfiguration("clue-details-highlights",
			String.valueOf(clueID), Boolean.class));
	}

	public void saveHighlightPreference(int clueID, boolean newValue)
	{
		configManager.setConfiguration("clue-details-highlights", String.valueOf(clueID), newValue);
	}

	public boolean itemsPreferenceContainsItem(int clueID, int itemID)
	{
		List<Integer> clueItemIds = getItemsPreference(clueID);

		if (clueItemIds != null)
		{
			return getItemsPreference(clueID).contains(itemID);
		}
		return false;
	}

	public List<Integer> getItemsPreference(int clueID)
	{
		String clueItems = configManager.getConfiguration(CLUE_ITEMS_CONFIG, String.valueOf(clueID));

		return clueDetailsPlugin.gson.fromJson(clueItems, new TypeToken<List<Integer>>(){}.getType());
	}

	public void saveItemsPreference(int clueID, List<Integer> newItems)
	{
		if (newItems.isEmpty())
		{
			configManager.unsetConfiguration(CLUE_ITEMS_CONFIG, String.valueOf(clueID));
		}
		else
		{
			String clueItemIdsJson = clueDetailsPlugin.gson.toJson(newItems);
			configManager.setConfiguration(CLUE_ITEMS_CONFIG, String.valueOf(clueID), clueItemIdsJson);
		}
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import static com.cluedetails.ClueDetailsConfig.CLUE_ITEMS_CONFIG;
import com.cluedetails.filters.ClueTier;
import com.cluedetails.filters.OrRequirement;
import com.google.common.collect.ImmutableList;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.ItemID;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.cluescrolls.clues.MapClue;
import net.runelite.client.util.Text;

@Getter
public class Clues
{
	public static final List<Clues> CLUES = ImmutableList.of(
		new Clues(0, "Ranael: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_0, List.of(new WorldPoint(3316, 3163, 0))),
		new Clues(1, "Archmage Sedridor: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_1, List.of(new WorldPoint(3109, 3160, 0))),
		new Clues(2, "Apothecary: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_2, List.of(new WorldPoint(3195, 3404, 0))),
		new Clues(3, "Doric: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_3, List.of(new WorldPoint(2952, 3452, 0))),
		new Clues(4, "Brian: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_4, List.of(new WorldPoint(3027, 3249, 0))),
		new Clues(5, "Veronica: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_5, List.of(new WorldPoint(3110, 3330, 0))),
		new Clues(6, "Gertrude: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_6, List.of(new WorldPoint(3150, 3409, 0))),
		new Clues(7, "Hairdresser: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_7, List.of(new WorldPoint(2945, 3380, 0))),
		new Clues(8, "Fortunato: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_ANAGRAM_8, List.of(new WorldPoint(3085, 3252, 0))),
		new Clues(9, "Hans: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CRYPTIC_0, List.of(new WorldPoint(3212, 3219, 0))),
		new Clues(10, "Reldo: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CRYPTIC_1, List.of(new WorldPoint(3210, 3495, 0))),
		new Clues(11, "the Cook in Lumbridge: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CRYPTIC_2, List.of(new WorldPoint(3209, 3214, 0))),
		new Clues(12, "Hunding: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CRYPTIC_3, List.of(new WorldPoint(3097, 3429, 2))),
		new Clues(13, "Charlie the Tramp: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CRYPTIC_4, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(14, "Shantay: Talk", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CRYPTIC_5, List.of(new WorldPoint(3304, 3124, 0))),
		new Clues(15, "Aris: Emote", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_EMOTE_0, List.of(new WorldPoint(3206, 3422, 0))),
		new Clues(16, "Brugsen Bursen: Emote", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_EMOTE_1, List.of(new WorldPoint(3165, 3478, 0))),
		new Clues(17, "Iffie Nitter: Emote", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_EMOTE_2, List.of(new WorldPoint(3209, 3416, 0))),
		new Clues(18, "Bob's Axes: Emote", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_EMOTE_3, List.of(new WorldPoint(3233, 3200, 0))),
		new Clues(19, "Al Kharid mine: Emote", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_EMOTE_4, List.of(new WorldPoint(3298, 3293, 0))),
		new Clues(20, "Flynn's Mace Shop: Emote", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_EMOTE_5, List.of(new WorldPoint(2948, 3389, 0))),
		new Clues(21, "Champions' Guild: Dig", InterfaceID.CLUE_BEGINNER_MAP_CHAMPIONS_GUILD, ClueTier.BEGINNER, MapClue.CHAMPIONS_GUILD, List.of(new WorldPoint(3166, 3361, 0))),
		new Clues(22, "Varrock East Mine: Dig", InterfaceID.CLUE_BEGINNER_MAP_VARROCK_EAST_MINE, ClueTier.BEGINNER, MapClue.VARROCK_EAST_MINE, List.of(new WorldPoint(3290, 3374, 0))),
		new Clues(23, "Draynor Village Bank: Dig", InterfaceID.CLUE_BEGINNER_MAP_DYANOR, ClueTier.BEGINNER, MapClue.SOUTH_OF_DRAYNOR_BANK, List.of(new WorldPoint(3093, 3226, 0))),
		new Clues(24, "Falador stones: Dig", InterfaceID.CLUE_BEGINNER_MAP_NORTH_OF_FALADOR, ClueTier.BEGINNER, MapClue.STANDING_STONES, List.of(new WorldPoint(3043, 3398, 0))),
		new Clues(25, "DIS: Dig", InterfaceID.CLUE_BEGINNER_MAP_WIZARDS_TOWER, ClueTier.BEGINNER, MapClue.WIZARDS_TOWER_DIS, List.of(new WorldPoint(3110, 3152, 0))),
		new Clues(26, "Charlie the Tramp: trout", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_0, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(27, "Charlie the Tramp: pike", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_1, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(28, "Charlie the Tramp: raw herring", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_2, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(29, "Charlie the Tramp: raw trout", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_3, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(30, "Charlie the Tramp: iron ore", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_4, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(31, "Charlie the Tramp: iron dagger", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_5, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(32, "Charlie the Tramp: leather body", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_6, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues(33, "Charlie the Tramp: leather chaps", ItemID.CLUE_SCROLL_BEGINNER, ClueTier.BEGINNER, BeginnerMasterClueText.BEGINNER_CHARLIE_7, List.of(new WorldPoint(3206, 3390, 0))),
		new Clues("Duke's room: Search", ItemID.CLUE_SCROLL_EASY, ClueTier.EASY, null, List.of(new WorldPoint(3209, 3218, 0))),
		new Clues("Ardougne church: Search", ItemID.CLUE_SCROLL_EASY_2711, ClueTier.EASY, null, List.of(new WorldPoint(2612, 3304, 0))),
		new Clues("Al Kharid mine: Dig", ItemID.CLUE_SCROLL_EASY_12179, ClueTier.EASY, null, List.of(new WorldPoint(3300, 3291, 0))),
		new Clues("Falador stones: Dig", ItemID.CLUE_SCROLL_EASY_2719, ClueTier.EASY, null, List.of(new WorldPoint(3043, 3398, 0))),
		new Clues("Belladonna Leprechaun: Talk", ItemID.CLUE_SCROLL_EASY_19823, ClueTier.EASY, null, List.of(new WorldPoint(3088, 3357, 0))),
		new Clues("Ardougne Zoo: Emote", ItemID.CLUE_SCROLL_EASY_10216, ClueTier.EASY, null, List.of(new WorldPoint(2607, 3282, 0))),
		new Clues("Keep Le Faye: Emote", ItemID.CLUE_SCROLL_EASY_10222, ClueTier.EASY, null, List.of(new WorldPoint(2757, 3401, 0))),
		new Clues("Emir's Arena: Emote", ItemID.CLUE_SCROLL_EASY_10232, ClueTier.EASY, null, List.of(new WorldPoint(3314, 3241, 0))),
		new Clues("Legends' Guild: Emote", ItemID.CLUE_SCROLL_EASY_10188, ClueTier.EASY, null, List.of(new WorldPoint(2729, 3349, 0))),
		new Clues("Galahad's house: Dig", ItemID.CLUE_SCROLL_EASY_3516, ClueTier.EASY, null, List.of(new WorldPoint(2612, 3482, 0))),
		new Clues("Druids' Circle: Emote", ItemID.CLUE_SCROLL_EASY_10210, ClueTier.EASY, null, List.of(new WorldPoint(2924, 3478, 0))),
		new Clues("games room: Emote", ItemID.CLUE_SCROLL_EASY_10212, ClueTier.EASY, null, List.of(new WorldPoint(2207, 4952, 0))),
		new Clues("Sarim monks: Emote", ItemID.CLUE_SCROLL_EASY_10192, ClueTier.EASY, null, List.of(new WorldPoint(3047, 3237, 0))),
		new Clues("Exam Centre: Emote", ItemID.CLUE_SCROLL_EASY_10228, ClueTier.EASY, null, List.of(new WorldPoint(3361, 3339, 0))),
		new Clues("Wizards' Tower: Emote", ItemID.CLUE_SCROLL_EASY_10182, ClueTier.EASY, null, List.of(new WorldPoint(3113, 3196, 0))),
		new Clues("Ardougne mill: Emote", ItemID.CLUE_SCROLL_EASY_10206, ClueTier.EASY, null, List.of(new WorldPoint(2635, 3385, 0))),
		new Clues("Fishing Guild: Emote", ItemID.CLUE_SCROLL_EASY_10220, ClueTier.EASY, null, List.of(new WorldPoint(2610, 3391, 0))),
		new Clues("Draynor crossroads: Emote", ItemID.CLUE_SCROLL_EASY_10200, ClueTier.EASY, null, List.of(new WorldPoint(3109, 3294, 0))),
		new Clues("Grand Exchange: Emote", ItemID.CLUE_SCROLL_EASY_19831, ClueTier.EASY, null, List.of(new WorldPoint(3165, 3467, 0))),
		new Clues("Party Room: Emote", ItemID.CLUE_SCROLL_EASY_10208, ClueTier.EASY, null, List.of(new WorldPoint(3045, 3376, 0))),
		new Clues("Lumbridge Swamp: Emote", ItemID.CLUE_SCROLL_EASY_10180, ClueTier.EASY, null, List.of(new WorldPoint(3203, 3169, 0))),
		new Clues("Falador stones: Dig", ItemID.CLUE_SCROLL_EASY_12170, ClueTier.EASY, null, List.of(new WorldPoint(3040, 3399, 0))),
		new Clues("Giant's Den: Dig", ItemID.CLUE_SCROLL_EASY_25788, ClueTier.EASY, null, List.of(new WorldPoint(1418, 3591, 0))),
		new Clues("Kourend centre: Dig", ItemID.CLUE_SCROLL_EASY_19826, ClueTier.EASY, null, List.of(new WorldPoint(1639, 3673, 0))),
		new Clues("Grand Tree: Dig", ItemID.CLUE_SCROLL_EASY_3510, ClueTier.EASY, null, List.of(new WorldPoint(2458, 3504, 0))),
		new Clues("Ithoi's cabin: Dig", ItemID.CLUE_SCROLL_EASY_22001, ClueTier.EASY, null, List.of(new WorldPoint(2529, 2838, 0))),
		new Clues("Lumbridge Castle: Dig", ItemID.CLUE_SCROLL_EASY_19814, ClueTier.EASY, null, List.of(new WorldPoint(3221, 3219, 0))),
		new Clues("Wizards' Tower: Dig", ItemID.CLUE_SCROLL_EASY_3518, ClueTier.EASY, null, List.of(new WorldPoint(3109, 3153, 0))),
		new Clues("Varrock's rune store: Emote", ItemID.CLUE_SCROLL_EASY_19833, ClueTier.EASY, null, List.of(new WorldPoint(3253, 3401, 0))),
		new Clues("Al Kharid mine: Emote", ItemID.CLUE_SCROLL_EASY_10194, ClueTier.EASY, null, List.of(new WorldPoint(3299, 3289, 0))),
		new Clues("Vannaka: Talk", ItemID.CLUE_SCROLL_EASY_19816, ClueTier.EASY, null, List.of(new WorldPoint(3146, 9913, 0))),
		new Clues("Chemist: Talk", ItemID.CLUE_SCROLL_EASY_19822, ClueTier.EASY, null, List.of(new WorldPoint(2932, 3212, 0))),
		new Clues("Father Jean: Talk", ItemID.CLUE_SCROLL_EASY_19820, ClueTier.EASY, null, List.of(new WorldPoint(1734, 3576, 0))),
		new Clues("beehives: Emote", ItemID.CLUE_SCROLL_EASY_10214, ClueTier.EASY, null, List.of(new WorldPoint(2759, 3445, 0))),
		new Clues("Sinclair Mansion: Emote", ItemID.CLUE_SCROLL_EASY_10226, ClueTier.EASY, null, List.of(new WorldPoint(2741, 3536, 0))),
		new Clues("Falador east crate: Search", ItemID.CLUE_SCROLL_EASY_2712, ClueTier.EASY, null, List.of(new WorldPoint(3029, 3355, 0))),
		new Clues("monk's camp: Search", ItemID.CLUE_SCROLL_EASY_19818, ClueTier.EASY, null, List.of(new WorldPoint(1746, 3490, 0))),
		new Clues("North of Falador: Search", ItemID.CLUE_SCROLL_EASY_7236, ClueTier.EASY, null, List.of(new WorldPoint(2970, 3415, 0))),
		new Clues("Captain Tobias: Talk", ItemID.CLUE_SCROLL_EASY_3496, ClueTier.EASY, null, List.of(new WorldPoint(3026, 3216, 0))),
		new Clues("Limestone Mine: Emote", ItemID.CLUE_SCROLL_EASY_10186, ClueTier.EASY, null, List.of(new WorldPoint(3372, 3498, 0))),
		new Clues("Fishing trawler: Emote", ItemID.CLUE_SCROLL_EASY_10224, ClueTier.EASY, null, List.of(new WorldPoint(2676, 3169, 0))),
		new Clues("Konoo: Talk", ItemID.CLUE_SCROLL_EASY_19825, ClueTier.EASY, null, List.of(new WorldPoint(1703, 3524, 0))),
		new Clues("Urhney's books: Search", ItemID.CLUE_SCROLL_EASY_12166, ClueTier.EASY, null, List.of(new WorldPoint(3146, 3177, 0))),
		new Clues("Wizards tower: Search", ItemID.CLUE_SCROLL_EASY_12167, ClueTier.EASY, null, List.of(new WorldPoint(3113, 3159, 0))),
		new Clues("Aggie's wardrobe: Search", ItemID.CLUE_SCROLL_EASY_12168, ClueTier.EASY, null, List.of(new WorldPoint(3087, 3261, 0))),
		new Clues("Wydin's Food: Search", ItemID.CLUE_SCROLL_EASY_3495, ClueTier.EASY, null, List.of(new WorldPoint(3016, 3205, 0))),
		new Clues("Varrock Castle: Search", ItemID.CLUE_SCROLL_EASY_3515, ClueTier.EASY, null, List.of(new WorldPoint(3224, 3492, 0))),
		new Clues("Hemenster: Search", ItemID.CLUE_SCROLL_EASY_3506, ClueTier.EASY, null, List.of(new WorldPoint(2636, 3453, 0))),
		new Clues("Farsight's house: Search", ItemID.CLUE_SCROLL_EASY_3509, ClueTier.EASY, null, List.of(new WorldPoint(2699, 3470, 0))),
		new Clues("Edgeville coffin: Search", ItemID.CLUE_SCROLL_EASY_12174, ClueTier.EASY, null, List.of(new WorldPoint(3091, 3477, 0))),
		new Clues("Edgeville Monastery: Search", ItemID.CLUE_SCROLL_EASY_12177, ClueTier.EASY, null, List.of(new WorldPoint(3054, 3484, 0))),
		new Clues("Gaius' Shop: Search", ItemID.CLUE_SCROLL_EASY_3499, ClueTier.EASY, null, List.of(new WorldPoint(2886, 3449, 0))),
		new Clues("Al Kharid silk: Search", ItemID.CLUE_SCROLL_EASY_3501, ClueTier.EASY, null, List.of(new WorldPoint(3308, 3206, 0))),
		new Clues("Goblin house: Search", ItemID.CLUE_SCROLL_EASY_2679, ClueTier.EASY, null, List.of(new WorldPoint(3245, 3245, 0))),
		new Clues("Varrock south: Search", ItemID.CLUE_SCROLL_EASY_2685, ClueTier.EASY, null, List.of(new WorldPoint(3203, 3384, 0))),
		new Clues("outside Zenesha's: Search", ItemID.CLUE_SCROLL_EASY_2705, ClueTier.EASY, null, List.of(new WorldPoint(2654, 3299, 0))),
		new Clues("Crystal Chest: Search", ItemID.CLUE_SCROLL_EASY_23149, ClueTier.EASY, null, List.of(new WorldPoint(2915, 3452, 0))),
		new Clues("Falador General Store: Search", ItemID.CLUE_SCROLL_EASY_2692, ClueTier.EASY, null, List.of(new WorldPoint(2955, 3390, 0))),
		new Clues("Sarim jail: Search", ItemID.CLUE_SCROLL_EASY_12192, ClueTier.EASY, null, List.of(new WorldPoint(3013, 3179, 0))),
		new Clues("Digsite bush: Search", ItemID.CLUE_SCROLL_EASY_12175, ClueTier.EASY, null, List.of(new WorldPoint(3345, 3378, 0))),
		new Clues("Barbarian Village wheel: Search", ItemID.CLUE_SCROLL_EASY_12172, ClueTier.EASY, null, List.of(new WorldPoint(3085, 3429, 0))),
		new Clues("Fred the Farmer: Search", ItemID.CLUE_SCROLL_EASY_23151, ClueTier.EASY, null, List.of(new WorldPoint(3185, 3274, 0))),
		new Clues("Camelot Castle: Search", ItemID.CLUE_SCROLL_EASY_2703, ClueTier.EASY, null, List.of(new WorldPoint(2748, 3495, 0))),
		new Clues("Hura's Shop: Search", ItemID.CLUE_SCROLL_EASY_3493, ClueTier.EASY, null, List.of(new WorldPoint(3000, 9798, 0))),
		new Clues("Al Kharid Palace: Search", ItemID.CLUE_SCROLL_EASY_2680, ClueTier.EASY, null, List.of(new WorldPoint(3301, 3169, 0))),
		new Clues("Rommik's shop: Search", ItemID.CLUE_SCROLL_EASY_23153, ClueTier.EASY, null, List.of(new WorldPoint(2946, 3207, 0))),
		new Clues("Burthorpe pub: Search", ItemID.CLUE_SCROLL_EASY_12185, ClueTier.EASY, null, List.of(new WorldPoint(2913, 3536, 0))),
		new Clues("Lumbridge Castle tower: Search", ItemID.CLUE_SCROLL_EASY_2678, ClueTier.EASY, null, List.of(new WorldPoint(3228, 3212, 0))),
		new Clues("Port Khazard: Search", ItemID.CLUE_SCROLL_EASY_3504, ClueTier.EASY, null, List.of(new WorldPoint(2660, 3149, 0))),
		new Clues("Canifis crate: Search", ItemID.CLUE_SCROLL_EASY_7238, ClueTier.EASY, null, List.of(new WorldPoint(3509, 3497, 0))),
		new Clues("Draynor Manor crate: Search", ItemID.CLUE_SCROLL_EASY_3502, ClueTier.EASY, null, List.of(new WorldPoint(3106, 3369, 0))),
		new Clues("Ardougne General store: Search", ItemID.CLUE_SCROLL_EASY_2706, ClueTier.EASY, null, List.of(new WorldPoint(2615, 3291, 0))),
		new Clues("Falador General store: Search", ItemID.CLUE_SCROLL_EASY_23154, ClueTier.EASY, null, List.of(new WorldPoint(2955, 3390, 0))),
		new Clues("Horvik's crates: Search", ItemID.CLUE_SCROLL_EASY_2688, ClueTier.EASY, null, List.of(new WorldPoint(3228, 3433, 0))),
		new Clues("West Varrock bank: Search", ItemID.CLUE_SCROLL_EASY_12176, ClueTier.EASY, null, List.of(new WorldPoint(3187, 9825, 0))),
		new Clues("Yanille piano: Search", ItemID.CLUE_SCROLL_EASY_3491, ClueTier.EASY, null, List.of(new WorldPoint(2598, 3105, 0))),
		new Clues("Barbarian Village helmet: Search", ItemID.CLUE_SCROLL_EASY_2690, ClueTier.EASY, null, List.of(new WorldPoint(3073, 3430, 0))),
		new Clues("Drogo's shop: Search", ItemID.CLUE_SCROLL_EASY_12178, ClueTier.EASY, null, List.of(new WorldPoint(3035, 9849, 0))),
		new Clues("Gerrant's shop: Search", ItemID.CLUE_SCROLL_EASY_2695, ClueTier.EASY, null, List.of(new WorldPoint(3012, 3222, 0))),
		new Clues("Hosidius fruit store: Search", ItemID.CLUE_SCROLL_EASY_25789, ClueTier.EASY, null, List.of(new WorldPoint(1799, 3613, 0))),
		new Clues("Ardougne guard house: Search", ItemID.CLUE_SCROLL_EASY_2704, ClueTier.EASY, null, List.of(new WorldPoint(2645, 3338, 0))),
		new Clues("Al Kharid north-west : Search", ItemID.CLUE_SCROLL_EASY_2682, ClueTier.EASY, null, List.of(new WorldPoint(3289, 3202, 0))),
		new Clues("Taverley stile: Search", ItemID.CLUE_SCROLL_EASY_12191, ClueTier.EASY, null, List.of(new WorldPoint(2914, 3433, 0))),
		new Clues("Ardougne shed: Search", ItemID.CLUE_SCROLL_EASY_2707, ClueTier.EASY, null, List.of(new WorldPoint(2617, 3347, 0))),
		new Clues("Varrock cart: Search", ItemID.CLUE_SCROLL_EASY_2709, ClueTier.EASY, null, List.of(new WorldPoint(3226, 3452, 0))),
		new Clues("Thessalia's upstairs: Search", ItemID.CLUE_SCROLL_EASY_2708, ClueTier.EASY, null, List.of(new WorldPoint(3206, 3419, 0))),
		new Clues("Falador east drawers: Search", ItemID.CLUE_SCROLL_EASY_3498, ClueTier.EASY, null, List.of(new WorldPoint(3039, 3342, 0))),
		new Clues("Ardougne pub: Search", ItemID.CLUE_SCROLL_EASY_2710, ClueTier.EASY, null, List.of(new WorldPoint(2574, 3326, 0))),
		new Clues("Wayne's Chains: Search", ItemID.CLUE_SCROLL_EASY_2694, ClueTier.EASY, null, List.of(new WorldPoint(2969, 3311, 0))),
		new Clues("Draynor drawers: Search", ItemID.CLUE_SCROLL_EASY_3512, ClueTier.EASY, null, List.of(new WorldPoint(3097, 3277, 0))),
		new Clues("Gertrude's house: Search", ItemID.CLUE_SCROLL_EASY_2689, ClueTier.EASY, null, List.of(new WorldPoint(3156, 3406, 0))),
		new Clues("Yanille hunter shop: Search", ItemID.CLUE_SCROLL_EASY_3492, ClueTier.EASY, null, List.of(new WorldPoint(2570, 3085, 0))),
		new Clues("Sarim water house: Search", ItemID.CLUE_SCROLL_EASY_12188, ClueTier.EASY, null, List.of(new WorldPoint(3024, 3259, 0))),
		new Clues("Perdu's house: Search", ItemID.CLUE_SCROLL_EASY_3507, ClueTier.EASY, null, List.of(new WorldPoint(2809, 3451, 0))),
		new Clues("Hild's house: Search", ItemID.CLUE_SCROLL_EASY_3490, ClueTier.EASY, null, List.of(new WorldPoint(2929, 3570, 0))),
		new Clues("Noella's house: Search", ItemID.CLUE_SCROLL_EASY_3505, ClueTier.EASY, null, List.of(new WorldPoint(2653, 3320, 0))),
		new Clues("Cassie's Shop: Search", ItemID.CLUE_SCROLL_EASY_2691, ClueTier.EASY, null, List.of(new WorldPoint(2971, 3386, 0))),
		new Clues("East Varrock bank: Search", ItemID.CLUE_SCROLL_EASY_2687, ClueTier.EASY, null, List.of(new WorldPoint(3250, 3420, 0))),
		new Clues("Urhney's books east: Search", ItemID.CLUE_SCROLL_EASY_23150, ClueTier.EASY, null, List.of(new WorldPoint(3149, 3177, 0))),
		new Clues("Hunter Guild: Search", ItemID.CLUE_SCROLL_EASY_28913, ClueTier.EASY, null, List.of(new WorldPoint(1560, 3048, 0))),
		new Clues("Hosidius kitchens: Search", ItemID.CLUE_SCROLL_EASY_19829, ClueTier.EASY, null, List.of(new WorldPoint(1683, 3616, 0))),
		new Clues("Horvik's crate: Search", ItemID.CLUE_SCROLL_EASY_23152, ClueTier.EASY, null, List.of(new WorldPoint(3228, 3433, 0))),
		new Clues("Burthorpe tents: Search", ItemID.CLUE_SCROLL_EASY_3503, ClueTier.EASY, null, List.of(new WorldPoint(2885, 3540, 0))),
		new Clues("Rimmington mine: Search", ItemID.CLUE_SCROLL_EASY_12189, ClueTier.EASY, null, List.of(new WorldPoint(2978, 3239, 0))),
		new Clues("Falador east upstairs: Search", ItemID.CLUE_SCROLL_EASY_3497, ClueTier.EASY, null, List.of(new WorldPoint(3041, 3364, 0))),
		new Clues("Taverley south: Search", ItemID.CLUE_SCROLL_EASY_3500, ClueTier.EASY, null, List.of(new WorldPoint(2894, 3418, 0))),
		new Clues("Rimmington upstairs: Search", ItemID.CLUE_SCROLL_EASY_3494, ClueTier.EASY, null, List.of(new WorldPoint(2970, 3214, 0))),
		new Clues("Seers' Village upstairs: Search", ItemID.CLUE_SCROLL_EASY_3508, ClueTier.EASY, null, List.of(new WorldPoint(2716, 3471, 0))),
		new Clues("Rimmington mine: Emote", ItemID.CLUE_SCROLL_EASY_10202, ClueTier.EASY, null, List.of(new WorldPoint(2976, 3238, 0))),
		new Clues("Jeed: Talk", ItemID.CLUE_SCROLL_EASY_3514, ClueTier.EASY, null, List.of(new WorldPoint(3366, 3222, 0))),
		new Clues("South-east Varrock mine: Dig", ItemID.CLUE_SCROLL_EASY_2716, ClueTier.EASY, null, List.of(new WorldPoint(3290, 3373, 0))),
		new Clues("Catherby Archery shop: Search", ItemID.CLUE_SCROLL_EASY_2700, ClueTier.EASY, null, List.of(new WorldPoint(2825, 3442, 0))),
		new Clues("Arhein: Talk", ItemID.CLUE_SCROLL_EASY_2701, ClueTier.EASY, null, List.of(new WorldPoint(2803, 3430, 0))),
		new Clues("Doric: Talk", ItemID.CLUE_SCROLL_EASY_2698, ClueTier.EASY, null, List.of(new WorldPoint(2951, 3450, 0))),
		new Clues("Ellis: Talk", ItemID.CLUE_SCROLL_EASY_2684, ClueTier.EASY, null, List.of(new WorldPoint(3276, 3191, 0))),
		new Clues("Gaius: Talk", ItemID.CLUE_SCROLL_EASY_2699, ClueTier.EASY, null, List.of(new WorldPoint(2884, 3450, 0))),
		new Clues("Hans: Talk", ItemID.CLUE_SCROLL_EASY_2681, ClueTier.EASY, null, List.of(new WorldPoint(3221, 3218, 0))),
		new Clues("Jatix: Talk", ItemID.CLUE_SCROLL_EASY_12184, ClueTier.EASY, null, List.of(new WorldPoint(2898, 3428, 0))),
		new Clues("Ned: Talk", ItemID.CLUE_SCROLL_EASY_2697, ClueTier.EASY, null, List.of(new WorldPoint(3098, 3258, 0))),
		new Clues("Rusty: Talk", ItemID.CLUE_SCROLL_EASY_12187, ClueTier.EASY, null, List.of(new WorldPoint(2979, 3435, 0))),
		new Clues("Sarah: Talk", ItemID.CLUE_SCROLL_EASY_12186, ClueTier.EASY, null, List.of(new WorldPoint(3038, 3292, 0))),
		new Clues("Sir Kay: Talk", ItemID.CLUE_SCROLL_EASY_2702, ClueTier.EASY, null, List.of(new WorldPoint(2760, 3496, 0))),
		new Clues("Lady of the Lake: Talk", ItemID.CLUE_SCROLL_EASY_12190, ClueTier.EASY, null, List.of(new WorldPoint(2924, 3405, 0))),
		new Clues("Blue Moon Inn Bartender: Talk", ItemID.CLUE_SCROLL_EASY_2686, ClueTier.EASY, null, List.of(new WorldPoint(3226, 3399, 0))),
		new Clues("Louisa Sinclair: Talk", ItemID.CLUE_SCROLL_EASY_3513, ClueTier.EASY, null, List.of(new WorldPoint(2736, 3578, 0))),
		new Clues("Rimmington crossroads: Emote", ItemID.CLUE_SCROLL_EASY_10218, ClueTier.EASY, null, List.of(new WorldPoint(2981, 3276, 0))),
		new Clues("Draynor Manor fountain: Emote", ItemID.CLUE_SCROLL_EASY_10196, ClueTier.EASY, null, List.of(new WorldPoint(3088, 3336, 0))),
		new Clues("Varrock Castle: Emote", ItemID.CLUE_SCROLL_EASY_12162, ClueTier.EASY, null, List.of(new WorldPoint(3213, 3463, 0))),
		new Clues("Apothecary: Talk", ItemID.CLUE_SCROLL_EASY_19817, ClueTier.EASY, null, List.of(new WorldPoint(3195, 3404, 0))),
		new Clues("Herquin: Talk", ItemID.CLUE_SCROLL_EASY_19819, ClueTier.EASY, null, List.of(new WorldPoint(2945, 3335, 0))),
		new Clues("Ali the Leaflet Dropper: Talk", ItemID.CLUE_SCROLL_EASY_23164, ClueTier.EASY, null, List.of(new WorldPoint(3283, 3329, 0))),
		new Clues("Ambassador Spanfipple: Talk", ItemID.CLUE_SCROLL_EASY_12182, ClueTier.EASY, null, List.of(new WorldPoint(2979, 3340, 0))),
		new Clues("Cassie: Talk", ItemID.CLUE_SCROLL_EASY_12181, ClueTier.EASY, null, List.of(new WorldPoint(2975, 3383, 0))),
		new Clues("Charles in Piscarilius: Talk", ItemID.CLUE_SCROLL_EASY_23161, ClueTier.EASY, null, List.of(new WorldPoint(1821, 3690, 0))),
		new Clues("Ermin: Talk", ItemID.CLUE_SCROLL_EASY_19828, ClueTier.EASY, null, List.of(new WorldPoint(2488, 3409, 0))),
		new Clues("Morgan: Talk", ItemID.CLUE_SCROLL_EASY_23162, ClueTier.EASY, null, List.of(new WorldPoint(3098, 3268, 0))),
		new Clues("Turael/Aya: Talk", ItemID.CLUE_SCROLL_EASY_23165, ClueTier.EASY, null, List.of(new WorldPoint(2930, 3536, 0))),
		new Clues("Wayne: Talk", ItemID.CLUE_SCROLL_EASY_23163, ClueTier.EASY, null, List.of(new WorldPoint(2972, 3312, 0))),
		new Clues("Zeke: Talk", ItemID.CLUE_SCROLL_EASY_2683, ClueTier.EASY, null, List.of(new WorldPoint(3287, 3190, 0))),
		new Clues("Lucy: Talk", ItemID.CLUE_SCROLL_EASY_12169, ClueTier.EASY, null, List.of(new WorldPoint(3046, 3382, 0))),
		new Clues("Doomsayer: Talk", ItemID.CLUE_SCROLL_EASY_19830, ClueTier.EASY, null, List.of(new WorldPoint(3230, 3230, 0))),
		new Clues("Squire: Talk", ItemID.CLUE_SCROLL_EASY_2693, ClueTier.EASY, null, List.of(new WorldPoint(2977, 3343, 0))),
		new Clues("Hairdresser: Talk", ItemID.CLUE_SCROLL_EASY_12183, ClueTier.EASY, null, List.of(new WorldPoint(2944, 3381, 0))),
		new Clues("Rusty Anchor Bartender: Talk", ItemID.CLUE_SCROLL_EASY_2696, ClueTier.EASY, null, List.of(new WorldPoint(3045, 3256, 0))),
		new Clues("Blue Moon Inn Cook: Talk", ItemID.CLUE_SCROLL_EASY_23166, ClueTier.EASY, null, List.of(new WorldPoint(3230, 3401, 0))),
		new Clues("Doris: Talk", ItemID.CLUE_SCROLL_EASY_12173, ClueTier.EASY, null, List.of(new WorldPoint(3079, 3493, 0))),
		new Clues("Tynan: Talk", ItemID.CLUE_SCROLL_EASY_19821, ClueTier.EASY, null, List.of(new WorldPoint(1836, 3786, 0))),
		new Clues("The Face: Talk", ItemID.CLUE_SCROLL_EASY_19824, ClueTier.EASY, null, List.of(new WorldPoint(3019, 3232, 0))),
		new Clues("Lumbridge mill: Emote", ItemID.CLUE_SCROLL_EASY_10198, ClueTier.EASY, null, List.of(new WorldPoint(3159, 3298, 0))),
		new Clues("Lumber Yard: Emote", ItemID.CLUE_SCROLL_EASY_10230, ClueTier.EASY, null, List.of(new WorldPoint(3307, 3491, 0))),
		new Clues("Herquin's shop: Emote", ItemID.CLUE_SCROLL_EASY_12164, ClueTier.EASY, null, List.of(new WorldPoint(2945, 3335, 0))),
		new Clues("Mudskipper Point: Emote", ItemID.CLUE_SCROLL_EASY_10190, ClueTier.EASY, null, List.of(new WorldPoint(2989, 3110, 0))),
		new Clues("Champions' Guild: Dig", ItemID.CLUE_SCROLL_EASY_2713, ClueTier.EASY, null, List.of(new WorldPoint(3166, 3361, 0))),
		new Clues("Draynor Marketplace: Emote", ItemID.CLUE_SCROLL_EASY_10184, ClueTier.EASY, null, List.of(new WorldPoint(3083, 3253, 0))),
		new Clues("Fortis Grand Museum: Emote", ItemID.CLUE_SCROLL_EASY_28914, ClueTier.EASY, null, List.of(new WorldPoint(1712, 3163, 0))),
		new Clues("Varrock library: Emote", ItemID.CLUE_SCROLL_EASY_10204, ClueTier.EASY, null, List.of(new WorldPoint(3209, 3492, 0))),
		new Clues("Song: Vision", ItemID.CLUE_SCROLL_EASY_23155, ClueTier.EASY, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: The Forlorn Homestead", ItemID.CLUE_SCROLL_EASY_23156, ClueTier.EASY, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Tiptoe", ItemID.CLUE_SCROLL_EASY_23157, ClueTier.EASY, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Rugged Terrain", ItemID.CLUE_SCROLL_EASY_23158, ClueTier.EASY, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: On the Shore", ItemID.CLUE_SCROLL_EASY_23159, ClueTier.EASY, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Alone", ItemID.CLUE_SCROLL_EASY_23160, ClueTier.EASY, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Aldarin bank: Dig", ItemID.CLUE_SCROLL_EASY_29853, ClueTier.EASY, null, List.of(new WorldPoint(1390, 2926, 0))),
		new Clues("Quetzacalli Gorge: Dig", ItemID.CLUE_SCROLL_EASY_29854, ClueTier.EASY, null, List.of(new WorldPoint(1490, 3257, 0))),
		new Clues("H.A.M. Hideout: Dig", ItemID.CLUE_SCROLL_MEDIUM, ClueTier.MEDIUM, null, List.of(new WorldPoint(3160, 3251, 0))),
		new Clues("Tree Gnome Village: Dig", ItemID.CLUE_SCROLL_MEDIUM_2809, ClueTier.MEDIUM, null, List.of(new WorldPoint(2479, 3158, 0))),
		new Clues("Karamja banana: Dig", ItemID.CLUE_SCROLL_MEDIUM_3588, ClueTier.MEDIUM, null, List.of(new WorldPoint(2887, 3154, 0))),
		new Clues("Brimhaven Dungeon: Dig", ItemID.CLUE_SCROLL_MEDIUM_3590, ClueTier.MEDIUM, null, List.of(new WorldPoint(2743, 3151, 0))),
		new Clues("Lumbridge Swamp south: Dig", ItemID.CLUE_SCROLL_MEDIUM_7313, ClueTier.MEDIUM, null, List.of(new WorldPoint(3184, 3150, 0))),
		new Clues("Lumbridge Swamp east: Dig", ItemID.CLUE_SCROLL_MEDIUM_2823, ClueTier.MEDIUM, null, List.of(new WorldPoint(3217, 3177, 0))),
		new Clues("Asgarnian Ice Dungeon: Dig", ItemID.CLUE_SCROLL_MEDIUM_2819, ClueTier.MEDIUM, null, List.of(new WorldPoint(3007, 3144, 0))),
		new Clues("DKP: Dig", ItemID.CLUE_SCROLL_MEDIUM_7309, ClueTier.MEDIUM, null, List.of(new WorldPoint(2896, 3119, 0))),
		new Clues("Moss Giant Island: Dig", ItemID.CLUE_SCROLL_MEDIUM_2805, ClueTier.MEDIUM, null, List.of(new WorldPoint(2697, 3207, 0))),
		new Clues("Hazelmere's north: Dig", ItemID.CLUE_SCROLL_MEDIUM_2803, ClueTier.MEDIUM, null, List.of(new WorldPoint(2679, 3110, 0))),
		new Clues("Crandor south: Dig", ItemID.CLUE_SCROLL_MEDIUM_23136, ClueTier.MEDIUM, null, List.of(new WorldPoint(2828, 3234, 0))),
		new Clues("Uzer east: Dig", ItemID.CLUE_SCROLL_MEDIUM_12035, ClueTier.MEDIUM, null, List.of(new WorldPoint(3510, 3074, 0))),
		new Clues("DJP: Dig", ItemID.CLUE_SCROLL_MEDIUM_2813, ClueTier.MEDIUM, null, List.of(new WorldPoint(2643, 3252, 0))),
		new Clues("BKP: Dig", ItemID.CLUE_SCROLL_MEDIUM_12041, ClueTier.MEDIUM, null, List.of(new WorldPoint(2322, 3061, 0))),
		new Clues("Nature Altar north: Dig", ItemID.CLUE_SCROLL_MEDIUM_7317, ClueTier.MEDIUM, null, List.of(new WorldPoint(2875, 3046, 0))),
		new Clues("Nature Altar west: Dig", ItemID.CLUE_SCROLL_MEDIUM_2817, ClueTier.MEDIUM, null, List.of(new WorldPoint(2849, 3033, 0))),
		new Clues("Crandor north: Dig", ItemID.CLUE_SCROLL_MEDIUM_2815, ClueTier.MEDIUM, null, List.of(new WorldPoint(2848, 3296, 0))),
		new Clues("AKS north: Dig", ItemID.CLUE_SCROLL_MEDIUM_7307, ClueTier.MEDIUM, null, List.of(new WorldPoint(2583, 2990, 0))),
		new Clues("Lumbridge mill cows: Dig", ItemID.CLUE_SCROLL_MEDIUM_2825, ClueTier.MEDIUM, null, List.of(new WorldPoint(3179, 3344, 0))),
		new Clues("Outpost west: Dig", ItemID.CLUE_SCROLL_MEDIUM_2807, ClueTier.MEDIUM, null, List.of(new WorldPoint(2383, 3370, 0))),
		new Clues("Exam Centre hill: Dig", ItemID.CLUE_SCROLL_MEDIUM_12051, ClueTier.MEDIUM, null, List.of(new WorldPoint(3312, 3375, 0))),
		new Clues("Draynor Manor: Dig", ItemID.CLUE_SCROLL_MEDIUM_12043, ClueTier.MEDIUM, null, List.of(new WorldPoint(3121, 3384, 0))),
		new Clues("BKR: Dig", ItemID.CLUE_SCROLL_MEDIUM_3584, ClueTier.MEDIUM, null, List.of(new WorldPoint(3430, 3388, 0))),
		new Clues("Lady of the Lake: Dig", ItemID.CLUE_SCROLL_MEDIUM_2821, ClueTier.MEDIUM, null, List.of(new WorldPoint(2920, 3403, 0))),
		new Clues("AKS south: Dig", ItemID.CLUE_SCROLL_MEDIUM_12033, ClueTier.MEDIUM, null, List.of(new WorldPoint(2594, 2899, 0))),
		new Clues("terrorbirds: Dig", ItemID.CLUE_SCROLL_MEDIUM_3592, ClueTier.MEDIUM, null, List.of(new WorldPoint(2387, 3435, 0))),
		new Clues("Baxtorian Falls: Dig", ItemID.CLUE_SCROLL_MEDIUM_2811, ClueTier.MEDIUM, null, List.of(new WorldPoint(2512, 3467, 0))),
		new Clues("terrorbirds north: Dig", ItemID.CLUE_SCROLL_MEDIUM_12045, ClueTier.MEDIUM, null, List.of(new WorldPoint(2381, 3468, 0))),
		new Clues("Ice Mountain,: Dig", ItemID.CLUE_SCROLL_MEDIUM_7311, ClueTier.MEDIUM, null, List.of(new WorldPoint(3005, 3475, 0))),
		new Clues("Bazaar: Dig", ItemID.CLUE_SCROLL_MEDIUM_28909, ClueTier.MEDIUM, null, List.of(new WorldPoint(1659, 3111, 0))),
		new Clues("Coal Trucks north: Dig", ItemID.CLUE_SCROLL_MEDIUM_12049, ClueTier.MEDIUM, null, List.of(new WorldPoint(2585, 3505, 0))),
		new Clues("Slayer Tower south: Dig", ItemID.CLUE_SCROLL_MEDIUM_3582, ClueTier.MEDIUM, null, List.of(new WorldPoint(3443, 3515, 0))),
		new Clues("Grand Tree swamp: Dig", ItemID.CLUE_SCROLL_MEDIUM_3594, ClueTier.MEDIUM, null, List.of(new WorldPoint(2416, 3516, 0))),
		new Clues("Slayer Tower south-east: Dig", ItemID.CLUE_SCROLL_MEDIUM_12053, ClueTier.MEDIUM, null, List.of(new WorldPoint(3429, 3523, 0))),
		new Clues("Eagles' Peak: Dig", ItemID.CLUE_SCROLL_MEDIUM_12047, ClueTier.MEDIUM, null, List.of(new WorldPoint(2363, 3531, 0))),
		new Clues("Burthorpe pub: Dig", ItemID.CLUE_SCROLL_MEDIUM_3586, ClueTier.MEDIUM, null, List.of(new WorldPoint(2919, 3535, 0))),
		new Clues("Fenkenstrain's Castle: Dig", ItemID.CLUE_SCROLL_MEDIUM_12037, ClueTier.MEDIUM, null, List.of(new WorldPoint(3548, 3560, 0))),
		new Clues("Graveyard of Heroes: Dig", ItemID.CLUE_SCROLL_MEDIUM_19774, ClueTier.MEDIUM, null, List.of(new WorldPoint(1476, 3566, 0))),
		new Clues("AJR: Dig", ItemID.CLUE_SCROLL_MEDIUM_7315, ClueTier.MEDIUM, null, List.of(new WorldPoint(2735, 3638, 0))),
		new Clues("Rellekka garden: Dig", ItemID.CLUE_SCROLL_MEDIUM_12039, ClueTier.MEDIUM, null, List.of(new WorldPoint(2681, 3653, 0))),
		new Clues("Farming Guild: Dig", ItemID.CLUE_SCROLL_MEDIUM_23135, ClueTier.MEDIUM, null, List.of(new WorldPoint(1247, 3726, 0))),
		new Clues("CIP east: Dig", ItemID.CLUE_SCROLL_MEDIUM_7305, ClueTier.MEDIUM, null, List.of(new WorldPoint(2537, 3881, 0))),
		new Clues("Fossil Island island: Dig", ItemID.CLUE_SCROLL_MEDIUM_23137, ClueTier.MEDIUM, null, List.of(new WorldPoint(3770, 3898, 0))),
		new Clues("Baraek: Talk", ItemID.CLUE_SCROLL_MEDIUM_12057, ClueTier.MEDIUM, null, List.of(new WorldPoint(3217, 3434, 0))),
		new Clues("Saba: Talk", ItemID.CLUE_SCROLL_MEDIUM_3613, ClueTier.MEDIUM, null, List.of(new WorldPoint(2858, 3577, 0))),
		new Clues("Captain Tobias: Talk", ItemID.CLUE_SCROLL_MEDIUM_12061, ClueTier.MEDIUM, null, List.of(new WorldPoint(3026, 3216, 0))),
		new Clues("Aretha: Talk", ItemID.CLUE_SCROLL_MEDIUM_19758, ClueTier.MEDIUM, null, List.of(new WorldPoint(1814, 3851, 0))),
		new Clues("hill giant: Kill", ItemID.CLUE_SCROLL_MEDIUM_19760, ClueTier.MEDIUM, null, List.of(new WorldPoint(1444, 3613, 0))),
		new Clues("Canifis clothes: Search", ItemID.CLUE_SCROLL_MEDIUM_3609, ClueTier.MEDIUM, null, List.of(new WorldPoint(3498, 3507, 0))),
		new Clues("Jaraah: Talk", ItemID.CLUE_SCROLL_MEDIUM_3616, ClueTier.MEDIUM, null, List.of(new WorldPoint(3359, 3276, 0))),
		new Clues("Caroline: Talk", ItemID.CLUE_SCROLL_MEDIUM_7280, ClueTier.MEDIUM, null, List.of(new WorldPoint(2715, 3302, 0))),
		new Clues("Oracle: Talk", ItemID.CLUE_SCROLL_MEDIUM_2851, ClueTier.MEDIUM, null, List.of(new WorldPoint(3013, 3501, 0))),
		new Clues("Father Aereck: Talk", ItemID.CLUE_SCROLL_MEDIUM_19746, ClueTier.MEDIUM, null, List.of(new WorldPoint(3242, 3207, 0))),
		new Clues("Charlie the Tramp: Talk", ItemID.CLUE_SCROLL_MEDIUM_19750, ClueTier.MEDIUM, null, List.of(new WorldPoint(3209, 3392, 0))),
		new Clues("Gloria: Talk", ItemID.CLUE_SCROLL_MEDIUM_28908, ClueTier.MEDIUM, null, List.of(new WorldPoint(1802, 9504, 0))),
		new Clues("Ourania Cave: Dig", ItemID.CLUE_SCROLL_MEDIUM_7290, ClueTier.MEDIUM, null, List.of(new WorldPoint(2454, 3230, 0))),
		new Clues("Brimstail: Talk", ItemID.CLUE_SCROLL_MEDIUM_3612, ClueTier.MEDIUM, null, List.of(new WorldPoint(2407, 9816, 0))),
		new Clues("Ali the Kebab seller: Talk", ItemID.CLUE_SCROLL_MEDIUM_19768, ClueTier.MEDIUM, null, List.of(new WorldPoint(3354, 2974, 0))),
		new Clues("Tai Bwo Wannai: Emote", ItemID.CLUE_SCROLL_MEDIUM_10260, ClueTier.MEDIUM, null, List.of(new WorldPoint(2803, 3073, 0))),
		new Clues("Digsite winch: Emote", ItemID.CLUE_SCROLL_MEDIUM_10274, ClueTier.MEDIUM, null, List.of(new WorldPoint(3370, 3425, 0))),
		new Clues("Shayzien Combat Ring: Emote", ItemID.CLUE_SCROLL_MEDIUM_19776, ClueTier.MEDIUM, null, List.of(new WorldPoint(1543, 3623, 0))),
		new Clues("Chemist's house: Dig", ItemID.CLUE_SCROLL_MEDIUM_3602, ClueTier.MEDIUM, null, List.of(new WorldPoint(2924, 3209, 0))),
		new Clues("CJR south-west: Dig", ItemID.CLUE_SCROLL_MEDIUM_7294, ClueTier.MEDIUM, null, List.of(new WorldPoint(2667, 3562, 0))),
		new Clues("Madame Caldarium: Talk", ItemID.CLUE_SCROLL_MEDIUM_23133, ClueTier.MEDIUM, null, List.of(new WorldPoint(2553, 2868, 0))),
		new Clues("Nicholas: Talk", ItemID.CLUE_SCROLL_MEDIUM_23131, ClueTier.MEDIUM, null, List.of(new WorldPoint(1841, 3803, 0))),
		new Clues("Barbarian Agility: Emote", ItemID.CLUE_SCROLL_MEDIUM_10264, ClueTier.MEDIUM, null, List.of(new WorldPoint(2552, 3556, 0))),
		new Clues("Edgeville General store: Emote", ItemID.CLUE_SCROLL_MEDIUM_12031, ClueTier.MEDIUM, null, List.of(new WorldPoint(3080, 3509, 0))),
		new Clues("Ogre Pen: Emote", ItemID.CLUE_SCROLL_MEDIUM_10272, ClueTier.MEDIUM, null, List.of(new WorldPoint(2527, 3375, 0))),
		new Clues("Seers court house: Emote", ItemID.CLUE_SCROLL_MEDIUM_12025, ClueTier.MEDIUM, null, List.of(new WorldPoint(2735, 3469, 0))),
		new Clues("Mount Karuulm north: Emote", ItemID.CLUE_SCROLL_MEDIUM_23046, ClueTier.MEDIUM, null, List.of(new WorldPoint(1306, 3839, 0))),
		new Clues("Catherby Archery shop: Emote", ItemID.CLUE_SCROLL_MEDIUM_10276, ClueTier.MEDIUM, null, List.of(new WorldPoint(2823, 3443, 0))),
		new Clues("Draynor Village jail: Emote", ItemID.CLUE_SCROLL_MEDIUM_19780, ClueTier.MEDIUM, null, List.of(new WorldPoint(3128, 3245, 0))),
		new Clues("Catherby beach: Emote", ItemID.CLUE_SCROLL_MEDIUM_12027, ClueTier.MEDIUM, null, List.of(new WorldPoint(2853, 3424, 0))),
		new Clues("Gnome Agility: Emote", ItemID.CLUE_SCROLL_MEDIUM_10266, ClueTier.MEDIUM, null, List.of(new WorldPoint(2473, 3420, 0))),
		new Clues("Brundt: Talk", ItemID.CLUE_SCROLL_MEDIUM_7274, ClueTier.MEDIUM, null, List.of(new WorldPoint(2658, 3670, 0))),
		new Clues("Shantay Pass: Emote", ItemID.CLUE_SCROLL_MEDIUM_10278, ClueTier.MEDIUM, null, List.of(new WorldPoint(3304, 3124, 0))),
		new Clues("Canifis centre: Emote", ItemID.CLUE_SCROLL_MEDIUM_10254, ClueTier.MEDIUM, null, List.of(new WorldPoint(3492, 3488, 0))),
		new Clues("Lumbridge Swamp Caves: Emote", ItemID.CLUE_SCROLL_MEDIUM_12021, ClueTier.MEDIUM, null, List.of(new WorldPoint(3168, 9571, 0))),
		new Clues("Captain Khaled: Talk", ItemID.CLUE_SCROLL_MEDIUM_19766, ClueTier.MEDIUM, null, List.of(new WorldPoint(1845, 3754, 0))),
		new Clues("Zoo keeper: Talk", ItemID.CLUE_SCROLL_MEDIUM_2845, ClueTier.MEDIUM, null, List.of(new WorldPoint(2613, 3269, 0))),
		new Clues("Lowe: Talk", ItemID.CLUE_SCROLL_MEDIUM_2847, ClueTier.MEDIUM, null, List.of(new WorldPoint(3233, 3423, 0))),
		new Clues("Ardougne Monastery: Search", ItemID.CLUE_SCROLL_MEDIUM_3610, ClueTier.MEDIUM, null, List.of(new WorldPoint(2614, 3204, 0))),
		new Clues("Otto: Talk", ItemID.CLUE_SCROLL_MEDIUM_12055, ClueTier.MEDIUM, null, List.of(new WorldPoint(2501, 3487, 0))),
		new Clues("King Bolren: Talk", ItemID.CLUE_SCROLL_MEDIUM_2857, ClueTier.MEDIUM, null, List.of(new WorldPoint(2541, 3170, 0))),
		new Clues("Gabooty: Talk", ItemID.CLUE_SCROLL_MEDIUM_7276, ClueTier.MEDIUM, null, List.of(new WorldPoint(2790, 3066, 0))),
		new Clues("Drezel: Talk", ItemID.CLUE_SCROLL_MEDIUM_19772, ClueTier.MEDIUM, null, List.of(new WorldPoint(3440, 9895, 0))),
		new Clues("Penda: Kill", ItemID.CLUE_SCROLL_MEDIUM_3607, ClueTier.MEDIUM, null, List.of(new WorldPoint(2909, 3539, 0))),
		new Clues("Rellekka guard: Kill", ItemID.CLUE_SCROLL_MEDIUM_7298, ClueTier.MEDIUM, null, List.of(new WorldPoint(2643, 3677, 0))),
		new Clues("Luthas: Talk", ItemID.CLUE_SCROLL_MEDIUM_2858, ClueTier.MEDIUM, null, List.of(new WorldPoint(2938, 3152, 0))),
		new Clues("Eohric: Talk", ItemID.CLUE_SCROLL_MEDIUM_12071, ClueTier.MEDIUM, null, List.of(new WorldPoint(2900, 3565, 0))),
		new Clues("Jethick: Talk", ItemID.CLUE_SCROLL_MEDIUM_7278, ClueTier.MEDIUM, null, List.of(new WorldPoint(2541, 3305, 0))),
		new Clues("Horphis: Talk", ItemID.CLUE_SCROLL_MEDIUM_19742, ClueTier.MEDIUM, null, List.of(new WorldPoint(1639, 3812, 0))),
		new Clues("Ironman tutor: Talk", ItemID.CLUE_SCROLL_MEDIUM_19770, ClueTier.MEDIUM, null, List.of(new WorldPoint(3227, 3227, 0))),
		new Clues("Marisi: Talk", ItemID.CLUE_SCROLL_MEDIUM_19756, ClueTier.MEDIUM, null, List.of(new WorldPoint(1737, 3557, 0))),
		new Clues("Dominic Onion: Talk", ItemID.CLUE_SCROLL_MEDIUM_19736, ClueTier.MEDIUM, null, List.of(new WorldPoint(2609, 3116, 0))),
		new Clues("Nieve/Steve: Talk", ItemID.CLUE_SCROLL_MEDIUM_12059, ClueTier.MEDIUM, null, List.of(new WorldPoint(2432, 3423, 0))),
		new Clues("Fycie: Talk", ItemID.CLUE_SCROLL_MEDIUM_3618, ClueTier.MEDIUM, null, List.of(new WorldPoint(2630, 2997, 0))),
		new Clues("chicken: Kill", ItemID.CLUE_SCROLL_MEDIUM_2837, ClueTier.MEDIUM, null, List.of(new WorldPoint(2709, 3478, 0))),
		new Clues("guard dog: Kill", ItemID.CLUE_SCROLL_MEDIUM_2833, ClueTier.MEDIUM, null, List.of(new WorldPoint(2635, 3313, 0))),
		new Clues("Ardougne guard: Kill", ItemID.CLUE_SCROLL_MEDIUM_2835, ClueTier.MEDIUM, null, List.of(new WorldPoint(2661, 3306, 0))),
		new Clues("Yanille man: Kill", ItemID.CLUE_SCROLL_MEDIUM_2839, ClueTier.MEDIUM, null, List.of(new WorldPoint(2594, 3105, 0))),
		new Clues("Tai Bwo Wannai: Search", ItemID.CLUE_SCROLL_MEDIUM_3604, ClueTier.MEDIUM, null, List.of(new WorldPoint(2800, 3074, 0))),
		new Clues("Yanille bank: Emote", ItemID.CLUE_SCROLL_MEDIUM_10268, ClueTier.MEDIUM, null, List.of(new WorldPoint(2610, 3092, 0))),
		new Clues("TzHaar Sword shop: Emote", ItemID.CLUE_SCROLL_MEDIUM_12029, ClueTier.MEDIUM, null, List.of(new WorldPoint(2477, 5146, 0))),
		new Clues("Sir Kay: Talk", ItemID.CLUE_SCROLL_MEDIUM_12069, ClueTier.MEDIUM, null, List.of(new WorldPoint(2760, 3496, 0))),
		new Clues("Metla: Talk", ItemID.CLUE_SCROLL_MEDIUM_28907, ClueTier.MEDIUM, null, List.of(new WorldPoint(1742, 2977, 0))),
		new Clues("King Roald: Talk", ItemID.CLUE_SCROLL_MEDIUM_7284, ClueTier.MEDIUM, null, List.of(new WorldPoint(3220, 3476, 0))),
		new Clues("Kaylee: Talk", ItemID.CLUE_SCROLL_MEDIUM_12065, ClueTier.MEDIUM, null, List.of(new WorldPoint(2957, 3370, 0))),
		new Clues("Gallow: Talk", ItemID.CLUE_SCROLL_MEDIUM_19738, ClueTier.MEDIUM, null, List.of(new WorldPoint(1805, 3566, 0))),
		new Clues("Ardougne Monastery: Kill", ItemID.CLUE_SCROLL_MEDIUM_2831, ClueTier.MEDIUM, null, List.of(new WorldPoint(2615, 3209, 0))),
		new Clues("Femi: Talk", ItemID.CLUE_SCROLL_MEDIUM_3611, ClueTier.MEDIUM, null, List.of(new WorldPoint(2461, 3382, 0))),
		new Clues("CIP south-east: Dig", ItemID.CLUE_SCROLL_MEDIUM_7286, ClueTier.MEDIUM, null, List.of(new WorldPoint(2536, 3865, 0))),
		new Clues("BIP south: Dig", ItemID.CLUE_SCROLL_MEDIUM_7288, ClueTier.MEDIUM, null, List.of(new WorldPoint(3434, 3266, 0))),
		new Clues("Edmond: Talk", ItemID.CLUE_SCROLL_MEDIUM_7282, ClueTier.MEDIUM, null, List.of(new WorldPoint(2566, 3332, 0))),
		new Clues("DJP west: Dig", ItemID.CLUE_SCROLL_MEDIUM_3599, ClueTier.MEDIUM, null, List.of(new WorldPoint(2650, 3231, 0))),
		new Clues("Cook: Talk", ItemID.CLUE_SCROLL_MEDIUM_2843, ClueTier.MEDIUM, null, List.of(new WorldPoint(3208, 3213, 0))),
		new Clues("Captain Ginea: Talk", ItemID.CLUE_SCROLL_MEDIUM_19734, ClueTier.MEDIUM, null, List.of(new WorldPoint(1504, 3632, 0))),
		new Clues("Flax keeper: Talk", ItemID.CLUE_SCROLL_MEDIUM_19752, ClueTier.MEDIUM, null, List.of(new WorldPoint(2744, 3444, 0))),
		new Clues("Party Pete: Talk", ItemID.CLUE_SCROLL_MEDIUM_2856, ClueTier.MEDIUM, null, List.of(new WorldPoint(3047, 3376, 0))),
		new Clues("Mausoleum: Emote", ItemID.CLUE_SCROLL_MEDIUM_10256, ClueTier.MEDIUM, null, List.of(new WorldPoint(3504, 3576, 0))),
		new Clues("Wizards' Tower: Kill", ItemID.CLUE_SCROLL_MEDIUM_7301, ClueTier.MEDIUM, null, List.of(new WorldPoint(3109, 3164, 0))),
		new Clues("Professor Gracklebone: Talk", ItemID.CLUE_SCROLL_MEDIUM_19762, ClueTier.MEDIUM, null, List.of(new WorldPoint(1625, 3802, 0))),
		new Clues("Squire: Talk", ItemID.CLUE_SCROLL_MEDIUM_19754, ClueTier.MEDIUM, null, List.of(new WorldPoint(2977, 3343, 0))),
		new Clues("Karim: Talk", ItemID.CLUE_SCROLL_MEDIUM_2849, ClueTier.MEDIUM, null, List.of(new WorldPoint(3273, 3181, 0))),
		new Clues("Clerris: Talk", ItemID.CLUE_SCROLL_MEDIUM_19740, ClueTier.MEDIUM, null, List.of(new WorldPoint(1761, 3850, 0))),
		new Clues("Taria: Talk", ItemID.CLUE_SCROLL_MEDIUM_12063, ClueTier.MEDIUM, null, List.of(new WorldPoint(2940, 3223, 0))),
		new Clues("Dunstan: Talk", ItemID.CLUE_SCROLL_MEDIUM_19748, ClueTier.MEDIUM, null, List.of(new WorldPoint(2919, 3574, 0))),
		new Clues("Hosidius apples: Search", ItemID.CLUE_SCROLL_MEDIUM_25783, ClueTier.MEDIUM, null, List.of(new WorldPoint(1718, 3626, 0))),
		new Clues("Brimhaven pirate: Kill", ItemID.CLUE_SCROLL_MEDIUM_3605, ClueTier.MEDIUM, null, List.of(new WorldPoint(2794, 3185, 0))),
		new Clues("Catherby bank: Emote", ItemID.CLUE_SCROLL_MEDIUM_12023, ClueTier.MEDIUM, null, List.of(new WorldPoint(2808, 3440, 0))),
		new Clues("Draynor bank south: Dig", ItemID.CLUE_SCROLL_MEDIUM_2827, ClueTier.MEDIUM, null, List.of(new WorldPoint(3092, 3226, 0))),
		new Clues("ALP south-east: Dig", ItemID.CLUE_SCROLL_MEDIUM_7292, ClueTier.MEDIUM, null, List.of(new WorldPoint(2578, 3597, 0))),
		new Clues("Donovan: Talk", ItemID.CLUE_SCROLL_MEDIUM_2855, ClueTier.MEDIUM, null, List.of(new WorldPoint(2743, 3578, 0))),
		new Clues("Hajedy: Talk", ItemID.CLUE_SCROLL_MEDIUM_2848, ClueTier.MEDIUM, null, List.of(new WorldPoint(2779, 3211, 0))),
		new Clues("Kangai Mau: Talk", ItemID.CLUE_SCROLL_MEDIUM_3617, ClueTier.MEDIUM, null, List.of(new WorldPoint(2791, 3183, 0))),
		new Clues("Roavar: Talk", ItemID.CLUE_SCROLL_MEDIUM_3615, ClueTier.MEDIUM, null, List.of(new WorldPoint(3494, 3474, 0))),
		new Clues("Uglug Nar: Talk", ItemID.CLUE_SCROLL_MEDIUM_2841, ClueTier.MEDIUM, null, List.of(new WorldPoint(2444, 3049, 0))),
		new Clues("Ulizius: Talk", ItemID.CLUE_SCROLL_MEDIUM_3614, ClueTier.MEDIUM, null, List.of(new WorldPoint(3444, 3461, 0))),
		new Clues("Gnome ball ref: Talk", ItemID.CLUE_SCROLL_MEDIUM_2853, ClueTier.MEDIUM, null, List.of(new WorldPoint(2386, 3487, 0))),
		new Clues("Barbarian Village: Emote", ItemID.CLUE_SCROLL_MEDIUM_10258, ClueTier.MEDIUM, null, List.of(new WorldPoint(3105, 3420, 0))),
		new Clues("Dockmaster: Talk", ItemID.CLUE_SCROLL_MEDIUM_19744, ClueTier.MEDIUM, null, List.of(new WorldPoint(1822, 3739, 0))),
		new Clues("Hickton: Talk", ItemID.CLUE_SCROLL_MEDIUM_12067, ClueTier.MEDIUM, null, List.of(new WorldPoint(2822, 3442, 0))),
		new Clues("ALS crate: Search", ItemID.CLUE_SCROLL_MEDIUM_3598, ClueTier.MEDIUM, null, List.of(new WorldPoint(2658, 3488, 0))),
		new Clues("Clock Tower: Search", ItemID.CLUE_SCROLL_MEDIUM_3601, ClueTier.MEDIUM, null, List.of(new WorldPoint(2565, 3248, 0))),
		new Clues("Barbarian: Kill", ItemID.CLUE_SCROLL_MEDIUM_7296, ClueTier.MEDIUM, null, List.of(new WorldPoint(3082, 3419, 0))),
		new Clues("Observatory: Emote", ItemID.CLUE_SCROLL_MEDIUM_10270, ClueTier.MEDIUM, null, List.of(new WorldPoint(2439, 3161, 0))),
		new Clues("Ranging Guild: Search", ItemID.CLUE_SCROLL_MEDIUM_7304, ClueTier.MEDIUM, null, List.of(new WorldPoint(2671, 3437, 0))),
		new Clues("Desert Mining Camp: Search", ItemID.CLUE_SCROLL_MEDIUM_7303, ClueTier.MEDIUM, null, List.of(new WorldPoint(3289, 3022, 0))),
		new Clues("Unobtainable", ItemID.CLUE_SCROLL_MEDIUM_2829, ClueTier.MEDIUM, null, List.of(new WorldPoint(2702, 3429, 0))),
		new Clues("Fishing Platform: Serach", ItemID.CLUE_SCROLL_MEDIUM_7300, ClueTier.MEDIUM, null, List.of(new WorldPoint(2764, 3273, 0))),
		new Clues("Drunken soldier: Talk", ItemID.CLUE_SCROLL_MEDIUM_25784, ClueTier.MEDIUM, null, List.of(new WorldPoint(1551, 3565, 0))),
		new Clues("Crafting Guild west: Dig", ItemID.CLUE_SCROLL_MEDIUM_3596, ClueTier.MEDIUM, null, List.of(new WorldPoint(2907, 3295, 0))),
		new Clues("Wizard Traiborn: Talk", ItemID.CLUE_SCROLL_MEDIUM_19764, ClueTier.MEDIUM, null, List.of(new WorldPoint(3112, 3162, 0))),
		new Clues("Castle Wars: Emote", ItemID.CLUE_SCROLL_MEDIUM_10262, ClueTier.MEDIUM, null, List.of(new WorldPoint(2440, 3092, 0))),
		new Clues("Arceuus Library: Emote", ItemID.CLUE_SCROLL_MEDIUM_19778, ClueTier.MEDIUM, null, List.of(new WorldPoint(1632, 3807, 0))),
		new Clues("Song: Karamja Jam", ItemID.CLUE_SCROLL_MEDIUM_23138, ClueTier.MEDIUM, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Song: Faerie", ItemID.CLUE_SCROLL_MEDIUM_23139, ClueTier.MEDIUM, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Song: Forgotten", ItemID.CLUE_SCROLL_MEDIUM_23140, ClueTier.MEDIUM, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Song: Catch Me If You Can", ItemID.CLUE_SCROLL_MEDIUM_23141, ClueTier.MEDIUM, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Song: Cave of Beasts", ItemID.CLUE_SCROLL_MEDIUM_23142, ClueTier.MEDIUM, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Song: Devils May Care", ItemID.CLUE_SCROLL_MEDIUM_23143, ClueTier.MEDIUM, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Twilight Temple: Emote", ItemID.CLUE_SCROLL_MEDIUM_29857, ClueTier.MEDIUM, null, List.of(new WorldPoint(1672, 3284, 0))),
		new Clues("Proudspire river: Emote", ItemID.CLUE_SCROLL_MEDIUM_29858, ClueTier.MEDIUM, null, List.of(new WorldPoint(1626, 3241, 0))),
		new Clues("6859", ItemID.CHALLENGE_SCROLL_MEDIUM, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint( 2444, 3049, 0))),
		new Clues("9", ItemID.CHALLENGE_SCROLL_MEDIUM_2844, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3208, 3213, 0))),
		new Clues("40", ItemID.CHALLENGE_SCROLL_MEDIUM_2846, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2613, 3269, 0))),
		new Clues("5", ItemID.CHALLENGE_SCROLL_MEDIUM_2850, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3273, 3181, 0))),
		new Clues("48", ItemID.CHALLENGE_SCROLL_MEDIUM_2852, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3013, 3501, 0))),
		new Clues("5096", ItemID.CHALLENGE_SCROLL_MEDIUM_2854, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2386, 3487, 0))),
		new Clues("4", ItemID.CHALLENGE_SCROLL_MEDIUM_7275, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2658, 3670, 0))),
		new Clues("11", ItemID.CHALLENGE_SCROLL_MEDIUM_7277, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2790, 3066, 0))),
		new Clues("38", ItemID.CHALLENGE_SCROLL_MEDIUM_7279, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2541, 3305, 0))),
		new Clues("11", ItemID.CHALLENGE_SCROLL_MEDIUM_7281, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2715, 3302, 0))),
		new Clues("3", ItemID.CHALLENGE_SCROLL_MEDIUM_7283, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2566, 3332, 0))),
		new Clues("24", ItemID.CHALLENGE_SCROLL_MEDIUM_7285, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3220, 3476, 0))),
		new Clues("2", ItemID.CHALLENGE_SCROLL_MEDIUM_12056, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2501, 3487, 0))),
		new Clues("5", ItemID.CHALLENGE_SCROLL_MEDIUM_12058, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3217, 3434, 0))),
		new Clues("2", ItemID.CHALLENGE_SCROLL_MEDIUM_12060, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2432, 3423, 0))),
		new Clues("6", ItemID.CHALLENGE_SCROLL_MEDIUM_12062, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3026, 3216, 0))),
		new Clues("7", ItemID.CHALLENGE_SCROLL_MEDIUM_12064, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2940, 3223, 0))),
		new Clues("18", ItemID.CHALLENGE_SCROLL_MEDIUM_12066, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2957, 3370, 0))),
		new Clues("2", ItemID.CHALLENGE_SCROLL_MEDIUM_12068, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2822, 3442, 0))),
		new Clues("6", ItemID.CHALLENGE_SCROLL_MEDIUM_12070, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2760, 3496, 0))),
		new Clues("36", ItemID.CHALLENGE_SCROLL_MEDIUM_12072, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2900, 3565, 0))),
		new Clues("113", ItemID.CHALLENGE_SCROLL_MEDIUM_19735, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1504, 3632, 0))),
		new Clues("9500", ItemID.CHALLENGE_SCROLL_MEDIUM_19737, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2609, 3116, 0))),
		new Clues("12", ItemID.CHALLENGE_SCROLL_MEDIUM_19739, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1805, 3566, 0))),
		new Clues("738", ItemID.CHALLENGE_SCROLL_MEDIUM_19741, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1761, 3850, 0))),
		new Clues("1", ItemID.CHALLENGE_SCROLL_MEDIUM_19743, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1639, 3812, 0))),
		new Clues("5", ItemID.CHALLENGE_SCROLL_MEDIUM_19745, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1822, 3739, 0))),
		new Clues("19 or 20", ItemID.CHALLENGE_SCROLL_MEDIUM_19747, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3242, 3207, 0))),
		new Clues("8", ItemID.CHALLENGE_SCROLL_MEDIUM_19749, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2919, 3574, 0))),
		new Clues("0", ItemID.CHALLENGE_SCROLL_MEDIUM_19751, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3209, 3392, 0))),
		new Clues("676", ItemID.CHALLENGE_SCROLL_MEDIUM_19753, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2744, 3444, 0))),
		new Clues("654", ItemID.CHALLENGE_SCROLL_MEDIUM_19755, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2977, 3343, 0))),
		new Clues("5", ItemID.CHALLENGE_SCROLL_MEDIUM_19757, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1737, 3557, 0))),
		new Clues("2", ItemID.CHALLENGE_SCROLL_MEDIUM_19759, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1814, 3851, 0))),
		new Clues("9", ItemID.CHALLENGE_SCROLL_MEDIUM_19763, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1625, 3802, 0))),
		new Clues("3150", ItemID.CHALLENGE_SCROLL_MEDIUM_19765, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3112, 3162, 0))),
		new Clues("5", ItemID.CHALLENGE_SCROLL_MEDIUM_19767, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1845, 3754, 0))),
		new Clues("399", ItemID.CHALLENGE_SCROLL_MEDIUM_19769, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3354, 2974, 0))),
		new Clues("666", ItemID.CHALLENGE_SCROLL_MEDIUM_19771, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3227, 3227, 0))),
		new Clues("7", ItemID.CHALLENGE_SCROLL_MEDIUM_19773, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(3440, 9895, 0))),
		new Clues("4", ItemID.CHALLENGE_SCROLL_MEDIUM_23132, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1841, 3803, 0))),
		new Clues("6", ItemID.CHALLENGE_SCROLL_MEDIUM_23134, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(2553, 2868, 0))),
		new Clues("598", ItemID.CHALLENGE_SCROLL_MEDIUM_25785, ClueTier.MEDIUM_CHALLENGE, null, List.of(new WorldPoint(1551, 3565, 0))),
		new Clues("Varrock church: Search", ItemID.KEY_MEDIUM, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(3256, 3487, 0))),
		new Clues("Ardougne pub: Search", ItemID.KEY_MEDIUM_2834, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2574, 3326, 1))),
		new Clues("Jerico's house: Search", ItemID.KEY_MEDIUM_2836, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2611, 3324, 1))),
		new Clues("Seers' Village house: Sarch", ItemID.KEY_MEDIUM_2838, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2709, 3478, 0))),
		new Clues("Yanille house: Search", ItemID.KEY_MEDIUM_2840, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2593, 3108, 1))),
		new Clues("Brimhaven south-east: Search", ItemID.KEY_MEDIUM_3606, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2809, 3165, 1))),
		new Clues("Dunstan's house: Search", ItemID.KEY_MEDIUM_3608, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2921, 3577, 0))),
		new Clues("Exam Centre: Search", ItemID.KEY_MEDIUM_7297, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(3353, 3332, 0))),
		new Clues("Lighthouse: Search", ItemID.KEY_MEDIUM_7299, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(2512, 3641, 1))),
		new Clues("Wizards' Tower: Search", ItemID.KEY_MEDIUM_7302, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(3116, 9562, 0))),
		new Clues("Osten's clothing: Search", ItemID.KEY_MEDIUM_19761, ClueTier.MEDIUM_KEY, null, List.of(new WorldPoint(1506, 3590, 2))),
		new Clues("Tyras Camp: Dig", ItemID.CLUE_SCROLL_HARD_3560, ClueTier.HARD, null, List.of(new WorldPoint(2209, 3161, 0))),
		new Clues("Iorwerth Camp south: Dig", ItemID.CLUE_SCROLL_HARD_3562, ClueTier.HARD, null, List.of(new WorldPoint(2181, 3206, 0))),
		new Clues("CLP: Dig", ItemID.CLUE_SCROLL_HARD_12554, ClueTier.HARD, null, List.of(new WorldPoint(3081, 3209, 0))),
		new Clues("Behind Emir's Arena: Dig", ItemID.CLUE_SCROLL_HARD_3554, ClueTier.HARD, null, List.of(new WorldPoint(3399, 3246, 0))),
		new Clues("AIR: Dig", ItemID.CLUE_SCROLL_HARD_12558, ClueTier.HARD, null, List.of(new WorldPoint(2699, 3251, 0))),
		new Clues("Burgh de Rott north-east 1: Dig", ItemID.CLUE_SCROLL_HARD_19844, ClueTier.HARD, null, List.of(new WorldPoint(3546, 3251, 0))),
		new Clues("Burgh de Rott north-east 2: Dig", ItemID.CLUE_SCROLL_HARD_12562, ClueTier.HARD, null, List.of(new WorldPoint(3544, 3256, 0))),
		new Clues("Crandor: Dig", ItemID.CLUE_SCROLL_HARD_12560, ClueTier.HARD, null, List.of(new WorldPoint(2841, 3267, 0))),
		new Clues("Bedabin Camp: Dig", ItemID.CLUE_SCROLL_HARD_3552, ClueTier.HARD, null, List.of(new WorldPoint(3168, 3041, 0))),
		new Clues("Gu'Tanoth: Dig", ItemID.CLUE_SCROLL_HARD_3546, ClueTier.HARD, null, List.of(new WorldPoint(2542, 3031, 0))),
		new Clues("Gu'Tanoth island: Dig", ItemID.CLUE_SCROLL_HARD_3548, ClueTier.HARD, null, List.of(new WorldPoint(2581, 3030, 0))),
		new Clues("DKP Ship yard: Dig", ItemID.CLUE_SCROLL_HARD_3538, ClueTier.HARD, null, List.of(new WorldPoint(2961, 3024, 0))),
		new Clues("Arandar pass: Dig", ItemID.CLUE_SCROLL_HARD_7256, ClueTier.HARD, null, List.of(new WorldPoint(2339, 3311, 0))),
		new Clues("Unobtainable: Dig", ItemID.CLUE_SCROLL_HARD_3550, ClueTier.HARD, null, List.of(new WorldPoint(3288, 2982, 0))),
		new Clues("Nature Spirit's grotto: Dig", ItemID.CLUE_SCROLL_HARD_3542, ClueTier.HARD, null, List.of(new WorldPoint(3440, 3341, 0))),
		new Clues("Cairn Isle: Dig", ItemID.CLUE_SCROLL_HARD_3530, ClueTier.HARD, null, List.of(new WorldPoint(2763, 2974, 0))),
		new Clues("Desert Bandit Camp: Dig", ItemID.CLUE_SCROLL_HARD_7258, ClueTier.HARD, null, List.of(new WorldPoint(3138, 2969, 0))),
		new Clues("Karamja south-east: Dig", ItemID.CLUE_SCROLL_HARD_3540, ClueTier.HARD, null, List.of(new WorldPoint(2924, 2963, 0))),
		new Clues("Kharazi Jungle pool: Dig", ItemID.CLUE_SCROLL_HARD_3534, ClueTier.HARD, null, List.of(new WorldPoint(2838, 2914, 0))),
		new Clues("BKR: Dig", ItemID.CLUE_SCROLL_HARD_3544, ClueTier.HARD, null, List.of(new WorldPoint(3441, 3419, 0))),
		new Clues("Kharazi Jungle south-east: Dig", ItemID.CLUE_SCROLL_HARD_3536, ClueTier.HARD, null, List.of(new WorldPoint(2950, 2902, 0))),
		new Clues("Kharazi Jungle south-west: Dig", ItemID.CLUE_SCROLL_HARD_3532, ClueTier.HARD, null, List.of(new WorldPoint(2775, 2891, 0))),
		new Clues("Shayziens' Wall: Dig", ItemID.CLUE_SCROLL_HARD_25790, ClueTier.HARD, null, List.of(new WorldPoint(1409, 3483, 0))),
		new Clues("Ferox Enclave: Dig", ItemID.CLUE_SCROLL_HARD_7262, ClueTier.HARD, null, List.of(new WorldPoint(3113, 3602, 0))),
		new Clues("Trollheim: Dig", ItemID.CLUE_SCROLL_HARD_3526, ClueTier.HARD, null, List.of(new WorldPoint(2892, 3675, 0))),
		new Clues("Graveyard of Shadows: Dig", ItemID.CLUE_SCROLL_HARD_2743, ClueTier.HARD, null, List.of(new WorldPoint(3168, 3677, 0))),
		new Clues("Troll Stronghold: Dig", ItemID.CLUE_SCROLL_HARD_3528, ClueTier.HARD, null, List.of(new WorldPoint(2853, 3690, 0))),
		new Clues("Wilderness salamanders 1: Dig", ItemID.CLUE_SCROLL_HARD_7264, ClueTier.HARD, null, List.of(new WorldPoint(3305, 3692, 0))),
		new Clues("Bandit Camp: Dig", ItemID.CLUE_SCROLL_HARD_2745, ClueTier.HARD, null, List.of(new WorldPoint(3055, 3696, 0))),
		new Clues("Wilderness salamanders 2: Dig", ItemID.CLUE_SCROLL_HARD_12564, ClueTier.HARD, null, List.of(new WorldPoint(3302, 3696, 0))),
		new Clues("Piscatoris Fishing Colony: Dig", ItemID.CLUE_SCROLL_HARD_23167, ClueTier.HARD, null, List.of(new WorldPoint(2341, 3697, 0))),
		new Clues("Lizardman Canyon: Dig", ItemID.CLUE_SCROLL_HARD_19840, ClueTier.HARD, null, List.of(new WorldPoint(1479, 3699, 0))),
		new Clues("DKS west: Dig", ItemID.CLUE_SCROLL_HARD_7266, ClueTier.HARD, null, List.of(new WorldPoint(2712, 3732, 0))),
		new Clues("Forgotten Cemetery: Dig", ItemID.CLUE_SCROLL_HARD_7260, ClueTier.HARD, null, List.of(new WorldPoint(2970, 3749, 0))),
		new Clues("Bandit mining site: Dig", ItemID.CLUE_SCROLL_HARD_3556, ClueTier.HARD, null, List.of(new WorldPoint(3094, 3764, 0))),
		new Clues("Silk Chasm south: Dig", ItemID.CLUE_SCROLL_HARD_2747, ClueTier.HARD, null, List.of(new WorldPoint(3311, 3769, 0))),
		new Clues("Black Chinchompa: Dig", ItemID.CLUE_SCROLL_HARD_23168, ClueTier.HARD, null, List.of(new WorldPoint(3143, 3774, 0))),
		new Clues("Burning Man: Dig", ItemID.CLUE_SCROLL_HARD_19842, ClueTier.HARD, null, List.of(new WorldPoint(1460, 3782, 0))),
		new Clues("Lava Dragon Isle: Dig", ItemID.CLUE_SCROLL_HARD_2741, ClueTier.HARD, null, List.of(new WorldPoint(3244, 3792, 0))),
		new Clues("Black Chinchompa north: Dig", ItemID.CLUE_SCROLL_HARD_2733, ClueTier.HARD, null, List.of(new WorldPoint(3140, 3804, 0))),
		new Clues("Chaos Temple 38: Dig", ItemID.CLUE_SCROLL_HARD_2735, ClueTier.HARD, null, List.of(new WorldPoint(2946, 3819, 0))),
		new Clues("Museum Camp east: Dig", ItemID.CLUE_SCROLL_HARD_21526, ClueTier.HARD, null, List.of(new WorldPoint(3771, 3825, 0))),
		new Clues("KBD entrance: Dig", ItemID.CLUE_SCROLL_HARD_2737, ClueTier.HARD, null, List.of(new WorldPoint(3013, 3846, 0))),
		new Clues("Wilderness runite: Dig", ItemID.CLUE_SCROLL_HARD_2723, ClueTier.HARD, null, List.of(new WorldPoint(3058, 3884, 0))),
		new Clues("Demonic Ruins: Dig", ItemID.CLUE_SCROLL_HARD_2731, ClueTier.HARD, null, List.of(new WorldPoint(3290, 3889, 0))),
		new Clues("Fossil Island island: Dig", ItemID.CLUE_SCROLL_HARD_21527, ClueTier.HARD, null, List.of(new WorldPoint(3770, 3897, 0))),
		new Clues("AJS: Dig", ItemID.CLUE_SCROLL_HARD_12556, ClueTier.HARD, null, List.of(new WorldPoint(2505, 3899, 0))),
		new Clues("Frozen Waste Plateau: Dig", ItemID.CLUE_SCROLL_HARD_23169, ClueTier.HARD, null, List.of(new WorldPoint(2970, 3913, 0))),
		new Clues("Rogues' Castle: Dig", ItemID.CLUE_SCROLL_HARD_3558, ClueTier.HARD, null, List.of(new WorldPoint(3285, 3942, 0))),
		new Clues("Wilderness lever north: Dig", ItemID.CLUE_SCROLL_HARD_2727, ClueTier.HARD, null, List.of(new WorldPoint(3159, 3959, 0))),
		new Clues("Pirates' Hideout: Dig", ItemID.CLUE_SCROLL_HARD_2739, ClueTier.HARD, null, List.of(new WorldPoint(3039, 3960, 0))),
		new Clues("Wilderness Agility west: Dig", ItemID.CLUE_SCROLL_HARD_2725, ClueTier.HARD, null, List.of(new WorldPoint(2987, 3963, 0))),
		new Clues("Magic axe hut: Dig", ItemID.CLUE_SCROLL_HARD_2729, ClueTier.HARD, null, List.of(new WorldPoint(3189, 3963, 0))),
		new Clues("Wilderness spider hill: Dig", ItemID.CLUE_SCROLL_HARD_2788, ClueTier.HARD, null, List.of(new WorldPoint(3170, 3885, 0))),
		new Clues("AJP: Dig", ItemID.CLUE_SCROLL_HARD_28915, ClueTier.HARD, null, List.of(new WorldPoint(1646, 3012, 0))),
		new Clues("Abbot Langley: Talk", ItemID.CLUE_SCROLL_HARD_2793, ClueTier.HARD, null, List.of(new WorldPoint(3052, 3490, 0))),
		new Clues("General Hining: Talk", ItemID.CLUE_SCROLL_HARD_3564, ClueTier.HARD, null, List.of(new WorldPoint(2186, 3148, 0))),
		new Clues("Almera's house: Search", ItemID.CLUE_SCROLL_HARD_3573, ClueTier.HARD, null, List.of(new WorldPoint(2523, 3493, 0))),
		new Clues("AIQ: Dig", ItemID.CLUE_SCROLL_HARD_19862, ClueTier.HARD, null, List.of(new WorldPoint(3000, 3110, 0))),
		new Clues("AIR: Dig", ItemID.CLUE_SCROLL_HARD_19864, ClueTier.HARD, null, List.of(new WorldPoint(2702, 3246, 0))),
		new Clues("ALP: Dig", ItemID.CLUE_SCROLL_HARD_19866, ClueTier.HARD, null, List.of(new WorldPoint(2504, 3633, 0))),
		new Clues("Aggie's house: Dig", ItemID.CLUE_SCROLL_HARD_2780, ClueTier.HARD, null, List.of(new WorldPoint(3085, 3255, 0))),
		new Clues("Etceteria castle: Dig", ItemID.CLUE_SCROLL_HARD_7243, ClueTier.HARD, null, List.of(new WorldPoint(2591, 3879, 0))),
		new Clues("Brambickle: Talk", ItemID.CLUE_SCROLL_HARD_19894, ClueTier.HARD, null, List.of(new WorldPoint(2783, 3861, 0))),
		new Clues("BIP: Dig", ItemID.CLUE_SCROLL_HARD_19868, ClueTier.HARD, null, List.of(new WorldPoint(3407, 3330, 0))),
		new Clues("BJR: Dig", ItemID.CLUE_SCROLL_HARD_19870, ClueTier.HARD, null, List.of(new WorldPoint(2648, 4729, 0))),
		new Clues("BLP: Dig", ItemID.CLUE_SCROLL_HARD_19872, ClueTier.HARD, null, List.of(new WorldPoint(2439, 5132, 0))),
		new Clues("Lumbridge Guide: Talk", ItemID.CLUE_SCROLL_HARD_19886, ClueTier.HARD, null, List.of(new WorldPoint(3238, 3220, 0))),
		new Clues("Arnold Lydspor: Talk", ItemID.CLUE_SCROLL_HARD_23170, ClueTier.HARD, null, List.of(new WorldPoint(2329, 3689, 0))),
		new Clues("Soar Leader Pitri: Talk", ItemID.CLUE_SCROLL_HARD_28916, ClueTier.HARD, null, List.of(new WorldPoint(1558, 3046, 0))),
		new Clues("Bolkoy: Talk", ItemID.CLUE_SCROLL_HARD_7270, ClueTier.HARD, null, List.of(new WorldPoint(2529, 3162, 0))),
		new Clues("Kharazi Jungle east: Emote", ItemID.CLUE_SCROLL_HARD_12544, ClueTier.HARD, null, List.of(new WorldPoint(2954, 2933, 0))),
		new Clues("Fishing Guild bank: Emote", ItemID.CLUE_SCROLL_HARD_10236, ClueTier.HARD, null, List.of(new WorldPoint(2588, 3419, 0))),
		new Clues("Shilo Village bank: Emote", ItemID.CLUE_SCROLL_HARD_10252, ClueTier.HARD, null, List.of(new WorldPoint(2852, 2952, 0))),
		new Clues("Lighthouse top: Emote", ItemID.CLUE_SCROLL_HARD_10238, ClueTier.HARD, null, List.of(new WorldPoint(2511, 3641, 0))),
		new Clues("Gnome Coach: Talk", ItemID.CLUE_SCROLL_HARD_7268, ClueTier.HARD, null, List.of(new WorldPoint(2395, 3486, 0))),
		new Clues("CIS: Dig", ItemID.CLUE_SCROLL_HARD_19880, ClueTier.HARD, null, List.of(new WorldPoint(1630, 3868, 0))),
		new Clues("CKP: Dig", ItemID.CLUE_SCROLL_HARD_19874, ClueTier.HARD, null, List.of(new WorldPoint(2073, 4846, 0))),
		new Clues("Prospector Percy: Talk", ItemID.CLUE_SCROLL_HARD_12566, ClueTier.HARD, null, List.of(new WorldPoint(3061, 3377, 0))),
		new Clues("Agility pyramid: Emote", ItemID.CLUE_SCROLL_HARD_12550, ClueTier.HARD, null, List.of(new WorldPoint(3043, 4697, 0))),
		new Clues("Heckel Funch: Talk", ItemID.CLUE_SCROLL_HARD_3575, ClueTier.HARD, null, List.of(new WorldPoint(2490, 3488, 0))),
		new Clues("Gnome trainer: Talk", ItemID.CLUE_SCROLL_HARD_3577, ClueTier.HARD, null, List.of(new WorldPoint(2469, 3435, 0))),
		new Clues("Miner Magnus: Talk", ItemID.CLUE_SCROLL_HARD_19846, ClueTier.HARD, null, List.of(new WorldPoint(2527, 3891, 0))),
		new Clues("Edgeville Yew: Dig", ItemID.CLUE_SCROLL_HARD_2774, ClueTier.HARD, null, List.of(new WorldPoint(3089, 3468, 0))),
		new Clues("Mort'ton centre: Dig", ItemID.CLUE_SCROLL_HARD_7245, ClueTier.HARD, null, List.of(new WorldPoint(3488, 3289, 0))),
		new Clues("Daer Krand: Talk", ItemID.CLUE_SCROLL_HARD_24493, ClueTier.HARD, null, List.of(new WorldPoint(3728, 3302, 0))),
		new Clues("Dark Mage: Talk", ItemID.CLUE_SCROLL_HARD_19888, ClueTier.HARD, null, List.of(new WorldPoint(3039, 4835, 0))),
		new Clues("DIP: Dig", ItemID.CLUE_SCROLL_HARD_19876, ClueTier.HARD, null, List.of(new WorldPoint(3041, 4770, 0))),
		new Clues("DKS: Dig", ItemID.CLUE_SCROLL_HARD_19878, ClueTier.HARD, null, List.of(new WorldPoint(2747, 3720, 0))),
		new Clues("Doomsayer: Talk", ItemID.CLUE_SCROLL_HARD_12576, ClueTier.HARD, null, List.of(new WorldPoint(3230, 3230, 0))),
		new Clues("Drunken Dwarf: Talk", ItemID.CLUE_SCROLL_HARD_19890, ClueTier.HARD, null, List.of(new WorldPoint(2913, 10221, 0))),
		new Clues("strange old man: Talk", ItemID.CLUE_SCROLL_HARD_12568, ClueTier.HARD, null, List.of(new WorldPoint(3564, 3288, 0))),
		new Clues("Great pyramid: Emote", ItemID.CLUE_SCROLL_HARD_10242, ClueTier.HARD, null, List.of(new WorldPoint(3294, 2781, 0))),
		new Clues("Forthos Dungeon: Dig", ItemID.CLUE_SCROLL_HARD_25791, ClueTier.HARD, null, List.of(new WorldPoint(1820, 9935, 0))),
		new Clues("Champions' Guild: Dig", ItemID.CLUE_SCROLL_HARD_19848, ClueTier.HARD, null, List.of(new WorldPoint(3195, 3357, 0))),
		new Clues("Lumbridge mill: Search", ItemID.CLUE_SCROLL_HARD_2785, ClueTier.HARD, null, List.of(new WorldPoint(3166, 3309, 0))),
		new Clues("Fairy Queen: Talk", ItemID.CLUE_SCROLL_HARD_19910, ClueTier.HARD, null, List.of(new WorldPoint(2347, 4435, 0))),
		new Clues("General Bentnoze: Talk", ItemID.CLUE_SCROLL_HARD_2799, ClueTier.HARD, null, List.of(new WorldPoint(2957, 3511, 0))),
		new Clues("Saniboch: Talk", ItemID.CLUE_SCROLL_HARD_12578, ClueTier.HARD, null, List.of(new WorldPoint(2745, 3151, 0))),
		new Clues("Fairy Godfather: Talk", ItemID.CLUE_SCROLL_HARD_19908, ClueTier.HARD, null, List.of(new WorldPoint(2446, 4428, 0))),
		new Clues("Brother Kojo: Talk", ItemID.CLUE_SCROLL_HARD_19854, ClueTier.HARD, null, List.of(new WorldPoint(2570, 3250, 0))),
		new Clues("Exam Centre: Emote", ItemID.CLUE_SCROLL_HARD_12542, ClueTier.HARD, null, List.of(new WorldPoint(3362, 3340, 0))),
		new Clues("Uzer crate: Search", ItemID.CLUE_SCROLL_HARD_7253, ClueTier.HARD, null, List.of(new WorldPoint(3478, 3091, 0))),
		new Clues("West Varrock bank: Dig", ItemID.CLUE_SCROLL_HARD_2776, ClueTier.HARD, null, List.of(new WorldPoint(3191, 9825, 0))),
		new Clues("Spirit tree: Talk", ItemID.CLUE_SCROLL_HARD_19858, ClueTier.HARD, null, List.of(new WorldPoint(2544, 3170, 0))),
		new Clues("Graveyard of Shadows: Dig", ItemID.CLUE_SCROLL_HARD_2786, ClueTier.HARD, null, List.of(new WorldPoint(3174, 3663, 0))),
		new Clues("Ellena: Talk", ItemID.CLUE_SCROLL_HARD_12581, ClueTier.HARD, null, List.of(new WorldPoint(2860, 3431, 0))),
		new Clues("Gunnjorn: Talk", ItemID.CLUE_SCROLL_HARD_23172, ClueTier.HARD, null, List.of(new WorldPoint(2541, 3548, 0))),
		new Clues("Hamid: Talk", ItemID.CLUE_SCROLL_HARD_3568, ClueTier.HARD, null, List.of(new WorldPoint(3376, 3284, 0))),
		new Clues("Gerrant: Talk", ItemID.CLUE_SCROLL_HARD_2778, ClueTier.HARD, null, List.of(new WorldPoint(3014, 3222, 0))),
		new Clues("Ranging Guild hay: Search", ItemID.CLUE_SCROLL_HARD_7254, ClueTier.HARD, null, List.of(new WorldPoint(2672, 3416, 0))),
		new Clues("Dark Warriors' Fortress: Search", ItemID.CLUE_SCROLL_HARD_3525, ClueTier.HARD, null, List.of(new WorldPoint(3026, 3628, 0))),
		new Clues("Observatory Dungeon: Search", ItemID.CLUE_SCROLL_HARD_3524, ClueTier.HARD, null, List.of(new WorldPoint(2457, 3182, 0))),
		new Clues("Head chef: Talk", ItemID.CLUE_SCROLL_HARD_19853, ClueTier.HARD, null, List.of(new WorldPoint(3143, 3445, 0))),
		new Clues("West Ardougne: Dig", ItemID.CLUE_SCROLL_HARD_3522, ClueTier.HARD, null, List.of(new WorldPoint(2488, 3308, 0))),
		new Clues("Dwarven Mine: Search", ItemID.CLUE_SCROLL_HARD_7251, ClueTier.HARD, null, List.of(new WorldPoint(3041, 9820, 0))),
		new Clues("Jiggig: Emote", ItemID.CLUE_SCROLL_HARD_12548, ClueTier.HARD, null, List.of(new WorldPoint(2477, 3047, 0))),
		new Clues("Mountain Camp: Emote", ItemID.CLUE_SCROLL_HARD_10248, ClueTier.HARD, null, List.of(new WorldPoint(2812, 3681, 0))),
		new Clues("Mawnis Burowgar: Talk", ItemID.CLUE_SCROLL_HARD_19856, ClueTier.HARD, null, List.of(new WorldPoint(2336, 3799, 0))),
		new Clues("Brother Omad: Talk", ItemID.CLUE_SCROLL_HARD_12574, ClueTier.HARD, null, List.of(new WorldPoint(2606, 3211, 0))),
		new Clues("Lammy Langle: Talk", ItemID.CLUE_SCROLL_HARD_19896, ClueTier.HARD, null, List.of(new WorldPoint(1688, 3540, 0))),
		new Clues("Karamja Volcano: Dig", ItemID.CLUE_SCROLL_HARD_3580, ClueTier.HARD, null, List.of(new WorldPoint(2832, 9586, 0))),
		new Clues("Dwarf Cannon: Search", ItemID.CLUE_SCROLL_HARD_3574, ClueTier.HARD, null, List.of(new WorldPoint(2576, 3464, 0))),
		new Clues("moss giants: Dig", ItemID.CLUE_SCROLL_HARD_2790, ClueTier.HARD, null, List.of(new WorldPoint(3161, 9904, 0))),
		new Clues("Lumbridge Castle: Search", ItemID.CLUE_SCROLL_HARD_2782, ClueTier.HARD, null, List.of(new WorldPoint(3213, 3216, 0))),
		new Clues("Wilough: Talk", ItemID.CLUE_SCROLL_HARD_2797, ClueTier.HARD, null, List.of(new WorldPoint(3221, 3435, 0))),
		new Clues("Cap'n Izzy: Talk", ItemID.CLUE_SCROLL_HARD_7272, ClueTier.HARD, null, List.of(new WorldPoint(2807, 3191, 0))),
		new Clues("Eluned: Talk", ItemID.CLUE_SCROLL_HARD_19898, ClueTier.HARD, null, List.of(new WorldPoint(2289, 3144, 0))),
		new Clues("Examiner: Talk", ItemID.CLUE_SCROLL_HARD_3566, ClueTier.HARD, null, List.of(new WorldPoint(3362, 3341, 0))),
		new Clues("White Wolf Mountain: Emote", ItemID.CLUE_SCROLL_HARD_10250, ClueTier.HARD, null, List.of(new WorldPoint(2847, 3499, 0))),
		new Clues("Haunted Woods: Emote", ItemID.CLUE_SCROLL_HARD_10240, ClueTier.HARD, null, List.of(new WorldPoint(3611, 3492, 0))),
		new Clues("Wilderness volcano: Emote", ItemID.CLUE_SCROLL_HARD_12546, ClueTier.HARD, null, List.of(new WorldPoint(3368, 3935, 0))),
		new Clues("Wizards' Tower: Search", ItemID.CLUE_SCROLL_HARD_7249, ClueTier.HARD, null, List.of(new WorldPoint(3096, 9572, 0))),
		new Clues("Brother Tranquility: Talk", ItemID.CLUE_SCROLL_HARD_19892, ClueTier.HARD, null, List.of(new WorldPoint(3681, 2963, 0))),
		new Clues("Martin Thwait: Talk", ItemID.CLUE_SCROLL_HARD_12570, ClueTier.HARD, null, List.of(new WorldPoint(3044, 4969, 0))),
		new Clues("Sorcerer's Tower: Search", ItemID.CLUE_SCROLL_HARD_3572, ClueTier.HARD, null, List.of(new WorldPoint(2702, 3409, 0))),
		new Clues("Burgh de Rott fish: Dig", ItemID.CLUE_SCROLL_HARD_19850, ClueTier.HARD, null, List.of(new WorldPoint(3547, 3183, 0))),
		new Clues("Wise Old Man: Talk", ItemID.CLUE_SCROLL_HARD_12572, ClueTier.HARD, null, List.of(new WorldPoint(3088, 3253, 0))),
		new Clues("Karamja banana: Emote", ItemID.CLUE_SCROLL_HARD_10246, ClueTier.HARD, null, List.of(new WorldPoint(2914, 3168, 0))),
		new Clues("Mess Hall: Emote", ItemID.CLUE_SCROLL_HARD_12552, ClueTier.HARD, null, List.of(new WorldPoint(1646, 3631, 0))),
		new Clues("Obelisk 19 east: Emote", ItemID.CLUE_SCROLL_HARD_10234, ClueTier.HARD, null, List.of(new WorldPoint(3241, 3672, 0))),
		new Clues("Hans: Talk", ItemID.CLUE_SCROLL_HARD_2792, ClueTier.HARD, null, List.of(new WorldPoint(3221, 3218, 0))),
		new Clues("BLR south-west: Dig", ItemID.CLUE_SCROLL_HARD_7241, ClueTier.HARD, null, List.of(new WorldPoint(2722, 3338, 0))),
		new Clues("Wilderness Agility south: Dig", ItemID.CLUE_SCROLL_HARD_7239, ClueTier.HARD, null, List.of(new WorldPoint(3021, 3912, 0))),
		new Clues("Sir Prysin: Talk", ItemID.CLUE_SCROLL_HARD_2796, ClueTier.HARD, null, List.of(new WorldPoint(3205, 3474, 0))),
		new Clues("Sir Vyvin: Talk", ItemID.CLUE_SCROLL_HARD_12584, ClueTier.HARD, null, List.of(new WorldPoint(2983, 3338, 0))),
		new Clues("Barbarian Village: Dig", ItemID.CLUE_SCROLL_HARD_12590, ClueTier.HARD, null, List.of(new WorldPoint(3081, 3421, 0))),
		new Clues("Yu'biusk: Dig", ItemID.CLUE_SCROLL_HARD_26566, ClueTier.HARD, null, List.of(new WorldPoint(3572, 4372, 0))),
		new Clues("Guardian mummy: Talk", ItemID.CLUE_SCROLL_HARD_12587, ClueTier.HARD, null, List.of(new WorldPoint(1934, 4427, 0))),
		new Clues("Song: The Moons of Ruin", ItemID.CLUE_SCROLL_HARD_28918, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Ardougne Zoo: Dig", ItemID.CLUE_SCROLL_HARD_2783, ClueTier.HARD, null, List.of(new WorldPoint(2598, 3267, 0))),
		new Clues("Desert Bandit Camp: Search", ItemID.CLUE_SCROLL_HARD_7248, ClueTier.HARD, null, List.of(new WorldPoint(3178, 2987, 0))),
		new Clues("Ket'sal K'uk: Dig", ItemID.CLUE_SCROLL_HARD_23045, ClueTier.HARD, null, List.of(new WorldPoint(1179, 3626, 0))),
		new Clues("Oziach: Talk", ItemID.CLUE_SCROLL_HARD_2794, ClueTier.HARD, null, List.of(new WorldPoint(3068, 3516, 0))),
		new Clues("Wizard Mizgog: Talk", ItemID.CLUE_SCROLL_HARD_19857, ClueTier.HARD, null, List.of(new WorldPoint(3103, 3163, 0))),
		new Clues("Zul-Cheray: Talk", ItemID.CLUE_SCROLL_HARD_19852, ClueTier.HARD, null, List.of(new WorldPoint(2204, 3050, 0))),
		new Clues("Captain Bleemadge: Talk", ItemID.CLUE_SCROLL_HARD_3570, ClueTier.HARD, null, List.of(new WorldPoint(2847, 3499, 0))),
		new Clues("Shilo Village mine: Search", ItemID.CLUE_SCROLL_HARD_7247, ClueTier.HARD, null, List.of(new WorldPoint(2833, 2992, 0))),
		new Clues("Jimmy Dazzler's: Search", ItemID.CLUE_SCROLL_HARD_7255, ClueTier.HARD, null, List.of(new WorldPoint(2561, 3323, 0))),
		new Clues("Otto Godblessed: Talk", ItemID.CLUE_SCROLL_HARD_19900, ClueTier.HARD, null, List.of(new WorldPoint(2501, 3487, 0))),
		new Clues("Evil Dave: Talk", ItemID.CLUE_SCROLL_HARD_19882, ClueTier.HARD, null, List.of(new WorldPoint(3079, 9892, 0))),
		new Clues("King Percival: Talk", ItemID.CLUE_SCROLL_HARD_19906, ClueTier.HARD, null, List.of(new WorldPoint(2634, 4682, 0))),
		new Clues("Awowogei: Talk", ItemID.CLUE_SCROLL_HARD_19884, ClueTier.HARD, null, List.of(new WorldPoint(2802, 2765, 0))),
		new Clues("Entrana: Search", ItemID.CLUE_SCROLL_HARD_3579, ClueTier.HARD, null, List.of(new WorldPoint(2818, 3351, 0))),
		new Clues("Yanille Agility: Search", ItemID.CLUE_SCROLL_HARD_7252, ClueTier.HARD, null, List.of(new WorldPoint(2576, 9583, 0))),
		new Clues("Citharede Abbey: Dig", ItemID.CLUE_SCROLL_HARD_19860, ClueTier.HARD, null, List.of(new WorldPoint(3388, 3152, 0))),
		new Clues("Yanille anvils: Dig", ItemID.CLUE_SCROLL_HARD_3520, ClueTier.HARD, null, List.of(new WorldPoint(2616, 3077, 0))),
		new Clues("Noterazzo's shop: Emote", ItemID.CLUE_SCROLL_HARD_10244, ClueTier.HARD, null, List.of(new WorldPoint(3026, 3701, 0))),
		new Clues("Elemental Workshop: Search", ItemID.CLUE_SCROLL_HARD_7250, ClueTier.HARD, null, List.of(new WorldPoint(2723, 9891, 0))),
		new Clues("Lumbridge Castle basement: Search", ItemID.CLUE_SCROLL_HARD_2773, ClueTier.HARD, null, List.of(new WorldPoint(3219, 9617, 0))),
		new Clues("Weird Old Man: Talk", ItemID.CLUE_SCROLL_HARD_19904, ClueTier.HARD, null, List.of(new WorldPoint(3224, 3112, 0))),
		new Clues("Pirate Pete: Talk", ItemID.CLUE_SCROLL_HARD_19902, ClueTier.HARD, null, List.of(new WorldPoint(3680, 3537, 0))),
		new Clues("Song: Scorpia Dances", ItemID.CLUE_SCROLL_HARD_23174, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Complication", ItemID.CLUE_SCROLL_HARD_23175, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Lumber Yard: Search", ItemID.CLUE_SCROLL_HARD, ClueTier.HARD, null, List.of(new WorldPoint(3309, 3503, 0))),
		new Clues("Song: Subterranea", ItemID.CLUE_SCROLL_HARD_23176, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Little Cave of Horrors", ItemID.CLUE_SCROLL_HARD_23177, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Roc and Roll", ItemID.CLUE_SCROLL_HARD_23178, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: La Mort", ItemID.CLUE_SCROLL_HARD_23179, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Fossilised", ItemID.CLUE_SCROLL_HARD_23180, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Hells Bells", ItemID.CLUE_SCROLL_HARD_23181, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: Regal Pomp", ItemID.CLUE_SCROLL_HARD_25792, ClueTier.HARD, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Twlight Temple: Emote", ItemID.CLUE_SCROLL_HARD_29859, ClueTier.HARD, null, List.of(new WorldPoint(1694, 3247, 0))),
		new Clues("6", ItemID.CHALLENGE_SCROLL_HARD, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2395, 3486, 0))),
		new Clues("13", ItemID.CHALLENGE_SCROLL_HARD_7271, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2529, 3162, 0))),
		new Clues("33", ItemID.CHALLENGE_SCROLL_HARD_7273, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2807, 3191, 0))),
		new Clues("12", ItemID.CHALLENGE_SCROLL_HARD_12567, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3061, 3377, 0))),
		new Clues("40", ItemID.CHALLENGE_SCROLL_HARD_12569, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3564, 3288, 0))),
		new Clues("2", ItemID.CHALLENGE_SCROLL_HARD_12571, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3044, 4969, 0))),
		new Clues("28", ItemID.CHALLENGE_SCROLL_HARD_12573, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3088, 3253, 0))),
		new Clues("129", ItemID.CHALLENGE_SCROLL_HARD_12575, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2606, 3211, 0))),
		new Clues("95", ItemID.CHALLENGE_SCROLL_HARD_12577, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3230, 3230, 0))),
		new Clues("8", ItemID.CHALLENGE_SCROLL_HARD_19847, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2527, 3891, 0))),
		new Clues("22", ItemID.CHALLENGE_SCROLL_HARD_19855, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2570, 3250, 0))),
		new Clues("13112221", ItemID.CHALLENGE_SCROLL_HARD_19859, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2544, 3170, 0))),
		new Clues("666", ItemID.CHALLENGE_SCROLL_HARD_19883, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3079, 9892, 0))),
		new Clues("24", ItemID.CHALLENGE_SCROLL_HARD_19885, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2802, 2765, 0))),
		new Clues("13", ItemID.CHALLENGE_SCROLL_HARD_19889, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3039, 4835, 0))),
		new Clues("7", ItemID.CHALLENGE_SCROLL_HARD_19893, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3681, 2963, 0))),
		new Clues("53000", ItemID.CHALLENGE_SCROLL_HARD_19899, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2289, 3144, 0))),
		new Clues("3", ItemID.CHALLENGE_SCROLL_HARD_19901, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3680, 3537, 0))),
		new Clues("150", ItemID.CHALLENGE_SCROLL_HARD_19905, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(3224, 3112, 0))),
		new Clues("5", ItemID.CHALLENGE_SCROLL_HARD_19907, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2634, 4682, 1))),
		new Clues("64", ItemID.CHALLENGE_SCROLL_HARD_19909, ClueTier.HARD_CHALLENGE, null, List.of(new WorldPoint(2446, 4428, 0))),
		new Clues("West Ardougne Church: Emote", ItemID.CLUE_SCROLL_ELITE, ClueTier.ELITE, null, List.of(new WorldPoint(2528, 3294, 0))),
		new Clues("Dominic Onion: Talk", ItemID.CLUE_SCROLL_ELITE_12157, ClueTier.ELITE, null, List.of(new WorldPoint(2609, 3116, 0))),
		new Clues("Ortus Farm north: Dig", ItemID.CLUE_SCROLL_ELITE_28912, ClueTier.ELITE, null, List.of(new WorldPoint(1557, 3183, 0))),
		new Clues("Lletya south-east: Dig", ItemID.CLUE_SCROLL_ELITE_12089, ClueTier.ELITE, null, List.of(new WorldPoint(2357, 3151, 0))),
		new Clues("Meiyerditch Walls: Dig", ItemID.CLUE_SCROLL_ELITE_12091, ClueTier.ELITE, null, List.of(new WorldPoint(3587, 3180, 0))),
		new Clues("Hardwood Grove: Dig", ItemID.CLUE_SCROLL_ELITE_12110, ClueTier.ELITE, null, List.of(new WorldPoint(2820, 3078, 0))),
		new Clues("Mos Le'Harmless island: Dig", ItemID.CLUE_SCROLL_ELITE_12086, ClueTier.ELITE, null, List.of(new WorldPoint(3811, 3060, 0))),
		new Clues("Iorwerth Camp north: Dig", ItemID.CLUE_SCROLL_ELITE_12111, ClueTier.ELITE, null, List.of(new WorldPoint(2180, 3282, 0))),
		new Clues("Shilo Village: Dig", ItemID.CLUE_SCROLL_ELITE_12107, ClueTier.ELITE, null, List.of(new WorldPoint(2870, 2997, 0))),
		new Clues("Prifddinas: Dig", ItemID.CLUE_SCROLL_ELITE_23770, ClueTier.ELITE, null, List.of(new WorldPoint(3246, 6083, 0))),
		new Clues("Pollnivneach cliff: Dig", ItemID.CLUE_SCROLL_ELITE_12100, ClueTier.ELITE, null, List.of(new WorldPoint(3302, 2988, 0))),
		new Clues("Gu'Tanoth south: Dig", ItemID.CLUE_SCROLL_ELITE_12098, ClueTier.ELITE, null, List.of(new WorldPoint(2511, 2980, 0))),
		new Clues("Isle of Souls north-east: Dig", ItemID.CLUE_SCROLL_ELITE_25499, ClueTier.ELITE, null, List.of(new WorldPoint(2318, 2954, 0))),
		new Clues("Legends' Guild: Dig", ItemID.CLUE_SCROLL_ELITE_12102, ClueTier.ELITE, null, List.of(new WorldPoint(2732, 3372, 0))),
		new Clues("Dessous's tomb: Dig", ItemID.CLUE_SCROLL_ELITE_12103, ClueTier.ELITE, null, List.of(new WorldPoint(3573, 3425, 0))),
		new Clues("Isle of Souls west: Dig", ItemID.CLUE_SCROLL_ELITE_25498, ClueTier.ELITE, null, List.of(new WorldPoint(2094, 2889, 0))),
		new Clues("Harmony Island: Dig", ItemID.CLUE_SCROLL_ELITE_12088, ClueTier.ELITE, null, List.of(new WorldPoint(3828, 2848, 0))),
		new Clues("Ancient Pyramid: Dig", ItemID.CLUE_SCROLL_ELITE_12099, ClueTier.ELITE, null, List.of(new WorldPoint(3225, 2838, 0))),
		new Clues("Ruins of Morra: Dig", ItemID.CLUE_SCROLL_ELITE_25787, ClueTier.ELITE, null, List.of(new WorldPoint(1451, 3509, 0))),
		new Clues("Hosidius ruins: Dig", ItemID.CLUE_SCROLL_ELITE_19813, ClueTier.ELITE, null, List.of(new WorldPoint(1773, 3510, 0))),
		new Clues("Dragontooth Island: Dig", ItemID.CLUE_SCROLL_ELITE_12085, ClueTier.ELITE, null, List.of(new WorldPoint(3822, 3562, 0))),
		new Clues("ALQ north: Dig", ItemID.CLUE_SCROLL_ELITE_12108, ClueTier.ELITE, null, List.of(new WorldPoint(3603, 3564, 0))),
		new Clues("Crash Island: Dig", ItemID.CLUE_SCROLL_ELITE_12106, ClueTier.ELITE, null, List.of(new WorldPoint(2936, 2721, 0))),
		new Clues("Jaltevas: Dig", ItemID.CLUE_SCROLL_ELITE_26944, ClueTier.ELITE, null, List.of(new WorldPoint(3318, 2706, 0))),
		new Clues("Ape Atoll: Dig", ItemID.CLUE_SCROLL_ELITE_12096, ClueTier.ELITE, null, List.of(new WorldPoint(2697, 2705, 0))),
		new Clues("Mountain Camp: Dig", ItemID.CLUE_SCROLL_ELITE_12104, ClueTier.ELITE, null, List.of(new WorldPoint(2778, 3678, 0))),
		new Clues("Obelisk 28 east: Dig", ItemID.CLUE_SCROLL_ELITE_23146, ClueTier.ELITE, null, List.of(new WorldPoint(3051, 3736, 0))),
		new Clues("Ice Path: Dig", ItemID.CLUE_SCROLL_ELITE_12090, ClueTier.ELITE, null, List.of(new WorldPoint(2827, 3740, 0))),
		new Clues("Neitiznot: Dig", ItemID.CLUE_SCROLL_ELITE_12094, ClueTier.ELITE, null, List.of(new WorldPoint(2359, 3799, 0))),
		new Clues("Pirates' Cove: Dig", ItemID.CLUE_SCROLL_ELITE_12105, ClueTier.ELITE, null, List.of(new WorldPoint(2194, 3807, 0))),
		new Clues("DKS north-west: Dig", ItemID.CLUE_SCROLL_ELITE_12087, ClueTier.ELITE, null, List.of(new WorldPoint(2700, 3808, 0))),
		new Clues("Neitiznot west: Dig", ItemID.CLUE_SCROLL_ELITE_23148, ClueTier.ELITE, null, List.of(new WorldPoint(2316, 3814, 0))),
		new Clues("Lava Dragon Isle: Dig", ItemID.CLUE_SCROLL_ELITE_12109, ClueTier.ELITE, null, List.of(new WorldPoint(3215, 3835, 0))),
		new Clues("Fountain of Rune: Dig", ItemID.CLUE_SCROLL_ELITE_12101, ClueTier.ELITE, null, List.of(new WorldPoint(3369, 3894, 0))),
		new Clues("Lunar Isle west: Dig", ItemID.CLUE_SCROLL_ELITE_12092, ClueTier.ELITE, null, List.of(new WorldPoint(2065, 3923, 0))),
		new Clues("Resource Area: Dig", ItemID.CLUE_SCROLL_ELITE_12095, ClueTier.ELITE, null, List.of(new WorldPoint(3188, 3933, 0))),
		new Clues("Weiss: Dig", ItemID.CLUE_SCROLL_ELITE_23147, ClueTier.ELITE, null, List.of(new WorldPoint(2872, 3937, 0))),
		new Clues("Pirates' Hideout: Dig", ItemID.CLUE_SCROLL_ELITE_12097, ClueTier.ELITE, null, List.of(new WorldPoint(3043, 3940, 0))),
		new Clues("Wilderness Volcano: Dig", ItemID.CLUE_SCROLL_ELITE_12093, ClueTier.ELITE, null, List.of(new WorldPoint(3380, 3963, 0))),
		new Clues("Lithkren: Dig", ItemID.CLUE_SCROLL_ELITE_22000, ClueTier.ELITE, null, List.of(new WorldPoint(3560, 3987, 0))),
		new Clues("Island of Stone: Dig", ItemID.CLUE_SCROLL_ELITE_24253, ClueTier.ELITE, null, List.of(new WorldPoint(2484, 4016, 0))),
		new Clues("Taverley stones: Search", ItemID.CLUE_SCROLL_ELITE_12156, ClueTier.ELITE, null, List.of(new WorldPoint(2922, 3484, 0))),
		new Clues("Hellhound: Kill", ItemID.CLUE_SCROLL_ELITE_19797, ClueTier.ELITE, null, List.of(
				new WorldPoint(3172, 3952, 0), // Wilderness
				new WorldPoint(2739, 9688, 0), // Witchaven dungeon
				new WorldPoint(2892, 5304, 3), // God Wars Dungeon
				new WorldPoint(2409, 9786, 0), // Stronghold
				new WorldPoint(2851, 9849, 0), // Taverley dungeon
				new WorldPoint(3439, 10082, 0), // Wildy slayer dungeon
				new WorldPoint(1639, 10060, 0), // Kourend Catacombs
				new WorldPoint(1200, 10263, 1) // Karuulm Slayer Dungeon
			)
		),
		new Clues("Ankou: Kill", ItemID.CLUE_SCROLL_ELITE_19805, ClueTier.ELITE, null, List.of(
				new WorldPoint(2960, 3744, 0),
				new WorldPoint(1963, 4951, 0),
				new WorldPoint(2003, 4953, 0),
				new WorldPoint(2468, 9802, 0),
				new WorldPoint(3348, 10075, 0),
				new WorldPoint(1637, 9991, 0)
			)
		),
		new Clues("Crocodile: Kill", ItemID.CLUE_SCROLL_ELITE_19804, ClueTier.ELITE, null, List.of(
				new WorldPoint(3337, 2922, 0),
				new WorldPoint(3296, 2912, 0),
				new WorldPoint(3190, 2825, 0),
				new WorldPoint(3412, 2774, 0)
			)
		),
		new Clues("Waterfiend: Kill", ItemID.CLUE_SCROLL_ELITE_19798, ClueTier.ELITE, null, List.of(
				new WorldPoint(1738, 5343, 0),
				new WorldPoint(1610, 5343, 0),
				new WorldPoint(2248, 9994, 0),
				new WorldPoint(3161, 12457, 0)
			)),
		new Clues("Green dragon: Kill", ItemID.CLUE_SCROLL_ELITE_19799, ClueTier.ELITE, null, List.of(
				new WorldPoint(3331, 3672, 0),
				new WorldPoint(2973, 3620, 0),
				new WorldPoint(3137, 3707, 0),
				new WorldPoint(3078, 3810, 0),
				new WorldPoint(3410, 10065, 0),
				new WorldPoint(1939, 8991, 0),
				// Brutal ones
				new WorldPoint(1628, 5334, 0),
				new WorldPoint(1756, 5334, 0)
			)
		),
		new Clues("Basilisk: Kill", ItemID.CLUE_SCROLL_ELITE_19800, ClueTier.ELITE, null, List.of(
				new WorldPoint(2738, 10008, 0),
				new WorldPoint(2459, 10398, 0)
			)),
		new Clues("Lost barbarian: Kill", ItemID.CLUE_SCROLL_ELITE_19806, ClueTier.ELITE, null, List.of(
			new WorldPoint(2506, 3518, 0)
		)),
		new Clues("Rock Crab: Kill", ItemID.CLUE_SCROLL_ELITE_19796, ClueTier.ELITE, null, List.of(
			new WorldPoint(2694, 3724, 0),
			new WorldPoint(2529, 3740, 0),
			new WorldPoint(1197, 3587, 0),
			new WorldPoint(2442, 10159, 0),
			new WorldPoint(2748, 10166, 0)
		)),
		new Clues("Aviansie: Kill", ItemID.CLUE_SCROLL_ELITE_19803, ClueTier.ELITE, null, List.of(
			new WorldPoint(2833, 5289, 0),
			new WorldPoint(2938, 10115, 0)
		)),
		new Clues("Bloodveld: Kill", ItemID.CLUE_SCROLL_ELITE_19801, ClueTier.ELITE, null, List.of(
			new WorldPoint(2880, 5321, 0),
			new WorldPoint(3564, 9741, 0),
			new WorldPoint(3409, 3571, 0),
			new WorldPoint(3403, 9934, 0),
			new WorldPoint(2434, 9817, 0),
			new WorldPoint(2950, 10085, 0)
		)),
		new Clues("Aberrant spectre: Kill", ItemID.CLUE_SCROLL_ELITE_19802, ClueTier.ELITE, null, List.of(
			new WorldPoint(3413, 3550, 0),
			new WorldPoint(2443, 9785, 0),
			new WorldPoint(1646, 9988, 0)
		)),
		new Clues("Father Aereck: Talk", ItemID.CLUE_SCROLL_ELITE_12151, ClueTier.ELITE, null, List.of(new WorldPoint(3242, 3207, 0))),
		new Clues("Dagannoth Kings: Dig", ItemID.CLUE_SCROLL_ELITE_19809, ClueTier.ELITE, null, List.of(new WorldPoint(1910, 4367, 0))),
		new Clues("Regath: Talk", ItemID.CLUE_SCROLL_ELITE_19793, ClueTier.ELITE, null, List.of(new WorldPoint(1719, 3723, 0))),
		new Clues("Soul Altar: Dig", ItemID.CLUE_SCROLL_ELITE_19784, ClueTier.ELITE, null, List.of(new WorldPoint(1815, 3852, 0))),
		new Clues("Lava Maze: Emote", ItemID.CLUE_SCROLL_ELITE_12075, ClueTier.ELITE, null, List.of(new WorldPoint(3069, 3861, 0))),
		new Clues("Legends' Guild: Emote", ItemID.CLUE_SCROLL_ELITE_19789, ClueTier.ELITE, null, List.of(new WorldPoint(2728, 3377, 0))),
		new Clues("Edgeville Monastery: Emote", ItemID.CLUE_SCROLL_ELITE_12078, ClueTier.ELITE, null, List.of(new WorldPoint(3056, 3484, 0))),
		new Clues("Fortis temple: Emote", ItemID.CLUE_SCROLL_ELITE_28910, ClueTier.ELITE, null, List.of(new WorldPoint(1699, 3087, 0))),
		new Clues("Oneiromancer: Talk", ItemID.CLUE_SCROLL_ELITE_12132, ClueTier.ELITE, null, List.of(new WorldPoint(2150, 3866, 0))),
		new Clues("Old crone: Talk", ItemID.CLUE_SCROLL_ELITE_12138, ClueTier.ELITE, null, List.of(new WorldPoint(3462, 3557, 0))),
		new Clues("Shadow dungeon: Emote", ItemID.CLUE_SCROLL_ELITE_12076, ClueTier.ELITE, null, List.of(new WorldPoint(2629, 5071, 0))),
		new Clues("Jardric: Talk", ItemID.CLUE_SCROLL_ELITE_21524, ClueTier.ELITE, null, List.of(new WorldPoint(3661, 3849, 0))),
		new Clues("Mandrith: Talk", ItemID.CLUE_SCROLL_ELITE_12134, ClueTier.ELITE, null, List.of(new WorldPoint(3182, 3946, 0))),
		new Clues("Fishing Platform: Emote", ItemID.CLUE_SCROLL_ELITE_12079, ClueTier.ELITE, null, List.of(new WorldPoint(2782, 3273, 0))),
		new Clues("Kalphite Cave: Dig", ItemID.CLUE_SCROLL_ELITE_12158, ClueTier.ELITE, null, List.of(new WorldPoint(3307, 9505, 0))),
		new Clues("Toad batta: Dig", ItemID.CLUE_SCROLL_ELITE_19810, ClueTier.ELITE, null, List.of(new WorldPoint(3139, 4554, 0))),
		new Clues("Law rift: Dig", ItemID.CLUE_SCROLL_ELITE_12150, ClueTier.ELITE, null, List.of(new WorldPoint(3049, 4839, 0))),
		new Clues("Horacio: Talk", ItemID.CLUE_SCROLL_ELITE_12154, ClueTier.ELITE, null, List.of(new WorldPoint(2635, 3310, 0))),
		new Clues("Volcanic Mine: Dig", ItemID.CLUE_SCROLL_ELITE_21525, ClueTier.ELITE, null, List.of(new WorldPoint(3816, 3810, 0))),
		new Clues("Burgh de Rott: Dig", ItemID.CLUE_SCROLL_ELITE_19785, ClueTier.ELITE, null, List.of(new WorldPoint(3538, 3208, 0))),
		new Clues("Seers Agility: Search", ItemID.CLUE_SCROLL_ELITE_12145, ClueTier.ELITE, null, List.of(new WorldPoint(2707, 3488, 0))),
		new Clues("Trollweiss: Dig", ItemID.CLUE_SCROLL_ELITE_12141, ClueTier.ELITE, null, List.of(new WorldPoint(2780, 3783, 0))),
		new Clues("Mawrth: Talk", ItemID.CLUE_SCROLL_ELITE_12140, ClueTier.ELITE, null, List.of(new WorldPoint(2333, 3165, 0))),
		new Clues("Slayer Tower: Emote", ItemID.CLUE_SCROLL_ELITE_12080, ClueTier.ELITE, null, List.of(new WorldPoint(3421, 3537, 0))),
		new Clues("Fight Arena pub: Emote", ItemID.CLUE_SCROLL_ELITE_19791, ClueTier.ELITE, null, List.of(new WorldPoint(2568, 3149, 0))),
		new Clues("Barker: Talk", ItemID.CLUE_SCROLL_ELITE_12155, ClueTier.ELITE, null, List.of(new WorldPoint(3499, 3503, 0))),
		new Clues("Kamfreena: Talk", ItemID.CLUE_SCROLL_ELITE_12144, ClueTier.ELITE, null, List.of(new WorldPoint(2845, 3539, 0))),
		new Clues("Candle maker: Talk", ItemID.CLUE_SCROLL_ELITE_12152, ClueTier.ELITE, null, List.of(new WorldPoint(2799, 3438, 0))),
		new Clues("Genie: Talk", ItemID.CLUE_SCROLL_ELITE_12153, ClueTier.ELITE, null, List.of(new WorldPoint(3371, 9320, 0))),
		new Clues("Mogre Camp: Dig", ItemID.CLUE_SCROLL_ELITE_19782, ClueTier.ELITE, null, List.of(new WorldPoint(2953, 9523, 0))),
		new Clues("Neitiznot runite: Emote", ItemID.CLUE_SCROLL_ELITE_12074, ClueTier.ELITE, null, List.of(new WorldPoint(2375, 3850, 0))),
		new Clues("Ancient Cavern: Emote", ItemID.CLUE_SCROLL_ELITE_12083, ClueTier.ELITE, null, List.of(new WorldPoint(1768, 5366, 0))),
		new Clues("Guard Vemmeldo: Talk", ItemID.CLUE_SCROLL_ELITE_19792, ClueTier.ELITE, null, List.of(new WorldPoint(2447, 3418, 0))),
		new Clues("Fountain of Heroes: Emote", ItemID.CLUE_SCROLL_ELITE_12082, ClueTier.ELITE, null, List.of(new WorldPoint(2920, 9893, 0))),
		new Clues("Ardougne gem stall: Emote", ItemID.CLUE_SCROLL_ELITE_19790, ClueTier.ELITE, null, List.of(new WorldPoint(2666, 3304, 0))),
		new Clues("Cam the Camel: Talk", ItemID.CLUE_SCROLL_ELITE_12136, ClueTier.ELITE, null, List.of(new WorldPoint(3300, 3231, 0))),
		new Clues("Ambassador Alvijar: Talk", ItemID.CLUE_SCROLL_ELITE_12133, ClueTier.ELITE, null, List.of(new WorldPoint(2736, 5351, 0))),
		new Clues("Resource Area gold: Dig", ItemID.CLUE_SCROLL_ELITE_23144, ClueTier.ELITE, null, List.of(new WorldPoint(3183, 3941, 0))),
		new Clues("Oronwen: Talk", ItemID.CLUE_SCROLL_ELITE_12135, ClueTier.ELITE, null, List.of(new WorldPoint(2326, 3177, 0))),
		new Clues("Nurse Wooned: Talk", ItemID.CLUE_SCROLL_ELITE_19794, ClueTier.ELITE, null, List.of(new WorldPoint(1511, 3619, 0))),
		new Clues("DLR: Dig", ItemID.CLUE_SCROLL_ELITE_23145, ClueTier.ELITE, null, List.of(new WorldPoint(2221, 3091, 0))),
		new Clues("Trollweiss Mountain: Emote", ItemID.CLUE_SCROLL_ELITE_19787, ClueTier.ELITE, null, List.of(new WorldPoint(2776, 3781, 0))),
		new Clues("BIP: Dig", ItemID.CLUE_SCROLL_ELITE_12146, ClueTier.ELITE, null, List.of(new WorldPoint(3410, 3324, 0))),
		new Clues("Lisse Isaakson: Talk", ItemID.CLUE_SCROLL_ELITE_19795, ClueTier.ELITE, null, List.of(new WorldPoint(2351, 3801, 0))),
		new Clues("Charcoal Burners: Emote", ItemID.CLUE_SCROLL_ELITE_25786, ClueTier.ELITE, null, List.of(new WorldPoint(1714, 3467, 0))),
		new Clues("Warriors' guild bank: Emote", ItemID.CLUE_SCROLL_ELITE_12077, ClueTier.ELITE, null, List.of(new WorldPoint(2844, 3542, 0))),
		new Clues("KBD: Kill", ItemID.CLUE_SCROLL_ELITE_19807, ClueTier.ELITE, null, List.of(new WorldPoint(2288, 4702, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12127, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3415, 0))),
		new Clues("Shayzien war tent: Emote", ItemID.CLUE_SCROLL_ELITE_19788, ClueTier.ELITE, null, List.of(new WorldPoint(1487, 3635, 0))),
		new Clues("Tree Gnome Village: Dig", ItemID.CLUE_SCROLL_ELITE_12130, ClueTier.ELITE, null, List.of(new WorldPoint(2449, 3130, 0))),
		new Clues("Wyson: Talk", ItemID.CLUE_SCROLL_ELITE_12159, ClueTier.ELITE, null, List.of(new WorldPoint(3026, 3378, 0))),
		new Clues("Piscatoris Fishing Colony: Dig", ItemID.CLUE_SCROLL_ELITE_12143, ClueTier.ELITE, null, List.of(new WorldPoint(2342, 3677, 0))),
		new Clues("Ape Atoll: Search", ItemID.CLUE_SCROLL_ELITE_19786, ClueTier.ELITE, null, List.of(new WorldPoint(2703, 2716, 0))),
		new Clues("Waterbirth Island Dungeon: Dig", ItemID.CLUE_SCROLL_ELITE_12142, ClueTier.ELITE, null, List.of(new WorldPoint(2523, 3739, 0))),
		new Clues("Sigli: Talk", ItemID.CLUE_SCROLL_ELITE_12137, ClueTier.ELITE, null, List.of(new WorldPoint(2660, 3654, 0))),
		new Clues("Aris: Talk", ItemID.CLUE_SCROLL_ELITE_12149, ClueTier.ELITE, null, List.of(new WorldPoint(3203, 3424, 0))),
		new Clues("Warriors' Guild: Dig", ItemID.CLUE_SCROLL_ELITE_12148, ClueTier.ELITE, null, List.of(new WorldPoint(2867, 3546, 0))),
		new Clues("Daga: Talk", ItemID.CLUE_SCROLL_ELITE_19808, ClueTier.ELITE, null, List.of(new WorldPoint(2759, 2775, 0))),
		new Clues("Funbo: Talk", ItemID.CLUE_SCROLL_ELITE_28911, ClueTier.ELITE, null, List.of(new WorldPoint(1432, 9584, 0))),
		new Clues("Trollheim: Emote", ItemID.CLUE_SCROLL_ELITE_12081, ClueTier.ELITE, null, List.of(new WorldPoint(2887, 3676, 0))),
		new Clues("Veteran Squire: Talk", ItemID.CLUE_SCROLL_ELITE_19811, ClueTier.ELITE, null, List.of(new WorldPoint(2638, 2656, 0))),
		new Clues("Vannaka: Talk", ItemID.CLUE_SCROLL_ELITE_12147, ClueTier.ELITE, null, List.of(new WorldPoint(3148, 9913, 0))),
		new Clues("Zul-Andra: Dig", ItemID.CLUE_SCROLL_ELITE_19783, ClueTier.ELITE, null, List.of(new WorldPoint(2202, 3062, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12113, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12114, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12115, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12116, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12117, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12118, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12119, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12120, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12121, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12122, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12123, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12124, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12125, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Sherlock: Talk", ItemID.CLUE_SCROLL_ELITE_12126, ClueTier.ELITE, null, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues("Song: Lament for the Hallowed", ItemID.CLUE_SCROLL_ELITE_24773, ClueTier.ELITE, null, List.of(new WorldPoint(2990, 3383, 0))),
		new Clues("Song: The Pharaoh", ItemID.CLUE_SCROLL_ELITE_26943, ClueTier.ELITE, null, List.of(new WorldPoint(2990, 3384, 0))),
		new Clues("Proudspire summit: Dig", ItemID.CLUE_SCROLL_ELITE_29855, ClueTier.ELITE, null, List.of(new WorldPoint(1571, 3245, 0))),
		new Clues("Frost Nagua: Kill", ItemID.CLUE_SCROLL_ELITE_29856, ClueTier.ELITE, null, List.of(new WorldPoint(1627, 9623, 0))),
		new Clues("Challenge: Sherlock", ItemID.CHALLENGE_SCROLL_ELITE, ClueTier.ELITE_CHALLENGE, null, List.of(new WorldPoint(2733, 3415, 0))),
		new Clues("Challenge", ItemID.CHALLENGE_SCROLL_ELITE_12139, ClueTier.ELITE_CHALLENGE, null, List.of(new WorldPoint(0, 0, 0))),
		new Clues(500, "Snowflake: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_0, List.of(new WorldPoint(2872, 3935, 0))),
		new Clues(501, "Captain Bruce: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_1, List.of(new WorldPoint(1530, 3567, 0))),
		new Clues(502, "Sacrifice: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_2, List.of(new WorldPoint(2210, 3056, 0))),
		new Clues(503, "Edward: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_3, List.of(new WorldPoint(3283, 3934, 0))),
		new Clues(504, "Mandrith: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_4, List.of(new WorldPoint(3184, 3945, 0))),
		new Clues(505, "Dugopul: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_5, List.of(new WorldPoint(2801, 2745, 0))),
		new Clues(506, "Runolf: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_6, List.of(new WorldPoint(2508, 10258, 0))),
		new Clues(507, "Immenizz: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_7, List.of(new WorldPoint(2592, 4319, 0))),
		new Clues(508, "Luminata: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_8, List.of(new WorldPoint(3505, 3236, 0))),
		new Clues(509, "Old Man Ral: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_9, List.of(new WorldPoint(3607, 3208, 0))),
		new Clues(510, "Radimus Erkle: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_10, List.of(new WorldPoint(2726, 3368, 0))),
		new Clues(511, "Primula: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_11, List.of(new WorldPoint(2454, 2853, 1))),
		new Clues(512, "Goreu: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_12, List.of(new WorldPoint(2336, 3161, 0))),
		new Clues(513, "Guildmaster Lars: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_13, List.of(new WorldPoint(1652, 3499, 0))),
		new Clues(514, "Wingstone: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_14, List.of(new WorldPoint(3381, 2891, 0))),
		new Clues(515, "New Recruit Tony: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_ANAGRAM_15, List.of(new WorldPoint(1502, 3554, 0))),
		new Clues(516, "Iorwerth Camp south: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_0, List.of(new WorldPoint(2178, 3209, 0))),
		new Clues(517, "Port Tyras south: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_1, List.of(new WorldPoint(2155, 3100, 0))),
		new Clues(518, "DLR: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_2, List.of(new WorldPoint(2217, 3092, 0))),
		new Clues(519, "Mos Le'Harmless island: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_3, List.of(new WorldPoint(3830, 3060, 0))),
		new Clues(520, "Crandor: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_4, List.of(new WorldPoint(2834, 3271, 0))),
		new Clues(521, "Witchaven: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_5, List.of(new WorldPoint(2732, 3284, 0))),
		new Clues(522, "Meiyerditch Mine: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_6, List.of(new WorldPoint(3622, 3320, 0))),
		new Clues(523, "Prifddinas east: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_7, List.of(new WorldPoint(2303, 3328, 0))),
		new Clues(524, "Morytania Graveyard: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_8, List.of(new WorldPoint(3570, 3405, 0))),
		new Clues(525, "Crabclaw Isle: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_9, List.of(new WorldPoint(1769, 3418, 0))),
		new Clues(526, "Water Obelisk: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_10, List.of(new WorldPoint(2840, 3423, 0))),
		new Clues(527, "ALQ north: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_11, List.of(new WorldPoint(3604, 3564, 0))),
		new Clues(528, "Air Obelisk: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_12, List.of(new WorldPoint(3085, 3569, 0))),
		new Clues(529, "Crash Island: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_13, List.of(new WorldPoint(2934, 2727, 0))),
		new Clues(530, "Lizardman Shaman: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_14, List.of(new WorldPoint(1451, 3695, 0))),
		new Clues(531, "Waterbirth Island: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_15, List.of(new WorldPoint(2538, 3739, 0))),
		new Clues(532, "Farming Guild: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_16, List.of(new WorldPoint(1248, 3751, 0))),
		new Clues(533, "Arceuus church crypt: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_17, List.of(new WorldPoint(1698, 3792, 0))),
		new Clues(534, "Chaos Temple 38: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_18, List.of(new WorldPoint(2951, 3820, 0))),
		new Clues(535, "Pirates' Cove: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_19, List.of(new WorldPoint(2202, 3825, 0))),
		new Clues(536, "Dense essence mine: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_20, List.of(new WorldPoint(1761, 3853, 0))),
		new Clues(537, "Astral Altar west: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_21, List.of(new WorldPoint(2090, 3863, 0))),
		new Clues(538, "Sulphur mine: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_22, List.of(new WorldPoint(1442, 3878, 0))),
		new Clues(539, "Wilderness Volcano: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_23, List.of(new WorldPoint(3380, 3929, 0))),
		new Clues(540, "Resource Area: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_24, List.of(new WorldPoint(3188, 3939, 0))),
		new Clues(541, "Rogues' Castle: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_25, List.of(new WorldPoint(3304, 3941, 0))),
		new Clues(542, "Wilderness Agility: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_COORDINATE_26, List.of(new WorldPoint(3028, 3928, 0))),
		new Clues(543, "Ping and Pong: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_0, List.of(new WorldPoint(2670, 10395, 0))),
		new Clues(544, "Wizard Cromperty: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_1, List.of(new WorldPoint(2684, 3325, 0))),
		new Clues(545, "Thorgel: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_2, List.of(new WorldPoint(1861, 4641, 0))),
		new Clues(546, "GWD entrance: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_3, List.of(new WorldPoint(2918, 3745, 0))),
		new Clues(547, "Abbot Langley: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_4, List.of(new WorldPoint(3052, 3490, 0))),
		new Clues(548, "Monk of Entrana: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_5, List.of(new WorldPoint(3052, 3237, 0))),
		new Clues(549, "Jorral: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_6, List.of(new WorldPoint(2436, 3346, 0))),
		new Clues(550, "Viggora: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_7, List.of(new WorldPoint(3119, 9996, 0), new WorldPoint(3294, 3934 , 0), new WorldPoint(3448, 3550, 0))),
		new Clues(551, "Biblia: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_8, List.of(new WorldPoint(1633, 3823, 0))),
		new Clues(552, "Kamil: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_9, List.of(new WorldPoint(2873, 3757, 0))),
		new Clues(553, "Deep Wilderness Dungeon: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_10, List.of(new WorldPoint(3045, 3925, 0))),
		new Clues(554, "Falo the Bard: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_11, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(555, "Prifddinas Onion: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_12, List.of(new WorldPoint(2299, 3328, 0))),
		new Clues(556, "Rogues' Den: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_13, List.of(new WorldPoint(2906, 3537, 0))),
		new Clues(557, "Ghommal: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_14, List.of(new WorldPoint(2879, 3547, 0))),
		new Clues(558, "Lava Maze Dungeon: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_15, List.of(new WorldPoint(3069, 3860, 0))),
		new Clues(559, "Guthix Lake: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_16, List.of(new WorldPoint(3069, 3932, 0))),
		new Clues(560, "Juna: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_17, List.of(new WorldPoint(3252, 9517, 0))),
		new Clues(561, "Sir Vyvin: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_18, List.of(new WorldPoint(2984, 3339, 2))),
		new Clues(562, "Viyeldi caves: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_19, List.of(new WorldPoint(2782, 2935, 0))),
		new Clues(563, "Saradomin's Encampment: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_20, List.of(new WorldPoint(2918, 3745, 0))),
		new Clues(564, "Key Master: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_21, List.of(new WorldPoint(1310, 1251, 0))),
		new Clues(565, "Piles: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_22, List.of(new WorldPoint(3185, 3934, 0))),
		new Clues(566, "Demonic Ruins: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_23, List.of(new WorldPoint(3294, 3889, 0))),
		new Clues(567, "Robin: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_24, List.of(new WorldPoint(3676, 3494, 0))),
		new Clues(568, "Lovada: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_25, List.of(new WorldPoint(1487, 3833, 0))),
		new Clues(569, "Logosia: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_26, List.of(new WorldPoint(1633, 3808, 0))),
		new Clues(570, "Sherlock: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_27, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(571, "Shilo furnace: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_28, List.of(new WorldPoint(2859, 2962, 0))),
		new Clues(572, "Shadow Dungeon: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_29, List.of(new WorldPoint(2547, 3421, 0))),
		new Clues(573, "Ewesey: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_30, List.of(new WorldPoint(1647, 3627, 0))),
		new Clues(574, "terrorbird display: Dig", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_31, List.of(new WorldPoint(3260, 3449, 0))),
		new Clues(575, "Mage of Zamorak: Talk", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_CRYPTIC_32, List.of(new WorldPoint(3259, 3386, 0))),
		new Clues(576, "Gwenith: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_0, List.of(new WorldPoint(2213, 3427, 0))),
		new Clues(577, "K'ril Tsutsaroth: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_1, List.of(new WorldPoint(2931, 5337, 0))),
		new Clues(578, "Warrior's guild bank: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_2, List.of(new WorldPoint(2843, 3540, 0))),
		new Clues(579, "Iorwerth Camp: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_3, List.of(new WorldPoint(2199, 3254, 0))),
		new Clues(580, "Entrana church: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_4, List.of(new WorldPoint(2851, 3354, 0))),
		new Clues(581, "Magic axe hut: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_5, List.of(new WorldPoint(3188, 3957, 0))),
		new Clues(582, "Tzhaar gem store: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_6, List.of(new WorldPoint(2466, 5150, 0))),
		new Clues(583, "Iban's temple: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_7, List.of(new WorldPoint(2006, 4709, 1))),
		new Clues(584, "KBD Lair: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_8, List.of(new WorldPoint(2286, 4680, 0))),
		new Clues(585, "Barrows chest: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_9, List.of(new WorldPoint(3548, 9691, 0))),
		new Clues(586, "Death Altar: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_10, List.of(new WorldPoint(2210, 4842, 0))),
		new Clues(587, "Cam Torum: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_11, List.of(new WorldPoint(1428, 3119, 0))),
		new Clues(588, "Goblin Village: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_12, List.of(new WorldPoint(2959, 3502, 0))),
		new Clues(589, "Zul-Andra: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_13, List.of(new WorldPoint(2204, 3059, 0))),
		new Clues(590, "Lava Dragon Isle: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_14, List.of(new WorldPoint(3229, 3832, 0))),
		new Clues(591, "Wise old man: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_15, List.of(new WorldPoint(3095, 3255, 0))),
		new Clues(592, "Ellamaria's garden: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_16, List.of(new WorldPoint(3232, 3493, 0))),
		new Clues(593, "Catacombs: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_17, List.of(new WorldPoint(1662, 10044, 0))),
		new Clues(594, "Soul Altar: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_18, List.of(new WorldPoint(1811, 3853, 0))),
		new Clues(595, "Enchanted valley: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_19, List.of(new WorldPoint(3022, 4517, 0))),
		new Clues(596, "Watchtower: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_20, List.of(new WorldPoint(2548, 3112, 0))),
		new Clues(597, "Drakan: Emote Castl", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_21, List.of(new WorldPoint(3563, 3379, 0))),
		new Clues(598, "Pyramid Plunder: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_22, List.of(new WorldPoint(1951, 4431, 0))),
		new Clues(599, "Salvager Overlook: Emote", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_EMOTE_23, List.of(new WorldPoint(1614, 3296, 0))),
		new Clues(600, "Dragon scimitar: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_0, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(601, "God book: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_1, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(602, "Crystal bow: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_2, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(603, "Infernal axe: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_3, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(604, "Mark of grace: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_4, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(605, "Lava dragon bones: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_5, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(606, "Armadyl helmet: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_6, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(607, "Dragon defender: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_7, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(608, "Warrior guild token: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_8, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(609, "Greenman's ale(m): Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_9, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(610, "Barrelchest anchor: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_10, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(611, "Basalt: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_11, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(612, "Tzhaar-ket-om: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_12, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(613, "Fighter torso: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_13, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(614, "Barrows gloves: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_14, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(615, "Cooking gauntlets: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_15, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(616, "Numulite: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_16, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(617, "Rune platebody: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_17, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(618, "Ivandis flail: Falo", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_FALO_18, List.of(new WorldPoint(2689, 3549, 0))),
		new Clues(619, "anglerfish: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_0, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(620, "blood rune: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_1, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(621, "burn magic: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_2, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(622, "burn redwood: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_3, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(623, "tecu: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_4, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(624, "chop redwood: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_5, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(625, "graceful: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_6, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(626, "light orb: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_7, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(627, "tablet: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_8, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(628, "amulet: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_9, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(629, "burn fiyr: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_10, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(630, "eel: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_11, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(631, "whip: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_12, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(632, "rune dart: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_13, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(633, "kill fiyr: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_14, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(634, "shaman: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_15, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(635, "reanimate: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_16, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(636, "mage: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_17, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(637, "runite ore: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_18, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(638, "ranging mix: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_19, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(639, "anti-venom: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_20, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(640, "elf: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_21, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(641, "nechryael: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_22, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(642, "rune med: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_23, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(643, "gem: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_24, List.of(new WorldPoint(2733, 3413, 0))),
		new Clues(644, "tree: Sherlock", ItemID.CLUE_SCROLL_MASTER, ClueTier.MASTER, BeginnerMasterClueText.MASTER_SHERLOCK_25, List.of(new WorldPoint(2733, 3413, 0)))
	);

	final String clueText;
	final String clueDetail;
	final Color clueDetailColor;
	final int itemID;
	final int clueID;
	final ClueTier clueTier;

	@Getter
	final OrRequirement regions;

	// To be initialized to avoid passing around
	@Setter
	public static ClueDetailsConfig config;

	Clues(String clueDetail, int itemID, ClueTier clueTier, String clueText, List<WorldPoint> wps)
	{
		this.clueID = -1;
		this.clueDetail = clueDetail;
		this.clueDetailColor = Color.WHITE;
		this.itemID = itemID;
		this.clueTier = clueTier;
		this.clueText = clueText;
		this.regions = new OrRequirement(wps);
	}

	Clues(int clueID, String clueDetail, int itemID, ClueTier clueTier, String clueText, List<WorldPoint> wps)
	{
		this.clueID = clueID;
		this.clueDetail = clueDetail;
		this.clueDetailColor = Color.WHITE;
		this.itemID = itemID;
		this.clueTier = clueTier;
		this.clueText = clueText;
		this.regions = new OrRequirement(wps);
	}

	Clues(String clueDetail, Color clueDetailColor, int itemID, ClueTier clueTier, String clueText, List<WorldPoint> wps)
	{
		this.clueID = -1;
		this.clueDetail = clueDetail;
		this.clueDetailColor = clueDetailColor;
		this.itemID = itemID;
		this.clueTier = clueTier;
		this.clueText = clueText;
		this.regions = new OrRequirement(wps);
	}

	private static final Collection<Integer> TRACKED_CLUE_IDS = List.of(
		ItemID.CLUE_SCROLL_MASTER,
		ItemID.CLUE_SCROLL_BEGINNER
	);

	private static final Collection<Integer> TRACKED_TORN_CLUE_IDS = List.of(
		ItemID.TORN_CLUE_SCROLL_PART_1,
		ItemID.TORN_CLUE_SCROLL_PART_2,
		ItemID.TORN_CLUE_SCROLL_PART_3
	);

	public static final Collection<Integer> DEV_MODE_IDS = List.of(
		ItemID.DAEYALT_ESSENCE
	);

	public static List<Clues> filteredClues()
	{
		if (config == null) return Clues.CLUES;

		List<ClueTier> enabledClues = new ArrayList<>();
		if (config.beginnerDetails()) enabledClues.add(ClueTier.BEGINNER);
		if (config.easyDetails()) enabledClues.add(ClueTier.EASY);
		if (config.mediumDetails())
		{
			enabledClues.add(ClueTier.MEDIUM);
			enabledClues.add(ClueTier.MEDIUM_CHALLENGE);
			enabledClues.add(ClueTier.MEDIUM_KEY);
		}
		if (config.hardDetails())
		{
			enabledClues.add(ClueTier.HARD);
			enabledClues.add(ClueTier.HARD_CHALLENGE);
		}
		if (config.eliteDetails())
		{
			enabledClues.add(ClueTier.ELITE);
			enabledClues.add(ClueTier.ELITE_CHALLENGE);
		}
		if (config.masterDetails()) enabledClues.add(ClueTier.MASTER);

		return Clues.CLUES.stream()
			.filter(c -> enabledClues.contains(c.getClueTier()))
			.collect(Collectors.toList());
	}

	public static Clues forItemId(int itemId)
	{
		for (Clues clue : filteredClues())
		{
			if (clue.clueID == -1 && clue.getItemID() == itemId)
			{
				return clue;
			}
		}
		return null;
	}

	public static Clues forClueId(int clueId)
	{
		for (Clues clue : CLUES)
		{
			if (clue.getClueID() == clueId)
			{
				return clue;
			}
		}
		return null;
	}

	public static Clues forClueIdFiltered(int clueId)
	{
		for (Clues clue : filteredClues())
		{
			if (clue.getClueID() == clueId)
			{
				return clue;
			}
		}
		return null;
	}

	public Integer getClueID()
	{
		if (clueID != -1)
		{
			return clueID;
		}
		return getItemID();
	}

	public static Integer forTextGetId(String rawText)
	{
		final String text = Text.sanitizeMultilineText(rawText).toLowerCase();

		for (Clues clue : filteredClues())
		{
			if (text.equalsIgnoreCase(clue.getClueText()))
			{
				return clue.getClueID();
			}
		}

		return null;
	}

	public static Integer forInterfaceIdGetId(int interfaceId)
	{
		// Only check beginner map clues
		for (int i = 21; i < 26; i++)
		{
			List<Clues> filteredClues = filteredClues();
			if (filteredClues.get(i).getItemID() == interfaceId)
			{
				return filteredClues.get(i).getClueID();
			}
		}
		return null;
	}

	public String getDetail(ConfigManager configManager)
	{
		String text = configManager.getConfiguration("clue-details-text", String.valueOf(getClueID()));
		if (text != null) return text;
		return getClueDetail();
	}

	public Color getDetailColor(ConfigManager configManager)
	{
		String colorCode = configManager.getConfiguration("clue-details-color", String.valueOf(getClueID()));
		if (colorCode != null) return Color.decode(colorCode);
		return getClueDetailColor();
	}

	public List<Integer> getItems(ClueDetailsPlugin plugin, ConfigManager configManager)
	{
		String items = configManager.getConfiguration(CLUE_ITEMS_CONFIG, String.valueOf(getClueID()));
		if (items != null)
		{
			return plugin.gson.fromJson(items, new TypeToken<List<Integer>>()
			{
			}.getType());
		}
		return null;
	}

	public static boolean isClue(int itemId, boolean isDeveloperMode)
	{
		return filteredClues().stream().anyMatch((clue) -> clue.getItemID() == itemId) || (isDeveloperMode && DEV_MODE_IDS.contains(itemId));
	}

	public static boolean isTrackedClue(int itemId, boolean isDeveloperMode)
	{
		return TRACKED_CLUE_IDS.contains(itemId) || (isDeveloperMode && DEV_MODE_IDS.contains(itemId));
	}

	public static boolean isTrackedClueOrTornClue(int itemId, boolean isDeveloperMode)
	{
		return TRACKED_CLUE_IDS.contains(itemId) || TRACKED_TORN_CLUE_IDS.contains(itemId) || (isDeveloperMode && DEV_MODE_IDS.contains(itemId));
	}

	public static Collection<Integer> getTrackedClueAndTornClueIds(boolean isDevMode)
	{
		Collection<Integer> allIds = new ArrayList<>();
		allIds.addAll(TRACKED_CLUE_IDS);
		allIds.addAll(TRACKED_TORN_CLUE_IDS);
		if (isDevMode) allIds.addAll(DEV_MODE_IDS);
		return allIds;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *	  list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *	  this list of conditions and the following disclaimer in the documentation
 *	  and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.awt.Color;
import java.util.List;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.ItemID;
import net.runelite.api.TileItem;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.config.ConfigManager;

@Data
public class ClueInstance
{
	@Setter
	private List<Integer> clueIds; // Fake ID from ClueText
	private final int itemId; // Clue item ID
	private final WorldPoint location; // Null if in inventory

	@Getter
	private final Integer timeToDespawnFromDataInTicks;
	private TileItem tileItem;

	// Constructor for clues from config
	public ClueInstance(ClueInstanceData data)
	{
		this.clueIds = data.getClueIds();
		this.itemId = data.getItemId();
		this.location = data.getLocation();
		// if had on then turned off in same session, we don't know what happened in meantime.
		// Ticks go forward even when logged into other game modes. For simplicity we assume when
		// Loaded we just are starting from the exact same despawn time remaining.
		this.timeToDespawnFromDataInTicks = data.getDespawnTick();
	}

	// Constructor for inventory clues from inventory changed event
	public ClueInstance(List<Integer> clueIds, int itemId)
	{
		this.clueIds = clueIds;
		this.itemId = itemId;
		this.location = null;
		this.timeToDespawnFromDataInTicks = -1;
	}

	// Constructor for ground clues
	public ClueInstance(List<Integer> clueIds, int itemId, WorldPoint location, TileItem tileItem, int currentTick)
	{
		this.clueIds = clueIds;
		this.itemId = itemId;
		this.location = location;
		this.tileItem = tileItem;
		this.timeToDespawnFromDataInTicks = currentTick;
	}

	public int getDespawnTick(int currentTick)
	{
		if (tileItem != null)
		{
			return tileItem.getDespawnTime();
		}
		return currentTick + timeToDespawnFromDataInTicks;
	}

	// Theory: This should mean that tiles we've seen have TileItem, and the actual despawn is used for ALL items on that tile
	// For tiles we've not seen this session, all items on it should have no TileItem, and thus we'll keep the same consistent tick diff
	public int getTicksToDespawnConsideringTileItem(int currentTick)
	{
		if (tileItem != null)
		{
			return tileItem.getDespawnTime() - currentTick;
		}
		return timeToDespawnFromDataInTicks == null ? -1 : timeToDespawnFromDataInTicks;
	}

	public String getCombinedClueText(ClueDetailsPlugin plugin, ConfigManager configManager, boolean showColor, boolean isFloorText)
	{
		StringBuilder returnText = new StringBuilder();
		boolean isFirst = true;
		for (Integer clueId : getClueIds())
		{
			Clues cluePart = Clues.forClueId(clueId);
			if (cluePart == null) continue;
			if (isFirst)
			{
				isFirst = false;
			}
			else
			{
				returnText.append("<br>");
			}

			if (showColor)
			{
				Color color = cluePart.getDetailColor(configManager);

				// Only change floor text color if it's not the default
				if (!(isFloorText && color == Color.WHITE))
				{
					String hexColor = Integer.toHexString(color.getRGB()).substring(2);
					returnText.append("<col=").append(hexColor).append(">");
				}
			}

			returnText.append(cluePart.getDetail(configManager));
		}
		if (returnText.length() == 0) return getItemName(plugin);
		return returnText.toString();
	}

	public String getItemName(ClueDetailsPlugin plugin)
	{
		return plugin.getItemManager().getItemComposition(itemId).getName();
	}

	public boolean isEnabled(ClueDetailsConfig config)
	{
		if (itemId == ItemID.CLUE_SCROLL_BEGINNER)
		{
			return config.beginnerDetails();
		}
		else if (itemId == ItemID.CLUE_SCROLL_MASTER )
		{
			return config.masterDetails();
		}
		return true;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.util.List;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
public class ClueInstanceData
{
	private List<Integer> clueIds;
	private int itemId;
	private int despawnTick;
	private int x;
	private int y;
	private int plane;

	public ClueInstanceData(ClueInstance clue, int currentTick)
	{
		this.clueIds = clue.getClueIds();
		this.itemId = clue.getItemId();
		this.despawnTick = clue.getTicksToDespawnConsideringTileItem(currentTick);
		if (clue.getLocation() == null) return;

		this.x = clue.getLocation().getX();
		this.y = clue.getLocation().getY();
		this.plane = clue.getLocation().getPlane();
	}

	public WorldPoint getLocation()
	{
		return new WorldPoint(x, y, plane);
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://www.github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import lombok.Getter;
import net.runelite.api.TileItem;
import net.runelite.api.coords.WorldPoint;

@Getter
public class PendingGroundClue
{
	private final TileItem item;
	private final WorldPoint location;
	private final int spawnTick;

	public PendingGroundClue(TileItem item, WorldPoint location, int spawnTick)
	{
		this.item = item;
		this.location = location;
		this.spawnTick = spawnTick;
	}
}
/*
 * Copyright (c) 2024, TheLope <https://github.com/TheLope>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

public class BeginnerMasterClueText
{
	private static final String ANAGRAM_TEXT = "This anagram reveals who to speak to next: ";
	private static final String ANAGRAM_TEXT_BEGINNER = "The anagram reveals who to speak to next: ";
	public static final String BEGINNER_ANAGRAM_0 = ANAGRAM_TEXT_BEGINNER + "AN EARL";
	public static final String BEGINNER_ANAGRAM_1 = ANAGRAM_TEXT_BEGINNER + "CHAR GAME DISORDER";
	public static final String BEGINNER_ANAGRAM_2 = ANAGRAM_TEXT_BEGINNER + "CARPET AHOY";
	public static final String BEGINNER_ANAGRAM_3 = ANAGRAM_TEXT_BEGINNER + "I CORD";
	public static final String BEGINNER_ANAGRAM_4 = ANAGRAM_TEXT_BEGINNER + "IN BAR";
	public static final String BEGINNER_ANAGRAM_5 = ANAGRAM_TEXT_BEGINNER + "RAIN COVE";
	public static final String BEGINNER_ANAGRAM_6 = ANAGRAM_TEXT_BEGINNER + "RUG DETER";
	public static final String BEGINNER_ANAGRAM_7 = ANAGRAM_TEXT_BEGINNER + "SIR SHARE RED";
	public static final String BEGINNER_ANAGRAM_8 = ANAGRAM_TEXT_BEGINNER + "TAUNT ROOF";
	public static final String BEGINNER_CRYPTIC_0 = "Always walking around the castle grounds and somehow knows everyone's age.";
	public static final String BEGINNER_CRYPTIC_1 = "Buried beneath the ground, who knows where it's found. Lucky for you, a man called Reldo may have a clue.";
	public static final String BEGINNER_CRYPTIC_2 = "In the place Duke Horacio calls home, talk to a man with a hat dropped by goblins.";
	public static final String BEGINNER_CRYPTIC_3 = "In a village of barbarians, I am the one who guards the village from up high.";
	public static final String BEGINNER_CRYPTIC_4 = "Talk to Charlie the Tramp in Varrock.";
	public static final String BEGINNER_CRYPTIC_5 = "Near the open desert I reside, to get past me you must abide. Go forward if you dare, for when you pass me, you'll be sweating by your hair.";
	public static final String BEGINNER_EMOTE_0 = "Blow a raspberry at Aris in her tent. Equip a gold ring and a gold necklace.";
	public static final String BEGINNER_EMOTE_1 = "Bow to Brugsen Bursen at the Grand Exchange.";
	public static final String BEGINNER_EMOTE_2 = "Cheer at Iffie Nitter. Equip a chef hat and a red cape.";
	public static final String BEGINNER_EMOTE_3 = "Clap at Bob's Brilliant Axes. Equip a bronze axe and leather boots.";
	public static final String BEGINNER_EMOTE_4 = "Panic at Al Kharid mine.";
	public static final String BEGINNER_EMOTE_5 = "Spin at Flynn's Mace Shop.";
	public static final String BEGINNER_CHARLIE_0 = "I need to give Charlie a cooked trout.";
	public static final String BEGINNER_CHARLIE_1 = "I need to give Charlie a cooked pike.";
	public static final String BEGINNER_CHARLIE_2 = "I need to give Charlie a raw herring.";
	public static final String BEGINNER_CHARLIE_3 = "I need to give Charlie a raw trout.";
	public static final String BEGINNER_CHARLIE_4 = "I need to give Charlie a piece of iron ore.";
	public static final String BEGINNER_CHARLIE_5 = "I need to give Charlie one iron dagger.";
	public static final String BEGINNER_CHARLIE_6 = "I need to give Charlie a leather body.";
	public static final String BEGINNER_CHARLIE_7 = "I need to give Charlie some leather chaps.";
	public static final String MASTER_ANAGRAM_0 = ANAGRAM_TEXT + "A Elf Knows";
	public static final String MASTER_ANAGRAM_1 = ANAGRAM_TEXT + "Brucie Catnap";
	public static final String MASTER_ANAGRAM_2 = ANAGRAM_TEXT + "Car If Ices";
	public static final String MASTER_ANAGRAM_3 = ANAGRAM_TEXT + "Ded War";
	public static final String MASTER_ANAGRAM_4 = ANAGRAM_TEXT + "Dim Tharn";
	public static final String MASTER_ANAGRAM_5 = ANAGRAM_TEXT + "Duo Plug";
	public static final String MASTER_ANAGRAM_6 = ANAGRAM_TEXT + "Forlun";
	public static final String MASTER_ANAGRAM_7 = ANAGRAM_TEXT + "Im N Zezim";
	public static final String MASTER_ANAGRAM_8 = ANAGRAM_TEXT + "Mal in Tau";
	public static final String MASTER_ANAGRAM_9 = ANAGRAM_TEXT + "Mold La Ran";
	public static final String MASTER_ANAGRAM_10 = ANAGRAM_TEXT + "Mus Kil Reader";
	public static final String MASTER_ANAGRAM_11 = ANAGRAM_TEXT + "Rip Maul";
	public static final String MASTER_ANAGRAM_12 = ANAGRAM_TEXT + "Rue Go";
	public static final String MASTER_ANAGRAM_13 = ANAGRAM_TEXT + "Slam Duster Grail";
	public static final String MASTER_ANAGRAM_14 = ANAGRAM_TEXT + "Ten Wigs On";
	public static final String MASTER_ANAGRAM_15 = ANAGRAM_TEXT + "Twenty Cure Iron";
	public static final String MASTER_COORDINATE_0 = "1 degree 30 minutes north 8 degrees 11 minutes west";
	public static final String MASTER_COORDINATE_1 = "1 degree 54 minutes south 8 degrees 54 minutes west";
	public static final String MASTER_COORDINATE_2 = "2 degrees 9 minutes south 6 degrees 58 minutes west";
	public static final String MASTER_COORDINATE_3 = "3 degrees 9 minutes south 43 degrees 26 minutes east";
	public static final String MASTER_COORDINATE_4 = "3 degrees 26 minutes north 12 degrees 18 minutes east";
	public static final String MASTER_COORDINATE_5 = "3 degrees 50 minutes north 9 degrees 7 minutes east";
	public static final String MASTER_COORDINATE_6 = "4 degrees 58 minutes north 36 degrees 56 minutes east";
	public static final String MASTER_COORDINATE_7 = "5 degrees 13 minutes north 4 degrees 16 minutes west";
	public static final String MASTER_COORDINATE_8 = "7 degrees 37 minutes north 35 degrees 18 minutes east";
	public static final String MASTER_COORDINATE_9 = "8 degrees 1 minute north 20 degrees 58 minutes west";
	public static final String MASTER_COORDINATE_10 = "8 degrees 11 minutes north 12 degrees 30 minutes east";
	public static final String MASTER_COORDINATE_11 = "12 degrees 35 minutes north 36 degrees 22 minutes east";
	public static final String MASTER_COORDINATE_12 = "12 degrees 45 minutes north 20 degrees 9 minutes east";
	public static final String MASTER_COORDINATE_13 = "13 degrees 33 minutes south 15 degrees 26 minutes east";
	public static final String MASTER_COORDINATE_14 = "16 degrees 41 minutes north 30 degrees 54 minutes west";
	public static final String MASTER_COORDINATE_15 = "18 degrees 3 minutes north 3 degrees 3 minutes east";
	public static final String MASTER_COORDINATE_16 = "18 degrees 26 minutes north 37 degrees 15 minutes west";
	public static final String MASTER_COORDINATE_17 = "19 degrees 43 minutes north 23 degrees 11 minutes west";
	public static final String MASTER_COORDINATE_18 = "20 degrees 35 minutes north 15 degrees 58 minutes east";
	public static final String MASTER_COORDINATE_19 = "20 degrees 45 minutes north 7 degrees 26 minutes west";
	public static final String MASTER_COORDINATE_20 = "21 degrees 37 minutes north 21 degrees 13 minutes west";
	public static final String MASTER_COORDINATE_21 = "21 degrees 56 minutes north 10 degrees 56 minutes west";
	public static final String MASTER_COORDINATE_22 = "22 degrees 24 minutes north 31 degrees 11 minutes west";
	public static final String MASTER_COORDINATE_23 = "24 degrees 0 minutes north 29 degrees 22 minutes east";
	public static final String MASTER_COORDINATE_24 = "24 degrees 18 minutes north 23 degrees 22 minutes east";
	public static final String MASTER_COORDINATE_25 = "24 degrees 22 minutes north 27 degrees 0 minutes east";
	public static final String MASTER_COORDINATE_26 = "23 degrees 58 minutes north 18 degrees 22 minutes east";
	public static final String MASTER_CRYPTIC_0 = "2 musical birds. Dig in front of the spinning light.";
	public static final String MASTER_CRYPTIC_1 = "A chisel and hammer reside in his home, strange for one of magic. Impress him with your magical equipment.";
	public static final String MASTER_CRYPTIC_2 = "A dwarf, approaching death, but very much in the light.";
	public static final String MASTER_CRYPTIC_3 = "A massive battle rages beneath so be careful when you dig by the large broken crossbow.";
	public static final String MASTER_CRYPTIC_4 = "Anger Abbot Langley.";
	public static final String MASTER_CRYPTIC_5 = "Anger those who adhere to Saradomin's edicts to prevent travel.";
	public static final String MASTER_CRYPTIC_6 = "Buried beneath the ground, who knows where it's found. Lucky for you, A man called Jorral may have a clue.";
	public static final String MASTER_CRYPTIC_7 = "Come brave adventurer, your sense is on fire. If you talk to me, it's an old god you desire.";
	public static final String MASTER_CRYPTIC_8 = "Darkness wanders around me, but fills my mind with knowledge.";
	public static final String MASTER_CRYPTIC_9 = "Dig in front of the icy arena where 1 of 4 was fought.";
	public static final String MASTER_CRYPTIC_10 = "Faint sounds of 'Arr', fire giants found deep, the eastern tip of a lake, are the rewards you could reap.";
	public static final String MASTER_CRYPTIC_11 = "Falo the bard wants to see you.";
	public static final String MASTER_CRYPTIC_12 = "Elvish onions.";
	public static final String MASTER_CRYPTIC_13 = "Fiendish cooks probably won't dig the dirty dishes.";
	public static final String MASTER_CRYPTIC_14 = "The doorman of the Warriors' Guild wishes to be impressed by how strong your equipment is.";
	public static final String MASTER_CRYPTIC_15 = "Great demons, dragons and spiders protect this blue rock, beneath which, you may find what you seek.";
	public static final String MASTER_CRYPTIC_16 = "Guthix left his mark in a fiery lake, dig at the tip of it.";
	public static final String MASTER_CRYPTIC_17 = "Here, there are tears, but nobody is crying. Speak to the guardian and show off your alignment to balance.";
	public static final String MASTER_CRYPTIC_18 = "Hopefully this set of armour will help you to keep surviving.";
	public static final String MASTER_CRYPTIC_19 = "If you're feeling brave, dig beneath the dragon's eye.";
	public static final String MASTER_CRYPTIC_20 = "I lie beneath the first descent to the holy encampment.";
	public static final String MASTER_CRYPTIC_21 = "My life was spared but these voices remain, now guarding these iron gates is my bane.";
	public static final String MASTER_CRYPTIC_22 = "One of several rhyming brothers, in business attire with an obsession for paper work.";
	public static final String MASTER_CRYPTIC_23 = "Pentagrams and demons, burnt bones and remains, I wonder what the blood contains.";
	public static final String MASTER_CRYPTIC_24 = "Robin wishes to see your finest ranged equipment.";
	public static final String MASTER_CRYPTIC_25 = "She's small but can build both literally and figuratively.";
	public static final String MASTER_CRYPTIC_26 = "Shhhh!";
	public static final String MASTER_CRYPTIC_27 = "Show this to Sherlock.";
	public static final String MASTER_CRYPTIC_28 = "South of a river in a town surrounded by the undead, what lies beneath the furnace?";
	public static final String MASTER_CRYPTIC_29 = "The far north eastern corner where 1 of 4 was defeated, the shadows still linger.";
	public static final String MASTER_CRYPTIC_30 = "This place sure is a mess.";
	public static final String MASTER_CRYPTIC_31 = "Under a giant robotic bird that cannot fly.";
	public static final String MASTER_CRYPTIC_32 = "Where safe to speak, the man who offers the pouch of smallest size wishes to see your alignment.";
	public static final String MASTER_EMOTE_0 = "Beckon by a collection of crystalline maple trees. Beware of double agents! Equip Bryophyta's staff and a nature tiara.";
	public static final String MASTER_EMOTE_1 = "Blow a kiss outside K'ril Tsutsaroth's chamber. Beware of double agents! Equip a zamorak full helm and the shadow sword.";
	public static final String MASTER_EMOTE_2 = "Blow a raspberry in the bank of the Warriors' Guild. Beware of double agents! Equip a dragon battleaxe, a slayer helm of any kind and a dragon defender or avernic defender.";
	public static final String MASTER_EMOTE_3 = "Bow in the Iorwerth Camp. Beware of double agents! Equip a charged crystal bow.";
	public static final String MASTER_EMOTE_4 = "Cheer in the Entrana church. Beware of double agents! Equip a full set of black dragonhide armour.";
	public static final String MASTER_EMOTE_5 = "Clap in the magic axe hut. Beware of double agents! Equip only some flared trousers.";
	public static final String MASTER_EMOTE_6 = "Cry in the TzHaar gem store. Beware of double agents! Equip a fire cape and TokTz-Xil-Ul.";
	public static final String MASTER_EMOTE_7 = "Dance in Iban's temple. Beware of double agents! Equip Iban's staff, a black mystic top and a black mystic bottom.";
	public static final String MASTER_EMOTE_8 = "Dance in the King Black Dragon's lair. Beware of double agents! Equip a black dragonhide body, black dragonhide vambraces and a black dragon mask.";
	public static final String MASTER_EMOTE_9 = "Do a jig at the Barrows chest. Beware of double agents! Equip any full barrows set.";
	public static final String MASTER_EMOTE_10 = "Flap at the Death Altar. Beware of double agents! Equip a death tiara, a legend's cape and any ring of wealth.";
	public static final String MASTER_EMOTE_11 = "Salute outside the gates of Cam Torum. Beware of double agents! Equip a full set of blue moon equipment.";
	public static final String MASTER_EMOTE_12 = "Goblin salute in the Goblin village. Beware of double agents! Equip a bandos godsword, a bandos cloak and a bandos platebody.";
	public static final String MASTER_EMOTE_13 = "Jump for joy in the centre of Zul-Andra. Beware of double agents! Equip a dragon 2h sword, bandos boots and an obsidian cape.";
	public static final String MASTER_EMOTE_14 = "Panic by the big egg where no one dare goes and the ground is burnt. Beware of double agents! Equip a dragon med helm, a TokTz-Ket-Xil, a brine sabre, rune platebody and an uncharged amulet of glory.";
	public static final String MASTER_EMOTE_15 = "Show your anger at the Wise old man. Beware of double agents! Equip an abyssal whip, a legend's cape and some spined chaps.";
	public static final String MASTER_EMOTE_16 = "Show your anger towards the statue of Saradomin in Ellamaria's garden. Beware of double agents! Equip a zamorak godsword.";
	public static final String MASTER_EMOTE_17 = "Slap your head in the centre of the Kourend catacombs. Beware of double agents! Equip arclight or emberlight along with the amulet of the damned.";
	public static final String MASTER_EMOTE_18 = "Spin in front of the Soul Altar. Beware of double agents! Equip a dragon pickaxe, helm of Neitiznot and a pair of rune boots.";
	public static final String MASTER_EMOTE_19 = "Stamp in the Enchanted Valley west of the waterfall. Beware of double agents! Equip a dragon axe.";
	public static final String MASTER_EMOTE_20 = "Swing a bullroarer at the top of the Watchtower. Beware of double agents! Equip a dragon plateskirt, climbing boots and a dragon chainbody.";
	public static final String MASTER_EMOTE_21 = "Wave on the northern wall of Castle Drakan. Beware of double agents! Wear a dragon sq shield, splitbark body and any boater.";
	public static final String MASTER_EMOTE_22 = "Yawn in the 7th room of Pyramid Plunder. Beware of double agents! Equip a pharaoh sceptre and a full set of menaphite robes.";
	public static final String MASTER_EMOTE_23 = "Think on the western coast of Salvager Overlook. Beware of double agents! Equip a Hueycoatl hide coif and some Hueycoatl hide vambraces.";
	public static final String MASTER_FALO_0 = "A blood red weapon, a strong curved sword, found on the island of primate lords.";
	public static final String MASTER_FALO_1 = "A book that preaches of some great figure, lending strength, might and vigour.";
	public static final String MASTER_FALO_2 = "A bow of elven craft was made, it shimmers bright, but will soon fade.";
	public static final String MASTER_FALO_3 = "A fiery axe of great inferno, when you use it, you'll wonder where the logs go.";
	public static final String MASTER_FALO_4 = "A mark used to increase one's grace, found atop a seer's place.";
	public static final String MASTER_FALO_5 = "A molten beast with fiery breath, you acquire these with its death.";
	public static final String MASTER_FALO_6 = "A shiny helmet of flight, to obtain this with melee, struggle you might.";
	public static final String MASTER_FALO_7 = "A sword held in the other hand, red its colour, Cyclops strength you must withstand.";
	public static final String MASTER_FALO_8 = "A token used to kill mythical beasts, in hopes of a blade or just for an xp feast.";
	public static final String MASTER_FALO_9 = "Green is my favourite, mature ale I do love, this takes your herblore above.";
	public static final String MASTER_FALO_10 = "It can hold down a boat or crush a goat, this object, you see, is quite heavy.";
	public static final String MASTER_FALO_11 = "It comes from the ground, underneath the snowy plain. Trolls aplenty, with what looks like a mane.";
	public static final String MASTER_FALO_12 = "No attack to wield, only strength is required, made of obsidian, but with no room for a shield.";
	public static final String MASTER_FALO_13 = "Penance healers runners and more, obtaining this body often gives much deplore.";
	public static final String MASTER_FALO_14 = "Strangely found in a chest, many believe these gloves are the best.";
	public static final String MASTER_FALO_15 = "These gloves of white won't help you fight, but aid in cooking, they just might.";
	public static final String MASTER_FALO_16 = "They come from some time ago, from a land unto the east. Fossilised they have become, this small and gentle beast.";
	public static final String MASTER_FALO_17 = "To slay a dragon you must first do, before this chest piece can be put on you.";
	public static final String MASTER_FALO_18 = "Vampyres are agile opponents, damaged best with a weapon of many components.";
	public static final String MASTER_SHERLOCK_0 = "Angle for an Anglerfish whilst sporting the finest fishing gear.";
	public static final String MASTER_SHERLOCK_1 = "Bind a blood rune at the Blood Altar.";
	public static final String MASTER_SHERLOCK_2 = "Burn a magic log.";
	public static final String MASTER_SHERLOCK_3 = "Burn a redwood log.";
	public static final String MASTER_SHERLOCK_4 = "Catch a tecu salamander.";
	public static final String MASTER_SHERLOCK_5 = "Chop a redwood log whilst sporting the finest lumberjack gear.";
	public static final String MASTER_SHERLOCK_6 = "Complete a lap of the Rellekka rooftop agility course whilst sporting the finest amount of grace.";
	public static final String MASTER_SHERLOCK_7 = "Craft a light orb in the Dorgesh-Kaan bank.";
	public static final String MASTER_SHERLOCK_8 = "Create a Barrows teleport tablet.";
	public static final String MASTER_SHERLOCK_9 = "Create an unstrung dragonstone amulet at a furnace.";
	public static final String MASTER_SHERLOCK_10 = "Cremate a set of fiyr remains.";
	public static final String MASTER_SHERLOCK_11 = "Dissect a sacred eel.";
	public static final String MASTER_SHERLOCK_12 = "Equip an abyssal whip in front of the abyssal demons of the Slayer Tower.";
	public static final String MASTER_SHERLOCK_13 = "Fletch a rune dart.";
	public static final String MASTER_SHERLOCK_14 = "Kill a Fiyr shade inside Mort'tons shade catacombs.";
	public static final String MASTER_SHERLOCK_15 = "Kill a lizardman shaman.";
	public static final String MASTER_SHERLOCK_16 = "Kill a reanimated abyssal.";
	public static final String MASTER_SHERLOCK_17 = "Kill the spiritual, magic and godly whilst representing their own god.";
	public static final String MASTER_SHERLOCK_18 = "Mine a piece of runite ore whilst sporting the finest mining gear.";
	public static final String MASTER_SHERLOCK_19 = "Mix a ranging mix potion.";
	public static final String MASTER_SHERLOCK_20 = "Mix an anti-venom potion.";
	public static final String MASTER_SHERLOCK_21 = "Pickpocket an elf.";
	public static final String MASTER_SHERLOCK_22 = "Slay a Nechryael in the Slayer Tower.";
	public static final String MASTER_SHERLOCK_23 = "Smith a runite med helm.";
	public static final String MASTER_SHERLOCK_24 = "Steal a gem from the Ardougne market.";
	public static final String MASTER_SHERLOCK_25 = "Teleport to a spirit tree you planted yourself.";

	public BeginnerMasterClueText()
	{
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import com.cluedetails.Clues;
import lombok.Getter;

@Getter
public class ListItem
{
	private Clues clue;
	private String header;

	public ListItem(Clues clue)
	{
		this.clue = clue;
	}

	public ListItem(String header)
	{
		this.header = header;
	}

	public boolean isHeader()
	{
		return header != null;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import java.awt.Dimension;
import java.util.EventObject;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;

public class ClueJTable extends JTable
{
	public ClueJTable(TableModel tableModel)
	{
		super(tableModel);
		getColumnModel().getColumn(0).setPreferredWidth(10);
		setRowHeight(30);
		setShowGrid(false);
		setIntercellSpacing(new Dimension(0, 0));
		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		setTableHeader(null);

		setSurrendersFocusOnKeystroke(false);
		setCellSelectionEnabled(false);
		setFocusable(false);
	}

	@Override
	public boolean editCellAt(int row, int column, EventObject e)
	{
		if (dataModel.isCellEditable(row, column))
		{
			return super.editCellAt(row, column, e);
		}
		return false;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.AbstractTableModel;

public class ClueTableModel extends AbstractTableModel
{
	private static final int COLUMN_COUNT = 1;
	private int editableRow = -1;

	private List<ListItem> items = new ArrayList<>();

	public void setItems(List<ListItem> items)
	{
		this.items = items;
		fireTableDataChanged();
	}

	@Override
	public int getRowCount()
	{
		return items.size();
	}

	@Override
	public int getColumnCount()
	{
		return COLUMN_COUNT;
	}

	@Override
	public Object getValueAt(int rowIndex, int columnIndex)
	{
		return items.get(rowIndex);
	}

	public void setEditableRow(int row)
	{
		this.editableRow = row;
		fireTableCellUpdated(row, 0);
	}

	public void resetEditableRow()
	{
		int previousEditableRow = this.editableRow;
		this.editableRow = -1;
		if (previousEditableRow != -1)
		{
			fireTableCellUpdated(previousEditableRow, 0);
		}
	}

	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex)
	{
		return rowIndex == editableRow;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import com.cluedetails.Clues;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractCellEditor;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import javax.swing.table.TableCellEditor;
import lombok.Getter;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.FlatTextField;

public class ClueTableCellEditor extends AbstractCellEditor implements TableCellEditor
{
	private JPanel editorComponent = new JPanel(new BorderLayout());
	@Getter
	private FlatTextField nameInput = new FlatTextField();
	private JPanel nameActions = new JPanel(new BorderLayout(3, 0));
	private JTextArea save = JGenerator.makeJTextArea("Save");
	private JTextArea cancel = JGenerator.makeJTextArea("Cancel");

	private Clues clue;
	private ConfigManager configManager;
	private JTable clueTable;

	public ClueTableCellEditor(ConfigManager configManager, JTable clueTable)
	{
		this.configManager = configManager;
		this.clueTable = clueTable;

		editorComponent.setOpaque(true);
		editorComponent.setBackground(ColorScheme.DARK_GRAY_COLOR);
		editorComponent.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
		nameInput.setBorder(null);
		nameInput.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		nameInput.setPreferredSize(new Dimension(0, 24));
		nameInput.getTextField().setForeground(Color.WHITE);
		nameInput.getTextField().setBorder(new EmptyBorder(0, 5, 0, 0));

		save.setPreferredSize(new Dimension(30, 10));
		save.setBorder(new EmptyBorder(8, 0, 0, 0));
		save.setFont(FontManager.getRunescapeSmallFont());
		save.setForeground(ColorScheme.PROGRESS_COMPLETE_COLOR);
		save.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				stopCellEditing();
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				save.setForeground(ColorScheme.PROGRESS_COMPLETE_COLOR.darker());
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				save.setForeground(ColorScheme.PROGRESS_COMPLETE_COLOR);
			}
		});

		cancel.setPreferredSize(new Dimension(35, 10));
		cancel.setBorder(new EmptyBorder(8, 0, 0, 0));
		cancel.setFont(FontManager.getRunescapeSmallFont());
		cancel.setForeground(ColorScheme.PROGRESS_ERROR_COLOR);
		cancel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				cancelCellEditing();
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				cancel.setForeground(ColorScheme.PROGRESS_ERROR_COLOR.darker());
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				cancel.setForeground(ColorScheme.PROGRESS_ERROR_COLOR);
			}
		});

		nameActions.setOpaque(false);
		nameActions.add(save, BorderLayout.EAST);
		nameActions.add(cancel, BorderLayout.WEST);

		editorComponent.add(nameInput, BorderLayout.CENTER);
		editorComponent.add(nameActions, BorderLayout.EAST);
	}

	@Override
	public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)
	{
		ListItem item = (ListItem) value;
		clue = item.getClue();

		String displayText = clue.getDetail(configManager);
		nameInput.setText(displayText);
		nameInput.getTextField().selectAll();

		return editorComponent;
	}

	@Override
	public Object getCellEditorValue()
	{
		return clue;
	}

	@Override
	public boolean stopCellEditing()
	{
		String newName = nameInput.getText().trim();
		if (!newName.isEmpty())
		{
			configManager.setConfiguration("clue-details-text", String.valueOf(clue.getClueID()), newName);
		}
		((ClueTableModel) clueTable.getModel()).resetEditableRow();
		return super.stopCellEditing();
	}

	@Override
	public void cancelCellEditing()
	{
		((ClueTableModel) clueTable.getModel()).resetEditableRow();
		super.cancelCellEditing();
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

public class JGenerator
{
	public static JTextArea makeJTextArea()
	{
		JTextArea jTextArea = new JTextArea();
		jTextArea.setLineWrap(true);
		jTextArea.setWrapStyleWord(true);
		jTextArea.setOpaque(false);
		jTextArea.setEditable(false);
		jTextArea.setFocusable(false);
		jTextArea.setBackground(null);
		jTextArea.setBorder(new EmptyBorder(0, 0, 0, 0));

		return jTextArea;
	}

	public static JTextArea makeJTextArea(String text)
	{
		JTextArea jTextArea = new JTextArea(text);
		jTextArea.setLineWrap(true);
		jTextArea.setWrapStyleWord(true);
		jTextArea.setOpaque(false);
		jTextArea.setEditable(false);
		jTextArea.setFocusable(false);
		jTextArea.setBackground(null);
		jTextArea.setBorder(new EmptyBorder(0, 0, 0, 0));

		return jTextArea;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import com.cluedetails.CluePreferenceManager;
import com.cluedetails.Clues;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.table.TableCellRenderer;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.ColorScheme;

public class ClueTableCellRenderer extends JPanel implements TableCellRenderer
{
	// Constants for borders and colors
	private static final Border SELECTED_BORDER = new CompoundBorder(
		BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.BRAND_ORANGE),
		BorderFactory.createEmptyBorder(5, 10, 4, 10));
	private static final Border UNSELECTED_BORDER = BorderFactory.createEmptyBorder(5, 10, 5, 10);

	private JTextArea textArea = JGenerator.makeJTextArea();
	private CluePreferenceManager cluePreferenceManager;
	private ConfigManager configManager;
	private ClueDetailsParentPanel clueDetailsParentPanel;

	public ClueTableCellRenderer(ClueDetailsParentPanel clueDetailsParentPanel, CluePreferenceManager cluePreferenceManager, ConfigManager configManager)
	{
		this.clueDetailsParentPanel = clueDetailsParentPanel;
		this.cluePreferenceManager = cluePreferenceManager;
		this.configManager = configManager;

		setLayout(new BorderLayout());
		setOpaque(true);
		setBorder(new EmptyBorder(5, 5, 0, 5));

		textArea.setMargin(new Insets(5, 5, 5, 0));
		add(textArea, BorderLayout.CENTER);
	}

	@Override
	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
	{
		ListItem item = (ListItem) value;
		if (item.isHeader())
		{
			textArea.setText(item.getHeader());
			textArea.setForeground(Color.WHITE);
			textArea.setBackground(ColorScheme.DARK_GRAY_COLOR);
			setBackground(ColorScheme.DARK_GRAY_COLOR);
			textArea.setBorder(UNSELECTED_BORDER);
		}
		else
		{
			Clues clue = item.getClue();
			textArea.setText(clue.getDetail(configManager));
			textArea.setBackground(clueDetailsParentPanel.getHoveredRow() == row ? ColorScheme.DARK_GRAY_HOVER_COLOR : ColorScheme.DARKER_GRAY_COLOR);
			textArea.setForeground(clue.getDetailColor(configManager));
			textArea.setOpaque(true);

			boolean isActive = cluePreferenceManager.getHighlightPreference(clue.getClueID());
			textArea.setBorder(isActive ? SELECTED_BORDER : UNSELECTED_BORDER);
			setBackground(ColorScheme.DARK_GRAY_COLOR);
		}

		adjustRowHeight(table, row);

		return this;
	}

	private void adjustRowHeight(JTable table, int row)
	{
		int prefHeight = getPreferredHeight(textArea);

		if (table.getRowHeight(row) != prefHeight)
		{
			table.setRowHeight(row, prefHeight + 6);
		}
	}

	private int getPreferredHeight(JTextArea textArea)
	{
		int prefHeight = textArea.getPreferredSize().height + getInsets().top + getInsets().bottom;

		return prefHeight;
	}
}
/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import com.cluedetails.*;
import com.cluedetails.ClueDetailsConfig.*;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.ItemID;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.chatbox.ChatboxItemSearch;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.grounditems.GroundItemsConfig;
import net.runelite.client.plugins.inventorytags.InventoryTagsConfig;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.ui.components.colorpicker.RuneliteColorPicker;
import net.runelite.client.util.ImageUtil;
import org.apache.commons.text.WordUtils;

public class ClueDetailsParentPanel extends PluginPanel
{
	JPanel searchCluesPanel = new JPanel();
	private JComboBox<Enum> tierFilterDropdown, regionFilterDropdown, orderDropdown;

	public static final int DROPDOWN_HEIGHT = 26;

	private ClueTableModel clueTableModel;
	private JTable clueTable;
	@Getter
	private int hoveredRow = -1;
	private final IconTextField searchBar = new IconTextField();
	private List<ListItem> allClues = new ArrayList<>();

	private ConfigManager configManager;

	private ChatboxPanelManager chatboxPanelManager;

	private CluePreferenceManager cluePreferenceManager;
	private ClueDetailsSharingManager clueDetailsSharingManager;
	private final ClueDetailsPlugin plugin;
	private final ClueDetailsConfig config;

	private final JScrollPane scrollableContainer;

	private final JPanel allDropdownSections = new JPanel();

	private static final ImageIcon RESET_ICON;
	private static final ImageIcon RESET_HOVER_ICON;
	private static final ImageIcon COPY_ICON;
	private static final ImageIcon COPY_HOVER_ICON;
	private static final ImageIcon PASTE_ICON;
	private static final ImageIcon PASTE_HOVER_ICON;

	private final JLabel resetMarkers = new JLabel(RESET_ICON);
	private final JLabel copyMarkers = new JLabel(COPY_ICON);
	private final JLabel pasteMarkers = new JLabel(PASTE_ICON);

	static
	{
		final BufferedImage resetIcon = ImageUtil.loadImageResource(ClueDetailsPlugin.class, "/reset_icon.png");
		RESET_ICON = new ImageIcon(resetIcon);
		RESET_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(resetIcon, 0.53f));

		final BufferedImage copyIcon = ImageUtil.loadImageResource(ClueDetailsPlugin.class, "/copy_icon.png");
		COPY_ICON = new ImageIcon(copyIcon);
		COPY_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(copyIcon, 0.53f));

		final BufferedImage pasteIcon = ImageUtil.loadImageResource(ClueDetailsPlugin.class, "/paste_icon.png");
		PASTE_ICON = new ImageIcon(pasteIcon);
		PASTE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(pasteIcon, 0.53f));
	}

	public ClueDetailsParentPanel(ConfigManager configManager, CluePreferenceManager cluePreferenceManager, ClueDetailsConfig config,
									ChatboxPanelManager chatboxPanelManager, ClueDetailsSharingManager clueDetailsSharingManager, ClueDetailsPlugin plugin)
	{
		super(false);

		this.configManager = configManager;
		this.cluePreferenceManager = cluePreferenceManager;
		this.config = config;
		this.chatboxPanelManager = chatboxPanelManager;
		this.clueDetailsSharingManager = clueDetailsSharingManager;
		this.plugin = plugin;

		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setLayout(new BorderLayout());

		setupTable();

		/* Setup overview panel */
		JPanel titlePanel = setupTitlePanel();

		titlePanel.add(setupImportExportButtons(), BorderLayout.EAST);

		setupSearchBar();

		showMatchingClues("");

		// Filters
		setupFilters();

		scrollableContainer = new JScrollPane(clueTable);
		scrollableContainer.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		JPanel introDetailsPanel = new JPanel();
		introDetailsPanel.setLayout(new BorderLayout());
		introDetailsPanel.add(titlePanel, BorderLayout.NORTH);
		introDetailsPanel.add(searchCluesPanel, BorderLayout.CENTER);

		add(introDetailsPanel, BorderLayout.NORTH);
		add(scrollableContainer, BorderLayout.CENTER);

		refresh();
	}

	private void setupTable()
	{
		clueTableModel = new ClueTableModel();
		clueTable = new ClueJTable(clueTableModel);

		clueTable.setDefaultRenderer(Object.class, new ClueTableCellRenderer(this, cluePreferenceManager, configManager));
		clueTable.setDefaultEditor(Object.class, new ClueTableCellEditor(configManager, clueTable));

		clueTable.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				int row = clueTable.rowAtPoint(e.getPoint());
				int column = clueTable.columnAtPoint(e.getPoint());

				if (row < 0 || column < 0) return;

				ListItem item = (ListItem) clueTableModel.getValueAt(row, column);
				if (item.isHeader()) return;

				Clues clue = item.getClue();
				if (!clickedOnTextBox(e, row)) return;

				if (e.getButton() == MouseEvent.BUTTON1)
				{
					boolean currentState = cluePreferenceManager.getHighlightPreference(clue.getClueID());
					boolean newState = !currentState;
					cluePreferenceManager.saveHighlightPreference(clue.getClueID(), newState);
					clueTable.repaint();
				}
				else if (e.getButton() == MouseEvent.BUTTON3)
				{
					openPopup(e, row);
				}
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				if (hoveredRow != -1)
				{
					int previousHoveredRow = hoveredRow;
					hoveredRow = -1;
					clueTable.repaint(clueTable.getCellRect(previousHoveredRow, 0, true));
				}
			}
		});
		clueTable.addMouseMotionListener(new MouseMotionAdapter()
		{
			@Override
			public void mouseMoved(MouseEvent e)
			{
				int row = clueTable.rowAtPoint(e.getPoint());

				if (row != hoveredRow)
				{
					int previousHoveredRow = hoveredRow;
					hoveredRow = row;

					if (previousHoveredRow != -1)
					{
						clueTable.repaint(clueTable.getCellRect(previousHoveredRow, 0, true));
					}
					if (hoveredRow != -1)
					{
						clueTable.repaint(clueTable.getCellRect(hoveredRow, 0, true));
					}
				}
			}
		});
	}

	private boolean clickedOnTextBox(MouseEvent e, int row)
	{
		Rectangle cellRect = clueTable.getCellRect(row, 0, false);

		int cellX = e.getX() - cellRect.x;
		int cellY = e.getY() - cellRect.y;

		Insets cellInsets = new Insets(5, 5, 0, 5);

		int textAreaX = cellInsets.left;
		int textAreaY = cellInsets.top;
		int textAreaWidth = cellRect.width - cellInsets.left - cellInsets.right;
		int textAreaHeight = cellRect.height - cellInsets.top - cellInsets.bottom;

		return cellX >= textAreaX && cellX <= textAreaX + textAreaWidth &&
			cellY >= textAreaY && cellY <= textAreaY + textAreaHeight;
	}

	private void openPopup(MouseEvent e, int row)
	{
		JPopupMenu popupMenu = new JPopupMenu();

		JMenuItem inputTextItem = new JMenuItem("Edit text for clue");
		inputTextItem.addActionListener(event ->
		{
			clueTableModel.setEditableRow(row);
			clueTable.editCellAt(row, 0);
			Component editorComponent = clueTable.getEditorComponent();
			if (editorComponent != null)
			{
				editorComponent.requestFocusInWindow();
			}
		});

		popupMenu.add(inputTextItem);

		JMenuItem inputColorItem = new JMenuItem("Edit color for clue");
		inputColorItem.addActionListener(event ->
		{
			ListItem item = (ListItem) clueTableModel.getValueAt(row, 0);
			Clues clue = item.getClue();

			RuneliteColorPicker colorPicker = getColorPicker(clue.getDetailColor(configManager));
			colorPicker.setOnColorChange(c ->
			{
				// Default color is white, so we don't need to store if user selects white
				if (Objects.equals(c, Color.decode("#FFFFFF")))
				{
					configManager.unsetConfiguration("clue-details-color", String.valueOf(clue.getClueID()));
				}
				else
				{
					configManager.setConfiguration("clue-details-color", String.valueOf(clue.getClueID()), c);
				}

				int clueItemId = clue.getItemID();
				if (clueItemId != ItemID.CLUE_SCROLL_BEGINNER && clueItemId != ItemID.CLUE_SCROLL_MASTER)
				{
					if (config.colorGroundItems())
					{
						configManager.setConfiguration(GroundItemsConfig.GROUP, "highlight_" + clueItemId, c);
					}
					if (config.colorInventoryTags())
					{
						configManager.setConfiguration(InventoryTagsConfig.GROUP, "tag_" + clueItemId,
							plugin.getGson().toJson(Map.of("color", c)));
					}
				}
			});
			colorPicker.setVisible(true);
		});

		popupMenu.add(inputColorItem);

		String inputItemsTooltip = "Add/Remove item";
		JMenuItem inputItems = new JMenuItem(inputItemsTooltip);
		inputItems.addActionListener(event ->
		{
			ListItem item = (ListItem) clueTableModel.getValueAt(row, 0);
			Clues clue = item.getClue();

			ChatboxItemSearch itemSearch = getItemSearch(inputItemsTooltip);
			itemSearch.onItemSelected((itemId) ->
			{
				// Get existing Clue itemIds
				int clueId = clue.getClueID();
				List<Integer> clueItemIds = cluePreferenceManager.getItemsPreference(clueId);

				if (clueItemIds == null)
				{
					clueItemIds = new ArrayList<>();
				}

				// Remove if already present
				if (clueItemIds.contains(itemId))
				{
					clueItemIds.remove(itemId);
					String chatMessage = "Removed item from " + WordUtils.capitalize(clue.getClueTier().name().toLowerCase()) + " clue";
					sendChatMessage(chatMessage);
				}
				// Add if not present
				else
				{
					clueItemIds.add(itemId);
					String chatMessage = "Added item to " + WordUtils.capitalize(clue.getClueTier().name().toLowerCase()) + " clue";
					sendChatMessage(chatMessage);
				}

				// Save Clue itemIds
				cluePreferenceManager.saveItemsPreference(clueId, clueItemIds);
			}).build();
		});

		popupMenu.add(inputItems);

		popupMenu.show(e.getComponent(), e.getX(), e.getY());
	}

	private void openResetPopup()
	{
		int confirm = JOptionPane.showConfirmDialog(ClueDetailsParentPanel.this,
			"Are you sure you want to reset your customised details?",
			"Warning", JOptionPane.OK_CANCEL_OPTION);

		if (confirm == 0)
		{
			clueDetailsSharingManager.resetClueDetails();
		}
	}

	private JPanel setupTitlePanel()
	{
		JPanel titlePanel = new JPanel();
		titlePanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		titlePanel.setLayout(new BorderLayout());

		JTextArea title = JGenerator.makeJTextArea("Clue Details");
		title.setForeground(Color.WHITE);
		titlePanel.add(title, BorderLayout.WEST);

		return titlePanel;
	}
	private void setupSearchBar()
	{
		/* Search bar */
		searchBar.setIcon(IconTextField.Icon.SEARCH);
		searchBar.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
		searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
		searchBar.getDocument().addDocumentListener(new DocumentListener()
		{
			@Override
			public void insertUpdate(DocumentEvent e)
			{
				onSearchBarChanged();
			}

			@Override
			public void removeUpdate(DocumentEvent e)
			{
				onSearchBarChanged();
			}

			@Override
			public void changedUpdate(DocumentEvent e)
			{
				onSearchBarChanged();
			}
		});

		searchCluesPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		searchCluesPanel.setLayout(new BorderLayout(0, BORDER_OFFSET));
		searchCluesPanel.add(searchBar, BorderLayout.CENTER);
	}

	private JPanel setupImportExportButtons()
	{
		// Import/Export Options
		JPanel markerButtons = new JPanel(new FlowLayout(FlowLayout.RIGHT, 7, 3));

		resetMarkers.setToolTipText("Reset currently filtered customised details");
		resetMarkers.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				openResetPopup();
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				resetMarkers.setIcon(RESET_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				resetMarkers.setIcon(RESET_ICON);
			}
		});

		copyMarkers.setToolTipText("Export currently filtered details to your clipboard");
		copyMarkers.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					clueDetailsSharingManager.exportClueDetails(true, true, true);
				}
				else if (e.getButton() == MouseEvent.BUTTON3)
				{
					selectiveExport(e);
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				copyMarkers.setIcon(COPY_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				copyMarkers.setIcon(COPY_ICON);
			}
		});

		pasteMarkers.setToolTipText("Import details from your clipboard");
		pasteMarkers.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				clueDetailsSharingManager.promptForImport();
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				pasteMarkers.setIcon(PASTE_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				pasteMarkers.setIcon(PASTE_ICON);
			}
		});

		markerButtons.add(resetMarkers);
		markerButtons.add(pasteMarkers);
		markerButtons.add(copyMarkers);

		return markerButtons;
	}

	private void setupFilters()
	{
		tierFilterDropdown = makeNewDropdown(ClueDetailsConfig.ClueTierFilter.displayFilters(), "filterListByTier");
		JPanel filtersTierPanel = makeDropdownPanel(tierFilterDropdown, "Tier");
		filtersTierPanel.setPreferredSize(new Dimension(PANEL_WIDTH, DROPDOWN_HEIGHT));

		regionFilterDropdown = makeNewDropdown(ClueDetailsConfig.ClueRegionFilter.displayFilters(), "filterListByRegion");
		JPanel filtersRegionPanel = makeDropdownPanel(regionFilterDropdown, "Region");
		filtersRegionPanel.setPreferredSize(new Dimension(PANEL_WIDTH, DROPDOWN_HEIGHT));

		orderDropdown = makeNewDropdown(ClueDetailsConfig.ClueOrdering.values(), "orderListBy");
		JPanel orderPanel = makeDropdownPanel(orderDropdown, "Ordering");
		orderPanel.setPreferredSize(new Dimension(PANEL_WIDTH, DROPDOWN_HEIGHT));

		allDropdownSections.setLayout(new BoxLayout(allDropdownSections, BoxLayout.Y_AXIS));
		allDropdownSections.setBorder(new EmptyBorder(0, 0, 10, 0));
		allDropdownSections.add(filtersTierPanel);
		allDropdownSections.add(filtersRegionPanel);
		allDropdownSections.add(orderPanel);

		searchCluesPanel.add(allDropdownSections, BorderLayout.NORTH);
	}

	private void selectiveExport(MouseEvent e)
	{
		JPopupMenu popupMenu = new JPopupMenu();

		JMenuItem inputItemExportText = new JMenuItem("Export clue text");
		inputItemExportText.addActionListener(event
			-> clueDetailsSharingManager.exportClueDetails(true, false, false)
		);
		popupMenu.add(inputItemExportText);

		JMenuItem inputItemExportColors = new JMenuItem("Export clue colors");
		inputItemExportColors.addActionListener(event
			-> clueDetailsSharingManager.exportClueDetails(false, true, false)
		);
		popupMenu.add(inputItemExportColors);

		JMenuItem inputItemExportItems = new JMenuItem("Export clue items");
		inputItemExportItems.addActionListener(event
			-> clueDetailsSharingManager.exportClueDetails(false, false, true)
		);
		popupMenu.add(inputItemExportItems);

		popupMenu.show(e.getComponent(), e.getX(), e.getY());
	}

	private JComboBox<Enum> makeNewDropdown(Enum[] values, String key)
	{
		JComboBox<Enum> dropdown = new JComboBox<>(values);
		dropdown.setFocusable(false);
		dropdown.setForeground(Color.WHITE);
		dropdown.setRenderer(new DropdownRenderer());
		dropdown.addItemListener(e ->
		{
			if (e.getStateChange() == ItemEvent.SELECTED)
			{
				Enum source = (Enum) e.getItem();
				configManager.setConfiguration(ClueDetailsConfig.class.getAnnotation(ConfigGroup.class).value(), key,
					source);
			}
		});

		return dropdown;
	}

	private JPanel makeDropdownPanel(JComboBox dropdown, String name)
	{
		// Filters
		JTextArea filterName = JGenerator.makeJTextArea(name);
		filterName.setForeground(Color.WHITE);

		JPanel filtersPanel = new JPanel();
		filtersPanel.setLayout(new BorderLayout());
		filtersPanel.setBorder(new EmptyBorder(0, 0, BORDER_OFFSET, 0));
		filtersPanel.setMinimumSize(new Dimension(PANEL_WIDTH, BORDER_OFFSET));
		filtersPanel.add(filterName, BorderLayout.CENTER);
		filtersPanel.add(dropdown, BorderLayout.EAST);

		return filtersPanel;
	}

	private void showMatchingClues(String searchText)
	{
		final String[] searchTerms = searchText.toLowerCase().split("\\s+");

		List<ListItem> filteredItems = new ArrayList<>();
		for (ListItem item : allClues)
		{
			if (item.isHeader())
			{
				filteredItems.add(item);
			}
			else
			{
				Clues clue = item.getClue();
				List<String> keywords = new ArrayList<>();
				keywords.add(clue.getDetail(configManager).toLowerCase());
				keywords.add(Integer.toString(clue.getClueID()));

				boolean matches = Arrays.stream(searchTerms)
					.allMatch(term -> keywords.stream().anyMatch(keyword -> keyword.contains(term)));

				if (matches)
				{
					filteredItems.add(item);
				}
			}
		}

		updateClueList(filteredItems);
	}

	private void onSearchBarChanged()
	{
		final String text = searchBar.getText();
		showMatchingClues(text);
	}

	public void refresh()
	{
		SwingWorker<List<ListItem>, Void> worker = new SwingWorker<>()
		{
			@Override
			protected List<ListItem> doInBackground()
			{
				List<Clues> filteredClues = Clues.CLUES.stream()
					.filter(config.filterListByTier())
					.filter(config.filterListByRegion())
					.filter(ClueDetailsParentPanel.this::filterUnmarkedClues)
					.sorted(config.orderListBy())
					.collect(Collectors.toList());

				ClueFilter[] sections = config.orderListBy().getSections();

				List<ListItem> items = new ArrayList<>();

				for (ClueFilter section : sections)
				{
					List<Clues> filterList = filteredClues.stream()
						.filter(section)
						.collect(Collectors.toList());

					if (!filterList.isEmpty())
					{
						items.add(new ListItem(section.getDisplayName()));
						for (Clues clue : filterList)
						{
							items.add(new ListItem(clue));
						}
					}
				}
				return items;
			}

			@Override
			protected void done()
			{
				try
				{
					List<ListItem> items = get();
					allClues = items;
					String searchText = searchBar.getText() != null ? searchBar.getText() : "";
					showMatchingClues(searchText);
				}
				catch (InterruptedException | ExecutionException e)
				{
					e.printStackTrace();
				}
			}
		};
		worker.execute();
	}

	private void updateClueList(List<ListItem> items)
	{
		SwingUtilities.invokeLater(() ->
		{
			clueTableModel.setItems(items);
		});
	}

	public boolean filterUnmarkedClues(Clues clue)
	{
		if (!config.onlyShowMarkedClues()) return true;
		return cluePreferenceManager.getHighlightPreference(clue.getClueID());
	}

	private RuneliteColorPicker getColorPicker(Color color)
	{
		RuneliteColorPicker colorPicker = plugin.getColorPickerManager().create(
			SwingUtilities.windowForComponent(this),
			color,
			"Edit Clue Detail Color",
			true);
		colorPicker.setLocationRelativeTo(this);
		return colorPicker;
	}

	public ChatboxItemSearch getItemSearch(String tooltip)
	{
		return plugin.getItemSearch()
			.tooltipText(tooltip);
	}

	private void sendChatMessage(final String message)
	{
		plugin.getChatMessageManager().queue(QueuedMessage.builder()
			.type(ChatMessageType.CONSOLE)
			.runeLiteFormattedMessage(message)
			.build());
	}
}

/*
 * Copyright (c) 2021, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.panels;

import java.awt.Color;
import java.awt.Component;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.Text;

public final class DropdownRenderer extends DefaultListCellRenderer
{
	@Override
	public Component getListCellRendererComponent(JList<?> list, Object o, int i, boolean isSelected, boolean b1) {
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setForeground(Color.WHITE);
		setBorder(new EmptyBorder(0, 0, 0, 0));

		if (!isSelected)
		{
			setBackground(ColorScheme.DARK_GRAY_COLOR);
			setForeground(Color.WHITE);
		}
		else
		{
			setBackground(list.getBackground());
			setForeground(ColorScheme.LIGHT_GRAY_COLOR);
		}

		setText(Text.titleCase((Enum) o));

		return this;
	}
}
/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.config.ConfigManager;

public class ClueGroundSaveDataManager
{
	private final ConfigManager configManager;
	private final Gson gson;
	private static final String CONFIG_GROUP = "clue-details";
	private static final String GROUND_CLUES_KEY = "ground-clues";
	private final List<ClueInstanceData> clueInstanceData = new ArrayList<>();

	public ClueGroundSaveDataManager(ConfigManager configManager, Gson gson)
	{
		this.configManager = configManager;
		this.gson = gson;
	}

	public void saveStateToConfig(Client client, Map<WorldPoint, List<ClueInstance>> groundClues)
	{
		// Serialize groundClues save to config
		updateData(client, groundClues);
		String groundCluesJson = gson.toJson(clueInstanceData);
		configManager.setConfiguration(CONFIG_GROUP, GROUND_CLUES_KEY, groundCluesJson);
	}

	private void updateData(Client client, Map<WorldPoint, List<ClueInstance>> groundClues)
	{
		int currentTick = client.getTickCount();

		List<ClueInstanceData> newData = new ArrayList<>();
		for (Map.Entry<WorldPoint, List<ClueInstance>> entry : groundClues.entrySet())
		{
			List<ClueInstance> clueDataList = entry.getValue();
			for (ClueInstance data : clueDataList)
			{
				newData.add(new ClueInstanceData(data, currentTick));
			}
		}
		clueInstanceData.clear();
		clueInstanceData.addAll(newData);
	}

	public Map<WorldPoint, List<ClueInstance>> loadStateFromConfig(Client client)
	{
		String groundCluesJson = configManager.getConfiguration(CONFIG_GROUP, GROUND_CLUES_KEY);
		clueInstanceData.clear();

		Map<WorldPoint, List<ClueInstance>> groundClues = new HashMap<>();
		if (groundCluesJson != null)
		{
			try
			{
				Type groundCluesType = new TypeToken<List<ClueInstanceData>>()
				{
				}.getType();

				List<ClueInstanceData> loadedGroundCluesData = gson.fromJson(groundCluesJson, groundCluesType);

				// Convert ClueInstanceData back to ClueInstance
				for (ClueInstanceData clueData : loadedGroundCluesData)
				{
					clueInstanceData.add(clueData);

					WorldPoint location = clueData.getLocation();
					ClueInstance clue = new ClueInstance(clueData);
					if (groundClues.containsKey(location))
					{
						groundClues.get(location).add(clue);
						continue;
					}

					List<ClueInstance> clueInstances = new ArrayList<>();
					clueInstances.add(clue);

					groundClues.put(location, clueInstances);
				}
			} catch (Exception err)
			{
				groundClues.clear();
				saveStateToConfig(client, groundClues);
			}
		}

		return groundClues;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.google.gson.Gson;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.client.config.ConfigManager;

public class ClueBankManager
{
	private final Client client;
	private final ClueBankSaveDataManager clueBankSaveDataManager;
	private ClueInventoryManager clueInventoryManager;

	Item[] lastBankItems;

	private final Map<Integer, ClueInstance> cluesInBank = new HashMap<>();

	private final Map<Integer, ClueInstance> cluesGoneFromInventory = new HashMap<>();

	public ClueBankManager(Client client, ConfigManager configManager, Gson gson)
	{
		this.client = client;
		this.clueBankSaveDataManager = new ClueBankSaveDataManager(configManager, gson);
	}

	public void startUp(ClueInventoryManager clueInventoryManager)
	{
		this.clueInventoryManager = clueInventoryManager;
	}

	public void handleBankChange(ItemContainer bankContainer)
	{
		if (lastBankItems == null)
		{
			lastBankItems = bankContainer.getItems();
			return;
		}

		for (Integer trackedClueId : Clues.getTrackedClueAndTornClueIds(true))
		{
			if (bankContainer.contains(trackedClueId))
			{
				handleClueDeposited(trackedClueId);
			}
			else
			{
				handleClueTaken(trackedClueId);
			}
		}
		lastBankItems = bankContainer.getItems();
	}

	private void handleClueDeposited(int trackedClueId)
	{
		// Bank didn't contain it, and still doesn't. Return.
		if (Arrays.stream(lastBankItems).anyMatch((item) -> item.getId() == trackedClueId)) return;

		if (!cluesGoneFromInventory.containsKey(trackedClueId)) return;

		ClueInstance clue = cluesGoneFromInventory.get(trackedClueId);
		cluesGoneFromInventory.remove(trackedClueId);

		cluesInBank.put(trackedClueId, clue);
	}

	private void handleClueTaken(int trackedClueId)
	{
		// Bank did contain it, and still does. Return.
		if (Arrays.stream(lastBankItems).noneMatch((item) -> item.getId() == trackedClueId)) return;

		// Inventory updates before bank.
		ClueInstance clueFromBank = cluesInBank.get(trackedClueId);
		if (clueFromBank == null) return;

		ClueInstance clue = clueInventoryManager.getTrackedClueByClueItemId(trackedClueId);
		clue.setClueIds(clueFromBank.getClueIds());

		cluesInBank.remove(trackedClueId);
	}

	public void addToRemovedClues(ClueInstance clueInstance)
	{
		cluesGoneFromInventory.put(clueInstance.getItemId(), clueInstance);
	}

	public void saveStateToConfig()
	{
		clueBankSaveDataManager.saveStateToConfig(client, cluesInBank);
	}

	public void loadStateFromConfig()
	{
		cluesInBank.clear();
		cluesGoneFromInventory.clear();
		cluesInBank.putAll(clueBankSaveDataManager.loadStateFromConfig(client));
	}
}

/*
 * Copyright (c) 2021, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import static com.cluedetails.ClueDetailsConfig.CLUE_ITEMS_CONFIG;
import com.google.common.base.Strings;
import com.google.common.util.concurrent.Runnables;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.grounditems.GroundItemsConfig;
import net.runelite.client.plugins.inventorytags.InventoryTagsConfig;

@Slf4j
public class ClueDetailsSharingManager
{
	private final ClueDetailsPlugin plugin;
	private final ClueDetailsConfig config;
	private final ChatboxPanelManager chatboxPanelManager;
	private final Gson gson;

	private final ConfigManager configManager;

	@Inject
	private ClueDetailsSharingManager(ClueDetailsPlugin plugin, ClueDetailsConfig config, ChatboxPanelManager chatboxPanelManager,
										Gson gson, ConfigManager configManager)
	{
		this.plugin = plugin;
		this.config = config;
		this.chatboxPanelManager = chatboxPanelManager;
		this.gson = gson;
		this.configManager = configManager;
	}

	public void resetClueDetails()
	{
		List<Clues> filteredClues = Clues.CLUES.stream()
			.filter(config.filterListByTier())
			.filter(config.filterListByRegion())
			.collect(Collectors.toList());

		for (Clues clue : filteredClues)
		{
			int id = clue.getClueID();
			configManager.unsetConfiguration("clue-details-text", String.valueOf(id));
		}
	}

	public void exportClueDetails(boolean exportText, boolean exportColors, boolean exportItems)
	{
		List<ClueIdToDetails> clueIdToDetailsList = new ArrayList<>();

		List<Clues> filteredClues = Clues.CLUES.stream()
			.filter(config.filterListByTier())
			.filter(config.filterListByRegion())
			.collect(Collectors.toList());

		for (Clues clue : filteredClues)
		{
			int id = clue.getClueID();
			String clueText = configManager.getConfiguration("clue-details-text", String.valueOf(id));
			String clueColor = configManager.getConfiguration("clue-details-color", String.valueOf(id));
			String clueItems = configManager.getConfiguration(CLUE_ITEMS_CONFIG, String.valueOf(id));

			// Try to export text, color, and items. Export where valid configurations are returned
			if (exportText && exportColors && exportItems)
			{
				if (clueItems != null)
				{
					List<Integer> loadedClueItemsData = gson.fromJson(clueItems, new TypeToken<List<Integer>>()
					{
					}.getType());

					// Export text, colors, and items
					if (clueColor != null && clueText != null)
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, clueText, Color.decode(clueColor), loadedClueItemsData));
					}
					// Export text and items
					else if (clueText != null)
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, clueText, loadedClueItemsData));
					}
					// Export color and items
					else if (clueColor != null)
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, Color.decode(clueColor), loadedClueItemsData));
					}
					// Export items
					else
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, loadedClueItemsData));
					}
				}
				else
				{
					// Export text and colors
					if (clueText != null && clueColor != null)
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, clueText, Color.decode(clueColor)));
					}
					// Export text
					else if (clueText != null)
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, clueText));
					}
					// Export colors
					else if (clueColor != null)
					{
						clueIdToDetailsList.add(new ClueIdToDetails(id, Color.decode(clueColor)));
					}
				}
			}
			// Export text
			else if (exportText && clueText != null)
			{
				clueIdToDetailsList.add(new ClueIdToDetails(id, clueText));
			}
			// Export colors
			else if (exportColors && clueColor != null)
			{
				clueIdToDetailsList.add(new ClueIdToDetails(id, Color.decode(clueColor)));
			}
			// Export items
			else if (exportItems && clueItems != null)
			{
				List<Integer> loadedClueItemsData = gson.fromJson(clueItems, new TypeToken<List<Integer>>()
				{
				}.getType());

				clueIdToDetailsList.add(new ClueIdToDetails(id, loadedClueItemsData));
			}
		}

		if (clueIdToDetailsList.isEmpty())
		{
			sendChatMessage("You have no updated clue details to export.");
			return;
		}

		final String exportDump = gson.toJson(clueIdToDetailsList);

		log.debug("Exported clue details: {}", exportDump);

		Toolkit.getDefaultToolkit()
			.getSystemClipboard()
			.setContents(new StringSelection(exportDump), null);
		sendChatMessage(clueIdToDetailsList.size() + " clue details were copied to your clipboard.");
	}

	public void promptForImport()
	{
		final String clipboardText;
		try
		{
			clipboardText = Toolkit.getDefaultToolkit()
				.getSystemClipboard()
				.getData(DataFlavor.stringFlavor)
				.toString();
		}
		catch (IOException | UnsupportedFlavorException ex)
		{
			sendChatMessage("Unable to read system clipboard.");
			log.warn("error reading clipboard", ex);
			return;
		}

		log.debug("Clipboard contents: {}", clipboardText);
		if (Strings.isNullOrEmpty(clipboardText))
		{
			sendChatMessage("You do not have any clue details copied in your clipboard.");
			return;
		}

		List<ClueIdToDetails> importClueDetails;
		try
		{
			// CHECKSTYLE:OFF
			importClueDetails = gson.fromJson(clipboardText, new TypeToken<List<ClueIdToDetails>>(){}.getType());
			// CHECKSTYLE:ON
		}
		catch (JsonSyntaxException e)
		{
			log.debug("Malformed JSON for clipboard import", e);
			sendChatMessage("You do not have any clue details copied in your clipboard.");
			return;
		}
		catch (NumberFormatException e)
		{
			log.debug("Malformed JSON for clipboard import", e);
			sendChatMessage("Your clue details color is not properly formatted.");
			return;
		}

		if (importClueDetails.isEmpty())
		{
			sendChatMessage("You do not have any clue details copied in your clipboard.");
			return;
		}

		chatboxPanelManager.openTextMenuInput("Are you sure you want to import " + importClueDetails.size() + " clue details?")
			.option("Yes", () -> importClueDetails(importClueDetails))
			.option("No", Runnables.doNothing())
			.build();
	}

	private void importClueDetails(Collection<ClueIdToDetails> importPoints)
	{
		for (ClueIdToDetails importPoint : importPoints)
		{
			if (importPoint.text != null)
			{
				configManager.setConfiguration("clue-details-text", String.valueOf(importPoint.id), importPoint.text);
			}
			if (importPoint.color != null)
			{
				// Default color is white, so we don't need to store if user selects white
				if (Objects.equals(importPoint.color, Color.decode("#FFFFFF")))
				{
					configManager.unsetConfiguration("clue-details-color", String.valueOf(importPoint.id));
				}
				else
				{
					configManager.setConfiguration("clue-details-color", String.valueOf(importPoint.id), importPoint.color);
				}

				// Ground Items and Inventory Tags cannot support unique colors for beginner & master clues
				if (importPoint.id >= 2677 && (config.colorGroundItems() || config.colorInventoryTags()))
				{
					// Ensure ARGB format
					Color color = Color.decode(configManager.getConfiguration("clue-details-color", String.valueOf(importPoint.id)));

					if (config.colorGroundItems())
					{
						configManager.setConfiguration(GroundItemsConfig.GROUP, "highlight_" + importPoint.id, color);
					}
					if (config.colorInventoryTags())
					{
						configManager.setConfiguration(InventoryTagsConfig.GROUP, "tag_" + importPoint.id,
							gson.toJson(Map.of("color", color)));
					}
				}
			}
			if (importPoint.itemIds != null)
			{
				if (importPoint.itemIds.isEmpty())
				{
					configManager.unsetConfiguration("clue-details-items", String.valueOf(importPoint.id));
				}
				else
				{
					configManager.setConfiguration("clue-details-items", String.valueOf(importPoint.id), importPoint.itemIds);
				}
			}
		}

		sendChatMessage(importPoints.size() + " clue details were imported from the clipboard.");
		plugin.getPanel().refresh();
	}

	private void sendChatMessage(final String message)
	{
		plugin.getChatMessageManager().queue(QueuedMessage.builder()
			.type(ChatMessageType.CONSOLE)
			.runeLiteFormattedMessage(message)
			.build());
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://www.github.com/Zoinkwiz>
 * Copyright (c) 2017, Aria <aria@ar1as.space>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Menu;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.Tile;
import net.runelite.api.TileItem;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.api.events.MenuOpened;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.Text;

public class ClueDetailsOverlay extends OverlayPanel
{
	private final Client client;
	private final ClueDetailsConfig config;
	private final TooltipManager tooltipManager;

	protected ModelOutlineRenderer modelOutlineRenderer;
	private final ConfigManager configManager;

	private final Notifier notifier;
	private ClueDetailsPlugin clueDetailsPlugin;
	private ClueGroundManager clueGroundManager;
	private ClueInventoryManager clueInventoryManager;

	protected Multimap<Tile, Integer> tileHighlights = ArrayListMultimap.create();

	protected static final int MAX_DISTANCE = 2350;
	protected static final int SCENE_TO_LOCAL = 128;

	@Inject
	public ClueDetailsOverlay(Client client, ClueDetailsConfig config, TooltipManager tooltipManager, ModelOutlineRenderer modelOutlineRenderer, ConfigManager configManager, Notifier notifier)
	{
		setPriority(PRIORITY_HIGHEST);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setDragTargetable(false);
		setPosition(OverlayPosition.TOOLTIP);

		this.client = client;
		this.config = config;
		this.tooltipManager = tooltipManager;
		this.modelOutlineRenderer = modelOutlineRenderer;
		this.configManager = configManager;
		this.notifier = notifier;

		tileHighlights.clear();
		if (client.getGameState() == GameState.LOGGING_IN)
		{
			refreshHighlights();
		}
	}

	public void startUp(ClueDetailsPlugin clueDetailsPlugin, ClueGroundManager clueGroundManager, ClueInventoryManager clueInventoryManager)
	{
		this.clueDetailsPlugin = clueDetailsPlugin;
		this.clueGroundManager = clueGroundManager;
		this.clueInventoryManager = clueInventoryManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (client.isMenuOpen())
		{
			showMenuItem();
		}
		else
		{
			if (config.showHoverText())
			{
				showHoveredItem();
			}
		}

		tileHighlights.keySet().forEach(tile -> checkAllTilesForHighlighting(tile, tileHighlights.get(tile)));

		return super.render(graphics);
	}

	private void showHoveredItem()
	{
		Menu menu = client.getMenu();
		MenuEntry[] menuEntries = menu.getMenuEntries();
		int last = menuEntries.length - 1;

		if (last < 0)
		{
			return;
		}

		MenuEntry menuEntry = menuEntries[last];
		MenuEntryAndPos menuEntryAndPos = new MenuEntryAndPos(menuEntry, last, 0);

		if (!isTakeClue(menuEntry) && !isReadClue(menuEntry))
		{
			return;
		}

		if (isReadClue(menuEntry) && (config.showInventoryClueTags() || (config.showInventoryCluesOverlay())))
		{
			return;
		}

		String clueText = getText(menuEntryAndPos, config.colorHoverText(), false);

		if (clueText == null) return;

		// Hide tooltip when changeClueText enabled except for master three-step cryptic
		if (isTakeClue(menuEntry) && config.changeClueText() && !clueText.contains("<br>"))
		{
			return;
		}

		// tooltip only supports </br> for multiline strings
		String tooltipClueText = clueText.replaceAll("<br>", "</br>");
		tooltipManager.add(new Tooltip(tooltipClueText));
	}

	private void showMenuItem()
	{
		Menu menu = client.getMenu();
		MenuEntry[] currentMenuEntries = menu.getMenuEntries();

		if (currentMenuEntries == null) return;

		//If on floor tile
		if (Arrays.stream(currentMenuEntries).noneMatch(this::isTakeClue))
		{
			return;
		}

		List<MenuEntryAndPos> entriesByTile = getEntriesByTile(currentMenuEntries);

		if (config.showHoverText() && !config.changeClueText())
		{
			addTooltip(entriesByTile);
		}
	}

	// Using onClientTick for compatability with Ground Items "Collapse ground item menu"
	@Subscribe
	public void onClientTick(ClientTick event)
	{
		final MenuEntry[] menuEntries = client.getMenuEntries();
		if (Arrays.stream(menuEntries).noneMatch(this::isTakeClue))
		{
			return;
		}

		List<MenuEntryAndPos> entriesByTile = getEntriesByTile(menuEntries);

		if (config.changeClueText() || config.colorChangeClueText())
		{
			changeGroundItemMenu(entriesByTile);
		}
	}

	@Subscribe
	public void onMenuOpened(MenuOpened event)
	{
		MenuEntry[] entries = event.getMenuEntries();
		if (Arrays.stream(entries).noneMatch(this::isTakeClue))
		{
			return;
		}

		List<MenuEntryAndPos> entriesByTile = getEntriesByTile(entries);

		if (config.changeClueText())
		{
			addClueSubmenus(entriesByTile);
		}
	}

	private void changeGroundItemMenu(List<MenuEntryAndPos> entriesByTile)
	{
		// Change ground item menu text
		for (MenuEntryAndPos entryAndPos : entriesByTile)
		{
			MenuEntry menuEntry = entryAndPos.getMenuEntry();
			if (!isTakeOrMarkClue(menuEntry)) continue;

			boolean showColor = shouldShowColor(menuEntry);
			String regex = "(Clue scroll \\(.*?\\)( x [0-9]+)?|Challenge scroll \\(.*?\\)( x [0-9]+)?)";
			if (clueDetailsPlugin.isDeveloperMode())
			{
				regex = "(Daeyalt essence|Clue scroll \\(.*?\\)( x [0-9]+)?|Challenge scroll \\(.*?\\)( x [0-9]+)?)";
			}

			// Compile the pattern
			Pattern pattern = Pattern.compile(regex);
			Matcher matcher = pattern.matcher(menuEntry.getTarget());

			String newText;
			// Change ground item menu text & color
			if (config.changeClueText())
			{
				newText = getText(entryAndPos, showColor, true);
			}
			// Change ground item menu color
			else
			{
				newText = recolorText(entryAndPos);
			}

			if (newText == null) continue;

			// Handle master three-step cryptic
			if (newText.split("<br>").length > 1)
			{
				newText = "Three-step (master)";
			}
			// Replace the matched text with the new text
			String newTarget = matcher.replaceAll(newText);

			menuEntry.setTarget(newTarget);
		}
	}

	private void addClueSubmenus(List<MenuEntryAndPos> entriesByTile)
	{
		// Add submenus to three-step cryptic clues
		for (MenuEntryAndPos entryAndPos : entriesByTile)
		{
			MenuEntry menuEntry = entryAndPos.getMenuEntry();

			boolean showColor = shouldShowColor(menuEntry);

			String newText = getText(entryAndPos, showColor, false);
			if (newText == null || !isTakeOrMarkClue(menuEntry)) continue;

			String[] newTexts = newText.split("<br>");

			// TODO: Text doesn't update after details changed
			// TODO: Doesn't update when torn parts obtained
			if (newTexts.length > 1)
			{
				Menu submenu = menuEntry.createSubMenu();

				for (String text : newTexts)
				{
					submenu.createMenuEntry(-1)
						.setOption(text)
						.setType(MenuAction.RUNELITE);
				}
			}
		}
	}

	private boolean shouldShowColor(MenuEntry menuEntry)
	{
		// Only change color if it is not the default
		boolean showColor = config.colorChangeClueText();
		if (showColor)
		{
			int scrollID = getScrollID(menuEntry);
			Clues matchingClue = Clues.forItemId(scrollID);

			if (matchingClue != null)
			{
				if (matchingClue.getDetailColor(configManager) == Color.WHITE)
				{
					showColor = false;
				}
			}
		}
		return showColor;
	}

	private void addTooltip(List<MenuEntryAndPos> relevantMenuEntries)
	{
		Point mousePosition = client.getMouseCanvasPosition();
		int menuX = client.getMenu().getMenuX();
		int menuY = client.getMenu().getMenuY();
		int menuWidth = client.getMenu().getMenuWidth();

		int menuEntryHeight = 15;
		int headerHeight = menuEntryHeight + 3;

		if (mousePosition.getX() < menuX || mousePosition.getX() > menuX + menuWidth) return;

		int posInMenuY = (Math.round(mousePosition.getY()) - menuY - headerHeight) / menuEntryHeight;
		int entryTopY = menuY + headerHeight + posInMenuY * menuEntryHeight;

		Optional<MenuEntryAndPos> entry = relevantMenuEntries.stream()
			.filter(menuEntryAndPos -> menuEntryAndPos.getPosInMenu() == posInMenuY)
			.findFirst();
		if (entry.isEmpty()) return;
		MenuEntryAndPos entryAndPos = entry.get();

		MenuEntry hoveredEntry = entryAndPos.getMenuEntry();

		if (!isTakeOrMarkClue(hoveredEntry)) return;

		String text = getText(entryAndPos, config.colorHoverText(), false);

		// Handle master three-step cryptic
		if (text != null)
		{
			for (String splitText : text.split("<br>"))
			{
				panelComponent.getChildren().add(LineComponent.builder().left(splitText).build());
			}
		}

		double infoPanelWidth = panelComponent.getBounds().getWidth();
		int viewportWidth = client.getViewportWidth();
		if (menuX + menuWidth + infoPanelWidth > viewportWidth)
		{
			panelComponent.setPreferredLocation(new java.awt.Point(menuX - (int) infoPanelWidth, entryTopY));
		}
		else
		{
			panelComponent.setPreferredLocation(new java.awt.Point(menuX + menuWidth, entryTopY));
		}
	}

	private List<MenuEntryAndPos> getEntriesByTile(MenuEntry[] menuEntries)
	{
		// Order on floor is drop order from what I can tell.
		// Most recently dropped is in pos 0 of array, up to first item dropped
		List<MenuEntryAndPos> mappedEntries = new ArrayList<>();

		Map<WorldPoint, Integer> foundPosForWp = new HashMap<>();
		// We want to keep track from soonest to despawn to most recently dropped
		for (int i = menuEntries.length - 1; i >= 0; i--)
		{
			if (!isTakeOrMarkClue(menuEntries[i])) continue;
			int x = menuEntries[i].getParam0() * SCENE_TO_LOCAL;
			int y = menuEntries[i].getParam1() * SCENE_TO_LOCAL;
			int wv = menuEntries[i].getWorldViewId();
			LocalPoint itemLp = new LocalPoint(x, y, wv);
			WorldPoint itemWp = WorldPoint.fromLocal(client, itemLp);
			int currentPosForTile = foundPosForWp.getOrDefault(itemWp, 0);
			if (Clues.isTrackedClueOrTornClue(menuEntries[i].getIdentifier(), clueDetailsPlugin.isDeveloperMode()))
			{
				mappedEntries.add(new MenuEntryAndPos(menuEntries[i], menuEntries.length - i - 1, currentPosForTile));
				if (isTakeClue(menuEntries[i])) foundPosForWp.put(itemWp, currentPosForTile + 1);
			}
			else
			{
				mappedEntries.add(new MenuEntryAndPos(menuEntries[i], menuEntries.length - i - 1, -1));
			}
		}

		return mappedEntries;
	}

	public boolean isTakeClue(MenuEntry entry)
	{
		String option = entry.getOption();
		MenuAction type = entry.getType();
		int identifier = entry.getIdentifier();

		return Clues.isClue(identifier, clueDetailsPlugin.isDeveloperMode()) && type == MenuAction.GROUND_ITEM_THIRD_OPTION && option.equals("Take");
	}

	public boolean isTakeOrMarkClue(MenuEntry entry)
	{
		String option = entry.getOption();
		MenuAction type = entry.getType();
		int identifier = entry.getIdentifier();

		return Clues.isClue(identifier, clueDetailsPlugin.isDeveloperMode()) && (
			(type == MenuAction.GROUND_ITEM_THIRD_OPTION && option.equals("Take")) ||
				(type == MenuAction.RUNELITE && (option.equals("Unmark") || option.equals("Mark"))));
	}

	public boolean isReadClue(MenuEntry entry)
	{
		String option = entry.getOption();
		int itemId = entry.getItemId();
		return Clues.isClue(itemId, clueDetailsPlugin.isDeveloperMode()) && option.equals("Read");
	}

	private boolean shouldHighlight(int id)
	{
		if (id < 2677) return false; //TODO: Support fake beginner & master IDs
		String shouldHighlight = configManager.getConfiguration("clue-details-highlights", String.valueOf(id));
		return "true".equals(shouldHighlight);
	}

	private int getScrollID(MenuEntry menuEntry)
	{
		int scrollID = menuEntry.getIdentifier();
		if (isReadClue(menuEntry))
		{
			scrollID = menuEntry.getItemId();
		}
		return scrollID;
	}

	private boolean areEntriesInTile(MenuEntry menuEntry)
	{
		MenuEntry[] currentMenuEntries = {menuEntry};
		if (Arrays.stream(currentMenuEntries).anyMatch(this::isTakeClue))
		{
			List<MenuEntryAndPos> entriesByTile = getEntriesByTile(currentMenuEntries);
			return !entriesByTile.isEmpty();
		}
		return false;
	}

	private String getText(MenuEntryAndPos menuEntryAndPos, boolean showColor, boolean isFloorText)
	{
		MenuEntry menuEntry = menuEntryAndPos.getMenuEntry();
		int scrollID = getScrollID(menuEntry);

		Clues matchingClue = Clues.forItemId(scrollID);
		if (matchingClue != null)
		{
			String text = matchingClue.getDetail(configManager);
			if (showColor)
			{
				Color color = matchingClue.getDetailColor(configManager);

				// Only change floor text color if it's not the default
				if (!(isFloorText && color == Color.WHITE))
				{
					String hexColor = Integer.toHexString(color.getRGB()).substring(2);
					return "<col=" + hexColor + ">" + text;
				}
			}
			return text;
		}

		if (isReadClue(menuEntry))
		{
			ClueInstance clueInstance = clueInventoryManager.getTrackedClueByClueItemId(scrollID);
			if (clueInstance != null && !clueInstance.getClueIds().isEmpty())
			{
				return clueInstance.getCombinedClueText(clueDetailsPlugin, configManager, showColor, isFloorText);
			}
		}

		if (areEntriesInTile(menuEntry))
		{
			return getTrackedClueText(menuEntryAndPos, showColor, isFloorText);
		}
		return null;
	}

	private String recolorText(MenuEntryAndPos menuEntryAndPos)
	{
		MenuEntry menuEntry = menuEntryAndPos.getMenuEntry();
		int scrollID = getScrollID(menuEntry);

		String itemName = Text.removeTags(menuEntry.getTarget());
		Color color = null;

		Clues matchingClue = Clues.forItemId(scrollID);
		if (matchingClue != null)
		{
			color = matchingClue.getDetailColor(configManager);
		}
		else if (areEntriesInTile(menuEntry))
		{
			color = getTrackedClueColor(menuEntryAndPos);
		}

		// Only change ground item menu color if it's not the default
		if (color != null && color != Color.WHITE)
		{
			String hexColor = Integer.toHexString(color.getRGB()).substring(2);
			return "<col=" + hexColor + ">" + itemName;
		}
		return null;
	}

	private ClueInstance getTrackedClueInstance(MenuEntryAndPos entry)
	{
		MenuEntry menuEntry = entry.getMenuEntry();
		int sceneX = menuEntry.getParam0();
		int sceneY = menuEntry.getParam1();
		int wv = menuEntry.getWorldViewId();
		LocalPoint itemLp = new LocalPoint(sceneX * SCENE_TO_LOCAL, sceneY * SCENE_TO_LOCAL, wv);
		WorldPoint itemWp = WorldPoint.fromLocalInstance(client, itemLp);
		List<ClueInstance> trackedClues = clueGroundManager.getGroundClues().get(itemWp);
		if (trackedClues == null) return null;
		// TODO: Fix, when a clue is picked up, posOnTile doesn't work any more. Needs shifting
		return trackedClues.get(entry.getPosOnTile());
	}

	private String getTrackedClueText(MenuEntryAndPos entry, boolean showColor, boolean isFloorText)
	{
		ClueInstance clueInstance = getTrackedClueInstance(entry);
		if (clueInstance == null) return null;

		return clueInstance.getCombinedClueText(clueDetailsPlugin, configManager, showColor, isFloorText);
	}

	private Color getTrackedClueColor(MenuEntryAndPos entry)
	{
		ClueInstance clueInstance = getTrackedClueInstance(entry);

		// Ignore three-step cryptic clues
		if (clueInstance != null && clueInstance.getClueIds().size() == 1)
		{
			Clues cluePart = Clues.forClueIdFiltered(clueInstance.getClueIds().get(0));
			if (cluePart != null)
			{
				return cluePart.getDetailColor(configManager);
			}
		}
		return null;
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOADING)
		{
			tileHighlights.clear();
		}

		if (event.getGameState() == GameState.LOGGED_IN)
		{
			addItemTiles();
		}
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned)
	{
		TileItem item = itemSpawned.getItem();
		Tile tile = itemSpawned.getTile();
		if (shouldHighlight(item.getId()))
		{
			notifier.notify(config.markedClueDroppedNotification(), "A highlighted clue has dropped!");
			tileHighlights.get(tile).add(item.getId());
		}
	}

	@Subscribe
	public void onItemDespawned(ItemDespawned itemDespawned)
	{
		Tile tile = itemDespawned.getTile();
		if (tileHighlights.containsKey(tile))
		{
			tileHighlights.get(tile).removeIf((i) -> i == itemDespawned.getItem().getId());
		}
	}

	protected void addItemTiles()
	{
		tileHighlights.clear();

		Tile[][] squareOfTiles = client.getTopLevelWorldView().getScene().getTiles()[client.getTopLevelWorldView().getPlane()];

		// Reduce the two-dimensional array into a single list for processing.
		List<Tile> tiles = Stream.of(squareOfTiles)
			.flatMap(Arrays::stream)
			.filter(Objects::nonNull)
			.collect(Collectors.toList());

		for (Tile tile : tiles)
		{
			List<TileItem> items = tile.getGroundItems();
			if (items != null)
			{
				for (TileItem item : items)
				{
					if (item == null)
					{
						continue;
					}

					if (shouldHighlight(item.getId()))
					{
						tileHighlights.get(tile).add(item.getId());
						break;
					}
				}
			}
		}
	}

	public void refreshHighlights()
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		addItemTiles();
	}

	private void checkAllTilesForHighlighting(Tile tile, Collection<Integer> ids)
	{
		if (!config.highlightMarkedClues())
		{
			return;
		}
		Player player = client.getLocalPlayer();

		if (player == null)
		{
			return;
		}

		LocalPoint playerLocation = player.getLocalLocation();
		if (!ids.isEmpty())
		{
			LocalPoint location = tile.getLocalLocation();

			if (location == null)
			{
				return;
			}

			if (location.distanceTo(playerLocation) > MAX_DISTANCE)
			{
				return;
			}

			Polygon poly = Perspective.getCanvasTilePoly(client, location);
			if (poly == null)
			{
				return;
			}

			// TODO: Currently outlines all items in the tile
			modelOutlineRenderer.drawOutline(
				tile.getItemLayer(),
				config.outlineWidth(),
				JagexColors.CHAT_PUBLIC_TEXT_OPAQUE_BACKGROUND,
				config.highlightFeather());
		}
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://www.github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *	  list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *	  this list of conditions and the following disclaimer in the documentation
 *	  and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.cluedetails.panels.ClueDetailsParentPanel;

import java.util.*;
import javax.inject.Singleton;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.KeyCode;
import net.runelite.api.Menu;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.NpcID;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.chatbox.ChatboxPanelManager;

@Slf4j
@Singleton
public class ClueInventoryManager
{
	private final Client client;
	private final ConfigManager configManager;
	private final ClueDetailsPlugin clueDetailsPlugin;
	private final ClueGroundManager clueGroundManager;
	private final ClueBankManager clueBankManager;
	private final ChatboxPanelManager chatboxPanelManager;
	private final Map<Integer, ClueInstance> trackedCluesInInventory = new HashMap<>();
	private final Map<Integer, ClueInstance> previousTrackedCluesInInventory = new HashMap<>();
	@Getter
	private Clues[] cluesInInventory = new Clues[6];

	// To be initialized to avoid passing around
	@Setter
	public static ClueDetailsConfig config;

	public ClueInventoryManager(Client client, ConfigManager configManager, ClueDetailsPlugin clueDetailsPlugin, ClueGroundManager clueGroundManager,
								ClueBankManager clueBankManager, ChatboxPanelManager chatboxPanelManager)
	{
		this.client = client;
		this.configManager = configManager;
		this.clueDetailsPlugin = clueDetailsPlugin;
		this.clueGroundManager = clueGroundManager;
		this.clueBankManager = clueBankManager;
		this.chatboxPanelManager = chatboxPanelManager;
	}

	public void updateInventory(ItemContainer inventoryContainer)
	{
		// Copy current tracked clues to previous
		previousTrackedCluesInInventory.clear();
		previousTrackedCluesInInventory.putAll(trackedCluesInInventory);

		// Clear current tracked clues
		trackedCluesInInventory.clear();

		// Clear current clues in inventory
		cluesInInventory = new Clues[6];

		Item[] inventoryItems = inventoryContainer.getItems();

		for (Item item : inventoryItems)
		{
			if (item == null) continue;

			// Track Easy->Elite clues in inventory
			if (!Clues.isTrackedClueOrTornClue(item.getId(), clueDetailsPlugin.isDeveloperMode()))
			{
				Clues clue = Clues.forItemId(item.getId());
				if (clue != null)
				{
					cluesInInventory[clue.getClueTier().getValue()] = clue;
				}
			}

			int itemId = item.getId();

			ClueInstance clueInstance = null;
			// If we have a clue we've picked up this tick, we've probably dropped and picked up a clue same tick
			for (ClueInstance clueFromFloor : clueGroundManager.getDespawnedClueQueueForInventoryCheck())
			{
				if (clueFromFloor.getItemId() == item.getId())
				{
					clueInstance = new ClueInstance(clueFromFloor.getClueIds(), itemId);
					break;
				}
			}
			if (clueInstance != null)
			{
				trackedCluesInInventory.put(itemId, clueInstance);
				continue;
			}

			// If clue is already in previous, keep the same ClueInstance
			clueInstance = previousTrackedCluesInInventory.get(itemId);
			if (clueInstance != null && Clues.isClue(clueInstance.getItemId(), clueDetailsPlugin.isDeveloperMode()))
			{
				trackedCluesInInventory.put(itemId, clueInstance);
			}
		}

		clueGroundManager.getDespawnedClueQueueForInventoryCheck().clear();

		// Compare previous and current to find removed clues
		for (Integer itemId : previousTrackedCluesInInventory.keySet())
		{
			if (!trackedCluesInInventory.containsKey(itemId) || trackedCluesInInventory.get(itemId) != previousTrackedCluesInInventory.get(itemId))
			{
				// Clue was removed from inventory (possibly dropped)
				ClueInstance removedClue = previousTrackedCluesInInventory.get(itemId);
				if (removedClue != null)
				{
					clueGroundManager.processPendingGroundCluesFromInventoryChanged(removedClue);
					clueBankManager.addToRemovedClues(removedClue);
				}
			}
		}
	}

	public void updateClueText(String clueText)
	{
		List<Integer> clueIds = new ArrayList<>();

		// Allow for fake items to have info attached to them in dev mode
		if (clueDetailsPlugin.isDeveloperMode())
		{
			for (Integer devModeId : Clues.DEV_MODE_IDS)
			{
				int randomTestId = (int) (Math.random() * 20);
				trackedCluesInInventory.put(devModeId, new ClueInstance(List.of(randomTestId), devModeId));
			}
		}

		ThreeStepCrypticClue threeStepCrypticClue = ThreeStepCrypticClue.forText(clueText);
		if (threeStepCrypticClue != null)
		{
			for (Map.Entry<Clues, Boolean> clueStep : threeStepCrypticClue.getClueSteps())
			{
				clueIds.add(clueStep.getKey().getClueID());
			}
		}
		else
		{
			clueIds.add(Clues.forTextGetId(clueText));
		}

		if (clueIds.get(0) == null) return;

		Set<Integer> itemIDs = trackedCluesInInventory.keySet();
		for (Integer itemID : itemIDs)
		{
			ClueInstance clueInstance = trackedCluesInInventory.get(itemID);
			// Check that at least one part of the clue text matches the clue tier we're looking at
			if (clueInstance == null) continue;
			Clues clueInfo = Clues.forClueIdFiltered(clueIds.get(0));
			if (clueInfo == null) continue;
			if (!Objects.equals(clueInfo.getItemID(), itemID)) continue;
			clueInstance.setClueIds(clueIds);
			break;
		}
	}

	// Only used for Beginner Map Clues
	public void updateClueText(Integer interfaceId)
	{
		List<Integer> clueIds = new ArrayList<>();

		// Beginner Map Clues all use the same ItemID, but the InterfaceID used to display them is unique
		clueIds.add(Clues.forInterfaceIdGetId(interfaceId));

		// Assume can only be beginner for now
		ClueInstance beginnerClueInInv = trackedCluesInInventory.get(ItemID.CLUE_SCROLL_BEGINNER);
		if (beginnerClueInInv == null) return;
		beginnerClueInInv.setClueIds(clueIds);
	}

	public Set<Integer> getTrackedCluesInInventory()
	{
		return trackedCluesInInventory.keySet();
	}

	public ClueInstance getTrackedClueByClueItemId(Integer clueItemID)
	{
		return trackedCluesInInventory.get(clueItemID);
	}

	public boolean hasTrackedClues()
	{
		return !trackedCluesInInventory.isEmpty();
	}

	public void onMenuEntryAdded(MenuEntryAdded event, CluePreferenceManager cluePreferenceManager, ClueDetailsParentPanel panel)
	{
		MenuEntry entry = event.getMenuEntry();

		// Ensure clue ground items are not deprioritized
		if (hasClueName(event.getMenuEntry().getTarget()) && config.showGroundClues())
		{
			MenuAction type = MenuAction.of(event.getType());
			if (type == MenuAction.GROUND_ITEM_FIRST_OPTION || type == MenuAction.GROUND_ITEM_SECOND_OPTION ||
				type == MenuAction.GROUND_ITEM_THIRD_OPTION || type == MenuAction.GROUND_ITEM_FOURTH_OPTION ||
				type == MenuAction.GROUND_ITEM_FIFTH_OPTION || type == MenuAction.WIDGET_TARGET_ON_GROUND_ITEM)
			{
				MenuEntry[] menuEntries = client.getMenu().getMenuEntries();
				MenuEntry lastEntry = menuEntries[menuEntries.length - 1];

				if (isEnabled(lastEntry.getItemId()))
				{
					lastEntry.setDeprioritized(false);
				}
			}
		}

		if (!client.isKeyPressed(KeyCode.KC_SHIFT))
		{
			return;
		}

		// We only run on examine as this should be on all items only once
		if (!"Examine".equals(event.getMenuEntry().getOption())) return;

		final Widget w = entry.getWidget();
		boolean isInventoryMenu = w != null && WidgetUtil.componentToInterface(w.getId()) == InterfaceID.INVENTORY;

		int itemId = isInventoryMenu ? event.getItemId() : event.getIdentifier();
		// Runs on both inventory and ground clues
		if (hasClueName(event.getMenuEntry().getTarget()))
		{
			handleMarkClue(cluePreferenceManager, panel, event.getTarget(), itemId);
		}

		if (isInventoryMenu)
		{
			handleInventory(cluePreferenceManager, event, panel);
		}
	}

	private void handleInventory(CluePreferenceManager cluePreferenceManager, MenuEntryAdded event, ClueDetailsParentPanel panel)
	{
		MenuEntry menuEntry = event.getMenuEntry();
		int itemId = event.getItemId();

		// Add item highlight menu
		if (!hasClueName(menuEntry.getTarget()))
		{
			if (Arrays.stream(cluesInInventory).allMatch(Objects::isNull) && trackedCluesInInventory.isEmpty()) return;

			MenuEntry clueDetailsEntry = client.getMenu().createMenuEntry(-1)
				.setOption("Clue details")
				.setTarget(menuEntry.getTarget())
				.setType(MenuAction.RUNELITE);
			Menu submenu = clueDetailsEntry.createSubMenu();
			Arrays.stream(cluesInInventory).forEach((clue) -> addHighlightItemMenu(cluePreferenceManager, submenu, clue, itemId, event));
			trackedCluesInInventory.forEach((id, instance) -> instance.getClueIds().forEach((clueId) -> addHighlightItemMenu(cluePreferenceManager, submenu, Clues.forClueIdFiltered(clueId), itemId, event)));
			return;
		}

		// Is a clue item, add clue item menu entries
		handleClueDetailsMenuEntry(panel, menuEntry, itemId);
	}

	private void handleMarkClue(CluePreferenceManager cluePreferenceManager, ClueDetailsParentPanel panel, String name, int itemId)
	{
		boolean isMarked = cluePreferenceManager.getHighlightPreference(itemId);

		// Mark Option
		if (!Clues.isTrackedClueOrTornClue(itemId, clueDetailsPlugin.isDeveloperMode()))
		{
			toggleMarkClue(cluePreferenceManager, panel, itemId, isMarked, name);
		}
	}

	private void handleClueDetailsMenuEntry(ClueDetailsParentPanel panel, MenuEntry entry, int itemId)
	{
		List<Integer> clueIds = new ArrayList<>();
		Menu menu;
		String option = null;
		String target = null;

		// If beginner or master clue
		if (Clues.isTrackedClueOrTornClue(itemId, clueDetailsPlugin.isDeveloperMode()))
		{
			ClueInstance clueSelected = trackedCluesInInventory.get(itemId);
			if (clueSelected == null || clueSelected.getClueIds().isEmpty()) return;

			clueIds.addAll(clueSelected.getClueIds());

			// Only create submenu when needed
			if (clueIds.size() > 1)
			{
				MenuEntry parent = client.getMenu().createMenuEntry(-1)
					.setOption("Clue details")
					.setTarget(entry.getTarget())
					.setType(MenuAction.RUNELITE);

				menu = parent.createSubMenu();
			}
			else
			{
				menu = client.getMenu();
				target = entry.getTarget();
				option = "Clue details";
			}
		}
		else
		{
			menu = client.getMenu();
			clueIds.add(itemId);
			target = entry.getTarget();
			option = "Clue details";
		}

		for (int id : clueIds)
		{
			Clues clue = Clues.forClueIdFiltered(id);
			if (clue == null)
			{
				log.debug("Failed to find clue " + id);
				return;
			}
			String newOption = option == null ? clue.getDetail(configManager) : option;
			String newTarget = target == null ? "" : target;
			addClueDetailsMenuEntry(panel, menu, newOption, newTarget, clue);
		}
	}

	private void addClueDetailsMenuEntry(ClueDetailsParentPanel panel, Menu menu, String option, String target, Clues clue)
	{
		menu.createMenuEntry(-1)
			.setOption(option)
			.setTarget(target)
			.setType(MenuAction.RUNELITE)
			.onClick(e ->
				chatboxPanelManager.openTextInput("Enter new clue detail:")
					.value(clue.getDetail(configManager))
					.onDone((newDetail) ->
					{
						configManager.setConfiguration("clue-details-text", String.valueOf(clue.getClueID()), newDetail);
						panel.refresh();
					})
					.build());
	}

	private void addHighlightItemMenu(CluePreferenceManager cluePreferenceManager, Menu menu, Clues clue, int itemId, MenuEntryAdded event)
	{
		if (clue == null) return;

		boolean itemInCluePreference = cluePreferenceManager.itemsPreferenceContainsItem(clue.getClueID(), itemId);

		String action = itemInCluePreference ? "Remove from " : "Add to ";
		String clueDetail = clue.getDetail(configManager);
		final String text = action + "'" + clueDetail + "'";

		// Add menu to item for clue
		menu.createMenuEntry(-1)
			.setOption(text)
			.setTarget(event.getTarget())
			.setIdentifier(itemId)
			.setType(MenuAction.RUNELITE)
			.onClick(e ->
				updateClueItems(clue, itemId, cluePreferenceManager));
	}

	private void toggleMarkClue(CluePreferenceManager cluePreferenceManager, ClueDetailsParentPanel panel, int clueId, boolean isMarked, String target)
	{
		// We don't want to have marking on masters I think
		client.getMenu().createMenuEntry(-1)
			.setOption(isMarked ? "Unmark" : "Mark")
			.setTarget(target)
			.setIdentifier(clueId)
			.setType(MenuAction.RUNELITE)
			.onClick(e ->
			{
				boolean currentValue = cluePreferenceManager.getHighlightPreference(e.getIdentifier());
				cluePreferenceManager.saveHighlightPreference(e.getIdentifier(), !currentValue);
				panel.refresh();
			});
	}

	private void updateClueItems(Clues clue, int itemId, CluePreferenceManager cluePreferenceManager)
	{
		// Get existing Clue itemIds
		int clueId = clue.getClueID();
		List<Integer> clueItemIds = cluePreferenceManager.getItemsPreference(clueId);

		if (clueItemIds == null)
		{
			clueItemIds = new ArrayList<>();
		}

		// Remove if already present
		if (clueItemIds.contains(itemId))
		{
			clueItemIds.remove(Integer.valueOf(itemId));
		}
		// Add if not present
		else
		{
			clueItemIds.add(itemId);
		}

		// Save Clue itemIds
		cluePreferenceManager.saveItemsPreference(clueId, clueItemIds);
	}

	private boolean hasClueName(String name)
	{
		return name.contains("Clue scroll")
			|| name.contains("Challenge scroll")
			|| name.contains("Key (medium)")
			|| (clueDetailsPlugin.isDeveloperMode() && name.contains("Daeyalt essence"));
	}

	public void onGameTick()
	{
		// Reset clue when receiving a new beginner or master clue
		// These clues use a single item ID, so we cannot detect step changes based on the item ID changing
		final Widget headModelWidget = client.getWidget(ComponentID.DIALOG_NPC_HEAD_MODEL);
		final Widget chatDialogClueItemWidget = client.getWidget(ComponentID.DIALOG_SPRITE_SPRITE);
		final Widget npcChatWidget = client.getWidget(ComponentID.DIALOG_NPC_TEXT);

		if (isNewBeginnerClue(chatDialogClueItemWidget)
			|| (isUriBeginnerClue(headModelWidget) && isUriStandardDialogue(npcChatWidget)))
		{
			ClueInstance clue = trackedCluesInInventory.get(ItemID.CLUE_SCROLL_BEGINNER);
			if (clue == null) return;
			clue.setClueIds(List.of());
		}
		else if (isNewMasterClue(chatDialogClueItemWidget)
			|| (isUriMasterClue(headModelWidget) && isUriStandardDialogue(npcChatWidget)))
		{
			ClueInstance clue =  trackedCluesInInventory.get(ItemID.CLUE_SCROLL_MASTER);
			if (clue == null) return;
			clue.setClueIds(List.of());
		}
	}

	private boolean isUriMasterClue(Widget headModel)
	{
		if (headModel == null) return false;
		return headModel.getModelId() == NpcID.URI_7311;
	}

	private boolean isUriBeginnerClue(Widget headModel)
	{
		if (headModel == null) return false;
		return headModel.getModelId() == NpcID.URI_8638;
	}

	private boolean isUriStandardDialogue(Widget npcChat)
	{
		if (npcChat == null) return false;
		// Check if speaking with another player's Uri or with incorrect attire
		return !npcChat.getText().contains("I do not believe we have any business, Comrade.");
	}

	private boolean isNewBeginnerClue(Widget chatDialogClueItem)
	{
		if (chatDialogClueItem == null) return false;
		return chatDialogClueItem.getItemId() == ItemID.CLUE_SCROLL_BEGINNER;
	}

	private boolean isNewMasterClue(Widget chatDialogClueItem)
	{
		if (chatDialogClueItem == null) return false;
		return chatDialogClueItem.getItemId() == ItemID.CLUE_SCROLL_MASTER;
	}

	private boolean isEnabled(Integer itemId)
	{
		if (itemId == ItemID.CLUE_SCROLL_BEGINNER)
		{
			return config.beginnerDetails();
		}
		else if (itemId == ItemID.CLUE_SCROLL_MASTER )
		{
			return config.masterDetails();
		}
		return true;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.cluedetails.panels.ClueDetailsParentPanel;
import com.google.gson.Gson;
import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import javax.inject.Named;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.events.ClientShutdown;
import net.runelite.client.game.chatbox.ChatboxItemSearch;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.components.colorpicker.ColorPickerManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
		name = "Clue Details",
		description = "Provides details and highlighting for clues on the floor",
		tags = {"clue", "overlay"}
)
public class ClueDetailsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClueDetailsConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClueDetailsOverlay infoOverlay;

	@Inject
	private ClueGroundOverlay groundOverlay;

	@Inject
	private ClueDetailsTagsOverlay tagsOverlay;

	@Inject
	private ClueDetailsWidgetOverlay widgetOverlay;

	@Inject
	private EventBus eventBus;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ChatboxPanelManager chatboxPanelManager;

	@Inject
	private ClueDetailsSharingManager clueDetailsSharingManager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private KeyManager keyManager;

	@Getter
	@Inject
	private ItemManager itemManager;

	@Getter
	@Inject
	@Named("developerMode")
	private boolean developerMode;

	@Getter
	@Inject
	Gson gson;

	@Getter
	private ClueInventoryManager clueInventoryManager;

	@Getter
	private ClueGroundManager clueGroundManager;

	private ClueBankManager clueBankManager;

	private CluePreferenceManager cluePreferenceManager;

	@Getter
	@Inject
	private ChatMessageManager chatMessageManager;

	@Getter
	@Inject
	private ColorPickerManager colorPickerManager;

	@Inject
	@Getter
	private ChatboxItemSearch itemSearch;

	@Getter
	private ClueDetailsParentPanel panel;

	private NavigationButton navButton;

	private boolean profileChanged;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(infoOverlay);
		eventBus.register(infoOverlay);

		overlayManager.add(groundOverlay);
		eventBus.register(groundOverlay);

		overlayManager.add(tagsOverlay);

		overlayManager.add(widgetOverlay);
		eventBus.register(widgetOverlay);

		Clues.setConfig(config);
		ClueInventoryManager.setConfig(config);

		cluePreferenceManager = new CluePreferenceManager(this, configManager);
		clueGroundManager = new ClueGroundManager(client, configManager, this);
		clueBankManager = new ClueBankManager(client, configManager, gson);
		clueInventoryManager = new ClueInventoryManager(client, configManager, this, clueGroundManager, clueBankManager, chatboxPanelManager);
		clueBankManager.startUp(clueInventoryManager);

		infoOverlay.startUp(this, clueGroundManager, clueInventoryManager);
		groundOverlay.startUp(clueGroundManager);
		widgetOverlay.setClueInventoryManager(clueInventoryManager);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon.png");

		panel = new ClueDetailsParentPanel(configManager, cluePreferenceManager, config, chatboxPanelManager, clueDetailsSharingManager, this);
		navButton = NavigationButton.builder()
				.tooltip("Clue Details")
				.icon(icon)
				.priority(7)
				.panel(panel)
				.build();

		if (config.showSidebar())
		{
			clientToolbar.addNavigation(navButton);
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(infoOverlay);
		eventBus.unregister(infoOverlay);

		overlayManager.remove(groundOverlay);
		eventBus.unregister(groundOverlay);

		overlayManager.remove(tagsOverlay);

		overlayManager.remove(widgetOverlay);
		eventBus.unregister(widgetOverlay);

		clientToolbar.removeNavigation(navButton);

		clueGroundManager.saveStateToConfig();
		clueBankManager.saveStateToConfig();
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() == InventoryID.INVENTORY.getId())
		{
			clueInventoryManager.updateInventory(event.getItemContainer());
		}
		else if (event.getContainerId() == InventoryID.BANK.getId())
		{
			clueBankManager.handleBankChange(event.getItemContainer());
		}

	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() >= InterfaceID.CLUE_BEGINNER_MAP_CHAMPIONS_GUILD
			&& event.getGroupId() <= InterfaceID.CLUE_BEGINNER_MAP_WIZARDS_TOWER)
		{
			clueInventoryManager.updateClueText(event.getGroupId());
		}
		else if (event.getGroupId() == ComponentID.CLUESCROLL_TEXT >> 16)
		{
			clientThread.invokeLater(() ->
			{
				Widget clueScrollText = client.getWidget(ComponentID.CLUESCROLL_TEXT);
				if (clueScrollText != null)
				{
					String text = clueScrollText.getText();
					clueInventoryManager.updateClueText(text);
				}
			});
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN)
		{
			clueGroundManager.saveStateToConfig();
			clueBankManager.saveStateToConfig();
			profileChanged = true;
		}

		if (event.getGameState() == GameState.LOGGED_IN && profileChanged)
		{
			profileChanged = false;
			clueGroundManager.loadStateFromConfig();
			clueBankManager.loadStateFromConfig();
		}
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged event)
	{
		profileChanged = true;
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		clueGroundManager.onGameTick();
		clueInventoryManager.onGameTick();
	}

	/* This gets called when:
	   Player logs in
	   Player enters from outside 3 zones distance to 3 or closer (teleport in, run in)
	   Player turns on plugin (and seems onItemSpawned is called for all existing items in scene, including
	     ones outside the 3 zone limit which're rendered
	 */
	@Subscribe
	public void onItemSpawned(ItemSpawned event)
	{
		clueGroundManager.onItemSpawned(event);
	}

	@Subscribe
	public void onItemDespawned(ItemDespawned event)
	{
		clueGroundManager.onItemDespawned(event);
	}

	@Subscribe(priority = -1) // run after ground items
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		clueInventoryManager.onMenuEntryAdded(event, cluePreferenceManager, panel);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("clue-details-highlights"))
		{
			infoOverlay.refreshHighlights();
		}

		if (!event.getGroup().equals(ClueDetailsConfig.class.getAnnotation(ConfigGroup.class).value()))
		{
			return;
		}

		if ("showSidebar".equals(event.getKey()))
		{
			if ("true".equals(event.getNewValue()))
			{
				clientToolbar.addNavigation(navButton);
			}
			else
			{
				clientToolbar.removeNavigation(navButton);
			}
		}

		panel.refresh();
	}

	@Subscribe(priority = 100)
	private void onClientShutdown(ClientShutdown event)
	{
		clueGroundManager.saveStateToConfig();
		clueBankManager.saveStateToConfig();
	}

	@Provides
	ClueDetailsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClueDetailsConfig.class);
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://www.github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.awt.Color;
import java.util.List;
import lombok.Data;

@Data
public class ClueIdToDetails
{
	int id;
	String text;
	Color color;
	List<Integer> itemIds;

	public ClueIdToDetails(int id, String text)
	{
		this.id = id;
		this.text = text;
	}

	public ClueIdToDetails(int id, Color color)
	{
		this.id = id;
		this.color = color;
	}

	public ClueIdToDetails(int id, List<Integer> itemIds)
	{
		this.id = id;
		this.itemIds = itemIds;
	}

	public ClueIdToDetails(int id, String text, Color color)
	{
		this.id = id;
		this.text = text;
		this.color = color;
	}

	public ClueIdToDetails(int id, String text, List<Integer> itemIds)
	{
		this.id = id;
		this.text = text;
		this.itemIds = itemIds;
	}

	public ClueIdToDetails(int id, Color color, List<Integer> itemIds)
	{
		this.id = id;
		this.color = color;
		this.itemIds = itemIds;
	}

	public ClueIdToDetails(int id, String text, Color color, List<Integer> itemIds)
	{
		this.id = id;
		this.text = text;
		this.color = color;
		this.itemIds = itemIds;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.cluedetails.filters.ClueOrders;
import com.cluedetails.filters.ClueRegion;
import com.cluedetails.filters.ClueTier;
import java.awt.Color;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import lombok.Getter;
import net.runelite.client.config.*;

@ConfigGroup("clue-details")
public interface ClueDetailsConfig extends Config
{
	String CLUE_ITEMS_CONFIG = "clue-details-items";

	enum ClueOrdering implements Comparator<Clues>
	{
		/**
		 * Sort clues in alphabetical order
		 */
		TIER(ClueOrders.sortByTier(), ClueTierFilter.BEGINNER, ClueTierFilter.EASY, ClueTierFilter.MEDIUM, ClueTierFilter.MEDIUM_KEY, ClueTierFilter.HARD, ClueTierFilter.ELITE, ClueTierFilter.MASTER),
		REGION(ClueOrders.sortByRegion(), ClueRegionFilter.MISTHALIN, ClueRegionFilter.ASGARNIA, ClueRegionFilter.KARAMJA, ClueRegionFilter.KANDARIN, ClueRegionFilter.FREMENNIK_PROVINCE, ClueRegionFilter.KHARIDIAN_DESERT,
			ClueRegionFilter.MORYTANIA, ClueRegionFilter.TIRANNWN, ClueRegionFilter.WILDERNESS, ClueRegionFilter.KOUREND, ClueRegionFilter.VARLAMORE);

		private final Comparator<Clues> comparator;
		@Getter
		private final ClueFilter[] sections;

		ClueOrdering(Comparator<Clues> comparator, ClueFilter... sections)
		{
			this.comparator = comparator;
			this.sections = sections;
		}

		public List<Clues> sort(Collection<Clues> list)
		{
			return list.stream().sorted(this).collect(Collectors.toList());
		}

		@Override
		public int compare(Clues o1, Clues o2)
		{
			return comparator.compare(o1, o2);
		}
	}

	interface ClueFilter extends Predicate<Clues>
	{
		String getDisplayName();
	}

	class BaseClueFilter
	{
		private final String displayName;

		public BaseClueFilter(String displayName)
		{
			this.displayName = displayName;
		}

		public String getDisplayName()
		{
			return displayName;
		}
	}

	enum ClueTierFilter implements ClueFilter
	{
		SHOW_ALL(c -> true, "Show All"),
		BEGINNER(c -> c.getClueTier() == ClueTier.BEGINNER, "Beginner"),
		EASY(c -> c.getClueTier() == ClueTier.EASY, "Easy"),
		MEDIUM(c -> c.getClueTier() == ClueTier.MEDIUM, "Medium"),
		MEDIUM_KEY(c -> c.getClueTier() == ClueTier.MEDIUM_KEY, "Medium Key"),
		HARD(c -> c.getClueTier() == ClueTier.HARD, "Hard"),
		ELITE(c -> c.getClueTier() == ClueTier.ELITE, "Elite"),
		MASTER(c -> c.getClueTier() == ClueTier.MASTER, "Master");

		private final Predicate<Clues> predicate;
		private final BaseClueFilter baseClueFilter;

		ClueTierFilter(Predicate<Clues> predicate, String displayName)
		{
			this.predicate = predicate;
			this.baseClueFilter = new BaseClueFilter(displayName);
		}

		@Override
		public boolean test(Clues clue)
		{
			return predicate.test(clue);
		}

		public List<Clues> test(Collection<Clues> helpers)
		{
			return helpers.stream().filter(this).collect(Collectors.toList());
		}

		public static ClueTierFilter[] displayFilters()
		{
			return ClueTierFilter.values();
		}

		@Override
		public String getDisplayName()
		{
			return baseClueFilter.getDisplayName();
		}
	}

	enum ClueRegionFilter implements ClueFilter
	{
		SHOW_ALL(c -> true, "Show All"),
		MISTHALIN(c -> c.getRegions().isRegionValid(ClueRegion.MISTHALIN), "Misthalin"),
		KARAMJA(c -> c.getRegions().isRegionValid(ClueRegion.KARAMJA), "Karamja"),
		ASGARNIA(c -> c.getRegions().isRegionValid(ClueRegion.ASGARNIA), "Asgarnia"),
		FREMENNIK_PROVINCE(c -> c.getRegions().isRegionValid(ClueRegion.FREMENNIK_PROVINCE), "Fremennik province"),
		KANDARIN(c -> c.getRegions().isRegionValid(ClueRegion.KANDARIN), "Kandarin"),
		KHARIDIAN_DESERT(c -> c.getRegions().isRegionValid(ClueRegion.KHARIDIAN_DESERT), "Kharidian desert"),
		MORYTANIA(c -> c.getRegions().isRegionValid(ClueRegion.MORYTANIA), "Morytania"),
		TIRANNWN(c -> c.getRegions().isRegionValid(ClueRegion.TIRANNWN), "Tirannwn"),
		WILDERNESS(c -> c.getRegions().isRegionValid(ClueRegion.WILDERNESS), "Wilderness"),
		KOUREND(c -> c.getRegions().isRegionValid(ClueRegion.KOUREND), "Kourend"),
		VARLAMORE(c -> c.getRegions().isRegionValid(ClueRegion.VARLAMORE), "Varlamore"),
		;

		private final Predicate<Clues> predicate;
		private final BaseClueFilter baseClueFilter;

		ClueRegionFilter(Predicate<Clues> predicate, String displayName)
		{
			this.predicate = predicate;
			this.baseClueFilter = new BaseClueFilter(displayName);
		}

		@Override
		public boolean test(Clues clue)
		{
			return predicate.test(clue);
		}

		public List<Clues> test(Collection<Clues> helpers)
		{
			return helpers.stream().filter(this).collect(Collectors.toList());
		}

		public static ClueRegionFilter[] displayFilters()
		{
			return ClueRegionFilter.values();
		}

		@Override
		public String getDisplayName()
		{
			return baseClueFilter.getDisplayName();
		}
	}

	enum ClueTagLocation
	{
		SPLIT(true, "Split"),
		TOP(false, "Top"),
		BOTTOM(false, "Bottom");

		ClueTagLocation(Object selected, String displayName)
		{
		}
	}

	@ConfigItem(
		keyName = "showSidebar",
		name = "Show sidebar",
		description = "Customise clue details in a sidebar",
		position = 1
	)
	default boolean showSidebar()
	{
		return true;
	}

	@ConfigSection(name = "Sidebar", description = "Options that effect the sidebar", position = 2, closedByDefault = true)
	String sidebarSection = "Sidebar";

	@ConfigItem(
		keyName = "filterListByTier",
		name = "Filter by tier",
		description = "Configures what tier of clue to show",
		section = sidebarSection,
		position = 1
	)
	default ClueTierFilter filterListByTier()
	{
		return ClueTierFilter.SHOW_ALL;
	}

	@ConfigItem(
		keyName = "filterListByRegion",
		name = "Filter by region",
		description = "Configures what clues to show based on region they fall in",
		section = sidebarSection,
		position = 2
	)
	default ClueRegionFilter filterListByRegion()
	{
		return ClueRegionFilter.SHOW_ALL;
	}

	@ConfigItem(
		keyName = "orderListBy",
		name = "Clue sidebar order",
		description = "Configures which way to order the clue list",
		section = sidebarSection,
		position = 3
	)
	default ClueOrdering orderListBy()
	{
		return ClueOrdering.TIER;
	}

	@ConfigSection(name = "Marked Clues", description = "Options that effect marked clues", position = 3)
	String markedCluesSection = "Marked Clues";

	@ConfigItem(
		keyName = "markedClueDroppedNotification",
		name = "Notify when a marked clue drops",
		description = "Send a notification when a marked clue drops",
		section = markedCluesSection,
		position = 1
	)
	default Notification markedClueDroppedNotification()
	{
		return Notification.ON;
	}

	@ConfigItem(
		keyName = "onlyShowMarkedClues",
		name = "Only show marked clues in the sidebar",
		description = "Toggle whether to only show marked clues in the sidebar",
		section = markedCluesSection,
		position = 5
	)
	default boolean onlyShowMarkedClues()
	{
		return false;
	}

	@ConfigItem(
		keyName = "highlightMarkedClues",
		name = "Highlight marked clues",
		description = "Toggle whether to highlight marked clues",
		section = markedCluesSection,
		position = 2
	)
	default boolean highlightMarkedClues()
	{
		return true;
	}

	@ConfigItem(
		keyName = "highlightFeather",
		name = "Highlighted feathering",
		description = "Configure the feathering of highlighted clues",
	section = markedCluesSection,
		position = 3
	)
	default int highlightFeather()
	{
		return 10;
	}

	@ConfigItem(
		keyName = "outlineWidth",
		name = "Highlighted outline width",
		description = "Configure the outline width of highlighted clues",
		section = markedCluesSection,
		position = 4
	)
	default int outlineWidth()
	{
		return 4;
	}

	@ConfigSection(name = "Overlays", description = "Options that effect overlays", position = 4)
	String overlaysSection = "Overlays";

	@ConfigItem(
		keyName = "showHoverText",
		name = "Show hover text",
		description = "Toggle whether to show tooltips on clue hover",
		section = overlaysSection,
		position = 0
	)
	default boolean showHoverText()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showInventoryClueTags",
		name = "Show clue tags",
		description = "Toggle whether to show clue details as item tags",
		section = overlaysSection,
		position = 1
	)
	default boolean showInventoryClueTags()
	{
		return false;
	}

	@ConfigItem(
		keyName = "clueTagLocation",
		name = "Clue tag location",
		description = "Configures where on the clue item to draw tags",
		section = overlaysSection,
		position = 2
	)
	default ClueTagLocation clueTagLocation()
	{
		return ClueTagLocation.SPLIT;
	}

	@ConfigItem(
		keyName = "clueTagSplit",
		name = "Clue tag split sequence",
		description = "Character sequence on which the tag will be split",
		section = overlaysSection,
		position = 3
	)
	default String clueTagSplit()
	{
		return ": ";
	}

	@ConfigItem(
		keyName = "showInventoryCluesOverlay",
		name = "Show inventory overlay",
		description = "Toggle whether to show an overlay with details on all clues in your inventory",
		section = overlaysSection,
		position = 4
	)
	default boolean showInventoryCluesOverlay()
	{
		return false;
	}

	@ConfigItem(
		keyName = "changeClueText",
		name = "Change ground item menu text",
		description = "Toggle whether to change the ground item menu text to the clue detail",
		section = overlaysSection,
		position = 5
	)
	default boolean changeClueText()
	{
		return false;
	}

	@ConfigItem(
		keyName = "highlightInventoryClueItems",
		name = "Highlight inventory clue items",
		description = "Toggle whether to highlight configured items for each clue in your inventory",
		section = overlaysSection,
		position = 6
	)
	default boolean highlightInventoryClueItems()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "itemHighlightColor",
		name = "Item highlight color",
		description = "Configures the default color for highlighted inventory clue items",
		section = overlaysSection,
		position = 7
	)
	default Color itemHighlightColor()
	{
		return Color.YELLOW.darker();
	}

	@ConfigSection(name = "Overlay Colors", description = "Options that effect overlay colors", position = 5)
	String overlayColorsSection = "Overlay Colors";

	@ConfigItem(
		keyName = "colorHoverText",
		name = "Color hover text",
		description = "Toggle whether to apply clue details color to hover text",
		section = overlayColorsSection,
		position = 0
	)
	default boolean colorHoverText()
	{
		return true;
	}

	@ConfigItem(
		keyName = "colorInventoryClueTags",
		name = "Color clue tags",
		description = "Toggle whether to apply clue details color to clue tags",
		section = overlayColorsSection,
		position = 1
	)
	default boolean colorInventoryClueTags()
	{
		return true;
	}

	@ConfigItem(
		keyName = "colorInventoryCluesOverlay",
		name = "Color inventory overlay",
		description = "Toggle whether to apply clue details color to inventory overlay",
		section = overlayColorsSection,
		position = 2
	)
	default boolean colorInventoryCluesOverlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = "colorChangeClueText",
		name = "Color ground item menu text",
		description = "Toggle whether to apply clue details color to ground item menu text",
		section = overlayColorsSection,
		position = 3
	)
	default boolean colorChangeClueText()
	{
		return true;
	}

	@ConfigItem(
		keyName = "colorInventoryClueItems",
		name = "Color inventory clue items",
		description = "Toggle whether apply clue details color to highlighted inventory clue items",
		section = overlayColorsSection,
		position = 4
	)
	default boolean colorInventoryClueItems()
	{
		return true;
	}

	@ConfigItem(
		keyName = "colorGroundItems",
		name = "Overwrite Ground Items colors",
		description = "When updating clue details colors, apply the color to the Ground Items plugin",
		warning = "Does not work for Beginner and Master clues. Colors must be reset via Ground Items plugin.",
		section = overlayColorsSection,
		position = 5
	)
	default boolean colorGroundItems()
	{
		return false;
	}

	@ConfigItem(
		keyName = "colorInventoryTags",
		name = "Overwrite Inventory Tags colors",
		description = "When updating clue details colors, apply the color to the Inventory Tags plugin",
		warning = "Does not work for Beginner and Master clues. Colors must be reset via Inventory Tags plugin.",
		section = overlayColorsSection,
		position = 6
	)
	default boolean colorInventoryTags()
	{
		return false;
	}

	@ConfigSection(name = "Ground Clues", description = "Options that effect ground clues overlay (only supports Beginner and Master clues", position = 6)
	String groundCluesSection = "Ground Clues";

	@ConfigItem(
		keyName = "showGroundClues",
		name = "Show ground clues",
		description = "Toggle whether to show ground clues overlay",
		section = groundCluesSection,
		position = 0
	)
	default boolean showGroundClues()
	{
		return false;
	}

	@ConfigItem(
		keyName = "changeGroundClueText",
		name = "Change ground clue text",
		description = "Toggle whether to change the ground clue text to the clue detail",
		section = groundCluesSection,
		position = 1
	)
	default boolean changeGroundClueText()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGroundCluesDespawn",
		name = "Show ground clues despawn",
		description = "Toggle whether to add despawn timers to the ground clues overlay",
		section = groundCluesSection,
		position = 2
	)
	default boolean showGroundCluesDespawn()
	{
		return false;
	}

	@ConfigItem(
		keyName = "collapseGroundClues",
		name = "Collapse ground clues",
		description = "Toggle whether to combine duplicates in the ground clues overlay",
		section = groundCluesSection,
		position = 3
	)
	default boolean collapseGroundClues()
	{
		return true;
	}

	@ConfigItem(
		keyName = "colorGroundClues",
		name = "Color ground clues",
		description = "Toggle whether to apply clue details color to ground clue text",
		section = groundCluesSection,
		position = 4
	)
	default boolean colorGroundClues()
	{
		return true;
	}

	@ConfigSection(name = "Tier Toggles", description = "Options to enable particular clue tiers", position = 7)
	String tierTogglesSection = "Tier Toggles";

	@ConfigItem(
		keyName = "beginnerDetails",
		name = "Beginner clues",
		description = "Beginner clue details are shown",
		section = tierTogglesSection,
		position = 0
	)
	default boolean beginnerDetails()
	{
		return true;
	}

	@ConfigItem(
		keyName = "easyDetails",
		name = "Easy clues",
		description = "Easy clue details are shown",
		section = tierTogglesSection,
		position = 1
	)
	default boolean easyDetails()
	{
		return true;
	}

	@ConfigItem(
		keyName = "mediumDetails",
		name = "Medium clues",
		description = "Medium clue details are shown",
		section = tierTogglesSection,
		position = 2
	)
	default boolean mediumDetails()
	{
		return true;
	}

	@ConfigItem(
		keyName = "hardDetails",
		name = "Hard clues",
		description = "Hard clue details are shown",
		section = tierTogglesSection,
		position = 3
	)
	default boolean hardDetails()
	{
		return true;
	}

	@ConfigItem(
		keyName = "eliteDetails",
		name = "Elite clues",
		description = "Elite clue details are shown",
		section = tierTogglesSection,
		position = 4
	)
	default boolean eliteDetails()
	{
		return true;
	}

	@ConfigItem(
		keyName = "masterDetails",
		name = "Master clues",
		description = "Master clue details are shown",
		section = tierTogglesSection,
		position = 5
	)
	default boolean masterDetails()
	{
		return true;
	}
}

/*
 * Copyright (c) 2019, Trevor <https://github.com/Trevor159>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.filters;

import lombok.Getter;
import static net.runelite.api.Constants.REGION_SIZE;
import net.runelite.api.coords.WorldPoint;

public class Zone
{
	@Getter
	private final int minX;
	@Getter
	private final int maxX;
	@Getter
	private final int minY;
	@Getter
	private final int maxY;
	private int minPlane = 0;
	private int maxPlane = 2;

	//The first plane of the "Overworld"
	public Zone()
	{
		minX = 1152;
		maxX = 3903;
		minY = 2496;
		maxY = 4159;
		maxPlane = 0;
	}

	public Zone(WorldPoint p1, WorldPoint p2)
	{
		minX = Math.min(p1.getX(), p2.getX());
		maxX = Math.max(p1.getX(), p2.getX());
		minY = Math.min(p1.getY(), p2.getY());
		maxY = Math.max(p1.getY(), p2.getY());
		minPlane = Math.min(p1.getPlane(), p2.getPlane());
		maxPlane = Math.max(p1.getPlane(), p2.getPlane());
	}

	public Zone(WorldPoint p)
	{
		minX = p.getX();
		maxX = p.getX();
		minY = p.getY();
		maxY = p.getY();
		minPlane = p.getPlane();
		maxPlane = p.getPlane();
	}

	public Zone(int regionID)
	{
		minX = ((regionID >> 8) & 0xFF) << 6;
		maxX = minX + REGION_SIZE;
		minY = (regionID & 0xFF) << 6;
		maxY = minY + REGION_SIZE;
	}

	public Zone(int regionX, int regionY)
	{
		minX = regionX << 6;
		maxX = minX + REGION_SIZE;
		minY = regionY << 6;
		maxY = minY + REGION_SIZE;
	}

	public Zone(int regionXMin, int regionYMin, int regionXMax, int regionYMax)
	{
		minX = regionXMin << 6;
		maxX = (regionXMax << 6) + REGION_SIZE;
		minY = regionYMin << 6;
		maxY = (regionYMax << 6) + REGION_SIZE;
	}

	public boolean contains(WorldPoint worldPoint)
	{
		return minX <= worldPoint.getX()
			&& worldPoint.getX() <= maxX
			&& minY <= worldPoint.getY()
			&& worldPoint.getY() <= maxY
			&& minPlane <= worldPoint.getPlane()
			&& worldPoint.getPlane() <= maxPlane;
	}

	public WorldPoint getMinWorldPoint()
	{
		return new WorldPoint(minX, minY, minPlane);
	}
}


/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.filters;

import lombok.Getter;

@Getter
public enum ClueTier
{
	BEGINNER(0),
	EASY(1),
	MEDIUM(2),
	MEDIUM_CHALLENGE(2),
	MEDIUM_KEY(2),
	HARD(3),
	HARD_CHALLENGE(3),
	ELITE(4),
	ELITE_CHALLENGE(4),
	MASTER(5);

	private final int value;

	ClueTier(int value)
	{
		this.value = value;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.filters;

import com.cluedetails.Clues;
import java.util.Comparator;
import java.util.List;

public class ClueOrders
{
	static List<ClueTier> tierOrder = List.of(
		ClueTier.BEGINNER,
		ClueTier.EASY,
		ClueTier.MEDIUM,
		ClueTier.MEDIUM_KEY,
		ClueTier.HARD,
		ClueTier.ELITE,
		ClueTier.MASTER
	);

	static List<ClueRegion> regionOrder = List.of(
		ClueRegion.MISTHALIN, ClueRegion.ASGARNIA, ClueRegion.KARAMJA, ClueRegion.KANDARIN, ClueRegion.FREMENNIK_PROVINCE, ClueRegion.KHARIDIAN_DESERT,
		ClueRegion.MORYTANIA, ClueRegion.TIRANNWN, ClueRegion.WILDERNESS, ClueRegion.KOUREND, ClueRegion.VARLAMORE
	);

	public static Comparator<Clues> sortByTier()
	{
		return Comparator.comparing(q -> tierOrder.indexOf(q));
	}

	public static Comparator<Clues> sortByRegion()
	{
		return Comparator.comparing(q -> regionOrder.indexOf(q));
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.filters;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import net.runelite.api.coords.WorldPoint;

public class OrRequirement extends AbstractRequirement
{
	public OrRequirement(WorldPoint... wps)
	{
		this.wps = List.of(wps);
		this.regions = findRegions();
	}

	public OrRequirement(List<WorldPoint> wps)
	{
		this.wps = wps;
		this.regions = findRegions();
	}

	@Override
	public boolean isRegionValid(ClueRegion clueRegionToCheck)
	{
		return regions.contains(clueRegionToCheck);
	}

	private List<ClueRegion> findRegions()
	{
		return wps.stream()
			.flatMap(wp ->
				Arrays.stream(ClueRegion.values())
					.filter(region ->
						Arrays.stream(region.getZones())
							.anyMatch(zone -> zone.contains(wp))
					)
			)
			.distinct()
			.collect(Collectors.toList());
	}
}


/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.filters;

import java.util.List;
import net.runelite.api.coords.WorldPoint;

public abstract class AbstractRequirement
{
	List<WorldPoint> wps;

	List<ClueRegion> regions;

	abstract public boolean isRegionValid(ClueRegion clueRegionToCheck);
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails.filters;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.coords.WorldPoint;

@RequiredArgsConstructor
@Getter
public enum ClueRegion
{
	MISTHALIN(
		// Overlaps a tad with Al Kharid
		new Zone(48, 49, 50, 54),
		new Zone(51, 52, 52, 54),
		// Overlaps with Morytania slightly
		new Zone(new WorldPoint(3392, 3456, 0), new WorldPoint(3423, 3508, 3)),
		// Soul Wars
		new Zone(32, 43, 36, 46),
		// Fossil island
		new Zone(55, 57, 61, 62)
	),
	KARAMJA(
		new Zone(42, 45, 45, 48),
		new Zone(46, 45, 46, 47),
		new Zone(42, 48, 44, 50),
		new Zone(44, 51),
		new Zone(new WorldPoint(2880, 3136, 0), new WorldPoint(2932, 3199, 3)),
		new Zone(new WorldPoint(2933, 3136, 0), new WorldPoint(2964, 3184, 3))
	),
	ASGARNIA(
		new Zone(45, 50, 47, 54),
		new Zone(new WorldPoint(2944, 3162, 0), new WorldPoint(3053, 3199, 3)),
		new Zone(new WorldPoint(2963, 3099, 0), new WorldPoint(3043, 3161, 3)),
		// Troll Territory
		new Zone(44, 55, 45, 59),
		new Zone(43, 58, 43, 60),
		// White wolf mountain
		new Zone(new WorldPoint(2791, 3493, 0), new WorldPoint(2880, 3520, 3)),
		new Zone(new WorldPoint(2832, 3463, 0), new WorldPoint(2880, 3492, 3)),
		new Zone(new WorldPoint(2841, 3446, 0), new WorldPoint(2880, 3462, 3)),
		new Zone(new WorldPoint(2851, 3442, 0), new WorldPoint(2880, 3445, 3)),
		new Zone(new WorldPoint(2855, 3441, 0), new WorldPoint(2880, 3441, 3)),
		new Zone(new WorldPoint(2858, 3438, 0), new WorldPoint(2880, 3440, 3)),
		new Zone(new WorldPoint(2864, 3433, 0), new WorldPoint(2880, 3437, 3)),
		new Zone(new WorldPoint(2867, 3392, 0), new WorldPoint(2880, 3432, 3)),
		// Entrana, slight overlap with Kandarin
		new Zone(43, 52, 44, 52),
		// Pest Control
		new Zone(41, 40, 41, 41)
	),
	FREMENNIK_PROVINCE(
		new Zone(39, 56, 43, 57),
		new Zone(31, 58, 42, 64)
	),
	KANDARIN(
		new Zone(37, 44, 41, 55),
		new Zone(42, 51, 43, 54),
		// Catherby
		new Zone(new WorldPoint(2816, 3392, 0), new WorldPoint(2864, 3436, 3)),
		new Zone(new WorldPoint(2816, 3437, 0), new WorldPoint(2842, 3462, 3)),
		new Zone(new WorldPoint(2816, 3463, 0), new WorldPoint(2829, 3492, 3)),
		// South CW
		new Zone(36, 47, 36, 48),
		// Pisc
		new Zone(36, 53, 36, 57),
		new Zone(35, 54, 35, 57),
		// Ape Atoll
		new Zone(42, 42, 45, 43)
	),
	KHARIDIAN_DESERT(
		new Zone(49, 41, 55, 48),
		new Zone(51, 49, 52, 51),
		// West of Al Kharid bank
		new Zone(new WorldPoint(3253, 3148, 0), new WorldPoint(3263, 3190, 3)),
		new Zone(53, 49),
		// East of duel arena
		new Zone(new WorldPoint(3392, 3200, 0), new WorldPoint(3423, 3263, 3)),
		// Tempoross
		new Zone(47, 46)
	),
	MORYTANIA(
		new Zone(54, 49, 59, 55),
		new Zone(57, 43, 60, 47),
		new Zone(new WorldPoint(3400, 3264, 0), new WorldPoint(3455, 3462, 3)),
		new Zone(new WorldPoint(3424, 3463, 0), new WorldPoint(3455, 3508, 3)),
		new Zone(new WorldPoint(3396, 3509, 0), new WorldPoint(3455, 3579, 3))
	),
	TIRANNWN(
		new Zone(33, 47, 35, 53),
		new Zone(36, 49, 37, 51)
	),
	WILDERNESS(
		new Zone(46, 55, 52, 61)
	),
	KOUREND(
		new Zone(17, 51, 18, 59),
		new Zone(19, 53, 19, 60),
		new Zone(20, 54, 29, 63),
		new Zone(23, 53, 28, 53)
	),
	VARLAMORE(
		new Zone(19, 45, 29, 51),
		new Zone(20, 52, 22, 53)
	);

	Zone[] zones;

	ClueRegion(Zone... zones)
	{
		this.zones = zones;
	}

}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;

import com.cluedetails.filters.ClueTier;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

public class ClueDetailsWidgetOverlay extends OverlayPanel
{
	private final Client client;
	private final ClueDetailsPlugin clueDetailsPlugin;
	private final ClueDetailsConfig config;
	private final ConfigManager configManager;
	@Setter
	private ClueInventoryManager clueInventoryManager;
	private final ItemManager itemManager;

	private static final Color TITLED_CONTENT_COLOR = new Color(190, 190, 190);

	@Inject
	public ClueDetailsWidgetOverlay(Client client, ClueDetailsPlugin clueDetailsPlugin, ClueDetailsConfig config, ConfigManager configManager, ItemManager itemManager)
	{
		this.clueDetailsPlugin = clueDetailsPlugin;
		this.itemManager = itemManager;
		setPriority(PRIORITY_HIGHEST);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setPosition(OverlayPosition.DYNAMIC);

		this.client = client;
		this.config = config;
		this.configManager = configManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.showInventoryCluesOverlay())
		{
			createInventoryCluesOverlay();
		}

		if (config.highlightInventoryClueItems())
		{
			createHighlightInventoryClueItems(graphics);
		}

		return super.render(graphics);
	}

	private void createInventoryCluesOverlay()
	{
		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null) return;

		for (Item item : inventory.getItems())
		{
			Clues clue = Clues.forItemId(item.getId());
			if (clue != null && !Arrays.asList(
				ClueTier.MEDIUM_CHALLENGE,
				ClueTier.HARD_CHALLENGE,
				ClueTier.ELITE_CHALLENGE).contains(clue.getClueTier()))
			{
				Color color = TITLED_CONTENT_COLOR;
				if (config.colorInventoryCluesOverlay())
				{
					color = clue.getDetailColor(configManager);
				}

				panelComponent.getChildren().add(LineComponent.builder()
					.left(clue.getDetail(configManager))
					.leftColor(color)
					.build());
			}

			ClueInstance clueInstance = clueInventoryManager.getTrackedClueByClueItemId(item.getId());
			if (clueInstance == null || clueInstance.getClueIds().isEmpty()) continue;

			for (Integer clueId : clueInstance.getClueIds())
			{
				Clues cluePart = Clues.forClueIdFiltered(clueId);
				if (cluePart == null) continue;

				Color color = TITLED_CONTENT_COLOR;
				if (config.colorInventoryCluesOverlay())
				{
					color = cluePart.getDetailColor(configManager);
				}

				panelComponent.getChildren().add(LineComponent.builder()
					.left(cluePart.getDetail(configManager))
					.leftColor(color)
					.build());
			}
		}
	}

	private void createHighlightInventoryClueItems(Graphics2D graphics)
	{
		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null || clueInventoryManager == null ) return;

		// Highlight for easy-elite clues
		for (Clues clue : clueInventoryManager.getCluesInInventory())
		{
			if (clue == null) continue;

			if (isEnabled(clue))
			{
				checkInvAndHighlightItems(graphics, clue);
			}
		}

		// Highlight for beginner and master clues
		for (Integer itemID : clueInventoryManager.getTrackedCluesInInventory())
		{
			if (itemID == null) continue;
			ClueInstance instance = clueInventoryManager.getTrackedClueByClueItemId(itemID);
			if (instance == null) continue;

			instance.getClueIds().forEach((clueId) -> {
				Clues clue = Clues.forClueIdFiltered(clueId);
				if (clue == null) return;
				if (isEnabled(clue))
				{
					checkInvAndHighlightItems(graphics, clue);
				}
			});
		}
	}

	private boolean isEnabled(Clues clue)
	{
		ClueTier tier = clue.getClueTier();

		if (config == null) return true;

		if (tier == ClueTier.BEGINNER)
		{
			return config.beginnerDetails();
		}
		if (tier == ClueTier.EASY)
		{
			return config.easyDetails();
		}
		if (tier == ClueTier.MEDIUM || tier == ClueTier.MEDIUM_CHALLENGE || tier == ClueTier.MEDIUM_KEY)
		{
			return config.mediumDetails();
		}
		if (tier == ClueTier.HARD || tier == ClueTier.HARD_CHALLENGE)
		{
			return config.hardDetails();
		}
		if (tier == ClueTier.ELITE || tier == ClueTier.ELITE_CHALLENGE)
		{
			return config.eliteDetails();
		}
		if (tier == ClueTier.MASTER)
		{
			return config.masterDetails();
		}
		return true;
	}

	protected Widget getInventoryWidget()
	{
		return client.getWidget(ComponentID.INVENTORY_CONTAINER);
	}

	private void checkInvAndHighlightItems(Graphics2D graphics, Clues clue)
	{
		List<Integer> highlightItems = clue.getItems(clueDetailsPlugin, configManager);

		if (highlightItems == null)
		{
			return;
		}

		Widget inventoryWidget = getInventoryWidget();
		if (inventoryWidget == null || inventoryWidget.isHidden())
		{
			return;
		}

		if (inventoryWidget.getDynamicChildren() == null)
		{
			return;
		}

		for (Widget item : inventoryWidget.getDynamicChildren())
		{
			if (highlightItems.contains(item.getItemId()))
			{
				Color itemHighlightColor = config.itemHighlightColor();

				Color clueColor = clue.getDetailColor(configManager);
				if (config.colorInventoryClueItems() && clueColor != Color.WHITE)
				{
					itemHighlightColor = clueColor;
				}
				renderItemOverlay(graphics, item, itemHighlightColor);
			}
		}
	}

	public void renderItemOverlay(Graphics2D graphics, Widget item, Color color)
	{
		Rectangle bounds = item.getBounds();
		final Image image = getFillImage(color, item.getItemId(), item.getItemQuantity());
		graphics.drawImage(image, (int) bounds.getX(), (int) bounds.getY(), null);
	}

	private Image getFillImage(Color color, int itemId, int qty)
	{
		final Color fillColor = ColorUtil.colorWithAlpha(color, 100);

		return ImageUtil.fillImage(itemManager.getImage(itemId, qty, false), fillColor);
	}
}

/*
 * Copyright (c) 2024, TheLope <https://github.com/TheLope>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import static net.runelite.api.ItemID.TORN_CLUE_SCROLL_PART_1;
import static net.runelite.api.ItemID.TORN_CLUE_SCROLL_PART_2;
import static net.runelite.api.ItemID.TORN_CLUE_SCROLL_PART_3;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.util.Text;

@Getter
@RequiredArgsConstructor
public class ThreeStepCrypticClue
{
	private final List<Map.Entry<Clues, Boolean>> clueSteps;
	private final String text;

	public static ThreeStepCrypticClue forText(String text)
	{
		final String[] split = text.split("<br>");
		final List<Map.Entry<Clues, Boolean>> steps = new ArrayList<>(split.length);

		for (String part : split)
		{
			boolean isDone = part.contains("<str>");
			final String rawText = Text.sanitizeMultilineText(part);

			for (Clues clue : Clues.CLUES)
			{
				if (!rawText.equalsIgnoreCase(clue.getClueText()))
				{
					continue;
				}

				steps.add(new AbstractMap.SimpleEntry<>(clue, isDone));
				break;
			}
		}

		if (steps.isEmpty() || steps.size() < 3)
		{
			return null;
		}

		return new ThreeStepCrypticClue(steps, text);
	}

	public void update(Set<Integer> trackedClues)
	{
		checkForPart(trackedClues, TORN_CLUE_SCROLL_PART_1, 0);
		checkForPart(trackedClues, TORN_CLUE_SCROLL_PART_2, 1);
		checkForPart(trackedClues, TORN_CLUE_SCROLL_PART_3, 2);
	}

	private void checkForPart(final Set<Integer> trackedClues, int clueScrollPart, int index)
	{
		// If we have the part then that step is done
		if (trackedClues.contains(clueScrollPart))
		{
			final Map.Entry<Clues, Boolean> entry = clueSteps.get(index);

			if (!entry.getValue())
			{
				entry.setValue(true);
			}
		}
	}

	public String getDetail(ConfigManager configManager, ClueDetailsConfig config)
	{
		StringBuilder text = new StringBuilder();

		for (final Map.Entry<Clues, Boolean> e : clueSteps)
		{
			if (!e.getValue())
			{
				Clues clue = e.getKey();
				String detail = clue.getDetail(configManager);
				if (config.colorInventoryClueTags())
				{
					String color = Integer.toHexString(clue.getDetailColor(configManager).getRGB()).substring(2);
					text.append("<col=").append(color).append(">");
				}
				text.append(detail).append("<br>");
			}
		}
		return text.toString();
	}
}

/*
 * Copyright (c) 2024, TheLope <https://github.com/TheLope>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TextComponent;
import net.runelite.client.util.QuantityFormatter;
import org.apache.commons.text.WordUtils;

// Heavily lifted from net.runelite.client.plugins.grounditems.GroundItemsOverlay
public class ClueGroundOverlay extends Overlay
{
	private static final int MAX_DISTANCE = 2500;
	// We must offset the text on the z-axis such that
	// it doesn't obscure the ground items below it.
	private static final int OFFSET_Z = 20;
	// Clue item height
	private static final int CLUE_ITEM_HEIGHT = 0;
	// The 15 pixel gap between each drawn ground item.
	private static final int STRING_GAP = 15;

	private final Client client;
	private final ClueDetailsConfig config;
	private final StringBuilder itemStringBuilder = new StringBuilder();
	private final TextComponent textComponent = new TextComponent();
	private final Map<WorldPoint, Integer> offsetMap = new HashMap<>();
	private final ConfigManager configManager;
	private final ClueDetailsPlugin plugin;
	private ClueGroundManager clueGroundManager;

	@Inject
	private ClueGroundOverlay(ClueDetailsPlugin plugin, Client client, ClueDetailsConfig config, ConfigManager configManager)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.plugin = plugin;
		this.client = client;
		this.config = config;
		this.configManager = configManager;
	}

	public void startUp(ClueGroundManager clueGroundManager)
	{
		this.clueGroundManager = clueGroundManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if(clueGroundManager == null) return null;

		if (!config.showGroundClues())
		{
			return null;
		}

		final FontMetrics fm = graphics.getFontMetrics();
		final Player player = client.getLocalPlayer();

		if (player == null)
		{
			return null;
		}

		offsetMap.clear();
		final LocalPoint localLocation = player.getLocalLocation();

		// Handle beginner and master clues
		if (clueGroundManager.getGroundClues().keySet().isEmpty()
			|| (!config.beginnerDetails() && !config.masterDetails()))
		{
			return null;
		}

		for (WorldPoint wp : clueGroundManager.getGroundClues().keySet())
		{
			// Check if wp in clueGroundManager is within range of the player
			final LocalPoint groundPoint = LocalPoint.fromWorld(client, wp);

			if (groundPoint == null || localLocation.distanceTo(groundPoint) > MAX_DISTANCE)
			{
				continue;
			}

			// Get list of ClueInstances at wp with optionally collapsed quantities
			Map<ClueInstance, Integer> clueInstancesAtWpMap = getClueInstancesAtWpMap(wp, client.getTickCount());

			if (clueInstancesAtWpMap == null)
			{
				continue;
			}

			for (Map.Entry<ClueInstance, Integer> entry : clueInstancesAtWpMap.entrySet())
			{
				ClueInstance item = entry.getKey();

				if(item.isEnabled(config))
				{
					int quantity = entry.getValue();
					renderClueInstanceGroundOverlay(graphics, item, quantity, groundPoint, fm);
				}
			}
		}

		return null;
	}

	private Map<ClueInstance, Integer> getClueInstancesAtWpMap(WorldPoint wp, int currentTick)
	{
		if (clueGroundManager.getGroundClues().get(wp).isEmpty()) return null;

		List<ClueInstance> groundItemList = clueGroundManager.getGroundClues().get(wp);
		Map<ClueInstance, Integer> groundItemMap = new HashMap<>();

		if (config.collapseGroundClues())
		{
			groundItemMap = keepOldestUniqueClues(groundItemList, currentTick);
		}
		else
		{
			for (ClueInstance item : groundItemList)
			{
				groundItemMap.put(item, 1);
			}
		}
		return groundItemMap;
	}

	private void renderClueInstanceGroundOverlay(Graphics2D graphics, ClueInstance item, int quantity, LocalPoint groundPoint, FontMetrics fm)
	{
		Color color = Color.WHITE;

		if (item.getClueIds().isEmpty())
		{
			itemStringBuilder.append(item.getItemName(plugin));
		}
		else
		{
			int clueId = item.getClueIds().get(0);
			Clues clueDetails = Clues.forClueIdFiltered(clueId);

			if (clueDetails == null)
			{
				return;
			}

			String clueText;
			if (config.changeGroundClueText())
			{
				if (item.getClueIds().size() > 1)
				{
					clueText = "Three-step (master)";
				}
				else
				{
					clueText = clueDetails.getDetail(configManager);
				}
			}
			else
			{
				clueText = WordUtils.capitalizeFully(clueDetails.getClueTier().toString());
			}

			itemStringBuilder.append(clueText);

			if (config.colorGroundClues())
			{
				color = clueDetails.getDetailColor(configManager);
			}
		}

		if (config.collapseGroundClues() && quantity > 1)
		{
			itemStringBuilder.append(" (")
				.append(QuantityFormatter.quantityToStackSize(quantity))
				.append(')');
		}

		final String itemString = itemStringBuilder.toString();
		itemStringBuilder.setLength(0);

		final Point textPoint = Perspective.getCanvasTextLocation(client,
			graphics,
			groundPoint,
			itemString,
			CLUE_ITEM_HEIGHT + OFFSET_Z);

		if (textPoint == null)
		{
			return;
		}

		final int offset = offsetMap.compute(item.getLocation(), (k, v) -> v != null ? v + 1 : 0);

		final int textX = textPoint.getX();
		final int textY = textPoint.getY() - (STRING_GAP * offset);

		if (config.showGroundCluesDespawn())
		{
			Integer despawnTime = item.getDespawnTick(client.getTickCount()) - client.getTickCount();
			Color timerColor = Color.WHITE;

			final String timerText = String.format(" - %d", despawnTime);

			// The timer text is drawn separately to have its own color, and is intentionally not included
			// in the getCanvasTextLocation() call because the timer text can change per frame and we do not
			// use a monospaced font, which causes the text location on screen to jump around slightly each frame.
			textComponent.setText(timerText);
			textComponent.setColor(timerColor);
			textComponent.setPosition(new java.awt.Point(textX + fm.stringWidth(itemString), textY));
			textComponent.render(graphics);
		}

		textComponent.setText(itemString);
		textComponent.setColor(color);
		textComponent.setPosition(new java.awt.Point(textX, textY));
		textComponent.render(graphics);
	}

	// Remove duplicate clues, maintaining a count of the original amount of each
	public static Map<ClueInstance, Integer> keepOldestUniqueClues(List<ClueInstance> items, int currentTick) {
		Map<List<Integer>, ClueInstance> lowestValueItems = new HashMap<>();
		Map<List<Integer>, Integer> uniqueCount = new HashMap<>();

		for (ClueInstance item : items) {
			if (!lowestValueItems.containsKey(item.getClueIds()) || item.getDespawnTick(currentTick) < lowestValueItems.get(item.getClueIds()).getDespawnTick(currentTick)) {
				lowestValueItems.put(item.getClueIds(), item);
				uniqueCount.put(item.getClueIds(), 1);
			} else {
				uniqueCount.put(item.getClueIds(), uniqueCount.get(item.getClueIds()) + 1);
			}
		}

		return lowestValueItems.values().stream()
			.collect(Collectors.toMap(item -> item, item -> uniqueCount.get(item.getClueIds())));
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;

public class ClueBankSaveDataManager
{
	private final ConfigManager configManager;

	private static final String CONFIG_GROUP = "clue-details";
	private static final String BANK_CLUES_KEY = "bank-clues";

	private final Gson gson;
	private final List<ClueInstanceData> clueInstanceData = new ArrayList<>();

	public ClueBankSaveDataManager(ConfigManager configManager, Gson gson)
	{
		this.configManager = configManager;
		this.gson = gson;
	}

	public void saveStateToConfig(Client client, Map<Integer, ClueInstance> bankClues)
	{
		// Serialize groundClues save to config
		updateData(client, bankClues);
		String bankCluesData = gson.toJson(clueInstanceData);
		configManager.setConfiguration(CONFIG_GROUP, BANK_CLUES_KEY, bankCluesData);
	}

	private void updateData(Client client, Map<Integer, ClueInstance> bankClues)
	{
		int currentTick = client.getTickCount();

		List<ClueInstanceData> newData = new ArrayList<>();
		for (Map.Entry<Integer, ClueInstance> entry : bankClues.entrySet())
		{
			ClueInstance data = entry.getValue();
			newData.add(new ClueInstanceData(data, currentTick));
		}
		clueInstanceData.clear();
		clueInstanceData.addAll(newData);
	}

	public Map<Integer, ClueInstance> loadStateFromConfig(Client client)
	{
		String groundCluesJson = configManager.getConfiguration(CONFIG_GROUP, BANK_CLUES_KEY);
		clueInstanceData.clear();

		Map<Integer, ClueInstance> bankClues = new HashMap<>();
		if (groundCluesJson != null)
		{
			try
			{
				Type groundCluesType = new TypeToken<List<ClueInstanceData>>()
				{
				}.getType();

				List<ClueInstanceData> loadedGroundCluesData = gson.fromJson(groundCluesJson, groundCluesType);

				// Convert ClueInstanceData back to ClueInstance
				for (ClueInstanceData clueData : loadedGroundCluesData)
				{
					clueInstanceData.add(clueData);

					Integer itemId = clueData.getItemId();
					ClueInstance clue = new ClueInstance(clueData);

					bankClues.put(itemId, clue);
				}
			} catch (Exception err)
			{
				bankClues.clear();
				saveStateToConfig(client, bankClues);
			}
		}

		return bankClues;
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://www.github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.MenuEntry;

@Data
@AllArgsConstructor
public class MenuEntryAndPos
{
	private MenuEntry menuEntry;
	private int posInMenu;
	private int posOnTile;
}

/*
 * Copyright (c) 2024, TheLope <https://github.com/TheLope>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cluedetails;

import java.util.List;
import javax.inject.Inject;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.TextComponent;

public class ClueDetailsTagsOverlay extends WidgetItemOverlay
{
	private final ClueDetailsPlugin clueDetailsPlugin;
	private final ClueDetailsConfig config;
	private final ConfigManager configManager;

	@Inject
	public ClueDetailsTagsOverlay(ClueDetailsPlugin clueDetailsPlugin, ClueDetailsConfig config, ConfigManager configManager)
	{
		this.clueDetailsPlugin = clueDetailsPlugin;
		this.config = config;
		this.configManager = configManager;
		showOnInventory();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		if (config.showInventoryClueTags())
		{
			Clues clue = Clues.forItemId(itemId);
			String clueDetail = null;
			Color clueDetailColor = Color.WHITE;

			if (clue != null
				&& !(itemId >= InterfaceID.CLUE_BEGINNER_MAP_CHAMPIONS_GUILD
					&& itemId <= InterfaceID.CLUE_BEGINNER_MAP_WIZARDS_TOWER))
			{
				clueDetail = clue.getDetail(configManager);
				clueDetailColor = clue.getDetailColor(configManager);
			}
			// If clue can't be found by Clue ID, check if it can be found by Clue text
			else
			{
				if (Clues.isTrackedClue(itemId, clueDetailsPlugin.isDeveloperMode())
					&& clueDetailsPlugin.getClueInventoryManager().hasTrackedClues())
				{
					// Check if clue tier is enabled
					if (((itemId == ItemID.CLUE_SCROLL_BEGINNER || (itemId >= InterfaceID.CLUE_BEGINNER_MAP_CHAMPIONS_GUILD
						&& itemId <= InterfaceID.CLUE_BEGINNER_MAP_WIZARDS_TOWER)) && !config.beginnerDetails())
						|| itemId == ItemID.CLUE_SCROLL_MASTER && !config.masterDetails())
					{
						return;
					}

					ClueInstance readClues = clueDetailsPlugin.getClueInventoryManager().getTrackedClueByClueItemId(itemId);
					if (readClues == null)
					{
						return;
					}
					List<Integer> ids = readClues.getClueIds();

					if (ids.isEmpty()) return;

					boolean isFirst = true;
					StringBuilder text = new StringBuilder();
					StringBuilder detail = new StringBuilder();
					for (Integer id : ids)
					{
						Clues clueDetails = Clues.forClueIdFiltered(id);
						if (!isFirst)
						{
							text.append("<br>");
							detail.append("<br>");
						}
						text.append(clueDetails == null ? "error" : clueDetails.getClueText());
						detail.append(clueDetails == null ? "error" : clueDetails.getDetail(configManager));
						clueDetailColor = clueDetails == null ? Color.WHITE : clueDetails.getDetailColor(configManager);
						isFirst = false;
					}

					// Handle three step cryptic clues
					final ThreeStepCrypticClue threeStepCrypticClue = ThreeStepCrypticClue.forText(text.toString());
					if (threeStepCrypticClue != null)
					{
						threeStepCrypticClue.update(clueDetailsPlugin.getClueInventoryManager().getTrackedCluesInInventory());
						clueDetail = threeStepCrypticClue.getDetail(configManager, config);
						clueDetailColor = Color.WHITE;
					}
					else
					{
						clueDetail = detail.toString();
					}
				}
			}
			renderText(graphics, widgetItem.getCanvasBounds(), clueDetail, clueDetailColor);
		}
	}

	public int textPosition(Graphics2D graphics, Rectangle bounds, int i, int detailCount)
	{
		// Middle of item
		if (detailCount == 3 && i == 1)
		{
			return (bounds.height + graphics.getFontMetrics().getHeight()) / 2;
		}

		// Bottom of item
		if ((config.clueTagLocation() == ClueDetailsConfig.ClueTagLocation.SPLIT && i == 1)
			|| (detailCount == 2 && i == 1)
			|| config.clueTagLocation() == ClueDetailsConfig.ClueTagLocation.BOTTOM && detailCount == 1
			|| i == 2)
		{
			return bounds.height;
		}

		// Top of item
		return graphics.getFontMetrics().getHeight();
	}

	// Render Clue Detail in the "Item Tag" style
	private void renderText(Graphics2D graphics, Rectangle bounds, String clueDetail, Color clueDetailColor)
	{
		if (clueDetail == null)
		{
			return;
		}

		graphics.setFont(FontManager.getRunescapeSmallFont());

		final TextComponent textComponent = new TextComponent();

		String[] clueDetails = new String [] {clueDetail};
		// Handle Three Step Cryptic Clues
		if (clueDetail.contains("<br>"))
		{
			clueDetails = clueDetail.split("<br>");
		}

		// Handle split
		if (config.clueTagLocation() == ClueDetailsConfig.ClueTagLocation.SPLIT
			&& !config.clueTagSplit().isEmpty()
			&& clueDetails.length == 1)
		{
			// Correct clueDetailColor for three step cryptic clue
			if (clueDetail.contains("<col="))
			{
				clueDetailColor = Color.decode("#" + getStringBetween(clueDetail, "<col=", ">"));
			}

			clueDetails = clueDetails[0].split(config.clueTagSplit(), 3);
		}

		if (config.colorInventoryClueTags())
		{
			textComponent.setColor(clueDetailColor);
		}

		// Render tag in configured location
		int i = 0;
		int detailCount = clueDetails.length;
		for (String detail : clueDetails)
		{
			textComponent.setPosition(new Point(
				bounds.x - 1,
				bounds.y - 1 + textPosition(graphics, bounds, i, detailCount)
			));
			textComponent.setText(detail);
			textComponent.render(graphics);
			i++;
		}
	}

	public static String getStringBetween(String input, String start, String end)
	{
		int startIndex = input.indexOf(start);
		if (startIndex == -1)
		{
			return null; // Start string not found
		}

		startIndex += start.length(); // Move past the start string

		int endIndex = input.indexOf(end, startIndex);
		if (endIndex == -1)
		{
			return null; // End string not found
		}

		return input.substring(startIndex, endIndex);
	}
}

package com.cluedetails;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClueDetailsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClueDetailsPlugin.class);
		RuneLite.main(args);
	}
}
