package com.quest.voiceover;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class QuestVoiceoverPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(QuestVoiceoverPlugin.class);
		RuneLite.main(args);
	}
}
package com.quest.voiceover;

import net.runelite.client.config.*;

@ConfigGroup("quest.voiceover")
public interface QuestVoiceoverConfig extends Config
{
	@ConfigSection(
			name = "General",
			description = "General settings",
			position = 20,
			closedByDefault = false
	)
	String generalSettings = "generalSettings";



	@Range(min = 1, max = 100)
	@ConfigItem(
			keyName = "volume",
			name = "Volume",
			description = "Volume control for the voiceover sounds.",
			position = 21,
			section = generalSettings)
	default int volume() {
		return 75;
	}


	@ConfigItem(
			keyName = "mute",
			name = "Mute",
			description = "Mutes the voiceover sound.",
			section = generalSettings,
			position = 22

	)
	default boolean mute()
	{
		return false;
	}
}

package com.quest.voiceover;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.SpriteID;
import net.runelite.api.widgets.*;
import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;

public class DialogEngine {
    @Inject
    private Client client;

    @Inject
    private QuestVoiceoverConfig config;

    @Inject
    private ConfigManager configManager;

    @Inject
    private SoundEngine soundEngine;

    private static final String TOGGLE_MUTE = "Toggle mute ";
    private static final String PLUGIN_GROUP = "quest.voiceover";

    public boolean isDialogOpen()
    {
        return client.getWidget(InterfaceID.DIALOG_NPC, 0) != null ||
                client.getWidget(InterfaceID.DIALOG_PLAYER, 0) != null ||
                client.getWidget(InterfaceID.DIALOG_OPTION, 0) != null;
    }

    public boolean isPlayerOrNpcDialogOpen()
    {
        return client.getWidget(InterfaceID.DIALOG_NPC, 0) != null ||
                client.getWidget(InterfaceID.DIALOG_PLAYER, 0) != null;
    }

    public void addQuestNameText(Widget widget, String questName) {
        Widget questNameText = widget.createChild(-1, WidgetType.TEXT);

        questNameText.setText("Quest: " + questName);
        questNameText.setFontId(494);
        questNameText.setTextColor(0xFFFFFF);
        questNameText.setTextShadowed(true);
        questNameText.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
        questNameText.setOriginalX(10);
        questNameText.setOriginalY(5);
        questNameText.setOriginalHeight(20);
        questNameText.setOriginalWidth(200);
        questNameText.revalidate();
    }

    public void addMuteButton(Widget widget) {
        Widget muteButton = widget.createChild(-1, WidgetType.GRAPHIC);
        int musicSprite = config.mute() ? SpriteID.OPTIONS_MUSIC_DISABLED : SpriteID.OPTIONS_MUSIC_VOLUME;

        muteButton.setSpriteId(musicSprite);
        muteButton.setOriginalWidth(32);
        muteButton.setOriginalHeight(32);
        muteButton.setXPositionMode(WidgetPositionMode.ABSOLUTE_RIGHT);
        muteButton.setOriginalX(5);
        muteButton.setOriginalY(5);
        muteButton.setHasListener(true);
        muteButton.setAction(1, TOGGLE_MUTE);
        muteButton.setOnOpListener((JavaScriptCallback) e -> this.toggleMute(muteButton));
        muteButton.revalidate();
    }

    public Widget getPlayerOrNpcWidget() {
        if(!isPlayerOrNpcDialogOpen()){
            return null;
        }
        Widget playerWidget = client.getWidget(InterfaceID.DIALOG_PLAYER, 0);
        Widget npcWidget = client.getWidget(InterfaceID.DIALOG_NPC, 0);
        return playerWidget != null ? playerWidget : npcWidget;
    }

    private void toggleMute(Widget muteButton)
    {
        configManager.setConfiguration(PLUGIN_GROUP, "mute", !config.mute());
        soundEngine.setVolume(config.mute() ? 0 : config.volume());
        int musicSprite = config.mute() ? SpriteID.OPTIONS_MUSIC_DISABLED : SpriteID.OPTIONS_MUSIC_VOLUME;
        muteButton.setSpriteId(musicSprite);
        muteButton.revalidate();
    }

}

package com.quest.voiceover;

import javax.inject.Inject;

public class MessageUtils {

    private static final String PLAYER = "Player";

    @Inject
    private HashUtil hashUtil;

    String name;
    String text;
    String id;

    public MessageUtils(String message, String playerName) {
        String[] messageArray = message.split("\\|", 2);
        this.name = messageArray[0].equals(playerName) ? PLAYER : messageArray[0];
        this.text = messageArray[1].trim();
        this.id = HashUtil.convertToMD5(this.name + "|" + this.text);
    }
}

package com.quest.voiceover;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.PluginDescriptor;

import com.quest.voiceover.database.*;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.eventbus.EventBus;
import okhttp3.OkHttpClient;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(
	name = "Quest Voiceover"
)
public class QuestVoiceoverPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private DatabaseManager databaseManager;

	@Inject
	private EventBus eventBus;

	@Inject
	private SoundEngine soundEngine;

	@Inject
	private DialogEngine dialogEngine;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private ScheduledExecutorService executor;

	private String playerName = null;
	private Boolean isQuestDialog = false;
	private String questName = null;

	@Override
	protected void startUp() throws Exception
	{
		eventBus.register(soundEngine);
		log.info("Quest Voiceover plugin started!");

		executor.submit(() -> {
			DatabaseVersionManager.prepareDatabaseSource(okHttpClient);
			this.databaseManager.initializeConnection();
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		eventBus.unregister(soundEngine);
		log.info("Quest Voiceover plugin stopped!");

		databaseManager.closeConnection();
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		if (chatMessage.getType().equals(ChatMessageType.DIALOG)) {
			if (this.playerName == null) {
				this.playerName = this.client.getLocalPlayer().getName();
			}

			MessageUtils message = new MessageUtils(chatMessage.getMessage(), this.playerName);

			try (PreparedStatement statement = databaseManager.prepareStatement("SELECT quest, uri FROM dialogs WHERE character = ? AND text MATCH ?")) {
				statement.setString(1, message.name.replace("'", "''"));
				statement.setString(2, message.text.replace("'", "''"));

				try (ResultSet resultSet = statement.executeQuery()) {
					if (resultSet.next()) {
						String fileName = resultSet.getString("uri");
						String questName = resultSet.getString("quest");

						this.questName = questName;

						if (fileName != null || questName != null) {
							isQuestDialog = true;
							soundEngine.play(fileName);
							return;
						}
					}
				}
				isQuestDialog = false;
			} catch (SQLException e) {
				log.error("Encountered an SQL error", e);
			}
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (event.getMenuOption().equals("Continue"))
		{
			soundEngine.stop();
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded)
	{
		// Check if the loaded widget is the dialog widget
		if (widgetLoaded.getGroupId() == InterfaceID.DIALOG_NPC || widgetLoaded.getGroupId() == InterfaceID.DIALOG_PLAYER || widgetLoaded.getGroupId() == InterfaceID.DIALOG_OPTION)
		{
			if(dialogEngine.isPlayerOrNpcDialogOpen() && isQuestDialog) {
				Widget dialogWidget = dialogEngine.getPlayerOrNpcWidget();
				dialogEngine.addMuteButton(dialogWidget);
				if(questName != null) {
					dialogEngine.addQuestNameText(dialogWidget, this.questName);
				}
			}
		}
	}

	@Subscribe
	public void onWidgetClosed(WidgetClosed widgetClosed)
	{
		if (widgetClosed.getGroupId() == InterfaceID.DIALOG_NPC ||
				widgetClosed.getGroupId() == InterfaceID.DIALOG_PLAYER ||
				widgetClosed.getGroupId() == InterfaceID.DIALOG_OPTION)
		{
			soundEngine.stop();
		}
	}

	@Provides
	QuestVoiceoverConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(QuestVoiceoverConfig.class);
	}
}

package com.quest.voiceover;

import jaco.mp3.player.MP3Player;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;

import okhttp3.HttpUrl;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.net.URL;
import java.time.Instant;
import java.time.Duration;

@Slf4j
@Singleton
public class SoundEngine {

    @Inject
    private QuestVoiceoverConfig config;

    @Inject
    private Client client;

    private volatile MP3Player player;
    private volatile boolean soundPlaying = false;
    private int playbackStartTime = 0;
    private static final int PLAYBACK_GRACE_PERIOD = 1; // Adjust as needed
    public static final HttpUrl RAW_GITHUB_SOUND_BRANCH_URL = HttpUrl.parse("https://github.com/KevinEdry/runelite-quest-voiceover/raw/sounds");

    public void play(String fileName) {
        stopPlayback();
        MP3Player player = getPlayer();

        assert RAW_GITHUB_SOUND_BRANCH_URL != null;
        HttpUrl httpUrl = RAW_GITHUB_SOUND_BRANCH_URL.newBuilder().addPathSegment(fileName).build();
        URL soundUrl = httpUrl.url();

        player.setVolume(config.mute() ? 0 : config.volume());
        player.addToPlayList(soundUrl);

        player.play();
        soundPlaying = true;
        playbackStartTime = client.getTickCount();
    }

    public void stop() {
        if (client.getTickCount() > playbackStartTime + PLAYBACK_GRACE_PERIOD ) {
            stopPlayback();
        }
    }

    private void stopPlayback() {
        if( player != null && !player.getPlayList().isEmpty() && player.isPlaying() ) {
            soundPlaying = false;
            player.getPlayList().clear();
            player.stop();
        }
    }

    public void setVolume(int volume) {
        getPlayer().setVolume(volume);
    }

    public boolean isSoundPlaying() {
        return player != null && player.isPlaying();
    }

    private MP3Player getPlayer() {
        MP3Player player = this.player;
        if (player == null) {
            synchronized (this) {
                player = this.player;
                if (player == null) {
                    player = this.player = new MP3Player();
                }
            }
        }
        return player;
    }

    @Subscribe
    private void onGameTick(GameTick event)
    {
        if(this.player != null && this.player.isStopped() && soundPlaying) {
            // Detects when a sound have stopped playing.
            soundPlaying = false;
        }
    }
}
package com.quest.voiceover.database;

import lombok.extern.slf4j.Slf4j;
import javax.inject.Singleton;

import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.DriverManager;

@Slf4j
@Singleton
public class DatabaseManager {

    private static final String SQL_PATH_PREFIX = "jdbc:sqlite:";
    private Connection connection;

    public PreparedStatement prepareStatement(String query) throws SQLException {
        return getDatabaseConnection().prepareStatement(query);
    }

    public void closeConnection() throws SQLException {
        connection.close();
    }

    public void initializeConnection(){
        getDatabaseConnection();
    }

    private Connection getDatabaseConnection() {
        if (connection == null) {
            try {
                Class.forName("org.sqlite.JDBC");
                String databaseSourceUrl = DatabaseVersionManager.getDatabasePath();
                connection = DriverManager.getConnection(SQL_PATH_PREFIX + databaseSourceUrl);
                log.info("Quest Voiceover plugin established connection to database.");
            } catch (FileNotFoundException e) {
                log.error("Could not get database source path.", e);
            } catch (SQLException e) {
                log.error("Could not connect to database.", e);
            } catch (ClassNotFoundException e) {
                log.error("Could not load database driver.", e);
                throw new RuntimeException(e);
            }
        }
        return connection;
    }
}

package com.quest.voiceover.database;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;

@Slf4j
public class DatabaseVersionManager {

    private static final String resourceName = "quest_voiceover.db";

    private static final HttpUrl RAW_GITHUB_DATABASE_BRANCH_URL = HttpUrl.parse("https://github.com/KevinEdry/runelite-quest-voiceover/raw/database");
    private static final Path DOWNLOAD_DIR = Path.of(RuneLite.RUNELITE_DIR.getPath(), "quest-voiceover");

    private static final String VERSION_FILENAME = ".version";

    private static final Path VERSION_FILE = DOWNLOAD_DIR.resolve(VERSION_FILENAME);

    public static Path getResourcePath() {
        return DOWNLOAD_DIR.resolve(resourceName);
    }

    private static HttpUrl getResourceDownloadUrl() {
        assert RAW_GITHUB_DATABASE_BRANCH_URL != null;
        return RAW_GITHUB_DATABASE_BRANCH_URL.newBuilder().addPathSegment(resourceName).build();
    }

    private static void setResourceVersion(String version) {
        try {
            Files.createDirectories(VERSION_FILE.getParent());

            Files.writeString(VERSION_FILE, version,
                    StandardOpenOption.CREATE,
                    StandardOpenOption.WRITE,
                    StandardOpenOption.TRUNCATE_EXISTING);

        } catch (IOException e) {
            log.error("Failed to save database version.", e);
        }
    }

    public static void prepareDatabaseSource(OkHttpClient okHttpClient) {
        ensureDownloadDirectoryExists();
        downloadOrUpdateDatabase(okHttpClient);
    }

    private static String getDatabaseVersion() {
        try {
            if (Files.exists(VERSION_FILE)) {
                return Files.readString(VERSION_FILE).trim();
            }
        } catch (IOException e) {
            log.error("Failed to load database version.", e);
        }
        return "";
    }

    private static void updateDatabaseSource(InputStream data, String version) throws IOException {
        Path databasePath = getResourcePath();
        Files.copy(data, databasePath, StandardCopyOption.REPLACE_EXISTING);
        setResourceVersion(version);
    }

    public static String getDatabasePath() throws FileNotFoundException {
        Path databasePath = getResourcePath();
        if (!Files.exists(databasePath)) {
            throw new FileNotFoundException("Database file not found: " + databasePath);
        }
        return databasePath.toString();
    }

    private static void ensureDownloadDirectoryExists() {
        try {
            Files.createDirectories(getResourcePath().getParent());
        } catch (IOException e) {
            log.error("Could not create download directory", e);
        }
    }

    /**
     * We perform a HEAD request with the `If-None-Match` header to check if the etag has changed and the version with it.
     * If not, we get a `304 - Not Modified` response from the remote resource
     * If it did, we perform a GET request to get the actual data and persistently save the etag and the database on the local machine.
     */
    private static void downloadOrUpdateDatabase(OkHttpClient okHttpClient) {
        try {
            String resourceVersion = getDatabaseVersion();
            Request headRequest = new Request.Builder()
                    .url(getResourceDownloadUrl())
                    .header("If-None-Match", resourceVersion)
                    .head()
                    .build();

            try (Response headResponse = okHttpClient.newCall(headRequest).execute()) {
                if (headResponse.code() == 304) {
                    return;
                }

                String remoteEtag = headResponse.header("ETag");
                if (remoteEtag == null) {
                    log.warn("No ETag header is present in the remote response. {}", headResponse);
                    return;
                }

                if (!Files.exists(getResourcePath()) || !remoteEtag.equals(resourceVersion)) {
                    log.info("New database version found in remote: {}", remoteEtag);

                    // Perform GET request to download the file
                    Request getRequest = new Request.Builder().url(getResourceDownloadUrl()).build();
                    try (Response getResponse = okHttpClient.newCall(getRequest).execute()) {
                        if (!getResponse.isSuccessful()) {
                            log.error("Failed to download database: {}", getResponse.message());
                            return;
                        }

                        assert getResponse.body() != null;
                        try (InputStream in = getResponse.body().byteStream()) {
                            updateDatabaseSource(in, remoteEtag);
                        }

                        log.info("Database updated successfully!");
                    }
                }
            }
        } catch (IOException e) {
            log.error("Quest Voiceover plugin could not download or update database: {}", resourceName, e);
        } catch (NullPointerException e) {
            log.error("Null pointer exception occurred while downloading or updating database", e);
        }
    }
}
package com.quest.voiceover;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class HashUtil {
    public static String convertToMD5(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(input.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : messageDigest) {
                hexString.append(String.format("%02x", b));
            }
             return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public static String convertToSHA(String message) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(message.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder(2 * hash.length);
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}

