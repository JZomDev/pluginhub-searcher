package com.rogues;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RoguesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RoguesPlugin.class);
		RuneLite.main(args);
	}
}
package com.rogues;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("rogues-chest")
public interface RoguesConfig extends Config
{
	@ConfigItem(
		keyName = "playSound",
		name = "Play Respawn Sounds",
		description = "Whether to play respawn/warning sounds"
	)
	default boolean playSound()
	{
		return true;
	}

	@ConfigItem(
		keyName = "shouldNotify",
		name = "Respawn notification",
		description = "Whether to notify chest respawns"
	)
	default boolean shouldNotify()
	{
		return true;
	}

	@ConfigItem(
		keyName = "soundId",
		name = "Respawn Sound",
		description = "The sound id to play when a chest respawns"
	)
	default int soundId()
	{
		return 3813;
	}

	@ConfigItem(
		keyName = "warnsoundId",
		name = "Warning Respawn Sound",
		description = "The sound id to play just before a chest respawns"
	)
	default int warnSoundId()
	{
		return 3813;
	}

	@Range(
		max = 15
	)
	@ConfigItem(
		keyName = "warnTime",
		name = "Warning Time",
		description = "Number of ticks before chest respawns to play warning sound, 0 to disable"
	)
	default int warnTime()
	{
		return 1;
	}
}

package com.rogues;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.util.Map;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Scene;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class RoguesOverlay extends Overlay
{
	private final RoguesPlugin plugin;
	private final Client client;
	private final RoguesConfig config;

	@Inject
	private RoguesOverlay(
		Client client,
		RoguesPlugin plugin,
		RoguesConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		for (Map.Entry<WorldPoint, Integer> entry : plugin.respawnMap.entrySet())
		{
			WorldPoint worldPoint = entry.getKey();
			Integer respawnTick = entry.getValue();

			int ticks = 1 + respawnTick - client.getTickCount();

			Color color = ticks <= 0 ? ColorScheme.PROGRESS_COMPLETE_COLOR : ColorScheme.PROGRESS_ERROR_COLOR;
			LocalPoint lp = LocalPoint.fromWorld(client.getTopLevelWorldView(), worldPoint);
			if (lp == null)
			{
				continue;
			}

			Polygon poly = Perspective.getCanvasTilePoly(client, lp);
			if (poly == null)
			{
				continue;
			}
			OverlayUtil.renderPolygon(graphics, poly, color);

			String label = Integer.toString(ticks);
			Point canvasTextLocation = Perspective.getCanvasTextLocation(client, graphics, lp, label, 0);
			if (canvasTextLocation == null || ticks < 0)
			{
				continue;
			}
			OverlayUtil.renderTextLocation(graphics, canvasTextLocation, label, color);
		}
		return null;
	}
}

package com.rogues;

import com.google.inject.Provides;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ObjectID;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Rogues Chest"
)
public class RoguesPlugin extends Plugin
{
	public static final int LOOTABLE_ID = ObjectID.CHEST_26757;
	public static final int RESPAWN_TIME = 34;
	private static final int LOOT_ANIM = 536;
	private static final WorldArea chestArea = new WorldArea(3280, 3938, 18, 9, 0);

	public Map<WorldPoint, Integer> respawnMap = null;

	@Inject
	private Client client;

	@Inject
	private RoguesConfig config;

	@Inject
	private Notifier notifier;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private RoguesOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		respawnMap = new HashMap<>();
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		respawnMap.clear();
		respawnMap = null;
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (!client.getLocalPlayer().getWorldLocation().isInArea(chestArea))
		{
			return;
		}
		int curTick = client.getTickCount();
		for (Map.Entry<WorldPoint, Integer> entry : respawnMap.entrySet())
		{
			int respawnTick = entry.getValue();
			if (curTick == respawnTick)
			{
				if (config.shouldNotify())
				{
					notifier.notify("Chest respawned");
				}
				if (config.playSound())
				{
					client.playSoundEffect(config.soundId());
				}
			}
			else if (curTick + config.warnTime() == respawnTick && config.playSound())
			{
				client.playSoundEffect(config.warnSoundId());
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOADING && respawnMap != null)
		{
			respawnMap.clear();
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event)
	{
		if (event.getGameObject().getId() == LOOTABLE_ID)
		{
			respawnMap.put(event.getGameObject().getWorldLocation(), client.getTickCount() + RESPAWN_TIME);
		}
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		Actor actor = event.getActor();
		if (actor.getAnimation() != LOOT_ANIM)
		{
			return;
		}
		WorldPoint chestLoc = null;

		for (Map.Entry<WorldPoint, Integer> entry : respawnMap.entrySet())
		{
			WorldPoint worldPoint = entry.getKey();

			if (actor.getWorldLocation().distanceTo2D(worldPoint) <= 1)
			{
				chestLoc = worldPoint;
				break;
			}
		}

		if (chestLoc != null)
		{
			respawnMap.put(chestLoc, client.getTickCount() + RESPAWN_TIME);
		}
	}

	@Provides
	RoguesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RoguesConfig.class);
	}
}

