package com.TickTracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TickTrackerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TickTrackerPlugin.class);
		RuneLite.main(args);
	}
}

package com.TickTracker;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import static java.util.Arrays.asList;

public class TickTrackerOverlay extends OverlayPanel
{

	private final Client client;
	private final TickTrackerPlugin plugin;
	private final TickTrackerPluginConfiguration config;

	@Inject
	private TickTrackerOverlay(Client client, TickTrackerPlugin plugin, TickTrackerPluginConfiguration config)
	{
		super(plugin);
		setPosition(OverlayPosition.TOP_LEFT);
		this.plugin = plugin;
		this.client = client;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.drawLargeOverlay())
		{
			drawExtraInformation(graphics);
		}
		return super.render(graphics);
	}


	private LineComponent tickOverThresholdLineComponent(int tickOverThreshold, String configThreshold)
	{
		return LineComponent.builder()
			.right(String.format("%d (%.2f %%)", tickOverThreshold, (tickOverThreshold * 100.0) / plugin.getAllTickCounter()))
			.left("+/- >" + configThreshold)
			.build();
	}

	private void drawExtraInformation(Graphics2D graphics)
	{
		panelComponent.getChildren().addAll(asList(TitleComponent.builder().text("Ticks").build(),
			tickOverThresholdLineComponent(plugin.getTickOverThresholdHigh(), String.valueOf(config.getThresholdHigh())),
			tickOverThresholdLineComponent(plugin.getTickOverThresholdMedium(), String.valueOf(config.getThresholdMedium())),
			tickOverThresholdLineComponent(plugin.getTickOverThresholdLow(), String.valueOf(config.getThresholdLow())),
			LineComponent.builder()
				.right(String.format("%d (%.2f %%)", plugin.getTickWithinRange(), plugin.getTickWithinRangePercent()))
				.left("Good")
				.build(),
			LineComponent.builder().right(String.valueOf(plugin.getAllTickCounter())).left("Total").build(),
			LineComponent.builder().right(String.valueOf(plugin.getTickDiffNS() / plugin.getNANOS_PER_MILLIS())).left("Last Tick ms").build(),
			LineComponent.builder().right(String.valueOf(plugin.getRunningTickAverageNS() / plugin.getNANOS_PER_MILLIS())).left("Tick Average ms").build()));
		panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth("average tick ms+extra fill600"), 0));
	}
}

package com.TickTracker.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum SmallOverlayStyle {
    NONE("Off"),
    PERCENTAGE("Percent Good"),
    LAST_DIFF("Last Tick ms"),
    BOTH("Both");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}

package com.TickTracker;

import com.TickTracker.config.SmallOverlayStyle;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;


public class TickTrackerSmallOverlay extends OverlayPanel
{
	private static final int X_OFFSET = 1;
	private static final String SEPARATOR_STRING = " / ";
	private static final String WAITING = "Waiting...";

	private final Client client;
	private final TickTrackerPlugin plugin;
	private final TickTrackerPluginConfiguration config;

	@Inject
	private TickTrackerSmallOverlay overlay;

	@Inject
	private TickTrackerSmallOverlay(Client client, TickTrackerPlugin plugin, TickTrackerPluginConfiguration config)
	{
		super(plugin);
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setPriority(OverlayPriority.HIGH);
		this.plugin = plugin;
		this.client = client;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.drawSmallOverlay() != SmallOverlayStyle.NONE)
		{
			drawSmallOverlay(graphics);
		}
		return null;
	}

	private void drawSmallOverlay(Graphics2D graphics)
	{
		// taken from the fps plugin
		Widget logoutButton = client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_LOGOUT_BUTTON);
		int xOffset = X_OFFSET;
		if (logoutButton != null && !logoutButton.isHidden())
		{
			xOffset += logoutButton.getWidth();
		}

		final int clientWidth = (int) client.getRealDimensions().getWidth();
		final int textHeight = graphics.getFontMetrics().getAscent() - graphics.getFontMetrics().getDescent();

		// Draw waiting indicator if inside disregard period, then exit method
		if (plugin.getDisregardCounter() < config.disregardTickCounter())
		{
			drawSmallOverlaySubsection(graphics, WAITING, clientWidth, xOffset, textHeight, true);
			return;
		}

		// As we draw sections, modify xOffset based on the width of the text we've drawn so far

		// Draw tick length (600ms) part, if configured to, with correct coloring
		if (config.drawSmallOverlay() == SmallOverlayStyle.LAST_DIFF || config.drawSmallOverlay() == SmallOverlayStyle.BOTH)
		{
			xOffset += drawSmallOverlaySubsection(graphics,
					String.format("%dms", plugin.getTickDiffNS() / plugin.getNANOS_PER_MILLIS()),
					clientWidth, xOffset, textHeight,
					config.smallOverlayColorStyle() == SmallOverlayStyle.PERCENTAGE);
		}

		// Draw separator part if required, with correct coloring
		if (config.drawSmallOverlay() == SmallOverlayStyle.BOTH)
		{
			xOffset += drawSmallOverlaySubsection(graphics, SEPARATOR_STRING, clientWidth, xOffset, textHeight,
					config.smallOverlayColorStyle() != SmallOverlayStyle.BOTH);
		}

		// Draw percentage part, if configured to, with correct coloring
		if (config.drawSmallOverlay() == SmallOverlayStyle.PERCENTAGE || config.drawSmallOverlay() == SmallOverlayStyle.BOTH)
		{
			xOffset += drawSmallOverlaySubsection(graphics,
					String.format("%.2f%%", plugin.getTickWithinRangePercent()),
					clientWidth, xOffset, textHeight,
					config.smallOverlayColorStyle() == SmallOverlayStyle.LAST_DIFF);
		}
	}

	private int drawSmallOverlaySubsection(Graphics2D graphics, String toDraw, int clientWidth, int xOffset, int textHeight, boolean offForSection)
	{
		final int textWidth = graphics.getFontMetrics().stringWidth(toDraw);
		final Point point = new Point(clientWidth - textWidth - xOffset, textHeight + config.Y_Offset());
		OverlayUtil.renderTextLocation(graphics, point, toDraw, colorSelection(offForSection));
		return textWidth;
	}

	public Color colorSelection(boolean offForSection)
	{
		if (offForSection || config.smallOverlayColorStyle() == SmallOverlayStyle.NONE)
		{
			return Color.YELLOW;
		}

		if (plugin.getTickWithinRangePercent() >= config.warningColorThresholdUpper())
		{
			return Color.GREEN;
		}
		else if (plugin.getTickWithinRangePercent() >= config.warningColorThresholdLower())
		{
			return Color.YELLOW;
		}
		else
		{
			return Color.RED;
		}
	}
}


package com.TickTracker;

import com.TickTracker.config.SmallOverlayStyle;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup(TickTrackerPluginConfiguration.GROUP)
public interface TickTrackerPluginConfiguration extends Config
{
	String GROUP = "TickTracker";


	@ConfigItem(
		keyName = "Y_Offset",
		name = "Height selector",
		description = "Modify height of small overlay",
		position = 1
	)
	default int Y_Offset()
	{
		return 1;
	}

	@ConfigItem(
		keyName = "drawLargeOverlay",
		name = "Show extra information",
		description = "Show set thresholds and each category's quantity of ticks and percentage of total ticks",
		position = 2
	)
	default boolean drawLargeOverlay()
	{
		return false;
	}

	@ConfigItem(
		keyName = "varianceHigh",
		name = "Variance High",
		description = "Variance for high tick latency +/-",
		position = 3
	)
	default int getThresholdHigh()
	{
		return 150;
	}

	@ConfigItem(
		keyName = "varianceMedium",
		name = "Variance Medium",
		description = "Variance for medium tick latency +/-",
		position = 4
	)
	default int getThresholdMedium()
	{
		return 100;
	}

	@ConfigItem(
		keyName = "varianceLow",
		name = "Variance Low",
		description = "Variance for low tick latency +/-",
		position = 5
	)
	default int getThresholdLow()
	{
		return 50;
	}



	@ConfigItem(
		keyName = "drawSmallOverlay",
		name = "Small overlay",
		description = "Whether to draw a small overlay",
		position = 6
	)
	default SmallOverlayStyle drawSmallOverlay()
	{
		return SmallOverlayStyle.PERCENTAGE;
	}

	@ConfigItem(
			keyName = "colorSmallOverlay",
			name = "Color options",
			description = "Off for yellow, other options use the text color thresholds",
			position = 7
	)
	default SmallOverlayStyle smallOverlayColorStyle()
	{
		return SmallOverlayStyle.BOTH;
	}

	@Range(
			max = 100
	)
	@ConfigItem(
		keyName = "warningText",
		name = "High threshold (%)",
		description = "Decides the color of the overlay. Above high threshold = Green, between high threshold and low = Yellow, below low threshold = Red",
		position = 8
	)
	default int warningColorThresholdUpper()
	{
		return 90;
	}

	@Range(
			max = 100
	)
	@ConfigItem(
		keyName = "warningTextLower",
		name = "Low threshold (%)",
		description = "Decides the color of the overlay. Above high threshold = Green, between high threshold and low = Yellow, below low threshold = Red",
		position = 9
	)
	default int warningColorThresholdLower()
	{
		return 88;
	}

	@ConfigItem(
		keyName = "warnLargeTickDiff",
		name = "Warn in chat about lag (ms)",
		description = "Prints a warning in the chatbox if a tick is too long or short",
		position = 10
	)
	default boolean warnLargeTickDiff()
	{
		return false;
	}

	@ConfigItem(
			keyName = "warnLargeTickDiffValue",
			name = "Warn of lag +/-: (ms)",
			description = "Warn in chat about server ticks being too fast or too slow (ms)",
			position = 11
	)
	default int warnLargeTickDiffValue() { return 150; }

	@ConfigItem(
		keyName = "disregardTickCounter",
		name = "Disregard ticks on login",
		description = "Ticks on login are very inconsistent. Having this too low can lead to inaccurate measurements.",
		position = 12
	)
	default int disregardTickCounter()
	{
		return 15;
	}


}


package com.TickTracker;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

import static net.runelite.api.GameState.*;


@PluginDescriptor(
	name = "Tick Tracker",
	description = "Display tick timing variance in an overlay",
	tags = {"tick", "timers", "skill", "pvm", "lag"},
	enabledByDefault = false
)

@Getter @Setter
public class TickTrackerPlugin extends Plugin
{
	private void sendChatMessage(String chatMessage)
	{
		final String message = new ChatMessageBuilder().append(ChatColorType.HIGHLIGHT).append(chatMessage).build();
		chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.CONSOLE).runeLiteFormattedMessage(message).build());
	}

	@Inject
	private Client client;

	@Inject
	private TickTrackerPluginConfiguration config;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TickTrackerOverlay overlay;

	@Inject
	private TickTrackerSmallOverlay SmallOverlay;

	private final long NANOS_PER_MILLIS = 1000000L;
	private final long  IDEAL_TICK_LENGTH_NS = 600L * NANOS_PER_MILLIS;
	private long lastTickTimeNS = 0L;
	private long tickDiffNS = 0;
	private long tickTimePassedNS = 0;
	private int tickOverThresholdLow = 0;
	private int tickOverThresholdMedium = 0;
	private int tickOverThresholdHigh = 0;
	private int tickWithinRange = 0;
	private int allTickCounter = 0;
	private long runningTickAverageNS = 0;
	private int disregardCounter = 0;
	private double tickWithinRangePercent = 100;
	private boolean isGameStateLoading = false;

	@Provides
	TickTrackerPluginConfiguration provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TickTrackerPluginConfiguration.class);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		overlayManager.remove(SmallOverlay);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		overlayManager.add(SmallOverlay);
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		long tickTimeNS = System.nanoTime();
		tickDiffNS = tickTimeNS - lastTickTimeNS;
		lastTickTimeNS = tickTimeNS;

		//If the gameState is LOADING, then the server tick can be long for a valid reason
		if (isGameStateLoading || disregardCounter < config.disregardTickCounter())
		{
			disregardCounter += 1; //ticks upon login or hopping are very inconsistent, thus the need for the disregard of the first ones
			return;
		}

		long tickVarianceFromIdealMS = Math.abs(IDEAL_TICK_LENGTH_NS - tickDiffNS) / NANOS_PER_MILLIS;

		if (tickVarianceFromIdealMS > config.warnLargeTickDiffValue())
		{
			if (config.warnLargeTickDiff() &&  allTickCounter > config.disregardTickCounter())
			{
				sendChatMessage("Tick was " + tickDiffNS / NANOS_PER_MILLIS + "ms long");
			}
		}

		if (tickVarianceFromIdealMS > config.getThresholdHigh())
		{
			tickOverThresholdHigh += 1;
		}
		else if (tickVarianceFromIdealMS > config.getThresholdMedium())
		{
			tickOverThresholdMedium += 1;
		}
		else if (tickVarianceFromIdealMS > config.getThresholdLow())
		{
			tickOverThresholdLow += 1;
		}
		else
		{
			tickWithinRange += 1;
		}

		allTickCounter += 1;
		tickTimePassedNS += tickDiffNS;
		runningTickAverageNS = tickTimePassedNS / allTickCounter;
		tickWithinRangePercent = (tickWithinRange * 100.0) / allTickCounter;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		isGameStateLoading = event.getGameState() == LOADING;
		if (event.getGameState() == HOPPING || event.getGameState() == LOGGING_IN)
		{
			resetStats(false);
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (TickTrackerPluginConfiguration.GROUP.equals(event.getGroup())) {
			String key = event.getKey();
			if ("varianceHigh".equals(key) || "varianceMedium".equals(key) || "varianceLow".equals(key)) {
				resetStats(true);
			}
		}
	}

	private void resetStats(boolean onlyVarianceRelevantStats) {
		tickOverThresholdHigh = 0;
		tickOverThresholdMedium = 0;
		tickOverThresholdLow = 0;
		tickWithinRange = 0;
		allTickCounter = 0;
		tickTimePassedNS = 0;
		tickWithinRangePercent = 100;

		if (onlyVarianceRelevantStats) {
			return;
		}

		lastTickTimeNS = 0;
		tickDiffNS = 0;
		runningTickAverageNS = 0;
		disregardCounter = 0;
	}
}

