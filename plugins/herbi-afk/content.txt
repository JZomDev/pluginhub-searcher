package com.herbiafk;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HerbiAfkTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HerbiAfkPlugin.class);
		RuneLite.main(args);
	}
}
package com.herbiafk;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("herbiafk")
public interface HerbiAfkConfig extends Config
{
	@ConfigItem(
		position = 1,
		keyName = "showPathLine",
		name = "Show path lines",
		description = "Show trail path lines on the world."
	)
	default boolean showPathLine()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 2,
		keyName = "lineColor",
		name = "Path line color",
		description = "Color of the trail path lines."
	)
	default Color getLineColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
		position = 3,
		keyName = "showMiniMapArrow",
		name = "Show arrow on the minimap",
		description = "Show an arrow on the minimap to the next search spot."
	)
	default boolean showMiniMapArrow()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 4,
		keyName = "arrowColor",
		name = "Minimap arrow color",
		description = "Color of the arrow on the minimap."
	)
	default Color getArrowColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
		position = 5,
		keyName = "showMiniMaplines",
		name = "Show path lines on the minimap",
		description = "Show the trail path lines on the minimap."
	)
	default boolean showMiniMaplines()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 6,
		keyName = "minimapPathColor",
		name = "Minimap path lines color",
		description = "Color of the trail path lines on the minimap."
	)
	default Color getMinimapPathColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
		position = 7,
		keyName = "highlightHerbiTile",
		name = "Highlight herbiboar tile",
		description = "Highlights herbiboar tile at the end of the trail."
	)
	default boolean highlightHerbiTile()
	{
		return false;
	}

	@ConfigItem(
		position = 8,
		keyName = "highlightHerbiHull",
		name = "Highlight herbiboar hull",
		description = "Highlights herbiboar hull at the end of the trail."
	)
	default boolean highlightHerbiHull()
	{
		return true;
	}

	@ConfigItem(
		position = 9,
		keyName = "highlightHerbiOutline",
		name = "Highlight herbiboar outline",
		description = "Highlights herbiboar outline at the end of the trail."
	)
	default boolean highlightHerbiOutline()
	{
		return false;
	}

	@Alpha
	@ConfigItem(
		position = 10,
		keyName = "herbiboarColor",
		name = "Herbiboar highlight",
		description = "Color of the herbiboar highlight."
	)
	default Color getHerbiboarColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
		position = 11,
		keyName = "pathRelativeToPlayer",
		name = "Path relative to player",
		description = "Make the trail path line relative to the player."
	)
	default boolean pathRelativeToPlayer()
	{
		return true;
	}

	@ConfigItem(
		position = 12,
		keyName = "dynamicMenuEntrySwap",
		name = "Dynamically swap trail menu entries",
		description = "Swap menu entries to only make the next correct object clickable."
	)
	default boolean dynamicMenuEntrySwap()
	{
		return true;
	}

	@ConfigItem(
		position = 13,
		keyName = "npcMenuEntrySwap",
		name = "Hide fossil island npcs menu entries",
		description = "Hide fungi, zygomite and crab interaction menus."
	)
	default boolean npcMenuEntrySwap()
	{
		return true;
	}

	@ConfigItem(
		position = 14,
		keyName = "noLootMode",
		name = "No loot mode",
		description = "Skip the step of looting herbi."
	)
	default boolean noLootMode()
	{
		return false;
	}
}

package com.herbiafk;

import com.google.common.collect.ImmutableList;
import net.runelite.api.coords.WorldPoint;

import java.util.List;

public class HerbiAfkData
{
	public static final List<WorldPoint> START_LOCATIONS = ImmutableList.of(
		new WorldPoint(3686, 3870, 0),
		new WorldPoint(3751, 3850, 0),
		new WorldPoint(3695, 3800, 0),
		new WorldPoint(3704, 3810, 0),
		new WorldPoint(3705, 3830, 0)
	);

	public static final List<WorldPoint> END_LOCATIONS = ImmutableList.of(
		new WorldPoint(3693, 3798, 0),
		new WorldPoint(3702, 3808, 0),
		new WorldPoint(3703, 3826, 0),
		new WorldPoint(3710, 3881, 0),
		new WorldPoint(3700, 3877, 0),
		new WorldPoint(3715, 3840, 0),
		new WorldPoint(3751, 3849, 0),
		new WorldPoint(3685, 3869, 0),
		new WorldPoint(3681, 3863, 0)
	);

	public static final String[] TRAIL_MENU_ENTRY_TARGETS = new String[]{
		"Tunnel", "Mushroom", "Smelly mushroom", "Muddy patch", "Seaweed", "Rock", "Driftwood"
	};

	public static final String[] NPC_MENU_ENTRY_TARGETS = new String[]{
		"Ancient Fungi", "Ancient Zygomite", "Ammonite Crab", "Tool Leprechaun"
	};
}

package com.herbiafk;

import com.google.inject.Provides;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.npcoverlay.HighlightedNpc;
import net.runelite.client.game.npcoverlay.NpcOverlayService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.herbiboars.HerbiboarPlugin;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Herbi AFK"
)
@PluginDependency(HerbiboarPlugin.class)
public class HerbiAfkPlugin extends Plugin
{
	@Inject
	@Getter
	private Client client;

	@Inject
	private HerbiAfkConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private HerbiAfkOverlay overlay;

	@Inject
	private HerbiAfkMinimapOverlay minimapOverlay;

	@Inject
	private HerbiboarPlugin herbiboarPlugin;

	@Inject
	private NpcOverlayService npcOverlayService;

	@Getter
	private List<WorldPoint> pathLinePoints = new ArrayList<>();

	@Getter
	private WorldPoint startLocation, endLocation;

	private enum HerbiState
	{
		IDLE,
		FINDING_START,
		HUNTING,
		STUNNED,
	}

	private static boolean varbitChanged = false;
	private HerbiState herbiState;

	private int finishedId = -1;

	private static final String HERBI_STUN = "You stun the creature";
	private static final String HERBI_KC = "Your herbiboar harvest count is:";
	private static final String HERBIBOAR_NAME = "Herbiboar";
	private static final String HERBI_CIRCLES = "The creature has successfully confused you with its tracks, leading you round in circles";

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlayManager.add(minimapOverlay);

		npcOverlayService.registerHighlighter(isHerbiboar);

		pathLinePoints = new ArrayList<>();

		herbiState = HerbiState.IDLE;
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		overlayManager.remove(minimapOverlay);

		npcOverlayService.unregisterHighlighter(isHerbiboar);

		resetTrailData();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch (event.getGameState())
		{
			case HOPPING:
			case LOGGING_IN:
				resetTrailData();
				herbiState = HerbiState.IDLE;
				break;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		varbitChanged = true;
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (!isInHerbiboarArea())
		{
			if (herbiState != HerbiState.IDLE)
			{
				resetTrailData();
				herbiState = HerbiState.IDLE;
			}
			return;
		}

		if (client.getLocalPlayer() == null)
		{
			return;
		}

		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();

		if (varbitChanged)
		{
			updateStartAndEndLocation();
			varbitChanged = false;
		}

		switch (herbiState)
		{
			case FINDING_START:
				startLocation = playerLocation;
				endLocation = Utils.getNearestStartLocation(playerLocation);
				break;

			case HUNTING:
				if (config.pathRelativeToPlayer())
				{
					startLocation = playerLocation;
				}

				break;

			case STUNNED:
				startLocation = config.pathRelativeToPlayer() ? playerLocation : HerbiAfkData.END_LOCATIONS.get(finishedId - 1);
				WorldPoint herbiLocation = getHerbiboarLocation();
				if (herbiLocation != null)
				{
					endLocation = herbiLocation;
				}
				npcOverlayService.rebuild();
				break;

			case IDLE:
				break;
		}

		if (startLocation != null && endLocation != null)
		{
			pathLinePoints = Utils.getPathLinePoints(startLocation, endLocation);
		}
	}

	private void updateStartAndEndLocation()
	{
		List<? extends Enum<?>> currentPath = herbiboarPlugin.getCurrentPath();
		int currentPathSize = currentPath.size();
		if (currentPathSize < 1)
		{
			return;
		}

		WorldPoint newStartLocation;
		WorldPoint newEndLocation;

		if (herbiboarPlugin.getFinishId() > 0)
		{
			newStartLocation = HerbiboarSearchSpot.valueOf(currentPath.get(currentPathSize - 1).toString()).getLocation();
			finishedId = herbiboarPlugin.getFinishId();
			newEndLocation = HerbiAfkData.END_LOCATIONS.get(finishedId - 1);
		}
		else if (currentPathSize == 1)
		{
			newStartLocation = herbiboarPlugin.getStartPoint();
			newEndLocation = HerbiboarSearchSpot.valueOf(currentPath.get(0).toString()).getLocation();
		}
		else
		{
			newStartLocation = HerbiboarSearchSpot.valueOf(currentPath.get(currentPathSize - 2).toString()).getLocation();
			newEndLocation = HerbiboarSearchSpot.valueOf(currentPath.get(currentPathSize - 1).toString()).getLocation();
		}

		startLocation = newStartLocation;
		endLocation = newEndLocation;

		herbiState = HerbiState.HUNTING;
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() == ChatMessageType.GAMEMESSAGE)
		{
			String message = Text.sanitize(Text.removeTags(event.getMessage()));
			if (message.contains(HERBI_STUN))
			{
				if (config.noLootMode())
				{
					herbiState = HerbiState.FINDING_START;
				}
				else
				{
					herbiState = HerbiState.STUNNED;
				}
			}
			else if (message.contains(HERBI_KC) || message.contains(HERBI_CIRCLES))
			{
				resetTrailData();
				herbiState = HerbiState.FINDING_START;
			}
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (!isInHerbiboarArea())
		{
			return;
		}

		if (config.dynamicMenuEntrySwap())
		{
			swapTrailMenuEntries(event);

			if (config.noLootMode() && herbiState == HerbiState.FINDING_START && event.getTarget().contains(HERBIBOAR_NAME))
			{
				event.getMenuEntry().setDeprioritized(true);
			}
		}
		if (config.npcMenuEntrySwap())
		{
			hideNpcMenuEntries(event);
		}
	}

	private void swapTrailMenuEntries(MenuEntryAdded event)
	{
		String target = event.getTarget();
		for (String menuTarget : HerbiAfkData.TRAIL_MENU_ENTRY_TARGETS)
		{
			if (target.contains(menuTarget))
			{
				MenuEntry entry = event.getMenuEntry();
				WorldPoint entryTargetPoint = WorldPoint.fromScene(client, entry.getParam0(), entry.getParam1(), client.getPlane());

				switch (herbiState)
				{
					case FINDING_START:
					case HUNTING:
						if (!entryTargetPoint.equals(endLocation))
						{
							entry.setDeprioritized(true);
						}
						break;
					case STUNNED:
						entry.setDeprioritized(true);
						break;
				}

				return;
			}
		}
	}

	private void hideNpcMenuEntries(MenuEntryAdded event)
	{
		String target = event.getTarget();
		for (String menuTarget : HerbiAfkData.NPC_MENU_ENTRY_TARGETS)
		{
			if (target.contains(menuTarget))
			{
				MenuEntry entry = event.getMenuEntry();

				switch (herbiState)
				{
					case FINDING_START:
					case HUNTING:
					case STUNNED:
						entry.setDeprioritized(true);
						break;
				}

				return;
			}
		}
	}

	private WorldPoint getHerbiboarLocation()
	{
		final NPC[] cachedNPCs = client.getCachedNPCs();
		for (NPC npc : cachedNPCs)
		{
			if (npc != null)
			{
				if (npc.getName() != null && npc.getName().equals(HERBIBOAR_NAME))
				{
					return npc.getWorldLocation();
				}
			}
		}
		return null;
	}

	public final Function<NPC, HighlightedNpc> isHerbiboar = (n) -> {
		boolean isHighlight = config.highlightHerbiHull() || config.highlightHerbiTile() || config.highlightHerbiOutline();
		if (isHighlight && n.getName() != null && n.getName().equals(HERBIBOAR_NAME))
		{
			Color color = config.getHerbiboarColor();
			return HighlightedNpc.builder()
				.npc(n)
				.highlightColor(color)
				.fillColor(ColorUtil.colorWithAlpha(color, color.getAlpha() / 12))
				.hull(config.highlightHerbiHull())
				.tile(config.highlightHerbiTile())
				.outline(config.highlightHerbiOutline())
				.build();
		}
		return null;
	};

	private void resetTrailData()
	{
		pathLinePoints.clear();

		startLocation = null;
		endLocation = null;

		finishedId = -1;
	}

	public boolean isInHerbiboarArea()
	{
		return herbiboarPlugin.isInHerbiboarArea();
	}

	@Provides
	HerbiAfkConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HerbiAfkConfig.class);
	}
}

/*
 * Copyright (c) 2021, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.herbiafk.QuestHelperTools;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;

public class DirectionArrow
{
    public static void renderMinimapArrow(Graphics2D graphics, Client client, WorldPoint worldPoint, Color color)
    {
        final int MAX_DRAW_DISTANCE = 16;
        Player player = client.getLocalPlayer();
        if (player == null)
        {
            return;
        }

        WorldPoint playerLocation = player.getWorldLocation();

        WorldPoint wp = QuestPerspective.getInstanceWorldPoint(client, worldPoint);

        if (wp == null)
        {
            return;
        }

        if (wp.distanceTo(playerLocation) >= MAX_DRAW_DISTANCE)
        {
            createMinimapDirectionArrow(graphics, client, wp, color);
            return;
        }

        LocalPoint lp = LocalPoint.fromWorld(client, wp);
        if (lp == null)
        {
            return;
        }

        Point posOnMinimap = Perspective.localToMinimap(client, lp);
        if (posOnMinimap == null)
        {
            return;
        }

        Line2D.Double line = new Line2D.Double(posOnMinimap.getX(), posOnMinimap.getY() - 18, posOnMinimap.getX(),
                posOnMinimap.getY() - 8);

        drawMinimapArrow(graphics, line, color);
    }

    protected static void createMinimapDirectionArrow(Graphics2D graphics, Client client, WorldPoint wp, Color color)
    {
        Player player = client.getLocalPlayer();

        if (player == null)
        {
            return;
        }

        if (wp == null)
        {
            return;
        }

        Point playerPosOnMinimap = player.getMinimapLocation();

        Point destinationPosOnMinimap = QuestPerspective.getMinimapPoint(client, player.getWorldLocation(), wp);

        if (playerPosOnMinimap == null || destinationPosOnMinimap == null)
        {
            return;
        }

        double xDiff = playerPosOnMinimap.getX() - destinationPosOnMinimap.getX();
        double yDiff = destinationPosOnMinimap.getY() - playerPosOnMinimap.getY();
        double angle = Math.atan2(yDiff, xDiff);

        int startX = (int) (playerPosOnMinimap.getX() - (Math.cos(angle) * 55));
        int startY = (int) (playerPosOnMinimap.getY() + (Math.sin(angle) * 55));

        int endX = (int) (playerPosOnMinimap.getX() - (Math.cos(angle) * 65));
        int endY = (int) (playerPosOnMinimap.getY() + (Math.sin(angle) * 65));

        Line2D.Double line = new Line2D.Double(startX, startY, endX, endY);

        drawMinimapArrow(graphics, line, color);
    }

    public static void drawWorldArrow(Graphics2D graphics, Color color, int startX, int startY)
    {
        Line2D.Double line = new Line2D.Double(startX, startY - 13, startX, startY);

        int headWidth = 5;
        int headHeight = 4;
        int lineWidth = 9;

        drawArrow(graphics, line, color, lineWidth, headHeight, headWidth);
    }

    public static void drawMinimapArrow(Graphics2D graphics, Line2D.Double line, Color color)
    {
        drawArrow(graphics, line, color, 6, 2, 2);
    }

    public static void drawArrow(Graphics2D graphics, Line2D.Double line, Color color, int width, int tipHeight,
                                 int tipWidth)
    {
        graphics.setColor(Color.BLACK);
        graphics.setStroke(new BasicStroke(width));
        graphics.draw(line);
        drawWorldArrowHead(graphics, line, tipHeight, tipWidth);

        graphics.setColor(color);
        graphics.setStroke(new BasicStroke(width - 3));
        graphics.draw(line);
        drawWorldArrowHead(graphics, line, tipHeight - 2, tipWidth - 2);
        graphics.setStroke(new BasicStroke(1));
    }


    public static void drawWorldArrowHead(Graphics2D g2d, Line2D.Double line, int extraSizeHeight, int extraSizeWidth)
    {
        AffineTransform tx = new AffineTransform();

        Polygon arrowHead = new Polygon();
        arrowHead.addPoint(0, 6 + extraSizeHeight);
        arrowHead.addPoint(-6 - extraSizeWidth, -1 - extraSizeHeight);
        arrowHead.addPoint(6 + extraSizeWidth, -1 - extraSizeHeight);

        tx.setToIdentity();
        double angle = Math.atan2(line.y2 - line.y1, line.x2 - line.x1);
        tx.translate(line.x2, line.y2);
        tx.rotate((angle - Math.PI / 2d));

        Graphics2D g = (Graphics2D) g2d.create();
        g.setTransform(tx);
        g.fill(arrowHead);
        g.dispose();
    }

    public static void drawLineArrowHead(Graphics2D g2d, Line2D.Double line) {
        AffineTransform tx = new AffineTransform();

        Polygon arrowHead = new Polygon();
        arrowHead.addPoint( 0,0);
        arrowHead.addPoint( -3, -6);
        arrowHead.addPoint( 3,-6);

        tx.setToIdentity();
        double angle = Math.atan2(line.y2-line.y1, line.x2-line.x1);
        tx.translate(line.x2, line.y2);
        tx.rotate((angle-Math.PI/2d));

        Graphics2D g = (Graphics2D) g2d.create();
        g.setTransform(tx);
        g.fill(arrowHead);
        g.dispose();
    }

    public static void drawLine(Graphics2D graphics, Line2D.Double line, Color color, Rectangle clippingRegion)
    {
        graphics.setStroke(new BasicStroke(1));
        graphics.setClip(clippingRegion);
        graphics.setColor(color);
        graphics.draw(line);

        drawLineArrowHead(graphics, line);
    }
}
/*
 * Copyright (c) 2021, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.herbiafk.QuestHelperTools;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.util.List;
import javax.annotation.Nonnull;

import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.OverlayUtil;

public class WorldLines
{
    public static void createMinimapLines(Graphics2D graphics, Client client, List<WorldPoint> linePoints,
                                          Color color)
    {
        if (linePoints == null || linePoints.size() < 2)
        {
            return;
        }
        for (int i = 0; i < linePoints.size() - 1; i++)
        {
            LocalPoint startPoint = QuestPerspective.getInstanceLocalPoint(client, linePoints.get(i));
            LocalPoint destinationPoint = QuestPerspective.getInstanceLocalPoint(client, linePoints.get(i+1));
            if (startPoint == null || destinationPoint == null)
            {
                continue;
            }

            Point startPosOnMinimap = Perspective.localToMinimap(client, startPoint, 10000000);
            Point destinationPosOnMinimap = Perspective.localToMinimap(client, destinationPoint, 10000000);

            if (destinationPosOnMinimap == null || startPosOnMinimap == null)
            {
                continue;
            }

            Line2D.Double line = new Line2D.Double(startPosOnMinimap.getX(), startPosOnMinimap.getY(), destinationPosOnMinimap.getX(), destinationPosOnMinimap.getY());

            Rectangle bounds = new Rectangle(0, 0, client.getCanvasWidth(), client.getCanvasHeight());
            Widget minimapWidget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_MINIMAP_DRAW_AREA);

            if (minimapWidget == null)
            {
                minimapWidget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_MINIMAP_DRAW_AREA);
            }
            if (minimapWidget == null)
            {
                minimapWidget = client.getWidget(ComponentID.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
            }

            if (minimapWidget != null)
            {
                bounds = minimapWidget.getBounds();
            }

            DirectionArrow.drawLine(graphics, line, color, bounds);
        }
    }

    public static Line2D.Double getWorldLines(@Nonnull Client client, @Nonnull LocalPoint startLocation, LocalPoint endLocation)
    {
        final int plane = client.getPlane();

        final int startX = startLocation.getX();
        final int startY = startLocation.getY();
        final int endX = endLocation.getX();
        final int endY = endLocation.getY();

        final int sceneX = startLocation.getSceneX();
        final int sceneY = startLocation.getSceneY();

        if (sceneX < 0 || sceneY < 0 || sceneX >= Constants.SCENE_SIZE || sceneY >= Constants.SCENE_SIZE)
        {
            return null;
        }

        final int startHeight = Perspective.getTileHeight(client, startLocation, plane);
        final int endHeight = Perspective.getTileHeight(client, endLocation, plane);

        Point p1 = Perspective.localToCanvas(client, startX, startY, startHeight);
        Point p2 = Perspective.localToCanvas(client, endX, endY, endHeight);

        if (p1 == null || p2 == null)
        {
            return null;
        }

        return new Line2D.Double(p1.getX(), p1.getY(), p2.getX(), p2.getY());
    }

    public static void drawLinesOnWorld(Graphics2D graphics, Client client, List<WorldPoint> linePoints,
                                        Color color)
    {
        for (int i = 0; i < linePoints.size() - 1; i++)
        {
            LocalPoint startLp = QuestPerspective.getInstanceLocalPoint(client, linePoints.get(i));
            LocalPoint endLp = QuestPerspective.getInstanceLocalPoint(client, linePoints.get(i+1));
            if (startLp == null || endLp == null)
            {
                continue;
            }

            Line2D.Double newLine = getWorldLines(client, startLp, endLp);
            if (newLine != null)
            {
                OverlayUtil.renderPolygon(graphics, newLine, color);
            }
        }
    }
}
/*
 * Copyright (c) 2021, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.herbiafk.QuestHelperTools;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import net.runelite.api.Client;
import static net.runelite.api.Constants.CHUNK_SIZE;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.RenderOverview;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.ComponentID;


public class QuestPerspective
{
    public static Collection<WorldPoint> toLocalInstance(Client client, WorldPoint worldPoint)
    {
        if (!client.isInInstancedRegion())
        {
            return Collections.singleton(worldPoint);
        }

        // find instance chunks using the template point. there might be more than one.
        List<WorldPoint> worldPoints = new ArrayList<>();

        int[][][] instanceTemplateChunks = client.getInstanceTemplateChunks();
        for (int z = 0; z < instanceTemplateChunks.length; ++z)
        {
            for (int x = 0; x < instanceTemplateChunks[z].length; ++x)
            {
                for (int y = 0; y < instanceTemplateChunks[z][x].length; ++y)
                {
                    int chunkData = instanceTemplateChunks[z][x][y];
                    int rotation = chunkData >> 1 & 0x3;
                    int templateChunkY = (chunkData >> 3 & 0x7FF) * CHUNK_SIZE;
                    int templateChunkX = (chunkData >> 14 & 0x3FF) * CHUNK_SIZE;
                    if (worldPoint.getX() >= templateChunkX && worldPoint.getX() < templateChunkX + CHUNK_SIZE
                            && worldPoint.getY() >= templateChunkY && worldPoint.getY() < templateChunkY + CHUNK_SIZE)
                    {
                        WorldPoint p =
                                new WorldPoint(client.getBaseX() + x * CHUNK_SIZE + (worldPoint.getX() & (CHUNK_SIZE - 1)),
                                        client.getBaseY() + y * CHUNK_SIZE + (worldPoint.getY() & (CHUNK_SIZE - 1)),
                                        z);
                        p = rotate(p, rotation);
                        if (p.isInScene(client))
                        {
                            worldPoints.add(p);
                        }
                    }
                }
            }
        }
        return worldPoints;
    }

    private static WorldPoint rotate(WorldPoint point, int rotation)
    {
        int chunkX = point.getX() & ~(CHUNK_SIZE - 1);
        int chunkY = point.getY() & ~(CHUNK_SIZE - 1);
        int x = point.getX() & (CHUNK_SIZE - 1);
        int y = point.getY() & (CHUNK_SIZE - 1);
        switch (rotation)
        {
            case 1:
                return new WorldPoint(chunkX + y, chunkY + (CHUNK_SIZE - 1 - x), point.getPlane());
            case 2:
                return new WorldPoint(chunkX + (CHUNK_SIZE - 1 - x), chunkY + (CHUNK_SIZE - 1 - y), point.getPlane());
            case 3:
                return new WorldPoint(chunkX + (CHUNK_SIZE - 1 - y), chunkY + x, point.getPlane());
        }
        return point;
    }

    public static LocalPoint getInstanceLocalPoint(Client client, WorldPoint wp)
    {
        WorldPoint instanceWorldPoint = getInstanceWorldPoint(client, wp);
        if (instanceWorldPoint == null)
        {
            return null;
        }

        return LocalPoint.fromWorld(client, instanceWorldPoint);
    }

    public static WorldPoint getInstanceWorldPoint(Client client, WorldPoint wp)
    {
        Collection<WorldPoint> points = QuestPerspective.toLocalInstance(client, wp);

        for (WorldPoint point : points)
        {
            if (point != null)
            {
                return point;
            }
        }
        return null;
    }

    public static Point getMinimapPoint(Client client, WorldPoint start, WorldPoint destination)
    {
        RenderOverview ro = client.getRenderOverview();
        if (ro.getWorldMapData().surfaceContainsPosition(start.getX(), start.getY()) !=
                ro.getWorldMapData().surfaceContainsPosition(destination.getX(), destination.getY()))
        {
            return null;
        }

        int x = (destination.getX() - start.getX());
        int y = (destination.getY() - start.getY());

        float maxDistance = Math.max(Math.abs(x), Math.abs(y));
        x = x * 100;
        y = y * 100;
        x /= maxDistance;
        y /= maxDistance;

        Widget minimapDrawWidget;
        if (client.isResized())
        {
            if (client.getVarbitValue(Varbits.SIDE_PANELS) == 1)
            {

                minimapDrawWidget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_MINIMAP_DRAW_AREA);
            }
            else
            {
                minimapDrawWidget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_MINIMAP_DRAW_AREA);
            }
        }
        else
        {
            minimapDrawWidget = client.getWidget(ComponentID.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
        }

        if (minimapDrawWidget == null)
        {
            return null;
        }

        final int angle = client.getMapAngle() & 0x7FF;

        final int sin = Perspective.SINE[angle];
        final int cos = Perspective.COSINE[angle];

        final int xx = y * sin + cos * x >> 16;
        final int yy = sin * x - y * cos >> 16;

        Point loc = minimapDrawWidget.getCanvasLocation();
        int miniMapX = loc.getX() + xx + minimapDrawWidget.getWidth() / 2;
        int miniMapY = minimapDrawWidget.getHeight() / 2 + loc.getY() + yy;
        return new Point(miniMapX, miniMapY);
    }
}

package com.herbiafk;

import net.runelite.api.coords.WorldPoint;

import java.util.ArrayList;
import java.util.List;

public class Utils
{
	private static final Integer PATH_LINE_DIVISION = 10;

	public static WorldPoint getNearestStartLocation(WorldPoint playerLocation)
	{
		WorldPoint neartestPoint = null;
		double shortestDistance = Double.MAX_VALUE;

		for (WorldPoint startPoint : HerbiAfkData.START_LOCATIONS)
		{
			double distance = playerLocation.distanceTo2D(startPoint);
			if (distance < shortestDistance)
			{
				neartestPoint = startPoint;
				shortestDistance = distance;
			}
		}

		return neartestPoint;
	}

	public static List<WorldPoint> getPathLinePoints(WorldPoint start, WorldPoint end)
	{
		List<WorldPoint> pathLinePoints = new ArrayList<>();

		double distance = start.distanceTo2D(end);
		int divisions = (int) Math.ceil(distance / PATH_LINE_DIVISION);

		pathLinePoints.add(start);

		if (divisions == 1)
		{
			pathLinePoints.add(end);
			return pathLinePoints;
		}

		double angle = Math.atan2((end.getY() - start.getY()), (end.getX() - start.getX()));
		double deltaH = distance / divisions;
		int deltaX = (int) (deltaH * Math.cos(angle));
		int deltaY = (int) (deltaH * Math.sin(angle));

		int currentX = start.getX();
		int currentY = start.getY();

		for (int i = 1; i < divisions; i++)
		{
			currentX += deltaX;
			currentY += deltaY;
			pathLinePoints.add(new WorldPoint(currentX, currentY, 0));
		}

		pathLinePoints.add(end);

		return pathLinePoints;
	}
}

package com.herbiafk;

import com.herbiafk.QuestHelperTools.WorldLines;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.Graphics2D;
import java.awt.Dimension;

public class HerbiAfkOverlay extends Overlay
{

	private final HerbiAfkPlugin plugin;
	private final HerbiAfkConfig config;

	@Inject
	public HerbiAfkOverlay(HerbiAfkPlugin plugin, HerbiAfkConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isInHerbiboarArea())
		{
			return null;
		}

		if (config.showPathLine() && plugin.getPathLinePoints() != null)
		{
			WorldLines.drawLinesOnWorld(graphics, plugin.getClient(), plugin.getPathLinePoints(), config.getLineColor());
		}
		return null;
	}
}

package com.herbiafk;

import lombok.Getter;
import net.runelite.api.coords.WorldPoint;

@Getter
enum HerbiboarSearchSpot
{
	// Wiki A location
	A_MUSHROOM(new WorldPoint(3670, 3889, 0)),
	A_PATCH(new WorldPoint(3672, 3890, 0)),

	// Wiki B location
	B_SEAWEED(new WorldPoint(3728, 3893, 0)),

	// Wiki C location
	C_MUSHROOM(new WorldPoint(3697, 3875, 0)),
	C_PATCH(new WorldPoint(3699, 3875, 0)),

	// Wiki D location
	D_PATCH(new WorldPoint(3708, 3876, 0)),
	D_SEAWEED(new WorldPoint(3710, 3877, 0)),

	// Wiki E location
	E_MUSHROOM(new WorldPoint(3668, 3865, 0)),
	E_PATCH(new WorldPoint(3667, 3862, 0)),

	// Wiki F location
	F_MUSHROOM(new WorldPoint(3681, 3860, 0)),
	F_PATCH(new WorldPoint(3681, 3859, 0)),

	// Wiki G location
	G_MUSHROOM(new WorldPoint(3694, 3847, 0)),
	G_PATCH(new WorldPoint(3698, 3847, 0)),

	// Wiki H location
	H_SEAWEED_EAST(new WorldPoint(3715, 3851, 0)),
	H_SEAWEED_WEST(new WorldPoint(3713, 3850, 0)),

	// Wiki I location
	I_MUSHROOM(new WorldPoint(3680, 3838, 0)),
	I_PATCH(new WorldPoint(3680, 3836, 0)),

	// Wiki J location
	J_PATCH(new WorldPoint(3713, 3840, 0)),

	// Wiki K location
	K_PATCH(new WorldPoint(3706, 3811, 0)),
	;

	private final WorldPoint location;

	HerbiboarSearchSpot(WorldPoint location)
	{
		this.location = location;
	}
}

package com.herbiafk;

import com.herbiafk.QuestHelperTools.DirectionArrow;
import com.herbiafk.QuestHelperTools.WorldLines;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.Graphics2D;
import java.awt.Dimension;

public class HerbiAfkMinimapOverlay extends Overlay
{

	private final HerbiAfkPlugin plugin;
	private final HerbiAfkConfig config;

	@Inject
	public HerbiAfkMinimapOverlay(HerbiAfkPlugin plugin, HerbiAfkConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isInHerbiboarArea())
		{
			return null;
		}

		if (config.showMiniMapArrow() && plugin.getEndLocation() != null)
		{
			DirectionArrow.renderMinimapArrow(graphics, plugin.getClient(), plugin.getEndLocation(), config.getArrowColor());
		}

		if (config.showMiniMaplines() && plugin.getPathLinePoints() != null)
		{
			WorldLines.createMinimapLines(graphics, plugin.getClient(), plugin.getPathLinePoints(), config.getMinimapPathColor());
		}
		return null;
	}
}

