/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping;

import javax.inject.Inject;

import com.brastasauce.turaelskipping.models.NpcLocation;
import com.brastasauce.turaelskipping.models.SlayerTask;
import com.brastasauce.turaelskipping.utils.AreaOutlineOverlay;
import com.brastasauce.turaelskipping.utils.SlayerTaskOverlay;
import com.brastasauce.turaelskipping.utils.SlayerTaskWorldMapPoint;
import com.brastasauce.turaelskipping.utils.WorldAreaUtils;
import com.google.inject.Provides;


import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.NPC;
import net.runelite.api.Player;
import net.runelite.api.Tile;
import net.runelite.api.WorldView;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.npcoverlay.HighlightedNpc;
import net.runelite.client.game.npcoverlay.NpcOverlayService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;
import net.runelite.client.util.Text;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
        name = "Turael Skipping",
        description = "Helper plugin for Turael/Aya slayer",
        tags = {"slayer", "highlight", "overlay", "task", "turael", "aya"}
)
public class TuraelSkippingPlugin extends Plugin {
    private static final String TURAEL = "Turael";
    private static final String AYA = "Aya";

    private static final Pattern SLAYER_ASSIGN_MESSAGE = Pattern.compile("Your new task is to kill \\d+ (?<name>.+)\\.");
    private static final Pattern SLAYER_CURRENT_MESSAGE = Pattern.compile("You're still hunting (?<name>.+)[,;] you have \\d+ to go\\.");
    private static final Pattern SLAYER_CURRENT_CHAT_MESSAGE = Pattern.compile("You're assigned to kill (?<name>.+)[,;] only \\d+ more to go\\.");

    private final Set<NPC> targets = new HashSet<>();

    private final String DEBUG_MENU_WORLD_POINT_ONE = "Set WorldPoint1 (Turael Skipping)";
    private final String DEBUG_MENU_WORLD_POINT_TWO = "Set WorldPoint2 (Turael Skipping)";
    private final String DEBUG_MENU_RESET_WORLD_POINTS = "Reset WorldPoints (Turael Skipping)";
    private final String DEBUG_MENU_COPY_TO_CLIPBOARD = "Copy WorldPoints to clipboard (Turael Skipping)";

    private WorldPoint debugWorldPointOne;
    private WorldPoint debugWorldPointTwo;

    @Inject
    private Client client;

    @Inject
    private TuraelSkippingConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private NpcOverlayService npcOverlayService;

    @Inject
    private WorldMapPointManager worldMapPointManager;

    @Inject
    private AreaOutlineOverlay areaOutlineOverlay;

    @Inject
    private AreaOutlineOverlay debugAreaOutlineOverlay;

    @Inject
    private SlayerTaskOverlay slayerTaskOverlay;

    @Getter
    private SlayerTask currentSlayerTask;

    @Override
    protected void startUp() {
        overlayManager.add(slayerTaskOverlay);
        overlayManager.add(debugAreaOutlineOverlay);

        debugAreaOutlineOverlay.setUseAlternativeOutline(true);
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(slayerTaskOverlay);
        overlayManager.remove(debugAreaOutlineOverlay);
        npcOverlayService.unregisterHighlighter(npcHighlighter);
        worldMapPointManager.removeIf(SlayerTaskWorldMapPoint.class::isInstance);

        completeTask();
    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        Widget chatBoxNpcName = client.getWidget(InterfaceID.ChatLeft.NAME);
        Widget chatBoxNpcText = client.getWidget(InterfaceID.ChatLeft.TEXT);

        // Check if current widget is either Turael or Aya
        if (chatBoxNpcName != null && chatBoxNpcText != null && (chatBoxNpcName.getText().equals(TURAEL) || chatBoxNpcName.getText().equals(AYA))) {
            String npcText = Text.sanitizeMultilineText(chatBoxNpcText.getText());
            String taskName = getTaskName(npcText);

            if (taskName != null) {
                startTask(taskName);
            }
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        if (event.getType() != ChatMessageType.GAMEMESSAGE) {
            return;
        }

        String chatMessage = Text.removeTags(event.getMessage());

        if (currentSlayerTask == null) {
            // Check if player used "Check" option on slayer helm
            Matcher matcher = SLAYER_CURRENT_CHAT_MESSAGE.matcher(chatMessage);

            if (matcher.find()) {
                String taskName = matcher.group("name");

                if (taskName != null) {
                    startTask(taskName);
                }
            }
        } else {
            if (chatMessage.startsWith("You've completed") && chatMessage.toLowerCase().contains("slayer master")) {
                completeTask();
            }
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        // Ignore changes from other plugins
        if (!event.getGroup().equals(TuraelSkippingConfig.CONFIG_GROUP_NAME)) {
            return;
        }

        // Set a dummy task
        if (event.getKey().equals("debugTask")) {
            if (event.getNewValue() == null) {
                return;
            }

            // Always clear task to reset area outline/tagged NPC's
            this.completeTask();

            if (!event.getNewValue().equals("None")) {
                this.startTask(event.getNewValue().toLowerCase().replace("_", " "));
            }
        }

        // Re-select the slayer task, so it re-draws the outline if enabled or removes the outline when disabled
        if (event.getKey().equals("enableSlayerAreaOutline")) {
            if (this.currentSlayerTask != null) {
                this.startTask(currentSlayerTask.getName());
            }
        }

        // Set the debug WorldPoint values to null to remove the outline
        if (event.getKey().equals("enableWorldPointSelector")) {
            if (event.getNewValue() != null && event.getNewValue().equals("false")) {
                debugAreaOutlineOverlay.setAreas(null);
            }
        }

        // Rebuild the NPC highlighter with the updated settings
        npcOverlayService.rebuild();
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        NPC npc = npcSpawned.getNpc();

        // Add the NPC to the targets for NPC highlighting
        if (currentSlayerTask != null) {
            for (int targetNpcId : currentSlayerTask.getNpcIds()) {
                if (npc.getId() == targetNpcId) {
                    targets.add(npc);
                }
            }
        }
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned) {
        // Remove the NPC from the targets
        NPC npc = npcDespawned.getNpc();
        targets.remove(npc);
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded menuEntryAdded) {
        if (!config.enableWorldPointSelector()) {
            return;
        }

        // Only add the menu entry when you can walk, so it doesn't get added when you are right-clicking in the bank
        if (menuEntryAdded.getOption().equals("Walk here")) {
            // Add options in reverse, so it shows up correctly in the right click menu
            client.getMenu()
                    .createMenuEntry(-1)
                    .setOption(DEBUG_MENU_RESET_WORLD_POINTS)
                    .setTarget(menuEntryAdded.getTarget())
                    .setType(MenuAction.RUNELITE)
                    .onClick(menuEntry -> {
                        debugWorldPointOne = null;
                        debugWorldPointTwo = null;

                        debugAreaOutlineOverlay.setAreas(null);
                    });

            client.getMenu()
                    .createMenuEntry(-1)
                    .setOption(DEBUG_MENU_COPY_TO_CLIPBOARD)
                    .setTarget(menuEntryAdded.getTarget())
                    .setType(MenuAction.RUNELITE)
                    .onClick(menuEntry -> {
                        if (debugWorldPointOne != null && debugWorldPointTwo != null) {
                            String copyString = "new WorldPoint(" + debugWorldPointOne.getX() + ", " + debugWorldPointOne.getY() + ", " + debugWorldPointOne.getPlane() + "), " +
                                    "new WorldPoint(" + debugWorldPointTwo.getX() + ", " + debugWorldPointTwo.getY() + ", " + debugWorldPointTwo.getPlane() + ")";

                            StringSelection selection = new StringSelection(copyString);
                            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                            clipboard.setContents(selection, null);

                            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Turael Skipping", "Copied the WorldPoints to your clipboard.", "Turael Skipping");
                        }
                    });

            client.getMenu()
                    .createMenuEntry(-1)
                    .setOption(DEBUG_MENU_WORLD_POINT_TWO)
                    .setTarget(menuEntryAdded.getTarget())
                    .setType(MenuAction.RUNELITE)
                    .setIdentifier(menuEntryAdded.getIdentifier());

            client.getMenu()
                    .createMenuEntry(-1)
                    .setOption(DEBUG_MENU_WORLD_POINT_ONE)
                    .setTarget(menuEntryAdded.getTarget())
                    .setType(MenuAction.RUNELITE)
                    .setIdentifier(menuEntryAdded.getIdentifier());
        }
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event) {
        if (!event.getMenuOption().equals(DEBUG_MENU_WORLD_POINT_ONE) && !event.getMenuOption().equals(DEBUG_MENU_WORLD_POINT_TWO)) {
            return;
        }

        WorldView worldView = client.getLocalPlayer().getWorldView();
        Tile selectedSceneTile = worldView.getSelectedSceneTile();

        if (selectedSceneTile == null) {
            return;
        }

        if (event.getMenuOption().equals(DEBUG_MENU_WORLD_POINT_ONE)) {
            this.debugWorldPointOne = selectedSceneTile.getWorldLocation();

            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Turael Skipping", "First WorldPoint has been selected.", "Turael Skipping");
        } else if (event.getMenuOption().equals(DEBUG_MENU_WORLD_POINT_TWO)) {
            this.debugWorldPointTwo = selectedSceneTile.getWorldLocation();

            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Turael Skipping", "Second WorldPoint has been selected.", "Turael Skipping");
        }

        if (this.debugWorldPointOne != null && debugWorldPointTwo != null) {
            this.debugAreaOutlineOverlay.setAreas(List.of(
                    WorldAreaUtils.fromCorners(debugWorldPointOne, debugWorldPointTwo)
            ));
        }
    }

    @Provides
    TuraelSkippingConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(TuraelSkippingConfig.class);
    }

    private void startTask(String taskName) {
        SlayerTask lookupSlayerTask = SlayerTaskRegistry.getSlayerTaskByNpcName(taskName.toLowerCase());

        if (lookupSlayerTask != null) {
            this.currentSlayerTask = lookupSlayerTask;

            if (config.enableSlayerAreaOutline()) {
                List<WorldArea> allAreas = new ArrayList<>();

                for (NpcLocation npcLocation : currentSlayerTask.getLocations()) {
                    allAreas.addAll(npcLocation.getWorldAreas());
                }

                areaOutlineOverlay.setAreas(allAreas);
                overlayManager.add(areaOutlineOverlay);
            } else {
                areaOutlineOverlay.setAreas(null);
                overlayManager.remove(areaOutlineOverlay);
            }

            if (config.enableWorldMapIcon()) {
                for (WorldPoint worldPoint : currentSlayerTask.getWorldMapLocations()) {
                    worldMapPointManager.add(new SlayerTaskWorldMapPoint(worldPoint));
                }
            }

            // Target NPC's visible to the player in case they are already at the location
            Player player = client.getLocalPlayer();

            // Player is null when you select a task from the debug menu whe not logged in
            if (player != null) {
                WorldView worldView = player.getWorldView();

                for (NPC npc : worldView.npcs()) {
                    for (int targetNpcId : currentSlayerTask.getNpcIds()) {
                        if (npc.getId() == targetNpcId) {
                            targets.add(npc);
                        }
                    }
                }

                npcOverlayService.registerHighlighter(npcHighlighter);
            }
        }
    }

    private void completeTask() {
        areaOutlineOverlay.setAreas(null);
        overlayManager.remove(areaOutlineOverlay);

        currentSlayerTask = null;
        targets.clear();

        npcOverlayService.unregisterHighlighter(npcHighlighter);

        worldMapPointManager.removeIf(SlayerTaskWorldMapPoint.class::isInstance);
    }

    private String getTaskName(String npcText) {
        Pattern[] patterns = {SLAYER_ASSIGN_MESSAGE, SLAYER_CURRENT_MESSAGE};

        for (Pattern pattern : patterns) {
            Matcher matcher = pattern.matcher(npcText);

            if (matcher.find()) {
                return matcher.group("name");
            }
        }

        return null;
    }

    public Function<NPC, HighlightedNpc> npcHighlighter = (n) -> {
        if (targets.contains(n) && config.enableNpcHighlight()) {
            return HighlightedNpc.builder()
                    .npc(n)
                    .highlightColor(config.getNpcColour())
                    .outline(config.getNpcHighlightMode().equals(NpcHighlightMode.Outline))
                    .hull(config.getNpcHighlightMode().equals(NpcHighlightMode.Hull))
                    .tile(config.getNpcHighlightMode().equals(NpcHighlightMode.Tile))
                    .trueTile(config.getNpcHighlightMode().equals(NpcHighlightMode.TrueTile))
                    .render(npc -> !npc.isDead())
                    .build();
        }

        return null;
    };
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping.utils;


import com.brastasauce.turaelskipping.TuraelSkippingConfig;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.WorldView;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.BasicStroke;
import java.awt.Polygon;
import java.util.List;

public class AreaOutlineOverlay extends Overlay {
    private final Client client;
    private final TuraelSkippingConfig config;
    private List<WorldArea> areas;
    private boolean useAlternativeOutline;

    @Inject
    public AreaOutlineOverlay(Client client, TuraelSkippingConfig config) {
        this.client = client;
        this.config = config;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    public void setAreas(List<WorldArea> areas) {
        this.areas = areas;
    }

    public void setUseAlternativeOutline(boolean useAlternativeOutline) {
        this.useAlternativeOutline = useAlternativeOutline;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (areas == null || areas.isEmpty()) {
            return null;
        }

        if (useAlternativeOutline) {
            graphics.setColor(Color.ORANGE);
            graphics.setStroke(new BasicStroke(2, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,
                    new float[]{9}, 0));
        } else {
            graphics.setColor(config.getSlayerAreaOutlineColour());
            graphics.setStroke(new BasicStroke(2));
        }

        for (WorldArea area : areas) {
            drawAreaOutline(graphics, area);
        }

        return null;
    }

    private void drawAreaOutline(Graphics2D graphics, WorldArea area) {
        int minX = area.getX();
        int minY = area.getY();
        int maxX = minX + area.getWidth() - 1;
        int maxY = minY + area.getHeight() - 1;
        int plane = area.getPlane();

        WorldPoint sw = new WorldPoint(minX, minY, plane);
        WorldPoint nw = new WorldPoint(minX, maxY + 1, plane);
        WorldPoint ne = new WorldPoint(maxX + 1, maxY + 1, plane);
        WorldPoint se = new WorldPoint(maxX + 1, minY, plane);

        WorldView worldView = client.getLocalPlayer().getWorldView();

        LocalPoint swLp = LocalPoint.fromWorld(worldView, sw);
        LocalPoint nwLp = LocalPoint.fromWorld(worldView, nw);
        LocalPoint neLp = LocalPoint.fromWorld(worldView, ne);
        LocalPoint seLp = LocalPoint.fromWorld(worldView, se);

        if (swLp == null || nwLp == null || neLp == null || seLp == null)
            return;

        Point swC = Perspective.localToCanvas(client, swLp, plane);
        Point nwC = Perspective.localToCanvas(client, nwLp, plane);
        Point neC = Perspective.localToCanvas(client, neLp, plane);
        Point seC = Perspective.localToCanvas(client, seLp, plane);

        if (swC == null || nwC == null || neC == null || seC == null)
            return;

        Polygon poly = new Polygon();

        poly.addPoint(swC.getX(), swC.getY());
        poly.addPoint(nwC.getX(), nwC.getY());
        poly.addPoint(neC.getX(), neC.getY());
        poly.addPoint(seC.getX(), seC.getY());

        graphics.drawPolygon(poly);
    }
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping.utils;

import com.brastasauce.turaelskipping.TuraelSkippingConfig;
import com.brastasauce.turaelskipping.TuraelSkippingPlugin;
import com.brastasauce.turaelskipping.models.NpcLocation;
import com.brastasauce.turaelskipping.models.SlayerTask;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldArea;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Color;

public class SlayerTaskOverlay extends OverlayPanel {
    private final Client client;
    private final TuraelSkippingPlugin plugin;
    private final TuraelSkippingConfig config;

    @Inject
    public SlayerTaskOverlay(Client client, TuraelSkippingPlugin turaelSlayerPlugin, TuraelSkippingConfig config) {
        this.client = client;
        this.plugin = turaelSlayerPlugin;
        this.config = config;

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setPreferredSize(new Dimension(216, 40));
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!config.enableInformationBox()) {
            return null;
        }

        SlayerTask task = plugin.getCurrentSlayerTask();

        if (task == null) {
            return null;
        }

        boolean inArea = false;

        for (NpcLocation npcLocation : task.getLocations()) {
            for (WorldArea worldArea : npcLocation.getWorldAreas()) {
                if (worldArea.contains(client.getLocalPlayer().getWorldLocation())) {
                    inArea = true;
                }
            }
        }

        // If disabled, set inArea to false so the information box will always be drawn
        if (!config.automaticallyHideInformationBox()) {
            inArea = false;
        }

        if (!inArea) {
            for (NpcLocation npcLocation : task.getLocations()) {
                panelComponent.getChildren().add(LineComponent.builder().left(npcLocation.getName()).leftColor(Color.YELLOW).build());

                for (String teleport : npcLocation.getTeleports()) {
                    panelComponent.getChildren().add(LineComponent.builder().left("- " + teleport).build());
                }
            }

            if (task.getInformation() != null) {
                panelComponent.getChildren().add(LineComponent.builder().left(" ").build());
                panelComponent.getChildren().add(LineComponent.builder().left(task.getInformation()).build());
            }
        }

        return super.render(graphics);
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping.utils;

import com.brastasauce.turaelskipping.TuraelSkippingPlugin;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.worldmap.WorldMapPoint;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;

public class SlayerTaskWorldMapPoint extends WorldMapPoint {
    public SlayerTaskWorldMapPoint(WorldPoint worldPoint) {
        super(worldPoint, null);

        BufferedImage taskWorldImage = ImageUtil.loadImageResource(TuraelSkippingPlugin.class, "/turael_chathead.png");

        this.setSnapToEdge(true);
        this.setJumpOnClick(true);
        this.setName("Turael Task");
        this.setImage(taskWorldImage);
    }
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping.utils;

import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;

public class WorldAreaUtils {
    public static WorldArea fromCorners(WorldPoint p1, WorldPoint p2) {
        int x1 = Math.min(p1.getX(), p2.getX());
        int y1 = Math.min(p1.getY(), p2.getY());
        int x2 = Math.max(p1.getX(), p2.getX());
        int y2 = Math.max(p1.getY(), p2.getY());

        return new WorldArea(
                new WorldPoint(x1, y1, p1.getPlane()),
                x2 - x1 + 1,
                y2 - y1 + 1
        );
    }
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping;

public enum DebugSlayerTask {
    None,
    Banshees,
    Bats,
    Bears,
    Birds,
    Cave_Bugs,
    Cave_Crawlers,
    Cave_Slimes,
    Cows,
    Crawling_Hands,
    Dogs,
    Dwarves,
    Ghosts,
    Goblins,
    Icefiends,
    Kalphite,
    Lizards,
    Minotaurs,
    Monkeys,
    Rats,
    Scorpions,
    Skeletons,
    Spiders,
    Wolves,
    Zombies
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping.models;

import lombok.Getter;
import net.runelite.api.coords.WorldPoint;

import java.util.List;

@Getter
public class SlayerTask {
    private final String name;
    private final List<Integer> npcIds;
    private final List<WorldPoint> worldMapLocations;
    private final List<NpcLocation> locations;
    private final String information;

    public SlayerTask(String name, List<Integer> npcIds, List<WorldPoint> worldMapLocations, List<NpcLocation> locations) {
        this.name = name;
        this.npcIds = npcIds;
        this.worldMapLocations = worldMapLocations;
        this.locations = locations;
        this.information = null;
    }

    public SlayerTask(String name, List<Integer> npcIds, List<WorldPoint> worldMapLocations, List<NpcLocation> locations, String information) {
        this.name = name;
        this.npcIds = npcIds;
        this.worldMapLocations = worldMapLocations;
        this.locations = locations;
        this.information = information;
    }
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping.models;

import lombok.Getter;
import net.runelite.api.coords.WorldArea;

import java.util.List;

@Getter
public class NpcLocation {
    private final String name;
    private final String[] teleports;
    private final List<WorldArea> worldAreas;

    public NpcLocation(String name, List<WorldArea> worldAreas, String[] teleports) {
        this.name = name;
        this.worldAreas = worldAreas;
        this.teleports = teleports;
    }
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping;

public enum NpcHighlightMode {
    Outline,
    Hull,
    Tile,
    TrueTile
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.Color;

@ConfigGroup(TuraelSkippingConfig.CONFIG_GROUP_NAME)
public interface TuraelSkippingConfig extends Config {
    String CONFIG_GROUP_NAME = "Turael skipping";

    // General settings
    @ConfigSection(
            position = 0,
            name = "General settings",
            description = "General settings"
    )
    String generalSettings = "generalSettings";

    @ConfigItem(
            position = 0,
            keyName = "displayInfo",
            name = "Enable information box",
            description = "Whether to show an information box with information about the current task.",
            section = generalSettings
    )
    default boolean enableInformationBox() {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "automaticallyHideInformationBox",
            name = "Automatically hide information box",
            description = "Whether to automatically hide the information box when you are at your current task.",
            section = generalSettings
    )
    default boolean automaticallyHideInformationBox() {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "displayMapIcon",
            name = "Enable world map icon",
            description = "Displays an icon on the world map where the current task is located.",
            section = generalSettings
    )
    default boolean enableWorldMapIcon() {
        return true;
    }

    // Highlight settings
    @ConfigSection(
            position = 1,
            name = "NPC Highlight settings",
            description = "Customize NPC highlight settings"
    )
    String npcHighlightSettings = "npcHighlightSettings";

    @ConfigItem(
            position = 0,
            keyName = "enableNpcHighlight",
            name = "Enable NPC highlight",
            description = "Whether you want to highlight the NPC's from your current slayer task.",
            section = npcHighlightSettings
    )
    default boolean enableNpcHighlight() {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "npcHighlightMode",
            name = "NPC highlight mode",
            description = "Select how to highlight the NPC's.",
            section = npcHighlightSettings
    )
    default NpcHighlightMode getNpcHighlightMode() {
        return NpcHighlightMode.Tile;
    }

    @ConfigItem(
            position = 2,
            keyName = "npcColour",
            name = "NPC highlight colour",
            description = "Select the colour of the highlighted NPC's.",
            section = npcHighlightSettings
    )
    default Color getNpcColour() {
        return Color.decode("#DDFF00");
    }

    // Slayer area outline
    @ConfigSection(
            position = 2,
            name = "Slayer area outline",
            description = "Slayer area outline"
    )
    String slayerAreaOutline = "slayerAreaOutline";

    @ConfigItem(
            position = 0,
            keyName = "enableSlayerAreaOutline",
            name = "Enable slayer area outline",
            description = "Draws an outline around the slayer locations.",
            section = slayerAreaOutline
    )
    default boolean enableSlayerAreaOutline() {
        return false;
    }

    @ConfigItem(
            position = 1,
            keyName = "slayerAreaOutlineColour",
            name = "Slayer area outline colour",
            description = "Select the colour for the slayer area outline",
            section = slayerAreaOutline
    )
    default Color getSlayerAreaOutlineColour() {
        return Color.decode("#DDFF00");
    }

    // Debug settings
    @ConfigSection(
            position = 3,
            name = "Debugging",
            closedByDefault = true,
            description = "Various debug settings"
    )
    String debugSettings = "debugSettings";

    @ConfigItem(
            position = 0,
            keyName = "debugTask",
            name = "Select a task",
            description = "Select a task to set as the current active task.",
            section = debugSettings
    )
    default DebugSlayerTask getDebugTask() {
        return DebugSlayerTask.None;
    }

    @ConfigItem(
            position = 1,
            keyName = "enableWorldPointSelector",
            name = "Enable WorldPoint selector",
            description = "Enables WorldPoint selector in the right click menu.",
            section = debugSettings
    )
    default boolean enableWorldPointSelector() {
        return false;
    }
}

/*
 * Copyright (c) 2025, wesley-221
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.turaelskipping;

import com.brastasauce.turaelskipping.models.NpcLocation;
import com.brastasauce.turaelskipping.models.SlayerTask;
import com.brastasauce.turaelskipping.utils.WorldAreaUtils;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.gameval.NpcID;

import java.util.List;
import java.util.Map;

public class SlayerTaskRegistry {
    private final static Map<String, SlayerTask> TURAEL_TASKS = Map.ofEntries(
            Map.entry("banshees", new SlayerTask("Banshees", List.of(NpcID.SLAYER_BANSHEE_1), List.of(
                            new WorldPoint(3442, 3542, 0)
                    ), List.of(
                            new NpcLocation("Morytania Slayer Tower", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3431, 3530, 0),
                                            new WorldPoint(3452, 3567, 0)
                                    )
                            ), new String[]{"Slayer Ring: Morytania Slayer Tower (Option 2)"})
                    ))
            ),
            Map.entry("bats", new SlayerTask("Bats", List.of(NpcID.SMALL_BAT), List.of(
                            new WorldPoint(3351, 3490, 0)
                    ), List.of(
                            new NpcLocation("Silvarea, North of Digsite", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3327, 3475, 0),
                                            new WorldPoint(3398, 3507, 0)
                                    )
                            ), new String[]{"Ring of the elements: Earth Altar (Option 3)", "Digsite pendant (Option 1)", "Digsite/Lumberyard teleport"})
                    ))
            ),
            Map.entry("bears", new SlayerTask("Bears", List.of(NpcID.BROWNBEAR), List.of(
                            new WorldPoint(2700, 3330, 0)
                    ), List.of(
                            new NpcLocation("South-west of Legends' Guild", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2687, 3318, 0),
                                            new WorldPoint(2722, 3351, 0)
                                    )
                            ), new String[]{"Fairy ring: BLR", "Quest Cape teleport"})
                    ))
            ),
            Map.entry("birds", new SlayerTask("Birds", List.of(NpcID.DUCK, NpcID.DUCK_FEMALE), List.of(
                            new WorldPoint(3178, 3359, 0)
                    ), List.of(
                            new NpcLocation("West of the Champions' Guild", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3153, 3337, 0),
                                            new WorldPoint(3202, 3362, 0)
                                    )
                            ), new String[]{"Chronicle teleport"})
                    ))
            ),
            Map.entry("cave bugs", new SlayerTask("Cave bugs", List.of(NpcID.SWAMP_CAVE_BUG), List.of(
                            new WorldPoint(3206, 3217, 0),
                            new WorldPoint(2786, 5318, 0)
                    ), List.of(
                            new NpcLocation("Dorgesh-Kaan South Dungeon", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2708, 5221, 0),
                                            new WorldPoint(2721, 5245, 0)
                                    )
                            ), new String[]{"Fairy ring: AJQ"})
                    ), "Bring a light source")
            ),
            Map.entry("cave crawlers", new SlayerTask("Cave Crawlers", List.of(NpcID.SLAYER_CAVE_CRAWLER_1, NpcID.SLAYER_CAVE_CRAWLER_2, NpcID.SLAYER_CAVE_CRAWLER_3, NpcID.SLAYER_CAVE_CRAWLER_4), List.of(
                            new WorldPoint(2789, 3617, 0),
                            new WorldPoint(2795, 9997, 0)
                    ), List.of(
                            new NpcLocation("Fremennik Slayer Dungeon", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2777, 9987, 0),
                                            new WorldPoint(2799, 10007, 0)
                                    )
                            ), new String[]{"Slayer ring: Fremennik Slayer Dungeon (Option 3)", "Fairy ring: AJR"})
                    ))
            ),
            Map.entry("cave slimes", new SlayerTask("Cave slimes", List.of(NpcID.SWAMP_CAVE_SLIME), List.of(
                            new WorldPoint(3206, 3217, 0),
                            new WorldPoint(2786, 5318, 0)
                    ), List.of(
                            new NpcLocation("Dorgesh-Kaan South Dungeon", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2692, 5227, 0),
                                            new WorldPoint(2708, 5242, 0)
                                    ),
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2722, 5232, 0),
                                            new WorldPoint(2735, 5239, 0)
                                    )
                            ), new String[]{"Fairy ring: AJQ"})
                    ), "Bring a light source")
            ),
            // My preferred area for this task, keep it for when alternative locations are added
//            Map.entry("cows", new SlayerTask("Cows", List.of(NpcID.AHOY_UNDEAD_COW), List.of(
//                            new NpcLocation("Alice's Farm, west of the Ectofuntus", List.of(
//                                    WorldAreaUtils.fromCorners(
//                                            new WorldPoint(3608, 3521, 0),
//                                            new WorldPoint(3637, 3534, 0)
//                                    )
//                            ), new String[]{"Ectophial: Empty"})
//                    ))
//            ),
            Map.entry("cows", new SlayerTask("Cows", List.of(
                            NpcID.COW,
                            NpcID.COW2,
                            NpcID.COW3,
                            NpcID.COW2_CALF,
                            NpcID.COW3_CALF), List.of(
                            new WorldPoint(3257, 3273, 0)
                    ), List.of(
                            new NpcLocation("Lumbridge", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3266, 3254, 0),
                                            new WorldPoint(3240, 3298, 0)
                                    )
                            ), new String[]{"Achievement diary cape: Lumbridge (Option B)", "Lumbridge teleport"})
                    ))
            ),
            Map.entry("crawling hands", new SlayerTask("Crawling Hands", List.of(
                            NpcID.SLAYER_CRAWLING_HAND_1,
                            NpcID.SLAYER_CRAWLING_HAND_2,
                            NpcID.SLAYER_CRAWLING_HAND_3,
                            NpcID.SLAYER_CRAWLING_HAND_4,
                            NpcID.SLAYER_CRAWLING_HAND_5,
                            NpcID.SLAYER_CRAWLING_HAND_BIG_1,
                            NpcID.SLAYER_CRAWLING_HAND_BIG_2,
                            NpcID.SLAYER_CRAWLING_HAND_BIG_3,
                            NpcID.SLAYER_CRAWLING_HAND_BIG_4,
                            NpcID.SLAYER_CRAWLING_HAND_BIG_5), List.of(
                            new WorldPoint(3419, 3571, 0)
                    ), List.of(
                            new NpcLocation("Morytania Slayer Tower", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3408, 3539, 0),
                                            new WorldPoint(3445, 3577, 0)
                                    )
                            ), new String[]{"Slayer Ring: Morytania Slayer Tower (Option 2)"})
                    ))
            ),
            Map.entry("dogs", new SlayerTask("Dogs", List.of(NpcID.ICS_LITTLE_JACKAL_ALT), List.of(
                            new WorldPoint(3347, 2783, 0)
                    ), List.of(
                            new NpcLocation("East of Sophanem", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3329, 2770, 0),
                                            new WorldPoint(3351, 2788, 0)
                                    )
                            ), new String[]{"Pharaoh's sceptre: Jaleustrophos (Option 2)"})
                    ))
            ),
            Map.entry("dwarves", new SlayerTask("Dwarves", List.of(NpcID.DWARF_MOUNTAIN), List.of(
                            new WorldPoint(2819, 3490, 0),
                            new WorldPoint(2863, 9878, 0)
                    ), List.of(
                            new NpcLocation("White Wolf Tunnel pub", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2856, 9867, 0),
                                            new WorldPoint(2872, 9885, 0)
                                    )
                            ), new String[]{"Construction cape: Taverley (Option 3)", "Re-direct house tab (Option 2)"})
                    ))
            ),
            Map.entry("ghosts", new SlayerTask("Ghosts", List.of(NpcID.KOUREND_GHOST1), List.of(
                            new WorldPoint(1639, 3673, 0),
                            new WorldPoint(1693, 10063, 0)
                    ), List.of(
                            new NpcLocation("Catacombs of Kourend", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(1680, 10053, 0),
                                            new WorldPoint(1703, 10070, 0)
                                    )
                            ), new String[]{"Achievement diary cape: Kourend Castle (Option A)", "Xeric's talisman: Xeric's Heart (Option 4)"})
                    ))
            ),
            // When getting a Goblin task from Aya, it is named "goblin", when you talk to her again after it is named "goblins"
            // When checking through slayer helm, it is named "goblins"
            Map.entry("goblin", createGoblinTask("Goblin")),
            Map.entry("goblins", createGoblinTask("Goblins")),
            Map.entry("icefiends", new SlayerTask("Icefiends", List.of(NpcID.SLAYER_ICEFIEND_1), List.of(
                            new WorldPoint(3007, 3475, 0)
                    ), List.of(
                            new NpcLocation("Ice Mountain", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2990, 3464, 0),
                                            new WorldPoint(3013, 3489, 0)
                                    )
                            ), new String[]{"Lassar teleport"})
                    ))
            ),
            Map.entry("kalphite", new SlayerTask("Kalphite", List.of(NpcID.KALPHITE_WORKER_STRONGHOLDCAVE), List.of(
                            new WorldPoint(3326, 3122, 0),
                            new WorldPoint(3372, 9528, 0),
                            new WorldPoint(3324, 9502, 0)
                    ), List.of(
                            new NpcLocation("Kalphite Cave", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3314, 9493, 0),
                                            new WorldPoint(3333, 9511, 0)
                                    ),
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3297, 9513, 0),
                                            new WorldPoint(3319, 9539, 0)
                                    )
                            ), new String[]{"Desert amulet 4: Kalphite cave"})
                    ))
            ),
            Map.entry("lizards", new SlayerTask("Lizards", List.of(NpcID.SLAYER_LIZARD_SMALL2_SANDY, NpcID.SLAYER_LIZARD_SMALL1_GREEN), List.of(
                            new WorldPoint(3413, 3035, 0)
                    ), List.of(
                            new NpcLocation("North of Nardah Fairy Ring", List.of(
                                    WorldAreaUtils.fromCorners(new WorldPoint(3392, 3027, 0), new WorldPoint(3423, 3049, 0)),
                                    WorldAreaUtils.fromCorners(new WorldPoint(3392, 3050, 0), new WorldPoint(3423, 3069, 0)),
                                    WorldAreaUtils.fromCorners(new WorldPoint(3424, 3050, 0), new WorldPoint(3451, 3069, 0)),
                                    WorldAreaUtils.fromCorners(new WorldPoint(3424, 3027, 0), new WorldPoint(3451, 3049, 0))
                            ), new String[]{"Fairy ring: DLQ"})
                    ), "Bring Ice coolers")
            ),
            Map.entry("minotaurs", new SlayerTask("Minotaurs", List.of(NpcID.SOS_WAR_MINOTAUR), List.of(
                            new WorldPoint(3084, 3417, 0),
                            new WorldPoint(1875, 5218, 0)
                    ), List.of(
                            new NpcLocation("Stronghold of Security", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(1869, 5210, 0),
                                            new WorldPoint(1885, 5223, 0)
                                    )
                            ), new String[]{"Skull sceptre: Invoke"})
                    ))
            ),
            Map.entry("monkeys", new SlayerTask("Monkeys", List.of(NpcID.MM2_MANIACAL_MONKEY_MAZE), List.of(
                            new WorldPoint(2713, 2794, 0)
                    ), List.of(
                            new NpcLocation("Kruk's Dungeon", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2306, 9141, 1),
                                            new WorldPoint(2332, 9163, 1)
                                    )
                            ), new String[]{"Gnome Glider: Ookookolly Undri"})
                    ), "Run south and open the trapdoor, bring a light source")
            ),
            Map.entry("rats", new SlayerTask("rats", List.of(NpcID.RAT, NpcID.DUNGEON_RAT), List.of(
                            new WorldPoint(3240, 3458, 0),
                            new WorldPoint(3237, 9866, 0)
                    ), List.of(
                            new NpcLocation("Varrock Sewers", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3218, 9857, 0),
                                            new WorldPoint(3252, 9875, 0)
                                    )
                            ), new String[]{"Achievement diary cape: Varrock (Option D)", "Varrock teleport"})
                    ))
            ),
            Map.entry("scorpions", new SlayerTask("Scorpions", List.of(NpcID.SCORPION), List.of(
                            new WorldPoint(3299, 3301, 0)
                    ), List.of(
                            new NpcLocation("Al Kharid Mines", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3288, 3273, 0),
                                            new WorldPoint(3309, 3320, 0)
                                    )
                            ), new String[]{"Ring of the elements: Fire Altar (Option 4)", "Ring of dueling: Emir's Arena (Option 1)"})
                    ))
            ),
            Map.entry("skeletons", new SlayerTask("Skeletons", List.of(
                            NpcID.SKELETON_UNARMED,
                            NpcID.SKELETON_UNARMED2,
                            NpcID.SKELETON_UNARMED3,
                            NpcID.SKELETON_UNARMED4
                    ), List.of(
                            new WorldPoint(3352, 3417, 0)
                    ), List.of(
                            new NpcLocation("Digsite Dungeon", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3359, 9739, 0),
                                            new WorldPoint(3387, 9757, 0)
                                    )
                            ), new String[]{"Digsite pendant (Option 1)", "Digsite teleport"})
                    ), "Bring a rope")
            ),
            Map.entry("spiders", new SlayerTask("Spiders", List.of(NpcID.SPIDER, NpcID.GIANTSPIDER1), List.of(
                            new WorldPoint(3168, 3244, 0)
                    ), List.of(
                            new NpcLocation("Outside H.A.M. Hideout", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3152, 3224, 0),
                                            new WorldPoint(3174, 3256, 0)
                                    )
                            ), new String[]{"Achievement diary cape: Twiggy O'Korn (Option G)", "Ornate Jewellery Box: Draynor Village (Option Q)", "Glory amulet: Draynor Village (Option 3)"})
                    ))
            ),
            Map.entry("wolves", new SlayerTask("Wolves", List.of(NpcID.WHITEWOLF_SENTRY, NpcID.WHITEWOLF, NpcID.WOLFPACK_LEADER_WHITER, NpcID.PACK_WOLF_WHITER), List.of(
                            new WorldPoint(2847, 3498, 0)
                    ), List.of(
                            new NpcLocation("White Wolf Mountain", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(2828, 3477, 0),
                                            new WorldPoint(2865, 3519, 0)
                                    )
                            ), new String[]{"Gnome Glider: Sindarpos"})
                    ))
            ),
            Map.entry("zombies", new SlayerTask("Zombies", List.of(NpcID.AHOY_UNDEAD_COW, NpcID.AHOY_UNDEAD_CHICKEN), List.of(
                            new WorldPoint(3630, 3530, 0)
                    ), List.of(
                            new NpcLocation("Alice's Farm, west of the Ectofuntus", List.of(
                                    WorldAreaUtils.fromCorners(
                                            new WorldPoint(3608, 3521, 0),
                                            new WorldPoint(3637, 3534, 0)
                                    )
                            ), new String[]{"Ectophial: Empty"})
                    ))
            )
    );

    public static SlayerTask getSlayerTaskByNpcName(String npcName) {
        return TURAEL_TASKS.get(npcName);
    }

    /**
     * Creates a Goblin slayer task
     *
     * @param name the name of the task, for goblins in specific this should be "goblin" and "goblins"
     * @return the goblin slayer task
     */
    private static SlayerTask createGoblinTask(String name) {
        return new SlayerTask(name, List.of(
                NpcID.GOBLIN_UNARMED_MELEE_1,
                NpcID.GOBLIN_UNARMED_MELEE_2,
                NpcID.GOBLIN_UNARMED_MELEE_3,
                NpcID.GOBLIN_UNARMED_MELEE_5,
                NpcID.GOBLIN_UNARMED_MELEE_6,
                NpcID.GOBLIN_UNARMED_MELEE_7,
                NpcID.GOBLIN_UNARMED_MELEE_8
        ), List.of(
                new WorldPoint(3145, 3301, 0)
        ), List.of(
                new NpcLocation("South-East of Draynor Manor", List.of(
                        WorldAreaUtils.fromCorners(
                                new WorldPoint(3132, 3291, 0),
                                new WorldPoint(3156, 3312, 0)
                        )
                ), new String[]{"Draynor manor teleport", "Ornate Jewellery Box: Draynor Village (Option Q)", "Glory amulet: Draynor Village (Option 3)"})
        ), "South of the Sourhog Cave");
    }
}

package com.brastasauce.turaelskipping;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TuraelSkippingTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(TuraelSkippingPlugin.class);
        RuneLite.main(args);
    }
}
