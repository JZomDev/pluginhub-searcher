package com.decimalprices;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DecimalPricesTest {
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(DecimalPrices.class);
    RuneLite.main(args);
  }
}
package com.decimalprices;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class DecimalPricesUnitTest {

  @Test
  public void testConversion() {
    // generic tests
    assertEquals(DecimalPricesUtil.transformDecimalPrice("1.2k"), String.valueOf(1_200));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("1.2m"), String.valueOf(1_200_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("1.2b"), String.valueOf(1_200_000_000));

    assertEquals(DecimalPricesUtil.transformDecimalPrice("32m"), String.valueOf(32_000_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.0m"), String.valueOf(32_000_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.1m"), String.valueOf(32_100_000));
    // previously failing due to floating point imprecision
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.2m"), String.valueOf(32_200_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.3m"), String.valueOf(32_300_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.4m"), String.valueOf(32_400_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.5m"), String.valueOf(32_500_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.6m"), String.valueOf(32_600_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.7m"), String.valueOf(32_700_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.8m"), String.valueOf(32_800_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.9m"), String.valueOf(32_900_000));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("32.333333m"), String.valueOf(32_333_333));
    // testing max num
    assertEquals(DecimalPricesUtil.transformDecimalPrice("2.147483647b"), String.valueOf(2_147_483_647));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("2.147483648b"), String.valueOf(2_147_483_647));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("9b"), String.valueOf(2_147_483_647));
    // testing small numbers
    assertEquals(DecimalPricesUtil.transformDecimalPrice("0k"), String.valueOf(0));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("0m"), String.valueOf(0));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("0b"), String.valueOf(0));
    assertEquals(DecimalPricesUtil.transformDecimalPrice("0.000001k"), String.valueOf(0));

    assertEquals(DecimalPricesUtil.transformDecimalPrice("1.234567890b"), String.valueOf(1_234_567_890));
  }

}

package com.decimalprices;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.VarClientInt;
import net.runelite.api.VarClientStr;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.input.KeyListener;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

@Slf4j
class DecimalPricesKeyListener implements KeyListener {

  @Inject
  private Client client;

  @Inject
  private ClientThread clientThread;

  private boolean isQuantityInput() {
        /*
        Determine user is typing into a quantity input field.
        Known types:
        2 Add friend input
        3 Delete friend input
        6 Send private message input
        7 Enter a quantity input (ge, bank, trade, coffer etc.)
         */
    return client.getVarcIntValue(VarClientInt.INPUT_TYPE) == 7;
  }

  private void convertQuantity() {
    final String rawInputText = client.getVarcStrValue(VarClientStr.INPUT_TEXT);
    // convert to lowercase for validation
    final String lowerInputText = rawInputText.toLowerCase();
    // ensure input matches exactly (any amount of numbers)period(any amount of numbers)[one of only k, m or b]
    if (!lowerInputText.matches("[0-9]+\\.[0-9]+[kmb]")) {
      return;
    }
    // convert the decimal input to an equivalent integer
    String transformedPrice = DecimalPricesUtil.transformDecimalPrice(lowerInputText);
    // set the newly converted integer before it is sent to the server
    clientThread.invoke(() -> {client.setVarcStrValue(VarClientStr.INPUT_TEXT, transformedPrice);});
  }

  private void addDecimalToInputText() {
    // take current input text and append a period (decimal)
    final String currentInputText = client.getVarcStrValue(VarClientStr.INPUT_TEXT);
    if (currentInputText.equals("")) {
      return;
    }
    // prevent adding more than one decimal
    if (currentInputText.contains(".")) {
      return;
    }
    String newInputText = currentInputText + ".";
    clientThread.invoke(() -> {client.setVarcStrValue(VarClientStr.INPUT_TEXT, newInputText);});
  }

  @Override
  public void keyPressed(KeyEvent e) {
    if (e.getKeyCode() == KeyEvent.VK_ENTER && isQuantityInput()) {
      // intercept quantity entry before it is sent to the server
      convertQuantity();
    } else if ((e.getKeyCode() == KeyEvent.VK_PERIOD || e.getKeyCode() == KeyEvent.VK_DECIMAL) && isQuantityInput()) {
      // allow typing of decimal in quantity input field which is otherwise not possible to do
      addDecimalToInputText();
    }
  }

  @Override
  public void keyReleased(KeyEvent e) {

  }

  @Override
  public void keyTyped(KeyEvent e) {

  }
}

package com.decimalprices;

import java.math.BigDecimal;

public class DecimalPricesUtil {

  private static final BigDecimal ONE_THOUSAND = new BigDecimal(1_000);
  private static final BigDecimal ONE_MILLION = new BigDecimal(1_000_000);
  private static final BigDecimal ONE_BILLION = new BigDecimal(1_000_000_000);
  private static final BigDecimal MAX = new BigDecimal(2_147_483_647);

  public static String transformDecimalPrice(String decimalPrice) {
    int priceStringLen = decimalPrice.length();
    // get the unit from the end of string, k (thousands), m (millions) or b (billions)
    char unit = decimalPrice.charAt(priceStringLen - 1);
    // get the number xx.xx without the unit and parse as a BigDecimal (for precision)
    BigDecimal amount = new BigDecimal(decimalPrice.substring(0, priceStringLen - 1));
    // multiply the number and the unit
    BigDecimal product;
    switch (unit) {
      case 'k':
        product = amount.multiply(ONE_THOUSAND);
        break;
      case 'm':
        product = amount.multiply(ONE_MILLION);
        break;
      case 'b':
        product = amount.multiply(ONE_BILLION);
        break;
      default:
        product = BigDecimal.ZERO;
        break;
    }
    // bound result to maximum allowable price
    if (product.compareTo(MAX) > 0) {
      product = MAX;
    }
    // cast the BigDecimal to an int, truncating anything after the decimal in the process
    int truncatedProduct = product.intValue();
    return String.valueOf(truncatedProduct);
  }

}

package com.decimalprices;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
  name = "Decimal Prices"
)
public class DecimalPrices extends Plugin {
  @Inject
  private Client client;

  @Inject
  private KeyManager keyManager;

  @Inject
  private DecimalPricesKeyListener inputListener;

  @Override
  protected void startUp() throws Exception {
    keyManager.registerKeyListener(inputListener);
    log.info("Decimal prices started!");
  }

  @Override
  protected void shutDown() throws Exception {
    keyManager.unregisterKeyListener(inputListener);
    log.info("Decimal prices stopped!");
  }

}

