package com.infinite.money.bag.tracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class infiniteMoneyBagTrackerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InfiniteMoneyBagTrackerPlugin.class);
		RuneLite.main(args);
	}
}
package com.infinite.money.bag.tracker;

import static com.infinite.money.bag.tracker.Helper.MONEY_BAG_ITEM_ID;
import static com.infinite.money.bag.tracker.Helper.formatCount;
import static com.infinite.money.bag.tracker.Helper.getCountColor;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import static net.runelite.api.widgets.WidgetID.EQUIPMENT_GROUP_ID;
import static net.runelite.api.widgets.WidgetID.KEPT_ON_DEATH_GROUP_ID;
import static net.runelite.api.widgets.WidgetID.LOOTING_BAG_GROUP_ID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.TextComponent;

public class InfiniteMoneyBagTrackerItemOverlay extends WidgetItemOverlay
{
	private InfiniteMoneyBagTrackerPlugin plugin;

	public InfiniteMoneyBagTrackerItemOverlay(InfiniteMoneyBagTrackerPlugin plugin) {
		this.plugin = plugin;
		showOnInventory();
		showOnBank();
		showOnInterfaces(KEPT_ON_DEATH_GROUP_ID, LOOTING_BAG_GROUP_ID, EQUIPMENT_GROUP_ID);
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		if(itemId == MONEY_BAG_ITEM_ID) {
			graphics.setFont(FontManager.getRunescapeSmallFont());
			int count = plugin.getGlobal();
			renderText(graphics, widgetItem.getCanvasBounds(), formatCount(count), getCountColor(count));
		}
	}


	private void renderText(Graphics2D graphics, Rectangle bounds, String text, Color color)
	{
		final TextComponent textComponent = new TextComponent();
		textComponent.setPosition(new Point(bounds.x + 0, bounds.y + 10));
		textComponent.setColor(color);
		textComponent.setText(text);
		textComponent.render(graphics);
	}
}

package com.infinite.money.bag.tracker;

import java.awt.Color;

public class Helper
{
	public final static String MONEY_BAG_SUCCESS_MESSAGE = "You've obtained a single coin! Wow!";
	public static int MONEY_BAG_ITEM_ID = 27440;

	static Color getCountColor(int count) {
		Color color;
		if (count < 100000) {
			color = new Color(0xFF, 0xFF, 0x00);
		} else if (count < 10000000) {
			color = new Color(0xFF, 0xFF, 0xFF);
		} else {
			color = new Color(0x00, 0xFF, 0x80);
		}
		return color;
	}

	static String formatCount(int count) {
		String text;
		if (count < 100000) {
			text = String.valueOf(count);
		} else if (count < 10000000) {
			text = (count / 1000) + "K";
		} else {
			text = (count / 1000000) + "M";
		}
		return text;
	}
}

package com.infinite.money.bag.tracker;

import com.google.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import static net.runelite.api.widgets.WidgetID.EQUIPMENT_GROUP_ID;
import static net.runelite.api.widgets.WidgetID.KEPT_ON_DEATH_GROUP_ID;
import static net.runelite.api.widgets.WidgetID.LOOTING_BAG_GROUP_ID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.QuantityFormatter;

public class InfiniteMoneyBagTrackerHoverOverlay extends Overlay
{
	private InfiniteMoneyBagTrackerPlugin plugin;

	private TooltipManager tooltipManager;

	private Client client;


	public InfiniteMoneyBagTrackerHoverOverlay(InfiniteMoneyBagTrackerPlugin plugin, Client client, TooltipManager tooltipManager) {
		this.plugin = plugin;
		this.client = client;
		this.tooltipManager = tooltipManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (client.isMenuOpen())
		{
			return null;
		}
		final MenuEntry[] menu = client.getMenuEntries();
		final int menuSize = menu.length;
		if (menuSize <= 0)
		{
			return null;
		}
		final MenuEntry entry = menu[menuSize - 1];
		final Widget widget = entry.getWidget();
		if (widget == null)
		{
			return null;
		}

		final int group = WidgetInfo.TO_GROUP(widget.getId());
		int itemId = -1;
		if (group == WidgetInfo.EQUIPMENT.getGroupId() ||
			// For bank worn equipment, check widget parent to differentiate from normal bank items
			(group == WidgetID.BANK_GROUP_ID && widget.getParentId() == WidgetInfo.BANK_EQUIPMENT_CONTAINER.getId()))
		{
			final Widget widgetItem = widget.getChild(1);
			if (widgetItem != null)
			{
				itemId = widgetItem.getItemId();
			}
		}
		else if (widget.getId() == WidgetInfo.INVENTORY.getId()
			|| group == WidgetInfo.EQUIPMENT_INVENTORY_ITEMS_CONTAINER.getGroupId()
			|| widget.getId() == WidgetInfo.BANK_ITEM_CONTAINER.getId()
			|| group == WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER.getGroupId()
			|| widget.getId() == WidgetInfo.GROUP_STORAGE_ITEM_CONTAINER.getId()
			|| group == WidgetID.GROUP_STORAGE_INVENTORY_GROUP_ID)
		{
			itemId = widget.getItemId();
		}
		if (itemId == -1)
		{
			return null;
		}

		if(itemId == Helper.MONEY_BAG_ITEM_ID) {
			tooltipManager.add(new Tooltip(String.format("Global: %s", QuantityFormatter.formatNumber(plugin.getGlobal()))));
			tooltipManager.add(new Tooltip(String.format("Session: %s", QuantityFormatter.formatNumber(plugin.getThisSession()))));
		}

		return null;
	}
}

package com.infinite.money.bag.tracker;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

@Slf4j
@PluginDescriptor(
	name = "Infinite Money Bag Tracker",
	description = "",
	tags = {"Infinite money bag"}
)
public class InfiniteMoneyBagTrackerPlugin extends Plugin
{
	@Inject private OverlayManager overlayManager;
	@Inject private TooltipManager tooltipManager;
	@Inject private Client client;
	@Inject private ConfigManager configManager;
	@Inject private Gson gson;

	private static final String CONFIG_GROUP = "infinitemoneybagtracker";
	private static final String CONFIG_KEY = "tracker";

	private InfiniteMoneyBagTrackerItemOverlay itemOverlay;
	private InfiniteMoneyBagTrackerHoverOverlay hoverOverlay;

	Map<String, Integer> tracker;

	private int thisSession = 0;

	@Override
	protected void startUp() throws Exception
	{
		loadFromConfig();
		itemOverlay = new InfiniteMoneyBagTrackerItemOverlay(this);
		overlayManager.add(itemOverlay);
		hoverOverlay = new InfiniteMoneyBagTrackerHoverOverlay(this, client, tooltipManager);
		overlayManager.add(hoverOverlay);
		thisSession = 0;
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(itemOverlay);
		overlayManager.remove(hoverOverlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if(gameStateChanged.getGameState() == GameState.LOGGING_IN) {
			thisSession = 0;
		}
	}


	@Subscribe
	public void onChatMessage(ChatMessage chat) {
		if(chat.getMessage().equals(Helper.MONEY_BAG_SUCCESS_MESSAGE)) {
			iterate();
		}
	}

	private void iterate() {
		Integer globalCount = tracker.get("global");
		int newGlobalCount = globalCount == null ? 1 : globalCount + 1;
		tracker.put("global", newGlobalCount);

		String hash = String.valueOf(client.getAccountHash());
		Integer account = tracker.get(hash);
		int newHashCount = account == null ? 1 : account + 1;
		tracker.put(hash, newHashCount);

		thisSession++;
		saveToConfig();
	}

	public int getThisSession()
	{
		return thisSession;
	}

	public int getGlobal()
	{
		Integer value = tracker.get("global");
		return value == null ? 0 : value;
	}

	// Lodas config, merges by boss name, and saves to bossDatabase
	private void loadFromConfig() {
		String json = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY);
		tracker = stringToTracker(json);
		if(tracker == null) {
			tracker = new HashMap<String, Integer>();
		}
		saveToConfig();
	}

	// Saves the current bossDatabase to config
	private void saveToConfig() {
		configManager.unsetConfiguration(CONFIG_GROUP, CONFIG_KEY);
		String json = gson.toJson(tracker);
		configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY, json);
	}

	private Map<String, Integer>stringToTracker(String string) {
		TypeToken<HashMap<String, Integer>> typeToken = new TypeToken<HashMap<String, Integer>>() {};
		HashMap<String, Integer> hashMap = gson.fromJson(string, typeToken.getType());
		return hashMap;
	}
}

