package com.echoresourcetracker;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;

@Slf4j
@PluginDescriptor(
        name = "Echo Resource Tracker",
        description = "Track the resources being sent to your bank from your echo tools.",
        tags = {"raging", "echo", "leagues", "tracker"}

)
public class ERTPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    @Getter
    private ERTConfig config;

    @Inject
    private ItemManager itemManager;

    @Inject
    private InfoBoxManager infoBoxManager;

    private HashMap<Integer, ResourceInfoBox> boxMap;

    @Override
    protected void startUp() throws Exception {
        boxMap = new HashMap<Integer, ResourceInfoBox>();
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() == ChatMessageType.SPAM) {
            String msg = chatMessage.getMessage();
            if (msg.contains("you would have gained, giving you a total of")) {
                try {
                    String[] split = msg.split(" you would have gained, giving you a total of ");
                    String itemStr = split[0].substring(13);
                    String amountStr = split[1].replace(",", "").replace(".", "");
                    if (UntradableResource.fromString(itemStr) != null) {
                        updateResource(UntradableResource.fromString(itemStr).getItemID(), Integer.parseInt(amountStr));
                    } else {
                        updateResource(itemManager.search(itemStr).get(0).getId(), Integer.parseInt(amountStr));
                    }
                } catch (Exception e) {
                }
            }
        }
    }


    @Subscribe
    public void onGameTick(GameTick gameTick) {
        boxMap.values().stream().filter(box -> !box.isHidden() && Instant.now().isAfter(box.getLastUpdated().plus(Duration.ofSeconds(config.cooldown())))).forEach(box -> {
            box.setHidden(true);
            infoBoxManager.removeInfoBox(box);
        });
    }

    @Provides
    ERTConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ERTConfig.class);
    }

    public void updateResource(int itemID, int amount) {
        ResourceInfoBox infoBox = boxMap.get(itemID);
        if (infoBox == null) {
            infoBox = new ResourceInfoBox(itemManager.getImage(itemID), this, itemManager.getItemComposition(itemID).getName());
            boxMap.put(itemID, infoBox);
        }

        infoBox.setAmount(amount);
        infoBox.setLastUpdated(Instant.now());
        if (infoBox.isHidden()) {
            infoBox.setHidden(false);
            infoBoxManager.addInfoBox(infoBox);
        }
    }
}
package com.echoresourcetracker;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.util.QuantityFormatter;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Instant;

public class ResourceInfoBox extends InfoBox {
    private final String itemName;
    @Setter
    private int amount;

    @Getter
    @Setter
    private Instant lastUpdated;

    @Getter
    @Setter
    private boolean hidden = true;

    public ResourceInfoBox(BufferedImage image, ERTPlugin plugin, String itemName) {
        super(image, plugin);
        this.itemName = itemName;
    }


    @Override
    public String getText() {
        return QuantityFormatter.quantityToRSDecimalStack(amount);
    }

    @Override
    public Color getTextColor() {
        return Color.WHITE;
    }

    @Override
    public String getTooltip() {
        return itemName;
    }
}

package com.echoresourcetracker;

import lombok.Getter;
import net.runelite.api.ItemID;

public enum UntradableResource {

    //Mining
    STARDUST("Stardust", ItemID.STARDUST),
    BARRONITE("Barronite shards", ItemID.BARRONITE_SHARDS),
    PAYDIRT("Pay-dirt", ItemID.PAYDIRT),

    //Woodcutting
    BLISTERWOOD_LOGS("Blisterwood logs", ItemID.BLISTERWOOD_LOGS),

    //Fishing
    KARAMBWANJI("Karambwanji", ItemID.KARAMBWANJI),
    MINNOWS("Minnow", ItemID.MINNOW),
    SACRED_EEL("Sacred eel", ItemID.SACRED_EEL),
    INFERNAL_EEL("Infernal eel", ItemID.INFERNAL_EEL);

    @Getter
    final String itemName;
    @Getter
    final int itemID;

    UntradableResource(String itemName, int itemID) {
        this.itemName = itemName;
        this.itemID = itemID;
    }

    public static UntradableResource fromString(String filter) {
        for (UntradableResource res : values()) {
            if (res.getItemName().equalsIgnoreCase(filter))
                return res;
        }
        return null;
    }
}
package com.echoresourcetracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("echoresourcetracker")
public interface ERTConfig extends Config
{
	@ConfigItem(
		keyName = "cooldown",
		name = "Hide after",
		description = "How long should the widget stay on screen (seconds)"
	)
	default int cooldown()
	{
		return 300;
	}
}

package com.echoresourcetracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ERTPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ERTPlugin.class);
		RuneLite.main(args);
	}
}
