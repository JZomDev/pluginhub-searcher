package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CCClogSpamHiderPlugin.class);
		RuneLite.main(args);
	}
}
package com.example;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

@Slf4j
@PluginDescriptor(
	name = "CC Clog Spam Hider"
)
public class CCClogSpamHiderPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private CCClogSpamHiderConfig config;

	@Provides
	CCClogSpamHiderConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CCClogSpamHiderConfig.class);
	}

	private final String ccClogMessage = "received a new collection log item:";
	private final ArrayList<String> fossilNotes = new ArrayList<String>(Arrays.asList("Scribbled note", "Partial note", "Ancient note", "Ancient writings", "Experimental note", "Paragraph of text", "Musty smelling note", "Hastily scrawled note", "Old writing", "Short note"));
	private final ArrayList<String> troubleBrewing = new ArrayList<>(Arrays.asList("naval shirt", "tricorn hat", "navy slacks", "flag", "Rum", "The stuff"));
	private final ArrayList<String> castleWars = new ArrayList<>(Arrays.asList("Decorative", "Castlewars", "Saradomin banner", "Zamorak banner", "Saradomin halo", "Zamorak halo", "Guthix halo"));
	private final ArrayList<String> sharedClueItems = new ArrayList<>(Arrays.asList("Saradomin page", "Zamorak page", "Guthix page", "Bandos page", "Armadyl page", "Ancient page 1", "Ancient page 2", "Ancient page 3", "Ancient page 4", "blessing", "teleport", "firelighter", "Purple sweets", "Charge dragonstone", "Master scroll book"));
	private final ArrayList<String> beginnerClueItems = new ArrayList<>(Arrays.asList("Mole slippers", "Frog slippers", "Bear feet", "Demon feet", "Jester cape", "Shoulder parrot", "Monk's robe top (t)", "Monk's robe (t)", "Sandwich lady", "Rune scimitar ornament kit", "Black pickaxe"));
	private final ArrayList<String> easyClueItems = new ArrayList<>(Arrays.asList("Golden chef's hat", "Golden apron", "Wooden shield (g)", "Black full helm", "Black plate", "Black kiteshield", "Black shield", "Black helm", "Steel full helm", "Steel plate", "Steel kiteshield", "Iron full helm", "Iron plate", "Iron kiteshield", "Bronze full helm", "Bronze plate", "Bronze kiteshield", "Studded", "wizard hat", "wizard robe (", "skirt (", "Saradomin robe", "Guthix robe", "Zamorak robe", "Ancient robe", "Armadyl robe", "Bandos robe", "Bob's", "Highwayman", "beret", "powdered wig", "Beanie", "Imp mask", "Goblin mask", "Sleeping cap", "Flared trousers", "Pantaloons", "Black cane", "bob the cat", "Red elegant", "Blue elegant", "magic (t)", "power (t)", "Black pickaxe", "Ham joint", "Rain bow", "Willow comp"));
	private final ArrayList<String> mediumClueItems = new ArrayList<>(Arrays.asList("Adamant full", "Ancient stole", "Adamant plate", "Adamant kiteshield", "Adamant shield", "Adamant helm", "Mithril full", "Mithril plate", "Mithril kiteshield", "Green d'hide", "mitre", "Saradomin cloak", "Guthix cloak", "Zamorak cloak", "Ancient cloak", "Armadyl cloak", "Bandos cloak", "Acient stole", "Ancient crozier", "Armadyl stole", "Armadyl crozier", "Bandos stole", "Bandos crozier", "boater", "headband", "Crier", "Penguin mask", "eprechaun hat", "Wolf mask", "Wolf cloak", "Purple elegant", "Black elegant", "White elegant", "Pink elegant", "Gold elegant", "Gnomish", "Strength amulet (t)", "Yew comp", "banner", "Cabbage round", "unicorn mask", "Adamant cane", "Cat mask"));
	private final ArrayList<String> hardClueItems = new ArrayList<>(Arrays.asList("Robin hood", "Bandos chaps", "Dragon boots ornament", "Rune defender ornament", "-om ornament", "Berserker necklace ornament", "Rune full", "Rune plate", "Rune kite", "Zamorak full", "Zamorak plate", "Zamorak kite", "Guthix full", "Guthix plate", "Guthix kite", "Saradomin full", "Saradomin plate", "Saradomin kite", "Acient full", "Ancient plate", "Ancient kite", "Bandos full", "Bandos plate", "Bandos kite", "Rune shield", "Rune helm", "Saradomin coif", "Saradomin d'hide", "bracers", "Guthix coif", "Guthix d'hide", "Zamorak coif", "Zamorak d'hide", "Bandos coif", "Bandos d'hide", "Armadyl coif", "Armadyl d'hide", "Ancient coif", "Ancient d'hide", "Red d'hide", "Blue d'hide", "Enchanted", "Saradomin stole", "Zamorak stole", "Guthix stole", "Saradomin crozier", "Zamorak crozier", "Guthix crozier", "Zombie head", "Cyclops head", "Pirate's hat", "cavalier", "Pith helmet", "Explorer backpack", "Thieving sack", "Green dragon", "Blue dragon", "Red dragon", "Black dragon", "Nunchaku", "Dual sai", "Rune cane", "glory (", "Magic comp"));
	private final ArrayList<String> eliteClueItems = new ArrayList<>(Arrays.asList("Fury ornament", "chainbody ornament", "Dragon legs/", "sq shield ornament", "full helm ornament", "Dragon scimitar ornament", "infinity colour", "Holy wraps", "Ranger gloves", "Ranger's", "Black d'hide", "Royal", "Musketeer", "Arceuus scarf", "Hosidius scarf", "Piscarilius scarf", "Shayzien scarf", "Lovakengj scarf", "Bronze dragon", "Iron dragon", "Steel dragon", "Mithril dragon", "Adamant dragon", "Rune dragon", "Katana", "Dragon cane", "Briefcase", "Blacksmith's helm", "Deerstalker", "Afro", "Big pirate hat", "Top hat", "Monocle", "Sagacious", "Fremennik kilt", "Giant boot", "Uri's hat"));
	private final ArrayList<String> masterClueItems = new ArrayList<>(Arrays.asList("godsword ornament", "Occult ornament", "Torture ornament", "Anguish ornament", "Dragon defender ornament", "Tormented ornament", "of darkness", "Samurai ", "Shayzien hood", "Hosidius hood", "Arceuus hood", "Piscarilius hood", "Lovakengj hood", "demon mask", "Left eye patch", "Bowl wig", "Ale of the gods", "cape (r)", "moon spectacles", "Fancy tiara"));
	private final ArrayList<String> forestryItems = new ArrayList<>(Arrays.asList("Fox whistle", "Forestry", "Lumberjack", "Twitcher's gloves", "Funky shaped log", "Log basket", "Log brace", "Clothes pouch", "Cape pouch", "Felling axe handle", "Pheasant", "Petal garland"));

	//Source: ChatFilter plugin
	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent event){
		if (!event.getEventName().equals("chatFilterCheck")) return;

		int[] intStack = client.getIntStack();
		int intStackSize = client.getIntStackSize();
		String[] stringStack = client.getStringStack();
		int stringStackSize = client.getStringStackSize();


		final int messageType = intStack[intStackSize - 2];
		String message = stringStack[stringStackSize - 1];
		ChatMessageType chatMessageType = ChatMessageType.of(messageType);

		if (chatMessageType != ChatMessageType.CLAN_MESSAGE
				|| !message.toLowerCase(Locale.ROOT).contains(ccClogMessage)){
			return;
		}

		boolean spam = false;

		if (config.fossilNotes() && !spam)
		{
			for (String s : fossilNotes){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.chompyHats() && !spam){
			if (message.contains("Chompy bird hat"))
				spam = true;
		}
		if (config.agilityArena() && !spam){
			if (message.contains("Graceful")){
				spam = true;
			}
		}
		if (config.troubleBrewing() && !spam){
			for (String s : troubleBrewing){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.castleWars() && !spam){
			for (String s : castleWars){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.sharedClueLog() && !spam){
			for (String s : sharedClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.beginnerClueLog() && !spam){
			for (String s : beginnerClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.easyClueLog() && !spam){
			for (String s : easyClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.mediumClueLog() && !spam){
			for (String s : mediumClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.hardClueLog() && !spam){
			for (String s : hardClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.eliteClueLog() && !spam){
			for (String s : eliteClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
			//Fun edge case as Bucket helm (g) is a megarare
			if (extractItemFromMessage(message).equals("Bucket helm")){
				spam = true;
			}
		}
		if (config.masterClueLog() && !spam){
			for (String s : masterClueItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}
		if (config.myNotesLog() && !spam){
			if (extractItemFromMessage(message).equals("Ancient page")){
				spam = true;
			}
		}
		if (config.forestryLog() && !spam){
			for (String s : forestryItems){
				if (message.contains(s)){
					spam = true;
					break;
				}
			}
		}

		if (spam){
			intStack[intStackSize - 3] = 0;
		}

	}

	private String extractItemFromMessage(String s) {
		return s.substring(s.indexOf(":")+ 1 ).substring(0, s.indexOf("(")).strip();
	}

}

package com.example;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("CCClogSpamHider")
public interface CCClogSpamHiderConfig extends Config
{
	@ConfigSection (
			name = "Minigames",
			description = "Hide collection log broadcasts from minigames",
			position = 0
	)
	String minigamesSection = "minigames";

	@ConfigSection(
			name = "Clue Scrolls",
			description = "Hide collection log broadcasts from clue scrolls",
			position = 1
	)
	String cluesSection = "clues";

	@ConfigSection(
			name = "Other",
			description = "Hide other collection log broadcasts",
			position = 2
	)
	String otherSection = "other";

	@ConfigItem(
			keyName = "fossilNotes",
			name = "Hide Fossil Island Notes",
			description = "Hide Fossil island notes Collection log CC broadcasts",
			section = otherSection
	)
	default boolean fossilNotes(){
		return true;
	}

	@ConfigItem(
			keyName = "chompyHats",
			name = "Hide Chompy hats",
			description = "Hide Chompy bird hats Collection log CC broadcasts",
			section = otherSection
	)
	default boolean chompyHats(){
		return true;
	}

	@ConfigItem(
			keyName = "castleWars",
			name = "Castle Wars",
			description = "Hide Castle Wars Collection log CC broadcasts ",
			section = minigamesSection
	)
	default boolean castleWars() { return false; }

	@ConfigItem(
			keyName = "troubleBrewing",
			name = "Trouble Brewing",
			description = "Hide Trouble Brewing Collection log CC broadcasts ",
			section = minigamesSection
	)
	default boolean troubleBrewing() { return false; }

	@ConfigItem(
			keyName = "agilityArena",
			name = "Agility Arena/Graceful",
			description = "Hide Agility Arena and Graceful Collection log CC broadcasts ",
			section = minigamesSection
	)
	default boolean agilityArena() { return false; }

	@ConfigItem(
			keyName = "sharedClueLog",
			name = "Shared Clue Rewards",
			description = "Hide Shared Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 0
	)
	default boolean sharedClueLog() {return true;}

	@ConfigItem(
			keyName = "beginnerClueLog",
			name = "Beginner Clue Rewards",
			description = "Hide Beginner Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 1
	)
	default boolean beginnerClueLog() {return false;}

	@ConfigItem(
			keyName = "easyClueLog",
			name = "Easy Clue Rewards",
			description = "Hide Easy Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 2
	)
	default boolean easyClueLog() {return false;}

	@ConfigItem(
			keyName = "mediumClueLog",
			name = "Medium Clue Rewards",
			description = "Hide Medium Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 3
	)
	default boolean mediumClueLog() {return false;}

	@ConfigItem(
			keyName = "HardClueLog",
			name = "Hard Clue Rewards",
			description = "Hide Hard Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 4
	)
	default boolean hardClueLog() {return false;}

	@ConfigItem(
			keyName = "eliteClueLog",
			name = "Elite Clue Rewards",
			description = "Hide Elite Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 5
	)
	default boolean eliteClueLog() {return false;}

	@ConfigItem(
			keyName = "masterClueLog",
			name = "Master Clue Rewards",
			description = "Hide Master Clue Rewards Collection log cc broadcasts",
			section = cluesSection,
			position = 6
	)
	default boolean masterClueLog() {return false;}

	@ConfigItem(
			keyName = "myNotes",
			name = "My Notes",
			description = "Hide My Notes Collection log cc broadcasts",
			section = otherSection
	)
	default boolean myNotesLog() {return true;}

	@ConfigItem(
			keyName = "forestry",
			name = "Forestry",
			description = "Hide Forestry Collection log cc broadcasts",
			section = otherSection
	)
	default boolean forestryLog() {return true;}

}

