package com.iplank.fakestats;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FakeStatsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FakeStatsPlugin.class);
		RuneLite.main(args);
	}
}

package com.iplank.fakestats;

import net.runelite.api.Skill;

public class ConfigGenerator {
    static int i = -1;
    public static void main(String[] args)
    {
        String s = "\t// begin autogenerated\n";
        s += generateConfig(Skill.ATTACK);
        s += generateConfig(Skill.STRENGTH);
        s += generateConfig(Skill.DEFENCE);
        s += generateConfig(Skill.RANGED);
        s += generateConfig(Skill.PRAYER);
        s += generateConfig(Skill.MAGIC);
        s += generateConfig(Skill.RUNECRAFT);
        s += generateConfig(Skill.CONSTRUCTION);
        s += generateConfig(Skill.HITPOINTS);
        s += generateConfig(Skill.AGILITY);
        s += generateConfig(Skill.HERBLORE);
        s += generateConfig(Skill.THIEVING);
        s += generateConfig(Skill.CRAFTING);
        s += generateConfig(Skill.FLETCHING);
        s += generateConfig(Skill.SLAYER);
        s += generateConfig(Skill.HUNTER);
        s += generateConfig(Skill.MINING);
        s += generateConfig(Skill.SMITHING);
        s += generateConfig(Skill.FISHING);
        s += generateConfig(Skill.COOKING);
        s += generateConfig(Skill.FIREMAKING);
        s += generateConfig(Skill.WOODCUTTING);
        s += generateConfig(Skill.FARMING);
        s += "\t// end autogenerated\n";
        System.out.println(s);
    }

    private static String generateConfig(Skill skill) {
        String skillLowercase = skill.getName().toLowerCase();
        String skillName = skill.getName();

        i++;
        String configChunkSection =
                "\t@ConfigSection(" + "\n" +
                        "\t\tname = \"" + skillName + "\"," + "\n" +
                        "\t\tdescription = \"Configure the " + skillName + " skill\"," + "\n" +
                        "\t\tclosedByDefault = true," + "\n" +
                        "\t\tposition = " + i + "\n" +
                        "\t)" + "\n" +
                        "\tString " + skillLowercase + " = \"" + skillLowercase + "\";" + "\n\n";
        i++;
        String configChunkItem1 =
                "\t@ConfigItem(" + "\n" +
                        "\t\tkeyName = \"spoof" + skillName + "\"," + "\n" +
                        "\t\tname = \"Spoof " + skillName + "\"," + "\n" +
                        "\t\tdescription = \"Whether or not to Spoof " + skillName + "\"," + "\n" +
                        "\t\tsection = " + skillLowercase + "," + "\n" +
                        "\t\tposition = " + i + "\n" +
                        "\t)" + "\n" +
                        "\tdefault boolean spoof" + skillName + "() { return false; }" + "\n\n";
        i++;
        String configChunkItem2 =
                "\t@Range(" + "\n" +
                        "\t\tmin = 1," + "\n" +
                        "\t\tmax = 126" + "\n" +
                        "\t)" + "\n" +
                        "\t@ConfigItem(" + "\n" +
                        "\t\tkeyName = \"" + skillLowercase + "Level\"," + "\n" +
                        "\t\tname = \"Level to Spoof\"," + "\n" +
                        "\t\tdescription = \"What Level to Spoof " + skillName + " to\"," + "\n" +
                        "\t\tsection = " + skillLowercase + "," + "\n" +
                        "\t\tposition = " + i + "\n" +
                        "\t)" + "\n" +
                        "\tdefault int " + skillLowercase + "Level() { return 99; }" + "\n\n";
        return configChunkSection + configChunkItem1 + configChunkItem2;
    }
}

package com.iplank.fakestats;

import net.runelite.api.Skill;

public class FakeTotalSpoofGenerator {
    static int i = 0;
    public static void main(String[] args)
    {
        String s = "\t\t\t// begin autogenerated\n";
        s += generateChunk(Skill.ATTACK);
        s += generateChunk(Skill.STRENGTH);
        s += generateChunk(Skill.DEFENCE);
        s += generateChunk(Skill.RANGED);
        s += generateChunk(Skill.PRAYER);
        s += generateChunk(Skill.MAGIC);
        s += generateChunk(Skill.RUNECRAFT);
        s += generateChunk(Skill.CONSTRUCTION);
        s += generateChunk(Skill.HITPOINTS);
        s += generateChunk(Skill.AGILITY);
        s += generateChunk(Skill.HERBLORE);
        s += generateChunk(Skill.THIEVING);
        s += generateChunk(Skill.CRAFTING);
        s += generateChunk(Skill.FLETCHING);
        s += generateChunk(Skill.SLAYER);
        s += generateChunk(Skill.HUNTER);
        s += generateChunk(Skill.MINING);
        s += generateChunk(Skill.SMITHING);
        s += generateChunk(Skill.FISHING);
        s += generateChunk(Skill.COOKING);
        s += generateChunk(Skill.FIREMAKING);
        s += generateChunk(Skill.WOODCUTTING);
        s += generateChunk(Skill.FARMING);
        s += "\t\t\t// end autogenerated\n";
        System.out.println(s);
    }

    private static String generateChunk(Skill skill) {
        String skillUppercase = skill.getName().toUpperCase();
        String skillLowercase = skill.getName().toLowerCase();
        String skillName = skill.getName();

        i++;
        String totalChunk =
                "\t\t\tif (cachedConfig.spoof" + skillName + ") {" + "\n" +
                "\t\t\t\tif (cachedConfig." + skillLowercase + "Level <= 99) {" + "\n" +
                "\t\t\t\t\ttotal += cachedConfig." + skillLowercase +  "Level;" + "\n" +
                "\t\t\t\t} else if (cachedConfig."+ skillLowercase + "Level > 99 && cachedConfig." + skillLowercase + "Level <= 126 && cachedConfig.virtualTotal) {" + "\n" +
                "\t\t\t\t\ttotal += cachedConfig." + skillLowercase +  "Level;" + "\n" +
                "\t\t\t\t} else if (cachedConfig."+ skillLowercase + "Level > 126 && cachedConfig.virtualTotal) {" + "\n" +
                "\t\t\t\t\ttotal += 126;" + "\n" +
                "\t\t\t\t} else if (cachedConfig." + skillLowercase + "Level > 99) {" + "\n" +
                "\t\t\t\t\ttotal += 99;" + "\n" +
                "\t\t\t\t}" + "\n" +
                "\t\t\t} else {" + "\n" +
                "\t\t\t\ttotal += client.getRealSkillLevel(Skill." + skillUppercase + ");" + "\n" +
                "\t\t\t}" + "\n";
        return totalChunk;
    }
}

package com.iplank.fakestats;

import net.runelite.api.Skill;

public class PluginGenerator {
    static int i = 0;
    public static void main(String[] args)
    {
        String s = "\t\t// begin autogenerated\n";
        s += generatePlugin(Skill.ATTACK, 1);
        s += generatePlugin(Skill.STRENGTH, 2);
        s += generatePlugin(Skill.DEFENCE, 3);
        s += generatePlugin(Skill.RANGED, 4);
        s += generatePlugin(Skill.PRAYER, 5);
        s += generatePlugin(Skill.MAGIC, 6);
        s += generatePlugin(Skill.RUNECRAFT, 7);
        s += generatePlugin(Skill.CONSTRUCTION, 8);
        s += generatePlugin(Skill.HITPOINTS, 9);
        s += generatePlugin(Skill.AGILITY, 10);
        s += generatePlugin(Skill.HERBLORE, 11);
        s += generatePlugin(Skill.THIEVING, 12);
        s += generatePlugin(Skill.CRAFTING, 13);
        s += generatePlugin(Skill.FLETCHING, 14);
        s += generatePlugin(Skill.SLAYER, 15);
        s += generatePlugin(Skill.HUNTER, 16);
        s += generatePlugin(Skill.MINING, 17);
        s += generatePlugin(Skill.SMITHING, 18);
        s += generatePlugin(Skill.FISHING, 19);
        s += generatePlugin(Skill.COOKING, 20);
        s += generatePlugin(Skill.FIREMAKING, 21);
        s += generatePlugin(Skill.WOODCUTTING, 22);
        s += generatePlugin(Skill.FARMING, 23);
        s += "\t\t// end autogenerated\n";
        System.out.println(s);
    }

    private static String generatePlugin(Skill skill, int childId) {
        String skillLowercase = skill.getName().toLowerCase();
        String skillName = skill.getName();

        i++;
        String pluginChunk =
                "\t\t// " + skillName + " Logic" + "\n" +
                "\t\tif (cachedConfig.spoof" + skillName +  ") {" + "\n" +
                "\t\t\tWidget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, " + i + ");" + "\n" +
                "\t\t\tif (skillWidget == null) { return; }" + "\n" +
                "\t\t\tWidget[] skillWidgetComponents = skillWidget.getDynamicChildren();" + "\n" +
                "\t\t\tif (skillWidgetComponents.length >= 4) {" + "\n" +
                "\t\t\t\tif (cachedConfig." + skillLowercase + "Level > 99) {" + "\n" +
                "\t\t\t\t\tif (cachedConfig.virtualLevels) {" + "\n" +
                "\t\t\t\t\t\tskillWidgetComponents[3].setText(\"\" + 99);" + "\n" +
                "\t\t\t\t\t\tskillWidgetComponents[4].setText(\"\" + cachedConfig." + skillLowercase + "Level);" + "\n" +
                "\t\t\t\t\t} else {" + "\n" +
                "\t\t\t\t\t\tskillWidgetComponents[3].setText(\"\" + 99);" + "\n" +
                "\t\t\t\t\t\tskillWidgetComponents[4].setText(\"\" + 99);" + "\n" +
                "\t\t\t\t\t}" + "\n" +
                "\t\t\t\t} else {" + "\n" +
                "\t\t\t\t\tskillWidgetComponents[3].setText(\"\" + cachedConfig." + skillLowercase + "Level);" + "\n" +
                "\t\t\t\t\tskillWidgetComponents[4].setText(\"\" + cachedConfig." + skillLowercase + "Level);" + "\n" +
                "\t\t\t\t}" + "\n" +
                "\t\t\t}" + "\n" +
                "\t\t}" + "\n\n";
        return pluginChunk;
    }
}

package com.iplank.fakestats;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("fakestats")
public interface FakeStatsConfig extends Config
{
	@ConfigItem(
			keyName = "fakeSpoofTotal",
			name = "Spoof Fake Total Level",
			description = "Set Total to Include Spoofed Levels",
			position = -5
	)
	default boolean fakeSpoofTotal() { return true; }

	@ConfigItem(
			keyName = "virtualLevels",
			name = "Enable Virtual Levels",
			description = "Enable Levels 100-126",
			position = -4
	)
	default boolean virtualLevels() { return false; }

	@ConfigItem(
			keyName = "virtualTotal",
			name = "Spoof Fake Virtual Total Level",
			description = "Whether or not to Spoof the Virtual Total Level<br>" +
					"NOTE: Must Enable 'Spoof Fake Total'!",
			position = -3
	)
	default boolean virtualTotal() { return false; }

	enum ModePresets {
		NONE,
		All_200M,
		Maxed,
		Level_Three
	}

	@ConfigItem(
			keyName = "preset",
			name = "Preset Mode",
			description = "Toggle Various Presets for Skills and Total!<br>" +
					"WARNING: Overrides Other Settings!",
			position = -2
	)
	default ModePresets preset() { return ModePresets.NONE; }

	@ConfigSection(
			name = "Total Level",
			description = "Configure the Total Level",
			closedByDefault = true,
			position = -1
	)
	String totalLevelSection = "totalLevelSection";

	@ConfigItem(
			keyName = "spooftotal",
			name = "Spoof Total Level",
			description = "Whether or not to Spoof the Total Level",
			section = totalLevelSection,
			position = 0
	)
	default boolean spoofTotal() { return false; }

	@ConfigItem(
			keyName = "totalLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof the Total Level to<br>" +
					"WARNING: Doesn't Account for Stat Values",
			section = totalLevelSection,
			position = 1
	)
	default int totalLevel() { return 9001; }

	@ConfigItem(
			keyName = "overrideTotalText",
			name = "Override Total Level Text",
			description = "Whether or not to Spoof the Total Level Text",
			section = totalLevelSection,
			position = 2
	)
	default boolean overrideTotalText() { return false; }

	@ConfigItem(
			keyName = "totalLevelText",
			name = "Text to Spoof",
			description = "What Level to Spoof the Total Level Text to<br>" +
					"Use \"br\" inside \"<>\" to signify a new line!",
			section = totalLevelSection,
			position = 3
	)
	default String totalLevelText() { return "Total level:<br>Hello World"; }

	// begin autogenerated
	@ConfigSection(
			name = "Attack",
			description = "Configure the Attack skill",
			closedByDefault = true,
			position = 0
	)
	String attack = "attack";

	@ConfigItem(
			keyName = "spoofAttack",
			name = "Spoof Attack",
			description = "Whether or not to Spoof Attack",
			section = attack,
			position = 1
	)
	default boolean spoofAttack() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "attackLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Attack to",
			section = attack,
			position = 2
	)
	default int attackLevel() { return 99; }

	@ConfigSection(
			name = "Strength",
			description = "Configure the Strength skill",
			closedByDefault = true,
			position = 3
	)
	String strength = "strength";

	@ConfigItem(
			keyName = "spoofStrength",
			name = "Spoof Strength",
			description = "Whether or not to Spoof Strength",
			section = strength,
			position = 4
	)
	default boolean spoofStrength() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "strengthLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Strength to",
			section = strength,
			position = 5
	)
	default int strengthLevel() { return 99; }

	@ConfigSection(
			name = "Defence",
			description = "Configure the Defence skill",
			closedByDefault = true,
			position = 6
	)
	String defence = "defence";

	@ConfigItem(
			keyName = "spoofDefence",
			name = "Spoof Defence",
			description = "Whether or not to Spoof Defence",
			section = defence,
			position = 7
	)
	default boolean spoofDefence() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "defenceLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Defence to",
			section = defence,
			position = 8
	)
	default int defenceLevel() { return 99; }

	@ConfigSection(
			name = "Ranged",
			description = "Configure the Ranged skill",
			closedByDefault = true,
			position = 9
	)
	String ranged = "ranged";

	@ConfigItem(
			keyName = "spoofRanged",
			name = "Spoof Ranged",
			description = "Whether or not to Spoof Ranged",
			section = ranged,
			position = 10
	)
	default boolean spoofRanged() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "rangedLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Ranged to",
			section = ranged,
			position = 11
	)
	default int rangedLevel() { return 99; }

	@ConfigSection(
			name = "Prayer",
			description = "Configure the Prayer skill",
			closedByDefault = true,
			position = 12
	)
	String prayer = "prayer";

	@ConfigItem(
			keyName = "spoofPrayer",
			name = "Spoof Prayer",
			description = "Whether or not to Spoof Prayer",
			section = prayer,
			position = 13
	)
	default boolean spoofPrayer() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "prayerLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Prayer to",
			section = prayer,
			position = 14
	)
	default int prayerLevel() { return 99; }

	@ConfigSection(
			name = "Magic",
			description = "Configure the Magic skill",
			closedByDefault = true,
			position = 15
	)
	String magic = "magic";

	@ConfigItem(
			keyName = "spoofMagic",
			name = "Spoof Magic",
			description = "Whether or not to Spoof Magic",
			section = magic,
			position = 16
	)
	default boolean spoofMagic() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "magicLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Magic to",
			section = magic,
			position = 17
	)
	default int magicLevel() { return 99; }

	@ConfigSection(
			name = "Runecraft",
			description = "Configure the Runecraft skill",
			closedByDefault = true,
			position = 18
	)
	String runecraft = "runecraft";

	@ConfigItem(
			keyName = "spoofRunecraft",
			name = "Spoof Runecraft",
			description = "Whether or not to Spoof Runecraft",
			section = runecraft,
			position = 19
	)
	default boolean spoofRunecraft() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "runecraftLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Runecraft to",
			section = runecraft,
			position = 20
	)
	default int runecraftLevel() { return 99; }

	@ConfigSection(
			name = "Construction",
			description = "Configure the Construction skill",
			closedByDefault = true,
			position = 21
	)
	String construction = "construction";

	@ConfigItem(
			keyName = "spoofConstruction",
			name = "Spoof Construction",
			description = "Whether or not to Spoof Construction",
			section = construction,
			position = 22
	)
	default boolean spoofConstruction() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "constructionLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Construction to",
			section = construction,
			position = 23
	)
	default int constructionLevel() { return 99; }

	@ConfigSection(
			name = "Hitpoints",
			description = "Configure the Hitpoints skill",
			closedByDefault = true,
			position = 24
	)
	String hitpoints = "hitpoints";

	@ConfigItem(
			keyName = "spoofHitpoints",
			name = "Spoof Hitpoints",
			description = "Whether or not to Spoof Hitpoints",
			section = hitpoints,
			position = 25
	)
	default boolean spoofHitpoints() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "hitpointsLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Hitpoints to",
			section = hitpoints,
			position = 26
	)
	default int hitpointsLevel() { return 99; }

	@ConfigSection(
			name = "Agility",
			description = "Configure the Agility skill",
			closedByDefault = true,
			position = 27
	)
	String agility = "agility";

	@ConfigItem(
			keyName = "spoofAgility",
			name = "Spoof Agility",
			description = "Whether or not to Spoof Agility",
			section = agility,
			position = 28
	)
	default boolean spoofAgility() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "agilityLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Agility to",
			section = agility,
			position = 29
	)
	default int agilityLevel() { return 99; }

	@ConfigSection(
			name = "Herblore",
			description = "Configure the Herblore skill",
			closedByDefault = true,
			position = 30
	)
	String herblore = "herblore";

	@ConfigItem(
			keyName = "spoofHerblore",
			name = "Spoof Herblore",
			description = "Whether or not to Spoof Herblore",
			section = herblore,
			position = 31
	)
	default boolean spoofHerblore() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "herbloreLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Herblore to",
			section = herblore,
			position = 32
	)
	default int herbloreLevel() { return 99; }

	@ConfigSection(
			name = "Thieving",
			description = "Configure the Thieving skill",
			closedByDefault = true,
			position = 33
	)
	String thieving = "thieving";

	@ConfigItem(
			keyName = "spoofThieving",
			name = "Spoof Thieving",
			description = "Whether or not to Spoof Thieving",
			section = thieving,
			position = 34
	)
	default boolean spoofThieving() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "thievingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Thieving to",
			section = thieving,
			position = 35
	)
	default int thievingLevel() { return 99; }

	@ConfigSection(
			name = "Crafting",
			description = "Configure the Crafting skill",
			closedByDefault = true,
			position = 36
	)
	String crafting = "crafting";

	@ConfigItem(
			keyName = "spoofCrafting",
			name = "Spoof Crafting",
			description = "Whether or not to Spoof Crafting",
			section = crafting,
			position = 37
	)
	default boolean spoofCrafting() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "craftingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Crafting to",
			section = crafting,
			position = 38
	)
	default int craftingLevel() { return 99; }

	@ConfigSection(
			name = "Fletching",
			description = "Configure the Fletching skill",
			closedByDefault = true,
			position = 39
	)
	String fletching = "fletching";

	@ConfigItem(
			keyName = "spoofFletching",
			name = "Spoof Fletching",
			description = "Whether or not to Spoof Fletching",
			section = fletching,
			position = 40
	)
	default boolean spoofFletching() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "fletchingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Fletching to",
			section = fletching,
			position = 41
	)
	default int fletchingLevel() { return 99; }

	@ConfigSection(
			name = "Slayer",
			description = "Configure the Slayer skill",
			closedByDefault = true,
			position = 42
	)
	String slayer = "slayer";

	@ConfigItem(
			keyName = "spoofSlayer",
			name = "Spoof Slayer",
			description = "Whether or not to Spoof Slayer",
			section = slayer,
			position = 43
	)
	default boolean spoofSlayer() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "slayerLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Slayer to",
			section = slayer,
			position = 44
	)
	default int slayerLevel() { return 99; }

	@ConfigSection(
			name = "Hunter",
			description = "Configure the Hunter skill",
			closedByDefault = true,
			position = 45
	)
	String hunter = "hunter";

	@ConfigItem(
			keyName = "spoofHunter",
			name = "Spoof Hunter",
			description = "Whether or not to Spoof Hunter",
			section = hunter,
			position = 46
	)
	default boolean spoofHunter() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "hunterLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Hunter to",
			section = hunter,
			position = 47
	)
	default int hunterLevel() { return 99; }

	@ConfigSection(
			name = "Mining",
			description = "Configure the Mining skill",
			closedByDefault = true,
			position = 48
	)
	String mining = "mining";

	@ConfigItem(
			keyName = "spoofMining",
			name = "Spoof Mining",
			description = "Whether or not to Spoof Mining",
			section = mining,
			position = 49
	)
	default boolean spoofMining() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "miningLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Mining to",
			section = mining,
			position = 50
	)
	default int miningLevel() { return 99; }

	@ConfigSection(
			name = "Smithing",
			description = "Configure the Smithing skill",
			closedByDefault = true,
			position = 51
	)
	String smithing = "smithing";

	@ConfigItem(
			keyName = "spoofSmithing",
			name = "Spoof Smithing",
			description = "Whether or not to Spoof Smithing",
			section = smithing,
			position = 52
	)
	default boolean spoofSmithing() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "smithingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Smithing to",
			section = smithing,
			position = 53
	)
	default int smithingLevel() { return 99; }

	@ConfigSection(
			name = "Fishing",
			description = "Configure the Fishing skill",
			closedByDefault = true,
			position = 54
	)
	String fishing = "fishing";

	@ConfigItem(
			keyName = "spoofFishing",
			name = "Spoof Fishing",
			description = "Whether or not to Spoof Fishing",
			section = fishing,
			position = 55
	)
	default boolean spoofFishing() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "fishingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Fishing to",
			section = fishing,
			position = 56
	)
	default int fishingLevel() { return 99; }

	@ConfigSection(
			name = "Cooking",
			description = "Configure the Cooking skill",
			closedByDefault = true,
			position = 57
	)
	String cooking = "cooking";

	@ConfigItem(
			keyName = "spoofCooking",
			name = "Spoof Cooking",
			description = "Whether or not to Spoof Cooking",
			section = cooking,
			position = 58
	)
	default boolean spoofCooking() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "cookingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Cooking to",
			section = cooking,
			position = 59
	)
	default int cookingLevel() { return 99; }

	@ConfigSection(
			name = "Firemaking",
			description = "Configure the Firemaking skill",
			closedByDefault = true,
			position = 60
	)
	String firemaking = "firemaking";

	@ConfigItem(
			keyName = "spoofFiremaking",
			name = "Spoof Firemaking",
			description = "Whether or not to Spoof Firemaking",
			section = firemaking,
			position = 61
	)
	default boolean spoofFiremaking() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "firemakingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Firemaking to",
			section = firemaking,
			position = 62
	)
	default int firemakingLevel() { return 99; }

	@ConfigSection(
			name = "Woodcutting",
			description = "Configure the Woodcutting skill",
			closedByDefault = true,
			position = 63
	)
	String woodcutting = "woodcutting";

	@ConfigItem(
			keyName = "spoofWoodcutting",
			name = "Spoof Woodcutting",
			description = "Whether or not to Spoof Woodcutting",
			section = woodcutting,
			position = 64
	)
	default boolean spoofWoodcutting() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "woodcuttingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Woodcutting to",
			section = woodcutting,
			position = 65
	)
	default int woodcuttingLevel() { return 99; }

	@ConfigSection(
			name = "Farming",
			description = "Configure the Farming skill",
			closedByDefault = true,
			position = 66
	)
	String farming = "farming";

	@ConfigItem(
			keyName = "spoofFarming",
			name = "Spoof Farming",
			description = "Whether or not to Spoof Farming",
			section = farming,
			position = 67
	)
	default boolean spoofFarming() { return false; }

	@Range(
			min = 1,
			max = 126
	)
	@ConfigItem(
			keyName = "farmingLevel",
			name = "Level to Spoof",
			description = "What Level to Spoof Farming to",
			section = farming,
			position = 68
	)
	default int farmingLevel() { return 99; }
	// end autogenerated
}

package com.iplank.fakestats;

import com.google.inject.Provides;
import javax.inject.Inject;
import java.text.NumberFormat;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.ClientTick;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.PluginChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import com.iplank.fakestats.FakeStatsConfig.ModePresets;

@Slf4j
@PluginDescriptor(
	name = "Fake Stats",
	description = "Allows you to spoof Skill and Total Levels",
	tags = {"stats", "spoof", "fake", "skills", "total"},
	conflicts = {"Virtual Levels", "Effective Levels"},
	enabledByDefault = false
)
public class FakeStatsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private FakeStatsConfig config;

	@Inject
	private ClientThread clientThread;

	private CachedConfig cachedConfig = new CachedConfig();

	@Override
	protected void startUp() throws Exception
	{
		cachedConfig.setConfig(config);
		cachedConfig.cacheValues();
		log.info("Fake Stats started!");
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientThread.invoke(this::simulateSkillChange);
		log.info("Fake Stats stopped!");
	}

	@Subscribe
	public void onPluginChanged(PluginChanged pluginChanged)
	{
		if (pluginChanged.getPlugin() == this)
		{
			cachedConfig.cacheValues();
			clientThread.invoke(this::simulateSkillChange);
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals("fakestats"))
		{
			return;
		}
		cachedConfig.cacheValues();
		clientThread.invoke(this::simulateSkillChange);
	}

	private static final String TOTAL_LEVEL_TEXT_PREFIX = "Total level:<br>";

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		// begin autogenerated
		// Attack Logic
		if (cachedConfig.spoofAttack) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 1);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.attackLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.attackLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.attackLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.attackLevel);
				}
			}
		}

		// Strength Logic
		if (cachedConfig.spoofStrength) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 2);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.strengthLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.strengthLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.strengthLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.strengthLevel);
				}
			}
		}

		// Defence Logic
		if (cachedConfig.spoofDefence) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 3);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.defenceLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.defenceLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.defenceLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.defenceLevel);
				}
			}
		}

		// Ranged Logic
		if (cachedConfig.spoofRanged) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 4);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.rangedLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.rangedLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.rangedLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.rangedLevel);
				}
			}
		}

		// Prayer Logic
		if (cachedConfig.spoofPrayer) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 5);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.prayerLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.prayerLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.prayerLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.prayerLevel);
				}
			}
		}

		// Magic Logic
		if (cachedConfig.spoofMagic) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 6);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.magicLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.magicLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.magicLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.magicLevel);
				}
			}
		}

		// Runecraft Logic
		if (cachedConfig.spoofRunecraft) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 7);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.runecraftLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.runecraftLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.runecraftLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.runecraftLevel);
				}
			}
		}

		// Construction Logic
		if (cachedConfig.spoofConstruction) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 8);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.constructionLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.constructionLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.constructionLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.constructionLevel);
				}
			}
		}

		// Hitpoints Logic
		if (cachedConfig.spoofHitpoints) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 9);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.hitpointsLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.hitpointsLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.hitpointsLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.hitpointsLevel);
				}
			}
		}

		// Agility Logic
		if (cachedConfig.spoofAgility) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 10);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.agilityLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.agilityLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.agilityLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.agilityLevel);
				}
			}
		}

		// Herblore Logic
		if (cachedConfig.spoofHerblore) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 11);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.herbloreLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.herbloreLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.herbloreLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.herbloreLevel);
				}
			}
		}

		// Thieving Logic
		if (cachedConfig.spoofThieving) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 12);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.thievingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.thievingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.thievingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.thievingLevel);
				}
			}
		}

		// Crafting Logic
		if (cachedConfig.spoofCrafting) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 13);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.craftingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.craftingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.craftingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.craftingLevel);
				}
			}
		}

		// Fletching Logic
		if (cachedConfig.spoofFletching) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 14);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.fletchingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.fletchingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.fletchingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.fletchingLevel);
				}
			}
		}

		// Slayer Logic
		if (cachedConfig.spoofSlayer) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 15);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.slayerLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.slayerLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.slayerLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.slayerLevel);
				}
			}
		}

		// Hunter Logic
		if (cachedConfig.spoofHunter) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 16);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.hunterLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.hunterLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.hunterLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.hunterLevel);
				}
			}
		}

		// Mining Logic
		if (cachedConfig.spoofMining) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 17);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.miningLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.miningLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.miningLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.miningLevel);
				}
			}
		}

		// Smithing Logic
		if (cachedConfig.spoofSmithing) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 18);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.smithingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.smithingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.smithingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.smithingLevel);
				}
			}
		}

		// Fishing Logic
		if (cachedConfig.spoofFishing) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 19);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.fishingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.fishingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.fishingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.fishingLevel);
				}
			}
		}

		// Cooking Logic
		if (cachedConfig.spoofCooking) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 20);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.cookingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.cookingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.cookingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.cookingLevel);
				}
			}
		}

		// Firemaking Logic
		if (cachedConfig.spoofFiremaking) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 21);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.firemakingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.firemakingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.firemakingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.firemakingLevel);
				}
			}
		}

		// Woodcutting Logic
		if (cachedConfig.spoofWoodcutting) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 22);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.woodcuttingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.woodcuttingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.woodcuttingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.woodcuttingLevel);
				}
			}
		}

		// Farming Logic
		if (cachedConfig.spoofFarming) {
			Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 23);
			if (skillWidget == null) { return; }
			Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
			if (skillWidgetComponents.length >= 4) {
				if (cachedConfig.farmingLevel > 99) {
					if (cachedConfig.virtualLevels) {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + cachedConfig.farmingLevel);
					} else {
						skillWidgetComponents[3].setText("" + 99);
						skillWidgetComponents[4].setText("" + 99);
					}
				} else {
					skillWidgetComponents[3].setText("" + cachedConfig.farmingLevel);
					skillWidgetComponents[4].setText("" + cachedConfig.farmingLevel);
				}
			}
		}
		// end autogenerated

		// Total Level Logic
		Widget totalWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, 24);
		Widget[] totalWidgetComponents = totalWidget.getStaticChildren();
		Widget widgetText = totalWidgetComponents[2];
		if (totalWidget == null || totalWidgetComponents == null) { return; }
		if (cachedConfig.preset != ModePresets.NONE) {
			switch (cachedConfig.preset) {
				case All_200M:
					// 200m the Account
					int counter200M = 0;
					while (counter200M < 23) {
						counter200M++;
						Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, counter200M);
						if (skillWidget == null) { return; }
						Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
						if (skillWidgetComponents.length >= 4) {
							skillWidgetComponents[3].setText("" + 99); // Top Level
							if (cachedConfig.virtualLevels) {
								skillWidgetComponents[4].setText("" + 126); // Bottom Level
							} else {
								skillWidgetComponents[4].setText("" + 99); // Bottom Level
							}
						}
					}
					if (cachedConfig.virtualTotal) {
						widgetText.setText(TOTAL_LEVEL_TEXT_PREFIX + "2898");
					} else {
						widgetText.setText(TOTAL_LEVEL_TEXT_PREFIX + "2277");
					}
					Widget widget200mEXP = client.getWidget(WidgetID.EXPERIENCE_TRACKER_GROUP_ID, 10);
					widget200mEXP.setText("4,600,000,000");
					break;
				case Maxed:
					// Max the Account
					int counterMax = 0;
					while (counterMax < 23) {
						counterMax++;
						Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, counterMax);
						if (skillWidget == null) {
							return;
						}
						Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
						if (skillWidgetComponents.length >= 4) {
							skillWidgetComponents[3].setText("" + 99); // Top Level
							skillWidgetComponents[4].setText("" + 99); // Bottom Level
						}
					}
					widgetText.setText(TOTAL_LEVEL_TEXT_PREFIX + "2277");
					Widget widgetMaxEXP = client.getWidget(WidgetID.EXPERIENCE_TRACKER_GROUP_ID, 10);
					long totalMaxExp = ((13_034_431 * 23) + client.getOverallExperience()); // Exact Max EXP plus Actual EXP
					String formatted = NumberFormat.getInstance().format(totalMaxExp);
					widgetMaxEXP.setText("" + formatted);
					break;
				case Level_Three:
					// Level 3 the Account
					int counterLevel3 = 0;
					while (counterLevel3 < 23) {
						counterLevel3++;
						Widget skillWidget = client.getWidget(WidgetID.SKILLS_GROUP_ID, counterLevel3);
						if (skillWidget == null) { return; }
						Widget[] skillWidgetComponents = skillWidget.getDynamicChildren();
						if (skillWidgetComponents.length >= 4) {
							if (counterLevel3 == 9) {
								skillWidgetComponents[3].setText("" + 10); // Top Level
								skillWidgetComponents[4].setText("" + 10); // Bottom Level
							} else {
								skillWidgetComponents[3].setText("" + 1); // Top Level
								skillWidgetComponents[4].setText("" + 1); // Bottom Level
							}
						}
					}
					widgetText.setText(TOTAL_LEVEL_TEXT_PREFIX + "32");
					Widget widgetLevel3EXP = client.getWidget(WidgetID.EXPERIENCE_TRACKER_GROUP_ID, 10);
					widgetLevel3EXP.setText("1,154");
					break;
				default:
					// If Random Value is Set (? - Edge Case)
					break;
			}
		} else if (cachedConfig.overrideTotalText) {
			widgetText.setText(cachedConfig.totalLevelText);
		} else if (cachedConfig.spoofTotal) {
			// Spoof Total from Config
			widgetText.setText(TOTAL_LEVEL_TEXT_PREFIX + cachedConfig.totalLevel);
		} else if (cachedConfig.fakeSpoofTotal) {
			// Spoof Fake Total Level
			int total = 0;
			// begin autogenerated
			if (cachedConfig.spoofAttack) {
				if (cachedConfig.attackLevel <= 99) {
					total += cachedConfig.attackLevel;
				} else if (cachedConfig.attackLevel > 99 && cachedConfig.attackLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.attackLevel;
				} else if (cachedConfig.attackLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.attackLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.ATTACK);
			}
			if (cachedConfig.spoofStrength) {
				if (cachedConfig.strengthLevel <= 99) {
					total += cachedConfig.strengthLevel;
				} else if (cachedConfig.strengthLevel > 99 && cachedConfig.strengthLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.strengthLevel;
				} else if (cachedConfig.strengthLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.strengthLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.STRENGTH);
			}
			if (cachedConfig.spoofDefence) {
				if (cachedConfig.defenceLevel <= 99) {
					total += cachedConfig.defenceLevel;
				} else if (cachedConfig.defenceLevel > 99 && cachedConfig.defenceLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.defenceLevel;
				} else if (cachedConfig.defenceLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.defenceLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.DEFENCE);
			}
			if (cachedConfig.spoofRanged) {
				if (cachedConfig.rangedLevel <= 99) {
					total += cachedConfig.rangedLevel;
				} else if (cachedConfig.rangedLevel > 99 && cachedConfig.rangedLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.rangedLevel;
				} else if (cachedConfig.rangedLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.rangedLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.RANGED);
			}
			if (cachedConfig.spoofPrayer) {
				if (cachedConfig.prayerLevel <= 99) {
					total += cachedConfig.prayerLevel;
				} else if (cachedConfig.prayerLevel > 99 && cachedConfig.prayerLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.prayerLevel;
				} else if (cachedConfig.prayerLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.prayerLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.PRAYER);
			}
			if (cachedConfig.spoofMagic) {
				if (cachedConfig.magicLevel <= 99) {
					total += cachedConfig.magicLevel;
				} else if (cachedConfig.magicLevel > 99 && cachedConfig.magicLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.magicLevel;
				} else if (cachedConfig.magicLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.magicLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.MAGIC);
			}
			if (cachedConfig.spoofRunecraft) {
				if (cachedConfig.runecraftLevel <= 99) {
					total += cachedConfig.runecraftLevel;
				} else if (cachedConfig.runecraftLevel > 99 && cachedConfig.runecraftLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.runecraftLevel;
				} else if (cachedConfig.runecraftLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.runecraftLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.RUNECRAFT);
			}
			if (cachedConfig.spoofConstruction) {
				if (cachedConfig.constructionLevel <= 99) {
					total += cachedConfig.constructionLevel;
				} else if (cachedConfig.constructionLevel > 99 && cachedConfig.constructionLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.constructionLevel;
				} else if (cachedConfig.constructionLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.constructionLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.CONSTRUCTION);
			}
			if (cachedConfig.spoofHitpoints) {
				if (cachedConfig.hitpointsLevel <= 99) {
					total += cachedConfig.hitpointsLevel;
				} else if (cachedConfig.hitpointsLevel > 99 && cachedConfig.hitpointsLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.hitpointsLevel;
				} else if (cachedConfig.hitpointsLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.hitpointsLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.HITPOINTS);
			}
			if (cachedConfig.spoofAgility) {
				if (cachedConfig.agilityLevel <= 99) {
					total += cachedConfig.agilityLevel;
				} else if (cachedConfig.agilityLevel > 99 && cachedConfig.agilityLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.agilityLevel;
				} else if (cachedConfig.agilityLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.agilityLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.AGILITY);
			}
			if (cachedConfig.spoofHerblore) {
				if (cachedConfig.herbloreLevel <= 99) {
					total += cachedConfig.herbloreLevel;
				} else if (cachedConfig.herbloreLevel > 99 && cachedConfig.herbloreLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.herbloreLevel;
				} else if (cachedConfig.herbloreLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.herbloreLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.HERBLORE);
			}
			if (cachedConfig.spoofThieving) {
				if (cachedConfig.thievingLevel <= 99) {
					total += cachedConfig.thievingLevel;
				} else if (cachedConfig.thievingLevel > 99 && cachedConfig.thievingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.thievingLevel;
				} else if (cachedConfig.thievingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.thievingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.THIEVING);
			}
			if (cachedConfig.spoofCrafting) {
				if (cachedConfig.craftingLevel <= 99) {
					total += cachedConfig.craftingLevel;
				} else if (cachedConfig.craftingLevel > 99 && cachedConfig.craftingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.craftingLevel;
				} else if (cachedConfig.craftingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.craftingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.CRAFTING);
			}
			if (cachedConfig.spoofFletching) {
				if (cachedConfig.fletchingLevel <= 99) {
					total += cachedConfig.fletchingLevel;
				} else if (cachedConfig.fletchingLevel > 99 && cachedConfig.fletchingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.fletchingLevel;
				} else if (cachedConfig.fletchingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.fletchingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.FLETCHING);
			}
			if (cachedConfig.spoofSlayer) {
				if (cachedConfig.slayerLevel <= 99) {
					total += cachedConfig.slayerLevel;
				} else if (cachedConfig.slayerLevel > 99 && cachedConfig.slayerLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.slayerLevel;
				} else if (cachedConfig.slayerLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.slayerLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.SLAYER);
			}
			if (cachedConfig.spoofHunter) {
				if (cachedConfig.hunterLevel <= 99) {
					total += cachedConfig.hunterLevel;
				} else if (cachedConfig.hunterLevel > 99 && cachedConfig.hunterLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.hunterLevel;
				} else if (cachedConfig.hunterLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.hunterLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.HUNTER);
			}
			if (cachedConfig.spoofMining) {
				if (cachedConfig.miningLevel <= 99) {
					total += cachedConfig.miningLevel;
				} else if (cachedConfig.miningLevel > 99 && cachedConfig.miningLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.miningLevel;
				} else if (cachedConfig.miningLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.miningLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.MINING);
			}
			if (cachedConfig.spoofSmithing) {
				if (cachedConfig.smithingLevel <= 99) {
					total += cachedConfig.smithingLevel;
				} else if (cachedConfig.smithingLevel > 99 && cachedConfig.smithingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.smithingLevel;
				} else if (cachedConfig.smithingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.smithingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.SMITHING);
			}
			if (cachedConfig.spoofFishing) {
				if (cachedConfig.fishingLevel <= 99) {
					total += cachedConfig.fishingLevel;
				} else if (cachedConfig.fishingLevel > 99 && cachedConfig.fishingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.fishingLevel;
				} else if (cachedConfig.fishingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.fishingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.FISHING);
			}
			if (cachedConfig.spoofCooking) {
				if (cachedConfig.cookingLevel <= 99) {
					total += cachedConfig.cookingLevel;
				} else if (cachedConfig.cookingLevel > 99 && cachedConfig.cookingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.cookingLevel;
				} else if (cachedConfig.cookingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.cookingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.COOKING);
			}
			if (cachedConfig.spoofFiremaking) {
				if (cachedConfig.firemakingLevel <= 99) {
					total += cachedConfig.firemakingLevel;
				} else if (cachedConfig.firemakingLevel > 99 && cachedConfig.firemakingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.firemakingLevel;
				} else if (cachedConfig.firemakingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.firemakingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.FIREMAKING);
			}
			if (cachedConfig.spoofWoodcutting) {
				if (cachedConfig.woodcuttingLevel <= 99) {
					total += cachedConfig.woodcuttingLevel;
				} else if (cachedConfig.woodcuttingLevel > 99 && cachedConfig.woodcuttingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.woodcuttingLevel;
				} else if (cachedConfig.woodcuttingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.woodcuttingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.WOODCUTTING);
			}
			if (cachedConfig.spoofFarming) {
				if (cachedConfig.farmingLevel <= 99) {
					total += cachedConfig.farmingLevel;
				} else if (cachedConfig.farmingLevel > 99 && cachedConfig.farmingLevel <= 126 && cachedConfig.virtualTotal) {
					total += cachedConfig.farmingLevel;
				} else if (cachedConfig.farmingLevel > 126 && cachedConfig.virtualTotal) {
					total += 126;
				} else if (cachedConfig.farmingLevel > 99) {
					total += 99;
				}
			} else {
				total += client.getRealSkillLevel(Skill.FARMING);
			}
			// end autogenerated
			widgetText.setText(TOTAL_LEVEL_TEXT_PREFIX + total);
		}
	}

	private void simulateSkillChange()
	{
		// this fires widgets listening for all skill changes
		// credit: https://github.com/runelite/runelite/blob/003a92fb7b4641560569470b1e3431336284db94/runelite-client/src/main/java/net/runelite/client/plugins/virtuallevels/VirtualLevelsPlugin.java#L140-L150
		for (Skill skill : Skill.values())
		{
			if (skill != Skill.OVERALL)
			{
				client.queueChangedSkill(skill);
			}
		}
	}

	@Provides
	FakeStatsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FakeStatsConfig.class);
	}
}

class CachedConfig {
	// Config Item
	private FakeStatsConfig config;

	// Toggleable Variables
	public boolean fakeSpoofTotal;
	public boolean virtualLevels;
	public boolean virtualTotal;

	// Preset Variable
	public ModePresets preset;

	// Total Variables
	public boolean spoofTotal;
	public int totalLevel;
	public boolean overrideTotalText;
	public String totalLevelText;

	// Skill Variables
	public boolean spoofAttack;
	public int attackLevel;
	public boolean spoofStrength;
	public int strengthLevel;
	public boolean spoofDefence;
	public int defenceLevel;
	public boolean spoofRanged;
	public int rangedLevel;
	public boolean spoofPrayer;
	public int prayerLevel;
	public boolean spoofMagic;
	public int magicLevel;
	public boolean spoofRunecraft;
	public int runecraftLevel;
	public boolean spoofConstruction;
	public int constructionLevel;
	public boolean spoofHitpoints;
	public int hitpointsLevel;
	public boolean spoofAgility;
	public int agilityLevel;
	public boolean spoofHerblore;
	public int herbloreLevel;
	public boolean spoofThieving;
	public int thievingLevel;
	public boolean spoofFletching;
	public int fletchingLevel;
	public boolean spoofCrafting;
	public int craftingLevel;
	public boolean spoofSlayer;
	public int slayerLevel;
	public boolean spoofHunter;
	public int hunterLevel;
	public boolean spoofMining;
	public int miningLevel;
	public boolean spoofSmithing;
	public int smithingLevel;
	public boolean spoofFishing;
	public int fishingLevel;
	public boolean spoofCooking;
	public int cookingLevel;
	public boolean spoofFiremaking;
	public int firemakingLevel;
	public boolean spoofWoodcutting;
	public int woodcuttingLevel;
	public boolean spoofFarming;
	public int farmingLevel;

	// Obtain Config
	public void setConfig(FakeStatsConfig config) {
		this.config = config;
	}

	// Cache Values
	public void cacheValues() {
		// Toggleable Variables
		fakeSpoofTotal = config.fakeSpoofTotal();
		virtualLevels = config.virtualLevels();
		virtualTotal = config.virtualTotal();

		// Preset Variable
		preset = config.preset();

		// Total Variables
		spoofTotal = config.spoofTotal();
		totalLevel = config.totalLevel();
		overrideTotalText = config.overrideTotalText();
		totalLevelText = config.totalLevelText();

		// Skill Variables
		spoofAttack = config.spoofAttack();
		attackLevel = config.attackLevel();
		spoofStrength = config.spoofStrength();
		strengthLevel = config.strengthLevel();
		spoofDefence = config.spoofDefence();
		defenceLevel = config.defenceLevel();
		spoofRanged = config.spoofRanged();
		rangedLevel = config.rangedLevel();
		spoofPrayer = config.spoofPrayer();
		prayerLevel = config.prayerLevel();
		spoofMagic = config.spoofMagic();
		magicLevel = config.magicLevel();
		spoofRunecraft = config.spoofRunecraft();
		runecraftLevel = config.runecraftLevel();
		spoofConstruction = config.spoofConstruction();
		constructionLevel = config.constructionLevel();
		spoofHitpoints = config.spoofHitpoints();
		hitpointsLevel = config.hitpointsLevel();
		spoofAgility = config.spoofAgility();
		agilityLevel = config.agilityLevel();
		spoofHerblore = config.spoofHerblore();
		herbloreLevel = config.herbloreLevel();
		spoofThieving = config.spoofThieving();
		thievingLevel = config.thievingLevel();
		spoofFletching = config.spoofFletching();
		fletchingLevel = config.fletchingLevel();
		spoofCrafting = config.spoofCrafting();
		craftingLevel = config.craftingLevel();
		spoofSlayer = config.spoofSlayer();
		slayerLevel = config.slayerLevel();
		spoofHunter = config.spoofHunter();
		hunterLevel = config.hunterLevel();
		spoofMining = config.spoofMining();
		miningLevel = config.miningLevel();
		spoofSmithing = config.spoofSmithing();
		smithingLevel = config.smithingLevel();
		spoofFishing = config.spoofFishing();
		fishingLevel = config.fishingLevel();
		spoofCooking = config.spoofCooking();
		cookingLevel = config.cookingLevel();
		spoofFiremaking = config.spoofFiremaking();
		firemakingLevel = config.firemakingLevel();
		spoofWoodcutting = config.spoofWoodcutting();
		woodcuttingLevel = config.woodcuttingLevel();
		spoofFarming = config.spoofFarming();
		farmingLevel = config.farmingLevel();
	}
}

