package com.playerstatus;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

import java.awt.*;

@ConfigGroup("playerstatushighlight")
public interface PlayerStatusHighlightConfig extends Config
{
	@ConfigSection(
			name = "Poison Immunity Highlight",
			description = "Change poison immunity display settings",
			position = 1
	)
	String PoisonImmunityHighlight = "Poison Immunity Highlight";

	@ConfigItem(
		position = 1,
		keyName = "showPoison",
		name = "Highlight Poison Immunity",
		description = "Toggles displaying an outline when the player is immune to poison",
		section = PoisonImmunityHighlight
	)
	default boolean showPoison()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "poisonImmunityColor",
			name = "Highlight Color",
			description = "Selects the color to highlight the player with when poison immune",
			section = PoisonImmunityHighlight
	)
	default Color poisonImmunityColor() {
		return new Color(87, 210, 0, 100);
	}

	@ConfigItem(
			position = 3,
			keyName = "poisonThickness",
			name = "Highlight Thickness",
			description = "Controls the thickness of the poison immunity highlight",
			section = PoisonImmunityHighlight
	)
	default int poisonThickness() { return 4; }

	@ConfigItem(
			position = 4,
			keyName = "poisonFeather",
			name = "Highlight Feather",
			description = "Controls the feather/fading effect of the poison immunity highlight (max 4)",
			section = PoisonImmunityHighlight
	)
	@Range(max = 4)
	default int poisonFeather() { return 4; }


	@ConfigSection(
			name = "Dragonfire Immunity Highlight",
			description = "Change dragonfire immunity display settings",
			position = 2
	)
	String DragonfireImmunityHighlight = "Dragonfire Immunity Highlight";

	@ConfigItem(
			position = 1,
			keyName = "showDragonfire",
			name = "Highlight Dragonfire Immunity",
			description = "Toggles displaying an outline when the player is immune to dragonfire",
			section = DragonfireImmunityHighlight
	)
	default boolean showDragonfire()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "dragonfireImmunityColor",
			name = "Highlight Color",
			description = "Selects the color to highlight the player with when dragonfire immune",
			section = DragonfireImmunityHighlight
	)
	default Color dragonfireImmunityColor() {
		return new Color(107, 0, 149, 100);
	}

	@ConfigItem(
			position = 3,
			keyName = "dragonfireThickness",
			name = "Highlight Thickness",
			description = "Controls the thickness of the dragonfire immunity highlight",
			section = DragonfireImmunityHighlight
	)
	default int dragonfireThickness() { return 4; }

	@ConfigItem(
			position = 4,
			keyName = "dragonfireFeather",
			name = "Highlight Feather",
			description = "Controls the feather/fading effect of the dragonfire immunity highlight (max 4)",
			section = DragonfireImmunityHighlight
	)
	@Range(max = 4)
	default int dragonfireFeather() { return 4; }


	@ConfigSection(
			name = "Venom Immunity Highlight",
			description = "Change venom immunity display settings",
			position = 3
	)
	String VenomImmunityHighlight = "Venom Immunity Highlight";

	@ConfigItem(
			position = 1,
			keyName = "showVenom",
			name = "Highlight Venom Immunity",
			description = "Toggles displaying an outline when the player is immune to venom",
			section = VenomImmunityHighlight
	)
	default boolean showVenom()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "venomImmunityColor",
			name = "Highlight Color",
			description = "Selects the color to highlight the player with when venom immune",
			section = VenomImmunityHighlight
	)
	default Color venomImmunityColor() {
		return new Color(0, 147, 70, 100);
	}

	@ConfigItem(
			position = 3,
			keyName = "venomThickness",
			name = "Highlight Thickness",
			description = "Controls the thickness of the venom immunity highlight",
			section = VenomImmunityHighlight
	)
	default int venomThickness() { return 4; }

	@ConfigItem(
			position = 4,
			keyName = "venomFeather",
			name = "Highlight Feather",
			description = "Controls the feather/fading effect of the venom immunity highlight (max 4)",
			section = VenomImmunityHighlight
	)
	@Range(max = 4)
	default int venomFeather() { return 4; }

	@ConfigSection(
			name = "Super Dragonfire Immunity Highlight",
			description = "Change super dragonfire immunity display settings",
			position = 4
	)
	String SuperDragonfireImmunityHighlight = "Super Dragonfire Immunity Highlight";

	@ConfigItem(
			position = 1,
			keyName = "showSuperDragonfire",
			name = "Highlight Super Dragonfire Immunity",
			description = "Toggles displaying an outline when the player is super immune to dragonfire",
			section = SuperDragonfireImmunityHighlight
	)
	default boolean showSuperDragonfire()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "superDragonfireImmunityColor",
			name = "Highlight Color",
			description = "Selects the color to highlight the player with when super dragonfire immune",
			section = SuperDragonfireImmunityHighlight
	)
	default Color superDragonfireImmunityColor() {
		return new Color(190, 107, 255, 100);
	}

	@ConfigItem(
			position = 3,
			keyName = "superDragonfireThickness",
			name = "Highlight Thickness",
			description = "Controls the thickness of the super dragonfire immunity highlight",
			section = SuperDragonfireImmunityHighlight
	)
	default int superDragonfireThickness() { return 4; }

	@ConfigItem(
			position = 4,
			keyName = "superDragonfireFeather",
			name = "Highlight Feather",
			description = "Controls the feather/fading effect of the super dragonfire immunity highlight (max 4)",
			section = SuperDragonfireImmunityHighlight
	)
	@Range(max = 4)
	default int superDragonfireFeather() { return 4; }

	@ConfigSection(
			name = "Mark of Darkness Highlight",
			description = "Change Mark of Darkness display settings",
			position = 5
	)
	String MarkHighlight = "Mark of Darkness Highlight";

	@ConfigItem(
			position = 1,
			keyName = "showMark",
			name = "Highlight Mark of Darkness buff",
			description = "Toggles displaying an outline when the player is under the effect of Mark of Darkness",
			section = MarkHighlight
	)
	default boolean showMark()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "markColor",
			name = "Highlight Color",
			description = "Selects the color to highlight the player with when super dragonfire immune",
			section = MarkHighlight
	)
	default Color markColor() {
		return new Color(0x965500CD, true);
	}

	@ConfigItem(
			position = 3,
			keyName = "markThickness",
			name = "Highlight Thickness",
			description = "Controls the thickness of the Mark of Darkness highlight",
			section = MarkHighlight
	)
	default int markThickness() { return 2; }

	@ConfigItem(
			position = 4,
			keyName = "markFeather",
			name = "Highlight Feather",
			description = "Controls the feather/fading effect of the Mark of Darkness highlight (max 4)",
			section = MarkHighlight
	)
	@Range(max = 4)
	default int markFeather() { return 2; }

	@ConfigSection(
			name = "Combinations",
			description = "Configure settings for multiple simultaneous immunities",
			position = 5
	)
	String Combinations = "Combinations";
	@Alpha
	@ConfigItem(
			position = 1,
			keyName = "superDragonfireAndVenomImmunityColor",
			name = "Super Antifire + Venom Immunity",
			description = "Selects the color to highlight the player with when immune to super dragonfire and venom.<br>" +
					"Thickness and feather settings will be inherited from venom immunity settings.",
			section = Combinations
	)
	default Color superDragonfireAndVenomImmunityColor() {
		return new Color(255, 196, 0, 100);
	}
	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "superDragonfireAndPoisonImmunityColor",
			name = "Super Antifire + Poison Immunity",
			description = "Selects the color to highlight the player with when immune to super dragonfire and poison " +
					"(but not venom!).\n" +
					"Thickness and feather settings will be inherited from poison immunity settings.",
			section = Combinations
	)
	default Color superDragonfireAndPoisonImmunityColor() {
		return new Color(255, 60, 0, 100);
	}
	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "dragonfireAndVenomImmunityColor",
			name = "Antifire + Venom Immunity",
			description = "Selects the color to highlight the player with when immune to dragonfire and venom.\n" +
					"Thickness and feather settings will be inherited from venom immunity settings.",
			section = Combinations
	)
	default Color dragonfireAndVenomImmunityColor() {
		return new Color(255, 145, 0, 100);
	}
	@Alpha
	@ConfigItem(
			position = 4,
			keyName = "dragonfireAndPoisonImmunityColor",
			name = "Antifire + Poison Immunity",
			description = "Selects the color to highlight the player with when immune to dragonfire and poison " +
					"(but not venom!).\nThickness and feather settings will be inherited from poison immunity settings.",
			section = Combinations
	)
	default Color dragonfireAndPoisonImmunityColor() {
		return new Color(191, 255, 0, 100);
	}
}

package com.playerstatus;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.*;

public class PlayerStatusHighlightOverlay extends Overlay {

    private final Client client;
    private final PlayerStatusHighlightConfig config;
    private final ModelOutlineRenderer renderer;
    private final PlayerStatusHighlightPlugin plugin;

    @Inject
    public PlayerStatusHighlightOverlay(Client client, PlayerStatusHighlightPlugin plugin, PlayerStatusHighlightConfig config, ModelOutlineRenderer renderer) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.renderer = renderer;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        PlayerStatusHighlightPlugin.HighlightProperties hp = plugin.getHighlightProperties();
        renderer.drawOutline(client.getLocalPlayer(), hp.getOutlineWidth(), hp.getColor(), hp.getFeather());
        // do Mark of Darkness one separately
        if (plugin.getMarkHighlightStatus()) {
            PlayerStatusHighlightPlugin.HighlightProperties hpMark = plugin.getMarkHighlightProperties();
            renderer.drawOutline(client.getLocalPlayer(), hpMark.getOutlineWidth(), hpMark.getColor(), hpMark.getFeather());
        }
        return null;
    }
}

package com.playerstatus;

import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;

public class MarkHandler {
    private final Client client;
    private static final int PURGING_STAFF_MULTIPLIER = 5;
    private static final int PURGING_STAFF_ID = 29594;
    public static final String MARK_BEGIN_MESSAGE = "You have placed a Mark of Darkness upon yourself.";
    private boolean isActive;
    @Getter
    private int ticksRemaining;

    public MarkHandler(Client client) {
        this.client = client;
    }

    public boolean isActive() {
        return isActive;
    }

    public boolean decreaseTime() {
        // decreases the number of ticks remaining on the spell
        // also returns if it is still active
        if (ticksRemaining > 0) {
            ticksRemaining--;
        } else {
            isActive = false;
        }
        return isActive;
    }

    public void activate() {
        // duration is player's (base) magic level, in ticks
        ticksRemaining = client.getRealSkillLevel(Skill.MAGIC);
        // multiplied by 5 if the player has a purging staff equipped
        ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        if (equipment != null) {
            for (Item item : equipment.getItems()) {
                if (item != null) {
                    if (item.getId() == PURGING_STAFF_ID) {
                        ticksRemaining *= PURGING_STAFF_MULTIPLIER;
                    }
                }
            }
        }
        isActive = true;
    }
}

package com.playerstatus;

import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.text.Highlighter;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.VarPlayer;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;

@Slf4j
@PluginDescriptor(
	name = "Player Status Highlight",
	description = "A plugin that displays the player's immunity or protection status by highlighting the player with an appropriate color",
	tags = "status,immunity,poison,dragonfire,venom,highlight"
)
public class PlayerStatusHighlightPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private PlayerStatusHighlightConfig config;
	@Inject
	private PlayerStatusHighlightOverlay playerStatusHighlightOverlay;
	@Inject
	private OverlayManager overlayManager;

	private MarkHandler markHandler;

	private boolean displayPoison;
	private boolean displayVenom;
	private boolean displayDragonfire;
	private boolean displaySuperDragonfire;
	private boolean displayMark;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Player Status Highlight started!");
		overlayManager.add(playerStatusHighlightOverlay);
		markHandler = new MarkHandler(client);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Player Status Highlight stopped!");
		overlayManager.remove(playerStatusHighlightOverlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN || gameStateChanged.getGameState() == GameState.HOPPING)
		{
			displayVenom = false;
			displayPoison = false;
			displayDragonfire = false;
			displaySuperDragonfire = false;
			displayMark = false;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event) {
		if (event.getVarpId() == VarPlayer.POISON) {
			final int poisonVarp = event.getValue();
			if (poisonVarp < -38) {
				if (config.showVenom()) {
					displayVenom = true;
					displayPoison = false;
				} else if (config.showPoison()){
					// since venom immunity also counts as poison immunity
					displayPoison = true;
				}
			} else if (poisonVarp < 0) {
				displayVenom = false;
				if (config.showPoison()) {
					displayPoison = true;
				}
			} else {
				//player is neither poison nor venom immune
				displayPoison = false;
				displayVenom = false;
			}
		}
		if (event.getVarbitId() == Varbits.ANTIFIRE && config.showDragonfire()) {
			final int antifireVarbit = event.getValue();
            displayDragonfire = antifireVarbit > 0;
		}
		if (event.getVarbitId() == Varbits.SUPER_ANTIFIRE && config.showSuperDragonfire()) {
			final int superantifireVarbit = event.getValue();
			displaySuperDragonfire = superantifireVarbit > 0;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (event.getType().equals(ChatMessageType.GAMEMESSAGE)) {
			String message = event.getMessage().replaceAll("<col=[a-z0-9]+>", "").replaceAll("</col>", "");
			if (message.equals(MarkHandler.MARK_BEGIN_MESSAGE)) {
				markHandler.activate();
				log.debug("Mark of Darkness activated with duration {} ticks", markHandler.getTicksRemaining());
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		updateMarkHandler();
	}

	private void updateMarkHandler() {
		displayMark = markHandler.decreaseTime() && config.showMark();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals("playerstatushighlight")) {
			return;
		}
		if (event.getKey().equals("showPoison") || event.getKey().equals("showVenom")) {
			int poisonVarp = client.getVarpValue(VarPlayer.POISON);
			if (!config.showPoison()) {
				displayPoison = false;
			} else {
                if (poisonVarp < -38) {
					if (!config.showVenom()) {
						displayPoison = true; //because player is still immune to poison
					} else {
						displayVenom = true;
					}
				} else displayPoison = poisonVarp < 0;
			}
		}
		if (event.getKey().equals("showDragonfire")) {
			if (!config.showDragonfire()) {
				displayDragonfire = false;
			} else if (client.getVarbitValue(Varbits.ANTIFIRE) > 0) {
				displayDragonfire = true;
			}
		}
		if (event.getKey().equals("showVenom")) {
			if (!config.showVenom()) {
				displayVenom = false;
			} else if (client.getVarpValue(VarPlayer.POISON) < -38) {
				displayVenom = true;
			}
		}
		if (event.getKey().equals("showSuperDragonfire")) {
			if (!config.showSuperDragonfire()) {
				displaySuperDragonfire = false;
			} else if (client.getVarbitValue(Varbits.SUPER_ANTIFIRE) > 0) {
				displaySuperDragonfire = true;
			}
		}
		if (event.getKey().equals("showMark")) {
			if (!config.showMark()) {
				displayMark	= false;
			}
			log.debug("Mark config changed");
		}
	}

	public HighlightProperties getHighlightProperties() {
		if (displaySuperDragonfire) {
			if (displayVenom) {
				return new HighlightProperties(config.superDragonfireAndVenomImmunityColor(), config.venomThickness(), config.venomFeather());
			} else if (displayPoison) {
				return new HighlightProperties(config.superDragonfireAndPoisonImmunityColor(), config.poisonThickness(), config.poisonFeather());
			} else {
				return new HighlightProperties(config.superDragonfireImmunityColor(), config.superDragonfireThickness(), config.superDragonfireFeather());
			}
		} else if (displayDragonfire) {
			if (displayVenom) {
				return new HighlightProperties(config.dragonfireAndVenomImmunityColor(), config.venomThickness(), config.venomFeather());
			} else if (displayPoison) {
				return new HighlightProperties(config.dragonfireAndPoisonImmunityColor(), config.poisonThickness(), config.poisonFeather());
			} else {
				return new HighlightProperties(config.dragonfireImmunityColor(), config.dragonfireThickness(), config.dragonfireFeather());
			}
		} else if (displayVenom) {
			return new HighlightProperties(config.venomImmunityColor(), config.venomThickness(), config.venomFeather());
		} else if (displayPoison) {
			return new HighlightProperties(config.poisonImmunityColor(), config.poisonThickness(), config.poisonFeather());
		} else {
			//default option in case nothing is to be displayed
			return new HighlightProperties(new Color(0,0,0,0), 0, 0);
		}
	}

	public boolean getMarkHighlightStatus() {
		return displayMark;
	}
	public HighlightProperties getMarkHighlightProperties() {
		return new HighlightProperties(config.markColor(), config.markThickness(), config.markFeather());
	}

	@Provides
	PlayerStatusHighlightConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PlayerStatusHighlightConfig.class);
	}

	@Getter
	public static class HighlightProperties {
		private final Color color;
		private final int outlineWidth;
		private final int feather;
		private HighlightProperties(Color color, int outlineWidth, int feather) {
			this.color = color;
			this.outlineWidth = outlineWidth;
			this.feather = feather;
		}


	}
}

package com.playerstatus;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RunRuneLite
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PlayerStatusHighlightPlugin.class);
		RuneLite.main(args);
	}
}
