package com.catimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CATimerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CATimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.catimer;

import java.lang.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Objects;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.NpcChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.ui.overlay.infobox.Timer;


@Slf4j
@PluginDescriptor(
	name = "CA Timers"
)
public class CATimerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private CATimerConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Provides
	CATimerConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(CATimerConfig.class);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		NPC npc = npcSpawned.getNpc();
		if (npc.isDead()) {
			return;
		}

		int npcId = npc.getId();
		CABoss boss = CABoss.find(npcId);

		if (boss == null)
		{
			return;
		}
		long configTime;
        switch (npcId) {
            case NpcID.HESPORI:
                 configTime = config.hesporiTime().getTime();
                break;
            case NpcID.ZULRAH:
                configTime = config.zulrahTime().getTime();
                break;
			case NpcID.ALCHEMICAL_HYDRA:
				if (client.isInInstancedRegion()){
					configTime = config.hydraTime().getTime();
				} else {
					configTime = 0;
				}
				break;
            default:
                configTime = 0;
        }
		infoBoxManager.removeIf(t -> t instanceof SpeedrunTimer && ((SpeedrunTimer) t).getBoss() == boss);
        if (configTime != 0) {
			SpeedrunTimer timer = new SpeedrunTimer(boss, configTime, itemManager.getImage(boss.getItemSpriteId()), this);
			timer.setTooltip(npc.getName());
			infoBoxManager.addInfoBox(timer);
        }
	}

	// Vorkath case - will adjust as new bosses are added
	@Subscribe
	public void onNpcChanged(NpcChanged npcChanged) {
		NPC npc =  npcChanged.getNpc();
		NPCComposition npcComp = npc.getComposition();
		String firstAction = npcComp.getActions()[1];

		int npcId = npc.getId();
		CABoss boss = CABoss.find(npcId);

		if (boss == null || boss.getId() != NpcID.VORKATH_8061)
		{
			return;
		}
		long configTime = config.vorkathTime().getTime();
		infoBoxManager.removeIf(t -> t instanceof SpeedrunTimer && ((SpeedrunTimer) t).getBoss() == boss);
		if (Objects.equals(firstAction, "Attack") && configTime != 0) {
			SpeedrunTimer timer = new SpeedrunTimer(boss, configTime, itemManager.getImage(boss.getItemSpriteId()), this);
			timer.setTooltip(npc.getName());
			infoBoxManager.addInfoBox(timer);
		}
	}
}

package com.catimer;

import com.google.common.collect.ImmutableMap;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import net.runelite.api.ItemID;
import net.runelite.api.NpcID;
import java.util.ArrayList;
import java.util.List;

enum CABoss {
    HESPORI(NpcID.HESPORI, ItemID.BOTTOMLESS_COMPOST_BUCKET),
    VORKATH(NpcID.VORKATH_8061, ItemID.VORKI),
    HYDRA(NpcID.ALCHEMICAL_HYDRA, ItemID.IKKLE_HYDRA),
    ZULRAH(NpcID.ZULRAH, ItemID.PET_SNAKELING);
//    GALVEK(NpcID.GALVEK, ChronoUnit.SECONDS, ItemID.MYTHICAL_CAPE),
//    SEREN(NpcID.FRAGMENT_OF_SEREN, ItemID.CRYSTAL_OF_TRAHAEARN);

    private static final Map<Integer, CABoss> bosses;
    private final int id;
    private final int itemSpriteId;

    static {
        ImmutableMap.Builder<Integer, CABoss> builder = new ImmutableMap.Builder<>();

        for (CABoss boss : values()) {
            builder.put(boss.getId(), boss);
        }

        bosses = builder.build();
    }

    CABoss(int id, int itemSpriteId) {
        this.id = id;
        this.itemSpriteId = itemSpriteId;
    }

    public int getId() {
        return id;
    }

    public int getItemSpriteId() {
        return itemSpriteId;
    }

    public static CABoss find(int id) {
        return bosses.get(id);
    }

}
package com.catimer;

import com.catimer.config.HesporiTimes;
import com.catimer.config.VorkathTimes;
import com.catimer.config.ZulrahTimes;
import com.catimer.config.HydraTimes;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("catimers")
public interface CATimerConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "vorkath",
		name = "Vorkath Timer",
		description = "Select a kill time for the Vorkath Speedrun Task"
	)
	default VorkathTimes vorkathTime()
	{
		return VorkathTimes.GRANDMASTER;
	}

	@ConfigItem(
			position = 1,
			keyName = "hespori",
			name = "Hespori Timer",
			description = "Select a kill time for the Hespori Speedrun Task"
	)
	default HesporiTimes hesporiTime()
	{
		return HesporiTimes.MASTER;
	}

	@ConfigItem(
			position = 2,
			keyName = "zulrah",
			name = "Zulrah Timer",
			description = "Select a kill time for the Zulrah Speedrun Task"
	)
	default ZulrahTimes zulrahTime()
	{
		return ZulrahTimes.GRANDMASTER;
	}

	@ConfigItem(
			position = 3,
			keyName = "hydra",
			name = "Hydra Timer",
			description = "Select a kill time for the Hydra Speedrun Task"
	)
	default HydraTimes hydraTime()
	{
		return HydraTimes.GRANDMASTER;
	}
}

package com.catimer.config;
import lombok.Getter;
import lombok.RequiredArgsConstructor;


@Getter
@RequiredArgsConstructor
public enum ZulrahTimes {
    OFF("Off", 0),
    ELITE("1min20s", 83600),
    MASTER("1min", 63600),
    GRANDMASTER("54s", 57600);

    private final String name;
    private final long time;

    @Override
    public String toString()
    {
        return name;
    }
}
package com.catimer.config;
import lombok.Getter;
import lombok.RequiredArgsConstructor;


@Getter
@RequiredArgsConstructor
public enum HydraTimes {
    OFF("Off", 0),
    MASTER("1min45s", 105000),
    GRANDMASTER("1min20s", 80000);


    private final String name;
    private final long time;

    @Override
    public String toString()
    {
        return name;
    }
}
package com.catimer.config;
import lombok.Getter;
import lombok.RequiredArgsConstructor;


@Getter
@RequiredArgsConstructor
public enum VorkathTimes {
    OFF("Off", 0),
    MASTER("1min15s", 75000),
    GRANDMASTER("54s", 54000);

    private final String name;
    private final long time;

    @Override
    public String toString()
    {
        return name;
    }
}

package com.catimer.config;
import lombok.Getter;
import lombok.RequiredArgsConstructor;


@Getter
@RequiredArgsConstructor
public enum HesporiTimes {
    OFF("Off", 0),
    ELITE("45s", 48000),
    MASTER("36s", 36000);

    private final String name;
    private final long time;

    @Override
    public String toString()
    {
        return name;
    }
}
package com.catimer;
import net.runelite.client.ui.overlay.infobox.Timer;

import java.awt.image.BufferedImage;
import java.time.temporal.ChronoUnit;

import net.runelite.client.plugins.Plugin;

public class SpeedrunTimer extends Timer {
    private final CABoss boss;

    public SpeedrunTimer(CABoss boss, long period, BufferedImage bossImage, Plugin plugin)
    {
        super(period, ChronoUnit.MILLIS, bossImage, plugin);
        this.boss = boss;
    }

    public CABoss getBoss()
    {
        return boss;
    }
}

