package com.herestrouble;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HeresTroublePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HeresTroublePlugin.class);
		RuneLite.main(args);
	}


}
package com.herestrouble;

public enum Sound {
    HERES_TROUBLE_1("/heres_trouble1.wav"),
    HERES_TROUBLE_2("/heres_trouble2.wav"),
    HERES_TROUBLE_3("/heres_trouble3.wav");

    private final String resourceName;

    Sound(String name) {
        resourceName = name;
    }
    String getResourceName() {
        return resourceName;
    }

    public static Sound getSound(int id) {
        switch (id) {
            case 1:
                return Sound.HERES_TROUBLE_1;
            case 2:
                return Sound.HERES_TROUBLE_2;
            default:
                return Sound.HERES_TROUBLE_3;
        }


    }

}

package com.herestrouble;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private HeresTroubleConfig config;

    private static final long CLIP_MTIME_UNLOADED = -2;
    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;

    private boolean loadClip(Sound sound) {
        try (InputStream stream = new BufferedInputStream(SoundFileManager.getSoundStream(sound))) {
            try (AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(stream)) {
                clip.open(audioInputStream);
            }
            return true;
        } catch ( UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.warn("Failed to load sound: " + sound, e);
        }
        return false;
    }

    public void playClip(Sound sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }
            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for here's trouble sound " + sound, e);
                return;
            }
            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        float gain  = 20f * (float) Math.log10(config.pluginVolume()/100f);
        gain = Math.min(gain, volume.getMaximum());
        gain = Math.max(gain, volume.getMinimum());
        volume.setValue(gain);
        clip.loop(0);
    }
}

package com.herestrouble;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Here's Trouble")
public interface HeresTroubleConfig extends Config
{
	@ConfigItem(
			keyName = "friends",
			name = "Friends List",
			description = "Play sound when you see a player on your friends list."
	)
	default boolean friendsList() {
		return true;
	}

	@ConfigItem(
			keyName = "clan",
			name = "Clan Members",
			description = "Play sound when you see a player within your clan."
	)
	default boolean clanMembers() {
		return true;
	}

	@ConfigItem(
			keyName = "volume",
			name = "Volume",
			description = "Volume of sounds generated from plugin."
	)
	default int pluginVolume() {
		return 100;
	}

}

package com.herestrouble;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.io.FileNotFoundException;
import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "Here's Trouble"
)
public class HeresTroublePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private HeresTroubleConfig config;

	@Inject
	private SoundEngine soundEngine;

	private Set<String> friendsSeen = new HashSet<>();

	private int heresTroubleTimer = 5;

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState() == GameState.HOPPING || gameStateChanged.getGameState() == GameState.LOGIN_SCREEN || gameStateChanged.getGameState() == GameState.LOGIN_SCREEN_AUTHENTICATOR) {
			friendsSeen.clear();
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage c) {
		if (c.getType().equals(ChatMessageType.LOGINLOGOUTNOTIFICATION)) {
			String text = c.getMessage();
			if (text.contains(" has logged out.")) {
				text = text.replace(" has logged out.", "");
				String name = text.replaceAll("\\P{Print}", " "); //spaces sometimes read as unicode, so replace unicode chars with spaces
				friendsSeen.remove(name);
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick e) {
		if (heresTroubleTimer > 0) {
			heresTroubleTimer--;
		}

		else if (config.friendsList() || config.clanMembers()) {
			List<Player> players = client.getPlayers();
			for (Player p : players) {
				if (((p.isFriend() && config.friendsList()) || (p.isClanMember() && config.clanMembers())) && !friendsSeen.contains(p.getName()) && p != client.getLocalPlayer()) {
					friendsSeen.add(p.getName());
					int troubleNum = (int) Math.ceil(Math.random()*3);
					soundEngine.playClip(Sound.getSound(troubleNum));
					client.getLocalPlayer().setOverheadText("Here's trouble");
					p.setOverheadText("Here's trouble");
					p.setOverheadCycle(200);
					client.getLocalPlayer().setOverheadCycle(200);
				}
			}
			heresTroubleTimer = 5;
		}
		else {
			heresTroubleTimer = 5;
		}
	}

	@Provides
	HeresTroubleConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HeresTroubleConfig.class);
	}
}

package com.herestrouble;

import lombok.extern.slf4j.Slf4j;
import java.io.FileNotFoundException;
import java.io.InputStream;

@Slf4j
public abstract class SoundFileManager {
    public static InputStream getSoundStream(Sound sound) throws FileNotFoundException {
        return SoundFileManager.class.getResourceAsStream(sound.getResourceName());
    }
}

