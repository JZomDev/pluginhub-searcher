package com.combatdetails;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CombatDetailsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CombatDetailsPlugin.class);
		RuneLite.main(args);
	}
}
package com.combatdetails;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.text.DecimalFormat;

public class OpponentDetailsOverlay extends OverlayPanel{
    private static final DecimalFormat HIT_PERCENT_FORMAT = new DecimalFormat("#.##");
    private static final int BORDER_SIZE = 2;
    private final CombatDetailsConfig config;
    private final PlayerCombatDetails playerCombatDetails;

    private final TitleComponent opponentAccuracy = TitleComponent.builder().build();
    private final TitleComponent opponentDamage = TitleComponent.builder().build();
    private final TitleComponent opponentDps = TitleComponent.builder().build();
    private final TitleComponent opponentTitle = TitleComponent.builder().build();

    @Inject
    private OpponentDetailsOverlay(CombatDetailsPlugin plugin, CombatDetailsConfig config){
        super(plugin);
        this.config = config;
        this.playerCombatDetails = plugin.getPlayerCombatDetails();
        setPriority(PRIORITY_LOW);
        buildOverlays();
    }

    public void buildOverlays(){
        panelComponent.getChildren().clear();
        panelComponent.setBorder(new Rectangle(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
        panelComponent.setGap(new Point(0,2));
        setPreferredPosition(OverlayPosition.BOTTOM_LEFT);
        setSnappable(true);
        setResizable(true);

        opponentTitle.setText("Opponent");
        opponentAccuracy.setText("ACC: ~");
        opponentAccuracy.setColor(config.opponentTextColor());
        opponentDamage.setText("DMG: ~");
        opponentDamage.setColor(config.opponentTextColor());
        opponentDps.setText("DPS: ~");
        opponentDps.setColor(config.opponentTextColor());


        if(config.opponentAccuracy() ||
                config.opponentDamage() ||
                config.opponentDps()){
            panelComponent.getChildren().add(opponentTitle);
        }
        if(config.opponentDps())
            panelComponent.getChildren().add(opponentDps);
        if(config.opponentAccuracy())
            panelComponent.getChildren().add(opponentAccuracy);
        if(config.opponentDamage())
            panelComponent.getChildren().add(opponentDamage);
    }

    @Override
    public Dimension render(Graphics2D graphics){
        //if the config does not display any opponent data, do not display
        if(!config.opponentAccuracy() &&
                !config.opponentDamage() &&
                !config.opponentDps()){
            return null;
        }

        //If not in combat at all
        if(!playerCombatDetails.getInCombat()){
            return null;
        }

        //If the current combat is a "ghost combat" where the player is just interacting with an npc with no hits done/taken
        if(playerCombatDetails.getHitsTaken() == 0 && playerCombatDetails.getHitsDone() == 0){
            return null;
        }

        String opponentAttackString = String.format("ACC: %s%%", HIT_PERCENT_FORMAT.format(playerCombatDetails.getOpponentAccuracy() * 100));
        String opponentDamageString = String.format("DMG: %d", playerCombatDetails.getDamageTaken());
        String opponentDpsString = String.format("DPS: %s%%", HIT_PERCENT_FORMAT.format(playerCombatDetails.getOpponentAccuracy() * 100));

        opponentAccuracy.setText(opponentAttackString);
        opponentDamage.setText(opponentDamageString);
        opponentDps.setText(opponentDpsString);

        final FontMetrics fontMetrics = graphics.getFontMetrics();
        int panelWidth = Math.max(ComponentConstants.STANDARD_WIDTH/2, fontMetrics.stringWidth(opponentAttackString) + ComponentConstants.STANDARD_BORDER + ComponentConstants.STANDARD_BORDER);
        panelComponent.setPreferredSize(new Dimension(panelWidth, 0));
        return panelComponent.render(graphics);
    }
}

package com.combatdetails;

import lombok.Getter;
import lombok.Setter;

@Getter
public class PlayerCombatDetails {
    private int totalKills;
    private int hitsTaken;
    private int hitsDone;
    private int redHitsplatsDone;
    private int redHitsplatsTaken;
    private int damageTaken;
    private int damageDealt;
    private int timeInCombat;
    @Setter
    private int resetTimer;

    public PlayerCombatDetails(){
        totalKills = 0;
        hitsDone = 0;
        redHitsplatsDone = 0;
        hitsTaken = 0;
        redHitsplatsTaken = 0;
        damageTaken = 0;
        damageDealt = 0;
        timeInCombat = 0;
        resetTimer = 0;
    }

    public void resetPlayerCombatDetails(){
        totalKills = 0;
        hitsDone = 0;
        redHitsplatsDone = 0;
        hitsTaken = 0;
        redHitsplatsTaken = 0;
        damageTaken = 0;
        damageDealt = 0;
        timeInCombat = 0;
        resetTimer = 0;
    }

    public void playerDealtDamage(int damageAmount){
        hitsDone++;
        damageDealt += damageAmount;
        if(damageAmount>0){
            redHitsplatsDone++;
        }
    }

    public void tickTimer(){
        resetTimer--;
        timeInCombat++;
    }

    public double getPlayerAccuracy(){
        return ((double) redHitsplatsDone) / hitsDone;
    }
    public double getOpponentAccuracy(){ return ((double) redHitsplatsTaken) / hitsTaken; }

    public void takeDamage(int damageAmount){
        hitsTaken++;
        if(damageAmount > 0){
            redHitsplatsTaken++;
        }
        damageTaken += damageAmount;
    }

    public void enemyKilled(){
        totalKills++;
    }

    public double getKillsPerHour(){
        double combatTimeMilliseconds = (double) timeInCombat*CombatDetailsPlugin.MILLISECONDS_PER_TICK;

        return 1000*60*60*totalKills / combatTimeMilliseconds;
    }

    public double getDamageTakenPerSecond(){
        double combatTimeMilliseconds = (double) timeInCombat*CombatDetailsPlugin.MILLISECONDS_PER_TICK;
        return 1000 * damageTaken / combatTimeMilliseconds;
    }

    public double getPlayerDps(){
        double combatTimeMilliseconds = (double) timeInCombat*CombatDetailsPlugin.MILLISECONDS_PER_TICK;
        return 1000 * damageDealt / combatTimeMilliseconds;
    }

    public boolean getInCombat() {
        if(resetTimer <= 0){
            return false;
        } else{
            return true;
        }
    }
}

package com.combatdetails;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.NPCManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;


@Slf4j
@PluginDescriptor(
	name = "Combat Details"
)
public class CombatDetailsPlugin extends Plugin
{
	//Number of grace ticks for an opponent to be given before removing them as an opponent
	public static final int MILLISECONDS_PER_TICK = 600;

	@Getter
	private PlayerCombatDetails playerCombatDetails = new PlayerCombatDetails();
	@Getter
	private Actor player;
	private int totalPlayerAttacks;
	private int totalPlayerRedHitsDealt;
	private int totalPlayerDefenses;
	private int totalPlayerRedHitsTaken;
	private int killsPerHour;
	private int outOfCombatTicks = 20;
	private final HashMap<Actor, NPCCombatDetails> combatOpponents = new HashMap<>();
	Iterator<Map.Entry<Actor, NPCCombatDetails>> iterator;

	@Inject
	private Client client;

	@Inject
	private CombatDetailsConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PlayerDetailsOverlay playerDetailsOverlay;

	@Inject
	private OpponentDetailsOverlay opponentDetailsOverlay;

	@Override
	protected void startUp() throws Exception
	{
		//Started
		playerCombatDetails.resetPlayerCombatDetails();
		overlayManager.add(playerDetailsOverlay);
		overlayManager.add(opponentDetailsOverlay);
		outOfCombatTicks = config.outOfCombatTicks();
	}

	@Subscribe
	protected void onConfigChanged(ConfigChanged configChanged){
		playerDetailsOverlay.buildOverlays();
		opponentDetailsOverlay.buildOverlays();

	}

	@Override
	protected void shutDown() throws Exception
	{
		playerCombatDetails.resetPlayerCombatDetails();
		overlayManager.remove(playerDetailsOverlay);
		overlayManager.remove(opponentDetailsOverlay);
		//Stopped
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			player = client.getLocalPlayer();
		}
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath){
		playerCombatDetails.enemyKilled();
		combatOpponents.remove(actorDeath.getActor());
	}

	@Subscribe
	public void onGameTick(GameTick gameTick){
		iterator = combatOpponents.entrySet().iterator();
		if(playerCombatDetails.getInCombat()){
			playerCombatDetails.tickTimer();
		}
		//For testing. puts the interaction time above the opponent every tick
		while(iterator.hasNext()){
			playerCombatDetails.setResetTimer(outOfCombatTicks);
			Map.Entry<Actor, NPCCombatDetails> entry = iterator.next();
			Actor actor = entry.getKey();
			NPCCombatDetails combatDetails = entry.getValue();
			combatDetails.tickTimer();
			if(combatDetails.getResetTimer() <= 0){
				//check if still interacting
				if(actor.getInteracting() == player || player.getInteracting() == actor){
					//Reset the timer if they're still in combat/interacting
					combatDetails.setResetTimer(outOfCombatTicks);
				} else{
					//If not still interacting, remove from the list
					combatOpponents.remove(actor);
					return;
				}
			}
		}
		if(combatOpponents.isEmpty() && playerCombatDetails.getResetTimer() <= 0){
			playerCombatDetails.resetPlayerCombatDetails();
		}
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged interactingChanged){
		Actor source = interactingChanged.getSource();
		Actor target = interactingChanged.getTarget();
		if(source == player && target != null){
            combatOpponents.computeIfAbsent(target, key -> new NPCCombatDetails(outOfCombatTicks));
		}
		else if(target == player){
			combatOpponents.computeIfAbsent(source, key -> new NPCCombatDetails(outOfCombatTicks));
		} else {
            combatOpponents.remove(source);
		}

	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied){
		//Only display the on-screen info box if a hitsplat occurs to the player or one of the enemies
		//If the hitsplat was applied to someone in our combat opponents
		if(hitsplatApplied.getActor() == player){
			//if the player was hit, add that damage to the player's details
			playerCombatDetails.takeDamage(hitsplatApplied.getHitsplat().getAmount());

		}else if(hitsplatApplied.getHitsplat().isMine() && combatOpponents.containsKey(hitsplatApplied.getActor())){
			//If the opponent was hit, add that to the opponent's details.
			NPCCombatDetails npcCombatDetails = combatOpponents.get(hitsplatApplied.getActor());
			npcCombatDetails.takeDamage(hitsplatApplied.getHitsplat().getAmount());
			playerCombatDetails.playerDealtDamage(hitsplatApplied.getHitsplat().getAmount());
		}
	}

	@Provides
	CombatDetailsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CombatDetailsConfig.class);
	}
}

package com.combatdetails;

import lombok.Getter;
import lombok.Setter;

@Getter
public class NPCCombatDetails {
    private int hitsTaken;
    private int redHitsplatsTaken;
    private int damageTaken;
    private int timeInCombat;
    @Setter
    private int resetTimer;

    public NPCCombatDetails(int _resetTimer){
        hitsTaken = 0;
        redHitsplatsTaken = 0;
        damageTaken = 0;
        timeInCombat = 0;
        resetTimer = _resetTimer;
    }

    public void tickTimer(){
        resetTimer--;
        timeInCombat++;
    }

    public void takeDamage(int damageAmount){
        damageTaken += damageAmount;
        if(damageAmount > 0){
            redHitsplatsTaken++;
        }
        hitsTaken++;
    }
}

package com.combatdetails;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.*;

import javax.inject.Inject;
import java.awt.*;
import java.text.DecimalFormat;

public class PlayerDetailsOverlay extends OverlayPanel{
    private static final DecimalFormat KPH_FORMAT = new DecimalFormat("#.##");
    private static final DecimalFormat HIT_PERCENT_FORMAT = new DecimalFormat("#.##");
    private static final int BORDER_SIZE = 2;
    private final CombatDetailsConfig config;
    private final Client client;
    private final PlayerCombatDetails playerCombatDetails;

    private final TitleComponent playerDps = TitleComponent.builder().build();
    private final TitleComponent playerAccuracy = TitleComponent.builder().build();
    private final TitleComponent playerDamage = TitleComponent.builder().build();
    private final TitleComponent playerKillsPerHour = TitleComponent.builder().build();
    private final TitleComponent playerTitle = TitleComponent.builder().build();

    @Inject
    private PlayerDetailsOverlay(Client client, CombatDetailsPlugin plugin, CombatDetailsConfig config){
        super(plugin);
        this.config = config;
        this.client = client;
        this.playerCombatDetails = plugin.getPlayerCombatDetails();
        setPriority(PRIORITY_LOW);
        buildOverlays();
    }

    public void buildOverlays(){
        panelComponent.getChildren().clear();
        panelComponent.setBorder(new Rectangle(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
        panelComponent.setGap(new Point(0,2));
        this.setResizable(true);
        setPreferredPosition(OverlayPosition.BOTTOM_LEFT);
        setSnappable(true);
        setResizable(true);

        playerTitle.setText("Player");
        playerDps.setText("DPS: ~");
        playerDps.setColor(config.playerTextColor());
        playerAccuracy.setText("Acc: ~");
        playerAccuracy.setColor(config.playerTextColor());
        playerDamage.setText("Dmg: ~");
        playerDamage.setColor(config.playerTextColor());
        playerKillsPerHour.setText("KPH: ~");
        playerKillsPerHour.setColor(config.playerTextColor());


        if(config.playerAccuracy() ||
                config.playerDamage() ||
                config.playerKillsPerHour() ||
                config.playerDps()){
            panelComponent.getChildren().add(playerTitle);
        }
        if(config.playerDps())
            panelComponent.getChildren().add(playerDps);
        if(config.playerAccuracy())
            panelComponent.getChildren().add(playerAccuracy);
        if(config.playerDamage())
            panelComponent.getChildren().add(playerDamage);
        if(config.playerKillsPerHour())
            panelComponent.getChildren().add(playerKillsPerHour);
    }

    @Override
    public Dimension render(Graphics2D graphics){
        //If the config does display contain any player data, do not display
        if(!config.playerAccuracy() &&
                !config.playerDamage() &&
                !config.playerKillsPerHour() &&
                !config.playerDps()){
            return null;
        }

        //If not in combat, do not display
        if(!playerCombatDetails.getInCombat()){
            return null;
        }

        //If the current combat is a "ghost combat" where the player is just interacting with an npc but not taking or dealing damage
        if(playerCombatDetails.getHitsTaken() == 0 && playerCombatDetails.getHitsDone() == 0){
            return null;
        }

        String playerAccuracyString = String.format("ACC: %s%%", HIT_PERCENT_FORMAT.format(playerCombatDetails.getPlayerAccuracy() * 100));
        String playerDpsString = String.format("DPS: %s",KPH_FORMAT.format(playerCombatDetails.getPlayerDps()));
        String playerDamageString = String.format("DMG: %d", playerCombatDetails.getDamageDealt());
        String playerKillersPerHourString = String.format("KPH: %s", KPH_FORMAT.format(playerCombatDetails.getKillsPerHour()));

        playerTitle.setText(client.getLocalPlayer().getName());
        playerAccuracy.setText(playerAccuracyString);
        playerDamage.setText(playerDamageString);
        playerDps.setText(playerDpsString);
        playerKillsPerHour.setText(playerKillersPerHourString);

        //Resize panel width to be big enough for player name or the accuracy string
        final FontMetrics fontMetrics = graphics.getFontMetrics();
        int panelWidth = Math.max(ComponentConstants.STANDARD_WIDTH/2, fontMetrics.stringWidth(playerAccuracyString) + ComponentConstants.STANDARD_BORDER + ComponentConstants.STANDARD_BORDER);
        panelWidth = Math.max(panelWidth, fontMetrics.stringWidth("" + client.getLocalPlayer().getName()) + ComponentConstants.STANDARD_BORDER + ComponentConstants.STANDARD_BORDER);
        panelComponent.setPreferredSize(new Dimension(panelWidth, 0));
        return panelComponent.render(graphics);
    }
}

package com.combatdetails;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup(CombatDetailsConfig.GROUP)
public interface CombatDetailsConfig extends Config {
    String GROUP = "combatdetails";

    @ConfigItem(
            keyName = "outOfCombatTicks",
            name = "Out Of Combat Time",
            description = "The number of ticks to wait before resetting.",
            position = 0
    )
    default int outOfCombatTicks() { return 20; }

    @ConfigSection(
            name = "Player Details",
            description = "Details about the player's combat stats.",
            position = 1
    )
    String playerDetails = "playerDetails";

    @ConfigItem(
            keyName = "playerDps",
            name = "Display Player DPS",
            description = "Display the player's actual DPS",
            position = 2,
            section = playerDetails
    )
    default boolean playerDps() {
        return true;
    }

    @ConfigItem(
            keyName = "playerAccuracy",
            name = "Display Player Accuracy",
            description = "Display the accuracy of the player's attacks on monsters. A value over 1.0 means that a player succesfully hits multiple times per attack (multi-target attacks, cannon, etc)",
            position = 2,
            section = playerDetails
    )
    default boolean playerAccuracy() {
        return true;
    }

    @ConfigItem(
            keyName = "playerDamage",
            name = "Display Player Damage Amount",
            description = "Display the total amount of damage a player has done in combat",
            position = 3,
            section = playerDetails
    )
    default boolean playerDamage() {
        return true;
    }

    @ConfigItem(
            keyName = "playerKillsPerHour",
            name = "Display Kills Per Hour",
            description = "Display the total number of kills per hour a player achieves",
            position = 4,
            section = playerDetails
    )
    default boolean playerKillsPerHour() {
        return true;
    }

    @ConfigItem(
            keyName = "playerTextColor",
            name = "Text Color",
            description = "The text color for the player details",
            position = 6,
            section = playerDetails
    )
    default Color playerTextColor() {
        return new Color(146,171,255);
    }



    @ConfigSection(
            name = "Opponent Details",
            description = "Details regarding the opponent's combat stats.",
            position = 2
    )
    String opponentDetails = "opponentDetails";

    @ConfigItem(
            keyName = "opponentDps",
            name = "Display Opponent DPS",
            description = "Display the actual DPS of the opponent.",
            position = 1,
            section = opponentDetails
    )
    default boolean opponentDps() {
        return true;
    }

    @ConfigItem(
            keyName = "opponentAccuracy",
            name = "Display Opponent Accuracy",
            description = "Display the accuracy of the opponent's hits.",
            position = 2,
            section = opponentDetails
    )
    default boolean opponentAccuracy() {
        return true;
    }

    @ConfigItem(
            keyName = "opponentDamage",
            name = "Display Opponent Damage Amount",
            description = "Display the total amount of damage a player has received in combat",
            position = 3,
            section = opponentDetails
    )
    default boolean opponentDamage() {
        return true;
    }


    @ConfigItem(
            keyName = "opponentTextColor",
            name = "Text Color",
            description = "The text color for the opponent details",
            position = 4,
            section = opponentDetails
    )
    default Color opponentTextColor() {
        return new Color(255,136,136);
    }
}

