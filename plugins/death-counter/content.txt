package com.deathcounter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DeathCounterPluginTest {
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(DeathCounterPlugin.class);
        RuneLite.main(args);
    }
}

package com.deathcounter;

import lombok.Getter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Counter;
import net.runelite.client.util.QuantityFormatter;

import java.awt.image.BufferedImage;

class DeathCounter extends Counter
{
    @Getter
    private final int itemID;
    private final String name;

    DeathCounter(Plugin plugin, int itemID, int count, String name, BufferedImage image)
    {
        super(image, plugin, count);
        this.itemID = itemID;
        this.name = name;
    }

    @Override
    public String getText()
    {
        return QuantityFormatter.quantityToRSDecimalStack(getCount());
    }

    @Override
    public String getTooltip()
    {
        return "Deaths";
    }
}

package com.deathcounter;

import net.runelite.api.*;
import net.runelite.api.events.AnimationChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;
import java.awt.image.BufferedImage;

@PluginDescriptor(
        name = "Death Counter",
        description = "Shows death of players around you and tells you their name.",
        tags = {}
)

public class DeathCounterPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private InfoBoxManager infoBoxManager;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ChatMessageManager chatMessageManager;

    private DeathCounter counterBox;

    @Override
    protected void startUp() throws Exception
    {
    }

    @Override
    protected void shutDown() throws Exception
    {
        infoBoxManager.removeInfoBox(counterBox);
        counterBox = null;
    }

    @Subscribe
    public void onAnimationChanged(AnimationChanged event){
        Actor actor = event.getActor();
        if(!(actor instanceof Player)) return;
        if (actor.getHealthRatio() != 0) return;
        if (actor.getAnimation() != AnimationID.DEATH) return;

        if (counterBox != null){
            counterBox.setCount(counterBox.getCount() + 1);

            sendChatMessage(actor.getName() + "just lost bank!");
        }

        else{
            updateInfobox();
        }
    }
	/*@Subscribe
	public void onActorDeath(ActorDeath event)
	{
		Actor playerActor = event.getActor();

		if(playerActor.isDead()) {
			counterBox.setCount(counterBox.getCount() + 1);
			String chat = new ChatMessageBuilder()
					.append(ChatColorType.HIGHLIGHT)
					.append(playerActor.getName() + "just got smoked!")
					.build();
			messager.queue(
					QueuedMessage.builder()
							.type(ChatMessageType.CONSOLE)
							.runeLiteFormattedMessage(chat)
							.build());
			updateInfobox();
		}
	}*/


    private void updateInfobox()
    {
        removeInfobox();
        final BufferedImage image = itemManager.getImage(ItemID.BONES, 1, false);
        counterBox = new DeathCounter(this, ItemID.BONES, 1, "ded", image);
        infoBoxManager.addInfoBox(counterBox);
    }

    private void removeInfobox()
    {
        infoBoxManager.removeInfoBox(counterBox);
        counterBox = null;
    }

    private void sendChatMessage(String chatMessage)
    {
        final String message = new ChatMessageBuilder()
                .append(ChatColorType.HIGHLIGHT)
                .append(chatMessage)
                .build();

        chatMessageManager.queue(
                QueuedMessage.builder()
                        .type(ChatMessageType.CONSOLE)
                        .runeLiteFormattedMessage(message)
                        .build());
    }
}

