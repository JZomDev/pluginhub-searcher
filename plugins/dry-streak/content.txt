package no.kriops.drystreak;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DryStreakPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DryStreakPlugin.class);
		RuneLite.main(args);
	}
}
package no.kriops.drystreak;

import com.google.inject.Provides;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import java.awt.image.BufferedImage;
import javax.annotation.Nullable;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;


@Slf4j
@PluginDescriptor(
        name = "Dry Streak"
)
public class DryStreakPlugin extends Plugin {
    @Inject
    @Nullable
    private Client client;
    @Inject
    private ClientToolbar clientToolbar;
    @Inject
    private DryStreakConfig config;

    private NavigationButton navButton;
    private DryStreakPanel dryStreakPanel;

    @Provides
    DryStreakConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(DryStreakConfig.class);
    }

    @Override
    protected void startUp() {
        dryStreakPanel = injector.getInstance(DryStreakPanel.class);
        BufferedImage icon;
        try {
            icon = ImageUtil.loadImageResource(getClass(), "/icon.png");
        } catch (Exception e) {
            icon = new BufferedImage(40, 40, BufferedImage.TYPE_INT_RGB);
        }
        navButton = NavigationButton.builder()
                .tooltip("Dry Streak")
                .priority(5)
                .panel(dryStreakPanel)
                .icon(icon)
                .build();
        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(navButton);
        super.shutDown();
    }
}

package no.kriops.drystreak;

import net.runelite.client.config.ConfigGroup;

@ConfigGroup("DryStreak")
public interface DryStreakConfig extends net.runelite.client.config.Config
{
}

package no.kriops.drystreak;

import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;
import org.apache.commons.lang3.math.Fraction;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Optional;

public class DryStreakCalculation implements ActionListener {
    final FlatTextField inputField;
    final JShadowedLabel outputField;

    DryStreakCalculation(FlatTextField inputField, JShadowedLabel outputField) {
        this.inputField = inputField;
        this.outputField = outputField;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        final String explanation = "At this number of kills, you are less likely to have received zero drops than not.";
        String message = Optional.ofNullable(inputField.getText())
            .map(input -> {
                try {
                    return 1.0 / Integer.parseInt(input);
                } catch (NumberFormatException ignored) {
                }

                try {
                    return Double.parseDouble(input);
                } catch (NumberFormatException ignored) {
                }

                try {
                    return Fraction.getFraction(input).doubleValue();
                } catch (NumberFormatException ignored) {
                }

                return null;
            })
            .map(p -> {
                if (0 < p && p < 1) {
                    try {
                        int result = geometricMedian(p);
                        return String.format("<p>Expected dry streak: %s</p><br><p>%s</p>", result, explanation);
                    } catch (Exception ignored) {
                        return "Error performing calculation.";
                    }
                } else {
                    return "Drop rate must be greater than zero and less than one.";
                }
            })
            .orElse("Unable to parse input.");

        outputField.setText(asHtml(message));
    }

    private static String asHtml(String input) {
        return String.format("<html>%s</html>", input);
    }

    private static int geometricMedian(double p) {
        return Math.max(0, (int) Math.ceil(-1 / log2(1 - p)) - 1);
    }

    private static double log2(double x) {
        return Math.log(x) / Math.log(2.0);
    }

}

package no.kriops.drystreak;

import java.awt.*;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.ui.components.ColorJButton;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

@Slf4j
public class DryStreakPanel extends PluginPanel {

    private final DryStreakCalculation dryStreakCalculation;
    private final FlatTextField dropRate;

    @Inject
    public DryStreakPanel() {
        setBorder(BorderFactory.createEmptyBorder(10, 10, 0, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new GridBagLayout());

        // Expand sub items to fit width of panel, align to top of panel
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.insets = new Insets(0, 0, 10, 0);

        JShadowedLabel dropRateLabel = new JShadowedLabel("<html>Enter drop rate:</html>");
        add(dropRateLabel, c);
        c.gridy++;

        dropRate = new FlatTextField();
        dropRate.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        dropRate.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        dropRate.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        dropRate.setMinimumSize(new Dimension(0, 30));
        add(dropRate, c);
        c.gridy++;

        ColorJButton button = new ColorJButton("Calculate", new Color(255, 255, 255));
        add(button, c);
        c.gridy++;

        JShadowedLabel resultLabel = new JShadowedLabel("<html>Enter drop rate as 1/25, 25 or 0.04.</html>");
        add(resultLabel, c);
        c.gridy++;

        this.dryStreakCalculation = new DryStreakCalculation(dropRate, resultLabel);
        dropRate.addActionListener(dryStreakCalculation);
        button.addActionListener(dryStreakCalculation);
    }

    @Override
    public void onActivate() {
        super.onActivate();
        dropRate.requestFocusInWindow();
    }

    @Override
    public void onDeactivate() {
        super.onDeactivate();
    }
}
