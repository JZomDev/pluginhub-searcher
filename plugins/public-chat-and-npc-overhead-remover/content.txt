package com.PublicChatAndNPCOverheadRemover;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.HashSet;
import java.util.Set;

@Slf4j
@PluginDescriptor(
		name = "Public Chat And NPC Overhead Chat Remover",
		description = "Removes Selected Automatic Public Chat Entries and NPC Overhead Chat Messages"
)
public class PublicChatAndNPCOverheadRemoverPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private PublicChatAndNPCOverheadRemoverPluginConfig config;

	static final String CONFIG_GROUP = "PublicChatAndNPCOverheadRemoverConfigGroup";

	// Special Attack Messages
	private static final String AXE_SPECIAL_TEXT = "Chop chop!";
	private static final String PICKAXE_SPECIAL_TEXT = "Smashing!";
	private static final String HARPOON_SPECIAL_TEXT = "Here fishy fishies!";

	// Other Messages
	private static final String CUPPA_TEA_TEXT = "Aaah, nothing like a nice cuppa tea!";

	// NPC IDs
	private static final Set<Integer> CERBERUS = Set.of(5862, 5863, 5866);
	private static final Set<Integer> SUMMONED_SOUL = Set.of(5867, 5868, 5869);
	private static final Set<Integer> NEX = Set.of(11278, 11279, 11280, 11281, 11282);
	private static final Set<Integer> BARBARIAN = Set.of(3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3256, 3262, 10676, 10677, 10678, 10679, 10984, 10985, 10986, 10987, 10988);
	private static final Set<Integer> GRAARDOR = Set.of(2215, 6494, 12444);
	private static final Set<Integer> KRIL = Set.of(3129, 6495, 12446);
	private static final Set<Integer> ZILYANA = Set.of(2205, 6493, 12445);
	private static final Set<Integer> KREE = Set.of(3162, 6492, 12443);
	private static final Set<Integer> DERANGEDARCH = Set.of(7806);
	private static final Set<Integer> CRAZYARCH = Set.of(6618);
	private static final Set<Integer> CHAOSFANATIC = Set.of(6619);
	private static final Set<Integer> ROGUE = Set.of(6603);
	private static final Set<Integer> TOWN_CRIER = Set.of(276, 277, 278, 279, 280, 6823, 10887);
	private static final Set<Integer> CHAOS_FANATIC = Set.of(6619);
	private static final Set<Integer> RAMOCEAN = Set.of(6937);
	private static final Set<Integer> PROSPECTOR_PERCY = Set.of(6562);

	// Special Attacks
	private Set<String> activeMutesOH;
	private Set<String> activeMutesPC;

	// NPCs
	private Set<Integer> mutedNPCsOH;
//	private Set<Integer> mutedNPCsPC;

	@Override
	protected void startUp() throws Exception
	{
		// Special Attacks
		activeMutesOH = new HashSet<>();
		activeMutesPC = new HashSet<>();

		// NPCs
		mutedNPCsOH = new HashSet<>();
//		mutedNPCsPC = new HashSet<>();

		readConfig();
	}

	private void readConfig()
	{
		// Special Attacks
		activeMutesOH.clear();
		activeMutesPC.clear();

		// NPCs
		mutedNPCsOH.clear();
//		mutedNPCsPC.clear();

		// Special Attacks - Overheads
		if (config.muteAxesOH())
		{
			activeMutesOH.add(AXE_SPECIAL_TEXT);
		}
		if (config.mutePickaxesOH())
		{
			activeMutesOH.add(PICKAXE_SPECIAL_TEXT);
		}
		if (config.muteHarpoonsOH())
		{
			activeMutesOH.add(HARPOON_SPECIAL_TEXT);
		}

		// Special Attacks - Public Chat
		if (config.muteAxesPC())
		{
			activeMutesPC.add(AXE_SPECIAL_TEXT);
		}
		if (config.mutePickaxesPC())
		{
			activeMutesPC.add(PICKAXE_SPECIAL_TEXT);
		}
		if (config.muteHarpoonsPC())
		{
			activeMutesPC.add(HARPOON_SPECIAL_TEXT);
		}

		// NPCs - Overheads
		if (config.muteCerberusOH())
		{
			mutedNPCsOH.addAll(CERBERUS);
		}
		if (config.muteSummonedSoulOH())
		{
			mutedNPCsOH.addAll(SUMMONED_SOUL);
		}
		if (config.muteNexOH())
		{
			mutedNPCsOH.addAll(NEX);
		}
		if (config.muteBarbarianOH())
		{
			mutedNPCsOH.addAll(BARBARIAN);
		}
		if (config.muteKrilOH())
		{
			mutedNPCsOH.addAll(KRIL);
		}
		if (config.muteGeneralGraardorOH())
		{
			mutedNPCsOH.addAll(GRAARDOR);
		}
		if (config.muteKreeOH())
		{
			mutedNPCsOH.addAll(KREE);
		}
		if (config.muteCommanderZilyanaOH())
		{
			mutedNPCsOH.addAll(ZILYANA);
		}
		if (config.muteDerangedArchOH())
		{
			mutedNPCsOH.addAll(DERANGEDARCH);
		}
		if (config.muteCrazyArchOH())
		{
			mutedNPCsOH.addAll(CRAZYARCH);
		}
		if (config.muteChaosFanaticOH())
		{
			mutedNPCsOH.addAll(CHAOSFANATIC);
		}
		if (config.muteRoguesOH())
		{
			mutedNPCsOH.addAll(ROGUE);
		}
		if (config.muteTownCrierOH())
		{
			mutedNPCsOH.addAll(TOWN_CRIER);
		}
		if (config.muteChaosFanaticOH())
		{
			mutedNPCsOH.addAll(CHAOS_FANATIC);
		}
		if (config.muteRamoceanOH())
		{
			mutedNPCsOH.addAll(RAMOCEAN);
		}
		if (config.muteProspectorPercyOH())
		{
			mutedNPCsOH.addAll(PROSPECTOR_PERCY);
		}

		// Other - Overheads
		if (config.muteTeaOH())
		{
			activeMutesOH.add(CUPPA_TEA_TEXT);
		}

		// Other - Overheads
		if (config.muteTeaPC())
		{
			activeMutesPC.add(CUPPA_TEA_TEXT);
		}

		// NPCs - Public Chat
//		if (config.muteNexPC())
//		{
//			mutedNPCsPC.addAll(NEX);
//		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		activeMutesOH.clear();
		activeMutesPC.clear();

		mutedNPCsOH.clear();
//		mutedNPCsPC.clear();
	}

	@Subscribe
	public void onOverheadTextChanged(OverheadTextChanged event)
	{
		Actor actor = event.getActor();
		if ((actor instanceof Player) && (activeMutesOH.contains(event.getOverheadText())))
		{
			event.getActor().setOverheadText(null);
		}
		if (actor instanceof NPC)
		{
			NPC npc = (NPC) actor;
			if (mutedNPCsOH.contains(npc.getId()))
			{
				npc.setOverheadText(null);
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		Player localPlayer = client.getLocalPlayer();
		if (chatMessage.getType() != ChatMessageType.PUBLICCHAT)
		{
			return;
		}
		final ChatLineBuffer lineBuffer = client.getChatLineMap().get(ChatMessageType.PUBLICCHAT.getType());
		if (lineBuffer == null)
		{
			return;
		}
		if (activeMutesPC.contains(chatMessage.getMessage()))
		{
			lineBuffer.removeMessageNode(chatMessage.getMessageNode());
			clientThread.invoke(() -> client.runScript(ScriptID.BUILD_CHATBOX));
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(CONFIG_GROUP))
		{
			readConfig();
		}
	}

	@Provides
	PublicChatAndNPCOverheadRemoverPluginConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PublicChatAndNPCOverheadRemoverPluginConfig.class);
	}
}
package com.PublicChatAndNPCOverheadRemover;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("PublicChatAndNPCOverheadRemoverConfigGroup")
public interface PublicChatAndNPCOverheadRemoverPluginConfig extends Config
{
	String GROUP = "com/PublicChatAndNPCOverheadRemover";

	// Special Attacks - Overheads
	@ConfigSection(
			name = "Special Attacks - Overhead",
			description = "Special attack overhead messages",
			position = 0
	)
	String specialAttacksSectionOH = "specialAttacksSectionOH";

	@ConfigItem(
			keyName = "muteAxesOH",
			name = "Hide Axe Specs",
			description = "Hides the 'Chop chop!' overhead message",
			section = specialAttacksSectionOH
	)
	default boolean muteAxesOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "mutePickaxesOH",
			name = "Hide Pickaxe Specs",
			description = "Hides the 'Smashing!' overhead message",
			section = specialAttacksSectionOH
	)
	default boolean mutePickaxesOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteHarpoonsOH",
			name = "Hide Harpoon Specs",
			description = "Hides the 'Here fishy fishies!' overhead message",
			section = specialAttacksSectionOH
	)
	default boolean muteHarpoonsOH()
	{
		return true;
	}

	// Special Attacks - Public Chat
	@ConfigSection(
			name = "Special Attacks - Public Chat",
			description = "Special attack public chat messages",
			position = 1
	)
	String specialAttacksSectionPC = "specialAttacksSectionPC";

	@ConfigItem(
			keyName = "muteAxesPC",
			name = "Hide Axe Specs",
			description = "Hides the 'Chop chop!' public chat message",
			section = specialAttacksSectionPC
	)
	default boolean muteAxesPC()
	{
		return true;
	}

	@ConfigItem(
			keyName = "mutePickaxesPC",
			name = "Hide Pickaxe Specs",
			description = "Hides the 'Smashing!' public chat message",
			section = specialAttacksSectionPC
	)
	default boolean mutePickaxesPC()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteHarpoonsPC",
			name = "Hide Harpoon Specs",
			description = "Hides the 'Here fishy fishies!' public chat message",
			section = specialAttacksSectionPC
	)
	default boolean muteHarpoonsPC()
	{
		return true;
	}


	// NPCs - Overheads
	@ConfigSection(
			name = "NPC - Overhead",
			description = "NPC overhead messages",
			position = 2
	)
	String npcOHSection = "npcOHSection";

	@ConfigItem(
			keyName = "muteRoguesOH",
			name = "Rogues",
			description = "Hides the 'Someones stealing from us, get them!' overhead message when stealing from the chest at Rogue's Castle",
			section = npcOHSection
	)
	default boolean muteRoguesOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteDerangedArchOH",
			name = "Deranged Archaeologist",
			description = "Hides all overhead messages during the Deranged Archaeologist fight",
			section = npcOHSection
	)
	default boolean muteDerangedArchOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteCrazyArchOH",
			name = "Crazy Archaeologist",
			description = "Hides all overhead messages during the Crazy Archaeologist fight",
			section = npcOHSection
	)
	default boolean muteCrazyArchOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteCerberusOH",
			name = "Cerberus",
			description = "Hides all overhead messages during the Cerberus fight",
			section = npcOHSection
	)
	default boolean muteCerberusOH()
	{
		return false;
	}

	@ConfigItem(
			keyName = "muteSummonedSoulOH",
			name = "Cerberus: Summoned Souls",
			description = "Hides all overhead messages from the Summoned Souls during the Cerberus fight",
			section = npcOHSection
	)
	default boolean muteSummonedSoulOH()
	{
		return false;
	}

	@ConfigItem(
			keyName = "muteBarbarianOH",
			name = "Barbarian",
			description = "Hides the 'YYEEEEEAAARRRRGGHHHH!!!' overhead message when fighting a Barbarian",
			section = npcOHSection
	)
	default boolean muteBarbarianOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteNexOH",
			name = "Nex",
			description = "Hides all overhead messages during the Nex fight",
			section = npcOHSection
	)
	default boolean muteNexOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteGeneralGraardorOH",
			name = "General Graardor",
			description = "Hides all overhead messages during the General Graardor fight",
			section = npcOHSection
	)
	default boolean muteGeneralGraardorOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteCommanderZilyanaOH",
			name = "Commander Zilyana",
			description = "Hides all overhead messages during the Commander Zilyana fight",
			section = npcOHSection
	)
	default boolean muteCommanderZilyanaOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteKreeOH",
			name = "Kree'arra",
			description = "Hides all overhead messages during the Kree'arra fight",
			section = npcOHSection
	)
	default boolean muteKreeOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteKrilOH",
			name = "K'ril Tsutsaroth",
			description = "Hides all overhead messages during the K'ril Tsutsaroth fight",
			section = npcOHSection
	)
	default boolean muteKrilOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteTownCrierOH",
			name = "Town Crier",
			description = "Hides all overhead messages from the Town Criers around the world",
			section = npcOHSection
	)
	default boolean muteTownCrierOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteChaosFanaticOH",
			name = "Chaos Fanatic",
			description = "Hides all overhead messages during the Chaos Fanatic fight",
			section = npcOHSection
	)
	default boolean muteChaosFanaticOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteRamoceanOH",
			name = "Ramocean",
			description = "Hides all overhead messages from Ramocean in the Hosidius Kitchen",
			section = npcOHSection
	)
	default boolean muteRamoceanOH()
	{
		return true;
	}

	@ConfigItem(
			keyName = "muteProspectorPercyOH",
			name = "Prospector Percy",
			description = "Hides all overhead messages from Prospector Percy in the Motherlode Mine",
			section = npcOHSection
	)
	default boolean muteProspectorPercyOH()
	{
		return true;
	}

	// Other - Overheads
	@ConfigSection(
			name = "Other - Overhead",
			description = "Other overhead messages",
			position = 3
	)
	String otherSectionOH = "otherSectionOH";

	@ConfigItem(
			keyName = "muteTeaOH",
			name = "Hide Cuppa Tea",
			description = "Hides the 'Aaah, nothing like a nice cuppa tea!' overhead message",
			section = otherSectionOH
	)
	default boolean muteTeaOH()
	{
		return true;
	}

	// Other - Public Chat
	@ConfigSection(
			name = "Other - Public Chat",
			description = "Other public chat messages",
			position = 4
	)
	String otherSectionPC = "otherSectionPC";

	@ConfigItem(
			keyName = "muteTeaPC",
			name = "Hide Cuppa Tea",
			description = "Hides the 'Aaah, nothing like a nice cuppa tea!' public chat message",
			section = otherSectionPC
	)
	default boolean muteTeaPC()
	{
		return true;
	}

	// NPCs - Public Chat
//	@ConfigSection(
//			name = "NPC - Public Chat",
//			description = "NPC public chat messages",
//			position = 3
//	)
//	String npcPCSection = "npcPCSection";
//
//	@ConfigItem(
//			keyName = "muteNexPC",
//			name = "Nex",
//			description = "Hides all public chat messages during the Nex fight",
//			section = npcOHSection
//	)
//	default boolean muteNexPC()
//	{
//		return false;
//	}

}
package com.PublicChatAndNPCOverheadRemover;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PublicChatAndNPCOverheadRemoverPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PublicChatAndNPCOverheadRemoverPlugin.class);
		RuneLite.main(args);
	}
}
