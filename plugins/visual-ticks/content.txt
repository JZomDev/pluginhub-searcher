package com.visualticks;

import com.visualticks.config.InterfaceTab;
import com.visualticks.config.TickShape;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class VisualTicksOverlayThree extends BaseVisualTicksOverlay
{
    @Inject
    public VisualTicksOverlayThree(VisualTicksPlugin plugin, VisualTicksConfig config, Client client)
    {
        super(plugin, config, client);
    }

    @Override
    protected boolean shouldShowText() {
        return config.shouldShowTextThree();
    }

    @Override
    protected boolean shouldShowTickShape() {
        return config.shouldShowTickShapeThree();
    }

    @Override
    protected int getTickTextSize() {
        return config.tickTextSizeThree();
    }

    @Override
    protected int getNumberOfTicks() {
        return config.numberOfTicksThree();
    }

    @Override
    protected Color getTickColour() {
        return config.tickColourThree();
    }

    @Override
    protected Color getCurrentTickColour() {
        return config.currentTickColourThree();
    }

    @Override
    protected int getAmountPerRow() {
        return config.amountPerRowThree();
    }

    @Override
    protected int getSizeOfTickShapes() {
        return config.sizeOfTickShapesThree();
    }

    @Override
    protected int getHorizontalSpacing() {
        return config.horizontalSpacingThree();
    }

    @Override
    protected int getVerticalSpacing() {
        return config.verticalSpacingThree();
    }

    @Override
    protected Color getTickTextColour() {
        return config.tickTextColourThree();
    }

    @Override
    protected Color getCurrentTickTextColour() {
        return config.currentTickTextColourThree();
    }

    @Override
    protected int getCurrentTick() {
        return plugin.tickThree;
    }

    @Override
    protected InterfaceTab getExclusiveTab() {
        return config.exclusiveTabThree();
    }

    @Override
    protected TickShape getTickShape() {
        return config.tickShapeThree();
    }

    @Override
    protected int getTickArc() {
        return config.tickArcThree();
    }
}

package com.visualticks;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.input.KeyListener;
import java.awt.event.KeyEvent;

@Slf4j
@PluginDescriptor(
    name = "Visual Ticks"
)
public class VisualTicksPlugin extends Plugin implements KeyListener {
    @Inject
    private VisualTicksConfig config;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private VisualTicksOverlayOne overlayOne;
    @Inject
    private VisualTicksOverlayTwo overlayTwo;
    @Inject
    private VisualTicksOverlayThree overlayThree;
    @Inject
    private KeyManager keyManager;
    @Inject
    private ConfigManager configManager;
    public int tickOne = 0;
    public int tickTwo = 0;
    public int tickThree = 0;

    @Override
    protected void startUp() throws Exception {
        updateOverlays();
        keyManager.registerKeyListener(this);
        migrate();
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlayOne);
        overlayManager.remove(overlayTwo);
        overlayManager.remove(overlayThree);
        keyManager.unregisterKeyListener(this);
    }

    @Subscribe
    private void onGameTick(GameTick gameTick) {
        if (!config.isEnabledOne() && !config.isEnabledTwo() && !config.isEnabledThree()) {
            return;
        }

        if(config.isEnabledOne()) {
            tickOne = (tickOne + 1) % config.numberOfTicksOne();
        }

        if(config.isEnabledTwo()) {
            tickTwo = (tickTwo + 1) % config.numberOfTicksTwo();
        }

        if(config.isEnabledThree()) {
            tickThree = (tickThree + 1) % config.numberOfTicksThree();
        }
    }

    @Subscribe
    private void onConfigChanged(ConfigChanged event) {
        if (!event.getGroup().equals(VisualTicksConfig.GROUP_NAME)) {
            return;
        }

        updateOverlays();
    }

    private void updateOverlays() {
        overlayManager.remove(overlayOne);
        overlayManager.remove(overlayTwo);
        overlayManager.remove(overlayThree);

        if (config.isEnabledOne()) {
            overlayManager.add(overlayOne);
        }
        if (config.isEnabledTwo()) {
            overlayManager.add(overlayTwo);
        }
        if (config.isEnabledThree()) {
            overlayManager.add(overlayThree);
        }

        overlayOne.onConfigChanged();
        overlayTwo.onConfigChanged();
        overlayThree.onConfigChanged();
    }

    @Subscribe
    public void onProfileChanged(ProfileChanged profileChanged) {
        migrate();
    }

    @Provides
    VisualTicksConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(VisualTicksConfig.class);
    }

    @Override
    public void keyTyped(KeyEvent e) {
        // No implementation needed
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (config.tickResetHotkey().matches(e)) {
            resetTicks();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        // No implementation needed
    }

    private void migrate() {
        String[][] migrationMap = {
                {"paddingBetweenTicksOne", "horizontalSpacingOne,verticalSpacingOne"},
                {"tickPaddingTwo", "horizontalSpacingTwo,verticalSpacingTwo"},
                {"tickPaddingThree", "horizontalSpacingThree,verticalSpacingThree"}
        };

        for (String[] migration : migrationMap) {
            String oldKey = migration[0];
            String[] newKeys = migration[1].split(",");

            for (String newKey : newKeys) {
                if (configManager.getConfiguration(VisualTicksConfig.GROUP_NAME, oldKey) != null) {
                    String value = configManager.getConfiguration(VisualTicksConfig.GROUP_NAME, oldKey);
                    configManager.setConfiguration(VisualTicksConfig.GROUP_NAME, newKey, value);
                }
            }

            configManager.unsetConfiguration(VisualTicksConfig.GROUP_NAME, oldKey);
        }
    }

    private void resetTicks() {
        tickOne = 0;
        tickTwo = 0;
        tickThree = 0;
    }
}

package com.visualticks;

import com.google.inject.Inject;
import com.visualticks.config.InterfaceTab;
import com.visualticks.config.Tick;
import com.visualticks.config.TickShape;
import net.runelite.api.Client;
import net.runelite.api.VarClientInt;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BaseVisualTicksOverlay extends Overlay
{
    protected VisualTicksPlugin plugin;
    protected VisualTicksConfig config;
    protected Client client;
    protected boolean configChanged = true;
    protected final List<Tick> ticks = new ArrayList<>();
    protected final Dimension dimension = new Dimension();

    @Inject
    public BaseVisualTicksOverlay(VisualTicksPlugin plugin, VisualTicksConfig config, Client client)
    {
        this.plugin = plugin;
        this.config = config;
        this.client = client;
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
    }

    public void onConfigChanged() {
        configChanged = true;
    }

    protected abstract boolean shouldShowText();
    protected abstract boolean shouldShowTickShape();
    protected abstract int getTickTextSize();
    protected abstract int getNumberOfTicks();
    protected abstract Color getTickColour();
    protected abstract Color getCurrentTickColour();
    protected abstract int getAmountPerRow();
    protected abstract int getSizeOfTickShapes();
    protected abstract int getHorizontalSpacing();
    protected abstract int getVerticalSpacing();
    protected abstract int getCurrentTick();
    protected abstract InterfaceTab getExclusiveTab();
    protected abstract Color getTickTextColour();
    protected abstract Color getCurrentTickTextColour();
    protected abstract TickShape getTickShape();
    protected abstract int getTickArc();

    protected void calculateSizes(Graphics2D g) {
        configChanged = false;
        ticks.clear();

        int totalTicks = getNumberOfTicks();
        int perRow = getAmountPerRow();
        int shapeSize = getSizeOfTickShapes();
        Font originalFont = g.getFont();
        g.setFont(g.getFont().deriveFont((float) getTickTextSize()));
        FontMetrics fm = g.getFontMetrics();

        int maxBoundingSize = 0;
        int maxCol = 0;
        int maxRow = 0;

        for (int i = 0; i < totalTicks; i++)
        {
            int boundingSize = shouldShowTickShape() ? shapeSize : 0;

            String text = String.valueOf(i + 1);
            int textWidth = fm.stringWidth(text);
            int textHeight = fm.getAscent();

            if (shouldShowText()) {
                boundingSize = Math.max(boundingSize, textWidth);
                boundingSize = Math.max(boundingSize, textHeight);
            }

            int row = i / perRow;
            int col = i % perRow;
            int x = col * (boundingSize + getHorizontalSpacing());
            int y = row * (boundingSize + getVerticalSpacing());

            Tick tick = new Tick(x, y);

            if (shouldShowText()) {
                tick.setFontX(x + (boundingSize - textWidth) / 2);
                tick.setFontY(y + (boundingSize + textHeight) / 2);
            }
            ticks.add(tick);

            maxBoundingSize = Math.max(maxBoundingSize, boundingSize);
            maxRow = Math.max(maxRow, row);
            maxCol = Math.max(maxCol, col);
        }

        dimension.width = (maxCol + 1) * (maxBoundingSize + getHorizontalSpacing()) - getHorizontalSpacing();
        dimension.height = (maxRow + 1) * (maxBoundingSize + getVerticalSpacing()) - getVerticalSpacing();
        g.setFont(originalFont);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if(configChanged) {
            calculateSizes(graphics);
        }

        if(getExclusiveTab().getIndex() != -1 && client.getVarcIntValue(VarClientInt.INVENTORY_TAB) != getExclusiveTab().getIndex()) return null;
        if(ticks.size() < getNumberOfTicks() - 1) return null;

        Font originalFont = graphics.getFont();
        graphics.setFont(graphics.getFont().deriveFont((float) getTickTextSize()));

        for (int i = 0; i < getNumberOfTicks(); i++)
        {
            Tick tick = ticks.get(i);
            if (shouldShowTickShape()) {
                graphics.setColor(i == getCurrentTick() ? getCurrentTickColour() : getTickColour());
                switch(getTickShape()) {
                    case SQUARE:
                        graphics.fillRect(tick.getShapeX(), tick.getShapeY(), getSizeOfTickShapes(), getSizeOfTickShapes());
                        break;
                    case CIRCLE:
                        graphics.fillOval(tick.getShapeX(), tick.getShapeY(), getSizeOfTickShapes(), getSizeOfTickShapes());
                        break;
                    case ROUNDED_SQUARE:
                        graphics.fillRoundRect(tick.getShapeX(), tick.getShapeY(), getSizeOfTickShapes(), getSizeOfTickShapes(), getTickArc(), getTickArc());
                        break;
                }
            }
            if (shouldShowText()) {
                graphics.setColor(i == getCurrentTick() ? getCurrentTickTextColour() : getTickTextColour());
                graphics.drawString(String.valueOf(i + 1), tick.getFontX(), tick.getFontY());
            }
        }

        graphics.setFont(originalFont);
        return new Dimension(dimension.width, dimension.height);
    }
}

package com.visualticks.config;

import lombok.Getter;

@Getter
public enum TickShape {
    SQUARE,
    CIRCLE,
    ROUNDED_SQUARE;
}
package com.visualticks.config;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class Tick {
    private int shapeX;
    private int shapeY;
    private int fontX;
    private int fontY;

    public Tick(int shapeX, int shapeY) {
        this.shapeX = shapeX;
        this.shapeY = shapeY;
    }
}

/*
 * Copyright (c) 2022, Damen <gh: damencs>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:

 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.visualticks.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Getter
public enum InterfaceTab
{
    ALL("All", -1),
    COMBAT_OPTIONS("Combat", 0),
    SKILLS("Skills", 1),
    QUEST("Quest", 2),
    INVENTORY("Inventory", 3),
    EQUIPMENT("Equipment", 4),
    PRAYER("Prayer", 5),
    SPELLBOOK("Spellbook", 6),
    CLAN_CHAT("Clan Chat", 7),
    FILIST("Friends List", 9),
    ACCOUNT("Account", 8),
    LOGOUT("Logout", 10),
    SETTINGS("Settings", 11),
    EMOTES("Emotes", 12),
    MUSIC_PLAYER("Music", 13);

    private final String name;
    private final int index;

    @Override
    public String toString()
    {
        return name;
    }
}
package com.visualticks;

import com.visualticks.config.InterfaceTab;
import com.visualticks.config.TickShape;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class VisualTicksOverlayTwo extends BaseVisualTicksOverlay
{
    @Inject
    public VisualTicksOverlayTwo(VisualTicksPlugin plugin, VisualTicksConfig config, Client client)
    {
        super(plugin, config, client);
    }

    @Override
    protected boolean shouldShowText() {
        return config.shouldShowTextTwo();
    }

    @Override
    protected boolean shouldShowTickShape() {
        return config.shouldShowTickShapeTwo();
    }

    @Override
    protected int getTickTextSize() {
        return config.tickTextSizeTwo();
    }

    @Override
    protected int getNumberOfTicks() {
        return config.numberOfTicksTwo();
    }

    @Override
    protected Color getTickColour() {
        return config.tickColourTwo();
    }

    @Override
    protected Color getCurrentTickColour() {
        return config.currentTickColourTwo();
    }

    @Override
    protected int getAmountPerRow() {
        return config.amountPerRowTwo();
    }

    @Override
    protected int getSizeOfTickShapes() {
        return config.sizeOfTickShapesTwo();
    }

    @Override
    protected int getHorizontalSpacing() {
        return config.horizontalSpacingTwo();
    }

    @Override
    protected int getVerticalSpacing() {
        return config.verticalSpacingTwo();
    }

    @Override
    protected Color getTickTextColour() {
        return config.tickTextColourTwo();
    }

    @Override
    protected Color getCurrentTickTextColour() {
        return config.currentTickTextColourTwo();
    }

    @Override
    protected int getCurrentTick() {
        return plugin.tickTwo;
    }

    @Override
    protected InterfaceTab getExclusiveTab() {
        return config.exclusiveTabTwo();
    }

    @Override
    protected TickShape getTickShape() {
        return config.tickShapeTwo();
    }

    @Override
    protected int getTickArc() {
        return config.tickArcTwo();
    }
}

package com.visualticks;
import com.visualticks.config.InterfaceTab;
import com.visualticks.config.TickShape;
import net.runelite.client.config.*;
import java.awt.*;
import java.awt.event.KeyEvent;

@ConfigGroup(VisualTicksConfig.GROUP_NAME)
public interface VisualTicksConfig extends Config {
    String GROUP_NAME = "visualticks";

    //region Hotkey Settings
    @ConfigSection(
            name = "Hotkey settings",
            description = "Settings for hotkeys",
            position = 0
    )
    String hotkeySettings = "hotkeySettings";

    @ConfigItem(
            position = 0,
            keyName = "tickResetHotkey",
            name = "Tick Reset Hotkey",
            description = "Hotkey to reset tick counter",
            section = hotkeySettings
    )
    default Keybind tickResetHotkey() {
        return new Keybind(KeyEvent.VK_BACK_QUOTE, KeyEvent.VK_UNDEFINED);
    }
    //endregion

    //region Tick settings - One
    @ConfigSection(
            name = "Tick settings - One",
            description = "Settings for the first set of ticks",
            position = 1
    )
    String tickSettings = "tickSettings";

    @ConfigItem(
            keyName = "isEnabledOne",
            name = "Enabled",
            description = "Enable the first set of ticks",
            section = tickSettings,
            position = 0
    )
    default boolean isEnabledOne() {
        return true;
    }

    @ConfigItem(
            keyName = "shouldShowTickShapeOne",
            name = "Show Tick Shape",
            description = "Show the shape of the first set of ticks",
            section = tickSettings,
            position = 1
    )
    default boolean shouldShowTickShapeOne() {
        return true;
    }

    @ConfigItem(
            keyName = "tickShapeOne",
            name = "Tick shape",
            description = "The shape of the ticks",
            section = tickSettings,
            position = 2
    )
    default TickShape tickShapeOne() {
        return TickShape.CIRCLE;
    }

    @ConfigItem(
            keyName = "exclusiveTabOne",
            name = "Only show if on tab",
            description = "Show the ticks only when the selected tab is active",
            section = tickSettings,
            position = 3
    )
    default InterfaceTab exclusiveTabOne() {
        return InterfaceTab.ALL;
    }

    @ConfigItem(
            keyName = "numberOfTicksOne",
            name = "Number of ticks",
            description = "Number of tick circles to display",
            section = tickSettings,
            position = 4
    )
    @Range(min = 2, max = 30)
    default int numberOfTicksOne() {
        return 2;
    }

    @ConfigItem(
            keyName = "amountPerRowOne",
            name = "Amount per row",
            description = "How many ticks to display per row",
            section = tickSettings,
            position = 5
    )
    @Range(min = 1)
    default int amountPerRowOne() {
        return 8;
    }

    @ConfigItem(
            keyName = "tickColourOne",
            name = "Tick colour",
            description = "The colour of the ticks",
            section = tickSettings,
            position = 6
    )
    @Alpha
    default Color tickColourOne() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "currentTickColourOne",
            name = "Current tick colour",
            description = "The colour of the current tick",
            section = tickSettings,
            position = 7
    )
    @Alpha
    default Color currentTickColourOne() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "sizeOfTickShapesOne",
            name = "Size of ticks",
            description = "How many pixels to make the tick shapes",
            section = tickSettings,
            position = 8
    )
    default int sizeOfTickShapesOne() {
        return 32;
    }

    @ConfigItem(
            keyName = "tickArcOne",
            name = "Tick arc(rounded square)",
            description = "The arc of the corners of the rounded square tick shape",
            section = tickSettings,
            position = 9
    )
    @Range(max = 100)
    default int tickArcOne() {
        return 10;
    }

    @ConfigItem(
            keyName = "shouldShowTextOne",
            name = "Show text",
            description = "Show the text of the current tick",
            section = tickSettings,
            position = 10
    )
    default boolean shouldShowTextOne() {
        return true;
    }

    @ConfigItem(
            keyName = "tickTextSizeOne",
            name = "Tick text size",
            description = "The size of the text on the ticks",
            section = tickSettings,
            position = 11
    )
    @Range(min = 1, max = 100)
    default int tickTextSizeOne() {
        return 15;
    }

    @ConfigItem(
            keyName = "tickTextColourOne",
            name = "Tick text colour",
            description = "The colour of the text non-current ticks",
            section = tickSettings,
            position = 12
    )
    @Alpha
    default Color tickTextColourOne() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "currentTickTextColourOne",
            name = "Current tick text colour",
            description = "The colour of the text on the current tick",
            section = tickSettings,
            position = 13
    )
    @Alpha
    default Color currentTickTextColourOne() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "horizontalSpacingOne",
            name = "Horizontal spacing",
            description = "The amount of space between ticks on the x-axis",
            section = tickSettings,
            position = 14
    )
    @Range(min = -50)
    default int horizontalSpacingOne() {
        return 5;
    }

    @ConfigItem(
            keyName = "verticalSpacingOne",
            name = "Vertical spacing",
            description = "The amount of space between ticks on the y-axis",
            section = tickSettings,
            position = 15
    )
    @Range(min = -50)
    default int verticalSpacingOne() {
        return 5;
    }
    //endregion

    //region Tick settings - Two
    @ConfigSection(
            name = "Tick settings - Two",
            description = "Settings for the second set of ticks",
            position = 2
    )
    String tickSettingsTwo = "tickSettingsTwo";

    @ConfigItem(
            keyName = "isEnabledTwo",
            name = "Enabled",
            description = "Enable the second set of ticks",
            section = tickSettingsTwo,
            position = 0
    )
    default boolean isEnabledTwo() {
        return false;
    }

    @ConfigItem(
            keyName = "shouldShowTickShapeTwo",
            name = "Show Tick Shape",
            description = "Show the shape of the second set of ticks",
            section = tickSettingsTwo,
            position = 1
    )
    default boolean shouldShowTickShapeTwo() {
        return true;
    }

    @ConfigItem(
            keyName = "tickShapeTwo",
            name = "Tick shape",
            description = "The shape of the ticks",
            section = tickSettingsTwo,
            position = 2
    )
    default TickShape tickShapeTwo() {
        return TickShape.CIRCLE;
    }

    @ConfigItem(
            keyName = "exclusiveTabTwo",
            name = "Only show if on tab",
            description = "Show the ticks only when the selected tab is active",
            section = tickSettingsTwo,
            position = 3
    )
    default InterfaceTab exclusiveTabTwo() {
        return InterfaceTab.ALL;
    }

    @ConfigItem(
            keyName = "numberOfTicksTwo",
            name = "Number of ticks",
            description = "Number of tick circles to display",
            section = tickSettingsTwo,
            position = 4
    )
    @Range(min = 2, max = 30)
    default int numberOfTicksTwo() {
        return 2;
    }

    @ConfigItem(
            keyName = "amountPerRowTwo",
            name = "Amount per row",
            description = "How many ticks to display per row",
            section = tickSettingsTwo,
            position = 5
    )
    @Range(min = 1)
    default int amountPerRowTwo() {
        return 8;
    }

    @ConfigItem(
            keyName = "tickColourTwo",
            name = "Tick colour",
            description = "The colour of the ticks",
            section = tickSettingsTwo,
            position = 6
    )
    @Alpha
    default Color tickColourTwo() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "currentTickColourTwo",
            name = "Current tick colour",
            description = "The colour of the current tick",
            section = tickSettingsTwo,
            position = 7
    )
    @Alpha
    default Color currentTickColourTwo() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "sizeOfTickShapesTwo",
            name = "Size of ticks",
            description = "How many pixels to make the tick shapes",
            section = tickSettingsTwo,
            position = 8
    )
    default int sizeOfTickShapesTwo() {
        return 32;
    }

    @ConfigItem(
            keyName = "tickArcTwo",
            name = "Tick arc(rounded square)",
            description = "The arc of the corners of the rounded square tick shape",
            section = tickSettingsTwo,
            position = 9
    )
    @Range(max = 100)
    default int tickArcTwo() {
        return 10;
    }

    @ConfigItem(
            keyName = "shouldShowTextTwo",
            name = "Show text",
            description = "Show the text of the current tick",
            section = tickSettingsTwo,
            position = 10
    )
    default boolean shouldShowTextTwo() {
        return true;
    }

    @ConfigItem(
            keyName = "tickTextSizeTwo",
            name = "Tick text size",
            description = "The size of the text on the ticks",
            section = tickSettingsTwo,
            position = 11
    )
    @Range(min = 1, max = 100)
    default int tickTextSizeTwo() {
        return 15;
    }

    @ConfigItem(
            keyName = "tickTextColourTwo",
            name = "Tick text colour",
            description = "The colour of the text non-current ticks",
            section = tickSettingsTwo,
            position = 12
    )
    @Alpha
    default Color tickTextColourTwo() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "currentTickTextColourTwo",
            name = "Current tick text colour",
            description = "The colour of the text on the current tick",
            section = tickSettingsTwo,
            position = 13
    )
    @Alpha
    default Color currentTickTextColourTwo() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "horizontalSpacingTwo",
            name = "Horizontal spacing",
            description = "The amount of space between ticks on the x-axis",
            section = tickSettingsTwo,
            position = 14
    )
    @Range(min = -50)
    default int horizontalSpacingTwo() {
        return 5;
    }

    @ConfigItem(
            keyName = "verticalSpacingTwo",
            name = "Vertical spacing",
            description = "The amount of space between ticks on the y-axis",
            section = tickSettingsTwo,
            position = 15
    )
    @Range(min = -50)
    default int verticalSpacingTwo() {
        return 5;
    }
    //endregion

    //region Tick settings - Three
    @ConfigSection(
            name = "Tick settings - Three",
            description = "Settings for the third set of ticks",
            position = 3
    )
    String tickSettingsThree = "tickSettingsThree";

    @ConfigItem(
            keyName = "isEnabledThree",
            name = "Enabled",
            description = "Enable the third set of ticks",
            section = tickSettingsThree,
            position = 0
    )
    default boolean isEnabledThree() {
        return false;
    }

    @ConfigItem(
            keyName = "shouldShowTickShapeThree",
            name = "Show Tick Shape",
            description = "Show the shape of the third set of ticks",
            section = tickSettingsThree,
            position = 1
    )
    default boolean shouldShowTickShapeThree() {
        return true;
    }

    @ConfigItem(
            keyName = "tickShapeThree",
            name = "Tick shape",
            description = "The shape of the ticks",
            section = tickSettingsThree,
            position = 2
    )
    default TickShape tickShapeThree() {
        return TickShape.CIRCLE;
    }

    @ConfigItem(
            keyName = "exclusiveTabThree",
            name = "Only show if on tab",
            description = "Show the ticks only when the selected tab is active",
            section = tickSettingsThree,
            position = 3
    )
    default InterfaceTab exclusiveTabThree() {
        return InterfaceTab.ALL;
    }

    @ConfigItem(
            keyName = "numberOfTicksThree",
            name = "Number of ticks",
            description = "Number of tick circles to display",
            section = tickSettingsThree,
            position = 4
    )
    @Range(min = 2, max = 30)
    default int numberOfTicksThree() {
        return 2;
    }

    @ConfigItem(
            keyName = "amountPerRowThree",
            name = "Amount per row",
            description = "How many ticks to display per row",
            section = tickSettingsThree,
            position = 5
    )
    @Range(min = 1)
    default int amountPerRowThree() {
        return 8;
    }

    @ConfigItem(
            keyName = "tickColourThree",
            name = "Tick colour",
            description = "The colour of the ticks",
            section = tickSettingsThree,
            position = 6
    )
    @Alpha
    default Color tickColourThree() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "currentTickColourThree",
            name = "Current tick colour",
            description = "The colour of the current tick",
            section = tickSettingsThree,
            position = 7
    )
    @Alpha
    default Color currentTickColourThree() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "sizeOfTickShapesThree",
            name = "Size of ticks",
            description = "How many pixels to make the tick shapes",
            section = tickSettingsThree,
            position = 8
    )
    default int sizeOfTickShapesThree() {
        return 32;
    }

    @ConfigItem(
            keyName = "tickArcThree",
            name = "Tick arc(rounded square)",
            description = "The arc of the corners of the rounded square tick shape",
            section = tickSettingsThree,
            position = 9
    )
    @Range(max = 100)
    default int tickArcThree() {
        return 10;
    }

    @ConfigItem(
            keyName = "shouldShowTextThree",
            name = "Show text",
            description = "Show the text of the current tick",
            section = tickSettingsThree,
            position = 10
    )
    default boolean shouldShowTextThree() {
        return true;
    }

    @ConfigItem(
            keyName = "tickTextSizeThree",
            name = "Tick text size",
            description = "The size of the text on the ticks",
            section = tickSettingsThree,
            position = 11
    )
    @Range(min = 1, max = 100)
    default int tickTextSizeThree() {
        return 15;
    }

    @ConfigItem(
            keyName = "tickTextColourThree",
            name = "Tick text colour",
            description = "The colour of the text non-current ticks",
            section = tickSettingsThree,
            position = 12
    )
    @Alpha
    default Color tickTextColourThree() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "currentTickTextColourThree",
            name = "Current tick text colour",
            description = "The colour of the text on the current tick",
            section = tickSettingsThree,
            position = 13
    )
    @Alpha
    default Color currentTickTextColourThree() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "horizontalSpacingThree",
            name = "Horizontal spacing",
            description = "The amount of space between ticks on the x-axis",
            section = tickSettingsThree,
            position = 14
    )
    @Range(min = -50)
    default int horizontalSpacingThree() {
        return 5;
    }

    @ConfigItem(
            keyName = "verticalSpacingThree",
            name = "Vertical spacing",
            description = "The amount of space between ticks on the y-axis",
            section = tickSettingsThree,
            position = 15
    )
    @Range(min = -50)
    default int verticalSpacingThree() {
        return 5;
    }
    //endregion
}

package com.visualticks;

import com.visualticks.config.InterfaceTab;
import com.visualticks.config.TickShape;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class VisualTicksOverlayOne extends BaseVisualTicksOverlay
{
    @Inject
    public VisualTicksOverlayOne(VisualTicksPlugin plugin, VisualTicksConfig config, Client client)
    {
        super(plugin, config, client);
    }

    @Override
    protected boolean shouldShowText() {
        return config.shouldShowTextOne();
    }

    @Override
    protected boolean shouldShowTickShape() {
        return config.shouldShowTickShapeOne();
    }

    @Override
    protected int getTickTextSize() {
        return config.tickTextSizeOne();
    }

    @Override
    protected int getNumberOfTicks() {
        return config.numberOfTicksOne();
    }

    @Override
    protected Color getTickColour() {
        return config.tickColourOne();
    }

    @Override
    protected Color getCurrentTickColour() {
        return config.currentTickColourOne();
    }

    @Override
    protected int getAmountPerRow() {
        return config.amountPerRowOne();
    }

    @Override
    protected int getSizeOfTickShapes() {
        return config.sizeOfTickShapesOne();
    }

    @Override
    protected int getHorizontalSpacing() {
        return config.horizontalSpacingOne();
    }

    @Override
    protected int getVerticalSpacing() {
        return config.verticalSpacingOne();
    }

    @Override
    protected int getCurrentTick() {
        return plugin.tickOne;
    }

    @Override
    protected InterfaceTab getExclusiveTab() {
        return config.exclusiveTabOne();
    }

    @Override
    protected Color getTickTextColour() {
        return config.tickTextColourOne();
    }

    @Override
    protected Color getCurrentTickTextColour() {
        return config.currentTickTextColourOne();
    }

    @Override
    protected TickShape getTickShape() {
        return config.tickShapeOne();
    }

    @Override
    protected int getTickArc() {
        return config.tickArcOne();
    }
}

package com.visualticks;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VisualTicksPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VisualTicksPlugin.class);
		RuneLite.main(args);
	}
}
