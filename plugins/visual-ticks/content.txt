package com.visualticks;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VisualTicksPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VisualTicksPlugin.class);
		RuneLite.main(args);
	}
}
package com.visualticks;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup(VisualTicksConfig.GROUP_NAME)
public interface VisualTicksConfig extends Config {
    String GROUP_NAME = "visualticks";

    // create group for "tick settings"
    @ConfigSection(
            name = "Tick settings",
            description = "Settings for the tick circles",
            position = 0
    )
    String tickSettings = "tickSettings";

    @ConfigItem(
            keyName = "numberOfTicks",
            name = "Number of ticks",
            description = "Number of tick circles to display",
            section = tickSettings,
            position = 0
    )
    @Range(min = 2, max = 30)
    default int numberOfTicks() {
        return 2;
    }

    @ConfigItem(
            keyName = "tickColour",
            name = "Tick colour",
            description = "The colour of the ticks",
            section = tickSettings,
            position = 1
    )
    @Alpha
    default Color tickColour() {
        return new Color(41, 128, 185);
    }

    @ConfigItem(
            keyName = "currentTickColour",
            name = "Current tick colour",
            description = "The colour of the current tick",
            section = tickSettings,
            position = 2
    )
    @Alpha
    default Color currentTickColour() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "amountPerRow",
            name = "Amount per row",
            description = "How many ticks to display per row",
            section = tickSettings,
            position = 3
    )
    @Range(min = 1)
    default int amountPerRow() {
        return 8;
    }

    @ConfigItem(
            keyName = "sizeOfTickShapes",
            name = "Size of ticks",
            description = "How many pixels to make the tick shapes",
            section = tickSettings,
            position = 4
    )
    default int sizeOfTickShapes() {
        return 32;
    }

    @ConfigItem(
            keyName = "paddingBetweenTicks",
            name = "Padding between ticks",
            description = "The amount of space between ticks",
            section = tickSettings,
            position = 5
    )
    default int tickPadding() {
        return 5;
    }

    @ConfigSection(
            name = "Text settings",
            description = "Settings for the font",
            position = 1
    )
    String fontSettings = "textSettings";

    @ConfigItem(
            keyName = "shouldShowText",
            name = "Show text",
            description = "Show the text of the current tick",
            section = fontSettings,
            position = 0
    )
    default boolean shouldShowText() {
        return true;
    }

    @ConfigItem(
            keyName = "tickTextColour",
            name = "Tick text colour",
            description = "The colour of the text non-current ticks",
            section = fontSettings,
            position = 1
    )
    @Alpha
    default Color tickTextColour() {
        return new Color(236, 240, 241);
    }

    @ConfigItem(
            keyName = "currentTickTextColour",
            name = "Current tick text colour",
            description = "The colour of the text on the current tick",
            section = fontSettings,
            position = 2
    )
    @Alpha
    default Color currentTickTextColour() {
        return new Color(41, 128, 185);
    }
}

package com.visualticks;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Visual Ticks"
)
public class VisualTicksPlugin extends Plugin
{
	@Inject
	private VisualTicksConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private VisualTicksOverlay overlay;
	public int tick = 0;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlay.onConfigChanged();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}


	@Subscribe
	private void onGameTick(GameTick gameTick) {
		tick++;
		if(tick > config.numberOfTicks() - 1) tick = 0;
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals(VisualTicksConfig.GROUP_NAME)) {
			return;
		}
		overlay.onConfigChanged();
	}

	@Provides
	VisualTicksConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VisualTicksConfig.class);
	}
}

package com.visualticks;

import lombok.Getter;

@Getter
public class Tick {
    private final int shapeX;
    private final int shapeY;
    private final int fontX;
    private final int fontY;

    public Tick(int shapeX, int shapeY, int fontX, int fontY) {
        this.shapeX = shapeX;
        this.shapeY = shapeY;
        this.fontX = fontX;
        this.fontY = fontY;
    }
}

package com.visualticks;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class VisualTicksOverlay extends Overlay
{
    @Inject
    VisualTicksPlugin plugin;

    @Inject
    VisualTicksConfig config;

    private boolean configChanged = true;

    // arraylist of x and y values for each tick
    private final List<Tick> ticks = new ArrayList<>();

    // track dimension values
    private final Dimension dimension = new Dimension();

    public void onConfigChanged() {
        configChanged = true;
    }

    private void calculateSizes(Graphics2D g) {
        configChanged = false;
        ticks.clear();

        for (int tick = 0, position = 0, row = 0; tick < config.numberOfTicks(); tick++)
        {

            int x = position * (config.sizeOfTickShapes() + config.tickPadding());
            int y = row * (config.sizeOfTickShapes() + config.tickPadding());

            position++;
            if(config.shouldShowText()) {
                FontMetrics fm = g.getFontMetrics();

                int textWidth = fm.stringWidth(String.valueOf(tick + 1));
                int textHeight = fm.getHeight();

                int fontX = x + (config.sizeOfTickShapes() / 2) - (textWidth / 2);
                int fontY = y + (config.sizeOfTickShapes() / 2) + (textHeight / 2);

                ticks.add(new Tick(x, y, fontX, fontY));
            } else {
                ticks.add(new Tick(x, y, 0, 0));
            }
            if(position > config.amountPerRow() - 1) {
                position = 0;
                row++;
            }
        }

        int rowsRendered = (int) Math.ceil((double) config.numberOfTicks() / (double) config.amountPerRow());
        dimension.height = (rowsRendered - 1) * config.tickPadding() + rowsRendered * config.sizeOfTickShapes();

        int ticksRenderedPerRow = config.amountPerRow() > config.numberOfTicks() ? config.numberOfTicks() : config.amountPerRow();
        dimension.width = (ticksRenderedPerRow - 1) * config.tickPadding() + ticksRenderedPerRow * config.sizeOfTickShapes();
    }

    @Inject
    public VisualTicksOverlay()
    {
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if(configChanged) {
            calculateSizes(graphics);
        }

        if(ticks.size() < config.numberOfTicks() - 1) return null;

        for (int i = 0; i < config.numberOfTicks(); i++)
        {
            Tick tick = ticks.get(i);
            if (i == plugin.tick)
            {
                graphics.setColor(config.currentTickColour());
                graphics.fillOval(tick.getShapeX(), tick.getShapeY(), config.sizeOfTickShapes(), config.sizeOfTickShapes());

                if(config.shouldShowText()) {
                    graphics.setColor(config.currentTickTextColour());
                    graphics.drawString(String.valueOf(i + 1), tick.getFontX(), tick.getFontY());
                }
            }
            else
            {
                graphics.setColor(config.tickColour());
                graphics.fillOval(tick.getShapeX(), tick.getShapeY(), config.sizeOfTickShapes(), config.sizeOfTickShapes());

                if(config.shouldShowText()) {
                    graphics.setColor(config.tickTextColour());
                    graphics.drawString(String.valueOf(i + 1), tick.getFontX(), tick.getFontY());
                }
            }

        }

        return new Dimension(dimension.width, dimension.height + 5);
    }
}

