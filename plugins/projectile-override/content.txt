package com.projectileoverride;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(ProjectileOverrideConfig.CONFIG_GROUP)
public interface ProjectileOverrideConfig extends Config
{
	public static final String CONFIG_GROUP = "projectileoverride";

    @ConfigItem(
        keyName = "akkha",
        name = "Akkha",
        description = "Projectile override for Akkha"
    )
    default BossProjectiles Akkha() {
        return BossProjectiles.DEFAULT;
    }

	@ConfigItem(
		keyName = "cerberus",
		name = "Cerberus",
		description = "Projectile override for Cerberus"
	)
	default BossProjectiles Cerberus() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "dks",
		name = "DKS",
		description = "Projectile override for the Dagganoth Kings"
	)
	default BossProjectiles DagganothKings() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "dom",
		name = "Doom",
		description = "Projectile override for Doom of Mokhaiotl"
	)
	default BossProjectiles DoomOfMokhaiotl()
	{
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "dom-rocks",
		name = "Doom rocks",
		description = "Projectile override for Doom of Mokhaiotl rocks"
	)
	default BossProjectiles DoomOfMokhaiotlRocks()
	{
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "hueycoatl",
		name = "Hueycoatl",
		description = "Projectile override for Hueycoatl"
	)
	default BossProjectiles Hueycoatl() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "hunllefnormal",
		name = "Hunllef",
		description = "Projectile override for normal Hunllef"
	)
	default BossProjectiles HunllefNormal() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "hunllefcorrupted",
		name = "Hunllef (Corrupted)",
		description = "Projectile override for corrupted Hunllef"
	)
	default BossProjectiles HunllefCorrupted() {
		return BossProjectiles.DEFAULT;
	}

    @ConfigItem(
            keyName = "hdyra",
            name = "Hydra",
            description = "Projectile override for Alchemical Hydra and smaller hydras"
    )
    default BossProjectiles AlchemicalHydra() {
        return BossProjectiles.DEFAULT;
    }

	@ConfigItem(
		keyName = "inferno",
		name = "Inferno",
		description = "Projectile override for the blobs in the Inferno"
	)
	default BossProjectiles Inferno() {
		return BossProjectiles.DEFAULT;
	}

    @ConfigItem(
        keyName = "kalphite-queen",
        name = "Kalphite Queen",
        description = "Projectile override for the Kalphite Queen"
    )
    default BossProjectiles KalphiteQueen() {
        return BossProjectiles.DEFAULT;
    }

    @ConfigItem(
        keyName = "kree-arra",
        name = "Kree Arra",
        description = "Projectile override for Kree Arra"
    )
    default BossProjectiles KreeArra() {
        return BossProjectiles.DEFAULT;
    }

	@ConfigItem(
		keyName = "leviathan",
		name = "Leviathan",
		description = "Projectile override for Leviathan"
	)
	default BossProjectiles Leviathan() {
		return BossProjectiles.DEFAULT;
	}

    @ConfigItem(
        keyName = "manticore",
        name = "Manticore",
        description = "Projectile override for Manticores within the Fortis Colosseum"
    )
    default BossProjectiles Manticore() {
        return BossProjectiles.DEFAULT;
    }

	@ConfigItem(
		keyName = "olm",
		name = "Olm",
		description = "Projectile override for Olm in the Chambers of Xeric"
	)
	default BossProjectiles Olm() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "scurrius",
		name = "Scurrius",
		description = "Projectile override for Scurrius"
	)
	default BossProjectiles Scurrius() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "sotetseg",
		name = "Sotetseg",
		description = "Projectile override for Sotetseg in the Theatre of Blood"
	)
	default BossProjectiles Sotetseg() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "vardorvis",
		name = "Vardorvis",
		description = "Projectile override for Vardorvis"
	)
	default BossProjectiles Vardorvis() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "wardens",
		name = "Wardens",
		description = "Projectile override for Wardens in the Tombs of Amascut"
	)
	default BossProjectiles Wardens() {
		return BossProjectiles.DEFAULT;
	}

    @ConfigItem(
        keyName = "wardens-divine",
        name = "Wardens divine",
        description = "Projectile override for the divine projectiles of the Wardens in the Tombs of Amascut"
    )
    default BossProjectiles WardensDivine() {
        return BossProjectiles.DEFAULT;
    }

	@ConfigItem(
		keyName = "whisperer",
		name = "Whisperer",
		description = "Projectile override for the Whisperer"
	)
	default BossProjectiles Whisperer() {
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "zebak",
		name = "Zebak",
		description = "Projectile override for regular Zebak attacks"
	)
	default BossProjectiles Zebak()
	{
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "zebak-rocks",
		name = "Zebak rocks",
		description = "Projectile override for the rocks and jugs attacks of Zebak"
	)
	default BossProjectiles ZebakRocks()
	{
		return BossProjectiles.DEFAULT;
	}

	@ConfigItem(
		keyName = "zulrah",
		name = "Zulrah",
		description = "Projectile override for Zulrah"
	)
	default BossProjectiles Zulrah() {
		return BossProjectiles.DEFAULT;
	}
}

package com.projectileoverride;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public final class ProjectileIds
{
	public static final int NONE = -1;
    public static final int RANDOM = -2;

	// All ids are Mage, Ranged, Melee.
    public static final int[] AKKHA = new int[] {2253, 2255, NONE};
    public static final int[] CERBERUS = new int[] {1242, 1245, NONE};
	public static final int[] DAGGANOTH_KINGS = new int[] {162, 475, NONE};
	public static final int[] DOOM_OF_MOKHAIOTL = new int[] {3379, 3380, 3378};
	public static final int[] DOOM_OF_MOKHAIOTL_ROCKS = new int[] {3385, 3384, NONE};
	public static final int[] HUEYCOATL = new int[] {2975, 2972, 2969};
	public static final int[] HUNLLEF_NORMAL = new int[] {1707, 1711, NONE};
	public static final int[] HUNLLEF_CORRUPTED = new int[] {1708, 1712, NONE};
    public static final int[] HYDRA = new int[] {1662, 1663, NONE};
	public static final int[] INFERNO = new int[] {1380, 1378, NONE};
    public static final int[] KALPHITE_QUEEN = new int[] {280, 288, NONE};
    public static final int[] KREE_ARRA = new int[] {1200, 1199, NONE};
	public static final int[] LEVIATHAN = new int[] {2489, 2487, 2488};
    public static final int[] MANTICORE = new int[] {2681, 2683, 2685};
	public static final int[] OLM = new int[] {1341, 1343, 1345};
	public static final int[] SCRURRIUS = new int[] {2640, 2642, NONE};
	public static final int[] SOTETSEG = new int[] {1606, 1607, NONE};
	public static final int[] VARDORVIS = new int[] {2520, 2521, NONE};
	public static final int[] WARDENS = new int[] {2224, 2241, NONE};
    public static final int[] WARDENS_DIVINE = new int[] {2208, 2206, 2204};
    public static final int[] WHISPERER = new int[] {2445, 2444, NONE};
	public static final int[] ZEBAK = new int[] {2181, 2187, NONE};
	public static final int[] ZEBAK_ROCKS = new int[] {2176, 2178, NONE};
	public static final int[] ZULRAH = new int[] {1046, 1044, NONE};

    private static final List<Integer>[] ALL_PROJECTILES_PER_STYLE = buildPoolPerStyle();

	private ProjectileIds() {}

    public static int getRandomProjectile(int style) {
        var pool = ALL_PROJECTILES_PER_STYLE[style];
        return pool.get(ThreadLocalRandom.current().nextInt(pool.size()));
    }

    @SuppressWarnings("unchecked")
    private static List<Integer>[] buildPoolPerStyle() {
        var allProjectiles = new int[][] {
                AKKHA,
                CERBERUS,
                DAGGANOTH_KINGS,
                DOOM_OF_MOKHAIOTL,
                DOOM_OF_MOKHAIOTL_ROCKS,
                HUEYCOATL,
                HUNLLEF_NORMAL,
                HUNLLEF_CORRUPTED,
                HYDRA,
                INFERNO,
                KALPHITE_QUEEN,
                KREE_ARRA,
                LEVIATHAN,
                MANTICORE,
                OLM,
                SCRURRIUS,
                SOTETSEG,
                VARDORVIS,
                WARDENS,
                WARDENS_DIVINE,
                WHISPERER,
                ZEBAK,
                ZEBAK_ROCKS,
                ZULRAH
        };

        List<Integer>[] pools = new List[]{new ArrayList<>(), new ArrayList<>(), new ArrayList<>()};

        for (int[] set : allProjectiles) {
            for (int i = 0; i < set.length; i++) {
                if (set[i] != NONE) {
                    pools[i].add(set[i]);
                }
            }
        }

        return pools;
    }
}

package com.projectileoverride;

import net.runelite.api.Projectile;

public class ProjectileOverride
{
	private final int overrideProjectileId;
    private final int style;
	private final int[] requiredRegion;

    public ProjectileOverride(int overrideProjectileId, int style, int[] requiredRegion) {
		this.overrideProjectileId = overrideProjectileId;
        this.style = style;
		this.requiredRegion = requiredRegion;
	}

    public int getOverrideProjectileId() {
        if (overrideProjectileId == ProjectileIds.RANDOM) {
            return ProjectileIds.getRandomProjectile(style);
        }

        return overrideProjectileId;
    }

	public boolean canOverride(Projectile projectile) {
		if (requiredRegion == null || requiredRegion.length == 0) {
			return true;
		}

		for (int regionId: requiredRegion)
		{
			if (projectile.getSourcePoint().getRegionID() == regionId) {
				return true;
			}
		}

		return false;
	}
}

package com.projectileoverride;

public final class RegionIds
{
	public static final int[] NONE = null;

	public static final int[] DAGGANOTH_KINGS = new int[] {11588, 11589}; // Regular and slayer instance.

	private RegionIds() {}
}

package com.projectileoverride;

public enum BossProjectiles
{
	DEFAULT("Default"),
    RANDOM("Random"),
    AKKHA("Akkha"),
	CERBERUS("Cerberus"),
	DAGGANOTH_KINGS("DKS"),
	DOOM_OF_MOKHAIOTL("Doom"),
	DOOM_OF_MOKHAIOTL_ROCKS("Doom rocks"),
	HUEYCOATL("Hueycoatl"),
	HUNLLEF_NORMAL("Hunllef"),
	HUNLLEF_CORRUPTED("Hunllef (c)"),
    HYDRA("Hydra"),
	INFERNO("Inferno"),
    KALPHITE_QUEEN("Kalphite Queen"),
    KREE_ARRA("Kree Arra"),
    LEVIATHAN("Leviathan"),
    MANTICORE("Manticore"),
	OLM("Olm"),
	SCURRIUS("Scurrius"),
	SOTETSEG("Sotetseg"),
	VARDORVIS("Vardorvis"),
	WARDENS("Wardens"),
    WARDENS_DIVINE("Wardens divine"),
	WHISPERER("Whisperer"),
	ZEBAK("Zebak"),
	ZEBAK_ROCKS("Zebak rocks"),
	ZULRAH("Zulrah");

	public final String name;

	private BossProjectiles(String name) {
		this.name = name;
	}

	@Override
	public String toString()
	{
		return name;
	}
}

package com.projectileoverride;

import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Projectile;
import net.runelite.api.events.ProjectileMoved;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Projectile Override"
)
public class ProjectileOverridePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ProjectileOverrideConfig config;

	private final HashMap<Integer, ProjectileOverride> overrideMap = new HashMap<>();

	private final HashSet<Projectile> overriddenProjectiles = new HashSet<>();

	@Provides
	ProjectileOverrideConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ProjectileOverrideConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		createOverrideMap();
	}

	@Override
	protected void shutDown() throws Exception {
		overriddenProjectiles.clear();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if(!ProjectileOverrideConfig.CONFIG_GROUP.equals(event.getGroup())) {
			return;
		}

		createOverrideMap();
	}

	@Subscribe
	public void onProjectileMoved(ProjectileMoved projectileMoved)
	{
		Projectile projectile = projectileMoved.getProjectile();

		// Prevent overriding projectiles that have already been overridden. This can happen if a player has configured
		// Boss A -> Boss B, Boss B -> Boss C. This will result in Boss A -> Boss C (instead of Boss B). Let's not talk
		// about what happens when you configure Boss A -> Boss B and Boss B -> Boss A.
		if (overriddenProjectiles.contains(projectile)) {
			return;
		}

		ProjectileOverride override = overrideMap.getOrDefault(projectile.getId(), null);

		if (override != null && override.canOverride(projectile)) {
			overriddenProjectiles.removeIf(p -> p.getRemainingCycles() < 0);
			overriddenProjectiles.add(replaceProjectile(projectile, override));
		}
	}

	private Projectile replaceProjectile(Projectile projectile, ProjectileOverride override)
	{
		Projectile overrideProjectile = client.createProjectile(
			override.getOverrideProjectileId(),
			projectile.getSourcePoint(),
			projectile.getStartHeight(), projectile.getSourceActor(),
			projectile.getTargetPoint(),
			projectile.getEndHeight(), projectile.getTargetActor(),
			projectile.getStartCycle(), projectile.getEndCycle(),
			projectile.getSlope(), projectile.getStartPos());

		client.getProjectiles().addLast(overrideProjectile);

		log.debug("Overriding projectile {} with {}", projectile.getId(), override.getOverrideProjectileId());

		// Hide the original projectile.
		projectile.setEndCycle(0);

		return overrideProjectile;
	}

	private void createOverrideMap() {
		overrideMap.clear();
        hydrateOverrideMap(BossProjectiles.AKKHA, config.Akkha());
		hydrateOverrideMap(BossProjectiles.CERBERUS, config.Cerberus());
		hydrateOverrideMap(BossProjectiles.DAGGANOTH_KINGS, config.DagganothKings());
		hydrateOverrideMap(BossProjectiles.DOOM_OF_MOKHAIOTL, config.DoomOfMokhaiotl());
		hydrateOverrideMap(BossProjectiles.DOOM_OF_MOKHAIOTL_ROCKS, config.DoomOfMokhaiotlRocks());
		hydrateOverrideMap(BossProjectiles.HUEYCOATL, config.Hueycoatl());
		hydrateOverrideMap(BossProjectiles.HUNLLEF_NORMAL, config.HunllefNormal());
		hydrateOverrideMap(BossProjectiles.HUNLLEF_CORRUPTED, config.HunllefCorrupted());
        hydrateOverrideMap(BossProjectiles.HYDRA, config.AlchemicalHydra());
		hydrateOverrideMap(BossProjectiles.INFERNO, config.Inferno());
        hydrateOverrideMap(BossProjectiles.KALPHITE_QUEEN, config.KalphiteQueen());
        hydrateOverrideMap(BossProjectiles.KREE_ARRA, config.KreeArra());
		hydrateOverrideMap(BossProjectiles.LEVIATHAN, config.Leviathan());
        hydrateOverrideMap(BossProjectiles.MANTICORE, config.Manticore());
		hydrateOverrideMap(BossProjectiles.OLM, config.Olm());
		hydrateOverrideMap(BossProjectiles.SCURRIUS, config.Scurrius());
		hydrateOverrideMap(BossProjectiles.SOTETSEG, config.Sotetseg());
		hydrateOverrideMap(BossProjectiles.VARDORVIS, config.Vardorvis());
		hydrateOverrideMap(BossProjectiles.WARDENS, config.Wardens());
        hydrateOverrideMap(BossProjectiles.WARDENS_DIVINE, config.WardensDivine());
		hydrateOverrideMap(BossProjectiles.WHISPERER, config.Whisperer());
		hydrateOverrideMap(BossProjectiles.ZEBAK, config.Zebak());
		hydrateOverrideMap(BossProjectiles.ZEBAK_ROCKS, config.ZebakRocks());
		hydrateOverrideMap(BossProjectiles.ZULRAH, config.Zulrah());
	}

	private void hydrateOverrideMap(BossProjectiles source, BossProjectiles override) {
		var sourceIds = getProjectileIdsForBoss(source);
		var overrideIds = getProjectileIdsForBoss(override);
		var requiredRegion = getRegionIdsForBoss(source);

		for (var i = 0; i < sourceIds.length; i++) {
			if (sourceIds[i] != ProjectileIds.NONE &&
				overrideIds[i] != ProjectileIds.NONE &&
				sourceIds[i] != overrideIds[i]) {
				overrideMap.put(sourceIds[i], new ProjectileOverride(overrideIds[i], i, requiredRegion));
			}
		}
	}

	private int[] getProjectileIdsForBoss(BossProjectiles boss) {
		switch (boss) {
            case AKKHA: return ProjectileIds.AKKHA;
			case CERBERUS: return ProjectileIds.CERBERUS;
			case DAGGANOTH_KINGS: return ProjectileIds.DAGGANOTH_KINGS;
			case DOOM_OF_MOKHAIOTL: return ProjectileIds.DOOM_OF_MOKHAIOTL;
			case DOOM_OF_MOKHAIOTL_ROCKS: return ProjectileIds.DOOM_OF_MOKHAIOTL_ROCKS;
			case HUEYCOATL: return ProjectileIds.HUEYCOATL;
			case HUNLLEF_NORMAL: return ProjectileIds.HUNLLEF_NORMAL;
			case HUNLLEF_CORRUPTED: return ProjectileIds.HUNLLEF_CORRUPTED;
            case HYDRA: return ProjectileIds.HYDRA;
			case INFERNO: return ProjectileIds.INFERNO;
            case KALPHITE_QUEEN: return ProjectileIds.KALPHITE_QUEEN;
            case KREE_ARRA: return ProjectileIds.KREE_ARRA;
			case LEVIATHAN: return ProjectileIds.LEVIATHAN;
            case MANTICORE: return ProjectileIds.MANTICORE;
			case OLM: return ProjectileIds.OLM;
			case SCURRIUS: return ProjectileIds.SCRURRIUS;
			case SOTETSEG: return ProjectileIds.SOTETSEG;
			case VARDORVIS: return ProjectileIds.VARDORVIS;
			case WARDENS: return ProjectileIds.WARDENS;
            case WARDENS_DIVINE: return ProjectileIds.WARDENS_DIVINE;
			case WHISPERER: return ProjectileIds.WHISPERER;
			case ZEBAK: return ProjectileIds.ZEBAK;
			case ZEBAK_ROCKS: return ProjectileIds.ZEBAK_ROCKS;
			case ZULRAH: return ProjectileIds.ZULRAH;
            case RANDOM:
                return new int[] {ProjectileIds.RANDOM, ProjectileIds.RANDOM, ProjectileIds.RANDOM};
			default:
				return new int[] {ProjectileIds.NONE, ProjectileIds.NONE, ProjectileIds.NONE};
		}
	}

	/**
	 * Gets the required region ids for the boss. Most bosses have unique projectiles so there is no need to configure
	 * regions.
	 */
	private int[] getRegionIdsForBoss(BossProjectiles boss) {
		switch (boss) {
			case DAGGANOTH_KINGS: return RegionIds.DAGGANOTH_KINGS;
			default:
				return RegionIds.NONE;
		}
	}
}

package com.projectileoverride;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ProjectileOverridePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ProjectileOverridePlugin.class);
		RuneLite.main(args);
	}
}
