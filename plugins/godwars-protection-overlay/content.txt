package com.godwarsprot;


import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.*;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;

public class GodWarsProtOverlay extends OverlayPanel
{

    private final PanelComponent panelComponent = new PanelComponent();
    private final ItemManager itemManager;
    @Inject
    GodWarsProtConfig config;

    private final ImageComponent saraGreen = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/saragreen.png"));
    private final ImageComponent saraRed = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/sarared.png"));
    private final ImageComponent armaGreen = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/armagreen.png"));
    private final ImageComponent armaRed = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/armared.png"));
    private final ImageComponent bandosGreen = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/bandosgreen.png"));
    private final ImageComponent bandosRed = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/bandosred.png"));
    private final ImageComponent zamGreen = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/zamgreen.png"));
    private final ImageComponent zamRed = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/zamred.png"));
    private final ImageComponent ancGreen = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/zarosgreen.png"));
    private final ImageComponent ancRed = new ImageComponent(ImageUtil.loadImageResource(GodWarsProtPlugin.class,"/zarosred.png"));



    @Override
    public Dimension render(Graphics2D graphics){
        setPosition(config.overlayLoc());
        panelComponent.getChildren().clear();
        if (config.iconOverlay())
        {
            panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
            panelComponent.getChildren().add(GodWarsProtPlugin.hasArma ? armaGreen : armaRed);
            panelComponent.getChildren().add(GodWarsProtPlugin.hasBandos ? bandosGreen : bandosRed);
            panelComponent.getChildren().add(GodWarsProtPlugin.hasSara ? saraGreen : saraRed);
            panelComponent.getChildren().add(GodWarsProtPlugin.hasZam ? zamGreen : zamRed);
            panelComponent.getChildren().add(GodWarsProtPlugin.hasAnc ? ancGreen : ancRed);
        }
        else
        {
            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            String overlayTitle = "God Wars Protection:";

            panelComponent.getChildren().add(TitleComponent.builder()
                    .text(overlayTitle)
                    .color(Color.YELLOW)
                    .build());
            panelComponent.setPreferredSize(new Dimension(
                    graphics.getFontMetrics().stringWidth(overlayTitle) + 60,
                    50));
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Armadyl")
                    .right(GodWarsProtPlugin.hasArma ? "Yes" : "No")
                    .rightColor(GodWarsProtPlugin.hasArma ? Color.green : Color.red)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Bandos")
                    .right(GodWarsProtPlugin.hasBandos ? "Yes" : "No")
                    .rightColor(GodWarsProtPlugin.hasBandos ? Color.green : Color.red)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Saradomin")
                    .right(GodWarsProtPlugin.hasSara ? "Yes" : "No")
                    .rightColor(GodWarsProtPlugin.hasSara ? Color.green : Color.red)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Zamorak")
                    .right(GodWarsProtPlugin.hasZam ? "Yes" : "No")
                    .rightColor(GodWarsProtPlugin.hasZam ? Color.green : Color.red)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Ancient")
                    .right(GodWarsProtPlugin.hasAnc ? "Yes" : "No")
                    .rightColor(GodWarsProtPlugin.hasAnc ? Color.green : Color.red)
                    .build());
        }
        if(config.showOverlay())
        {
            return panelComponent.render(graphics);
        }
        else
        {
            return null;
        }


    }

    @Inject
    private GodWarsProtOverlay(ItemManager itemManager)
    {
        this.itemManager = itemManager;
    }

}

package com.godwarsprot;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.ui.overlay.OverlayPosition;

@ConfigGroup("godwarsprotectionoverlay")
public interface GodWarsProtConfig extends Config
{
	@ConfigItem(
		keyName = "itemHighlight",
		name = "Item Highlight",
		description = "Highlight god related items in bank and inventory",
		position = 1
	)
	default boolean itemHighlight()
	{
		return false;
	}
	@ConfigItem(
			keyName = "highlightStyle",
			name = "Highlight Style",
			description = "How to highlight items",
			position = 2
	)
	default GodWarsProtHighlightStyle highlightStyle(){
		return GodWarsProtHighlightStyle.OUTLINE;
	}
	@ConfigItem(
			keyName = "showOverlay",
			name = "Show Overlay",
			description = "Toggle to disable/enable the yes/no protection overlay",
			position = 3
	)
	default boolean showOverlay(){
		return true;
	}
	@ConfigItem(
			keyName = "iconOverlay",
			name = "Icon Overlay",
			description = "Replaces the overlay with an icon version",
			position = 4
	)
	default boolean iconOverlay(){
		return true;
	}
	@ConfigItem(
			keyName = "overlayLoc",
			name = "Overlay location",
			description = "Choose location of Overlay",
			position = 5
	)
	default OverlayPosition overlayLoc(){
		return OverlayPosition.ABOVE_CHATBOX_RIGHT;
	}



}

package com.godwarsprot;

public enum GodWarsProtHighlightStyle {
    OUTLINE,
    UNDERLINE,
    BOTH
}


package com.godwarsprot;

import com.godwarsprot.items.*;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "God Wars Protection Overlay"
)
public class GodWarsProtPlugin extends Plugin
{
	//Zamorak scimitar Zamorak-painted heraldic kiteshields Zamorak-painted heraldic helmets not included
	//Saradomin scimitar Saradomin-painted heraldic kiteshields Saradomin-painted heraldic helmets not included
	// Item Source https://oldschool.runescape.wiki/w/God_Wars_Dungeon#God_equipment

	public static boolean hasBandos = false;
	public static boolean hasArma = false;
	public static boolean hasZam = false;
	public static boolean hasAnc = false;
	public static boolean hasSara = false;

	@Inject
	private Client client;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private GodWarsProtConfig config;
	@Inject
	private GodWarsProtOverlay overlay;
	@Inject
	private GodWarsProtItemOverlay itemOverlay;
	@Inject
	private Armadyl armadyl;
	@Inject
	private Bandos bandos;
	@Inject
	private Zamorak zamorak;
	@Inject
	private Saradomin saradomin;
	@Inject
	private Ancient ancient;
	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlayManager.add(itemOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		overlayManager.remove(itemOverlay);
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getItemContainer() != client.getItemContainer(InventoryID.EQUIPMENT)) {
			return;
		}
		checkItems(event.getItemContainer().getItems());

	}

	private void checkItems(Item[] items){

		boolean sara2 = false;
		boolean bandos2 =  false;
		boolean arma2 = false;
		boolean zam2 = false;
		boolean anc2 =  false;

		for (Item item : items){

			if (!arma2){
				if (armadyl.checkList(item.getId())){
					arma2 = true;
				}
			}
			if (!bandos2){
				if (bandos.checkList(item.getId())){
					bandos2 = true;
				}
			}
			if (!zam2){
				if (zamorak.checkList(item.getId())){
					zam2 = true;
				}

			}
			if (!sara2){
				if (saradomin.checkList(item.getId())){
					sara2 = true;
				}
			}
			if (!anc2){
				if (ancient.checkList(item.getId())){
					anc2 = true;
				}
			}

		}
		hasArma = arma2;
		hasZam = zam2;
		hasBandos = bandos2;
		hasAnc = anc2;
		hasSara = sara2;


	}



	@Provides
	GodWarsProtConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GodWarsProtConfig.class);
	}
}

package com.godwarsprot.items;

import net.runelite.api.ItemID;

import java.util.HashSet;

public class Saradomin {

    private final HashSet<Integer> SaradominItemHash;

    public Saradomin(){
        this.SaradominItemHash = new HashSet<>();
        this.SaradominItemHash.add(ItemID.SARADOMIN_GODSWORD);
        this.SaradominItemHash.add(ItemID.SARADOMIN_SWORD);
        this.SaradominItemHash.add(ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_SARADOMIN);
        this.SaradominItemHash.add(ItemID.STAFF_OF_LIGHT);
        this.SaradominItemHash.add(ItemID.SARADOMINS_BLESSED_SWORD);
        this.SaradominItemHash.add(ItemID.SARADOMIN_STAFF);
        this.SaradominItemHash.add(ItemID.SARADOMIN_CROZIER);
        this.SaradominItemHash.add(ItemID.SARADOMIN_MJOLNIR);
        this.SaradominItemHash.add(ItemID.HALLOWED_HAMMER);
        this.SaradominItemHash.add(ItemID.HOLY_SCYTHE_OF_VITUR);
        this.SaradominItemHash.add(ItemID.HOLY_GHRAZI_RAPIER);
        this.SaradominItemHash.add(ItemID.HOLY_SANGUINESTI_STAFF);
        this.SaradominItemHash.add(ItemID.HOLY_BOOK);
        this.SaradominItemHash.add(ItemID.DAMAGED_BOOK);
        this.SaradominItemHash.add(ItemID.SARADOMIN_KITESHIELD);
        this.SaradominItemHash.add(ItemID.SARADOMIN_DHIDE_SHIELD);
        this.SaradominItemHash.add(ItemID.HALLOWED_FOCUS);
        this.SaradominItemHash.add(ItemID.SARADOMIN_COIF);
        this.SaradominItemHash.add(ItemID.SARADOMIN_MITRE);
        this.SaradominItemHash.add(ItemID.SARADOMIN_FULL_HELM);
        this.SaradominItemHash.add(ItemID.SARADOMIN_HALO);
        this.SaradominItemHash.add(ItemID.SARADOMIN_MAX_HOOD);
        this.SaradominItemHash.add(ItemID.IMBUED_SARADOMIN_MAX_HOOD);
        this.SaradominItemHash.add(ItemID.JUSTICIAR_FACEGUARD);
        this.SaradominItemHash.add(ItemID.SARADOMIN_CAPE);
        this.SaradominItemHash.add(ItemID.SARADOMIN_CLOAK);
        this.SaradominItemHash.add(ItemID.SARADOMIN_MAX_CAPE);
        this.SaradominItemHash.add(ItemID.IMBUED_SARADOMIN_CAPE);
        this.SaradominItemHash.add(ItemID.IMBUED_SARADOMIN_MAX_CAPE);
        this.SaradominItemHash.add(ItemID.SARADOMIN_ROBE_TOP);
        this.SaradominItemHash.add(ItemID.SARADOMIN_DHIDE_BODY);
        this.SaradominItemHash.add(ItemID.MONKS_ROBE_TOP);
        this.SaradominItemHash.add(ItemID.SARADOMIN_PLATEBODY);
        this.SaradominItemHash.add(ItemID.JUSTICIAR_CHESTGUARD);
        this.SaradominItemHash.add(ItemID.SARADOMIN_ROBE_LEGS);
        this.SaradominItemHash.add(ItemID.SARADOMIN_CHAPS);
        this.SaradominItemHash.add(ItemID.MONKS_ROBE);
        this.SaradominItemHash.add(ItemID.SARADOMIN_PLATELEGS);
        this.SaradominItemHash.add(ItemID.SARADOMIN_PLATESKIRT);
        this.SaradominItemHash.add(ItemID.JUSTICIAR_LEGGUARDS);
        this.SaradominItemHash.add(ItemID.HOLY_WRAPS);
        this.SaradominItemHash.add(ItemID.SARADOMIN_BRACERS);
        this.SaradominItemHash.add(ItemID.SARADOMIN_DHIDE_BOOTS);
        this.SaradominItemHash.add(ItemID.HOLY_SANDALS);
        this.SaradominItemHash.add(ItemID.DEVOUT_BOOTS);
        this.SaradominItemHash.add(ItemID.HOLY_BLESSING);
        this.SaradominItemHash.add(ItemID.HALLOWED_GRAPPLE);
        this.SaradominItemHash.add(ItemID.HOLY_SYMBOL);
        this.SaradominItemHash.add(ItemID.SARADOMIN_STOLE);
        this.SaradominItemHash.add(ItemID.HALLOWED_SYMBOL);
        this.SaradominItemHash.add(ItemID.HALLOWED_RING);
        this.SaradominItemHash.add(ItemID.RING_OF_ENDURANCE);


    }
    public boolean checkList(int Item)
    {
        return this.SaradominItemHash.contains(Item);
    }
}

package com.godwarsprot.items;

import net.runelite.api.ItemID;

import java.util.HashSet;

public class Bandos {

    private final HashSet<Integer> BandosItemHash;

    public Bandos(){
        this.BandosItemHash = new HashSet<>();
        this.BandosItemHash.add(ItemID.ANCIENT_MACE);
        this.BandosItemHash.add(ItemID.BANDOS_GODSWORD);
        this.BandosItemHash.add(ItemID.BANDOS_CROZIER);
        this.BandosItemHash.add(ItemID.BOOK_OF_WAR);
        this.BandosItemHash.add(ItemID.DAMAGED_BOOK_12607);
        this.BandosItemHash.add(ItemID.BANDOS_KITESHIELD);
        this.BandosItemHash.add(ItemID.BANDOS_DHIDE_SHIELD);
        this.BandosItemHash.add(ItemID.BANDOS_FULL_HELM);
        this.BandosItemHash.add(ItemID.BANDOS_COIF);
        this.BandosItemHash.add(ItemID.BANDOS_MITRE);
        this.BandosItemHash.add(ItemID.BANDOS_HALO);
        this.BandosItemHash.add(ItemID.BANDOS_CLOAK);
        this.BandosItemHash.add(ItemID.BANDOS_CHESTPLATE);
        this.BandosItemHash.add(ItemID.BANDOS_PLATEBODY);
        this.BandosItemHash.add(ItemID.BANDOS_DHIDE_BODY);
        this.BandosItemHash.add(ItemID.BANDOS_ROBE_TOP);
        this.BandosItemHash.add(ItemID.BANDOS_TASSETS);
        this.BandosItemHash.add(ItemID.BANDOS_PLATELEGS);
        this.BandosItemHash.add(ItemID.BANDOS_PLATESKIRT);
        this.BandosItemHash.add(ItemID.BANDOS_ROBE_LEGS);
        this.BandosItemHash.add(ItemID.BANDOS_BRACERS);
        this.BandosItemHash.add(ItemID.BANDOS_DHIDE_BOOTS);
        this.BandosItemHash.add(ItemID.BANDOS_BOOTS);
        this.BandosItemHash.add(ItemID.GUARDIAN_BOOTS);
        this.BandosItemHash.add(ItemID.ECHO_BOOTS);
        this.BandosItemHash.add(ItemID.WAR_BLESSING);
        this.BandosItemHash.add(ItemID.BANDOS_STOLE);
        this.BandosItemHash.add(ItemID.BANDOS_CHAPS);
    }
    public boolean checkList(int Item)
    {
        return this.BandosItemHash.contains(Item);
    }

}

package com.godwarsprot.items;

import net.runelite.api.ItemID;

import java.util.HashSet;

public class Zamorak {

    private final HashSet<Integer> ZamorakItemHash;

    public Zamorak(){
        this.ZamorakItemHash = new HashSet<>();
        this.ZamorakItemHash.add(ItemID.ZAMORAK_GODSWORD);
        this.ZamorakItemHash.add(ItemID.ZAMORAKIAN_SPEAR);
        this.ZamorakItemHash.add(ItemID.ZAMORAKIAN_HASTA);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_STAFF);
        this.ZamorakItemHash.add(ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_ZAMORAK);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_CROZIER);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_MJOLNIR);
        this.ZamorakItemHash.add(ItemID.STAFF_OF_THE_DEAD);
        this.ZamorakItemHash.add(ItemID.STAFF_OF_LIGHT);
        this.ZamorakItemHash.add(ItemID.STAFF_OF_BALANCE);
        this.ZamorakItemHash.add(ItemID.TOXIC_STAFF_OF_THE_DEAD);
        this.ZamorakItemHash.add(ItemID.DRAGON_HUNTER_LANCE);
        this.ZamorakItemHash.add(ItemID.THAMMARONS_SCEPTRE_A);
        this.ZamorakItemHash.add(ItemID.THAMMARONS_SCEPTRE);
        this.ZamorakItemHash.add(ItemID.ACCURSED_SCEPTRE_A); 
        this.ZamorakItemHash.add(ItemID.ACCURSED_SCEPTRE);
        this.ZamorakItemHash.add(ItemID.VIGGORAS_CHAINMACE);
        this.ZamorakItemHash.add(ItemID.URSINE_CHAINMACE);
        this.ZamorakItemHash.add(ItemID.INQUISITORS_MACE);
        this.ZamorakItemHash.add(ItemID.UNHOLY_BOOK);
        this.ZamorakItemHash.add(ItemID.DAMAGED_BOOK_3841);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_KITESHIELD);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_DHIDE_SHIELD);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_COIF);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_MITRE);
        this.ZamorakItemHash.add(ItemID.ELDER_CHAOS_HOOD);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_FULL_HELM);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_HALO);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_MAX_HOOD);
        this.ZamorakItemHash.add(ItemID.IMBUED_ZAMORAK_MAX_HOOD);
        this.ZamorakItemHash.add(ItemID.INQUISITORS_GREAT_HELM);
        this.ZamorakItemHash.add(ItemID.OATHPLATE_HELM);
        this.ZamorakItemHash.add(ItemID.DAGONHAI_HAT);
        this.ZamorakItemHash.add(ItemID.ELITE_BLACK_FULL_HELM);
        this.ZamorakItemHash.add(ItemID.DARK_SQUALL_HOOD);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_CAPE);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_CLOAK);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_MAX_CAPE);
        this.ZamorakItemHash.add(ItemID.IMBUED_ZAMORAK_CAPE);
        this.ZamorakItemHash.add(ItemID.IMBUED_ZAMORAK_MAX_CAPE);
        this.ZamorakItemHash.add(ItemID.IMBUED_ZAMORAK_CAPE_DEADMAN);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_ROBE_TOP);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_MONK_TOP);
        this.ZamorakItemHash.add(ItemID.ELDER_CHAOS_TOP);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_DHIDE_BODY);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_PLATEBODY);
        this.ZamorakItemHash.add(ItemID.INQUISITORS_HAUBERK);
        this.ZamorakItemHash.add(ItemID.OATHPLATE_CHEST);
        this.ZamorakItemHash.add(ItemID.DAGONHAI_ROBE_TOP);
        this.ZamorakItemHash.add(ItemID.ELITE_BLACK_PLATEBODY);
        this.ZamorakItemHash.add(ItemID.DARK_SQUALL_ROBE_TOP);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_ROBE_LEGS);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_MONK_BOTTOM);
        this.ZamorakItemHash.add(ItemID.ELDER_CHAOS_ROBE);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_CHAPS);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_PLATELEGS);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_PLATESKIRT);
        this.ZamorakItemHash.add(ItemID.INQUISITORS_PLATESKIRT);
        this.ZamorakItemHash.add(ItemID.OATHPLATE_LEGS);
        this.ZamorakItemHash.add(ItemID.DAGONHAI_ROBE_BOTTOM);
        this.ZamorakItemHash.add(ItemID.ELITE_BLACK_PLATELEGS);
        this.ZamorakItemHash.add(ItemID.DARK_SQUALL_ROBE_BOTTOM);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_BRACERS);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_DHIDE_BOOTS);
        this.ZamorakItemHash.add(ItemID.UNHOLY_BLESSING);
        this.ZamorakItemHash.add(ItemID.UNHOLY_SYMBOL);
        this.ZamorakItemHash.add(ItemID.ZAMORAK_STOLE);
        



    }
    public boolean checkList(int Item)
    {
        return this.ZamorakItemHash.contains(Item);
    }

}

package com.godwarsprot.items;

import net.runelite.api.ItemID;

import java.util.HashSet;

public class Armadyl {
    private final HashSet<Integer> ArmadylItemHash;

    public Armadyl(){
        this.ArmadylItemHash = new HashSet<>();
        this.ArmadylItemHash.add(ItemID.ARMADYL_GODSWORD);
        this.ArmadylItemHash.add(ItemID.ARMADYL_GODSWORD_DEADMAN);
        this.ArmadylItemHash.add(ItemID.ARMADYL_CROSSBOW);
        this.ArmadylItemHash.add(ItemID.ARMADYL_CROZIER);
        this.ArmadylItemHash.add(ItemID.CRAWS_BOW);
        this.ArmadylItemHash.add(ItemID.WEBWEAVER_BOW);
        this.ArmadylItemHash.add(ItemID.BOOK_OF_LAW);
        this.ArmadylItemHash.add(ItemID.DAMAGED_BOOK_12609);
        this.ArmadylItemHash.add(ItemID.ARMADYL_KITESHIELD);
        this.ArmadylItemHash.add(ItemID.ARMADYL_DHIDE_SHIELD);
        this.ArmadylItemHash.add(ItemID.ARMADYL_HELMET);
        this.ArmadylItemHash.add(ItemID.ARMADYL_COIF);
        this.ArmadylItemHash.add(ItemID.ARMADYL_FULL_HELM);
        this.ArmadylItemHash.add(ItemID.ARMADYL_MITRE);
        this.ArmadylItemHash.add(ItemID.ARMADYL_HALO);
        this.ArmadylItemHash.add(ItemID.ARMADYL_CLOAK);
        this.ArmadylItemHash.add(ItemID.ARMADYL_CHESTPLATE);
        this.ArmadylItemHash.add(ItemID.ARMADYL_PLATEBODY);
        this.ArmadylItemHash.add(ItemID.ARMADYL_DHIDE_BODY);
        this.ArmadylItemHash.add(ItemID.ARMADYL_ROBE_TOP);
        this.ArmadylItemHash.add(ItemID.ARMADYL_CHAINSKIRT);
        this.ArmadylItemHash.add(ItemID.ARMADYL_PLATELEGS);
        this.ArmadylItemHash.add(ItemID.ARMADYL_ROBE_LEGS);
        this.ArmadylItemHash.add(ItemID.ARMADYL_BRACERS);
        this.ArmadylItemHash.add(ItemID.ARMADYL_DHIDE_BOOTS);
        this.ArmadylItemHash.add(ItemID.ARMADYL_PENDANT);
        this.ArmadylItemHash.add(ItemID.ARMADYL_STOLE);
        this.ArmadylItemHash.add(ItemID.HONOURABLE_BLESSING);
        this.ArmadylItemHash.add(ItemID.ARMADYL_CHAPS);
        this.ArmadylItemHash.add(ItemID.ARMADYL_PLATESKIRT);
    }

    public boolean checkList(int Item)
    {
        return this.ArmadylItemHash.contains(Item);
    }

}

package com.godwarsprot.items;

import net.runelite.api.ItemID;

import java.util.HashSet;

public class Ancient {
    private final HashSet<Integer> AncientItemHash;

    public Ancient(){
        this.AncientItemHash = new HashSet<>();
        this.AncientItemHash.add(ItemID.ANCIENT_GODSWORD);
        this.AncientItemHash.add(ItemID.ANCIENT_STAFF);
        this.AncientItemHash.add(ItemID.ANCIENT_SCEPTRE);
        this.AncientItemHash.add(ItemID.ANCIENT_CROZIER);
        this.AncientItemHash.add(ItemID.VENATOR_BOW);
        this.AncientItemHash.add(ItemID.ZARYTE_CROSSBOW);
        this.AncientItemHash.add(ItemID.BOOK_OF_DARKNESS);
        this.AncientItemHash.add(ItemID.DAMAGED_BOOK_12611);
        this.AncientItemHash.add(ItemID.ANCIENT_KITESHIELD);
        this.AncientItemHash.add(ItemID.ANCIENT_DHIDE_SHIELD);
        this.AncientItemHash.add(ItemID.ANCIENT_COIF);
        this.AncientItemHash.add(ItemID.ANCIENT_FULL_HELM);
        this.AncientItemHash.add(ItemID.ANCIENT_MITRE);
        this.AncientItemHash.add(ItemID.ANCIENT_HALO);
        this.AncientItemHash.add(ItemID.ANCIENT_CEREMONIAL_MASK);
        this.AncientItemHash.add(ItemID.TORVA_FULL_HELM);
        this.AncientItemHash.add(ItemID.VIRTUS_MASK);
        this.AncientItemHash.add(ItemID.HOOD_OF_DARKNESS);
        this.AncientItemHash.add(ItemID.ANCIENT_CLOAK);
        this.AncientItemHash.add(ItemID.ANCIENT_PLATEBODY);
        this.AncientItemHash.add(ItemID.ANCIENT_DHIDE_BODY);
        this.AncientItemHash.add(ItemID.ANCIENT_ROBE_TOP);
        this.AncientItemHash.add(ItemID.TORVA_PLATEBODY);
        this.AncientItemHash.add(ItemID.VIRTUS_ROBE_TOP);
        this.AncientItemHash.add(ItemID.ANCIENT_CEREMONIAL_TOP);
        this.AncientItemHash.add(ItemID.ROBE_TOP_OF_DARKNESS);
        this.AncientItemHash.add(ItemID.ANCIENT_PLATELEGS);
        this.AncientItemHash.add(ItemID.ANCIENT_CHAPS);
        this.AncientItemHash.add(ItemID.ANCIENT_PLATESKIRT);
        this.AncientItemHash.add(ItemID.ANCIENT_ROBE_LEGS);
        this.AncientItemHash.add(ItemID.TORVA_PLATELEGS);
        this.AncientItemHash.add(ItemID.VIRTUS_ROBE_BOTTOM);
        this.AncientItemHash.add(ItemID.ANCIENT_CEREMONIAL_LEGS);
        this.AncientItemHash.add(ItemID.ROBE_BOTTOM_OF_DARKNESS);
        this.AncientItemHash.add(ItemID.ANCIENT_BRACERS);
        this.AncientItemHash.add(ItemID.ZARYTE_VAMBRACES);
        this.AncientItemHash.add(ItemID.ANCIENT_CEREMONIAL_GLOVES);
        this.AncientItemHash.add(ItemID.GLOVES_OF_DARKNESS);
        this.AncientItemHash.add(ItemID.ANCIENT_DHIDE_BOOTS);
        this.AncientItemHash.add(ItemID.ANCIENT_CEREMONIAL_BOOTS);
        this.AncientItemHash.add(ItemID.BOOTS_OF_DARKNESS);
        this.AncientItemHash.add(ItemID.ANCIENT_BLESSING);
        this.AncientItemHash.add(ItemID.ANCIENT_STOLE);
    }
    public boolean checkList(int Item)
    {
        return this.AncientItemHash.contains(Item);
    }

}

package com.godwarsprot;

import com.godwarsprot.items.*;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;


public class GodWarsProtItemOverlay extends WidgetItemOverlay {

    private final GodWarsProtConfig config;
    private final ItemManager itemManager;

    private final Armadyl armadyl;
    private final Bandos bandos;
    private final Zamorak zamorak;
    private final Saradomin saradomin;
    private final Ancient ancient;



    @Inject
    public GodWarsProtItemOverlay(ItemManager itemManager, GodWarsProtConfig config, Armadyl armadyl,Bandos bandos,Zamorak zamorak, Saradomin saradomin, Ancient ancient){
            this.config = config;
            this.armadyl = armadyl;
            this.bandos = bandos;
            this.zamorak = zamorak;
            this.saradomin = saradomin;
            this.ancient = ancient;
            this.itemManager = itemManager;
            showOnInventory();
            showOnBank();



    }

    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
    {
        if (!config.itemHighlight()) {
            return;
        }
        Color colorToUse = checkGod(itemId);
        if (colorToUse == null){
            return;
        }
        Rectangle bounds = itemWidget.getCanvasBounds();
        if(config.highlightStyle() == GodWarsProtHighlightStyle.OUTLINE || config.highlightStyle() == GodWarsProtHighlightStyle.BOTH){
            final BufferedImage outline = itemManager.getItemOutline(itemId, itemWidget.getQuantity(), colorToUse);
            graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
        }
        // Underline is taken from Inventory Tags plugin.
        if(config.highlightStyle() == GodWarsProtHighlightStyle.UNDERLINE || config.highlightStyle() == GodWarsProtHighlightStyle.BOTH){
            int heightOffSet = (int) bounds.getY() + (int) bounds.getHeight() + 2;
            graphics.setColor(colorToUse);
            graphics.drawLine((int) bounds.getX(), heightOffSet, (int) bounds.getX() + (int) bounds.getWidth(), heightOffSet);

        }




    }

    private Color checkGod(int itemId){
        if (armadyl.checkList(itemId)){
            return Color.white;
        }
        if (zamorak.checkList(itemId)){
            return Color.red;
        }
        if (ancient.checkList(itemId)){
            return Color.MAGENTA;
        }
        if (bandos.checkList(itemId)){
            return Color.ORANGE;
        }
        if (saradomin.checkList(itemId)){
            return Color.blue;
        }
        return null;



    }


}

package com.godwarsprot;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLaucher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GodWarsProtPlugin.class);
		RuneLite.main(args);
	}
}
