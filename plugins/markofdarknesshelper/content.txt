package com.markofdarknesshelper;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("com/markofdarknesshelper")
public interface MarkOfDarknessHelperConfig extends Config
{
    @ConfigItem(
            keyName = "shouldNotify",
            name = "Notify when Mark of Darkness expires",
            description = "Sends a notification once Mark of Darkness needs to be recast."
    )
    default boolean shouldNotify() { return true; }

    @ConfigItem(
            keyName = "shouldFlash",
            name = "Flash the Reminder Box",
            description = "Makes the reminder box flash."
    )
    default boolean shouldFlash() { return false; }

    @ConfigItem(
            keyName = "onlyArceuus",
            name = "Only on Arceuus Spellbook",
            description = "Only display the reminder box when on the Arceuus spellbook."
    )
    default boolean onlyArceuus() { return true; }
}
package com.markofdarknesshelper;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class MarkOfDarknessHelperOverlay extends OverlayPanel
{
    private static final Color FOCUS = new Color(128, 0, 255, 150);

    private final MarkOfDarknessHelperConfig config;
    private final Client client;
    private long markStartTime = 0;
    private int timeoutSeconds = 60;

    @Inject
    public MarkOfDarknessHelperOverlay(MarkOfDarknessHelperConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    public void setMarkStartTime(long startTime)
    {
        this.markStartTime = startTime;
    }

    public void setTimeout(int seconds)
    {
        this.timeoutSeconds = seconds;
    }

    private boolean shouldShowReminder()
    {
        if (markStartTime == 0)
        {
            return true;
        }
        long elapsed = (System.currentTimeMillis() - markStartTime) / 1000;
        return elapsed > timeoutSeconds;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (config.onlyArceuus() && client.getVarbitValue(Varbits.SPELLBOOK) != 3)
        {
            return null;
        }

        if (!shouldShowReminder())
        {
            return null;
        }

        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Cast Mark of Darkness!")
                .build());

        if (config.shouldFlash())
        {
            if (client.getGameCycle() % 40 >= 20)
            {
                panelComponent.setBackgroundColor(getPreferredColor());
            }
            else
            {
                panelComponent.setBackgroundColor(FOCUS);
            }
        }
        else
        {
            panelComponent.setBackgroundColor(FOCUS);
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }
}
package com.markofdarknesshelper;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.ChatMessageType;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
        name = "Mark of Darkness Helper"
)
public class MarkOfDarknessHelperPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private Notifier notifier;

    @Inject
    private MarkOfDarknessHelperOverlay overlay;

    @Inject
    private MarkOfDarknessHelperConfig config;

    @Inject
    private OverlayManager overlayManager;

    private static final String MARK_OF_DARKNESS_MESSAGE = "You have placed a Mark of Darkness upon yourself.</col>";

    @Override
    protected void startUp() throws Exception
    {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
    }

    @Subscribe
    public void onChatMessage(ChatMessage event)
    {
        if (event.getType() != ChatMessageType.GAMEMESSAGE)
        {
            return;
        }

        if (event.getMessage().endsWith(MARK_OF_DARKNESS_MESSAGE))
        {
            int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
            boolean hasPurgingStaff = isWieldingPurgingStaff();
            int dynamicTimeout = (int) Math.round(0.6 * magicLevel * (hasPurgingStaff ? 5 : 1));
            overlay.setMarkStartTime(System.currentTimeMillis());
            overlay.setTimeout(dynamicTimeout);
        }
    }

    private boolean isWieldingPurgingStaff()
    {
        final int PURGING_STAFF_ID = 29594; // Replace with actual ID if known
        ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        if (equipment != null)
        {
            for (Item item : equipment.getItems())
            {
                if (item != null && item.getId() == PURGING_STAFF_ID)
                {
                    return true;
                }
            }
        }
        return false;
    }

    @Provides
    MarkOfDarknessHelperConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(MarkOfDarknessHelperConfig.class);
    }
}

package com.markofdarknesshelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MarkOfDarknessHelperPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(MarkOfDarknessHelperPlugin.class);
        RuneLite.main(args);
    }
}
