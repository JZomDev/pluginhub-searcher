package com.gghammerreminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GGHammerReminderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GGHammerReminderPlugin.class);
		RuneLite.main(args);
	}
}
package com.gghammerreminder;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class GGHammerReminderOverlay extends OverlayPanel {
    private final GGHammerReminderConfig config;
    private final Client client;

    @Inject
    private GGHammerReminderOverlay(GGHammerReminderConfig config, Client client) {
        this.config = config;
        this.client = client;
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();

        if (config.showOverlay() && GGHammerReminderUtils.isInTargetRegion(client) && !GGHammerReminderUtils.hasHammerInInventory(client)) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Reminder: Bring a rock hammer!")
                    .build());
            panelComponent.setBackgroundColor(config.overlayColor());
        }

        return panelComponent.render(graphics);
    }
}
package com.gghammerreminder;

import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;

import java.util.Arrays;
import java.util.List;

import static net.runelite.api.ItemID.GRANITE_HAMMER;
import static net.runelite.api.ItemID.ROCK_HAMMER;
import static net.runelite.api.ItemID.ROCK_THROWNHAMMER;

public class GGHammerReminderUtils {
    private static final List<Integer> HAMMER_ITEM_IDS = Arrays.asList(ROCK_HAMMER, ROCK_THROWNHAMMER, GRANITE_HAMMER);
    private static final int GG_REGION_ID = 6727;

    public static boolean hasHammerInInventory(Client client) {
        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        if (inventory != null) {
            for (Item item : inventory.getItems()) {
                if (HAMMER_ITEM_IDS.contains(item.getId())) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean isInTargetRegion(Client client) {
        int[] mapRegions = client.getMapRegions();
        for (int regionId : mapRegions) {
            if (regionId == GG_REGION_ID) {
                return true;
            }
        }
        return false;
    }
}
package com.gghammerreminder;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
		name = "GG Hammer Reminder",
		description = "Reminds you to bring a hammer to the Grotesque Guardians",
		tags = {"gg", "rock hammer", "reminder", "Grotesque Guardians", "Gargoyle"}
)
public class GGHammerReminderPlugin extends Plugin {
	private static final int CLOISTER_BELL_ID = 31669;

	@Inject
	private Client client;

	@Inject
	private GGHammerReminderConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private GGHammerReminderOverlay ggHammerReminderOverlay;

	@Override
	protected void startUp() {
		log.info("GG Hammer Reminder started!");
		overlayManager.add(ggHammerReminderOverlay);
	}

	@Override
	protected void shutDown() {
		log.info("GG Hammer Reminder stopped!");
		overlayManager.remove(ggHammerReminderOverlay);
	}

	@Subscribe(priority = -1)
	public void onMenuOpened(MenuOpened event) {
		if (!config.removeRightClickMenu()) {
			return;
		}

		MenuEntry[] menuEntries = client.getMenuEntries();
		List<MenuEntry> alteredMenuEntries = new ArrayList<>();
		boolean showHammerReminder = false;
		boolean hasHammer = GGHammerReminderUtils.hasHammerInInventory(client);

		for (MenuEntry menuEntry : menuEntries) {
			MenuAction menuAction = menuEntry.getType();
			int identifier = menuEntry.getIdentifier();

			if (identifier == CLOISTER_BELL_ID && (isRing(menuAction) || isQuickStart(menuAction))) {
				if (!hasHammer) {
					showHammerReminder = true;
					continue;
				}
			}
			alteredMenuEntries.add(menuEntry);
		}

		client.setMenuEntries(alteredMenuEntries.toArray(new MenuEntry[0]));

		if (showHammerReminder) {
			client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Reminder: Bring a rock hammer to fight the Grotesque Guardians!", null);
		}
	}

	@Subscribe(priority = -2)
	public void onMenuOptionClicked(MenuOptionClicked event) {
		String option = event.getMenuOption();
		int identifier = event.getId();

		boolean shouldRemoveMenu = config.removeRightClickMenu();
		boolean hasHammer = GGHammerReminderUtils.hasHammerInInventory(client);

		if (identifier == CLOISTER_BELL_ID && (option.equals("Quick-start") || option.equals("Ring")) && !hasHammer && shouldRemoveMenu) {
			event.consume();
			client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "You can't start this without a rock hammer, rock thrownhammer, or granite hammer!", null);
		}
	}

	private boolean isRing(MenuAction menuAction) {
		return MenuAction.GAME_OBJECT_FIRST_OPTION.equals(menuAction);
	}

	private boolean isQuickStart(MenuAction menuAction) {
		return MenuAction.GAME_OBJECT_SECOND_OPTION.equals(menuAction);
	}

	@Provides
	GGHammerReminderConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(GGHammerReminderConfig.class);
	}
}
package com.gghammerreminder;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("ghammerreminder")
public interface GGHammerReminderConfig extends Config {
	@ConfigItem(
			keyName = "showOverlay",
			name = "Show Overlay",
			description = "Toggle to show or hide the overlay",
			position = 1
	)
	default boolean showOverlay() {
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "overlayColor",
			name = "Overlay Color",
			description = "The color of the overlay.",
			position = 2
	)
	default Color overlayColor() {
		return new Color(255, 0, 0, 150);
	}

	@ConfigItem(
			keyName = "removeRightClickMenu",
			name = "Remove Right-click Menu",
			description = "Toggle to remove or keep right-click menu options",
			position = 3
	)
	default boolean removeRightClickMenu() {
		return true;
	}
}
