/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import com.google.common.primitives.Ints;
import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import java.util.concurrent.ScheduledExecutorService;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import static net.runelite.api.Experience.MAX_REAL_LEVEL;
import static net.runelite.api.Experience.MAX_SKILL_XP;
import static net.runelite.api.Experience.MAX_VIRT_LEVEL;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.StatChanged;
import net.runelite.client.Notifier;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.externalplugins.ExternalPluginManager;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageCapture;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import static org.mockito.Mockito.when;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class VirtualLevelUpsPluginTest
{
	private static final Skill SKILL = Skill.HITPOINTS;
	private static GameStateChanged HOPPING = new GameStateChanged();
	private static GameStateChanged LOADING = new GameStateChanged();
	private static GameStateChanged LOGGED_IN = new GameStateChanged();

	@Inject
	private VirtualLevelUpsPlugin plugin;

	@Mock
	@Bind
	private ImageCapture imageCapture;

	@Mock
	@Bind
	private ClientUI clientUI;

	@Mock
	@Bind
	private OverlayManager overlayManager;

	@Mock
	@Bind
	private Client client;

	@Mock
	@Bind
	private ChatboxPanelManager chatboxPanelManager;

	@Mock
	@Bind
	private Notifier notifier;

	@Mock
	@Bind
	private ConfigManager configManager;

	@Mock
	@Bind
	private RuneLiteConfig runeLiteConfig;

	@Mock
	@Bind
	private VirtualLevelUpsConfig config;

	@Mock
	@Bind
	private ScheduledExecutorService executor;

	static {
		HOPPING.setGameState(GameState.HOPPING);
		LOADING.setGameState(GameState.LOADING);
		LOGGED_IN.setGameState(GameState.LOGGED_IN);
	}

	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VirtualLevelUpsPlugin.class);
		RuneLite.main(args);
	}

	@Before
	public void before()
	{
		Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);
	}

	@Test
	public void virtualLevelGained()
	{
		int level = MAX_REAL_LEVEL;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		level++;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		assertEquals(1, plugin.getSkillsLeveledUp().size());
		assertTrue(plugin.getSkillsLeveledUp().contains(SKILL));
	}

	@Test
	public void testXpSetAfterNullState()
	{
		final int level = MAX_REAL_LEVEL + 1;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		assertTrue(plugin.getSkillsLeveledUp().isEmpty());
	}

	@Test
	public void testXpBelow100()
	{
		int level = MAX_REAL_LEVEL - 1;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		level++;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		assertTrue(plugin.getSkillsLeveledUp().isEmpty());
	}

	@Test
	public void testNoLevelGained()
	{
		final int level = MAX_REAL_LEVEL;
		statChanged(SKILL, Experience.getXpForLevel(level), level);
		statChanged(SKILL, Experience.getXpForLevel(level) + 1, level);

		assertTrue(plugin.getSkillsLeveledUp().isEmpty());
	}

	@Test
	public void textMaxXp()
	{
		final int level = MAX_VIRT_LEVEL;
		statChanged(SKILL, MAX_SKILL_XP - 1, level);
		statChanged(SKILL, MAX_SKILL_XP, level);

		assertEquals(1, plugin.getSkillsLeveledUp().size());
		assertTrue(plugin.getSkillsLeveledUp().contains(SKILL));
	}

	@Test
	public void testFakeXpDropAtMaxXp()
	{
		statChanged(SKILL, MAX_SKILL_XP, MAX_VIRT_LEVEL);
		statChanged(SKILL, MAX_SKILL_XP, MAX_VIRT_LEVEL);

		assertEquals(0, plugin.getSkillsLeveledUp().size());
	}

	@Test
	public void testSkillBoostAtMaxXp()
	{
		statChanged(SKILL, MAX_SKILL_XP, MAX_VIRT_LEVEL);
		statChanged(SKILL, MAX_SKILL_XP, MAX_VIRT_LEVEL, MAX_REAL_LEVEL + 1);

		assertEquals(0, plugin.getSkillsLeveledUp().size());
	}

	@Test
	public void testWorldHopAtMaxXp()
	{
		statChanged(SKILL, MAX_SKILL_XP, MAX_VIRT_LEVEL);

		plugin.onGameStateChanged(HOPPING);
		plugin.onGameStateChanged(LOADING);
		plugin.onGameStateChanged(LOGGED_IN);

		statChanged(SKILL, MAX_SKILL_XP, MAX_VIRT_LEVEL);

		assertEquals(0, plugin.getSkillsLeveledUp().size());
	}

	@Test
	public void testLoadingGameStateBeforeVirtualLevelUp()
	{
		int level = MAX_REAL_LEVEL;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		plugin.onGameStateChanged(LOADING);
		plugin.onGameStateChanged(LOGGED_IN);

		level++;
		statChanged(SKILL, Experience.getXpForLevel(level), level);

		assertEquals(1, plugin.getSkillsLeveledUp().size());
		assertTrue(plugin.getSkillsLeveledUp().contains(SKILL));
	}

	private void statChanged(final Skill skill, final int xp, final int level)
	{
		final int constrainedLevel = Ints.constrainToRange(level, 0, MAX_REAL_LEVEL);
		statChanged(skill, xp, constrainedLevel, constrainedLevel);
	}

	private void statChanged(final Skill skill, final int xp, final int level, final int boostedLevel)
	{
		when(client.getSkillExperience(skill)).thenReturn(xp);
		plugin.onStatChanged(new StatChanged(skill, xp, level, boostedLevel));
	}
}

/*
 * Copyright (c) 2018 Magic fTail
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

final class ModelID
{
	static final int ANVIL = 1251;
	static final int WILLOW_TREE = 1570;
	static final int SLAYER_SKILL_MODEL = 1733;
	static final int FIREMAKING_SKILL_MODEL = 2260;
	static final int STEEL_KITESHIELD = 2339;
	static final int PURE_ESSENCE = 2349;
	static final int RAW_TUNA = 2355;
	static final int CLEAN_HERB = 2364;
	static final int HAMMER = 2376;
	static final int BLUE_WIZARD_HAT = 2483;
	static final int CHISEL = 2489;
	static final int HIGHWAYMAN_MASK = 2500;
	static final int STEEL_PICKAXE = 2529;
	static final int SHORTBOW = 2562;
	static final int STEEL_LONGSWORD = 2602;
	static final int STEEL_SWORD = 2604;
	static final int STEEL_ARROW = 2711;
	static final int PRAYER_SKILL_MODEL = 3325;
	static final int STRENGTH_SKILL_MODEL = 3327;
	static final int AGILITY_SKILL_MODEL = 3328;
	static final int HEARTH = 3326;
	static final int WATERING_CAN = 7331;
	static final int SAW = 12309;
	static final int FOOTPRINT = 19980;
	static final int COOKING_SKILL_MODEL = 27611;
}

/*
 * Copyright (c) 2018, Magic fTail
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.List;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Experience;
import net.runelite.api.FontID;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.JavaScriptCallback;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetPositionMode;
import net.runelite.api.widgets.WidgetSizeMode;
import net.runelite.api.widgets.WidgetTextAlignment;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.game.chatbox.ChatboxInput;
import net.runelite.client.input.KeyListener;

class VirtualLevelUpsInterfaceInput extends ChatboxInput implements KeyListener
{
	private static final int X_OFFSET = 13;
	private static final int Y_OFFSET = 16;

	private final VirtualLevelUpsPlugin plugin;
	private final Skill skill;

	@Getter
	private boolean closeMessage;

	VirtualLevelUpsInterfaceInput(VirtualLevelUpsPlugin plugin, Skill skill)
	{
		this.plugin = plugin;
		this.skill = skill;
	}

	@Override
	public void open()
	{
		// TODO: add sound event for level-up (need to find sound IDs)
		plugin.getClientThread().invoke(this::setFireworksGraphic);

		final Widget chatboxContainer = plugin.getChatboxPanelManager().getContainerWidget();

		final String skillName = skill.getName();
		final int skillExperience = plugin.getClient().getSkillExperience(skill);
		final int skillLevel = Experience.getLevelForXp(skillExperience);
		final List<SkillModel> skillModels = SkillModel.getSKILL_MODELS(skill);
		final String prefix = (skill == Skill.AGILITY || skill == Skill.ATTACK) ? "an " : "a ";

		final Widget levelUpLevel = chatboxContainer.createChild(-1, WidgetType.TEXT);
		final Widget levelUpText = chatboxContainer.createChild(-1, WidgetType.TEXT);
		final Widget levelUpContinue = chatboxContainer.createChild(-1, WidgetType.TEXT);

		final String levelUpLevelString;
		if (skillExperience == Experience.MAX_SKILL_XP)
		{
			levelUpLevelString = "Congratulations, you just maxed your " + skillName + " skill.";
		}
		else
		{
			levelUpLevelString = "Congratulations, you just advanced " + prefix + skillName + " level.";
		}
		levelUpLevel.setText(levelUpLevelString);
		levelUpLevel.setTextColor(Color.BLACK.getRGB());
		levelUpLevel.setFontId(FontID.QUILL_8);
		levelUpLevel.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpLevel.setOriginalX(73 + X_OFFSET);
		levelUpLevel.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpLevel.setOriginalY(15 + Y_OFFSET);
		levelUpLevel.setOriginalWidth(390);
		levelUpLevel.setOriginalHeight(30);
		levelUpLevel.setXTextAlignment(WidgetTextAlignment.CENTER);
		levelUpLevel.setYTextAlignment(WidgetTextAlignment.LEFT);
		levelUpLevel.setWidthMode(WidgetSizeMode.ABSOLUTE);
		levelUpLevel.revalidate();

		final String levelUpTextString;
		if (skillExperience == Experience.MAX_SKILL_XP)
		{
			levelUpTextString = "You have reached maximum experience in " + skillName;
		}
		else
		{
			levelUpTextString = (skill == Skill.HITPOINTS
				? "Your Hitpoints are now " + skillLevel
				: "Your " + skillName + " level is now " + skillLevel)
				+ '.';
		}
		levelUpText.setText(levelUpTextString);
		levelUpText.setFontId(FontID.QUILL_8);
		levelUpText.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpText.setOriginalX(73 + X_OFFSET);
		levelUpText.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpText.setOriginalY(44 + Y_OFFSET);
		levelUpText.setOriginalWidth(390);
		levelUpText.setOriginalHeight(30);
		levelUpText.setXTextAlignment(WidgetTextAlignment.CENTER);
		levelUpText.setYTextAlignment(WidgetTextAlignment.LEFT);
		levelUpText.setWidthMode(WidgetSizeMode.ABSOLUTE);
		levelUpText.revalidate();

		levelUpContinue.setText("Click here to continue");
		levelUpContinue.setTextColor(Color.BLUE.getRGB());
		levelUpContinue.setFontId(FontID.QUILL_8);
		levelUpContinue.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpContinue.setOriginalX(73 + X_OFFSET);
		levelUpContinue.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpContinue.setOriginalY(74 + Y_OFFSET);
		levelUpContinue.setOriginalWidth(390);
		levelUpContinue.setOriginalHeight(17);
		levelUpContinue.setXTextAlignment(WidgetTextAlignment.CENTER);
		levelUpContinue.setYTextAlignment(WidgetTextAlignment.LEFT);
		levelUpContinue.setWidthMode(WidgetSizeMode.ABSOLUTE);
		levelUpContinue.setAction(0, "Continue");
		levelUpContinue.setOnOpListener((JavaScriptCallback) ev -> triggerCloseViaMessage());
		levelUpContinue.setOnMouseOverListener((JavaScriptCallback) ev -> levelUpContinue.setTextColor(Color.WHITE.getRGB()));
		levelUpContinue.setOnMouseLeaveListener((JavaScriptCallback) ev -> levelUpContinue.setTextColor(Color.BLUE.getRGB()));
		levelUpContinue.setHasListener(true);
		levelUpContinue.revalidate();

		for (SkillModel skillModel : skillModels)
		{
			buildWidgetModel(chatboxContainer, skillModel);
		}

		plugin.takeScreenshot(skill);

		plugin.getChatMessageManager().queue(QueuedMessage.builder()
			.type(ChatMessageType.GAMEMESSAGE)
			.runeLiteFormattedMessage(skillExperience == Experience.MAX_SKILL_XP
				? "Congratulations, you've just reached max experience in " + skillName + '!'
				: "Congratulations, you've just advanced your " + skillName + " level. You are now virtual level " + skillLevel + '.')
			.build());
	}

	@Override
	public void keyTyped(KeyEvent e)
	{
		if (e.getKeyChar() != ' ')
		{
			return;
		}

		triggerCloseViaMessage();

		e.consume();
	}

	@Override
	public void keyPressed(KeyEvent e)
	{
	}

	@Override
	public void keyReleased(KeyEvent e)
	{
	}

	void closeIfTriggered()
	{
		if (closeMessage && plugin.getChatboxPanelManager().getCurrentInput() == this)
		{
			plugin.getChatboxPanelManager().close();
		}
	}

	void triggerClose()
	{
		closeMessage = true;
	}

	private void triggerCloseViaMessage()
	{
		final Widget levelUpContinue = plugin.getClient().getWidget(ComponentID.CHATBOX_CONTAINER).getChild(2);
		levelUpContinue.setText("Please wait...");

		closeMessage = true;
	}

	private static void buildWidgetModel(Widget chatboxContainer, SkillModel model)
	{
		final Widget levelUpModel = chatboxContainer.createChild(-1, WidgetType.MODEL);

		levelUpModel.setModelId(model.getModelID());
		levelUpModel.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpModel.setOriginalX(model.getOriginalX() + X_OFFSET);
		levelUpModel.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		levelUpModel.setOriginalY(model.getOriginalY() + Y_OFFSET);
		levelUpModel.setOriginalWidth(model.getIconWidth());
		levelUpModel.setOriginalHeight(model.getIconHeight());
		levelUpModel.setRotationX(model.getRotationX());
		levelUpModel.setRotationY(model.getRotationY());
		levelUpModel.setRotationZ(model.getRotationZ());
		levelUpModel.setModelZoom(model.getModelZoom());
		levelUpModel.revalidate();
	}

	private void setFireworksGraphic()
	{
		final Player localPlayer = plugin.getClient().getLocalPlayer();
		if (localPlayer == null)
		{
			return;
		}

		final int fireworksGraphic = plugin.getConfig().showFireworks().getGraphicId();

		if (fireworksGraphic == -1)
		{
			return;
		}

		localPlayer.createSpotAnim(0, fireworksGraphic, 0, 0);
	}
}

/*
 * Copyright (c) 2018, Magic fTail
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.SpriteID;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageCapture;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
	name = "Virtual Level Ups",
	description = "Display level up dialogs upon reaching virtual level up milestones",
	tags = {"skill", "experience"}
)
@Slf4j
public class VirtualLevelUpsPlugin extends Plugin
{
	@Getter(AccessLevel.PACKAGE)
	@Inject
	private Client client;

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ClientThread clientThread;

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ChatboxPanelManager chatboxPanelManager;

	@Inject
	private DrawManager drawManager;

	@Inject
	private ImageCapture imageCapture;

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private VirtualLevelUpsConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private VirtualLevelUpsOverlay overlay;

	@Inject
	private SpriteManager spriteManager;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private ConfigManager configManager;

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ChatMessageManager chatMessageManager;

	@Getter(AccessLevel.PACKAGE)
	private BufferedImage reportButton;

	private final Map<Skill, Integer> previousXpMap = new EnumMap<>(Skill.class);
	@VisibleForTesting
	@Getter(AccessLevel.PACKAGE)
	private final List<Skill> skillsLeveledUp = new ArrayList<>();

	private VirtualLevelUpsInterfaceInput input;

	@Provides
	VirtualLevelUpsConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VirtualLevelUpsConfig.class);
	}

	@Override
	public void startUp()
	{
		clientThread.invoke(this::initializePreviousXpMap);

		overlayManager.add(overlay);
		spriteManager.getSpriteAsync(SpriteID.CHATBOX_REPORT_BUTTON, 0, s -> reportButton = s);
	}

	@Override
	public void shutDown()
	{
		overlayManager.remove(overlay);

		if (input != null && chatboxPanelManager.getCurrentInput() == input)
		{
			chatboxPanelManager.close();
		}
		previousXpMap.clear();
		skillsLeveledUp.clear();
		input = null;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch(event.getGameState())
		{
			case LOGIN_SCREEN:
			case HOPPING:
			case LOGGING_IN:
			case LOGIN_SCREEN_AUTHENTICATOR:
				previousXpMap.clear();
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged event)
	{
		final Skill skill = event.getSkill();

		final int xpAfter = client.getSkillExperience(skill);
		final int levelAfter = Experience.getLevelForXp(xpAfter);

		final int xpBefore = previousXpMap.getOrDefault(skill, -1);
		final int levelBefore = xpBefore == -1 ? -1 : Experience.getLevelForXp(xpBefore);

		previousXpMap.put(skill, xpAfter);

		// Do not proceed if any of the following are true:
		//  * xpBefore == -1               (don't fire when first setting new known value)
		//  * xpBefore >= xpAfter          (do not allow 200m -> 200m exp drops)
		//  * levelAfter <= MAX_REAL_LEVEL (we don't care about real level ups)
		//    * xpAfter != 200m _and_      (unless we're reaching 200m exp for the first time...)
		//    * levelBefore >= levelAfter  (stop if if we're not actually reaching a virtual level)
		if (xpBefore == -1 || levelAfter <= Experience.MAX_REAL_LEVEL || xpAfter <= xpBefore
			|| (xpAfter != Experience.MAX_SKILL_XP && levelBefore >= levelAfter))
		{
			return;
		}

		skillsLeveledUp.add(skill);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (input != null)
		{
			input.triggerClose();
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (input != null)
		{
			input.closeIfTriggered();
		}

		if (skillsLeveledUp.isEmpty() || !chatboxPanelManager.getContainerWidget().isHidden())
		{
			return;
		}

		final Skill skill = skillsLeveledUp.remove(0);

		input = new VirtualLevelUpsInterfaceInput(this, skill);
		chatboxPanelManager.openInput(input);
	}

	private void initializePreviousXpMap()
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			previousXpMap.clear();
		}
		else
		{
			for (final Skill skill : Skill.values())
			{
				previousXpMap.put(skill, client.getSkillExperience(skill));
			}
		}
	}

	void takeScreenshot(final Skill skill)
	{
		if (!config.takeScreenshots())
		{
			return;
		}

		final int skillExperience = client.getSkillExperience(skill);

		final String skillLevel;
		if (skillExperience == Experience.MAX_SKILL_XP)
		{
			skillLevel = "MAX_EXP";
		}
		else
		{
			skillLevel = Experience.getLevelForXp(skillExperience) + "";
		}

		final String fileName = skill.getName() + '(' + skillLevel + ')';
		final String subDir = "Levels";

		Consumer<Image> imageCallback = (img) ->
		{
			// This callback is on the game thread, move to the executor thread
			executor.submit(() -> takeScreenshot(fileName, subDir, img));
		};

		if (configManager.getConfiguration("screenshot", "displayDate").equals("true"))
		{
			overlay.queueForTimestamp(imageCallback);
		}
		else
		{
			drawManager.requestNextFrameListener(imageCallback);
		}
	}

	void takeScreenshot(String fileName, String subDir, Image image)
	{
		final boolean includeFrame = configManager.getConfiguration("screenshot", "includeFrame").equals("true");

		final BufferedImage screenshot;
		if (!includeFrame)
		{
			screenshot = ImageUtil.bufferedImageFromImage(image);
		}
		else
		{
			screenshot = imageCapture.addClientFrame(image);
		}

		imageCapture.saveScreenshot(
			screenshot,
			fileName,
			subDir,
			configManager.getConfiguration("screenshot", "notifyWhenTaken").equals("true"),
			false);
	}
}

/*
 * Copyright (c) 2018, Magic fTail
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import java.util.List;
import lombok.Getter;
import net.runelite.api.Skill;

@Getter
enum SkillModel
{
	CONSTRUCTION1(Skill.CONSTRUCTION, ModelID.HAMMER, 10, 14, 669, 0, 15, 329),
	CONSTRUCTION2(Skill.CONSTRUCTION, ModelID.SAW, 11, 14, 615, 0, 111, 451),
	COOKING(Skill.COOKING, ModelID.COOKING_SKILL_MODEL, 31, 59, 169, 0, 1593, 963),
	CRAFTING1(Skill.CRAFTING, ModelID.HAMMER, 30, 24, 418, 0, 14, 496),
	CRAFTING2(Skill.CRAFTING, ModelID.CHISEL, 39, 45, 353, 0, 18, 400),
	DEFENCE(Skill.DEFENCE, ModelID.STEEL_KITESHIELD, 34, 37, 337, 0, 1074, 598),
	FARMING(Skill.FARMING, ModelID.WATERING_CAN, 31, 52, 118, 0, 1278, 451),
	FIREMAKING(Skill.FIREMAKING, ModelID.FIREMAKING_SKILL_MODEL, 29, 55, 115, 0, 1689, 771),
	FISHING(Skill.FISHING, ModelID.RAW_TUNA, 33, 30, 351, 0, 1865, 517),
	FLETCHING1(Skill.FLETCHING, ModelID.STEEL_ARROW, 43, 19, 254, 0, 1257, 408),
	FLETCHING2(Skill.FLETCHING, ModelID.STEEL_ARROW, 46, 44, 223, 0, 177, 444),
	HERBLORE(Skill.HERBLORE, ModelID.CLEAN_HERB, 20, 35, 550, 0, 2024, 344),
	HITPOINTS(Skill.HITPOINTS, ModelID.HEARTH, 35, 58, 538, 0, 0, 250),
	MAGIC(Skill.MAGIC, ModelID.BLUE_WIZARD_HAT, 29, 50, 131, 0, 1913, 344),
	MINING(Skill.MINING, ModelID.STEEL_PICKAXE, 38, 33, 292, 0, 1166, 413),
	PRAYER(Skill.PRAYER, ModelID.PRAYER_SKILL_MODEL, 29, 27, 582, 0, 504, 505),
	RANGED1(Skill.RANGED, ModelID.STEEL_ARROW, 28, 34, 206, 0, 195, 405),
	RANGED2(Skill.RANGED, ModelID.SHORTBOW, 42, 17, 422, 0, 1618, 397),
	RUNECRAFT(Skill.RUNECRAFT, ModelID.PURE_ESSENCE, 35, 38, 242, 0, 1979, 328),
	SLAYER(Skill.SLAYER, ModelID.SLAYER_SKILL_MODEL, 34, 60, 221, 0, 1944, 649),
	SMITHING(Skill.SMITHING, ModelID.ANVIL, 34, 53, 97, 0, 1868, 716),
	STRENGTH(Skill.STRENGTH, ModelID.STRENGTH_SKILL_MODEL, 35, 23, 512, 0, 14, 631),
	AGILITY(Skill.AGILITY, ModelID.AGILITY_SKILL_MODEL, 29, 29, 533, 0, 2040, 685),
	THIEVING(Skill.THIEVING, ModelID.HIGHWAYMAN_MASK, 42, 31, 366, 0, 55, 155),
	WOODCUTTING(Skill.WOODCUTTING, ModelID.WILLOW_TREE, 20, 69, 116, 0, 1978, 1800),
	ATTACK1(Skill.ATTACK, ModelID.STEEL_SWORD, 65, 38, 234, 0, 148, 444),
	ATTACK2(Skill.ATTACK, ModelID.STEEL_LONGSWORD, 27, 29, 198, 0, 1419, 330),
	HUNTER(Skill.HUNTER, ModelID.FOOTPRINT, 45, 48, 512, 0, 0, 1000);

	private static final ListMultimap<Skill, SkillModel> SKILL_MODELS =  ArrayListMultimap.create();

	private final Skill skill;
	private final int modelID;
	private final int originalX;
	private final int originalY;
	private final int rotationX;
	private final int rotationY;
	private final int rotationZ;
	private final int modelZoom;
	private final int iconWidth;
	private final int iconHeight;

	SkillModel(Skill skill, int modelID, int originalX, int originalY, int rotationX, int rotationY, int rotationZ, int modelZoom)
	{
		this.skill = skill;
		this.modelID = modelID;
		this.originalX = originalX;
		this.originalY = originalY;
		this.rotationX = rotationX;
		this.rotationY = rotationY;
		this.rotationZ = rotationZ;
		this.modelZoom = modelZoom;
		this.iconWidth = skill == Skill.CONSTRUCTION ? 49 : 32;
		this.iconHeight = skill == Skill.CONSTRUCTION ? 61 : 32;
	}

	static
	{
		for (SkillModel skillModel : values())
		{
			SKILL_MODELS.put(skillModel.skill, skillModel);
		}
	}

	public static List<SkillModel> getSKILL_MODELS(Skill skill)
	{
		return SKILL_MODELS.get(skill);
	}
}

/*
 * Copyright (c) 2018, Lotto <https://github.com/devLotto>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.MainBufferProvider;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

class VirtualLevelUpsOverlay extends Overlay
{
	private static final DateFormat DATE_FORMAT = new SimpleDateFormat("MMM. dd, yyyy");
	private static final int REPORT_BUTTON_X_OFFSET = 437;

	private final Client client;
	private final DrawManager drawManager;
	private final VirtualLevelUpsPlugin plugin;

	private final Queue<Consumer<Image>> consumers = new ConcurrentLinkedQueue<>();

	@Inject
	private VirtualLevelUpsOverlay(Client client, DrawManager drawManager, VirtualLevelUpsPlugin plugin)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGH);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		this.client = client;
		this.drawManager = drawManager;
		this.plugin = plugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (consumers.isEmpty())
		{
			return null;
		}

		final MainBufferProvider bufferProvider = (MainBufferProvider) client.getBufferProvider();
		final int imageHeight = ((BufferedImage) bufferProvider.getImage()).getHeight();
		final int y = imageHeight - plugin.getReportButton().getHeight() - 1;

		graphics.drawImage(plugin.getReportButton(), REPORT_BUTTON_X_OFFSET, y, null);

		graphics.setFont(FontManager.getRunescapeSmallFont());
		FontMetrics fontMetrics = graphics.getFontMetrics();

		String date = DATE_FORMAT.format(new Date());
		final int dateWidth = fontMetrics.stringWidth(date);
		final int dateHeight = fontMetrics.getHeight();

		final int textX = REPORT_BUTTON_X_OFFSET + plugin.getReportButton().getWidth() / 2 - dateWidth / 2;
		final int textY = y + plugin.getReportButton().getHeight() / 2 + dateHeight / 2;

		graphics.setColor(Color.BLACK);
		graphics.drawString(date, textX + 1, textY + 1);

		graphics.setColor(Color.WHITE);
		graphics.drawString(date, textX, textY);

		// Request the queued screenshots to be taken,
		// now that the timestamp is visible.
		Consumer<Image> consumer;
		while ((consumer = consumers.poll()) != null)
		{
			drawManager.requestNextFrameListener(consumer);
		}

		return null;
	}

	void queueForTimestamp(Consumer<Image> screenshotConsumer)
	{
		if (plugin.getReportButton() == null)
		{
			return;
		}

		consumers.add(screenshotConsumer);
	}
}

/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum LevelUpFireworks
{
	NONE("None", -1),
	NORMAL("Normal", 199),
	NINETY_NINE("99", 1388),
	MAX_TOTAL("Max total", 1389),
	;

	private final String name;
	private final int graphicId;

	@Override
	public String toString()
	{
		return getName();
	}
}

/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.virtuallevelups;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("virtuallevelups")
public interface VirtualLevelUpsConfig extends Config
{
	@ConfigItem(
		keyName = "takeScreenshots",
		name = "Take screenshots",
		description = "Capture a screenshot of the client (similar to the Screenshot plugin) when reaching a new virtual level"
	)
	default boolean takeScreenshots()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showFireworks",
		name = "Level-up fireworks style",
		description = "Type of fireworks which will be triggered when reaching a new virtual level"
	)
	default LevelUpFireworks showFireworks()
	{
		return LevelUpFireworks.NINETY_NINE;
	}
}

