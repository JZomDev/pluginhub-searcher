package com.bram91.specregen;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SpecRegenTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SpecRegenTimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.bram91.specregen;

import java.util.HashMap;

public class Weapons {
    public static HashMap<String, Integer> getWeapons()
    {
        HashMap<String, Integer> weapons = new HashMap<String, Integer>();
        weapons.put("dragon dagger", 25);
        weapons.put("dragon scimitar", 55);
        weapons.put("dragon longsword", 25);
        weapons.put("dragon mace", 25);
        weapons.put("dragon battleaxe", 100);
        weapons.put("dragon warhammer", 50);
        weapons.put("dragon halberd", 30);
        weapons.put("dragon spear", 25);
        weapons.put("dragon 2h sword", 60);
        weapons.put("dragon pickaxe", 100);
        weapons.put("infernal pickaxe", 100);
        weapons.put("3rd age pickaxe", 100);
        weapons.put("crystal pickaxe", 100);
        weapons.put("dragon axe", 100);
        weapons.put("infernal axe", 100);
        weapons.put("3rd age axe", 100);
        weapons.put("crystal axe", 100);
        weapons.put("dragon harpoon", 100);
        weapons.put("infernal harpoon", 100);
        weapons.put("crystal harpoon", 100);
        weapons.put("dragon claws", 50);
        weapons.put("dragon sword", 40);
        weapons.put("dragon hasta", 5);
        weapons.put("armadyl godsword", 50);
        weapons.put("bandos godsword", 50);
        weapons.put("saradomin godsword", 50);
        weapons.put("zamorak godsword", 50);
        weapons.put("abyssal bludgeon", 50);
        weapons.put("abyssal dagger", 50);
        weapons.put("abyssal tentacle", 50);
        weapons.put("abyssal whip", 50);
        weapons.put("ancient mace", 100);
        weapons.put("barrelchest anchor", 50);
        weapons.put("bone dagger", 75);
        weapons.put("brine sabre", 75);
        weapons.put("crystal halberd", 30);
        weapons.put("darklight", 50);
        weapons.put("arclight", 50);
        weapons.put("dinh's bulwark", 50);
        weapons.put("excalibur", 100);
        weapons.put("granite hammer", 60);
        weapons.put("granite maul", 60);
        weapons.put("rune claws", 25);
        weapons.put("saradomin sword", 100);
        weapons.put("saradomin's blessed sword", 65);
        weapons.put("statius's warhammer", 35);
        weapons.put("vesta's longsword", 25);
        weapons.put("vesta's spear", 50);
        weapons.put("zamorakian spear", 25);
        weapons.put("zamorakian hasta", 25);
        weapons.put("armadyl crossbow", 40);
        weapons.put("dark bow", 55);
        weapons.put("dorgeshuun crossbow", 75);
        weapons.put("dragon crossbow", 60);
        weapons.put("dragon thrownaxe", 25);
        weapons.put("dragon knife", 25);
        weapons.put("light ballista", 65);
        weapons.put("heave ballista", 65);
        weapons.put("magic shortbow", 55);
        weapons.put("magic shortbow (i)", 50);
        weapons.put("magic longbow", 35);
        weapons.put("magic comp bow", 35);
        weapons.put("morrigan's javelin", 50);
        weapons.put("morrigan's throwing axe", 50);
        weapons.put("rune thrownaxe", 10);
        weapons.put("seercull", 100);
        weapons.put("toxic blowpipe", 50);
        weapons.put("staff of the dead", 100);
        weapons.put("toxic staff of the dead", 100);
        weapons.put("staff of light", 100);
        weapons.put("staff of balance", 100);
        weapons.put("rod of invandis", 10);
        weapons.put("ivandis flail", 10);
        weapons.put("dawnbringer", 35);
        weapons.put("blisterwood flail", 10);
        weapons.put("eldritch nightmare staff", 75);
        weapons.put("volatile nightmare staff", 55);
        return weapons;
    }
 }

package com.bram91.specregen;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import javax.inject.Inject;
import java.awt.*;
import java.util.Arrays;
import java.util.HashMap;

public class SpecRegenTimerOverlay extends Overlay {
    private final Client client;
    private SpecRegenTimerPlugin plugin;
    private final TooltipManager tooltipManager;
    private final HashMap<String, Integer> weapons;

    @Inject
    private ItemManager itemManager;
    private double currentSpec;
    private int specCount;
    private int maxSpecs;
    private int remainingMinutes;
    private String remainingSecondsString;

    @Inject
    public SpecRegenTimerOverlay(Client client, SpecRegenTimerPlugin plugin, TooltipManager tooltipManager)
    {
        this.tooltipManager = tooltipManager;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);

        this.client = client;
        this.plugin = plugin;
        this.weapons = Weapons.getWeapons();
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        final Widget widget = client.getWidget(WidgetInfo.MINIMAP_SPEC_ORB);
        if(widget == null)
        {
            return null;
        }
        final Rectangle bounds = widget.getBounds();
        final Point mousePosition = client.getMouseCanvasPosition();
        if (bounds.contains(mousePosition.getX(), mousePosition.getY()))
        {
            String tooltip;
            if(currentSpec==100 || specCount == maxSpecs)
            {
                tooltip = "Available special attacks: " + specCount;
            }
            else{
                tooltip = "Time Remaining till next spec: " + remainingMinutes + ":" + remainingSecondsString + "</br>" +
                        "Available special attacks: " + specCount;
            }
            tooltipManager.add(new Tooltip(tooltip));

        }
        return null;
    }

    public void updateSpec(){
        //0.2% spec restore per tick
        if(client.getItemContainer(InventoryID.EQUIPMENT)==null)
        {
            return;
        }
        currentSpec = Math.floor((client.getVar(VarPlayer.SPECIAL_ATTACK_PERCENT)/10)+(plugin.getSpecialPercentage()*10));
        int specTarget = 100;
        final Item[] items = client.getItemContainer(InventoryID.EQUIPMENT).getItems();
        if(items.length<=EquipmentInventorySlot.WEAPON.getSlotIdx())
        {
            return;
        }
        final Item weapon = items[EquipmentInventorySlot.WEAPON.getSlotIdx()];
        final ItemComposition weaponComp = itemManager.getItemComposition(weapon.getId());

        String weaponName;
        //magic shortbow(i) had to be special
        if(weaponComp.getName().toLowerCase().equals("magic shortbow (i)"))
        {
            weaponName = "magic shortbow (i)";
        }
        else
        {
            weaponName = weaponComp.getName().replaceAll("\\([^()]*\\)","").toLowerCase();
        }

        if(weapons.containsKey(weaponName))
        {
            if(weaponName.equals("granite maul") && Arrays.asList(24225,24226,24227,24228).contains(weaponComp.getId()))
            {
                specTarget = 50;
            }
            else
            {
                specTarget = weapons.get(weaponName);
            }
        }
        specCount = (int) (currentSpec / specTarget);

        double remainingSpec = specTarget-(currentSpec%specTarget);

        int remainingTicks = (int) (remainingSpec/0.2);
        int remainingTime = (int) (remainingTicks*0.6);
        int remainingSeconds = remainingTime % 60;
        remainingMinutes = (int) Math.floor(remainingTime/60);

        remainingSecondsString = remainingSeconds+"";
        if(remainingSeconds<10)
        {
            remainingSecondsString = "0"+remainingSeconds;
        }

        maxSpecs = (int)Math.floor(100/specTarget);
    }
}

package com.bram91.specregen;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.VarPlayer;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Spec Regen Timer",
	description = "Shows remaining time till next special attack availability and the amount available"
)
public class SpecRegenTimerPlugin extends Plugin
{
	@Getter
	private double specialPercentage;

	private int ticksSinceSpecRegen;
	private static final int SPEC_REGEN_TICKS = 50;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;



	@Inject
	private SpecRegenTimerOverlay overlay;
	@Override
	protected void startUp() throws Exception
	{
		log.info("Spec Regen Timer started!");
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		log.info("Spec Regen Timer stopped!");
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (client.getVar(VarPlayer.SPECIAL_ATTACK_PERCENT) == 1000)
		{
			// The recharge doesn't tick when at 100%
			ticksSinceSpecRegen = 0;
		}
		else
		{
			ticksSinceSpecRegen = (ticksSinceSpecRegen + 1) % SPEC_REGEN_TICKS;
		}
		specialPercentage = ticksSinceSpecRegen / (double) SPEC_REGEN_TICKS;
		overlay.updateSpec();
	}
}

