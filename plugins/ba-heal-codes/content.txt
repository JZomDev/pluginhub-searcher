package dev.evaan;

import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

public class HealCodeOverlay extends OverlayPanel {
    private final Client client;
    private final BAHealCodesPlugin plugin;
    private final BAHealCodesConfig config;

    @Inject
    HealCodeOverlay(Client client, BAHealCodesPlugin plugin, BAHealCodesConfig config) {
        setPosition(OverlayPosition.BOTTOM_LEFT);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();
        panelComponent.setPreferredSize(new Dimension(150,0));

        if (!plugin.hasHealerHorn) return null;

        switch (plugin.wave) {
            case 4:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 4 - " + config.wave4().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave4().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            case 5:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 5 - " + config.wave5().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave5().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            case 6:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 6 - " + config.wave6().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave6().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            case 7:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 7 - " + config.wave7().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave7().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            case 8:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 8 - " + config.wave8().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave8().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            case 9:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 9 - " + config.wave9().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave9().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            case 10:
                panelComponent.getChildren().add(TitleComponent.builder().text("Wave 10 - " + config.wave10().getName()).color(ColorScheme.BRAND_ORANGE).build());
                for (LineComponent line : config.wave10().getLines()) {
                    panelComponent.getChildren().add(line);
                }
                break;
            default:
                return null;
        }

        return panelComponent.render(graphics);
    }
}

package dev.evaan;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.ui.overlay.components.LineComponent;

public interface Waves {
    private static LineComponent[] parseLines(String input) {
        return input.lines()
                .map(line -> LineComponent.builder().left(line).build())
                .toArray(LineComponent[]::new);
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave4 {
        REGULAR("Regular", parseLines("2-4-2(27) //\n0-0-0-8")),
        ONEXOS("1x OS", parseLines("2-5-4 //\n0-0-0-7"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave5 {
        REGULAR("Regular", parseLines("1-3(18)-2-2(27) //\n0-0-0-0-8")),
        ONEXOS("1x OS", parseLines("2-5-2(21)-3(30) //\n0-0-0-0-7")),
        CFIVE("C5", parseLines("Alch horn, 6x os\n3(22)[43]-7-4(21)-6-8\nIf 12s not on Coll:\n8-2(21)-4(21)-6-8"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave6 {
        REGULAR("Regular", parseLines("2/3(18)-4(24)-1-1 //\nRestock 3x os + 1x reg\n0-0-1-1-X-X")),
        ONEXOS("1x OS", parseLines("3(18)-5-2(21)-2 //\nRestock 3x + 1x reg\n0-0-0-1-9-11\n")),
        TWOXOS("2x OS", parseLines("3(18)-5-3-4 //\nRestock 3x os + 1x reg\n0-0-10-12\n"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave7 {
        REGULAR("Regular", parseLines("2-5(27)-1-1 //\n1(33)-0-1(33)-1-4-1\nRestock 13/13 or 1x os //\n1-3-7")),
        TWOXOS("2x OS", parseLines("2(27)-6-6-1 //\nRestock 4x os\n0-0-0-1(39)-2-9-11"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave8 {
        REGULAR("Regular", parseLines("2-4(21)-1/2(27)-1 //\n1-1[42]-1/0-1-3(42)-1/2 //\nRestock\n0-0-0-0-6/5-X")),
        ONEXOS("1x OS", parseLines("1-9-1-1 //\n2-0-1-1(36)-2-1\nRestock 13/13 or 1-2x os //\n0-0-3-10")),
        TWOXOS("2x OS", parseLines("4(24)-9-1-1 //\n0-0-1-2(39)-1-1\nRestock 4x os + 1x reg\n0-0-3(51)-5(51)[57]-X"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave9 {
        REGULAR("Regular", parseLines("2(18)-4/5(18)-1-1 //\n1[54]-2/3-1(33)-1(42)-1-1-1 //\nRestock\n0-0-0-0-1[69]-2[69]-5[75]-X")),
        ONEXOS("1x OS", parseLines("2-8(21)-1-1 //\n1-0-1(33)-1(45)-2(45)-1-1 //\nRestock 4x os\n0-0-3-5-X")),
        BNINE("B9 (1x OS)", parseLines("9(27)-1-1-1 //\n0-1-1(42)-2[45](45)-1-1-1\nRestock 4x\n0-0-5-6-7[42]"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    public enum Wave10 {
        REGULAR("Regular", parseLines("2-4/5(27)-1-1 //\n1(33)-1/0-1(33)-1-4(51)-1\nRestock 13/13 or 2x os //\n1-3-7")),
        TWOXOS("2x OS", parseLines("3(25)-5(27)-6-1 //\n0-0-0-2 \nRestock 5x os\n0-8-8-10"));

        private final String name;
        private final LineComponent[] lines;

        @Override
        public String toString() {
            return name;
        }
    }
}

package dev.evaan;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("ba-heal-codes")
public interface BAHealCodesConfig extends Config
{
	@ConfigItem(
		keyName = "wave4",
		name = "Wave 04",
		description = "Configures which heal code to display in wave 4"
	)
	default Waves.Wave4 wave4()
	{
		return Waves.Wave4.REGULAR;
	}

	@ConfigItem(
			keyName = "wave5",
			name = "Wave 05",
			description = "Configures which heal code to display in wave 5"
	)
	default Waves.Wave5 wave5()
	{
		return Waves.Wave5.REGULAR;
	}

	@ConfigItem(
			keyName = "wave6",
			name = "Wave 06",
			description = "Configures which heal code to display in wave 6"
	)
	default Waves.Wave6 wave6()
	{
		return Waves.Wave6.REGULAR;
	}

	@ConfigItem(
			keyName = "wave7",
			name = "Wave 07",
			description = "Configures which heal code to display in wave 7"
	)
	default Waves.Wave7 wave7()
	{
		return Waves.Wave7.REGULAR;
	}

	@ConfigItem(
			keyName = "wave8",
			name = "Wave 08",
			description = "Configures which heal code to display in wave 8"
	)
	default Waves.Wave8 wave8()
	{
		return Waves.Wave8.REGULAR;
	}

	@ConfigItem(
			keyName = "wave9",
			name = "Wave 09",
			description = "Configures which heal code to display in wave 9"
	)
	default Waves.Wave9 wave9()
	{
		return Waves.Wave9.REGULAR;
	}

	@ConfigItem(
			keyName = "wave10",
			name = "Wave 10",
			description = "Configures which heal code to display in wave 10"
	)
	default Waves.Wave10 wave10()
	{
		return Waves.Wave10.REGULAR;
	}
}

package dev.evaan;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import org.apache.commons.lang3.ArrayUtils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "BA Heal Codes"
)
public class BAHealCodesPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private BAHealCodesConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private HealCodeOverlay healCodeOverlay;

	@Override
	public void startUp() {
		overlayManager.add(healCodeOverlay);
	}

	@Override
	public void shutDown() {
		overlayManager.remove(healCodeOverlay);
	}

	@Provides
	BAHealCodesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BAHealCodesConfig.class);
	}

	private static final Pattern wavePattern = Pattern.compile(".*---- Wave: (10|[1-9]) ----.*");

	public int wave = 0;
	public boolean hasHealerHorn = false;

	@Subscribe
	public void onGameTick(GameTick event) {
		if (wave != 0 && !ArrayUtils.contains(client.getMapRegions(), 7509) && !ArrayUtils.contains(client.getMapRegions(), 7508)) wave = 0;

		final ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
		if (itemContainer == null) {
			hasHealerHorn = false;
			return;
		}

		for (Item item : itemContainer.getItems()) {
			final int id = item.getId();
			if (id >= 10526 && id <= 10530) {
				hasHealerHorn = true;
				break;
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (event.getType() != ChatMessageType.GAMEMESSAGE) return;
		final Matcher waveMatcher = wavePattern.matcher(event.getMessage());
		if (waveMatcher.matches()) wave = Integer.parseInt(waveMatcher.group(1));
	}
}

package dev.evaan;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BAHealCodesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BAHealCodesPlugin.class);
		RuneLite.main(args);
	}
}
