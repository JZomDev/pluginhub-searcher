package com.aeimo.afkmovealert;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AfkAlertPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AfkAlertPlugin.class);
		RuneLite.main(args);
	}
}
package com.aeimo.afkmovealert;

import java.awt.Color;
import net.runelite.client.config.*;

@ConfigGroup("afkalert")
public interface AfkAlertConfig extends Config {
    int DEFAULT_AFK_DURATION_S = 5;
    int DEFAULT_GLOW_BREATHE_PERIOD_MS = 1_000;
    int DEFAULT_MAX_GLOW_BREATHE_INTENSITY = 100;
    Color DEFAULT_GLOW_COLOR = new Color(255, 0, 0);

    @ConfigItem(name = "AFK threshold", keyName = "afkDurationThreshold", description = "How long is the player idle before an AFK alert fires", position = 0)
    @Units(Units.SECONDS)
    default int afkDurationThreshold() {
        return DEFAULT_AFK_DURATION_S;
    }

    @ConfigItem(name = "AFK threshold (Bank)", keyName = "afkDurationThresholdBank", description = "How long is the player idle with the bank open before an AFK alert fires", position = 1)
    @Units(Units.SECONDS)
    default int afkDurationThresholdBank() {
        return DEFAULT_AFK_DURATION_S;
    }

    @ConfigItem(name = "Glow speed (ms)", keyName = "glowSpeedMs", description = "How long between cycles of min and max brightness of the glow effect", position = 2)
    @Units(Units.MILLISECONDS)
    default int glowSpeedMs() {
        return DEFAULT_GLOW_BREATHE_PERIOD_MS;
    }

    @ConfigItem(name = "Max glow intensity", keyName = "maxBreatheIntensityPercent", description = "Max intensity of glow effect (100% is opaque)", position = 3)
    @Units(Units.PERCENT)
    @Range(min = 10, max = 100)
    default int maxBreatheIntensityPercent() {
        return DEFAULT_MAX_GLOW_BREATHE_INTENSITY;
    }

    @Alpha
    @ConfigItem(
        position = 4,
        keyName = "glowColor",
        name = "Glow color",
        description = "The color of the glow effect"
    )
    default Color glowColor() {
        return DEFAULT_GLOW_COLOR;
    }
}

package com.aeimo.afkmovealert;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;

public class AfkAlertOverlay extends Overlay {
    private static final int MAX_BRIGHTNESS_ALPHA_LEVEL = 255;

    @Inject
    private AfkAlertPlugin plugin;

    @Inject
    private Client client;

    private boolean isRenderingAlertAnimation = false;

    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.playerIsAfk()) {
            Color glowColor = plugin.getGlowColor();
            graphics.setColor(new Color(
                    glowColor.getRed(),
                    glowColor.getGreen(),
                    glowColor.getBlue(),
                    getBreathingAlpha(plugin.getGlowBreathePeriod()))
            );

            graphics.fill(getGameWindowRectangle());
        } else {
            isRenderingAlertAnimation = false;
        }

        return null;
    }

    private Rectangle getGameWindowRectangle() {
        Dimension clientCanvasSize = client.getCanvas().getSize();
        Point clientCanvasLocation = client.getCanvas().getLocation();
        // Need to adjust rectangle position slightly to cover whole game window perfectly (x: -5, y: -20)
        Point adjustedLocation = new Point(clientCanvasLocation.x - 5, clientCanvasLocation.y - 20);

        return new Rectangle(adjustedLocation, clientCanvasSize);
    }

    private int getBreathingAlpha(int breathePeriodMillis) {
        double currentMillisOffset = System.currentTimeMillis() % breathePeriodMillis;
        double fractionCycleComplete = currentMillisOffset / breathePeriodMillis;

        int maxIntensityPc = plugin.getMaxBreatheIntensityPercent();
        double fractionAlpha = Math.sin(fractionCycleComplete * 2 * Math.PI);
        double fractionAlphaPositive = (fractionAlpha + 1) / 2;

        // This check forces the animation to start near the dimmest point of the wave (gives a fade-in effect)
        if (isRenderingAlertAnimation || fractionAlphaPositive < 0.025) {
            isRenderingAlertAnimation = true;
            return ((int) (fractionAlphaPositive * MAX_BRIGHTNESS_ALPHA_LEVEL * (maxIntensityPc / 100.0)));
        }
        return 0;
    }
}

package com.aeimo.afkmovealert;

import com.google.inject.Provides;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(name = "AFK Alerter (Movement only)", description = "Gives a visual indicator when your character stops moving", tags = {"afk", "runecrafting", "rc", "agil", "agility", "alert", "alerter"}, enabledByDefault = false)
public class AfkAlertPlugin extends Plugin {
    //== attributes ===================================================================================================================

    @Inject
    private AfkAlertConfig config;

    @Inject
    private AfkAlertOverlay overlay;

    @Inject
    private Client client;

    @Inject
    private OverlayManager overlayManager;

    private CachedSlidingWindow<LocalPoint> squaresLastStoodOn;

    //== setup =======================================================================================================================

    @Provides
    AfkAlertConfig getConfig(ConfigManager configManager) {
        return configManager.getConfig(AfkAlertConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        resetLocationHistory();
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
    }

    //== methods =====================================================================================================================

    public boolean playerIsAfk() {
        if (isBankInterfaceOpen()) {
            return squaresLastStoodOn.allEqual(afkDurationBankTicks());
        } else {
            return squaresLastStoodOn.allEqual(afkDurationTicks());
        }
    }

    public int getGlowBreathePeriod() {
        return config.glowSpeedMs();
    }

    public int getMaxBreatheIntensityPercent() {
        return config.maxBreatheIntensityPercent();
    }

    public Color getGlowColor() {
        return config.glowColor();
    }

    public int afkDurationTicks() {
        return secondsToTicksRoundNearest(config.afkDurationThreshold());
    }

    public int afkDurationBankTicks() {
        return secondsToTicksRoundNearest(config.afkDurationThresholdBank());
    }

    //== subscriptions ===============================================================================================================

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        resetLocationHistory();
    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        squaresLastStoodOn.push(client.getLocalPlayer().getLocalLocation());
    }

    //== helpers =====================================================================================================================

    private void resetLocationHistory() {
        squaresLastStoodOn = new CachedSlidingWindow<>(Math.max(afkDurationTicks(), afkDurationBankTicks()));
    }

    private boolean isBankInterfaceOpen() {
        Widget widgetBankTitleBar = this.client.getWidget(WidgetInfo.BANK_TITLE_BAR);
        Widget coxPublicChest = this.client.getWidget(550, 1);
        Widget coxPrivateChest = this.client.getWidget(271, 1);
        return !(
                (widgetBankTitleBar == null || widgetBankTitleBar.isHidden()) &&
                        (coxPublicChest == null || coxPublicChest.isHidden()) &&
                        (coxPrivateChest == null || coxPrivateChest.isHidden())
        );
    }

    private static int secondsToTicksRoundNearest(int ticks) {
        return (int) Math.round(ticks / 0.6);
    }

    private static class CachedSlidingWindow<T> {
        private final Object[] slidingWindowItems;

        private Map<Integer, Boolean> allEqualCachedResult = null;

        public CachedSlidingWindow(int size) {
            slidingWindowItems = new Object[size];
        }

        /**
         * Appends obj to the internal array.
         * obj takes the last (length-1) index position, while everything
         * else gets pushed towards index 0, and the previous occupier of
         * index 0 is evicted.
         *
         * @param obj The object being appended to the sliding window.
         */
        void push(T obj) {
            allEqualCachedResult = null;

            if (slidingWindowItems.length - 1 >= 0) {
                System.arraycopy(slidingWindowItems, 1, slidingWindowItems, 0, slidingWindowItems.length - 1);
            }
            slidingWindowItems[slidingWindowItems.length - 1] = obj;
        }

        boolean allEqual(int n) {
            if (allEqualCachedResult == null) {
                allEqualCachedResult = new HashMap<>();
            }
            return allEqualCachedResult.computeIfAbsent(n, this::lastNEqual);
        }

        private Boolean lastNEqual(int n) {
            if (n > slidingWindowItems.length) {
                throw new RuntimeException(String.format(
                        "lastNEqual called with n=%d, slidingWindowItems.length=%d", n, slidingWindowItems.length));
            }

            // End on [endIndex+1], as we check backwards [i-1] (so last comparison is [endIndex+1] vs [endIndex]).
            int endIndex = slidingWindowItems.length - n;
            for (int i = slidingWindowItems.length - 1; i >= endIndex + 1; i--) {
                if (!Objects.equals(slidingWindowItems[i], slidingWindowItems[i - 1])) {
                    return false;
                }
            }
            return true;
        }
    }
}

