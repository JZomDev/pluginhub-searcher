package com.cwjoshuak;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AttackTypesTests
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AttackTypesPlugin.class);
		RuneLite.main(args);
	}
}

package com.cwjoshuak;

import com.google.common.base.Preconditions;
import lombok.Getter;
// https://github.com/Joshua-F/cs2-scripts/blob/master/scripts/%5Bclientscript%2Ccombat_interface_setup%5D.cs2

enum WeaponAttackType {
	UNARMED(0, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// AXE
	TYPE_1(1, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// BLUNT
	TYPE_2(2, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// BOW
	TYPE_3(3, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	// CLAW
	TYPE_4(4, AttackType.SLASH, AttackType.SLASH, AttackType.STAB, AttackType.SLASH),
	// CROSSBOW
	TYPE_5(5, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	//SALAMANDER
	TYPE_6(6, AttackType.SLASH, AttackType.RANGED, AttackType.MAGIC, null),
	// CHINCHOMPA
	TYPE_7(7, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	// GUN
	TYPE_8(8, AttackType.NONE, AttackType.CRUSH, null, null),
	// SLASH SWORD
	TYPE_9(9, AttackType.SLASH, AttackType.SLASH, AttackType.STAB, AttackType.SLASH),
	// TWO HANDED SWORD
	TYPE_10(10, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// PICKAXE
	TYPE_11(11, AttackType.STAB, AttackType.STAB, AttackType.CRUSH, AttackType.STAB),
	// POLEARM
	TYPE_12(12, AttackType.STAB, AttackType.SLASH, null, AttackType.STAB),
	// POLESTAFF
	TYPE_13(13, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// SCYTHE
	TYPE_14(14, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// SPEAR
	TYPE_15(15, AttackType.STAB, AttackType.SLASH, AttackType.CRUSH, AttackType.STAB),
	// SPIKED
	TYPE_16(16, AttackType.CRUSH, AttackType.CRUSH, AttackType.STAB, AttackType.CRUSH),
	// STAB SWORD
	TYPE_17(17, AttackType.STAB, AttackType.STAB, AttackType.SLASH, AttackType.STAB),
	// STAFF
	TYPE_18(18, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH, AttackType.MAGIC, AttackType.MAGIC),
	// THROWN
	TYPE_19(19, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	// WHIP
	TYPE_20(20, AttackType.SLASH, AttackType.SLASH, null, AttackType.SLASH),
	// BLADED STAFF
	TYPE_21(21, AttackType.STAB, AttackType.SLASH, null, AttackType.CRUSH, AttackType.MAGIC, AttackType.MAGIC),

	TYPE_22(22, AttackType.STAB, AttackType.SLASH, null, AttackType.CRUSH, AttackType.MAGIC, AttackType.MAGIC),
	// TWO HANDED SWORD GODSWORD
	TYPE_23(23, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// POWERED STAFF
	TYPE_24(24, AttackType.MAGIC, AttackType.MAGIC, null, AttackType.MAGIC),
	TYPE_25(25, AttackType.STAB, AttackType.SLASH, AttackType.CRUSH, AttackType.STAB),
	TYPE_26(26, AttackType.STAB, AttackType.SLASH, null, AttackType.STAB),
	TYPE_27(27, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// BULWARK
	TYPE_28(28, AttackType.CRUSH, null, null, AttackType.NONE),
	TYPE_29(29, AttackType.MAGIC, AttackType.MAGIC, null, AttackType.MAGIC),
	TYPE_30(30, AttackType.STAB, AttackType.STAB, AttackType.CRUSH, AttackType.STAB);

	@Getter
	private final AttackType[] attackTypes;
	WeaponAttackType(int id, AttackType... attackTypes)
	{
		Preconditions.checkArgument(id == ordinal());
		Preconditions.checkArgument(attackTypes.length == 4 || attackTypes.length == 6,
			"WeaponType " + this + " does not have exactly 4 or 6 attack style arguments");
		this.attackTypes = attackTypes;
	}
	public static WeaponAttackType getWeaponAttackType(int id)
	{
		if (id < 0 || id > values().length)
		{
			return null;
		}
		return values()[id];
	}
}

package com.cwjoshuak;

import com.google.inject.Provides;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;


@Slf4j
@PluginDescriptor(
	name = "Attack Types",
	description = "Show your current attack type as an overlay",
	tags = {"combat", "defence", "magic", "overlay", "ranged", "strength", "slash", "stab", "crush", "attack style", "attack type"}
)
public class AttackTypesPlugin extends Plugin
{
	private int equippedWeaponTypeVarbit = -1;

	@Getter(AccessLevel.PACKAGE)
	@Nullable
	private AttackType attackType;
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AttackTypesOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarpId() == VarPlayer.ATTACK_STYLE
			|| event.getVarbitId() == Varbits.EQUIPPED_WEAPON_TYPE
			|| event.getVarbitId() == Varbits.DEFENSIVE_CASTING_MODE)
		{
			final int currentAttackStyleVarbit = client.getVarpValue(VarPlayer.ATTACK_STYLE);
			final int currentEquippedWeaponTypeVarbit = client.getVarbitValue(Varbits.EQUIPPED_WEAPON_TYPE);
			final int currentCastingModeVarbit = client.getVarbitValue(Varbits.DEFENSIVE_CASTING_MODE);
			equippedWeaponTypeVarbit = currentEquippedWeaponTypeVarbit;
			updateAttackStyle(equippedWeaponTypeVarbit, currentAttackStyleVarbit, currentCastingModeVarbit);
		}
	}
	private void updateAttackStyle(int equippedWeaponType, int attackStyleIndex, int castingMode)
	{
		boolean isDefensiveCasting = castingMode == 1 && attackStyleIndex == 4;

		AttackType[] attackTypes = WeaponAttackType.getWeaponAttackType(equippedWeaponType).getAttackTypes();
		if (attackStyleIndex < attackTypes.length)
		{
			attackType = attackTypes[attackStyleIndex];
		}
		else if (attackStyleIndex == 4 || isDefensiveCasting)
		{
			attackType = AttackType.MAGIC;
		}
		if (attackType == null)
		{
			attackType = AttackType.NONE;
		}
	}
}

package com.cwjoshuak;

enum AttackType
{
	CRUSH("Crush"),
	SLASH("Slash"),
	STAB("Stab"),
	RANGED("Ranged"),
	MAGIC("Magic"),
	NONE("None");

	private final String name;

	AttackType(String name) { this.name = name; }

	public String getName() { return name; }
}

package com.cwjoshuak;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class AttackTypesOverlay extends OverlayPanel {
	private final AttackTypesPlugin plugin;

	@Inject
	private AttackTypesOverlay(AttackTypesPlugin plugin)
	{
		super(plugin);
		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		this.plugin = plugin;
	}
	@Override
	public Dimension render(Graphics2D graphics)
	{
			final AttackType attackType = plugin.getAttackType();
			if (attackType == null)
			{
				return null;
			}

			final String attackTypeString = attackType.getName();

			panelComponent.getChildren().add(TitleComponent.builder()
				.text(attackTypeString)
				.color(Color.WHITE)
				.build());

			panelComponent.setPreferredSize(new Dimension(
				graphics.getFontMetrics().stringWidth(attackTypeString) + 10,
				0));

			return super.render(graphics);
	}
}

