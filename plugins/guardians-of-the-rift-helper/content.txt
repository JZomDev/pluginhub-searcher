package com.datbear;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GuardiansOfTheRiftPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GuardiansOfTheRiftHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.datbear;

public enum TimerOverlayLocation {
    Hidden,
    InfoBox,
    GameOverlay,
    Both
}

package com.datbear;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;

import javax.inject.Inject;
import java.awt.*;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;

public class GuardiansOfTheRiftHelperStartTimerOverlay extends Overlay {
    private Client client;
    private GuardiansOfTheRiftHelperPlugin plugin;
    private GuardiansOfTheRiftHelperConfig config;

    @Inject
    public GuardiansOfTheRiftHelperStartTimerOverlay(Client client, GuardiansOfTheRiftHelperPlugin plugin, GuardiansOfTheRiftHelperConfig config) {
        super(plugin);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if ((!plugin.isInMainRegion() && !plugin.isInMinigame())) {
            return null;
        }

        if(config.startTimerOverlayLocation() != TimerOverlayLocation.GameOverlay && config.startTimerOverlayLocation() != TimerOverlayLocation.Both){
            return null;
        }

        Optional<Instant> gameStart = plugin.getNextGameStart();

        if (gameStart.isPresent()) {
            int timeToStart = ((int) ChronoUnit.SECONDS.between(Instant.now(), gameStart.get()));

            // fix for showing negative time
            if (timeToStart < 0) {
                return null;
            }

            String mins = String.format("%01d", timeToStart / 60);
            String secs = String.format("%02d", timeToStart % 60);
            String text = mins + ":" + secs;

            int x = 68;
            int y = 23;
            int width = 32;
            int height = 24;
            Rectangle rect = new Rectangle(x, y + height, width, height);

            plugin.drawCenteredString(graphics, text, rect);
        }

        return null;
    }
}

package com.datbear;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Optional;
import java.util.Set;

public class GuardiansOfTheRiftHelperOverlay extends Overlay {
    private static final Color GREEN = new Color(0,255,0, 150);
    private static final Color RED = new Color(255, 0, 0, 150);

    public static final HashMap<Integer, GuardianInfo> GUARDIAN_INFO = new HashMap<Integer, GuardianInfo>(){{
        put(43701, GuardianInfo.AIR);
        put(43705, GuardianInfo.MIND);
        put(43702, GuardianInfo.WATER);
        put(43703, GuardianInfo.EARTH);
        put(43704, GuardianInfo.FIRE);
        put(43709, GuardianInfo.BODY);
        put(43710, GuardianInfo.COSMIC);
        put(43706, GuardianInfo.CHAOS);
        put(43711, GuardianInfo.NATURE);
        put(43712, GuardianInfo.LAW);
        put(43707, GuardianInfo.DEATH);
        put(43708, GuardianInfo.BLOOD);
    }};

    private static final int GUARDIAN_TICK_COUNT = 33;
    private static final int PORTAL_TICK_COUNT = 43;

    private static final int RUNE_IMAGE_OFFSET = 505;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ModelOutlineRenderer modelOutlineRenderer;

    private Client client;
    private GuardiansOfTheRiftHelperPlugin plugin;
    private GuardiansOfTheRiftHelperConfig config;

    @Inject
    public GuardiansOfTheRiftHelperOverlay(Client client, GuardiansOfTheRiftHelperPlugin plugin, GuardiansOfTheRiftHelperConfig config) {
        super();
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if(plugin.isInMainRegion()){
            renderActiveGuardians(graphics);
            highlightGreatGuardian(graphics);
            highlightUnchargedCellTable(graphics);
            highlightEssencePiles(graphics);
            renderPortal(graphics);
        }
        return null;
    }

    private void renderPortal(Graphics2D graphics){
        if(plugin.getPortalSpawnTime().isPresent() && plugin.getPortal() != null){
            Instant spawnTime = plugin.getPortalSpawnTime().get();
            GameObject portal = plugin.getPortal();
            long millis = ChronoUnit.MILLIS.between(Instant.now(), spawnTime.plusMillis((long)Math.floor(PORTAL_TICK_COUNT * 600)));
            String timeRemainingText = ""+(Math.round(millis/100)/10d);
            Point textLocation =  Perspective.getCanvasTextLocation(client, graphics, portal.getLocalLocation(), timeRemainingText, 100);
            OverlayUtil.renderTextLocation(graphics, textLocation, timeRemainingText, Color.WHITE);
        }
    }

    private void highlightEssencePiles(Graphics2D graphics){
        if(plugin.isShouldMakeGuardian()) {
            GameObject elementalEss = plugin.getElementalEssencePile();
            GameObject catalyticEss = plugin.getCatalyticEssencePile();
            if(elementalEss != null) {
                modelOutlineRenderer.drawOutline(elementalEss, 2, GREEN, 2);
            }
            if(catalyticEss != null) {
                modelOutlineRenderer.drawOutline(catalyticEss, 2, GREEN, 2);
            }
        }
    }

    private void renderActiveGuardians(Graphics2D graphics){
        if(!plugin.isInMainRegion()) return;

        Set<GameObject> activeGuardians = plugin.getActiveGuardians();
        Set<GameObject> guardians = plugin.getGuardians();
        Set<Integer> inventoryTalismans = plugin.getInventoryTalismans();

        for(GameObject guardian : activeGuardians) {
            if(guardian == null) continue;
            Shape hull = guardian.getConvexHull();
            if(hull == null) continue;

            GuardianInfo info = GUARDIAN_INFO.get(guardian.getId());
            Color color = info.getColor(config);
            graphics.setColor(color);

            modelOutlineRenderer.drawOutline(guardian, 2, color, 2);

            BufferedImage img = info.getRuneImage(itemManager);
            OverlayUtil.renderImageLocation(client, graphics, guardian.getLocalLocation(), img, RUNE_IMAGE_OFFSET);
            if(info.spawnTime.isPresent()) {
                Point imgLocation = Perspective.getCanvasImageLocation(client, guardian.getLocalLocation(), img, RUNE_IMAGE_OFFSET);
                long millis = ChronoUnit.MILLIS.between(Instant.now(), info.spawnTime.get().plusMillis((long)Math.floor(GUARDIAN_TICK_COUNT * 600)));
                String timeRemainingText = ""+(Math.round(millis/100)/10d);
                Rectangle2D strBounds = graphics.getFontMetrics().getStringBounds(timeRemainingText, graphics);
                Point textLocation =  Perspective.getCanvasTextLocation(client, graphics, guardian.getLocalLocation(), timeRemainingText, RUNE_IMAGE_OFFSET+60);
                textLocation = new Point((int)(imgLocation.getX() + img.getWidth()/2d - strBounds.getWidth()/2d), textLocation.getY());
                OverlayUtil.renderTextLocation(graphics, textLocation, timeRemainingText, Color.WHITE);
            }
        }

        for(int talisman : inventoryTalismans){
            Optional<GameObject> talismanGuardian = guardians.stream().filter(x -> GUARDIAN_INFO.get(x.getId()).talismanId == talisman).findFirst();

            if(talismanGuardian.isPresent() && activeGuardians.stream().noneMatch(x -> x.getId() == talismanGuardian.get().getId())) {
                GuardianInfo talismanGuardianInfo = GUARDIAN_INFO.get(talismanGuardian.get().getId());
                modelOutlineRenderer.drawOutline(talismanGuardian.get(), 2, talismanGuardianInfo.getColor(config), 2);
                OverlayUtil.renderImageLocation(client, graphics, talismanGuardian.get().getLocalLocation(), talismanGuardianInfo.getTalismanImage(itemManager), RUNE_IMAGE_OFFSET);
            }
        }
    }

    private void highlightGreatGuardian(Graphics2D graphics) {
        if(!config.outlineGreatGuardian()){
            return;
        }

        NPC greatGuardian = plugin.getGreatGuardian();
        if(plugin.isOutlineGreatGuardian() && greatGuardian != null){
            modelOutlineRenderer.drawOutline(greatGuardian, 2, Color.GREEN, 2);
        }
    }

    private void highlightUnchargedCellTable(Graphics2D graphics) {
        if(!config.outlineCellTable()){
            return;
        }

        GameObject table = plugin.getUnchargedCellTable();
        if(plugin.isOutlineUnchargedCellTable() && table != null){
            modelOutlineRenderer.drawOutline(table, 2, GREEN, 2);
        }
    }
}

package com.datbear;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.util.Optional;
import java.util.Set;

public class GuardianInfo {
    public static final GuardianInfo AIR = new GuardianInfo(1, ItemID.AIR_RUNE, 26887,4353, false, CellType.Weak);
    public static final GuardianInfo MIND = new GuardianInfo(2, ItemID.MIND_RUNE, 26891,4354, true, CellType.Weak);
    public static final GuardianInfo WATER = new GuardianInfo(5, ItemID.WATER_RUNE, 26888,4355, false, CellType.Medium);
    public static final GuardianInfo EARTH = new GuardianInfo(9, ItemID.EARTH_RUNE, 26889,4356, false, CellType.Strong);
    public static final GuardianInfo FIRE = new GuardianInfo(14, ItemID.FIRE_RUNE, 26890,4357, false, CellType.Overcharged);
    public static final GuardianInfo BODY = new GuardianInfo(20, ItemID.BODY_RUNE, 26895,4358, true, CellType.Weak);
    public static final GuardianInfo COSMIC = new GuardianInfo(27, ItemID.COSMIC_RUNE, 26896, 4359, true, CellType.Medium);
    public static final GuardianInfo CHAOS = new GuardianInfo(35, ItemID.CHAOS_RUNE, 26892,4360, true, CellType.Medium);
    public static final GuardianInfo NATURE = new GuardianInfo(44, ItemID.NATURE_RUNE, 26897, 4361, true, CellType.Strong);
    public static final GuardianInfo LAW = new GuardianInfo(54, ItemID.LAW_RUNE, 26898,4362, true, CellType.Strong);
    public static final GuardianInfo DEATH = new GuardianInfo(65, ItemID.DEATH_RUNE, 26893,4363, true, CellType.Overcharged);
    public static final GuardianInfo BLOOD = new GuardianInfo(77, ItemID.BLOOD_RUNE, 26894,4364, true, CellType.Overcharged);

    public static final Set<GuardianInfo> ALL = ImmutableSet.of(AIR, MIND, WATER, EARTH, FIRE, BODY, COSMIC, CHAOS, NATURE, LAW, DEATH, BLOOD);

    public int levelRequired;
    public int runeId;
    public int talismanId;
    public int spriteId;
    public boolean isCatalytic;
    public CellType cellType;

    public Optional<Instant> spawnTime = Optional.empty();

    public GuardianInfo(int levelRequired, int runeId, int talismanId, int spriteId, boolean isCatalytic, CellType cellType) {
        this.levelRequired = levelRequired;
        this.runeId = runeId;
        this.talismanId = talismanId;
        this.spriteId = spriteId;
        this.isCatalytic = isCatalytic;
        this.cellType = cellType;
    }

    public BufferedImage getRuneImage(ItemManager itemManager) {
        return itemManager.getImage(runeId);
    }
    public BufferedImage getTalismanImage(ItemManager itemManager) { return itemManager.getImage(talismanId); }

    public void spawn(){
        spawnTime = Optional.of(Instant.now());
    }

    public void despawn(){
        spawnTime = Optional.empty();
    }

    public Color getColor(GuardiansOfTheRiftHelperConfig config){
        if(config.colorGuardiansByTier()){
            switch(cellType){
                case Weak:
                    return config.weakGuardianColor();
                case Medium:
                    return config.mediumGuardianColor();
                case Strong:
                    return config.strongGuardianColor();
                case Overcharged:
                    return config.overchargedGuardianColor();
            }
        } else {
            return isCatalytic ? config.catalyticGuardianColor() : config.elementalGuardianColor();
        }

        return Color.WHITE;
    }
}
package com.datbear;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class GuardiansOfTheRiftHelperPanel extends OverlayPanel {
    private Client client;
    private GuardiansOfTheRiftHelperPlugin plugin;
    private GuardiansOfTheRiftHelperConfig config;

    @Inject
    public GuardiansOfTheRiftHelperPanel(Client client, GuardiansOfTheRiftHelperPlugin plugin, GuardiansOfTheRiftHelperConfig config){
        super(plugin);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.TOP_CENTER);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Guardians of the Rift Helper Overlay"));
    }

	private int potentialPoints(int savedPoints, int currentPoints)
	{
		if (currentPoints == 0){
			return savedPoints;
		}
		return savedPoints += currentPoints / 100;
	}

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if((!plugin.isInMainRegion() && !plugin.isInMinigame()) || !config.showPointsOverlay()){
            return null;
        }

		Optional<Instant> gameStart = plugin.getNextGameStart();
		if(gameStart.isPresent()) {
			if(config.startTimerOverlayLocation() == TimerOverlayLocation.InfoBox || config.startTimerOverlayLocation() == TimerOverlayLocation.Both){
				int timeToStart = ((int)ChronoUnit.SECONDS.between(Instant.now(), gameStart.get()));
				panelComponent.getChildren().add(LineComponent.builder()
						.left("Time to start:")
						.right(""+timeToStart)
						.build());
			}
		} else {
			if(config.inactivePortalOverlayLocation() == TimerOverlayLocation.InfoBox || config.inactivePortalOverlayLocation() == TimerOverlayLocation.Both){
				Optional<Instant> despawn = plugin.getLastPortalDespawnTime();
				int timeSincePortal = despawn.isPresent() ? ((int)(ChronoUnit.SECONDS.between(despawn.get(), Instant.now()))) : 0;
				panelComponent.getChildren().add(LineComponent.builder()
						.left("Time since portal:")
						.right(""+timeSincePortal)
						.rightColor(plugin.getTimeSincePortalColor(timeSincePortal))
						.build());
			}
		}

        panelComponent.getChildren().add(LineComponent.builder()
                        .left("Reward points:")
                        .right(plugin.getElementalRewardPoints() + "/" + plugin.getCatalyticRewardPoints())
                .build());

		if (config.potentialPoints())
		{
			final int potElementalPoints = potentialPoints(plugin.getElementalRewardPoints(), plugin.getCurrentElementalRewardPoints());
			final int potCatalyticPoints = potentialPoints(plugin.getCatalyticRewardPoints(), plugin.getCurrentCatalyticRewardPoints());
			final int elementalRemain = plugin.getCurrentElementalRewardPoints() % 100;
			final int catalyticRemain = plugin.getCurrentCatalyticRewardPoints() % 100;
			final String potPoints = String.format("%d.%02d/%d.%02d", potElementalPoints, elementalRemain, potCatalyticPoints, catalyticRemain);
			Color potColor = Color.WHITE;
			if (config.highlightPotential())
			{
				potColor = potElementalPoints == potCatalyticPoints ? config.potentialBalanceColor() : config.potentialUnbalanceColor();
			}
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Potential:")
				.rightColor(potColor)
				.right(potPoints)
				.build());
		}
		return super.render(graphics);
    }

}

package com.datbear;

import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;

public class GuardiansOfTheRiftHelperInactivePortalOverlay extends Overlay {
    private Client client;
    private GuardiansOfTheRiftHelperPlugin plugin;
    private GuardiansOfTheRiftHelperConfig config;
    private SpriteManager spriteManager;

    @Inject
    public GuardiansOfTheRiftHelperInactivePortalOverlay(Client client, GuardiansOfTheRiftHelperPlugin plugin, GuardiansOfTheRiftHelperConfig config, SpriteManager spriteManager) {
        super(plugin);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.spriteManager = spriteManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.isInMainRegion() && !plugin.isInMinigame()) {
            return null;
        }

        if(config.inactivePortalOverlayLocation() != TimerOverlayLocation.GameOverlay && config.inactivePortalOverlayLocation() != TimerOverlayLocation.Both){
            return null;
        }

        Widget parentWidget = client.getWidget(plugin.getParentWidgetId());
        Widget portalWidget = client.getWidget(plugin.getPortalWidgetId());

        if (parentWidget == null || portalWidget == null) {
            return null;
        }

        if (parentWidget.isHidden()) {
            return null;
        }

        if (!portalWidget.isHidden()) {
            return null;
        }

        BufferedImage image = spriteManager.getSprite(plugin.getPortalSpriteId(), 0);
        image = ImageUtil.grayscaleImage(image);

        int x = 189;
        int y = 70;
        int width = 32;
        int height = 32;

        graphics.drawImage(image, x, y, width, height, null);

        Optional<Instant> despawn = plugin.getLastPortalDespawnTime();

        // simulates the delay that the widget has for the initial text
        if (plugin.isFirstPortal())
        {
            int timeSincePortalMillis = despawn.isPresent() ? ((int)(ChronoUnit.MILLIS.between(despawn.get(), Instant.now()))) : 0;
            if (timeSincePortalMillis < 1200) {
                return null;
            }
        }

        int timeSincePortal = despawn.isPresent() ? ((int)(ChronoUnit.SECONDS.between(despawn.get(), Instant.now()))) : 0;
        String mins = String.format("%01d", timeSincePortal / 60);
        String secs = String.format("%02d", timeSincePortal % 60);
        String text = mins + ":" + secs;

        int textHeight = 24;
        Rectangle rect = new Rectangle(x, y + height, width, textHeight);

        plugin.drawCenteredString(graphics, text, rect);

        return null;
    }
}

package com.datbear;

import com.google.common.collect.ImmutableSet;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;
import java.time.Instant;
import java.util.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
		name = "Guardians of the Rift Helper",
		description = "Show info about the Guardians of the Rift minigame",
		tags = {"minigame", "overlay", "guardians of the rift"}
)
public class GuardiansOfTheRiftHelperPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private GuardiansOfTheRiftHelperConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private GuardiansOfTheRiftHelperOverlay overlay;

	@Inject
	private GuardiansOfTheRiftHelperPanel panel;

	@Inject
	private GuardiansOfTheRiftHelperStartTimerOverlay startTimerOverlay;

	@Inject
	private GuardiansOfTheRiftHelperInactivePortalOverlay inactivePortalOverlay;

	@Inject
	private Notifier notifier;

	private static final int MINIGAME_MAIN_REGION = 14484;

	private static final Set<Integer> GUARDIAN_IDS = ImmutableSet.of(43705, 43701, 43710, 43702, 43703, 43711, 43704, 43708, 43712, 43707, 43706, 43709, 43702);
	private static final Set<Integer> TALISMAN_IDS = GuardianInfo.ALL.stream().mapToInt(x -> x.talismanId).boxed().collect(Collectors.toSet());
	private static final int GREAT_GUARDIAN_ID = 11403;

	private static final int CATALYTIC_GUARDIAN_STONE_ID = 26880;
	private static final int ELEMENTAL_GUARDIAN_STONE_ID = 26881;
	private static final int POLYELEMENTAL_GUARDIAN_STONE_ID = 26941;

	private static final int ELEMENTAL_ESSENCE_PILE_ID = 43722;
	private static final int CATALYTIC_ESSENCE_PILE_ID = 43723;

	private static final int UNCHARGED_CELL_ITEM_ID = 26882;
	private static final int UNCHARGED_CELL_GAMEOBJECT_ID = 43732;
	private static final int CHISEL_ID = 1755;
	private static final int OVERCHARGED_CELL_ID = 26886;

	private static final int GUARDIAN_ACTIVE_ANIM = 9363;

	private static final int PARENT_WIDGET_ID = 48889857;
	private static final int CATALYTIC_RUNE_WIDGET_ID = 48889876;
	private static final int ELEMENTAL_RUNE_WIDGET_ID = 48889879;
	private static final int GUARDIAN_COUNT_WIDGET_ID = 48889886;
	private static final int PORTAL_WIDGET_ID = 48889884;

	private final static int PORTAL_SPRITE_ID = 4368;

	private static final int PORTAL_ID = 43729;

	private static final String REWARD_POINT_REGEX = "Total elemental energy:[^>]+>([\\d,]+).*Total catalytic energy:[^>]+>([\\d,]+).";
	private static final Pattern REWARD_POINT_PATTERN = Pattern.compile(REWARD_POINT_REGEX);
	private static final String CHECK_POINT_REGEX = "You have (\\d+) catalytic energy and (\\d+) elemental energy";
	private static final Pattern CHECK_POINT_PATTERN = Pattern.compile(CHECK_POINT_REGEX);

	private static final int DIALOG_WIDGET_GROUP = 229;
	private static final int DIALOG_WIDGET_MESSAGE = 1;
	private static final String BARRIER_DIALOG_FINISHING_UP = "It looks like the adventurers within are just finishing up. You must<br>wait until they are done to join.";

	@Getter(AccessLevel.PACKAGE)
	private final Set<GameObject> guardians = new HashSet<>();
	@Getter(AccessLevel.PACKAGE)
	private final Set<GameObject> activeGuardians = new HashSet<>();
	@Getter(AccessLevel.PACKAGE)
	private final Set<Integer> inventoryTalismans = new HashSet<>();
	@Getter(AccessLevel.PACKAGE)
	private NPC greatGuardian;
	@Getter(AccessLevel.PACKAGE)
	private GameObject unchargedCellTable;
	@Getter(AccessLevel.PACKAGE)
	private GameObject catalyticEssencePile;
	@Getter(AccessLevel.PACKAGE)
	private GameObject elementalEssencePile;
	@Getter(AccessLevel.PACKAGE)
	private GameObject portal;

	@Getter(AccessLevel.PACKAGE)
	private boolean isInMinigame;
	@Getter(AccessLevel.PACKAGE)
	private boolean isInMainRegion;
	@Getter(AccessLevel.PACKAGE)
	private boolean outlineGreatGuardian = false;
	@Getter(AccessLevel.PACKAGE)
	private boolean outlineUnchargedCellTable = false;
	@Getter(AccessLevel.PACKAGE)
	private boolean shouldMakeGuardian = false;
	@Getter(AccessLevel.PACKAGE)
	private boolean isFirstPortal = false;

	@Getter(AccessLevel.PACKAGE)
	private int elementalRewardPoints;
	@Getter(AccessLevel.PACKAGE)
	private int catalyticRewardPoints;
	@Getter(AccessLevel.PACKAGE)
	private int currentElementalRewardPoints;
	@Getter(AccessLevel.PACKAGE)
	private int currentCatalyticRewardPoints;

	@Getter(AccessLevel.PACKAGE)
	private Optional<Instant> portalSpawnTime = Optional.empty();
	@Getter(AccessLevel.PACKAGE)
	private Optional<Instant> lastPortalDespawnTime = Optional.empty();
	@Getter(AccessLevel.PACKAGE)
	private Optional<Instant> nextGameStart = Optional.empty();
	@Getter(AccessLevel.PACKAGE)
	private int lastRewardUsage;


	private String portalLocation;
	private int lastElementalRuneSprite;
	private int lastCatalyticRuneSprite;
	private boolean areGuardiansNeeded = false;
	private int entryBarrierClickCooldown = 0;

	private final Map<String, String> expandCardinal = new HashMap<>();

	private boolean checkInMinigame() {
		GameState gameState = client.getGameState();
		if (gameState != GameState.LOGGED_IN
				&& gameState != GameState.LOADING)
		{
			return false;
		}

		Widget elementalRuneWidget = client.getWidget(PARENT_WIDGET_ID);
		return elementalRuneWidget != null;
	}

	private boolean checkInMainRegion(){
		int[] currentMapRegions = client.getMapRegions();
		return Arrays.stream(currentMapRegions).anyMatch(x -> x == MINIGAME_MAIN_REGION);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		overlayManager.add(panel);
		overlayManager.add(startTimerOverlay);
		overlayManager.add(inactivePortalOverlay);
		isInMinigame = true;
		expandCardinal.put("S",  "south");
		expandCardinal.put("SW", "south west");
		expandCardinal.put("W",  "west");
		expandCardinal.put("NW", "north west");
		expandCardinal.put("N",  "north");
		expandCardinal.put("NE", "north east");
		expandCardinal.put("E",  "east");
		expandCardinal.put("SE", "south east");
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
		overlayManager.remove(panel);
		overlayManager.remove(startTimerOverlay);
		overlayManager.remove(inactivePortalOverlay);
		reset();
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (!isInMainRegion || event.getItemContainer() != client.getItemContainer(InventoryID.INVENTORY))
		{
			return;
		}

		Item[] items = event.getItemContainer().getItems();
		outlineGreatGuardian = Arrays.stream(items).anyMatch(x -> x.getId() == ELEMENTAL_GUARDIAN_STONE_ID || x.getId() == CATALYTIC_GUARDIAN_STONE_ID || x.getId() == POLYELEMENTAL_GUARDIAN_STONE_ID);		outlineUnchargedCellTable = Arrays.stream(items).noneMatch(x -> x.getId() == UNCHARGED_CELL_ITEM_ID);
		shouldMakeGuardian = Arrays.stream(items).anyMatch(x -> x.getId() == CHISEL_ID) && Arrays.stream(items).anyMatch(x -> x.getId() == OVERCHARGED_CELL_ID) && areGuardiansNeeded;

		List<Integer> invTalismans = Arrays.stream(items).mapToInt(x -> x.getId()).filter(x -> TALISMAN_IDS.contains(x)).boxed().collect(Collectors.toList());
		if(invTalismans.stream().count() != inventoryTalismans.stream().count()){
			inventoryTalismans.clear();
			inventoryTalismans.addAll(invTalismans);
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		isInMinigame = checkInMinigame();
		isInMainRegion = checkInMainRegion();
		if (entryBarrierClickCooldown > 0) {
			entryBarrierClickCooldown--;
		}

		activeGuardians.removeIf(ag -> {
			Animation anim = ((DynamicObject)ag.getRenderable()).getAnimation();
			return anim == null || anim.getId() != GUARDIAN_ACTIVE_ANIM;
		});

		for(GameObject guardian : guardians){
			Animation animation = ((DynamicObject) guardian.getRenderable()).getAnimation();
			if(animation != null && animation.getId() == GUARDIAN_ACTIVE_ANIM) {
				activeGuardians.add(guardian);
			}
		}

		Widget elementalRuneWidget = client.getWidget(ELEMENTAL_RUNE_WIDGET_ID);
		Widget catalyticRuneWidget = client.getWidget(CATALYTIC_RUNE_WIDGET_ID);
		Widget guardianCountWidget = client.getWidget(GUARDIAN_COUNT_WIDGET_ID);
		Widget portalWidget = client.getWidget(PORTAL_WIDGET_ID);

		lastElementalRuneSprite = parseRuneWidget(elementalRuneWidget, lastElementalRuneSprite);
		lastCatalyticRuneSprite = parseRuneWidget(catalyticRuneWidget, lastCatalyticRuneSprite);

		if(guardianCountWidget != null) {
			String text = guardianCountWidget.getText();
			areGuardiansNeeded = text != null && !text.contains("10/10");
		}

		if(portalWidget != null && !portalWidget.isHidden()){
			if(!portalSpawnTime.isPresent() && lastPortalDespawnTime.isPresent()) {
				lastPortalDespawnTime = Optional.empty();
				if (isFirstPortal) {
					isFirstPortal = false;
				}
				if(config.notifyPortalSpawn()){
					String compass = portalWidget.getText().split(" ")[0];
					String full = expandCardinal.getOrDefault(compass, "unknown");
					notifier.notify("A portal has spawned in the " + full + ".");
				}
			}
			portalLocation = portalWidget.getText();
			portalSpawnTime = portalSpawnTime.isPresent() ? portalSpawnTime : Optional.of(Instant.now());
		} else if(elementalRuneWidget != null && !elementalRuneWidget.isHidden()) {
			if(portalSpawnTime.isPresent()){
				lastPortalDespawnTime = Optional.of(Instant.now());
			}
			portalLocation = null;
			portalSpawnTime = Optional.empty();
		}

		Widget dialog = client.getWidget(DIALOG_WIDGET_GROUP, DIALOG_WIDGET_MESSAGE);
		if (dialog != null)
		{
			String dialogText = dialog.getText();
			if (dialogText.equals(BARRIER_DIALOG_FINISHING_UP)) {
				// Allow one click per tick while the portal is closed
				entryBarrierClickCooldown = 0;
			}
			else
			{
				final Matcher checkMatcher = CHECK_POINT_PATTERN.matcher(dialogText);
				if (checkMatcher.find(0))
				{
					//For some reason these are reversed compared to everything else
					catalyticRewardPoints = Integer.parseInt(checkMatcher.group(1));
					elementalRewardPoints = Integer.parseInt(checkMatcher.group(2));
				}
			}
		}
	}

	int parseRuneWidget(Widget runeWidget, int lastSpriteId){
		if(runeWidget != null) {
			int spriteId = runeWidget.getSpriteId();
			if(spriteId != lastSpriteId) {
				if(lastSpriteId > 0) {
					Optional<GuardianInfo> lastGuardian = GuardianInfo.ALL.stream().filter(g -> g.spriteId == lastSpriteId).findFirst();
					if(lastGuardian.isPresent()) {
						lastGuardian.get().despawn();
					}
				}

				Optional<GuardianInfo> currentGuardian = GuardianInfo.ALL.stream().filter(g -> g.spriteId == spriteId).findFirst();
				if(currentGuardian.isPresent()) {
					currentGuardian.get().spawn();
				}
			}

			return spriteId;
		}
		return lastSpriteId;
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		GameObject gameObject = event.getGameObject();
		if(GUARDIAN_IDS.contains(event.getGameObject().getId())) {
			guardians.removeIf(g -> g.getId() == gameObject.getId());
			activeGuardians.removeIf(g -> g.getId() == gameObject.getId());
			guardians.add(gameObject);
		}

		if(gameObject.getId() == UNCHARGED_CELL_GAMEOBJECT_ID){
			unchargedCellTable = gameObject;
		}

		if(gameObject.getId() == ELEMENTAL_ESSENCE_PILE_ID){
			elementalEssencePile = gameObject;
		}

		if(gameObject.getId() == CATALYTIC_ESSENCE_PILE_ID){
			catalyticEssencePile = gameObject;
		}

		if(gameObject.getId() == PORTAL_ID){
			portal = gameObject;
			if (config.notifyPortalSpawn()) {
				// The hint arrow is cleared under the following circumstances:
				// 1. Player enters the portal
				// 2. Plugin is "reset()"
				// 3. The portal despawns
				client.setHintArrow(portal.getWorldLocation());
			}
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event) {
		if(event.getGameObject().getId() == PORTAL_ID){
			client.clearHintArrow();
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned) {
		NPC npc = npcSpawned.getNpc();
		if(npc.getId() == GREAT_GUARDIAN_ID){
			greatGuardian = npc;
		}
	}


	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOADING)
		{
			// on region changes the tiles get set to null
			reset();
		}
		else if (event.getGameState() == GameState.LOGIN_SCREEN)
		{
			isInMinigame = false;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if(!isInMainRegion) return;
		currentElementalRewardPoints = client.getVarbitValue(13686);
		currentCatalyticRewardPoints = client.getVarbitValue(13685);
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if(!isInMainRegion) return;
		if(chatMessage.getType() != ChatMessageType.SPAM && chatMessage.getType() != ChatMessageType.GAMEMESSAGE) return;

		String msg = chatMessage.getMessage();
		if(msg.contains("You step through the portal")) {
			client.clearHintArrow();
		}
		if(msg.contains("The rift becomes active!")) {
			lastPortalDespawnTime = Optional.of(Instant.now());
			nextGameStart = Optional.empty();
			isFirstPortal = true;
		} else if(msg.contains("The rift will become active in 30 seconds.")) {
			nextGameStart = Optional.of(Instant.now().plusSeconds(30));
		} else if(msg.contains("The rift will become active in 10 seconds.")) {
			nextGameStart = Optional.of(Instant.now().plusSeconds(10));
		} else if(msg.contains("The rift will become active in 5 seconds.")) {
			nextGameStart = Optional.of(Instant.now().plusSeconds(5));
		} else if(msg.contains("The Portal Guardians will keep their rifts open for another 30 seconds.")){
			nextGameStart = Optional.of(Instant.now().plusSeconds(60));
		} else if(msg.contains("You found some loot:")){
			elementalRewardPoints--;
			catalyticRewardPoints--;
		}

		Matcher rewardPointMatcher = REWARD_POINT_PATTERN.matcher(msg);
		if(rewardPointMatcher.find()) {
			// Use replaceAll to remove thousands separators from the text
			elementalRewardPoints = Integer.parseInt(rewardPointMatcher.group(1).replaceAll(",", ""));
			catalyticRewardPoints = Integer.parseInt(rewardPointMatcher.group(2).replaceAll(",", ""));
		}
		//log.info(msg);
	}

	private void reset() {
		guardians.clear();
		activeGuardians.clear();
		unchargedCellTable = null;
		greatGuardian = null;
		catalyticEssencePile = null;
		elementalEssencePile = null;
		client.clearHintArrow();
	}

	@Provides
	GuardiansOfTheRiftHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GuardiansOfTheRiftHelperConfig.class);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if(!config.quickPassCooldown()) return;

		// Only allow one click on the entry barrier's quick-pass option for every 3 game ticks
		if (event.getId() == 43700 && event.getMenuAction().getId() == 5)
		{
			if (entryBarrierClickCooldown > 0)
			{
				event.consume();
			}
			else
			{
				entryBarrierClickCooldown = 3;
			}
		}
	}

	@Subscribe
	public void onOverheadTextChanged(OverheadTextChanged event)
	{
		if (!("Apprentice Tamara".equals(event.getActor().getName()) || "Apprentice Cordelia".equals(event.getActor().getName())))
		{
			return;
		}
		if (config.muteApprentices())
		{
			event.getActor().setOverheadText(" ");
		}
	}

	public Color getTimeSincePortalColor(int timeSincePortal)
	{
		if (isFirstPortal)
		{
			// first portal takes about 40 more seconds to spawn
			timeSincePortal -= 40;
		}
		if (timeSincePortal >= 108)
		{
			return Color.RED;
		}
		else if(timeSincePortal >= 85)
		{
			return Color.YELLOW;
		}
		return Color.GREEN;
	}

	public int getParentWidgetId() {
		return PARENT_WIDGET_ID;
	}

	public int getPortalWidgetId() {
		return PORTAL_WIDGET_ID;
	}

	public int getPortalSpriteId() {
		return PORTAL_SPRITE_ID;
	}

	public void drawCenteredString(Graphics g, String text, Rectangle rect) {
		FontMetrics metrics = g.getFontMetrics();
		int x = rect.x + (rect.width - metrics.stringWidth(text)) / 2;
		int y = rect.y + ((rect.height - metrics.getHeight()) / 2) + metrics.getAscent();
		g.setColor(Color.BLACK);
		g.drawString(text, x + 1, y + 1);
		g.setColor(Color.WHITE);
		g.drawString(text, x, y);
	}
}

package com.datbear;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("guardiansOfTheRiftHelper")
public interface GuardiansOfTheRiftHelperConfig extends Config
{
	@ConfigSection(
		name = "Outlines",
		description = "All options relating to colored outlines",
		position =  0,
		closedByDefault = true
	)
	String outlines = "outlines";

	@ConfigSection(
		name = "Overlays",
		description = "All options relating to overlays",
		position =  1,
		closedByDefault = true

	)
	String overlays = "overlays";

    @ConfigItem(
            keyName = "portalSpawn",
            name = "Notify on portal spawn",
            description = "Notifies you when a portal spawns."
    )
    default boolean notifyPortalSpawn()
    {
        return true;
    }

    @ConfigItem(
            keyName = "muteApprentices",
            name = "Mute game help messages",
            description = "Mutes the over head messages of the apprentices giving game advice."
    )
    default boolean muteApprentices()
    {
        return true;
    }

    @ConfigItem(
            keyName = "outlineCellTable",
            name = "Outline cell table",
            description = "Outlines the Cell table when you have no cells remaining.",
		section = outlines
    )
    default boolean outlineCellTable()
    {
        return true;
    }

    @ConfigItem(
            keyName = "outlineGreatGuardian",
            name = "Outline Great Guardian",
            description = "Outlines the Great Guardian when you have elemental or catalytic essence in your inventory.",
			section = outlines
    )
    default boolean outlineGreatGuardian()
    {
        return true;
    }


    @ConfigItem(
            keyName = "quickPassCooldown",
            name = "Add cooldown to Quick-Pass",
            description = "Adds a 3 tick delay to the Quick-Pass menu option so you don't enter/leave by spam clicking the gate with Menu Entry Swapper's quick-pass option enabled."
    )
    default boolean quickPassCooldown()
    {
        return true;
    }

    @ConfigItem(
            keyName = "elementalGuardianColor",
            name = "Elemental outline",
            description = "Color of the outline on the active elemental guardian.",
			section = outlines
    )
    default Color elementalGuardianColor()
    {
        return Color.GREEN;
    }

    @ConfigItem(
            keyName = "catalyticGuardianColor",
            name = "Catalytic outline",
            description = "Color of the outline on the active catalytic guardian.",
			section = outlines
    )
    default Color catalyticGuardianColor()
    {
        return Color.RED;
    }


    @ConfigItem(
            keyName = "outlineGuardiansByTier",
            name = "Color guardians by cell tier",
            description = "Outlines active portal guardians with colors based on their Cell charge tiers instead of Elemental vs Catalytic.",
            position = 2,
			section = outlines
    )
    default boolean colorGuardiansByTier() { return false; }


    @ConfigItem(
            keyName = "weakGuardianColor",
            name = "Weak outline",
            description = "Color of the outline on an active weak guardian.",
            position = 3,
			section = outlines
    )
    default Color weakGuardianColor()
    {
        return Color.WHITE;
    }

    @ConfigItem(
            keyName = "mediumGuardianColor",
            name = "Medium outline",
            description = "Color of the outline on an active medium guardian.",
            position = 4,
			section = outlines
    )
    default Color mediumGuardianColor()
    {
        return Color.BLUE;
    }

    @ConfigItem(
            keyName = "strongGuardianColor",
            name = "Strong outline",
            description = "Color of the outline on an active strong guardian.",
            position = 5,
			section = outlines
    )
    default Color strongGuardianColor()
    {
        return Color.GREEN;
    }

    @ConfigItem(
            keyName = "overchargedGuardianColor",
            name = "Overcharged outline",
            description = "Color of the outline on an active overcharged guardian.",
            position = 6,
			section = outlines
    )
    default Color overchargedGuardianColor()
    {
        return Color.RED;
    }

    @ConfigItem(
            keyName = "startTimerOverlayLocation",
            name = "Start Timer Overlay Location",
            description = "Toggles the start timer overlay location.",
            position =  7,
            section = overlays
    )
    default TimerOverlayLocation startTimerOverlayLocation()
    {
        return TimerOverlayLocation.InfoBox;
    }

    @ConfigItem(
            keyName = "inactivePortalOverlayLocation",
            name = "Inactive Portal Overlay Location",
            description = "Toggles the inactive portal overlay location.",
            position =  8,
            section = overlays
    )
    default TimerOverlayLocation inactivePortalOverlayLocation()
    {
        return TimerOverlayLocation.InfoBox;
    }

    @ConfigItem(
            keyName = "showPointsOverlay",
            name = "Show Points Overlay",
            description = "Toggles the points overlay.",
            position =  9,
            section = overlays
    )
    default boolean showPointsOverlay()
    {
        return true;
    }

	@ConfigItem(
		keyName = "potentialPoints",
		name = "Show potential points",
		description = "Show tallied up points during a game",
		position =  10,
		section = overlays
	)
	default boolean potentialPoints() { return true; }

	@ConfigItem(
		keyName = "highlightPotential",
		name = "Highlight potential points",
		description =  "Highlight potential points depending on balance",
		position =  11,
		section = overlays
	)
	default boolean highlightPotential() { return true; }

	@ConfigItem(
		keyName = "potentialUnbalanceColor",
		name = "Unbalanced potential color",
		description =  "Color to highlight potential points when unbalanced",
		position = 12,
		section = overlays
	)
	default Color potentialUnbalanceColor() { return Color.RED; }

	@ConfigItem(
		keyName = "potentialBalanceColor",
		name = "Balanced potential color",
		description =  "Color to highlight potential points when balanced",
		position =  13,
		section = overlays
	)
	default Color potentialBalanceColor() { return Color.GREEN; }
}

package com.datbear;

public enum CellType {
    Weak,
    Medium,
    Strong,
    Overcharged
}

