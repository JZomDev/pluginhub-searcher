package com.VancedBarrows;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.RuneLite;
import java.io.File;

@ConfigGroup("vancedbarrows")
public interface VancedBarrowsConfig extends Config
{
    enum FaceMode
    {
        BARROWS_FACES,
        JD_VANCE_FACES,
        CUSTOM_FACES
    }

    @ConfigItem(
            keyName = "faceMode",
            name = "Face Mode",
            description = "Select which faces to show.",
            position = 1
    )
    default FaceMode faceMode()
    {
        return FaceMode.JD_VANCE_FACES;
    }

    @ConfigItem(
            keyName = "customFacesInfo",
            name = "Custom Faces Folder Path",
            description = "For 'Custom Faces' mode, place your images in this folder. You can copy this path.",
            position = 2
    )
    default String customFacesInfo()
    {
        return new File(RuneLite.RUNELITE_DIR, "barrowsfaces").getAbsolutePath();
    }
}

package com.VancedBarrows;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Point;
import net.runelite.api.widgets.Widget;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

@Slf4j
@PluginDescriptor(
		name = "Vanced Barrows",
		description = "Replaces the Barrows Brothers' faces popup with images of JD Vance every 18 seconds!",
		tags = {"barrows", "overlay", "JD", "Vance"}
)
public class VancedBarrowsPlugin extends Plugin
{
	private static final String[] VANCE_IMAGE_PATHS = {"/vance.png", "/vanceTwo.png", "/vanceThree.png", "/vanceFour.png"};

	private static final int IMAGE_SIZE_RESIZABLE = 256;
	private static final int IMAGE_SIZE_FIXED = 192; // 75% of resizable
	private static final float ALPHA_PEAK_RESIZABLE = 0.65f;
	private static final float ALPHA_FADE_RESIZABLE = 0.325f;
	private static final float ALPHA_PEAK_FIXED = 0.5f;
	private static final float ALPHA_FADE_FIXED = 0.25f;

	@Inject private Client client;
	@Inject private VancedBarrowsOverlay overlay;
	@Inject private OverlayManager overlayManager;
	@Inject private VancedBarrowsConfig config;

	private final List<BufferedImage> faceImages = new ArrayList<>();
	private int currentFaceIndex = 0;
	private boolean inBarrows = false;
	private int animationTick = -1;
	private int tickCounter = 0;

	@Provides
	VancedBarrowsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VancedBarrowsConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		reloadImages();
		log.debug("Vanced Barrows started");
	}

	private void reloadImages()
	{
		// Reset state
		faceImages.clear();
		currentFaceIndex = 0;
		animationTick = -1;
		overlay.setVisible(false);

		switch (config.faceMode())
		{
			case JD_VANCE_FACES:
				loadDefaultImages();
				break;
			case CUSTOM_FACES:
				loadCustomImages();
				break;
			case BARROWS_FACES:
				// No images to load for the overlay
				break;
		}

		if (faceImages.isEmpty() && config.faceMode() != VancedBarrowsConfig.FaceMode.BARROWS_FACES)
		{
			log.warn("No images were loaded for the selected face mode. The plugin will not display images.");
		}
	}

	private void loadDefaultImages()
	{
		log.debug("Loading default JD Vance images.");
		for (String path : VANCE_IMAGE_PATHS)
		{
			final BufferedImage image = ImageUtil.loadImageResource(getClass(), path);
			if (image != null)
			{
				faceImages.add(image);
				log.debug("Loaded {} successfully.", path);
			}
			else
			{
				log.error("Failed to load image: {}", path);
			}
		}
	}

	private void loadCustomImages()
	{
		log.debug("Attempting to load custom images.");
		final File imageDir = new File(RuneLite.RUNELITE_DIR, "barrowsfaces");

		if (imageDir.exists() && imageDir.isDirectory())
		{
			File[] imageFiles = imageDir.listFiles((dir, name) -> name.toLowerCase().endsWith(".png") || name.toLowerCase().endsWith(".jpg"));

			if (imageFiles != null)
			{
				for (File imageFile : imageFiles)
				{
					try
					{
						BufferedImage image = ImageIO.read(imageFile);
						if (image != null)
						{
							faceImages.add(image);
							log.debug("Loaded custom image {} successfully.", imageFile.getName());
						}
					}
					catch (IOException e)
					{
						log.error("Failed to load custom image: {}", imageFile.getName(), e);
					}
				}
			}
		}
		else
		{
			log.warn("Custom images directory not found: {}", imageDir.getAbsolutePath());
		}
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		overlay.setVisible(false);
		faceImages.clear();
		currentFaceIndex = 0;
		animationTick = -1;
		tickCounter = 0;

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			Widget faceWidget = client.getWidget(24, 1);
			if (faceWidget != null)
			{
				faceWidget.setHidden(false);
			}
		}

		log.debug("Vanced Barrows stopped");
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("vancedbarrows"))
		{
			log.debug("Vanced Barrows config changed, reloading images.");
			reloadImages();
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			updateBarrowsState();
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		updateBarrowsState();

		Widget faceWidget = client.getWidget(24, 1); // Barrows faces widget
		if (faceWidget != null)
		{
			faceWidget.setHidden(config.faceMode() != VancedBarrowsConfig.FaceMode.BARROWS_FACES);
		}

		if (!inBarrows || config.faceMode() == VancedBarrowsConfig.FaceMode.BARROWS_FACES)
		{
			overlay.setVisible(false);
			animationTick = -1;
			return;
		}

		tickCounter++;

		final boolean isFixedMode = !client.isResized();

		if (tickCounter >= 30) // Every 18 seconds (30 ticks)
		{
			if (faceImages.isEmpty())
			{
				overlay.setVisible(false);
				return;
			}

			tickCounter = 0;

			overlay.setImage(faceImages.get(currentFaceIndex));
			currentFaceIndex = (currentFaceIndex + 1) % faceImages.size();

			final int imageSize = isFixedMode ? IMAGE_SIZE_FIXED : IMAGE_SIZE_RESIZABLE;

			Point randLoc = getRandomOnScreenLocation(imageSize, imageSize);
			overlay.setOverlayLocation(randLoc);
			overlay.setSize(imageSize, imageSize);
			overlay.setAlpha(0.0f);
			overlay.setVisible(true);
			animationTick = 0;
		}

		if (animationTick >= 0)
		{
			float alpha;
			switch (animationTick)
			{
				case 0:
					alpha = isFixedMode ? ALPHA_FADE_FIXED : ALPHA_FADE_RESIZABLE;
					break;
				case 1:
				case 2:
					alpha = isFixedMode ? ALPHA_PEAK_FIXED : ALPHA_PEAK_RESIZABLE;
					break;
				case 3:
					alpha = isFixedMode ? ALPHA_FADE_FIXED : ALPHA_FADE_RESIZABLE;
					break;
				case 4:
					alpha = 0.0f;
					break;
				default:
					overlay.setVisible(false);
					animationTick = -1;
					return;
			}
			overlay.setAlpha(alpha);
			animationTick++;
		}
		else
		{
			overlay.setVisible(false);
		}
	}

	private void updateBarrowsState()
	{
		if (client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null)
		{
			inBarrows = false;
			return;
		}

		final int plane = client.getLocalPlayer().getWorldLocation().getPlane();
		final boolean inInstancedRegion = client.isInInstancedRegion();
		final int regionID = client.getLocalPlayer().getWorldLocation().getRegionID();
        
		boolean nowInBarrows = regionID == 14231 && (plane == 3 || (plane == 0 && inInstancedRegion));

		if (nowInBarrows != inBarrows)
		{
			log.debug("Barrows state changed: inBarrows={}", nowInBarrows);
		}

		inBarrows = nowInBarrows;
	}

	private Point getRandomOnScreenLocation(int imageWidth, int imageHeight)
	{
		int canvasWidth = client.getCanvasWidth();
		int canvasHeight = client.getCanvasHeight();

		int maxX = canvasWidth - imageWidth;
		int maxY = canvasHeight - imageHeight;

		int x = ThreadLocalRandom.current().nextInt(0, Math.max(1, maxX));
		int y = ThreadLocalRandom.current().nextInt(0, Math.max(1, maxY));

		return new Point(x, y);
	}
}

package com.VancedBarrows;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;
import java.awt.image.BufferedImage;

import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

@Singleton
public class VancedBarrowsOverlay extends Overlay
{
    private BufferedImage image;
    private boolean visible = false;
    private java.awt.Point overlayLocation = new java.awt.Point(150, 150);
    private float alpha = 1.0f;
    private int width = 128;
    private int height = 128;

    @Inject
    public VancedBarrowsOverlay()
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    public void setImage(BufferedImage image)
    {
        this.image = image;
    }

    public void setVisible(boolean visible)
    {
        this.visible = visible;
    }

    public void setAlpha(float alpha)
    {
        this.alpha = Math.max(0f, Math.min(1f, alpha));
    }

    public void setSize(int width, int height)
    {
        this.width = width;
        this.height = height;
    }

    public void setOverlayLocation(Point widgetLocation)
    {
        if (widgetLocation != null)
        {
            this.overlayLocation = new java.awt.Point(widgetLocation.getX(), widgetLocation.getY());
        }
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!visible || image == null || overlayLocation == null)
        {
            return null;
        }

        Composite original = graphics.getComposite();
        graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
        graphics.drawImage(image, overlayLocation.x, overlayLocation.y, width, height, null);
        graphics.setComposite(original);

        return new Dimension(width, height);
    }
}
package com.VancedBarrows;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VancedBarrowsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VancedBarrowsPlugin.class);
		RuneLite.main(args);
	}
}
