package com.VancedBarrows;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("vancedbarrows")
public interface VancedBarrowsConfig extends Config
{
    @ConfigItem(
            keyName = "showBarrowsFaces",
            name = "Show Barrows Faces",
            description = "Whether to show the default brothers' face popup in Barrows tunnels",
            position = 1
    )
    default boolean showBarrowsFaces()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showJD",
            name = "Show JD Vance",
            description = "Whether to show JD Vance.",
            position = 2
    )
    default boolean showJD()
    {
        return true;
    }
}

package com.VancedBarrows;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Point;
import net.runelite.api.Skill;
import net.runelite.api.widgets.Widget;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;

@Slf4j
@PluginDescriptor(
		name = "Vanced Barrows",
		description = "Replaces the Barrows Brothers' faces popup with images of JD Vance!",
		tags = {"barrows", "prayer", "overlay", "JD", "Vance"}
)
public class VancedBarrowsPlugin extends Plugin
{
	private static final int BARROWS_REGION = 14231;

	@Inject private Client client;
	@Inject private VancedBarrowsOverlay overlay;
	@Inject private OverlayManager overlayManager;
	@Inject private VancedBarrowsConfig config;

	private BufferedImage ghostFace;
	private boolean inBarrows = false;
	private int lastPrayerPoints = -1;
	private int animationTick = -1;

	@Provides
	VancedBarrowsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VancedBarrowsConfig.class);
	}

	@Override
	protected void startUp()
	{
		ghostFace = ImageUtil.loadImageResource(getClass(), "/vance.png");
		if (ghostFace == null)
		{
			log.error("Failed to load vance.png!");
		}
		else
		{
			log.debug("Loaded vance.png successfully.");
		}

		overlay.setImage(ghostFace);
		overlay.setVisible(false);
		overlayManager.add(overlay);
		log.debug("Vanced Barrows started");
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		overlay.setVisible(false);
		ghostFace = null;
		lastPrayerPoints = -1;
		animationTick = -1;
		log.debug("Vanced Barrows stopped");
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			updateBarrowsState();
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		updateBarrowsState();

		if (!inBarrows)
		{
			overlay.setVisible(false);
			lastPrayerPoints = -1;
			animationTick = -1;
			return;
		}

		int currentPrayer = client.getBoostedSkillLevel(Skill.PRAYER);
		Widget faceWidget = client.getWidget(24, 1); // Barrows faces

		if (faceWidget != null)
		{
			faceWidget.setHidden(!config.showBarrowsFaces());
		}

		if (lastPrayerPoints != -1 && currentPrayer < lastPrayerPoints)
		{
			if (config.showJD())
			{
				Point randLoc = getRandomOnScreenLocation(128, 128);
				overlay.setOverlayLocation(randLoc);
				overlay.setSize(512, 512);

				overlay.setAlpha(0.0f);
				overlay.setVisible(true);
				animationTick = 0;
			}
		}

		else if (animationTick >= 0 && config.showJD())
		{
			float alpha;

			switch (animationTick)
			{
				case 0:
					alpha = 0.325f;
					break;
				case 1:
					alpha = 0.65f;
					break;
				case 2:
					alpha = 0.65f;
					break;
				case 3:
					alpha = 0.325f;
					break;
				case 4:
					alpha = 0.0f;
					break;
				default:
					overlay.setVisible(false);
					animationTick = -1;
					return;
			}
			overlay.setAlpha(alpha);
			animationTick++;
		}

		else
		{
			overlay.setVisible(false);
		}

		lastPrayerPoints = currentPrayer;
	}


	private void updateBarrowsState()
	{
		if (client.getMapRegions() == null)
		{
			inBarrows = false;
			return;
		}

		boolean nowInBarrows = Arrays.stream(client.getMapRegions())
				.anyMatch(region -> region == BARROWS_REGION);

		if (nowInBarrows != inBarrows)
		{
			log.debug("Barrows region state changed: inBarrows={}", nowInBarrows);
		}

		inBarrows = nowInBarrows;
	}

	private Point getRandomOnScreenLocation(int imageWidth, int imageHeight)
	{
		int canvasWidth = client.getCanvasWidth();
		int canvasHeight = client.getCanvasHeight();

		int maxX = canvasWidth - imageWidth;
		int maxY = canvasHeight - imageHeight;

		int x = ThreadLocalRandom.current().nextInt(0, Math.max(1, maxX));
		int y = ThreadLocalRandom.current().nextInt(0, Math.max(1, maxY));

		return new Point(x, y);
	}
}

package com.VancedBarrows;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;
import java.awt.image.BufferedImage;

import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

@Singleton
public class VancedBarrowsOverlay extends Overlay
{
    private BufferedImage image;
    private boolean visible = false;
    private java.awt.Point overlayLocation = new java.awt.Point(150, 150);
    private float alpha = 1.0f;
    private int width = 128;
    private int height = 128;

    @Inject
    public VancedBarrowsOverlay()
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    public void setImage(BufferedImage image)
    {
        this.image = image;
    }

    public void setVisible(boolean visible)
    {
        this.visible = visible;
    }

    public void setAlpha(float alpha)
    {
        this.alpha = Math.max(0f, Math.min(1f, alpha));
    }

    public void setSize(int width, int height)
    {
        this.width = width;
        this.height = height;
    }

    public void setOverlayLocation(Point widgetLocation)
    {
        if (widgetLocation != null)
        {
            this.overlayLocation = new java.awt.Point(widgetLocation.getX(), widgetLocation.getY());
        }
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!visible || image == null || overlayLocation == null)
        {
            return null;
        }

        Composite original = graphics.getComposite();
        graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
        graphics.drawImage(image, overlayLocation.x, overlayLocation.y, width, height, null);
        graphics.setComposite(original);

        return new Dimension(width, height);
    }
}

package com.VancedBarrows;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VancedBarrowsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VancedBarrowsPlugin.class);
		RuneLite.main(args);
	}
}
