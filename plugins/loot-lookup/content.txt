package com.lootlookup;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LootLookupPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LootLookupPlugin.class);
		RuneLite.main(args);
	}
}
package com.lootlookup.views;

import com.lootlookup.LootLookupConfig;
import com.lootlookup.osrswiki.WikiItem;
import com.lootlookup.utils.Util;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.IconTextField;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.image.BufferedImage;

public class GridItem extends JPanel {

    private WikiItem item;
    private LootLookupConfig config;
    private JButton percentBtn;

    private String rarityColorStr;
    private String priceColorStr;

    private final JPanel container = new JPanel();
    private final JLabel imageLabel = new JLabel();

    private final Color bgColor = ColorScheme.DARKER_GRAY_COLOR;

    private static int maxQuantityLength = 6;

    public GridItem(WikiItem item, LootLookupConfig config, JButton percentButton) {
        this.item = item;
        this.config = config;
        this.percentBtn = percentButton;

        priceColorStr = Util.colorToHex(config.priceColor());

        rarityColorStr = Util.colorToHex(config.commonColor());
        if (item.getRarity() > 0) {
            if (item.getRarity() <= 0.01) {
                rarityColorStr = Util.colorToHex(config.rareColor());
            }
            if (item.getRarity() <= 0.001) {
                rarityColorStr = Util.colorToHex(config.superRareColor());
            }
        }

        imageLabel.setIcon(new ImageIcon(IconTextField.class.getResource(IconTextField.Icon.LOADING_DARKER.getFile())));
        imageLabel.setVerticalAlignment(SwingConstants.CENTER);
        imageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        container.setBackground(bgColor);

        setBorder(new EmptyBorder(1, 0, 0, 0));
        setLayout(new BorderLayout());

        new Thread(() -> {
            Util.downloadImage(item.getImageUrl(), (image) -> {
                BufferedImage img = item.getQuantityStr().endsWith(" (noted)") ? Util.getNotedImg(image) : image;
                imageLabel.setIcon(new ImageIcon(img));
            });
        }).start();

        JPanel bottomText = new JPanel();
        bottomText.setBackground(new Color(0, 0, 0, 0));

        bottomText.setLayout(new BorderLayout());
        String quantityLabelTextShort = item.getQuantityLabelTextShort();
        JLabel quantityLabel = new JLabel(quantityLabelTextShort.length() > maxQuantityLength ? item.getQuantityValueText() : quantityLabelTextShort);

        quantityLabel.setBackground(bgColor);
        quantityLabel.setFont(FontManager.getRunescapeSmallFont());

        setBackground(bgColor);

        setTooltipText();
        percentButton.addItemListener((evt) -> {
            setTooltipText();
        });

        container.add(imageLabel);
        add(container, BorderLayout.CENTER);
        if (config.showQuantity()) {
            bottomText.add(quantityLabel, BorderLayout.EAST);
        }
        add(bottomText, BorderLayout.SOUTH);
    }
    void setTooltipText() {
        String priceText = config.priceType() == PriceType.HA ? item.getAlchemyPriceLabelText() : item.getExchangePriceLabelText();

        setToolTipText("<html>" + item.getName() +
                (config.showQuantity() ? "<br>" + item.getQuantityLabelText() : "") +
                (config.showRarity() ? "<br><font color=\"" + rarityColorStr + "\">" + (item.getRarity() < 0 ? item.getRarityStr() : item.getRarityLabelText(percentBtn.isSelected())) + "</font>" : "") +
                (config.showPrice() ? "<br><font color=\"" + priceColorStr + "\">" + priceText + "</font>" : "") + "</html>");
    }
}

package com.lootlookup.views;

import com.lootlookup.LootLookupConfig;
import com.lootlookup.osrswiki.WikiItem;
import com.lootlookup.utils.Util;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.SwingUtil;

import javax.swing.*;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import static com.lootlookup.utils.Icons.COLLAPSE_ICON;
import static com.lootlookup.utils.Icons.EXPAND_ICON;

public class TableBox extends JPanel {
    private LootLookupConfig config;

    private WikiItem[] items;
    private ViewOption viewOption;
    private String fullHeaderStr;
    private String headerStr;
    private JButton percentBtn;

    private final JButton collapseBtn = new JButton();
    private final JPanel listViewContainer = new JPanel();
    private JPanel gridViewPanel = new JPanel();
    private final JPanel headerContainer = new JPanel();
    private final JPanel leftHeader = new JPanel();

    private final Color HEADER_BG_COLOR = ColorScheme.DARKER_GRAY_COLOR.darker();
    private final Color HOVER_COLOR = ColorScheme.DARKER_GRAY_HOVER_COLOR.darker();

    private final List<WikiItemPanel> itemPanels = new ArrayList<>();
    private static int maxHeaderLength = 28;

    public TableBox(LootLookupConfig config, WikiItem[] items, ViewOption viewOption, String headerStr, JButton percentButton) {
        this.config = config;
        this.items = items;
        this.fullHeaderStr = headerStr;
        this.headerStr = headerStr;
        this.viewOption = viewOption;
        this.percentBtn = percentButton;

        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        buildHeader();
        buildItemsContainer();
    }

    void buildHeader() {
        buildLeftHeader();
        buildHeaderContainer();
    }

    void buildLeftHeader() {
        // Label

        if (headerStr.length() > maxHeaderLength) {
            headerStr = headerStr.substring(0, maxHeaderLength) + "…"; // Manually truncate the header
        }

        JLabel headerLabel = new JLabel(headerStr);
        headerLabel.setFont(FontManager.getRunescapeBoldFont());
        headerLabel.setForeground(ColorScheme.BRAND_ORANGE);
        headerLabel.setHorizontalAlignment(JLabel.CENTER);

        leftHeader.setLayout(new BoxLayout(leftHeader, BoxLayout.X_AXIS));
        leftHeader.setBackground(HEADER_BG_COLOR);

        buildCollapseBtn();

        leftHeader.add(Box.createRigidArea(new Dimension(5, 0)));
        leftHeader.add(collapseBtn);
        leftHeader.add(Box.createRigidArea(new Dimension(10, 0)));
        leftHeader.add(headerLabel);

    }

    void buildCollapseBtn() {

        SwingUtil.removeButtonDecorations(collapseBtn);
        collapseBtn.setIcon(EXPAND_ICON);
        collapseBtn.setSelectedIcon(COLLAPSE_ICON);
        SwingUtil.addModalTooltip(collapseBtn, "Expand Table", "Collapse Table");
        collapseBtn.setBackground(HEADER_BG_COLOR);
        collapseBtn.setUI(new BasicButtonUI()); // substance breaks the layout
        collapseBtn.addActionListener(evt -> toggleCollapse());
        Util.showHandCursorOnHover(collapseBtn);
    }

    void buildHeaderContainer() {
        headerContainer.setLayout(new BorderLayout());
        headerContainer.setBackground(HEADER_BG_COLOR);
        headerContainer.setPreferredSize(new Dimension(0, 40));

        Util.showHandCursorOnHover(headerContainer);
        headerContainer.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                toggleCollapse();
            }

            @Override
            public void mouseEntered(MouseEvent evt) {
                headerContainer.setBackground(HOVER_COLOR);
                leftHeader.setBackground(HOVER_COLOR);
                collapseBtn.setBackground(HOVER_COLOR);
            }

            @Override
            public void mouseExited(MouseEvent evt) {
                headerContainer.setBackground(HEADER_BG_COLOR);
                leftHeader.setBackground(HEADER_BG_COLOR);
                collapseBtn.setBackground(HEADER_BG_COLOR);
            }
        });
        if (headerStr.endsWith("…")) {
            // If header is truncated, show the full text on hover
            headerContainer.setToolTipText(fullHeaderStr);
        }

        headerContainer.add(leftHeader, BorderLayout.WEST);
        add(headerContainer);

    }

    void buildItemsContainer() {
        switch (viewOption) {
            case LIST:
                int i = 0;

                for (WikiItem item : items) {
                    WikiItemPanel itemPanel = new WikiItemPanel(item, config, i > 0, percentBtn);
                    itemPanels.add(itemPanel);
                    listViewContainer.add(itemPanel);
                    i++;
                }

                listViewContainer.setLayout(new BoxLayout(listViewContainer, BoxLayout.Y_AXIS));
                add(listViewContainer);
                break;
            case GRID:
                gridViewPanel = new GridPanel(items, config, percentBtn);
                add(gridViewPanel);
                break;
        }
    }


    void collapse() {
        if (!isCollapsed()) {
            collapseBtn.setSelected(true);
            listViewContainer.setVisible(false);
            gridViewPanel.setVisible(false);
        }
    }

    void expand() {
        if (isCollapsed()) {
            collapseBtn.setSelected(false);
            listViewContainer.setVisible(true);
            gridViewPanel.setVisible(true);
        }
    }

    void toggleCollapse() {
        if (isCollapsed()) {
            expand();
        } else {
            collapse();
        }
    }

    boolean isCollapsed() {
        return collapseBtn.isSelected();
    }
}

package com.lootlookup.views;

import com.lootlookup.LootLookupConfig;
import com.lootlookup.osrswiki.WikiItem;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

public class GridPanel extends JPanel {

    public GridPanel(WikiItem[] items, LootLookupConfig config, JButton percentButton) {
        int itemsPerRow = config.gridRowOption().getValue();
        final int rowSize = ((items.length % itemsPerRow == 0) ? 0 : 1) + items.length / itemsPerRow;
        setLayout(new GridLayout(rowSize, itemsPerRow, 0, 0));
        setBorder(new EmptyBorder(0,0,0,0));


        for (int i = 0; i < rowSize * itemsPerRow; i++) {
            final JPanel slotContainer = new JPanel();
            slotContainer.setLayout(new BoxLayout(slotContainer, BoxLayout.X_AXIS));

            if(i < items.length) {
                slotContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
                slotContainer.add(new GridItem(items[i], config, percentButton));
                slotContainer.add(Box.createRigidArea(new Dimension(1,0)));
                slotContainer.setBorder(BorderFactory.createLineBorder(ColorScheme.DARK_GRAY_COLOR, 1));
            }
            add(slotContainer);
        }
    }
}

package com.lootlookup.views;

import com.lootlookup.LootLookupConfig;
import com.lootlookup.osrswiki.DropTableSection;
import com.lootlookup.osrswiki.WikiItem;
import com.lootlookup.utils.Util;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.materialtabs.MaterialTab;
import net.runelite.client.ui.components.materialtabs.MaterialTabGroup;
import net.runelite.client.util.SwingUtil;

import javax.swing.*;
import javax.swing.border.MatteBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class TableResultsPanel extends JPanel {
    private LootLookupConfig config;
    private DropTableSection[] dropTableSections;
    private ViewOption viewOption;
    private JButton collapseBtn;
    private JButton percentButton;

    private final List<TableBox> boxes = new ArrayList<>();
    private int selectedTabIndex;

    private final JPanel dropTableContent = new JPanel();
    private final int maxHeaderLength = 31;

    public TableResultsPanel(LootLookupConfig config, DropTableSection[] dropTableSections, ViewOption viewOption, JButton collapseButton, JButton percentButton, int selectedTabIndex) {
        this.config = config;
        this.dropTableSections = dropTableSections;
        this.viewOption = viewOption;
        this.collapseBtn = collapseButton;
        this.percentButton = percentButton;
        this.selectedTabIndex = selectedTabIndex;

        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        dropTableContent.setLayout(new BoxLayout(dropTableContent, BoxLayout.Y_AXIS));

        JScrollPane scrollPane = new JScrollPane(this);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.getVerticalScrollBar().setUnitIncrement(25);

        if (dropTableSections.length > 1) {
            MaterialTabGroup tabGroup = new MaterialTabGroup();
            tabGroup.setLayout(new GridLayout(1, dropTableSections.length, 7, 7));

            for (int i = 0; i < dropTableSections.length; i++) {
                MaterialTab tab = new MaterialTab(String.valueOf(i + 1), tabGroup, null);
                buildMaterialTab(tab, i);
                if (i == selectedTabIndex) {
                    tab.select();
                }
                tabGroup.addTab(tab);
            }
            add(tabGroup);
        }
        buildDropTableContent();
        add(dropTableContent);
    }

    void buildMaterialTab(MaterialTab tab, int index) {
        if (index < dropTableSections.length) {
            // Tooltip text
            tab.setToolTipText(dropTableSections[index].getHeader());
            // Switch Tab handler
            tab.setOnSelectEvent(() -> {
                selectedTabIndex = index;

                // Switch tab - update with new drop table content
                SwingUtilities.invokeLater(() -> {
                    remove(dropTableContent);
                    SwingUtil.fastRemoveAll(dropTableContent);
                    buildDropTableContent();
                    add(dropTableContent);
                });
                return true;
            });
            // Tab Decorations
            tab.setOpaque(true);
            tab.setVerticalAlignment(SwingConstants.CENTER);
            tab.setHorizontalAlignment(SwingConstants.CENTER);
            tab.setBackground(ColorScheme.DARKER_GRAY_COLOR);

            tab.addMouseListener(new MouseAdapter()
            {
                @Override
                public void mouseEntered(MouseEvent e)
                {
                    MaterialTab tab = (MaterialTab) e.getSource();
                    tab.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
                }

                @Override
                public void mouseExited(MouseEvent e)
                {
                    MaterialTab tab = (MaterialTab) e.getSource();
                    tab.setBackground(ColorScheme.DARKER_GRAY_COLOR);
                }
            });
            Util.showHandCursorOnHover(tab);
        }
    }

    void buildDropTableContent() {
        DropTableSection selectedSection = selectedTabIndex < dropTableSections.length ? dropTableSections[selectedTabIndex] : null;
        Map<String, WikiItem[]> dropTables = selectedSection != null ? selectedSection.getTable() : Collections.emptyMap();

        if (dropTableSections.length > 1) {
            dropTableContent.add(Box.createRigidArea(new Dimension(0, 5)));

            JPanel labelContainer = new JPanel(new BorderLayout());

            String dropsHeaderText = selectedSection.getHeader();
            if (dropsHeaderText.length() > maxHeaderLength) {
                dropsHeaderText = dropsHeaderText.substring(0, maxHeaderLength) + "…";
            }

            JLabel sectionHeaderLabel = new JLabel(dropsHeaderText);
            sectionHeaderLabel.setFont(FontManager.getRunescapeBoldFont());
            sectionHeaderLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
            if (dropsHeaderText.endsWith("…")) {
                sectionHeaderLabel.setToolTipText(selectedSection.getHeader());
            }

            labelContainer.add(sectionHeaderLabel, BorderLayout.WEST);
            dropTableContent.add(labelContainer);

            dropTableContent.add(Box.createRigidArea(new Dimension(0, 5)));
            JPanel separator = new JPanel();
            separator.setPreferredSize(new Dimension(0, 6));
            separator.setBorder(new MatteBorder(1,0,0,0, ColorScheme.DARKER_GRAY_COLOR));
            dropTableContent.add(separator);
        }

        for (Map.Entry<String, WikiItem[]> entry : dropTables.entrySet()) {
            String tableHeader = entry.getKey();
            TableBox tableBox = new TableBox(config, entry.getValue(), viewOption, tableHeader, percentButton);
            boxes.add(tableBox);

            dropTableContent.add(tableBox);
            dropTableContent.add(Box.createRigidArea(new Dimension(0, 5)));
        }
    }

    void toggleCollapse() {
        for (TableBox box : boxes) {
            if (!collapseBtn.isSelected()) {
                box.expand();
            } else if (!box.isCollapsed()) {
                box.collapse();
            }
        }
    }

    String getSelectedHeader() {
        DropTableSection selectedSection = selectedTabIndex < dropTableSections.length ? dropTableSections[selectedTabIndex] : null;
        if (selectedSection != null) {
            return selectedSection.getHeader();
        }
        return null;
    }

    int getSelectedIndex() {
        return selectedTabIndex;
    }

    void resetSelectedIndex() {
        selectedTabIndex = 0;
    }

    void setSelectedIndex(int index) {
        selectedTabIndex = index;
    }

}
package com.lootlookup.views;

public enum ViewOption {
    LIST(0),
    GRID(1);

    private final int value;

    ViewOption(final int newValue) {
        value = newValue;
    }

    public int getValue() { return value; }
}
package com.lootlookup.views;

public enum PriceType
{

	GE(0),
	HA(1);

	private final int value;

	PriceType(final int newValue) {
		value = newValue;
	}

	public int getValue() { return value; }
}

package com.lootlookup.views;

public enum GridRowOption {
    FOUR(4),
    FIVE(5);

    private final int value;

    GridRowOption(final int newValue) {
        value = newValue;
    }

    public int getValue() { return value; }
}
package com.lootlookup.views;

import com.lootlookup.LootLookupConfig;
import com.lootlookup.osrswiki.WikiItem;
import com.lootlookup.osrswiki.WikiScraper;
import com.lootlookup.utils.Util;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.IconTextField;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.net.URL;

public class WikiItemPanel extends JPanel {
    private LootLookupConfig config;

    private WikiItem item;
    private String imageUrl;
    private String itemName;

    private JButton percentBtn;

    private final Color bgColor = ColorScheme.DARKER_GRAY_COLOR;
    private final Color hoverColor = bgColor.brighter();

    private final JLabel rarityLabel = new JLabel();
    private final JLabel priceLabel = new JLabel();
    private final JLabel quantityLabel = new JLabel();
    private final JPanel imageContainer = new JPanel(new BorderLayout());
    private final JPanel leftSidePanel = new JPanel(new GridLayout(2, 1));

    private static int maxNameLength = 22;
    private static int labelsMaxLength = 25;

    public WikiItemPanel(WikiItem item, LootLookupConfig config, boolean showSeparator, JButton percentButton) {
        this.item = item;
        this.config = config;

        this.imageUrl = item.getImageUrl();
        this.itemName = item.getName();

        this.percentBtn = percentButton;

        if (itemName.length() > maxNameLength) {
            itemName = itemName.replaceAll("\\(.*\\)", "").trim(); // Don't display any text in parentheses if name is too long

            if (itemName.length() > maxNameLength) {
                itemName = itemName.substring(0, maxNameLength) + "…"; // Manually truncate the item name
            }
        }

        percentButton.addItemListener((evt) -> {
            setRarityLabelText();
        });
        ;

        setBorder(new EmptyBorder(0, 0, 5, 0));
        setLayout(new BorderLayout());
        setBackground(bgColor);

        JPanel container = new JPanel(new BorderLayout());


        JPanel paddingContainer = new JPanel(new BorderLayout());
        int padding = 2;
        paddingContainer.setBorder(new EmptyBorder(padding, padding, padding, padding));

        if (showSeparator)
            container.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, ColorScheme.DARK_GRAY_COLOR));
        paddingContainer.setBackground(bgColor);

        JPanel leftPanel = buildLeftPanel();
        JPanel rightPanel = buildRightPanel();
        rightPanel.setBackground(bgColor);

        paddingContainer.add(leftPanel, BorderLayout.WEST);
        paddingContainer.add(rightPanel, BorderLayout.EAST);

        container.add(paddingContainer);

        rarityLabel.setFont(FontManager.getRunescapeSmallFont());
        rarityLabel.setForeground(config.commonColor());
        if (item.getRarity() > 0) {
            if (item.getRarity() <= 0.01) {
                rarityLabel.setForeground(config.rareColor());
            }
            if (item.getRarity() <= 0.001) {
                rarityLabel.setForeground(config.superRareColor());
            }
        }

        priceLabel.setFont(FontManager.getRunescapeSmallFont());
        priceLabel.setForeground(config.priceColor());

        if (!config.disableItemsLinks()) {
            Util.showHandCursorOnHover(container);
            container.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent evt) {
                    String wikiUrl = WikiScraper.getWikiUrl(item.getName());
                    try {
                        Desktop.getDesktop().browse(new URL(wikiUrl).toURI());
                    } catch (Exception e) {
                    }
                }

                @Override
                public void mouseEntered(MouseEvent evt) {
                    setBackground(hoverColor);
                    paddingContainer.setBackground(hoverColor);
                    leftSidePanel.setBackground(hoverColor);
                    rightPanel.setBackground(hoverColor);
                    imageContainer.setBackground(hoverColor);
                }

                @Override
                public void mouseExited(MouseEvent evt) {
                    setBackground(bgColor);
                    paddingContainer.setBackground(bgColor);
                    leftSidePanel.setBackground(bgColor);
                    rightPanel.setBackground(bgColor);
                    imageContainer.setBackground(bgColor);
                }
            });
        }
        if (itemName.endsWith("…")) {
            // If item name is truncated, show the full name on hover
            container.setToolTipText(item.getName());
        }

        add(container);
    }

    private void downloadImage(JLabel imageLabel) {
        try {
            Util.downloadImage(this.imageUrl, (image) -> {
                BufferedImage img = item.getQuantityStr().endsWith(" (noted)") ? Util.getNotedImg(image) : image;
                imageLabel.setIcon(new ImageIcon(img));
                imageContainer.setBorder(new EmptyBorder(0, 5, 0, Math.max(30 - image.getWidth(), 5)));
            });
        } catch (Exception error) {
        }
    }

    private JPanel buildImagePanel() {
        imageContainer.setSize(30, imageContainer.getHeight());
        JLabel imageLabel = new JLabel();
        imageLabel.setIcon(new ImageIcon(IconTextField.class.getResource(IconTextField.Icon.LOADING_DARKER.getFile()))); // set loading icon

        new Thread(() -> downloadImage(imageLabel)).start();

        imageLabel.setSize(35, imageLabel.getWidth());

        imageContainer.add(imageLabel, BorderLayout.WEST);
        imageContainer.setSize(30, imageContainer.getHeight());
        imageContainer.setBackground(bgColor);
        return imageContainer;
    }


    private JPanel buildLeftPanel() {
        JPanel container = new JPanel();
        container.setLayout(new BoxLayout(container, BoxLayout.X_AXIS));
        JPanel itemImage = buildImagePanel();

        leftSidePanel.setBorder(new EmptyBorder(2, 2, 2, 2));
        leftSidePanel.setBackground(bgColor);

        JLabel itemNameLabel = new JLabel(itemName);
        itemNameLabel.setBorder(new EmptyBorder(0, 0, 3, 0));
        itemNameLabel.setFont(FontManager.getRunescapeBoldFont());
        itemNameLabel.setHorizontalAlignment(JLabel.LEFT);
        itemNameLabel.setVerticalAlignment(JLabel.CENTER);
        ;

        rarityLabel.setHorizontalAlignment(JLabel.LEFT);
        rarityLabel.setVerticalAlignment(JLabel.CENTER);
        setRarityLabelText();

        leftSidePanel.add(itemNameLabel);
        leftSidePanel.add(rarityLabel);

        container.add(itemImage);
        container.add(leftSidePanel);
        return container;
    }


    private JPanel buildRightPanel() {
        JPanel rightSidePanel = new JPanel(new GridLayout(2, 1));

        setQuantityLabelText();
        quantityLabel.setFont(FontManager.getRunescapeSmallFont());
        quantityLabel.setBorder(new EmptyBorder(0, 0, 3, 2));
        quantityLabel.setHorizontalAlignment(JLabel.RIGHT);
        quantityLabel.setVerticalAlignment(JLabel.CENTER);


        setPriceLabelText();
        priceLabel.setVerticalAlignment(JLabel.CENTER);
        priceLabel.setHorizontalAlignment(JLabel.RIGHT);


        rightSidePanel.add(quantityLabel);
        rightSidePanel.add(priceLabel);

        return rightSidePanel;
    }

    void setQuantityLabelText() {
        if (config != null && !config.showQuantity()) {
            quantityLabel.setText("");
        } else {
            quantityLabel.setText((itemName + item.getQuantityLabelText()).length() > labelsMaxLength ? item.getQuantityLabelTextShort() : item.getQuantityLabelText());
        }
    }


    void setRarityLabelText() {
        rarityLabel.setText(item.getRarityLabelText(percentBtn.isSelected()));
        if (config != null && !config.showRarity()) {
            rarityLabel.setText("");
        } else if (item.getRarity() < 0) {
            rarityLabel.setText(item.getRarityStr());
        }
    }

    void setPriceLabelText() {
        priceLabel.setText("");
        if (config != null && config.showPrice()) {
            String priceText = config.priceType() == PriceType.HA ? item.getAlchemyPriceLabelText() : item.getExchangePriceLabelText();
            String priceTextShort = config.priceType() == PriceType.HA ? item.getAlchemyPriceLabelTextShort() : item.getExchangePriceLabelTextShort();
            int price = config.priceType() == PriceType.HA ? item.getAlchemyPrice() : item.getExchangePrice();
            priceLabel.setText((itemName + priceText).length() > labelsMaxLength && price >= 1000 ? priceTextShort : priceText);
        }
    }
}

package com.lootlookup.views;

import com.lootlookup.LootLookupConfig;
import com.lootlookup.osrswiki.DropTableSection;
import com.lootlookup.osrswiki.WikiScraper;
import com.lootlookup.utils.Constants;
import com.lootlookup.utils.Util;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.SwingUtil;
import okhttp3.OkHttpClient;

import javax.swing.*;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;

import static com.lootlookup.utils.Icons.*;

public class LootLookupPanel extends PluginPanel {
    private LootLookupConfig config;
    private OkHttpClient okHttpClient;
    private TableResultsPanel tablePanel;
    private DropTableSection[] dropTableSections;
    private ViewOption viewOption = ViewOption.LIST;

    private IconTextField monsterSearchField = new IconTextField();

    private final JPanel mainPanel = new JPanel();

    private final JPanel actionsContainer = new JPanel();

    private final JPanel actionsLeft = new JPanel();
    private final JButton collapseBtn = new JButton();

    private final JPanel actionsRight = new JPanel();
    private final JButton percentBtn = new JButton();

    JRadioButton listBtn = new JRadioButton();
    JRadioButton gridBtn = new JRadioButton();
    JToggleButton externalLinkBtn = new JToggleButton();
    private final JPanel externalLinkBtnContainer = new JPanel();
    private final JPanel listBtnContainer = new JPanel();
    private final JPanel gridBtnContainer = new JPanel();
    ButtonGroup viewOptionGroup = new ButtonGroup();

    private final PluginErrorPanel errorPanel = new PluginErrorPanel();

    private int targetCombatLevel = 0;
    private int targetMonsterId = -1;

    public LootLookupPanel(LootLookupConfig config, OkHttpClient okHttpClient) {
        this.config = config;
        this.okHttpClient = okHttpClient;

        if (config != null) {
            viewOption = config.viewOption();
        }

        // Layout
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        // Main Panel

        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        // Search Field

        buildSearchField();

        // Actions Container

        actionsContainer.setLayout(new BorderLayout());
        actionsContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        actionsContainer.setPreferredSize(new Dimension(0, 29));

        // View Controls

        actionsLeft.setLayout(new BoxLayout(actionsLeft, BoxLayout.X_AXIS));
        actionsLeft.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        actionsRight.setLayout(new BoxLayout(actionsRight, BoxLayout.X_AXIS));
        actionsRight.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        // Collapse Button

        buildButton(collapseBtn, EXPAND_ICON, COLLAPSE_ICON, "Expand All", "Collapse All", evt -> {
            collapseBtn.setSelected(!collapseBtn.isSelected());
            tablePanel.toggleCollapse();
        });

        // List Button

        SwingUtil.removeButtonDecorations(listBtn);
        listBtn.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        listBtn.setIcon(LIST_ICON_FADED);
        listBtn.setRolloverIcon(LIST_ICON_HOVER);
        listBtn.setSelectedIcon(LIST_ICON);
        Util.showHandCursorOnHover(listBtn);
        listBtn.setToolTipText("List");
        listBtn.addActionListener(evt -> {
            this.viewOption = ViewOption.LIST;
            refreshMainPanel();
        });
        listBtn.setSelected(viewOption == ViewOption.LIST);
        listBtnContainer.setLayout(new BorderLayout());
        listBtnContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);


        // Grid Button

        SwingUtil.removeButtonDecorations(gridBtn);
        gridBtn.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        gridBtn.setIcon(GRID_ICON_FADED);
        gridBtn.setRolloverIcon(GRID_ICON_HOVER);
        gridBtn.setSelectedIcon(GRID_ICON);
        Util.showHandCursorOnHover(gridBtn);
        gridBtn.setToolTipText("Grid");
        gridBtn.addActionListener(evt -> {
            this.viewOption = ViewOption.GRID;
            refreshMainPanel();
        });
        gridBtn.setSelected(viewOption == ViewOption.GRID);
        gridBtnContainer.setLayout(new BorderLayout());
        gridBtnContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);


        viewOptionGroup.add(listBtn);
        viewOptionGroup.add(gridBtn);

        // Percent Button

        buildButton(percentBtn, PERCENT_ICON_FADED, PERCENT_ICON, "Toggle Rarity Percentage", "Toggle Rarity Percentage", evt -> {
            percentBtn.setSelected(!percentBtn.isSelected());
        });

        // External Link Button

        SwingUtil.removeButtonDecorations(externalLinkBtn);
        externalLinkBtn.setIcon(EXTERNAL_LINK_ICON);
        externalLinkBtn.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        externalLinkBtn.setUI(new BasicButtonUI());
        externalLinkBtn.setRolloverIcon(EXTERNAL_LINK_ICON_HOVER);
        externalLinkBtn.setToolTipText("Wiki");
        Util.showHandCursorOnHover(externalLinkBtn);
        externalLinkBtn.addActionListener((evt) -> {
            String wikiUrl = WikiScraper.getWikiUrlForDrops(monsterSearchField.getText(), tablePanel.getSelectedHeader(), targetMonsterId);
            try {
                Desktop.getDesktop().browse(new URL(wikiUrl).toURI());
            } catch (Exception e) {
            }
        });
        externalLinkBtnContainer.setLayout(new BorderLayout());


        // Error Panel - Empty State
        errorPanel.setContent(Constants.PLUGIN_NAME, "Enter a monster name or select the in-game option.");


        add(monsterSearchField);
        add(mainPanel);
        add(errorPanel);

    }


    void rebuildMainPanel() {
        remove(errorPanel);
        SwingUtil.fastRemoveAll(mainPanel);

        int defaultSelectedIndex = getSelectedIndexForCombatLevel(targetCombatLevel);
        tablePanel = new TableResultsPanel(config, dropTableSections, viewOption, collapseBtn, percentBtn, tablePanel != null ? tablePanel.getSelectedIndex() : defaultSelectedIndex);

        actionsLeft.add(Box.createRigidArea(new Dimension(5, 0)));
        actionsLeft.add(collapseBtn);

        listBtnContainer.add(listBtn, BorderLayout.CENTER);
        actionsRight.add(listBtnContainer);
        gridBtnContainer.add(gridBtn, BorderLayout.CENTER);
        actionsRight.add(gridBtnContainer);
        if (config != null & config.showRarity()) actionsRight.add(percentBtn);
        actionsRight.add(Box.createRigidArea(new Dimension(5, 0)));
        externalLinkBtnContainer.add(externalLinkBtn, BorderLayout.CENTER);
        actionsRight.add(externalLinkBtnContainer);

        actionsContainer.add(actionsLeft, BorderLayout.WEST);
        actionsContainer.add(actionsRight, BorderLayout.EAST);

        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        mainPanel.add(actionsContainer);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        mainPanel.add(tablePanel);

        mainPanel.revalidate();
        mainPanel.repaint();
    }

    void resetMainPanel() {
        SwingUtil.fastRemoveAll(mainPanel);
        mainPanel.revalidate();
        mainPanel.repaint();
        add(errorPanel);
    }

    void buildSearchField() {
        monsterSearchField.setIcon(IconTextField.Icon.SEARCH);
        monsterSearchField.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        monsterSearchField.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        monsterSearchField.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        monsterSearchField.setMinimumSize(new Dimension(0, 30));

        monsterSearchField.addActionListener(
                evt -> {
                    searchForMonsterName(monsterSearchField.getText(), 0, -1);
                });
        monsterSearchField.addMouseListener(
                new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent evt) {
                        searchForMonsterName(monsterSearchField.getText(), 0, -1);
                    }
                });
        monsterSearchField.addClearListener(
                () -> {
                    reset();
                });
    }

    void buildButton(JButton btn, ImageIcon icon, ImageIcon selectedIcon, String on, String off, ActionListener listener) {
        SwingUtil.removeButtonDecorations(btn);
        btn.setIcon(icon);
        btn.setSelectedIcon(selectedIcon);
        btn.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        btn.setUI(new BasicButtonUI());

        SwingUtil.addModalTooltip(btn, on, off);
        Util.showHandCursorOnHover(btn);
        btn.addActionListener(listener);
    }

    int getSelectedIndexForCombatLevel(int combatLevel) {
        if (combatLevel > 0) {
            for (int i = 0; i < dropTableSections.length; i++) {
                DropTableSection section = dropTableSections[i];
                String headerTextLower = section.getHeader().toLowerCase();
                if (headerTextLower.contains(String.valueOf(combatLevel))) {
                    return i;
                }

                try {
                    String[] headerTextTokens = headerTextLower.split("\\s+");
                    for (String token : headerTextTokens) {
                        if (token.contains("–")) {
                            String[] rangeTokens = token.split("–");
                            if (rangeTokens.length > 1 && rangeTokens[0].matches("\\d+") && rangeTokens[1].matches("\\d+")) {
                                int rangeLow = Integer.parseInt(rangeTokens[0]);
                                int rangeHigh = Integer.parseInt(rangeTokens[1]);

                                if (combatLevel >= rangeLow && combatLevel <= rangeHigh) {
                                    return i;
                                }
                            }
                        }
                    }
                } catch (Exception e) {}
            }
        }
        return 0;
    }


    void searchForMonsterName(String monsterName, int combatLevel, int monsterId) {
        if (monsterName.isEmpty()) return;

        monsterSearchField.setEditable(false);
        monsterSearchField.setIcon(IconTextField.Icon.LOADING_DARKER);

        targetCombatLevel = combatLevel;
        targetMonsterId = monsterId;

        WikiScraper.getDropsByMonster(okHttpClient, monsterName, monsterId).whenCompleteAsync((dropTableSections, ex) -> {
            this.dropTableSections = dropTableSections;
            if (tablePanel != null) {
                tablePanel.resetSelectedIndex();
                tablePanel.setSelectedIndex(getSelectedIndexForCombatLevel(combatLevel));
            }
            monsterSearchField.setIcon(dropTableSections.length == 0 ? IconTextField.Icon.ERROR : IconTextField.Icon.SEARCH);
            monsterSearchField.setEditable(true);
            refreshMainPanel();
        });

    }

    void resetSearchField() {
        monsterSearchField.setIcon(IconTextField.Icon.SEARCH);
        monsterSearchField.setText("");
        monsterSearchField.setEditable(true);
    }

    public void reset() {
        SwingUtilities.invokeLater(() -> {
            resetSearchField();
            resetMainPanel();
        });
    }

    public void lookupMonsterDrops(String monsterName, int combatLevel, int monsterId) {
        targetCombatLevel = combatLevel;
        targetMonsterId = monsterId;

        SwingUtilities.invokeLater(() -> {
            monsterSearchField.setText(monsterName);
            searchForMonsterName(monsterName, combatLevel, monsterId);
        });
    }

    public void refreshMainPanel() {
        if (dropTableSections != null && dropTableSections.length > 0) {
            SwingUtilities.invokeLater(() -> {
                rebuildMainPanel();
            });
        }
    }

}

package com.lootlookup;

import com.lootlookup.utils.Constants;
import com.lootlookup.views.GridRowOption;
import com.lootlookup.views.PriceType;
import com.lootlookup.views.ViewOption;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

import static com.lootlookup.utils.Constants.*;

@ConfigGroup(Constants.CONFIG_GROUP)
public interface LootLookupConfig extends Config {
    @ConfigItem(
            position = 0,
            keyName = "defaultViewOption",
            name = "Default view option",
            description = "Select default view option"
    )
    default ViewOption viewOption() {
        return ViewOption.LIST;
    }

    @ConfigItem(
            position = 1,
            keyName = "showRarity",
            name = "Rarity",
            description = "Show/hide rarity for item"
    )
    default boolean showRarity() {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "showQuantity",
            name = "Quantity",
            description = "Show/hide quantity for item"
    )
    default boolean showQuantity() {
        return true;
    }

    @ConfigItem(
            position = 3,
            keyName = "showPrice",
            name = "Show Price",
            description = "Show/hide price for item"
    )
    default boolean showPrice() {
        return false;
    }

    @ConfigItem(
            position = 4,
            keyName = "priceType",
            name = "Price Type",
            description = "Select price type for item"
    )
    default PriceType priceType() {
        return PriceType.GE;
    }

    @ConfigItem(
            position = 5,
            keyName = "disableMenuOption",
            name = "Disable Right Click Menu option",
            description = "Disable the right click menu option for monsters"
    )
    default boolean disableMenuOption() {
        return false;
    }

    @ConfigItem(
            position = 6,
            keyName = "disableItemLinks",
            name = "Disable Item links (List only)",
            description = "Disable links to OSRS Wiki page for item"
    )
    default boolean disableItemsLinks() {
        return false;
    }

    @ConfigItem(
            position = 7,
            keyName = "gridRowOption",
            name = "Items per row (Grid only)",
            description = "Number of items displayed in a grid row"
    )
    default GridRowOption gridRowOption() {
        return GridRowOption.FOUR;
    }

    @ConfigItem(
            position = 8,
            keyName = "commonColor",
            name = "Common Color",
            description = "Color to highlight the rarity of items with a value greater than 1/100"
    )
    default Color commonColor() {
        return DEFAULT_COMMON_COLOR;
    }

    @ConfigItem(
            position = 9,
            keyName = "rareColor",
            name = "Rare Color",
            description = "Color to highlight the rarity of items with a value of 1/100 - 1/1000"
    )
    default Color rareColor() {
        return DEFAULT_RARE_COLOR;
    }

    @ConfigItem(
            position = 10,
            keyName = "superRareColor",
            name = "Super Rare Color",
            description = "Color to highlight the rarity of items with a value of 1/1000 or less"
    )
    default Color superRareColor() {
        return DEFAULT_SUPER_RARE_COLOR;
    }

    @ConfigItem(
            position = 11,
            keyName = "priceColor",
            name = "Price Color",
            description = "Color to highlight item prices"
    )
    default Color priceColor() {
        return DEFAULT_PRICE_COLOR;
    }


}

package com.lootlookup.utils;

import net.runelite.client.util.ImageUtil;
import javax.swing.*;
import java.awt.image.BufferedImage;

public class Icons {
    public static final BufferedImage NAV_BUTTON = ImageUtil.loadImageResource(Icons.class, "/nav_button.png");

    final static BufferedImage collapseImg = ImageUtil.loadImageResource(Icons.class, "/collapsed.png");
    final static BufferedImage expandedImg = ImageUtil.loadImageResource(Icons.class, "/expanded.png");
    final static BufferedImage percentImg = ImageUtil.loadImageResource(Icons.class, "/percent.png");
    final static BufferedImage externalLinkImg = ImageUtil.loadImageResource(Icons.class, "/external_link.png");
    final static BufferedImage externalLinkImgResize = Util.resizeImg(externalLinkImg, 20, 20);
    final static BufferedImage listImg = ImageUtil.loadImageResource(Icons.class, "/list.png");
    final static BufferedImage gridImg = ImageUtil.loadImageResource(Icons.class, "/grid.png");

    public static final BufferedImage noteImg = ImageUtil.loadImageResource(Icons.class, "/Bank_note.png");

    public static final ImageIcon COLLAPSE_ICON = new ImageIcon(collapseImg);
    public static final ImageIcon EXPAND_ICON = new ImageIcon(expandedImg);
    public static final ImageIcon PERCENT_ICON = new ImageIcon(percentImg);
    public static final ImageIcon PERCENT_ICON_FADED =  new ImageIcon(ImageUtil.alphaOffset(percentImg, -175));

    public static final ImageIcon EXTERNAL_LINK_ICON = new ImageIcon(externalLinkImgResize);
    public static final ImageIcon EXTERNAL_LINK_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(externalLinkImgResize, -175));

    public static final ImageIcon LIST_ICON = new ImageIcon(listImg);
    public static final ImageIcon LIST_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(listImg, -180));
    public static final ImageIcon LIST_ICON_FADED = new ImageIcon(ImageUtil.alphaOffset(listImg, -220));

    public static final ImageIcon GRID_ICON = new ImageIcon(gridImg);
    public static final ImageIcon GRID_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(gridImg, -180));
    public static final ImageIcon GRID_ICON_FADED = new ImageIcon(ImageUtil.alphaOffset(gridImg, -220));

}

package com.lootlookup.utils;


import net.runelite.client.RuneLite;
import net.runelite.client.ui.ColorScheme;

import java.awt.*;

public class Constants {
    public static final String PLUGIN_NAME = "Loot Lookup";
    public static final String CONFIG_GROUP = "Loot-Lookup";
    public static final int DEFAULT_PRIORITY = 5;
    public static final String USER_AGENT = RuneLite.USER_AGENT + " (loot-lookup)";

    public static final Color DEFAULT_COMMON_COLOR = Color.white;
    public static final Color DEFAULT_RARE_COLOR = ColorScheme.BRAND_ORANGE.brighter();
    public static final Color DEFAULT_SUPER_RARE_COLOR = new Color(200, 50, 200);
    public static final Color DEFAULT_PRICE_COLOR = ColorScheme.GRAND_EXCHANGE_ALCH;
}

package com.lootlookup.utils;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.function.Consumer;

import static com.lootlookup.utils.Icons.noteImg;

public class Util {
    public static void downloadImage(String url, Consumer<BufferedImage> callback) {
        HttpURLConnection connection = null;
        try {
            connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestProperty("User-Agent", Constants.USER_AGENT);
            connection.connect();
            BufferedImage image = ImageIO.read(connection.getInputStream());
            connection.disconnect();

            callback.accept(image);
        } catch (IOException e) {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    public static BufferedImage resizeImg(BufferedImage img, int newW, int newH) {
        int w = img.getWidth();
        int h = img.getHeight();
        BufferedImage dimg = new BufferedImage(newW, newH, img.getType());
        Graphics2D g = dimg.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(img, 0, 0, newW, newH, 0, 0, w, h, null);
        g.dispose();
        return dimg;
    }

    public static BufferedImage resizeImgPerc(Object img, int percent) {
        BufferedImage buff = (BufferedImage) img;
        return resize(buff, buff.getWidth() * percent / 100, buff.getHeight() * percent / 100);
    }

    public static BufferedImage resize(BufferedImage img, int newW, int newH) {
        Image tmp = img.getScaledInstance(newW, newH, Image.SCALE_SMOOTH);
        BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = dimg.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();
        return dimg;
    }

    public static BufferedImage getNotedImg(BufferedImage image) {
        BufferedImage target = new BufferedImage(noteImg.getWidth(), noteImg.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = (Graphics2D) target.getGraphics();
        g.drawImage(noteImg, 0, 0, null);

        int drawX = ((noteImg.getWidth()  - image.getWidth()) / 2) + (image.getWidth() / 7);
        int drawY = ((noteImg.getHeight()  - image.getHeight()) / 2) + (image.getHeight() / 7);

        g.drawImage(Util.resizeImgPerc(image, 70), drawX, drawY, null);
        return target;
    }

    public static void showHandCursorOnHover(Component component) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                evt.getComponent().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent evt) {
                evt.getComponent().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
    }

    public static String colorToHex(Color color) {
        return "#" + Integer.toHexString(color.getRGB()).substring(2);
    }

    public static String rsFormat(double number) {
        int power;
        String suffix = " KMBT";
        String formattedNumber = "";

        NumberFormat formatter = new DecimalFormat("#,###.#");
        power = (int) StrictMath.log10(number);
        number = number / (Math.pow(10, (power / 3) * 3));
        formattedNumber = formatter.format(number);
        formattedNumber = formattedNumber + suffix.charAt(power / 3);
        return formattedNumber.length() > 4 ? formattedNumber.replaceAll("\\.[0-9]+", "") : formattedNumber;
    }

    public static String toPercentage(double n, int digits) {
        return String.format("%." + digits + "f", n * 100) + "%";
    }

    public static String convertDecimalToFraction(double x) {
        if (x < 0) {
            return "-" + convertDecimalToFraction(-x);
        }

        double tolerance = 1.0E-6;
        double h1 = 1;
        double h2 = 0;
        double k1 = 0;
        double k2 = 1;
        double b = x;
        do {
            double a = Math.floor(b);
            double aux = h1;
            h1 = a * h1 + h2;
            h2 = aux;
            aux = k1;
            k1 = a * k1 + k2;
            k2 = aux;
            b = 1 / (b - a);
        } while (Math.abs(x - h1 / k1) > x * tolerance);

        int h1Int = (int) h1;
        int k1Int = (int) k1;

        double denom = k1 / h1;

        int denomInt = k1Int / h1Int;

        String denomStr = String.valueOf(Math.round(denom * 100.0) / 100.0);
        if (Math.floor(denom) == denom) {
            denomStr = String.valueOf(denomInt);
        }

        return 1 + "/" + denomStr;
    }
}

package com.lootlookup.osrswiki;

import com.lootlookup.utils.Util;

import java.text.NumberFormat;


public class WikiItem {

    private String imageUrl;
    private String name;
    private int quantity;
    private String quantityStr;
    private String rarityStr;
    private double rarity;
    private int exchangePrice;
    private int alchemyPrice;

    NumberFormat nf = NumberFormat.getNumberInstance();

    public WikiItem(String imageUrl, String name, int quantity, String quantityStr, String rarityStr, double rarity, int exchangePrice, int alchemyPrice) {
        this.imageUrl = imageUrl;
        this.name = name;
        this.quantity = quantity;
        this.quantityStr = quantityStr;
        this.rarityStr = rarityStr;
        this.rarity = rarity;
        this.exchangePrice = exchangePrice;
        this.alchemyPrice = alchemyPrice;
    }

    public String getName() {
        return name;
    }

    public int getQuantity() {
        return quantity;
    }

    public String getQuantityStr() {
        return quantityStr;
    }

    public double getRarity() {
        return rarity;
    }

    public String getRarityStr() {
        return rarityStr;
    }
    public int getExchangePrice() {
        return exchangePrice;
    }
	public int getAlchemyPrice() {
		return alchemyPrice;
	}

    public String getImageUrl() {
        return imageUrl;
    }

    public String getQuantityLabelText() {
        if (quantityStr.contains("-") || quantityStr.endsWith(" (noted)")) {
            return "x" + quantityStr;
        }
        return quantity > 0 ? "x" + nf.format(quantity) : quantityStr;
    }

    public String getQuantityLabelTextShort() {
        if (quantityStr.endsWith(" (noted)")) {
            return "x" + quantityStr.replaceAll("\\(.*\\)", "(n)").trim();
        }
        return getQuantityValueText();
    }

    public String getQuantityValueText() {
        return quantity > 0 ? "x" + Util.rsFormat(quantity) : "";
    }

    public String getRarityLabelText(boolean percentMode) {
        String rarityLabelStr = rarityStr.contains(";") || rarityStr.equals("Always") || rarityStr.contains(" × ") ? rarityStr : Util.convertDecimalToFraction(rarity);
        if (percentMode) {
            rarityLabelStr = Util.toPercentage(rarity, rarity <= 0.0001 ? 3 : 2);
        }
        return rarityLabelStr;
    }

	public String getExchangePriceLabelText() {
		String priceLabelStr = exchangePrice > 0 ? nf.format(exchangePrice) + "gp" : "Not sold";
		if (name.equals("Nothing")) {
			priceLabelStr = "";
		}
		return priceLabelStr;
	}

	public String getExchangePriceLabelTextShort() {
		String priceLabelStr = exchangePrice > 0 ? Util.rsFormat(exchangePrice) : "";
		if (name.equals("Nothing")) {
			priceLabelStr = "";
		}
		return priceLabelStr;
	}

	public String getAlchemyPriceLabelText() {
		String priceLabelStr = nf.format(alchemyPrice) + "gp";
		if (name.equals("Nothing") || alchemyPrice < 0) {
			priceLabelStr = "";
		}
		return priceLabelStr;
	}

	public String getAlchemyPriceLabelTextShort() {
		String priceLabelStr = alchemyPrice > 0 ? nf.format(alchemyPrice) + "gp" : "";
        if (name.equals("Nothing") || alchemyPrice < 0) {
			priceLabelStr = "";
		}
		return priceLabelStr;
	}
}

package com.lootlookup.osrswiki;

import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.*;
import java.util.concurrent.CompletableFuture;

import com.lootlookup.utils.Constants;
import okhttp3.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class WikiScraper {
    private final static String baseUrl = "https://oldschool.runescape.wiki";
    private final static String baseWikiUrl = baseUrl + "/w/";
    private final static String baseWikiLookupUrl = baseWikiUrl + "Special:Lookup";

    private static Document doc;

    public static CompletableFuture<DropTableSection[]> getDropsByMonster(OkHttpClient okHttpClient, String monsterName, int monsterId) {
        CompletableFuture<DropTableSection[]> future = new CompletableFuture<>();

        String url;
        if (monsterId > -1) {
            url = getWikiUrlWithId(monsterName, monsterId);
        } else {
            url = getWikiUrl(monsterName);
        }

        requestAsync(okHttpClient, url).whenCompleteAsync((responseHTML, ex) -> {
            List<DropTableSection> dropTableSections = new ArrayList<>();

            if (ex != null) {
                DropTableSection[] result = new DropTableSection[0];
                future.complete(result);
            }

            doc = Jsoup.parse(responseHTML);
            Elements tableHeaders = doc.select("h2 span.mw-headline, h3 span.mw-headline, h4 span.mw-headline");

            Boolean parseDropTableSection = false;
            DropTableSection currDropTableSection = new DropTableSection();
            Map<String, WikiItem[]> currDropTable = new LinkedHashMap<>();
            int tableIndexH3 = 0;
            int tableIndexH4 = 0;

            boolean incrementH3Index = false;

            for (Element tableHeader : tableHeaders) {
                String tableHeaderText = tableHeader.text();
                String monsterNameLC = monsterName.toLowerCase();

                // --- Handle edge cases for specific pages ---
                if (monsterNameLC.equals("hespori") && tableHeaderText.equals("Main table")) continue;
                if (monsterNameLC.equals("chaos elemental") && tableHeaderText.equals("Major drops")) continue;
                if (monsterNameLC.equals("cyclops") && tableHeaderText.equals("Drops")) continue;
                if (monsterNameLC.equals("gorak") && tableHeaderText.equals("Drops")) continue;
                if (monsterNameLC.equals("undead druid") && tableHeaderText.equals("Seeds")) {
                    incrementH3Index = true;
                    continue;
                }
                ;
                // ---

                String tableHeaderTextLower = tableHeaderText.toLowerCase();
                Boolean isDropsTableHeader = tableHeaderTextLower.contains("drop") || tableHeaderTextLower.contains("levels") || isDropsHeaderForEdgeCases(monsterName, tableHeaderText);
                Boolean isPickpocketLootHeader = tableHeaderTextLower.contains("loot");
                Boolean parseH3Primary = isPickpocketLootHeader || parseH3PrimaryForEdgeCases(monsterName);

                Elements parentH2 = tableHeader.parent().select("h2");
                Boolean isParentH2 = !parentH2.isEmpty();

                Elements parentH3 = tableHeader.parent().select("h3");
                Boolean isParentH3 = !parentH3.isEmpty();

                Elements parentH4 = tableHeader.parent().select("h4");
                Boolean isParentH4 = !parentH4.isEmpty();


                // --- Handle edge cases for specific pages ---
                if (isParentH3 && tableHeaderText.equals("Regular drops")) {
                    incrementH3Index = true;
                    continue;
                }
                ;
                // ---

                if (isParentH2 || (parseH3Primary && isParentH3)) {
                    if (!currDropTable.isEmpty()) {
                        // reset section
                        currDropTableSection.setTable(currDropTable);
                        dropTableSections.add(currDropTableSection);

                        currDropTable = new LinkedHashMap<>();
                        currDropTableSection = new DropTableSection();
                    }

                    if (isDropsTableHeader || isPickpocketLootHeader) {
                        // new section
                        parseDropTableSection = true;
                        currDropTableSection.setHeader(tableHeaderText);
                    } else {
                        parseDropTableSection = false;
                    }
                } else if (parseDropTableSection && (isParentH3 || isParentH4)) {
                    String element = isParentH4 ? "h4" : "h3";
                    int tableIndex = isParentH4 ? tableIndexH4 : tableIndexH3;
                    // parse table
                    WikiItem[] tableRows = getTableItems(tableIndex, element + " ~ table.item-drops");

                    if (tableRows.length > 0 && !currDropTable.containsKey(tableHeaderText)) {
                        currDropTable.put(tableHeaderText, tableRows);
                        if (isParentH4) {
                            tableIndexH4++;
                            if (incrementH3Index) {
                                tableIndexH3++;
                            }
                        } else {
                            tableIndexH3++;
                        }
                    }
                }
            }

            if (!currDropTable.isEmpty()) {
                currDropTableSection.setTable(currDropTable);
                dropTableSections.add(currDropTableSection);
            }

            if (dropTableSections.isEmpty()) {
                tableHeaders = doc.select("h2 span.mw-headline");

                if (!tableHeaders.isEmpty()) {
                    WikiItem[] tableRows = getTableItems(0, "h2 ~ table.item-drops");
                    if (tableRows.length > 0) {
                        currDropTable = new LinkedHashMap<>();
                        currDropTable.put("Drops", tableRows);
                        dropTableSections.add(new DropTableSection("Drops", currDropTable));
                    }
                }
            }

            DropTableSection[] result = dropTableSections.toArray(new DropTableSection[dropTableSections.size()]);
            future.complete(result);
        });

        return future;
    }

    private static WikiItem[] getTableItems(int tableIndex, String selector) {
        List<WikiItem> wikiItems = new ArrayList<>();
        Elements dropTables = doc.select(selector);

        if (dropTables.size() > tableIndex) {
            Elements dropTableRows = dropTables.get(tableIndex).select("tbody tr");
            for (Element dropTableRow : dropTableRows) {
                String[] lootRow = new String[6];
                Elements dropTableCells = dropTableRow.select("td");
                int index = 1;

                for (Element dropTableCell : dropTableCells) {
                    String cellContent = dropTableCell.text();
                    Elements images = dropTableCell.select("img");

                    if (images.size() != 0) {
                        String imageSource = images.first().attr("src");
                        if (!imageSource.isEmpty()) {
                            lootRow[0] = baseUrl + imageSource;
                        }
                    }

                    if (cellContent != null && !cellContent.isEmpty() && index < 6) {
                        cellContent = filterTableContent(cellContent);
                        lootRow[index] = cellContent;
                        index++;
                    }
                }

                if (lootRow[0] != null) {
                    WikiItem wikiItem = parseRow(lootRow);
                    wikiItems.add(wikiItem);
                }
            }
        }


        WikiItem[] result = new WikiItem[wikiItems.size()];
        return wikiItems.toArray(result);
    }

    public static WikiItem parseRow(String[] row) {
        String imageUrl = "";
        String name = "";

        double rarity = -1;
        String rarityStr = "";

        int quantity = 0;
        String quantityStr = "";
        int exchangePrice = -1;
        int alchemyPrice = -1;

        if (row.length > 4) {
            imageUrl = row[0];
            name = row[1];
            if (name.endsWith("(m)")) {
                // (m) indicates members only, remove because it's not part of actual item name
                name = name.substring(0, name.length() - 3);
            }

            NumberFormat nf = NumberFormat.getNumberInstance();

            quantityStr = row[2];
            quantityStr = quantityStr.replaceAll("–", "-").trim();
            try {
                String[] quantityStrs = quantityStr.replaceAll("\\s+", "").split("-");
                String firstQuantityStr = quantityStrs.length > 0 ? quantityStrs[0] : null;
                quantity = nf.parse(firstQuantityStr).intValue();
            } catch (ParseException e) {
            }

            rarityStr = row[3];
            if (rarityStr.startsWith("~")) {
                rarityStr = rarityStr.substring(1);
            } else if (rarityStr.startsWith("2 × ") || rarityStr.startsWith("3 × ")) {
                rarityStr = rarityStr.substring(4);
            }

            try {
                String[] rarityStrs = rarityStr.replaceAll("\\s+", "").split(";");
                String firstRarityStr = rarityStrs.length > 0 ? rarityStrs[0] : null;

                if (firstRarityStr != null) {
                    if (firstRarityStr.equals("Always")) {
                        rarity = 1.0;
                    } else {
                        String[] fraction = firstRarityStr.split("/");
                        if (fraction.length > 1) {
                            double numer = nf.parse(fraction[0]).doubleValue();
                            double denom = nf.parse(fraction[1]).doubleValue();
                            rarity = numer / denom;
                        }

                    }
                }
            } catch (ParseException ex) {
            }


            try {
                exchangePrice = nf.parse(row[4]).intValue();
            } catch (ParseException ex) {
            }
            try {
                alchemyPrice = nf.parse(row[5]).intValue();
            } catch (ParseException ex) {
            }
        }
        return new WikiItem(imageUrl, name, quantity, quantityStr, rarityStr, rarity, exchangePrice, alchemyPrice);
    }


    public static String filterTableContent(String cellContent) {
        return cellContent.replaceAll("\\[.*\\]", "");
    }

    public static String getWikiUrl(String itemOrMonsterName) {
        String sanitizedName = sanitizeName(itemOrMonsterName);
        return baseWikiUrl + sanitizedName;
    }

    public static String getWikiUrlWithId(String monsterName, int id) {
        String sanitizedName = sanitizeName(monsterName);
        // --- Handle edge cases for specific pages ---
        if(id == 7851 || id == 7852) {
            // Redirect Dusk and Dawn to Grotesque Guardians page
            id = -1;
            sanitizedName = "Grotesque_Guardians";
        }
        // ---
        return baseWikiLookupUrl + "?type=npc&id=" + String.valueOf(id) + "&name=" + sanitizedName;
    }

    public static String getWikiUrlForDrops(String monsterName, String anchorText, int monsterId) {
        if (monsterId > -1) {
            return getWikiUrlWithId(monsterName, monsterId);
        }
        String sanitizedMonsterName = sanitizeName(monsterName);
        String anchorStr = "Drops";
        if (anchorText != null) {
            anchorStr = anchorText.replaceAll("\\s+", "_");
        }
        return baseWikiUrl + sanitizedMonsterName + "#" + anchorStr;
    }

    public static String sanitizeName(String name) {
        // --- Handle edge cases for specific pages ---
        if (name.equalsIgnoreCase("tzhaar-mej")) {
            name = "tzhaar-mej (monster)";
        }
        if(name.equalsIgnoreCase("dusk") || name.equalsIgnoreCase("dawn")) {
            name = "grotesque guardians";
        }
        // ---
        name = name.trim().toLowerCase().replaceAll("\\s+", "_");
        return name.substring(0, 1).toUpperCase() + name.substring(1);
    }

    public static Boolean isDropsHeaderForEdgeCases(String monsterName, String tableHeaderText) {
        String monsterNameLC = monsterName.toLowerCase();
        String tableHeaderTextLower = tableHeaderText.toLowerCase();
        return (monsterNameLC.equals("cyclops") && (
                tableHeaderTextLower.contains("warriors' guild") ||
                        tableHeaderText.equals("Ardougne Zoo")))
                || (monsterNameLC.equals("vampyre juvinate") &&
                tableHeaderTextLower.equals("returning a juvinate to human"));
    }

    public static Boolean parseH3PrimaryForEdgeCases(String monsterName) {
        String monsterNameLC = monsterName.toLowerCase();
        return monsterNameLC.equals("cyclops");
    }

    private static CompletableFuture<String> requestAsync(OkHttpClient okHttpClient, String url) {
        CompletableFuture<String> future = new CompletableFuture<>();

        Request request = new Request.Builder().url(url).header("User-Agent", Constants.USER_AGENT).build();

        okHttpClient
                .newCall(request)
                .enqueue(
                        new Callback() {
                            @Override
                            public void onFailure(Call call, IOException ex) {
                                future.completeExceptionally(ex);
                            }

                            @Override
                            public void onResponse(Call call, Response response) throws IOException {
                                try (ResponseBody responseBody = response.body()) {
                                    if (!response.isSuccessful()) future.complete("");

                                    future.complete(responseBody.string());
                                } finally {
                                    response.close();
                                }
                            }
                        });

        return future;
    }

}
package com.lootlookup.osrswiki;

import java.util.Map;

public class DropTableSection {
    private String header;
    private Map<String, WikiItem[]> table;

    public DropTableSection() {
    }

    public DropTableSection(String header, Map<String, WikiItem[]> table) {
        this.header = header;
        this.table = table;
    }

    public void setHeader(String newHeader) {
        this.header = newHeader;
    }

    public void setTable(Map<String, WikiItem[]> newTable) {
        this.table = newTable;
    }

    public String getHeader() {
        return header;
    }

    public Map<String, WikiItem[]> getTable() {
        return table;
    }
}

package com.lootlookup;

import com.google.inject.Provides;

import javax.inject.Inject;
import javax.swing.*;
import java.util.Arrays;

import com.lootlookup.utils.Constants;
import com.lootlookup.utils.Icons;
import com.lootlookup.views.LootLookupPanel;
import net.runelite.api.*;
import net.runelite.api.events.MenuOpened;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import okhttp3.OkHttpClient;

@PluginDescriptor(
        name = Constants.PLUGIN_NAME
)
public class LootLookupPlugin extends Plugin {
    @Inject
    private Client client;
    @Inject
    private ClientToolbar clientToolbar;
    @Inject
    private LootLookupConfig config;
    @Inject
    public OkHttpClient okHttpClient;

    private LootLookupPanel panel;
    private NavigationButton navButton;

    @Override
    protected void startUp() {
        panel = new LootLookupPanel(config, okHttpClient);

        navButton =
                NavigationButton.builder()
                        .tooltip(Constants.PLUGIN_NAME)
                        .icon(Icons.NAV_BUTTON)
                        .priority(Constants.DEFAULT_PRIORITY)
                        .panel(panel)
                        .build();

        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown() {
        clientToolbar.removeNavigation(navButton);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getGroup().equals(Constants.CONFIG_GROUP)) {
            switch (event.getKey()) {
                case "showRarity":
                case "showQuantity":
                case "showPrice":
                case "priceType":
                case "disableItemLinks":
                case "commonColor":
                case "rareColor":
                case "superRareColor":
                case "priceColor":
                case "gridRowOption":
                    if (panel != null) {
                        panel.refreshMainPanel();
                    }
            }
        }
    }

    /**
     * Insert option adjacent to "Examine" when target is attackable NPC
     *
     * @param event
     */
    @Subscribe
    public void onMenuOpened(MenuOpened event) {
        final NPC[] cachedNPCs = client.getCachedNPCs();
        MenuEntry[] menuEntries = event.getMenuEntries();

        boolean isTargetAttackableNPC = false;
        String targetMonsterName = "";
        int combatLevel = 0;
        int monsterId = -1;

        for (MenuEntry menuEntry : menuEntries) {
            MenuAction menuType = menuEntry.getType();

            if (menuType == MenuAction.EXAMINE_NPC || menuType == MenuAction.NPC_SECOND_OPTION || menuType == MenuAction.NPC_FIFTH_OPTION) {
                String optionText = menuEntry.getOption();
                int id = menuEntry.getIdentifier();

                if (id < cachedNPCs.length) {
                    NPC target = cachedNPCs[id];

                    if (target != null) {
                        combatLevel = target.getCombatLevel();
                        monsterId = target.getId();

                        if (optionText.equals("Attack") && combatLevel > 0) {
                            isTargetAttackableNPC = true;
                            targetMonsterName = target.getName();
                        }
                    }
                }
            }
        }

        if (isTargetAttackableNPC && !config.disableMenuOption()) {
            MenuEntry entryToAppendOn = menuEntries[menuEntries.length - 1];

            int idx = Arrays.asList(menuEntries).indexOf(entryToAppendOn);

            String finalTargetMonsterName = targetMonsterName;
            int finalCombatLevel = combatLevel;
            int finalMonsterId = monsterId;

            client
                    .createMenuEntry(idx - 1)
                    .setOption("Lookup Drops")
                    .setTarget(entryToAppendOn.getTarget())
                    .setIdentifier(entryToAppendOn.getIdentifier())
                    .setParam1(entryToAppendOn.getParam1())
                    .setType(MenuAction.of(MenuAction.RUNELITE.getId()))
                    .onClick(
                            evt -> {
                                selectNavButton();
                                panel.lookupMonsterDrops(finalTargetMonsterName, finalCombatLevel, finalMonsterId);
                            });
        }
    }


    @Provides
    LootLookupConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(LootLookupConfig.class);
    }

    public void selectNavButton() {
        SwingUtilities.invokeLater(
                () -> {
                    clientToolbar.openPanel(navButton);
                });
    }
}
