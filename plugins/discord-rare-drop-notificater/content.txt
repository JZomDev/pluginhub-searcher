package com.masterkenth;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DiscordRareDropNotificaterPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DiscordRareDropNotificaterPlugin.class);
		RuneLite.main(args);
	}
}
package com.masterkenth;

import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Objects;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.masterkenth.models.Npc;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Singleton;

@Slf4j
@Singleton
public class JsonUtils
{
	private final List<Npc> npcList;

	@Inject
	public JsonUtils(Gson gson)
	{
		try(InputStreamReader reader = new InputStreamReader(
				Objects.requireNonNull(DiscordRareDropNotificaterPlugin.class.getResourceAsStream("/monster-drops.json")),
				StandardCharsets.UTF_8)) {
			npcList = gson.fromJson(reader, new TypeToken<List<Npc>>() {}.getType());
		}
		catch (Exception e)
		{
			log.error("Error getting json", e);
			throw new RuntimeException(e);
		}
	}

	public Npc getNpc(String npcName)
	{
		return npcList.stream().filter((i) -> npcName.equals(i.getNpcName())).findFirst().orElse(null);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("discordraredropnotificater")
public interface DiscordRareDropNotificaterConfig extends Config
{
	@ConfigSection(
			position = 1,
			name = "Webhook Options",
			description = "Manage how the plugin sends drops to your discord server"
	)
	String webhookOptionsSection = "webhookOptionsSection";

	@ConfigSection(
			position = 2,
			name = "Item Lists",
			description = "Ignored and whitelisted items"
	)
	String itemListsSection = "itemListsSection";

	@ConfigSection(
			position = 3,
			name = "Item Filters",
			description = "Manage filters that handle if drop should be posted or not"
	)
	String itemFiltersSection = "itemFiltersSection";

	@ConfigSection(
			position = 4,
			name = "Player Filters",
			description = "Manage filters to prevent drops being posted from all your accounts"
	)
	String playerFiltersSection = "playerFiltersSection";

	@ConfigItem(
		keyName = "webhookurl",
		name = "Discord webhook URL(s)",
		description = "The Discord Webhook URL(s) to use, separated by newline",
		section = webhookOptionsSection,
		position = 1
	)
	default String webhookUrl()
	{
		return "";
	}

	@ConfigItem(
		keyName = "minrarity",
		name = "Min NPC rarity (1/x)",
		description = "NPC drops more rare than this are posted to Discord",
		section = itemFiltersSection,
		position = 1
	)
	default int minRarity()
	{
		return 64;
	}

	@ConfigItem(
		keyName = "minvalue",
		name = "Min NPC value",
		description = "NPC drops more valuable (GE or HA) than this are posted to Discord",
		section = itemFiltersSection,
		position = 2
	)
	default int minValue()
	{
		return 50000;
	}

	@ConfigItem(
		keyName = "andinsteadofor",
		name = "Require both rarity and value",
		description = "Whether drops should meet both rarity AND value requirements to get posted",
		section = itemFiltersSection,
		position = 3
	)
	default boolean andInsteadOfOr()
	{
		return false;
	}

	@ConfigItem(
		keyName = "eventuniques",
		name = "Always send uniques (events)",
		description = "Whether unique drops from events should always get posted (COX, TOB, ...)",
		section = itemFiltersSection,
		position = 4
	)
	default boolean sendUniques()
	{
		return true;
	}

	@ConfigItem(
			keyName = "sendscreenshot",
			name = "Send screenshot",
			description = "Whether to send a screenshot along with the message",
			section = webhookOptionsSection,
			position = 4
	)
	default boolean sendScreenshot()
	{
		return true;
	}

	@ConfigItem(
		keyName = "ignoredkeywords",
		name = "Ignored items",
		description = "Comma-separated list of items to ignore, keywords are allowed as well",
		section = itemListsSection,
		position = 1
	)
	default String ignoredKeywords()
	{
		return "grimy,seed";
	}

	@ConfigItem(
		keyName = "whiteListedItems",
		name = "Whitelisted items",
		description = "Comma-separated list of items which you want notifications for regardless of the ignored keywords",
		section = itemListsSection,
		position = 2
	)
	default String whiteListedItems() { return "enhanced crystal weapon seed,crystal armour seed"; }

	@ConfigItem(
			keyName = "whiteListedRSNs",
			name = "Whitelisted RSNs",
			description = "(optional) Comma-separated list of RSNs which are allowed to post to the webhook",
			section = playerFiltersSection,
			position = 1
	)
	default String whiteListedRSNs() { return ""; }

	@ConfigItem(
			keyName = "sendEmbeddedMessage",
			name = "Send embedded message",
			description = "Whether to send a embedded Discord message",
			section = webhookOptionsSection,
			position = 2
	)
	default boolean sendEmbeddedMessage()
	{
		return true;
	}

	@ConfigItem(
			keyName = "sendRarityAndValue",
			name = "Send rarity and value",
			description = "Whether to send Rarity and Value within the embedded Discord message",
			section = webhookOptionsSection,
			position = 3
	)
	default boolean sendRarityAndValue()
	{
		return true;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth.discord;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class Webhook extends Object
{
	@Getter
	@Setter
	private Embed[] embeds;

	@Getter
	@Setter
	private String content;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth.discord;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class Image extends Object
{
	@Getter
	@Setter
	private String url;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth.discord;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class Field extends Object
{
	@Getter
	@Setter
	private String name;
	@Getter
	@Setter
	private String value;
	@Getter
	@Setter
	private boolean inline;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth.discord;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class Embed extends Object
{
	@Getter
	@Setter
	private Author author;
	@Getter
	@Setter
	private String description;
	@Getter
	@Setter
	private Image thumbnail;
	@Getter
	@Setter
	private Image image;
	@Getter
	@Setter
	private Field[] fields;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth.discord;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class Author extends Object
{
	@Getter
	@Setter
	private String name;
	@Getter
	@Setter
	private String icon_url;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth;

import java.util.*;
import java.util.concurrent.CompletableFuture;

import com.masterkenth.models.Npc;
import com.masterkenth.models.NpcItem;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemComposition;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemVariationMapping;

import javax.inject.Inject;

@Slf4j
public class RarityChecker
{
	@Inject
	private JsonUtils jsonUtils;

	public ItemData CheckRarityEvent(String eventName, ItemData item, ItemManager itemManager)
	{
		String lowerName = eventName.toLowerCase();
		Map<Integer, RarityItemData> table = EventRarity.EVENT_TABLE_MAPPING.getOrDefault(lowerName, null);
		RarityItemData rarityInfo = null;
		if (table != null)
		{
			if (table.containsKey(item.ItemId))
			{
				rarityInfo = table.get(item.ItemId);
			}
			else
			{
				int mapId = ItemVariationMapping.map(item.ItemId);
				Collection<Integer> idVariations = ItemVariationMapping.getVariations(mapId);

				String origName = itemManager.getItemComposition(item.ItemId).getName();

				for (Integer id : idVariations)
				{
					if (table.containsKey(id))
					{
						String variationName = itemManager.getItemComposition(id).getName();
						if (origName.equals(variationName))
						{
							rarityInfo = table.get(item.ItemId);
							break;
						}
						else
						{
							log.warn(String.format("item id %d=%d found in table '%s' but other name ('%s' vs '%s')", item.ItemId, id,
								eventName, origName, variationName));
						}
					}
				}
			}
		}
		else
		{
			log.warn(String.format("No event table for '%s'", eventName));
		}
		if (rarityInfo != null)
		{
			item.Unique = rarityInfo.Unique;
			item.Rarity = rarityInfo.Rarity;
		}
		else
		{
			log.warn(String.format("no rarity for item %d in table '%s'", item.ItemId, eventName));
		}
		return item;
	}

	public ItemData CheckRarityPickpocket(String pickpocketName, ItemData item, ItemManager itemManager)
	{
		RarityItemData itemData = PickpocketRarity.PICKPOCKET_TABLE_MAPPING.getOrDefault(item.ItemId, null);
		if (itemData != null)
		{
			item.Rarity = itemData.Rarity;
			item.Unique = itemData.Unique;
		}

		return item;
	}

	public CompletableFuture<ItemData> CheckRarityNPC(String npcName, ItemData itemData, ItemManager itemManager, int quantity)
	{
		CompletableFuture<ItemData> f = new CompletableFuture<>();

		// Call this before the API call so we're in the main clients thread.
		ItemComposition ic = itemManager.getItemComposition(itemData.ItemId);
		String origName = ic.getName();
		int mapId = ItemVariationMapping.map(itemData.ItemId);
		Collection<Integer> idVariations = new HashSet<Integer>();
		idVariations.add(itemData.ItemId); // First item, will be resolved first.

		// Map all ids
		for (Integer id : ItemVariationMapping.getVariations(mapId))
		{
			String variationName = itemManager.getItemComposition(id).getName();
			if (origName.equals(variationName))
			{
				idVariations.add(id);
			}
		}


		try
		{
			Npc npcDrops = jsonUtils.getNpc(npcName);

			if(npcDrops != null) {
				for (Integer id : idVariations)
				{
					NpcItem item = npcDrops.getItems().stream().filter((i) -> id.equals(i.getItemID())).findFirst().orElse(null);

					if (item != null)
					{
						itemData.Rarity = item.getRarity();
						String dropQuantityStr = item.getQuantity();
						String[] quantityParts = dropQuantityStr.split("-");
						if (quantityParts.length == 2)
						{
							try
							{
								int dropQuantityMin = Integer.parseInt(quantityParts[0]);
								int dropQuantityMax = Integer.parseInt(quantityParts[1]);
								if (quantity < dropQuantityMin || quantity > dropQuantityMax)
									continue;
							}
							catch (Exception ex)
							{
								ex.printStackTrace();
								// Assume it matches;
							}
						}
						else
						{
							try
							{
								int dropQuantity = Integer.parseInt(dropQuantityStr);
								if (dropQuantity != quantity)
									continue;
							} catch (Exception ex)
							{
								ex.printStackTrace();
								// Assume it matches;
							}
						}

						itemData.Unique = false;
						f.complete(itemData);
					}
				}
			}

			// No entry for item, default to 100% drop
			f.complete(itemData);
		}
		catch (Exception e)
		{
			f.completeExceptionally(e);
		}

		return f;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth;

import com.google.common.collect.ImmutableMap;
import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import net.runelite.api.ItemID;

// All rarity data have been manually scraped from osrs wiki
// Data set only contain (subjectively) rare drops so that if a drop matches against an event it is always posted to Discord
@AllArgsConstructor
public enum EventRarity
{
	// @formatter:off
	BARROWS_AHRIMS_HOOD("barrows", ItemID.AHRIMS_HOOD, 7.0f / 102.0f, true),
	BARROWS_AHRIMS_ROBETOP("barrows", ItemID.AHRIMS_ROBETOP, 7.0f / 102.0f, true),
	BARROWS_AHRIMS_ROBESKIRT("barrows", ItemID.AHRIMS_ROBESKIRT, 7.0f / 102.0f, true),
	BARROWS_AHRIMS_STAFF("barrows", ItemID.AHRIMS_STAFF, 7.0f / 102.0f, true),
	BARROWS_DHAROKS_HELM("barrows", ItemID.DHAROKS_HELM, 7.0f / 102.0f, true),
	BARROWS_DHAROKS_PLATEBODY("barrows", ItemID.DHAROKS_PLATEBODY, 7.0f / 102.0f, true),
	BARROWS_DHAROKS_PLATELEGS("barrows", ItemID.DHAROKS_PLATELEGS, 7.0f / 102.0f, true),
	BARROWS_DHAROKS_GREATAXE("barrows", ItemID.DHAROKS_GREATAXE, 7.0f / 102.0f, true),
	BARROWS_GUTHANS_HELM("barrows", ItemID.GUTHANS_HELM, 7.0f / 102.0f, true),
	BARROWS_GUTHANS_PLATEBODY("barrows", ItemID.GUTHANS_PLATEBODY, 7.0f / 102.0f, true),
	BARROWS_GUTHANS_CHAINSKIRT("barrows", ItemID.GUTHANS_CHAINSKIRT, 7.0f / 102.0f, true),
	BARROWS_GUTHANS_WARSPEAR("barrows", ItemID.GUTHANS_WARSPEAR, 7.0f / 102.0f, true),
	BARROWS_KARILS_COIF("barrows", ItemID.KARILS_COIF, 7.0f / 102.0f, true),
	BARROWS_KARILS_LEATHERTOP("barrows", ItemID.KARILS_LEATHERTOP, 7.0f / 102.0f, true),
	BARROWS_KARILS_LEATHERSKIRT("barrows", ItemID.KARILS_LEATHERSKIRT, 7.0f / 102.0f, true),
	BARROWS_KARILS_CROSSBOW("barrows", ItemID.KARILS_CROSSBOW, 7.0f / 102.0f, true),
	BARROWS_TORAGS_HELM("barrows", ItemID.TORAGS_HELM, 7.0f / 102.0f, true),
	BARROWS_TORAGS_PLATEBODY("barrows", ItemID.TORAGS_PLATEBODY, 7.0f / 102.0f, true),
	BARROWS_TORAGS_PLATELEGS("barrows", ItemID.TORAGS_PLATELEGS, 7.0f / 102.0f, true),
	BARROWS_TORAGS_HAMMERS("barrows", ItemID.TORAGS_HAMMERS, 7.0f / 102.0f, true),
	BARROWS_VERACS_HELM("barrows", ItemID.VERACS_HELM, 7.0f / 102.0f, true),
	BARROWS_VERACS_BRASSARD("barrows", ItemID.VERACS_BRASSARD, 7.0f / 102.0f, true),
	BARROWS_VERACS_PLATESKIRT("barrows", ItemID.VERACS_PLATESKIRT, 7.0f / 102.0f, true),
	BARROWS_VERACS_FLAIL("barrows", ItemID.VERACS_FLAIL, 7.0f / 102.0f, true),

	BARROWS_LOOP_HALF_OF_KEY("barrows", ItemID.LOOP_HALF_OF_KEY, 7.0f / 102.0f, false),
	BARROWS_TOOTH_HALF_OF_KEY("barrows", ItemID.TOOTH_HALF_OF_KEY, 7.0f / 102.0f, false),
	BARROWS_DRAGON_MED_HELM("barrows", ItemID.DRAGON_MED_HELM, 7.0f / 102.0f, false),

	CHAMBERS_OF_XERIC_DEXTEROUS_PRAYER_SCROLL("chambers of xeric", ItemID.DEXTEROUS_PRAYER_SCROLL, 0.2899f, true),
	CHAMBERS_OF_XERIC_ARCANE_PRAYER_SCROLL("chambers of xeric", ItemID.ARCANE_PRAYER_SCROLL, 0.2899f, true),
	CHAMBERS_OF_XERIC_TWISTED_BUCKLER("chambers of xeric", ItemID.TWISTED_BUCKLER, 0.058f, true),
	CHAMBERS_OF_XERIC_DRAGON_HUNTER_CROSSBOW("chambers of xeric", ItemID.DRAGON_HUNTER_CROSSBOW, 0.058f, true),
	CHAMBERS_OF_XERIC_DINHS_BULWARK("chambers of xeric", ItemID.DINHS_BULWARK, 0.0435f, true),
	CHAMBERS_OF_XERIC_ANCESTRAL_HAT("chambers of xeric", ItemID.ANCESTRAL_HAT, 0.0435f, true),
	CHAMBERS_OF_XERIC_ANCESTRAL_ROBE_TOP("chambers of xeric", ItemID.ANCESTRAL_ROBE_TOP, 0.0435f, true),
	CHAMBERS_OF_XERIC_ANCESTRAL_ROBE_BOTTOM("chambers of xeric", ItemID.ANCESTRAL_ROBE_BOTTOM, 0.0435f, true),
	CHAMBERS_OF_XERIC_DRAGON_CLAWS("chambers of xeric", ItemID.DRAGON_CLAWS, 0.0435f, true),
	CHAMBERS_OF_XERIC_ELDER_MAUL("chambers of xeric", ItemID.ELDER_MAUL, 0.029f, true),
	CHAMBERS_OF_XERIC_KODAI_INSIGNIA("chambers of xeric", ItemID.KODAI_INSIGNIA, 0.029f, true),
	CHAMBERS_OF_XERIC_TWISTED_BOW("chambers of xeric", ItemID.TWISTED_BOW, 0.029f, true),

	CHAMBERS_OF_XERIC_DEATH_RUNE("chambers of xeric", ItemID.DEATH_RUNE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_BLOOD_RUNE("chambers of xeric", ItemID.BLOOD_RUNE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_SOUL_RUNE("chambers of xeric", ItemID.SOUL_RUNE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_RUNE_ARROW("chambers of xeric", ItemID.RUNE_ARROW, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_DRAGON_ARROW("chambers of xeric", ItemID.DRAGON_ARROW, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_RANARR_WEED("chambers of xeric", ItemID.GRIMY_RANARR_WEED, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_TOADFLAX("chambers of xeric", ItemID.GRIMY_TOADFLAX, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_IRIT_LEAF("chambers of xeric", ItemID.GRIMY_IRIT_LEAF, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_AVANTOE("chambers of xeric", ItemID.GRIMY_AVANTOE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_KWUARM("chambers of xeric", ItemID.GRIMY_KWUARM, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_SNAPDRAGON("chambers of xeric", ItemID.GRIMY_SNAPDRAGON, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_CADANTINE("chambers of xeric", ItemID.GRIMY_CADANTINE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_LANTADYME("chambers of xeric", ItemID.GRIMY_LANTADYME, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_DWARF_WEED("chambers of xeric", ItemID.GRIMY_DWARF_WEED, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GRIMY_TORSTOL("chambers of xeric", ItemID.GRIMY_TORSTOL, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_SILVER_ORE("chambers of xeric", ItemID.SILVER_ORE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_COAL("chambers of xeric", ItemID.COAL, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_GOLD_ORE("chambers of xeric", ItemID.GOLD_ORE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_MITHRIL_ORE("chambers of xeric", ItemID.MITHRIL_ORE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_ADAMANTITE_ORE("chambers of xeric", ItemID.ADAMANTITE_ORE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_RUNITE_ORE("chambers of xeric", ItemID.RUNITE_ORE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_UNCUT_SAPPHIRE("chambers of xeric", ItemID.UNCUT_SAPPHIRE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_UNCUT_EMERALD("chambers of xeric", ItemID.UNCUT_EMERALD, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_UNCUT_RUBY("chambers of xeric", ItemID.UNCUT_RUBY, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_UNCUT_DIAMOND("chambers of xeric", ItemID.UNCUT_DIAMOND, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_ANCIENT_TABLET("chambers of xeric", ItemID.ANCIENT_TABLET, 0.10f, false),
	CHAMBERS_OF_XERIC_LIZARDMAN_FANG("chambers of xeric", ItemID.LIZARDMAN_FANG, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_PURE_ESSENCE("chambers of xeric", ItemID.PURE_ESSENCE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_SALTPETRE("chambers of xeric", ItemID.SALTPETRE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_TEAK_PLANK("chambers of xeric", ItemID.TEAK_PLANK, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_MAHOGANY_PLANK("chambers of xeric", ItemID.MAHOGANY_PLANK, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_DYNAMITE("chambers of xeric", ItemID.DYNAMITE, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_TORN_PRAYER_SCROLL("chambers of xeric", ItemID.TORN_PRAYER_SCROLL, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_DARK_RELIC("chambers of xeric", ItemID.DARK_RELIC, 2.0f / 33.0f, false),
	CHAMBERS_OF_XERIC_CLUE_SCROLL_ELITE("chambers of xeric", ItemID.CLUE_SCROLL_ELITE, 1.0f / 12.0f, false),

	CHAMBERS_OF_XERIC_TWISTED_ANCESTRAL_COLOUR_KIT("chambers of xeric", ItemID.TWISTED_ANCESTRAL_COLOUR_KIT, 1.0f / 75.0f, true),
	CHAMBERS_OF_XERIC_METAMORPHIC_DUST("chambers of xeric", ItemID.METAMORPHIC_DUST, 1.0f / 400.0f, true),

	THEATRE_OF_BLOOD_AVERNIC_DEFENDER_HILT("theatre of blood", ItemID.AVERNIC_DEFENDER_HILT, 1f / 21.61f, true),
	THEATRE_OF_BLOOD_GHRAZI_RAPIER("theatre of blood", ItemID.GHRAZI_RAPIER, 1f / 86.45f, true),
	THEATRE_OF_BLOOD_SANGUINESTI_STAFF("theatre of blood", ItemID.SANGUINESTI_STAFF, 1f / 86.45f, true),
	THEATRE_OF_BLOOD_JUSTICIAR_FACEGUARD("theatre of blood", ItemID.JUSTICIAR_FACEGUARD, 1f / 86.45f, true),
	THEATRE_OF_BLOOD_JUSTICIAR_CHESTGUARD("theatre of blood", ItemID.JUSTICIAR_CHESTGUARD, 1f / 86.45f, true),
	THEATRE_OF_BLOOD_JUSTICIAR_LEGGUARDS("theatre of blood", ItemID.JUSTICIAR_LEGGUARDS, 1f / 86.45f, true),
	THEATRE_OF_BLOOD_SCYTHE_OF_VITUR("theatre of blood", ItemID.SCYTHE_OF_VITUR, 1f / 172.9f, true),

	THEATRE_OF_BLOOD_VIAL_OF_BLOOD("theatre of blood", ItemID.VIAL_OF_BLOOD, 3f / 15.0f, false),
	THEATRE_OF_BLOOD_DEATH_RUNE("theatre of blood", ItemID.DEATH_RUNE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_BLOOD_RUNE("theatre of blood", ItemID.BLOOD_RUNE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_SWAMP_TAR("theatre of blood", ItemID.SWAMP_TAR, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_COAL("theatre of blood", ItemID.COAL, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GOLD_ORE("theatre of blood", ItemID.GOLD_ORE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_MOLTEN_GLASS("theatre of blood", ItemID.MOLTEN_GLASS, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_ADAMANTITE_ORE("theatre of blood", ItemID.ADAMANTITE_ORE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_RUNITE_ORE("theatre of blood", ItemID.RUNITE_ORE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_WINE_OF_ZAMORAK("theatre of blood", ItemID.WINE_OF_ZAMORAK, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_POTATO_CACTUS("theatre of blood", ItemID.POTATO_CACTUS, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_CADANTINE("theatre of blood", ItemID.GRIMY_CADANTINE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_AVANTOE("theatre of blood", ItemID.GRIMY_AVANTOE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_TOADFLAX("theatre of blood", ItemID.GRIMY_TOADFLAX, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_KWUARM("theatre of blood", ItemID.GRIMY_KWUARM, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_IRIT_LEAF("theatre of blood", ItemID.GRIMY_IRIT_LEAF, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_RANARR_WEED("theatre of blood", ItemID.GRIMY_RANARR_WEED, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_SNAPDRAGON("theatre of blood", ItemID.GRIMY_SNAPDRAGON, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_LANTADYME("theatre of blood", ItemID.GRIMY_LANTADYME, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_DWARF_WEED("theatre of blood", ItemID.GRIMY_DWARF_WEED, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_GRIMY_TORSTOL("theatre of blood", ItemID.GRIMY_TORSTOL, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_BATTLESTAFF("theatre of blood", ItemID.BATTLESTAFF, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_MAHOGANY_SEED("theatre of blood", ItemID.MAHOGANY_SEED, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_RUNE_BATTLEAXE("theatre of blood", ItemID.RUNE_BATTLEAXE, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_RUNE_PLATEBODY("theatre of blood", ItemID.RUNE_PLATEBODY, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_RUNE_CHAINBODY("theatre of blood", ItemID.RUNE_CHAINBODY, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_PALM_TREE_SEED("theatre of blood", ItemID.PALM_TREE_SEED, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_YEW_SEED("theatre of blood", ItemID.YEW_SEED, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_MAGIC_SEED("theatre of blood", ItemID.MAGIC_SEED, 3f / 30.0f, false),
	THEATRE_OF_BLOOD_CLUE_SCROLL_ELITE("theatre of blood", ItemID.CLUE_SCROLL_ELITE, 0.12f, false),

	TOMBS_OF_AMASCUT_OSMUMTENS_FANG("tombs of amascut", ItemID.OSMUMTENS_FANG, 1f / 3.429f, true),
	TOMBS_OF_AMASCUT_LIGHTBEARER("tombs of amascut", ItemID.LIGHTBEARER, 1f / 3.429f, true),
	TOMBS_OF_AMASCUT_ELIDINIS_WARD("tombs of amascut", ItemID.ELIDINIS_WARD, 1f / 8f, true),
	TOMBS_OF_AMASCUT_MASORI_MASK("tombs of amascut", ItemID.MASORI_MASK, 1f / 12f, true),
	TOMBS_OF_AMASCUT_MASORI_BODY("tombs of amascut", ItemID.MASORI_BODY, 1f / 12f, true),
	TOMBS_OF_AMASCUT_MASORI_CHAPS("tombs of amascut", ItemID.MASORI_CHAPS, 1f / 12f, true),
	TOMBS_OF_AMASCUT_TUMEKENS_SHADOW_UNCHARGED("tombs of amascut", ItemID.TUMEKENS_SHADOW_UNCHARGED, 1f / 24f, true),
	TOMBS_OF_AMASCUT_THREAD_OF_ELIDINIS("tombs of amascut", ItemID.THREAD_OF_ELIDINIS, 1f / 10f, true),
	TOMBS_OF_AMASCUT_BREACH_OF_THE_SCARAB("tombs of amascut", ItemID.BREACH_OF_THE_SCARAB, 1f / 180f, true),
	TOMBS_OF_AMASCUT_EYE_OF_THE_CORRUPTOR("tombs of amascut", ItemID.EYE_OF_THE_CORRUPTOR, 1f / 180f, true),
	TOMBS_OF_AMASCUT_JEWEL_OF_THE_SUN("tombs of amascut", ItemID.JEWEL_OF_THE_SUN, 1f / 180f, true),

	TOMBS_OF_AMASCUT_CURSED_PHALANX("tombs of amascut", ItemID.CURSED_PHALANX, 1f, true),
	TOMBS_OF_AMASCUT_MASORI_CRAFTING_KIT("tombs of amascut", ItemID.MASORI_CRAFTING_KIT, 1f, true),
	TOMBS_OF_AMASCUT_MENAPHITE_ORNAMENT_KIT("tombs of amascut", ItemID.MENAPHITE_ORNAMENT_KIT, 1f, true),
	TOMBS_OF_AMASCUT_REMNANT_OF_AKKHA("tombs of amascut", ItemID.REMNANT_OF_AKKHA, 1f, true),
	TOMBS_OF_AMASCUT_REMNANT_OF_BABA("tombs of amascut", ItemID.REMNANT_OF_BABA, 1f, true),
	TOMBS_OF_AMASCUT_REMNANT_OF_KEPHRI("tombs of amascut", ItemID.REMNANT_OF_KEPHRI, 1f, true),
	TOMBS_OF_AMASCUT_REMNANT_OF_ZEBAK("tombs of amascut", ItemID.REMNANT_OF_ZEBAK, 1f, true),
	TOMBS_OF_AMASCUT_ANCIENT_REMNANT("tombs of amascut", ItemID.ANCIENT_REMNANT, 1f, true),

	TOMBS_OF_AMASCUT_CACHE_OF_RUNES("tombs of amascut", ItemID.CACHE_OF_RUNES, 3f / 27f, false),
	TOMBS_OF_AMASCUT_COINS("tombs of amascut", ItemID.COINS, 3f / 27f, false),
	TOMBS_OF_AMASCUT_DEATH_RUNE("tombs of amascut", ItemID.DEATH_RUNE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_SOUL_RUNE("tombs of amascut", ItemID.SOUL_RUNE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_GOLD_ORE("tombs of amascut", ItemID.GOLD_ORE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_DRAGON_DART_TIP("tombs of amascut", ItemID.DRAGON_DART_TIP, 3f / 27f, false),
	TOMBS_OF_AMASCUT_MAHOGANY_LOGS("tombs of amascut", ItemID.MAHOGANY_LOGS, 3f / 27f, false),
	TOMBS_OF_AMASCUT_SAPPHIRE("tombs of amascut", ItemID.SAPPHIRE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_EMERALD("tombs of amascut", ItemID.EMERALD, 3f / 27f, false),
	TOMBS_OF_AMASCUT_GOLD_BAR("tombs of amascut", ItemID.GOLD_BAR, 3f / 27f, false),
	TOMBS_OF_AMASCUT_POTATO_CACTUS("tombs of amascut", ItemID.POTATO_CACTUS, 3f / 27f, false),
	TOMBS_OF_AMASCUT_RAW_SHARK("tombs of amascut", ItemID.RAW_SHARK, 3f / 27f, false),
	TOMBS_OF_AMASCUT_RUBY("tombs of amascut", ItemID.RUBY, 3f / 27f, false),
	TOMBS_OF_AMASCUT_DIAMOND("tombs of amascut", ItemID.DIAMOND, 3f / 27f, false),
	TOMBS_OF_AMASCUT_RAW_MANTA_RAY("tombs of amascut", ItemID.RAW_MANTA_RAY, 3f / 27f, false),
	TOMBS_OF_AMASCUT_CACTUS_SPINE("tombs of amascut", ItemID.CACTUS_SPINE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_DRAGONSTONE("tombs of amascut", ItemID.DRAGONSTONE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_BATTLESTAFF("tombs of amascut", ItemID.BATTLESTAFF, 3f / 27f, false),
	TOMBS_OF_AMASCUT_COCONUT_MILK("tombs of amascut", ItemID.COCONUT_MILK, 3f / 27f, false),
	TOMBS_OF_AMASCUT_LILY_OF_THE_SANDS("tombs of amascut", ItemID.LILY_OF_THE_SANDS, 3f / 27f, false),
	TOMBS_OF_AMASCUT_TOADFLAX_SEED("tombs of amascut", ItemID.TOADFLAX_SEED, 3f / 27f, false),
	TOMBS_OF_AMASCUT_RANARR_SEED("tombs of amascut", ItemID.RANARR_SEED, 3f / 27f, false),
	TOMBS_OF_AMASCUT_TORSTOL_SEED("tombs of amascut", ItemID.TORSTOL_SEED, 3f / 27f, false),
	TOMBS_OF_AMASCUT_SNAPDRAGON_SEED("tombs of amascut", ItemID.SNAPDRAGON_SEED, 3f / 27f, false),
	TOMBS_OF_AMASCUT_DRAGON_MED_HELM("tombs of amascut", ItemID.DRAGON_MED_HELM, 3f / 27f, false),
	TOMBS_OF_AMASCUT_MAGIC_SEED("tombs of amascut", ItemID.MAGIC_SEED, 3f / 27f, false),
	TOMBS_OF_AMASCUT_BLOOD_ESSENCE("tombs of amascut", ItemID.BLOOD_ESSENCE, 3f / 27f, false),
	TOMBS_OF_AMASCUT_CLUE_SCROLL_ELITE("tombs of amascut", ItemID.CLUE_SCROLL_ELITE, 0.1f, false),

	CLUE_SCROLL_BEGINNER_MOLE_SLIPPERS("clue scroll (beginner)", ItemID.MOLE_SLIPPERS, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_FROG_SLIPPERS("clue scroll (beginner)", ItemID.FROG_SLIPPERS, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_BEAR_FEET("clue scroll (beginner)", ItemID.BEAR_FEET, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_DEMON_FEET("clue scroll (beginner)", ItemID.DEMON_FEET, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_JESTER_CAPE("clue scroll (beginner)", ItemID.JESTER_CAPE, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_SHOULDER_PARROT("clue scroll (beginner)", ItemID.SHOULDER_PARROT, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_MONKS_ROBE_TOP_T("clue scroll (beginner)", ItemID.MONKS_ROBE_TOP_T, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_MONKS_ROBE_T("clue scroll (beginner)", ItemID.MONKS_ROBE_T, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_AMULET_OF_DEFENCE_T("clue scroll (beginner)", ItemID.AMULET_OF_DEFENCE_T, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_SANDWICH_LADY_HAT("clue scroll (beginner)", ItemID.SANDWICH_LADY_HAT, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_SANDWICH_LADY_TOP("clue scroll (beginner)", ItemID.SANDWICH_LADY_TOP, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_SANDWICH_LADY_BOTTOM("clue scroll (beginner)", ItemID.SANDWICH_LADY_BOTTOM, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_RUNE_SCIMITAR_ORNAMENT_KIT_GUTHIX("clue scroll (beginner)", ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_GUTHIX, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_RUNE_SCIMITAR_ORNAMENT_KIT_SARADOMIN("clue scroll (beginner)", ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_SARADOMIN, 1f / 360f, true),
	CLUE_SCROLL_BEGINNER_RUNE_SCIMITAR_ORNAMENT_KIT_ZAMORAK("clue scroll (beginner)", ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_ZAMORAK, 1f / 360f, true),

	CLUE_SCROLL_BEGINNER_BLACK_2H_SWORD("clue scroll (beginner)", ItemID.BLACK_2H_SWORD, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_AXE("clue scroll (beginner)", ItemID.BLACK_AXE, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_BATTLEAXE("clue scroll (beginner)", ItemID.BLACK_BATTLEAXE, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_CHAINBODY("clue scroll (beginner)", ItemID.BLACK_CHAINBODY, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_DAGGER("clue scroll (beginner)", ItemID.BLACK_DAGGER, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_FULL_HELM("clue scroll (beginner)", ItemID.BLACK_FULL_HELM, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_KITESHIELD("clue scroll (beginner)", ItemID.BLACK_KITESHIELD, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_LONGSWORD("clue scroll (beginner)", ItemID.BLACK_LONGSWORD, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_MACE("clue scroll (beginner)", ItemID.BLACK_MACE, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_MED_HELM("clue scroll (beginner)", ItemID.BLACK_MED_HELM, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_PICKAXE("clue scroll (beginner)", ItemID.BLACK_PICKAXE, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_PLATEBODY("clue scroll (beginner)", ItemID.BLACK_PLATEBODY, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_PLATESKIRT("clue scroll (beginner)", ItemID.BLACK_PLATESKIRT, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_PLATELEGS("clue scroll (beginner)", ItemID.BLACK_PLATELEGS, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_SQ_SHIELD("clue scroll (beginner)", ItemID.BLACK_SQ_SHIELD, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_SCIMITAR("clue scroll (beginner)", ItemID.BLACK_SCIMITAR, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_SWORD("clue scroll (beginner)", ItemID.BLACK_SWORD, 1f / 805.1f, false),
	CLUE_SCROLL_BEGINNER_BLACK_WARHAMMER("clue scroll (beginner)", ItemID.BLACK_WARHAMMER, 1f / 805.1f, false),

	CLUE_SCROLL_EASY_AMULET_OF_MAGIC_T("clue scroll (easy)", ItemID.AMULET_OF_MAGIC_T, 1f / 360f, true),
	CLUE_SCROLL_EASY_WOODEN_SHIELD_G("clue scroll (easy)", ItemID.WOODEN_SHIELD_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_FULL_HELM_T("clue scroll (easy)", ItemID.BLACK_FULL_HELM_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_T("clue scroll (easy)", ItemID.BLACK_PLATEBODY_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATELEGS_T("clue scroll (easy)", ItemID.BLACK_PLATELEGS_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATESKIRT_T("clue scroll (easy)", ItemID.BLACK_PLATESKIRT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_KITESHIELD_T("clue scroll (easy)", ItemID.BLACK_KITESHIELD_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_FULL_HELM_G("clue scroll (easy)", ItemID.BLACK_FULL_HELM_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_G("clue scroll (easy)", ItemID.BLACK_PLATEBODY_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATELEGS_G("clue scroll (easy)", ItemID.BLACK_PLATELEGS_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATESKIRT_G("clue scroll (easy)", ItemID.BLACK_PLATESKIRT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_KITESHIELD_G("clue scroll (easy)", ItemID.BLACK_KITESHIELD_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SHIELD_H1("clue scroll (easy)", ItemID.BLACK_SHIELD_H1, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SHIELD_H2("clue scroll (easy)", ItemID.BLACK_SHIELD_H2, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SHIELD_H3("clue scroll (easy)", ItemID.BLACK_SHIELD_H3, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SHIELD_H4("clue scroll (easy)", ItemID.BLACK_SHIELD_H4, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SHIELD_H5("clue scroll (easy)", ItemID.BLACK_SHIELD_H5, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_HELM_H1("clue scroll (easy)", ItemID.BLACK_HELM_H1, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_HELM_H2("clue scroll (easy)", ItemID.BLACK_HELM_H2, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_HELM_H3("clue scroll (easy)", ItemID.BLACK_HELM_H3, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_HELM_H4("clue scroll (easy)", ItemID.BLACK_HELM_H4, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_HELM_H5("clue scroll (easy)", ItemID.BLACK_HELM_H5, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_H1("clue scroll (easy)", ItemID.BLACK_PLATEBODY_H1, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_H2("clue scroll (easy)", ItemID.BLACK_PLATEBODY_H2, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_H3("clue scroll (easy)", ItemID.BLACK_PLATEBODY_H3, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_H4("clue scroll (easy)", ItemID.BLACK_PLATEBODY_H4, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_PLATEBODY_H5("clue scroll (easy)", ItemID.BLACK_PLATEBODY_H5, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_FULL_HELM_T("clue scroll (easy)", ItemID.STEEL_FULL_HELM_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_PLATEBODY_T("clue scroll (easy)", ItemID.STEEL_PLATEBODY_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_PLATELEGS_T("clue scroll (easy)", ItemID.STEEL_PLATELEGS_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_PLATESKIRT_T("clue scroll (easy)", ItemID.STEEL_PLATESKIRT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_KITESHIELD_T("clue scroll (easy)", ItemID.STEEL_KITESHIELD_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_FULL_HELM_G("clue scroll (easy)", ItemID.STEEL_FULL_HELM_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_PLATEBODY_G("clue scroll (easy)", ItemID.STEEL_PLATEBODY_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_PLATELEGS_G("clue scroll (easy)", ItemID.STEEL_PLATELEGS_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_PLATESKIRT_G("clue scroll (easy)", ItemID.STEEL_PLATESKIRT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STEEL_KITESHIELD_G("clue scroll (easy)", ItemID.STEEL_KITESHIELD_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_FULL_HELM_T("clue scroll (easy)", ItemID.IRON_FULL_HELM_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_PLATEBODY_T("clue scroll (easy)", ItemID.IRON_PLATEBODY_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_PLATELEGS_T("clue scroll (easy)", ItemID.IRON_PLATELEGS_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_PLATESKIRT_T("clue scroll (easy)", ItemID.IRON_PLATESKIRT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_KITESHIELD_T("clue scroll (easy)", ItemID.IRON_KITESHIELD_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_FULL_HELM_G("clue scroll (easy)", ItemID.IRON_FULL_HELM_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_PLATEBODY_G("clue scroll (easy)", ItemID.IRON_PLATEBODY_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_PLATELEGS_G("clue scroll (easy)", ItemID.IRON_PLATELEGS_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_PLATESKIRT_G("clue scroll (easy)", ItemID.IRON_PLATESKIRT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IRON_KITESHIELD_G("clue scroll (easy)", ItemID.IRON_KITESHIELD_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_FULL_HELM_T("clue scroll (easy)", ItemID.BRONZE_FULL_HELM_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_PLATEBODY_T("clue scroll (easy)", ItemID.BRONZE_PLATEBODY_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_PLATELEGS_T("clue scroll (easy)", ItemID.BRONZE_PLATELEGS_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_PLATESKIRT_T("clue scroll (easy)", ItemID.BRONZE_PLATESKIRT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_KITESHIELD_T("clue scroll (easy)", ItemID.BRONZE_KITESHIELD_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_FULL_HELM_G("clue scroll (easy)", ItemID.BRONZE_FULL_HELM_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_PLATEBODY_G("clue scroll (easy)", ItemID.BRONZE_PLATEBODY_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_PLATELEGS_G("clue scroll (easy)", ItemID.BRONZE_PLATELEGS_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_PLATESKIRT_G("clue scroll (easy)", ItemID.BRONZE_PLATESKIRT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BRONZE_KITESHIELD_G("clue scroll (easy)", ItemID.BRONZE_KITESHIELD_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STUDDED_BODY_G("clue scroll (easy)", ItemID.STUDDED_BODY_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STUDDED_CHAPS_G("clue scroll (easy)", ItemID.STUDDED_CHAPS_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STUDDED_BODY_T("clue scroll (easy)", ItemID.STUDDED_BODY_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STUDDED_CHAPS_T("clue scroll (easy)", ItemID.STUDDED_CHAPS_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_LEATHER_BODY_G("clue scroll (easy)", ItemID.LEATHER_BODY_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_LEATHER_CHAPS_G("clue scroll (easy)", ItemID.LEATHER_CHAPS_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_WIZARD_HAT_G("clue scroll (easy)", ItemID.BLUE_WIZARD_HAT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_WIZARD_ROBE_G("clue scroll (easy)", ItemID.BLUE_WIZARD_ROBE_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_SKIRT_G("clue scroll (easy)", ItemID.BLUE_SKIRT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_WIZARD_HAT_T("clue scroll (easy)", ItemID.BLUE_WIZARD_HAT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_WIZARD_ROBE_T("clue scroll (easy)", ItemID.BLUE_WIZARD_ROBE_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_SKIRT_T("clue scroll (easy)", ItemID.BLUE_SKIRT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_WIZARD_HAT_G("clue scroll (easy)", ItemID.BLACK_WIZARD_HAT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_WIZARD_ROBE_G("clue scroll (easy)", ItemID.BLACK_WIZARD_ROBE_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SKIRT_G("clue scroll (easy)", ItemID.BLACK_SKIRT_G, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_WIZARD_HAT_T("clue scroll (easy)", ItemID.BLACK_WIZARD_HAT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_WIZARD_ROBE_T("clue scroll (easy)", ItemID.BLACK_WIZARD_ROBE_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_SKIRT_T("clue scroll (easy)", ItemID.BLACK_SKIRT_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_SARADOMIN_ROBE_TOP("clue scroll (easy)", ItemID.SARADOMIN_ROBE_TOP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_SARADOMIN_ROBE_LEGS("clue scroll (easy)", ItemID.SARADOMIN_ROBE_LEGS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_GUTHIX_ROBE_TOP("clue scroll (easy)", ItemID.GUTHIX_ROBE_TOP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_GUTHIX_ROBE_LEGS("clue scroll (easy)", ItemID.GUTHIX_ROBE_LEGS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_ZAMORAK_ROBE_TOP("clue scroll (easy)", ItemID.ZAMORAK_ROBE_TOP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_ZAMORAK_ROBE_LEGS("clue scroll (easy)", ItemID.ZAMORAK_ROBE_LEGS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_ANCIENT_ROBE_TOP("clue scroll (easy)", ItemID.ANCIENT_ROBE_TOP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_ANCIENT_ROBE_LEGS("clue scroll (easy)", ItemID.ANCIENT_ROBE_LEGS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_ARMADYL_ROBE_TOP("clue scroll (easy)", ItemID.ARMADYL_ROBE_TOP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_ARMADYL_ROBE_LEGS("clue scroll (easy)", ItemID.ARMADYL_ROBE_LEGS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BANDOS_ROBE_TOP("clue scroll (easy)", ItemID.BANDOS_ROBE_TOP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BANDOS_ROBE_LEGS("clue scroll (easy)", ItemID.BANDOS_ROBE_LEGS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BOBS_RED_SHIRT("clue scroll (easy)", ItemID.BOBS_RED_SHIRT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BOBS_GREEN_SHIRT("clue scroll (easy)", ItemID.BOBS_GREEN_SHIRT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BOBS_BLUE_SHIRT("clue scroll (easy)", ItemID.BOBS_BLUE_SHIRT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BOBS_BLACK_SHIRT("clue scroll (easy)", ItemID.BOBS_BLACK_SHIRT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BOBS_PURPLE_SHIRT("clue scroll (easy)", ItemID.BOBS_PURPLE_SHIRT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_HIGHWAYMAN_MASK("clue scroll (easy)", ItemID.HIGHWAYMAN_MASK, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLUE_BERET("clue scroll (easy)", ItemID.BLUE_BERET, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_BERET("clue scroll (easy)", ItemID.BLACK_BERET, 1f / 1404f, true),
	CLUE_SCROLL_EASY_RED_BERET("clue scroll (easy)", ItemID.RED_BERET, 1f / 1404f, true),
	CLUE_SCROLL_EASY_WHITE_BERET("clue scroll (easy)", ItemID.WHITE_BERET, 1f / 1404f, true),
	CLUE_SCROLL_EASY_A_POWDERED_WIG("clue scroll (easy)", ItemID.A_POWDERED_WIG, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BEANIE("clue scroll (easy)", ItemID.BEANIE, 1f / 1404f, true),
	CLUE_SCROLL_EASY_IMP_MASK("clue scroll (easy)", ItemID.IMP_MASK, 1f / 1404f, true),
	CLUE_SCROLL_EASY_GOBLIN_MASK("clue scroll (easy)", ItemID.GOBLIN_MASK, 1f / 1404f, true),
	CLUE_SCROLL_EASY_SLEEPING_CAP("clue scroll (easy)", ItemID.SLEEPING_CAP, 1f / 1404f, true),
	CLUE_SCROLL_EASY_FLARED_TROUSERS("clue scroll (easy)", ItemID.FLARED_TROUSERS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_PANTALOONS("clue scroll (easy)", ItemID.PANTALOONS, 1f / 1404f, true),
	CLUE_SCROLL_EASY_BLACK_CANE("clue scroll (easy)", ItemID.BLACK_CANE, 1f / 1404f, true),
	CLUE_SCROLL_EASY_STAFF_OF_BOB_THE_CAT("clue scroll (easy)", ItemID.STAFF_OF_BOB_THE_CAT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_AMULET_OF_POWER_T("clue scroll (easy)", ItemID.AMULET_OF_POWER_T, 1f / 1404f, true),
	CLUE_SCROLL_EASY_HAM_JOINT("clue scroll (easy)", ItemID.HAM_JOINT, 1f / 1404f, true),
	CLUE_SCROLL_EASY_RAIN_BOW("clue scroll (easy)", ItemID.RAIN_BOW, 1f / 1404f, true),
	CLUE_SCROLL_EASY_GOLDEN_CHEFS_HAT("clue scroll (easy)", ItemID.GOLDEN_CHEFS_HAT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_GOLDEN_APRON("clue scroll (easy)", ItemID.GOLDEN_APRON, 1f / 2808f, true),
	CLUE_SCROLL_EASY_RED_ELEGANT_SHIRT("clue scroll (easy)", ItemID.RED_ELEGANT_SHIRT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_RED_ELEGANT_BLOUSE("clue scroll (easy)", ItemID.RED_ELEGANT_BLOUSE, 1f / 2808f, true),
	CLUE_SCROLL_EASY_RED_ELEGANT_LEGS("clue scroll (easy)", ItemID.RED_ELEGANT_LEGS, 1f / 2808f, true),
	CLUE_SCROLL_EASY_RED_ELEGANT_SKIRT("clue scroll (easy)", ItemID.RED_ELEGANT_SKIRT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_GREEN_ELEGANT_SHIRT("clue scroll (easy)", ItemID.GREEN_ELEGANT_SHIRT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_GREEN_ELEGANT_BLOUSE("clue scroll (easy)", ItemID.GREEN_ELEGANT_BLOUSE, 1f / 2808f, true),
	CLUE_SCROLL_EASY_GREEN_ELEGANT_LEGS("clue scroll (easy)", ItemID.GREEN_ELEGANT_LEGS, 1f / 2808f, true),
	CLUE_SCROLL_EASY_GREEN_ELEGANT_SKIRT("clue scroll (easy)", ItemID.GREEN_ELEGANT_SKIRT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_BLUE_ELEGANT_SHIRT("clue scroll (easy)", ItemID.BLUE_ELEGANT_SHIRT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_BLUE_ELEGANT_BLOUSE("clue scroll (easy)", ItemID.BLUE_ELEGANT_BLOUSE, 1f / 2808f, true),
	CLUE_SCROLL_EASY_BLUE_ELEGANT_LEGS("clue scroll (easy)", ItemID.BLUE_ELEGANT_LEGS, 1f / 2808f, true),
	CLUE_SCROLL_EASY_BLUE_ELEGANT_SKIRT("clue scroll (easy)", ItemID.BLUE_ELEGANT_SKIRT, 1f / 2808f, true),
	CLUE_SCROLL_EASY_TEAM_CAPE_ZERO("clue scroll (easy)", ItemID.TEAM_CAPE_ZERO, 1f / 5616f, true),
	CLUE_SCROLL_EASY_TEAM_CAPE_I("clue scroll (easy)", ItemID.TEAM_CAPE_I, 1f / 5616f, true),
	CLUE_SCROLL_EASY_TEAM_CAPE_X("clue scroll (easy)", ItemID.TEAM_CAPE_X, 1f / 5616f, true),
	CLUE_SCROLL_EASY_CAPE_OF_SKULLS("clue scroll (easy)", ItemID.CAPE_OF_SKULLS, 1f / 5616f, true),
	CLUE_SCROLL_EASY_MONKS_ROBE_TOP_G("clue scroll (easy)", ItemID.MONKS_ROBE_TOP_G, 1f / 14040f, true),
	CLUE_SCROLL_EASY_MONKS_ROBE_G("clue scroll (easy)", ItemID.MONKS_ROBE_G, 1f / 14040f, true),

	CLUE_SCROLL_EASY_WILLOW_COMP_BOW("clue scroll (easy)", ItemID.WILLOW_COMP_BOW, 1f / 360f, true),

	CLUE_SCROLL_EASY_RED_FIRELIGHTER("clue scroll (easy)", ItemID.RED_FIRELIGHTER, 1.0f / 180f, false),
	CLUE_SCROLL_EASY_GREEN_FIRELIGHTER("clue scroll (easy)", ItemID.GREEN_FIRELIGHTER, 1.0f / 180f, false),
	CLUE_SCROLL_EASY_BLUE_FIRELIGHTER("clue scroll (easy)", ItemID.BLUE_FIRELIGHTER, 1.0f / 180f, false),
	CLUE_SCROLL_EASY_PURPLE_FIRELIGHTER("clue scroll (easy)", ItemID.PURPLE_FIRELIGHTER, 1.0f / 180f, false),
	CLUE_SCROLL_EASY_WHITE_FIRELIGHTER("clue scroll (easy)", ItemID.WHITE_FIRELIGHTER, 1.0f / 180f, false),
	CLUE_SCROLL_EASY_CHARGE_DRAGONSTONE_JEWELLERY_SCROLL("clue scroll (easy)", ItemID.CHARGE_DRAGONSTONE_JEWELLERY_SCROLL, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_NARDAH_TELEPORT("clue scroll (easy)", ItemID.NARDAH_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_MOS_LEHARMLESS_TELEPORT("clue scroll (easy)", ItemID.MOS_LEHARMLESS_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_MORTTON_TELEPORT("clue scroll (easy)", ItemID.MORTTON_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_FELDIP_HILLS_TELEPORT("clue scroll (easy)", ItemID.FELDIP_HILLS_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_LUNAR_ISLE_TELEPORT("clue scroll (easy)", ItemID.LUNAR_ISLE_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_DIGSITE_TELEPORT("clue scroll (easy)", ItemID.DIGSITE_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_PISCATORIS_TELEPORT("clue scroll (easy)", ItemID.PISCATORIS_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_PEST_CONTROL_TELEPORT("clue scroll (easy)", ItemID.PEST_CONTROL_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_TAI_BWO_WANNAI_TELEPORT("clue scroll (easy)", ItemID.TAI_BWO_WANNAI_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_LUMBERYARD_TELEPORT("clue scroll (easy)", ItemID.LUMBERYARD_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_IORWERTH_CAMP_TELEPORT("clue scroll (easy)", ItemID.IORWERTH_CAMP_TELEPORT, 1.0f / 452.6f, false),
	CLUE_SCROLL_EASY_MASTER_SCROLL_BOOK_EMPTY("clue scroll (easy)", ItemID.MASTER_SCROLL_BOOK_EMPTY, 1.0f / 792f, false),
	CLUE_SCROLL_EASY_SARADOMIN_PAGE_1("clue scroll (easy)", ItemID.SARADOMIN_PAGE_1, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_SARADOMIN_PAGE_2("clue scroll (easy)", ItemID.SARADOMIN_PAGE_2, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_SARADOMIN_PAGE_3("clue scroll (easy)", ItemID.SARADOMIN_PAGE_3, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_SARADOMIN_PAGE_4("clue scroll (easy)", ItemID.SARADOMIN_PAGE_4, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ZAMORAK_PAGE_1("clue scroll (easy)", ItemID.ZAMORAK_PAGE_1, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ZAMORAK_PAGE_2("clue scroll (easy)", ItemID.ZAMORAK_PAGE_2, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ZAMORAK_PAGE_3("clue scroll (easy)", ItemID.ZAMORAK_PAGE_3, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ZAMORAK_PAGE_4("clue scroll (easy)", ItemID.ZAMORAK_PAGE_4, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_GUTHIX_PAGE_1("clue scroll (easy)", ItemID.GUTHIX_PAGE_1, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_GUTHIX_PAGE_2("clue scroll (easy)", ItemID.GUTHIX_PAGE_2, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_GUTHIX_PAGE_3("clue scroll (easy)", ItemID.GUTHIX_PAGE_3, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_GUTHIX_PAGE_4("clue scroll (easy)", ItemID.GUTHIX_PAGE_4, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_BANDOS_PAGE_1("clue scroll (easy)", ItemID.BANDOS_PAGE_1, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_BANDOS_PAGE_2("clue scroll (easy)", ItemID.BANDOS_PAGE_2, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_BANDOS_PAGE_3("clue scroll (easy)", ItemID.BANDOS_PAGE_3, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_BANDOS_PAGE_4("clue scroll (easy)", ItemID.BANDOS_PAGE_4, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ARMADYL_PAGE_1("clue scroll (easy)", ItemID.ARMADYL_PAGE_1, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ARMADYL_PAGE_2("clue scroll (easy)", ItemID.ARMADYL_PAGE_2, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ARMADYL_PAGE_3("clue scroll (easy)", ItemID.ARMADYL_PAGE_3, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ARMADYL_PAGE_4("clue scroll (easy)", ItemID.ARMADYL_PAGE_4, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ANCIENT_PAGE_1("clue scroll (easy)", ItemID.ANCIENT_PAGE_1, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ANCIENT_PAGE_2("clue scroll (easy)", ItemID.ANCIENT_PAGE_2, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ANCIENT_PAGE_3("clue scroll (easy)", ItemID.ANCIENT_PAGE_3, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_ANCIENT_PAGE_4("clue scroll (easy)", ItemID.ANCIENT_PAGE_4, 1.0f / 864f, false),
	CLUE_SCROLL_EASY_HOLY_BLESSING("clue scroll (easy)", ItemID.HOLY_BLESSING, 1.0f / 2160f, false),
	CLUE_SCROLL_EASY_UNHOLY_BLESSING("clue scroll (easy)", ItemID.UNHOLY_BLESSING, 1.0f / 2160f, false),
	CLUE_SCROLL_EASY_PEACEFUL_BLESSING("clue scroll (easy)", ItemID.PEACEFUL_BLESSING, 1.0f / 2160f, false),
	CLUE_SCROLL_EASY_WAR_BLESSING("clue scroll (easy)", ItemID.WAR_BLESSING, 1.0f / 2160f, false),
	CLUE_SCROLL_EASY_HONOURABLE_BLESSING("clue scroll (easy)", ItemID.HONOURABLE_BLESSING, 1.0f / 2160f, false),
	CLUE_SCROLL_EASY_ANCIENT_BLESSING("clue scroll (easy)", ItemID.ANCIENT_BLESSING, 1.0f / 2160f, false),

	CLUE_SCROLL_MEDIUM_RANGER_BOOTS("clue scroll (medium)", ItemID.RANGER_BOOTS, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_WIZARD_BOOTS("clue scroll (medium)", ItemID.WIZARD_BOOTS, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_HOLY_SANDALS("clue scroll (medium)", ItemID.HOLY_SANDALS, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_SPIKED_MANACLES("clue scroll (medium)", ItemID.SPIKED_MANACLES, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_CLIMBING_BOOTS_G("clue scroll (medium)", ItemID.CLIMBING_BOOTS_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_FULL_HELM_T("clue scroll (medium)", ItemID.ADAMANT_FULL_HELM_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_T("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATELEGS_T("clue scroll (medium)", ItemID.ADAMANT_PLATELEGS_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATESKIRT_T("clue scroll (medium)", ItemID.ADAMANT_PLATESKIRT_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_KITESHIELD_T("clue scroll (medium)", ItemID.ADAMANT_KITESHIELD_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_FULL_HELM_G("clue scroll (medium)", ItemID.ADAMANT_FULL_HELM_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_G("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATELEGS_G("clue scroll (medium)", ItemID.ADAMANT_PLATELEGS_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATESKIRT_G("clue scroll (medium)", ItemID.ADAMANT_PLATESKIRT_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_KITESHIELD_G("clue scroll (medium)", ItemID.ADAMANT_KITESHIELD_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_SHIELD_H1("clue scroll (medium)", ItemID.ADAMANT_SHIELD_H1, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_SHIELD_H2("clue scroll (medium)", ItemID.ADAMANT_SHIELD_H2, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_SHIELD_H3("clue scroll (medium)", ItemID.ADAMANT_SHIELD_H3, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_SHIELD_H4("clue scroll (medium)", ItemID.ADAMANT_SHIELD_H4, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_SHIELD_H5("clue scroll (medium)", ItemID.ADAMANT_SHIELD_H5, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_HELM_H1("clue scroll (medium)", ItemID.ADAMANT_HELM_H1, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_HELM_H2("clue scroll (medium)", ItemID.ADAMANT_HELM_H2, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_HELM_H3("clue scroll (medium)", ItemID.ADAMANT_HELM_H3, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_HELM_H4("clue scroll (medium)", ItemID.ADAMANT_HELM_H4, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_HELM_H5("clue scroll (medium)", ItemID.ADAMANT_HELM_H5, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_H1("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_H1, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_H2("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_H2, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_H3("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_H3, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_H4("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_H4, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_PLATEBODY_H5("clue scroll (medium)", ItemID.ADAMANT_PLATEBODY_H5, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_FULL_HELM_G("clue scroll (medium)", ItemID.MITHRIL_FULL_HELM_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_PLATEBODY_G("clue scroll (medium)", ItemID.MITHRIL_PLATEBODY_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_PLATELEGS_G("clue scroll (medium)", ItemID.MITHRIL_PLATELEGS_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_PLATESKIRT_G("clue scroll (medium)", ItemID.MITHRIL_PLATESKIRT_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_KITESHIELD_G("clue scroll (medium)", ItemID.MITHRIL_KITESHIELD_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_FULL_HELM_T("clue scroll (medium)", ItemID.MITHRIL_FULL_HELM_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_PLATEBODY_T("clue scroll (medium)", ItemID.MITHRIL_PLATEBODY_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_PLATELEGS_T("clue scroll (medium)", ItemID.MITHRIL_PLATELEGS_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_PLATESKIRT_T("clue scroll (medium)", ItemID.MITHRIL_PLATESKIRT_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_MITHRIL_KITESHIELD_T("clue scroll (medium)", ItemID.MITHRIL_KITESHIELD_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GREEN_DHIDE_BODY_G("clue scroll (medium)", ItemID.GREEN_DHIDE_BODY_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GREEN_DHIDE_BODY_T("clue scroll (medium)", ItemID.GREEN_DHIDE_BODY_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GREEN_DHIDE_CHAPS_G("clue scroll (medium)", ItemID.GREEN_DHIDE_CHAPS_G, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GREEN_DHIDE_CHAPS_T("clue scroll (medium)", ItemID.GREEN_DHIDE_CHAPS_T, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_SARADOMIN_MITRE("clue scroll (medium)", ItemID.SARADOMIN_MITRE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_SARADOMIN_CLOAK("clue scroll (medium)", ItemID.SARADOMIN_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GUTHIX_MITRE("clue scroll (medium)", ItemID.GUTHIX_MITRE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GUTHIX_CLOAK("clue scroll (medium)", ItemID.GUTHIX_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ZAMORAK_MITRE("clue scroll (medium)", ItemID.ZAMORAK_MITRE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ZAMORAK_CLOAK("clue scroll (medium)", ItemID.ZAMORAK_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ANCIENT_MITRE("clue scroll (medium)", ItemID.ANCIENT_MITRE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ANCIENT_CLOAK("clue scroll (medium)", ItemID.ANCIENT_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ANCIENT_STOLE("clue scroll (medium)", ItemID.ANCIENT_STOLE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ANCIENT_CROZIER("clue scroll (medium)", ItemID.ANCIENT_CROZIER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ARMADYL_MITRE("clue scroll (medium)", ItemID.ARMADYL_MITRE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ARMADYL_CLOAK("clue scroll (medium)", ItemID.ARMADYL_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ARMADYL_STOLE("clue scroll (medium)", ItemID.ARMADYL_STOLE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ARMADYL_CROZIER("clue scroll (medium)", ItemID.ARMADYL_CROZIER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BANDOS_MITRE("clue scroll (medium)", ItemID.BANDOS_MITRE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BANDOS_CLOAK("clue scroll (medium)", ItemID.BANDOS_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BANDOS_STOLE("clue scroll (medium)", ItemID.BANDOS_STOLE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BANDOS_CROZIER("clue scroll (medium)", ItemID.BANDOS_CROZIER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_RED_BOATER("clue scroll (medium)", ItemID.RED_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GREEN_BOATER("clue scroll (medium)", ItemID.GREEN_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ORANGE_BOATER("clue scroll (medium)", ItemID.ORANGE_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BLACK_BOATER("clue scroll (medium)", ItemID.BLACK_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BLUE_BOATER("clue scroll (medium)", ItemID.BLUE_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_PINK_BOATER("clue scroll (medium)", ItemID.PINK_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_PURPLE_BOATER("clue scroll (medium)", ItemID.PURPLE_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_WHITE_BOATER("clue scroll (medium)", ItemID.WHITE_BOATER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_RED_HEADBAND("clue scroll (medium)", ItemID.RED_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BLACK_HEADBAND("clue scroll (medium)", ItemID.BLACK_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BROWN_HEADBAND("clue scroll (medium)", ItemID.BROWN_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_WHITE_HEADBAND("clue scroll (medium)", ItemID.WHITE_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BLUE_HEADBAND("clue scroll (medium)", ItemID.BLUE_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GOLD_HEADBAND("clue scroll (medium)", ItemID.GOLD_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_PINK_HEADBAND("clue scroll (medium)", ItemID.PINK_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_GREEN_HEADBAND("clue scroll (medium)", ItemID.GREEN_HEADBAND, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_CRIER_HAT("clue scroll (medium)", ItemID.CRIER_HAT, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ADAMANT_CANE("clue scroll (medium)", ItemID.ADAMANT_CANE, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_CAT_MASK("clue scroll (medium)", ItemID.CAT_MASK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_PENGUIN_MASK("clue scroll (medium)", ItemID.PENGUIN_MASK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_LEPRECHAUN_HAT("clue scroll (medium)", ItemID.LEPRECHAUN_HAT, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_CRIER_COAT("clue scroll (medium)", ItemID.CRIER_COAT, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_CRIER_BELL("clue scroll (medium)", ItemID.CRIER_BELL, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_ARCEUUS_BANNER("clue scroll (medium)", ItemID.ARCEUUS_BANNER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_PISCARILIUS_BANNER("clue scroll (medium)", ItemID.PISCARILIUS_BANNER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_HOSIDIUS_BANNER("clue scroll (medium)", ItemID.HOSIDIUS_BANNER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_SHAYZIEN_BANNER("clue scroll (medium)", ItemID.SHAYZIEN_BANNER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_LOVAKENGJ_BANNER("clue scroll (medium)", ItemID.LOVAKENGJ_BANNER, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_CABBAGE_ROUND_SHIELD("clue scroll (medium)", ItemID.CABBAGE_ROUND_SHIELD, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_WOLF_MASK("clue scroll (medium)", ItemID.WOLF_MASK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_WOLF_CLOAK("clue scroll (medium)", ItemID.WOLF_CLOAK, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BLACK_LEPRECHAUN_HAT("clue scroll (medium)", ItemID.BLACK_LEPRECHAUN_HAT, 1f / 1133f, true),
	CLUE_SCROLL_MEDIUM_BLACK_UNICORN_MASK("clue scroll (medium)", ItemID.BLACK_UNICORN_MASK, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_WHITE_UNICORN_MASK("clue scroll (medium)", ItemID.WHITE_UNICORN_MASK, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PURPLE_ELEGANT_SHIRT("clue scroll (medium)", ItemID.PURPLE_ELEGANT_SHIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PURPLE_ELEGANT_BLOUSE("clue scroll (medium)", ItemID.PURPLE_ELEGANT_BLOUSE, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PURPLE_ELEGANT_LEGS("clue scroll (medium)", ItemID.PURPLE_ELEGANT_LEGS, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PURPLE_ELEGANT_SKIRT("clue scroll (medium)", ItemID.PURPLE_ELEGANT_SKIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_BLACK_ELEGANT_SHIRT("clue scroll (medium)", ItemID.BLACK_ELEGANT_SHIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_WHITE_ELEGANT_BLOUSE("clue scroll (medium)", ItemID.WHITE_ELEGANT_BLOUSE, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_BLACK_ELEGANT_LEGS("clue scroll (medium)", ItemID.BLACK_ELEGANT_LEGS, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_WHITE_ELEGANT_SKIRT("clue scroll (medium)", ItemID.WHITE_ELEGANT_SKIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PINK_ELEGANT_SHIRT("clue scroll (medium)", ItemID.PINK_ELEGANT_SHIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PINK_ELEGANT_BLOUSE("clue scroll (medium)", ItemID.PINK_ELEGANT_BLOUSE, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PINK_ELEGANT_LEGS("clue scroll (medium)", ItemID.PINK_ELEGANT_LEGS, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_PINK_ELEGANT_SKIRT("clue scroll (medium)", ItemID.PINK_ELEGANT_SKIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_GOLD_ELEGANT_SHIRT("clue scroll (medium)", ItemID.GOLD_ELEGANT_SHIRT, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_GOLD_ELEGANT_BLOUSE("clue scroll (medium)", ItemID.GOLD_ELEGANT_BLOUSE, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_GOLD_ELEGANT_LEGS("clue scroll (medium)", ItemID.GOLD_ELEGANT_LEGS, 1f / 2266f, true),
	CLUE_SCROLL_MEDIUM_GOLD_ELEGANT_SKIRT("clue scroll (medium)", ItemID.GOLD_ELEGANT_SKIRT, 1f / 2266f, true),

	CLUE_SCROLL_MEDIUM_YEW_COMP_BOW("clue scroll (medium)", ItemID.YEW_COMP_BOW, 1f / 341f, true),
	CLUE_SCROLL_MEDIUM_STRENGTH_AMULET_T("clue scroll (medium)", ItemID.STRENGTH_AMULET_T, 1f / 341f, true),

	CLUE_SCROLL_MEDIUM_RED_FIRELIGHTER("clue scroll (medium)", ItemID.RED_FIRELIGHTER, 1f / 189.4f, false),
	CLUE_SCROLL_MEDIUM_GREEN_FIRELIGHTER("clue scroll (medium)", ItemID.GREEN_FIRELIGHTER, 1f / 189.4f, false),
	CLUE_SCROLL_MEDIUM_BLUE_FIRELIGHTER("clue scroll (medium)", ItemID.BLUE_FIRELIGHTER, 1f / 189.4f, false),
	CLUE_SCROLL_MEDIUM_PURPLE_FIRELIGHTER("clue scroll (medium)", ItemID.PURPLE_FIRELIGHTER, 1f / 189.4f, false),
	CLUE_SCROLL_MEDIUM_WHITE_FIRELIGHTER("clue scroll (medium)", ItemID.WHITE_FIRELIGHTER, 1f / 189.4f, false),
	CLUE_SCROLL_MEDIUM_GNOMISH_FIRELIGHTER("clue scroll (medium)", ItemID.GNOMISH_FIRELIGHTER, 1f / 341f, false),
	CLUE_SCROLL_MEDIUM_CHARGE_DRAGONSTONE_JEWELLERY_SCROLL("clue scroll (medium)", ItemID.CHARGE_DRAGONSTONE_JEWELLERY_SCROLL, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_NARDAH_TELEPORT("clue scroll (medium)", ItemID.NARDAH_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_MOS_LEHARMLESS_TELEPORT("clue scroll (medium)", ItemID.MOS_LEHARMLESS_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_MORTTON_TELEPORT("clue scroll (medium)", ItemID.MORTTON_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_FELDIP_HILLS_TELEPORT("clue scroll (medium)", ItemID.FELDIP_HILLS_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_LUNAR_ISLE_TELEPORT("clue scroll (medium)", ItemID.LUNAR_ISLE_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_DIGSITE_TELEPORT("clue scroll (medium)", ItemID.DIGSITE_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_PISCATORIS_TELEPORT("clue scroll (medium)", ItemID.PISCATORIS_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_PEST_CONTROL_TELEPORT("clue scroll (medium)", ItemID.PEST_CONTROL_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_TAI_BWO_WANNAI_TELEPORT("clue scroll (medium)", ItemID.TAI_BWO_WANNAI_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_LUMBERYARD_TELEPORT("clue scroll (medium)", ItemID.LUMBERYARD_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_IORWERTH_CAMP_TELEPORT("clue scroll (medium)", ItemID.IORWERTH_CAMP_TELEPORT, 1f / 428.7f, false),
	CLUE_SCROLL_MEDIUM_HOLY_BLESSING("clue scroll (medium)", ItemID.HOLY_BLESSING, 1f / 682f, false),
	CLUE_SCROLL_MEDIUM_UNHOLY_BLESSING("clue scroll (medium)", ItemID.UNHOLY_BLESSING, 1f / 682f, false),
	CLUE_SCROLL_MEDIUM_PEACEFUL_BLESSING("clue scroll (medium)", ItemID.PEACEFUL_BLESSING, 1f / 682f, false),
	CLUE_SCROLL_MEDIUM_WAR_BLESSING("clue scroll (medium)", ItemID.WAR_BLESSING, 1f / 682f, false),
	CLUE_SCROLL_MEDIUM_HONOURABLE_BLESSING("clue scroll (medium)", ItemID.HONOURABLE_BLESSING, 1f / 682f, false),
	CLUE_SCROLL_MEDIUM_ANCIENT_BLESSING("clue scroll (medium)", ItemID.ANCIENT_BLESSING, 1f / 682f, false),
	CLUE_SCROLL_MEDIUM_MASTER_SCROLL_BOOK_EMPTY("clue scroll (medium)", ItemID.MASTER_SCROLL_BOOK_EMPTY, 1f / 750.2f, false),
	CLUE_SCROLL_MEDIUM_SARADOMIN_PAGE_1("clue scroll (medium)", ItemID.SARADOMIN_PAGE_1, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_SARADOMIN_PAGE_2("clue scroll (medium)", ItemID.SARADOMIN_PAGE_2, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_SARADOMIN_PAGE_3("clue scroll (medium)", ItemID.SARADOMIN_PAGE_3, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_SARADOMIN_PAGE_4("clue scroll (medium)", ItemID.SARADOMIN_PAGE_4, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ZAMORAK_PAGE_1("clue scroll (medium)", ItemID.ZAMORAK_PAGE_1, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ZAMORAK_PAGE_2("clue scroll (medium)", ItemID.ZAMORAK_PAGE_2, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ZAMORAK_PAGE_3("clue scroll (medium)", ItemID.ZAMORAK_PAGE_3, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ZAMORAK_PAGE_4("clue scroll (medium)", ItemID.ZAMORAK_PAGE_4, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_GUTHIX_PAGE_1("clue scroll (medium)", ItemID.GUTHIX_PAGE_1, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_GUTHIX_PAGE_2("clue scroll (medium)", ItemID.GUTHIX_PAGE_2, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_GUTHIX_PAGE_3("clue scroll (medium)", ItemID.GUTHIX_PAGE_3, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_GUTHIX_PAGE_4("clue scroll (medium)", ItemID.GUTHIX_PAGE_4, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_BANDOS_PAGE_1("clue scroll (medium)", ItemID.BANDOS_PAGE_1, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_BANDOS_PAGE_2("clue scroll (medium)", ItemID.BANDOS_PAGE_2, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_BANDOS_PAGE_3("clue scroll (medium)", ItemID.BANDOS_PAGE_3, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_BANDOS_PAGE_4("clue scroll (medium)", ItemID.BANDOS_PAGE_4, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ARMADYL_PAGE_1("clue scroll (medium)", ItemID.ARMADYL_PAGE_1, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ARMADYL_PAGE_2("clue scroll (medium)", ItemID.ARMADYL_PAGE_2, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ARMADYL_PAGE_3("clue scroll (medium)", ItemID.ARMADYL_PAGE_3, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ARMADYL_PAGE_4("clue scroll (medium)", ItemID.ARMADYL_PAGE_4, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ANCIENT_PAGE_1("clue scroll (medium)", ItemID.ANCIENT_PAGE_1, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ANCIENT_PAGE_2("clue scroll (medium)", ItemID.ANCIENT_PAGE_2, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ANCIENT_PAGE_3("clue scroll (medium)", ItemID.ANCIENT_PAGE_3, 1f / 818.4f, false),
	CLUE_SCROLL_MEDIUM_ANCIENT_PAGE_4("clue scroll (medium)", ItemID.ANCIENT_PAGE_4, 1f / 818.4f, false),

	CLUE_SCROLL_HARD_AMULET_OF_GLORY_T4("clue scroll (hard)", ItemID.AMULET_OF_GLORY_T4, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ROBIN_HOOD_HAT("clue scroll (hard)", ItemID.ROBIN_HOOD_HAT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ENCHANTED_HAT("clue scroll (hard)", ItemID.ENCHANTED_HAT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ENCHANTED_TOP("clue scroll (hard)", ItemID.ENCHANTED_TOP, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ENCHANTED_ROBE("clue scroll (hard)", ItemID.ENCHANTED_ROBE, 1f / 1625f, true),
	CLUE_SCROLL_HARD_DRAGON_BOOTS_ORNAMENT_KIT("clue scroll (hard)", ItemID.DRAGON_BOOTS_ORNAMENT_KIT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_FULL_HELM_T("clue scroll (hard)", ItemID.RUNE_FULL_HELM_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_T("clue scroll (hard)", ItemID.RUNE_PLATEBODY_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATELEGS_T("clue scroll (hard)", ItemID.RUNE_PLATELEGS_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATESKIRT_T("clue scroll (hard)", ItemID.RUNE_PLATESKIRT_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_KITESHIELD_T("clue scroll (hard)", ItemID.RUNE_KITESHIELD_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_FULL_HELM_G("clue scroll (hard)", ItemID.RUNE_FULL_HELM_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_G("clue scroll (hard)", ItemID.RUNE_PLATEBODY_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATELEGS_G("clue scroll (hard)", ItemID.RUNE_PLATELEGS_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATESKIRT_G("clue scroll (hard)", ItemID.RUNE_PLATESKIRT_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_KITESHIELD_G("clue scroll (hard)", ItemID.RUNE_KITESHIELD_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_SHIELD_H1("clue scroll (hard)", ItemID.RUNE_SHIELD_H1, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_SHIELD_H2("clue scroll (hard)", ItemID.RUNE_SHIELD_H2, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_SHIELD_H3("clue scroll (hard)", ItemID.RUNE_SHIELD_H3, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_SHIELD_H4("clue scroll (hard)", ItemID.RUNE_SHIELD_H4, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_SHIELD_H5("clue scroll (hard)", ItemID.RUNE_SHIELD_H5, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_HELM_H1("clue scroll (hard)", ItemID.RUNE_HELM_H1, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_HELM_H2("clue scroll (hard)", ItemID.RUNE_HELM_H2, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_HELM_H3("clue scroll (hard)", ItemID.RUNE_HELM_H3, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_HELM_H4("clue scroll (hard)", ItemID.RUNE_HELM_H4, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_HELM_H5("clue scroll (hard)", ItemID.RUNE_HELM_H5, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_FULL_HELM("clue scroll (hard)", ItemID.ZAMORAK_FULL_HELM, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_PLATEBODY("clue scroll (hard)", ItemID.ZAMORAK_PLATEBODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_PLATELEGS("clue scroll (hard)", ItemID.ZAMORAK_PLATELEGS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_PLATESKIRT("clue scroll (hard)", ItemID.ZAMORAK_PLATESKIRT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_KITESHIELD("clue scroll (hard)", ItemID.ZAMORAK_KITESHIELD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_FULL_HELM("clue scroll (hard)", ItemID.GUTHIX_FULL_HELM, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_PLATEBODY("clue scroll (hard)", ItemID.GUTHIX_PLATEBODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_PLATELEGS("clue scroll (hard)", ItemID.GUTHIX_PLATELEGS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_PLATESKIRT("clue scroll (hard)", ItemID.GUTHIX_PLATESKIRT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_KITESHIELD("clue scroll (hard)", ItemID.GUTHIX_KITESHIELD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_FULL_HELM("clue scroll (hard)", ItemID.SARADOMIN_FULL_HELM, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_PLATEBODY("clue scroll (hard)", ItemID.SARADOMIN_PLATEBODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_PLATELEGS("clue scroll (hard)", ItemID.SARADOMIN_PLATELEGS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_PLATESKIRT("clue scroll (hard)", ItemID.SARADOMIN_PLATESKIRT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_KITESHIELD("clue scroll (hard)", ItemID.SARADOMIN_KITESHIELD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_FULL_HELM("clue scroll (hard)", ItemID.ANCIENT_FULL_HELM, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_PLATEBODY("clue scroll (hard)", ItemID.ANCIENT_PLATEBODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_PLATELEGS("clue scroll (hard)", ItemID.ANCIENT_PLATELEGS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_PLATESKIRT("clue scroll (hard)", ItemID.ANCIENT_PLATESKIRT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_KITESHIELD("clue scroll (hard)", ItemID.ANCIENT_KITESHIELD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_FULL_HELM("clue scroll (hard)", ItemID.ARMADYL_FULL_HELM, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_PLATEBODY("clue scroll (hard)", ItemID.ARMADYL_PLATEBODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_PLATELEGS("clue scroll (hard)", ItemID.ARMADYL_PLATELEGS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_PLATESKIRT("clue scroll (hard)", ItemID.ARMADYL_PLATESKIRT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_KITESHIELD("clue scroll (hard)", ItemID.ARMADYL_KITESHIELD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_FULL_HELM("clue scroll (hard)", ItemID.BANDOS_FULL_HELM, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_PLATEBODY("clue scroll (hard)", ItemID.BANDOS_PLATEBODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_PLATELEGS("clue scroll (hard)", ItemID.BANDOS_PLATELEGS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_PLATESKIRT("clue scroll (hard)", ItemID.BANDOS_PLATESKIRT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_KITESHIELD("clue scroll (hard)", ItemID.BANDOS_KITESHIELD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RED_DHIDE_BODY_G("clue scroll (hard)", ItemID.RED_DHIDE_BODY_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RED_DHIDE_BODY_T("clue scroll (hard)", ItemID.RED_DHIDE_BODY_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RED_DHIDE_CHAPS_G("clue scroll (hard)", ItemID.RED_DHIDE_CHAPS_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RED_DHIDE_CHAPS_T("clue scroll (hard)", ItemID.RED_DHIDE_CHAPS_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLUE_DHIDE_BODY_G("clue scroll (hard)", ItemID.BLUE_DHIDE_BODY_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLUE_DHIDE_BODY_T("clue scroll (hard)", ItemID.BLUE_DHIDE_BODY_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLUE_DHIDE_CHAPS_G("clue scroll (hard)", ItemID.BLUE_DHIDE_CHAPS_G, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLUE_DHIDE_CHAPS_T("clue scroll (hard)", ItemID.BLUE_DHIDE_CHAPS_T, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_COIF("clue scroll (hard)", ItemID.SARADOMIN_COIF, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_DHIDE_BODY("clue scroll (hard)", ItemID.SARADOMIN_DHIDE_BODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_CHAPS("clue scroll (hard)", ItemID.SARADOMIN_CHAPS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_BRACERS("clue scroll (hard)", ItemID.SARADOMIN_BRACERS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_DHIDE_BOOTS("clue scroll (hard)", ItemID.SARADOMIN_DHIDE_BOOTS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_COIF("clue scroll (hard)", ItemID.GUTHIX_COIF, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_DHIDE_BODY("clue scroll (hard)", ItemID.GUTHIX_DHIDE_BODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_CHAPS("clue scroll (hard)", ItemID.GUTHIX_CHAPS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_BRACERS("clue scroll (hard)", ItemID.GUTHIX_BRACERS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_DHIDE_BOOTS("clue scroll (hard)", ItemID.GUTHIX_DHIDE_BOOTS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_COIF("clue scroll (hard)", ItemID.ZAMORAK_COIF, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_DHIDE_BODY("clue scroll (hard)", ItemID.ZAMORAK_DHIDE_BODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_CHAPS("clue scroll (hard)", ItemID.ZAMORAK_CHAPS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_BRACERS("clue scroll (hard)", ItemID.ZAMORAK_BRACERS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_DHIDE_BOOTS("clue scroll (hard)", ItemID.ZAMORAK_DHIDE_BOOTS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_COIF("clue scroll (hard)", ItemID.BANDOS_COIF, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_DHIDE_BODY("clue scroll (hard)", ItemID.BANDOS_DHIDE_BODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_CHAPS("clue scroll (hard)", ItemID.BANDOS_CHAPS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_BRACERS("clue scroll (hard)", ItemID.BANDOS_BRACERS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BANDOS_DHIDE_BOOTS("clue scroll (hard)", ItemID.BANDOS_DHIDE_BOOTS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_COIF("clue scroll (hard)", ItemID.ARMADYL_COIF, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_DHIDE_BODY("clue scroll (hard)", ItemID.ARMADYL_DHIDE_BODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_CHAPS("clue scroll (hard)", ItemID.ARMADYL_CHAPS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_BRACERS("clue scroll (hard)", ItemID.ARMADYL_BRACERS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ARMADYL_DHIDE_BOOTS("clue scroll (hard)", ItemID.ARMADYL_DHIDE_BOOTS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_COIF("clue scroll (hard)", ItemID.ANCIENT_COIF, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_DHIDE_BODY("clue scroll (hard)", ItemID.ANCIENT_DHIDE_BODY, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_CHAPS("clue scroll (hard)", ItemID.ANCIENT_CHAPS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_BRACERS("clue scroll (hard)", ItemID.ANCIENT_BRACERS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ANCIENT_DHIDE_BOOTS("clue scroll (hard)", ItemID.ANCIENT_DHIDE_BOOTS, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_STOLE("clue scroll (hard)", ItemID.SARADOMIN_STOLE, 1f / 1625f, true),
	CLUE_SCROLL_HARD_SARADOMIN_CROZIER("clue scroll (hard)", ItemID.SARADOMIN_CROZIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_STOLE("clue scroll (hard)", ItemID.GUTHIX_STOLE, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GUTHIX_CROZIER("clue scroll (hard)", ItemID.GUTHIX_CROZIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_STOLE("clue scroll (hard)", ItemID.ZAMORAK_STOLE, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZAMORAK_CROZIER("clue scroll (hard)", ItemID.ZAMORAK_CROZIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_ZOMBIE_HEAD("clue scroll (hard)", ItemID.ZOMBIE_HEAD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_CYCLOPS_HEAD("clue scroll (hard)", ItemID.CYCLOPS_HEAD, 1f / 1625f, true),
	CLUE_SCROLL_HARD_PIRATES_HAT("clue scroll (hard)", ItemID.PIRATES_HAT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RED_CAVALIER("clue scroll (hard)", ItemID.RED_CAVALIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_WHITE_CAVALIER("clue scroll (hard)", ItemID.WHITE_CAVALIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_NAVY_CAVALIER("clue scroll (hard)", ItemID.NAVY_CAVALIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_TAN_CAVALIER("clue scroll (hard)", ItemID.TAN_CAVALIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_DARK_CAVALIER("clue scroll (hard)", ItemID.DARK_CAVALIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLACK_CAVALIER("clue scroll (hard)", ItemID.BLACK_CAVALIER, 1f / 1625f, true),
	CLUE_SCROLL_HARD_PITH_HELMET("clue scroll (hard)", ItemID.PITH_HELMET, 1f / 1625f, true),
	CLUE_SCROLL_HARD_EXPLORER_BACKPACK("clue scroll (hard)", ItemID.EXPLORER_BACKPACK, 1f / 1625f, true),
	CLUE_SCROLL_HARD_GREEN_DRAGON_MASK("clue scroll (hard)", ItemID.GREEN_DRAGON_MASK, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLUE_DRAGON_MASK("clue scroll (hard)", ItemID.BLUE_DRAGON_MASK, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RED_DRAGON_MASK("clue scroll (hard)", ItemID.RED_DRAGON_MASK, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BLACK_DRAGON_MASK("clue scroll (hard)", ItemID.BLACK_DRAGON_MASK, 1f / 1625f, true),
	CLUE_SCROLL_HARD_NUNCHAKU("clue scroll (hard)", ItemID.NUNCHAKU, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_CANE("clue scroll (hard)", ItemID.RUNE_CANE, 1f / 1625f, true),
	CLUE_SCROLL_HARD_DUAL_SAI("clue scroll (hard)", ItemID.DUAL_SAI, 1f / 1625f, true),
	CLUE_SCROLL_HARD_THIEVING_BAG("clue scroll (hard)", ItemID.THIEVING_BAG, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_DEFENDER_ORNAMENT_KIT("clue scroll (hard)", ItemID.RUNE_DEFENDER_ORNAMENT_KIT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_BERSERKER_NECKLACE_ORNAMENT_KIT("clue scroll (hard)", ItemID.BERSERKER_NECKLACE_ORNAMENT_KIT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_TZHAARKETOM_ORNAMENT_KIT("clue scroll (hard)", ItemID.TZHAARKETOM_ORNAMENT_KIT, 1f / 1625f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_H1("clue scroll (hard)", ItemID.RUNE_PLATEBODY_H1, 1f / 8125f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_H2("clue scroll (hard)", ItemID.RUNE_PLATEBODY_H2, 1f / 8125f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_H3("clue scroll (hard)", ItemID.RUNE_PLATEBODY_H3, 1f / 8125f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_H4("clue scroll (hard)", ItemID.RUNE_PLATEBODY_H4, 1f / 8125f, true),
	CLUE_SCROLL_HARD_RUNE_PLATEBODY_H5("clue scroll (hard)", ItemID.RUNE_PLATEBODY_H5, 1f / 8125f, true),
	CLUE_SCROLL_HARD_SARADOMIN_DHIDE_SHIELD("clue scroll (hard)", ItemID.SARADOMIN_DHIDE_SHIELD, 1f / 9750f, true),
	CLUE_SCROLL_HARD_GUTHIX_DHIDE_SHIELD("clue scroll (hard)", ItemID.GUTHIX_DHIDE_SHIELD, 1f / 9750f, true),
	CLUE_SCROLL_HARD_ZAMORAK_DHIDE_SHIELD("clue scroll (hard)", ItemID.ZAMORAK_DHIDE_SHIELD, 1f / 9750f, true),
	CLUE_SCROLL_HARD_BANDOS_DHIDE_SHIELD("clue scroll (hard)", ItemID.BANDOS_DHIDE_SHIELD, 1f / 9750f, true),
	CLUE_SCROLL_HARD_ARMADYL_DHIDE_SHIELD("clue scroll (hard)", ItemID.ARMADYL_DHIDE_SHIELD, 1f / 9750f, true),
	CLUE_SCROLL_HARD_ANCIENT_DHIDE_SHIELD("clue scroll (hard)", ItemID.ANCIENT_DHIDE_SHIELD, 1f / 9750f, true),

	CLUE_SCROLL_HARD_SUPER_ENERGY4("clue scroll (hard)", ItemID.SUPER_ENERGY4, 1f / 16250f, false),
	CLUE_SCROLL_HARD_SUPER_RESTORE4("clue scroll (hard)", ItemID.SUPER_RESTORE4, 1f / 16250f, false),
	CLUE_SCROLL_HARD_ANTIFIRE_POTION4("clue scroll (hard)", ItemID.ANTIFIRE_POTION4, 1f / 16250f, false),
	CLUE_SCROLL_HARD_SUPER_ATTACK4("clue scroll (hard)", ItemID.SUPER_ATTACK4, 1f / 16250f, false),
	CLUE_SCROLL_HARD_SUPER_STRENGTH4("clue scroll (hard)", ItemID.SUPER_STRENGTH4, 1f / 16250f, false),
	CLUE_SCROLL_HARD_SUPER_DEFENCE4("clue scroll (hard)", ItemID.SUPER_DEFENCE4, 1f / 16250f, false),
	CLUE_SCROLL_HARD_GILDED_FULL_HELM("clue scroll (hard)", ItemID.GILDED_FULL_HELM, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_PLATEBODY("clue scroll (hard)", ItemID.GILDED_PLATEBODY, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_PLATELEGS("clue scroll (hard)", ItemID.GILDED_PLATELEGS, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_PLATESKIRT("clue scroll (hard)", ItemID.GILDED_PLATESKIRT, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_KITESHIELD("clue scroll (hard)", ItemID.GILDED_KITESHIELD, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_MED_HELM("clue scroll (hard)", ItemID.GILDED_MED_HELM, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_CHAINBODY("clue scroll (hard)", ItemID.GILDED_CHAINBODY, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_SQ_SHIELD("clue scroll (hard)", ItemID.GILDED_SQ_SHIELD, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_2H_SWORD("clue scroll (hard)", ItemID.GILDED_2H_SWORD, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_SPEAR("clue scroll (hard)", ItemID.GILDED_SPEAR, 1f / 35750f, false),
	CLUE_SCROLL_HARD_GILDED_HASTA("clue scroll (hard)", ItemID.GILDED_HASTA, 1f / 35750f, false),
	CLUE_SCROLL_HARD_3RD_AGE_FULL_HELMET("clue scroll (hard)", ItemID._3RD_AGE_FULL_HELMET, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_PLATEBODY("clue scroll (hard)", ItemID._3RD_AGE_PLATEBODY, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_PLATELEGS("clue scroll (hard)", ItemID._3RD_AGE_PLATELEGS, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_PLATESKIRT("clue scroll (hard)", ItemID._3RD_AGE_PLATESKIRT, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_KITESHIELD("clue scroll (hard)", ItemID._3RD_AGE_KITESHIELD, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_RANGE_COIF("clue scroll (hard)", ItemID._3RD_AGE_RANGE_COIF, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_RANGE_TOP("clue scroll (hard)", ItemID._3RD_AGE_RANGE_TOP, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_RANGE_LEGS("clue scroll (hard)", ItemID._3RD_AGE_RANGE_LEGS, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_VAMBRACES("clue scroll (hard)", ItemID._3RD_AGE_VAMBRACES, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_MAGE_HAT("clue scroll (hard)", ItemID._3RD_AGE_MAGE_HAT, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_ROBE_TOP("clue scroll (hard)", ItemID._3RD_AGE_ROBE_TOP, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_ROBE("clue scroll (hard)", ItemID._3RD_AGE_ROBE, 1f / 211250f, false),
	CLUE_SCROLL_HARD_3RD_AGE_AMULET("clue scroll (hard)", ItemID._3RD_AGE_AMULET, 1f / 211250f, false),

	CLUE_SCROLL_HARD_MAGIC_COMP_BOW("clue scroll (hard)", ItemID.MAGIC_COMP_BOW, 1f / 270.8f, false),

	CLUE_SCROLL_HARD_RED_FIRELIGHTER("clue scroll (hard)", ItemID.RED_FIRELIGHTER, 1f / 135.4f, false),
	CLUE_SCROLL_HARD_GREEN_FIRELIGHTER("clue scroll (hard)", ItemID.GREEN_FIRELIGHTER, 1f / 135.4f, false),
	CLUE_SCROLL_HARD_BLUE_FIRELIGHTER("clue scroll (hard)", ItemID.BLUE_FIRELIGHTER, 1f / 135.4f, false),
	CLUE_SCROLL_HARD_PURPLE_FIRELIGHTER("clue scroll (hard)", ItemID.PURPLE_FIRELIGHTER, 1f / 135.4f, false),
	CLUE_SCROLL_HARD_WHITE_FIRELIGHTER("clue scroll (hard)", ItemID.WHITE_FIRELIGHTER, 1f / 135.4f, false),
	CLUE_SCROLL_HARD_CHARGE_DRAGONSTONE_JEWELLERY_SCROLL("clue scroll (hard)", ItemID.CHARGE_DRAGONSTONE_JEWELLERY_SCROLL, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_NARDAH_TELEPORT("clue scroll (hard)", ItemID.NARDAH_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_MOS_LEHARMLESS_TELEPORT("clue scroll (hard)", ItemID.MOS_LEHARMLESS_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_MORTTON_TELEPORT("clue scroll (hard)", ItemID.MORTTON_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_FELDIP_HILLS_TELEPORT("clue scroll (hard)", ItemID.FELDIP_HILLS_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_LUNAR_ISLE_TELEPORT("clue scroll (hard)", ItemID.LUNAR_ISLE_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_DIGSITE_TELEPORT("clue scroll (hard)", ItemID.DIGSITE_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_PISCATORIS_TELEPORT("clue scroll (hard)", ItemID.PISCATORIS_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_PEST_CONTROL_TELEPORT("clue scroll (hard)", ItemID.PEST_CONTROL_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_TAI_BWO_WANNAI_TELEPORT("clue scroll (hard)", ItemID.TAI_BWO_WANNAI_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_LUMBERYARD_TELEPORT("clue scroll (hard)", ItemID.LUMBERYARD_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_IORWERTH_CAMP_TELEPORT("clue scroll (hard)", ItemID.IORWERTH_CAMP_TELEPORT, 1f / 340.5f, false),
	CLUE_SCROLL_HARD_HOLY_BLESSING("clue scroll (hard)", ItemID.HOLY_BLESSING, 1f / 541.7f, false),
	CLUE_SCROLL_HARD_UNHOLY_BLESSING("clue scroll (hard)", ItemID.UNHOLY_BLESSING, 1f / 541.7f, false),
	CLUE_SCROLL_HARD_PEACEFUL_BLESSING("clue scroll (hard)", ItemID.PEACEFUL_BLESSING, 1f / 541.7f, false),
	CLUE_SCROLL_HARD_WAR_BLESSING("clue scroll (hard)", ItemID.WAR_BLESSING, 1f / 541.7f, false),
	CLUE_SCROLL_HARD_HONOURABLE_BLESSING("clue scroll (hard)", ItemID.HONOURABLE_BLESSING, 1f / 541.7f, false),
	CLUE_SCROLL_HARD_ANCIENT_BLESSING("clue scroll (hard)", ItemID.ANCIENT_BLESSING, 1f / 541.7f, false),
	CLUE_SCROLL_HARD_MASTER_SCROLL_BOOK_EMPTY("clue scroll (hard)", ItemID.MASTER_SCROLL_BOOK_EMPTY, 1f / 595.8f, false),
	CLUE_SCROLL_HARD_SARADOMIN_PAGE_1("clue scroll (hard)", ItemID.SARADOMIN_PAGE_1, 1f / 650f, false),
	CLUE_SCROLL_HARD_SARADOMIN_PAGE_2("clue scroll (hard)", ItemID.SARADOMIN_PAGE_2, 1f / 650f, false),
	CLUE_SCROLL_HARD_SARADOMIN_PAGE_3("clue scroll (hard)", ItemID.SARADOMIN_PAGE_3, 1f / 650f, false),
	CLUE_SCROLL_HARD_SARADOMIN_PAGE_4("clue scroll (hard)", ItemID.SARADOMIN_PAGE_4, 1f / 650f, false),
	CLUE_SCROLL_HARD_ZAMORAK_PAGE_1("clue scroll (hard)", ItemID.ZAMORAK_PAGE_1, 1f / 650f, false),
	CLUE_SCROLL_HARD_ZAMORAK_PAGE_2("clue scroll (hard)", ItemID.ZAMORAK_PAGE_2, 1f / 650f, false),
	CLUE_SCROLL_HARD_ZAMORAK_PAGE_3("clue scroll (hard)", ItemID.ZAMORAK_PAGE_3, 1f / 650f, false),
	CLUE_SCROLL_HARD_ZAMORAK_PAGE_4("clue scroll (hard)", ItemID.ZAMORAK_PAGE_4, 1f / 650f, false),
	CLUE_SCROLL_HARD_GUTHIX_PAGE_1("clue scroll (hard)", ItemID.GUTHIX_PAGE_1, 1f / 650f, false),
	CLUE_SCROLL_HARD_GUTHIX_PAGE_2("clue scroll (hard)", ItemID.GUTHIX_PAGE_2, 1f / 650f, false),
	CLUE_SCROLL_HARD_GUTHIX_PAGE_3("clue scroll (hard)", ItemID.GUTHIX_PAGE_3, 1f / 650f, false),
	CLUE_SCROLL_HARD_GUTHIX_PAGE_4("clue scroll (hard)", ItemID.GUTHIX_PAGE_4, 1f / 650f, false),
	CLUE_SCROLL_HARD_BANDOS_PAGE_1("clue scroll (hard)", ItemID.BANDOS_PAGE_1, 1f / 650f, false),
	CLUE_SCROLL_HARD_BANDOS_PAGE_2("clue scroll (hard)", ItemID.BANDOS_PAGE_2, 1f / 650f, false),
	CLUE_SCROLL_HARD_BANDOS_PAGE_3("clue scroll (hard)", ItemID.BANDOS_PAGE_3, 1f / 650f, false),
	CLUE_SCROLL_HARD_BANDOS_PAGE_4("clue scroll (hard)", ItemID.BANDOS_PAGE_4, 1f / 650f, false),
	CLUE_SCROLL_HARD_ARMADYL_PAGE_1("clue scroll (hard)", ItemID.ARMADYL_PAGE_1, 1f / 650f, false),
	CLUE_SCROLL_HARD_ARMADYL_PAGE_2("clue scroll (hard)", ItemID.ARMADYL_PAGE_2, 1f / 650f, false),
	CLUE_SCROLL_HARD_ARMADYL_PAGE_3("clue scroll (hard)", ItemID.ARMADYL_PAGE_3, 1f / 650f, false),
	CLUE_SCROLL_HARD_ARMADYL_PAGE_4("clue scroll (hard)", ItemID.ARMADYL_PAGE_4, 1f / 650f, false),
	CLUE_SCROLL_HARD_ANCIENT_PAGE_1("clue scroll (hard)", ItemID.ANCIENT_PAGE_1, 1f / 650f, false),
	CLUE_SCROLL_HARD_ANCIENT_PAGE_2("clue scroll (hard)", ItemID.ANCIENT_PAGE_2, 1f / 650f, false),
	CLUE_SCROLL_HARD_ANCIENT_PAGE_3("clue scroll (hard)", ItemID.ANCIENT_PAGE_3, 1f / 650f, false),
	CLUE_SCROLL_HARD_ANCIENT_PAGE_4("clue scroll (hard)", ItemID.ANCIENT_PAGE_4, 1f / 650f, false),

	CLUE_SCROLL_ELITE_DRAGON_FULL_HELM_ORNAMENT_KIT("clue scroll (elite)", ItemID.DRAGON_FULL_HELM_ORNAMENT_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DRAGON_CHAINBODY_ORNAMENT_KIT("clue scroll (elite)", ItemID.DRAGON_CHAINBODY_ORNAMENT_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DRAGON_LEGSSKIRT_ORNAMENT_KIT("clue scroll (elite)", ItemID.DRAGON_LEGSSKIRT_ORNAMENT_KIT, 1 / 1250f, true),
	CLUE_SCROLL_ELITE_DRAGON_SQ_SHIELD_ORNAMENT_KIT("clue scroll (elite)", ItemID.DRAGON_SQ_SHIELD_ORNAMENT_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DRAGON_SCIMITAR_ORNAMENT_KIT("clue scroll (elite)", ItemID.DRAGON_SCIMITAR_ORNAMENT_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_FURY_ORNAMENT_KIT("clue scroll (elite)", ItemID.FURY_ORNAMENT_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_LIGHT_INFINITY_COLOUR_KIT("clue scroll (elite)", ItemID.LIGHT_INFINITY_COLOUR_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DARK_INFINITY_COLOUR_KIT("clue scroll (elite)", ItemID.DARK_INFINITY_COLOUR_KIT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_ROYAL_CROWN("clue scroll (elite)", ItemID.ROYAL_CROWN, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_ROYAL_GOWN_TOP("clue scroll (elite)", ItemID.ROYAL_GOWN_TOP, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_ROYAL_GOWN_BOTTOM("clue scroll (elite)", ItemID.ROYAL_GOWN_BOTTOM, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_ROYAL_SCEPTRE("clue scroll (elite)", ItemID.ROYAL_SCEPTRE, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_MUSKETEER_HAT("clue scroll (elite)", ItemID.MUSKETEER_HAT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_MUSKETEER_TABARD("clue scroll (elite)", ItemID.MUSKETEER_TABARD, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_MUSKETEER_PANTS("clue scroll (elite)", ItemID.MUSKETEER_PANTS, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BLACK_DHIDE_BODY_G("clue scroll (elite)", ItemID.BLACK_DHIDE_BODY_G, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BLACK_DHIDE_BODY_T("clue scroll (elite)", ItemID.BLACK_DHIDE_BODY_T, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BLACK_DHIDE_CHAPS_G("clue scroll (elite)", ItemID.BLACK_DHIDE_CHAPS_G, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BLACK_DHIDE_CHAPS_T("clue scroll (elite)", ItemID.BLACK_DHIDE_CHAPS_T, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_RANGERS_TUNIC("clue scroll (elite)", ItemID.RANGERS_TUNIC, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_RANGER_GLOVES("clue scroll (elite)", ItemID.RANGER_GLOVES, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_HOLY_WRAPS("clue scroll (elite)", ItemID.HOLY_WRAPS, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BRONZE_DRAGON_MASK("clue scroll (elite)", ItemID.BRONZE_DRAGON_MASK, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_IRON_DRAGON_MASK("clue scroll (elite)", ItemID.IRON_DRAGON_MASK, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_STEEL_DRAGON_MASK("clue scroll (elite)", ItemID.STEEL_DRAGON_MASK, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_MITHRIL_DRAGON_MASK("clue scroll (elite)", ItemID.MITHRIL_DRAGON_MASK, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_ADAMANT_DRAGON_MASK("clue scroll (elite)", ItemID.ADAMANT_DRAGON_MASK, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_RUNE_DRAGON_MASK("clue scroll (elite)", ItemID.RUNE_DRAGON_MASK, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_ARCEUUS_SCARF("clue scroll (elite)", ItemID.ARCEUUS_SCARF, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_HOSIDIUS_SCARF("clue scroll (elite)", ItemID.HOSIDIUS_SCARF, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_LOVAKENGJ_SCARF("clue scroll (elite)", ItemID.LOVAKENGJ_SCARF, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_PISCARILIUS_SCARF("clue scroll (elite)", ItemID.PISCARILIUS_SCARF, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_SHAYZIEN_SCARF("clue scroll (elite)", ItemID.SHAYZIEN_SCARF, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_KATANA("clue scroll (elite)", ItemID.KATANA, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DRAGON_CANE("clue scroll (elite)", ItemID.DRAGON_CANE, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BUCKET_HELM("clue scroll (elite)", ItemID.BUCKET_HELM, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BLACKSMITHS_HELM("clue scroll (elite)", ItemID.BLACKSMITHS_HELM, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DEERSTALKER("clue scroll (elite)", ItemID.DEERSTALKER, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_AFRO("clue scroll (elite)", ItemID.AFRO, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BIG_PIRATE_HAT("clue scroll (elite)", ItemID.BIG_PIRATE_HAT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_TOP_HAT("clue scroll (elite)", ItemID.TOP_HAT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_MONOCLE("clue scroll (elite)", ItemID.MONOCLE, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_BRIEFCASE("clue scroll (elite)", ItemID.BRIEFCASE, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_SAGACIOUS_SPECTACLES("clue scroll (elite)", ItemID.SAGACIOUS_SPECTACLES, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_RANGERS_TIGHTS("clue scroll (elite)", ItemID.RANGERS_TIGHTS, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_URIS_HAT("clue scroll (elite)", ItemID.URIS_HAT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_GIANT_BOOT("clue scroll (elite)", ItemID.GIANT_BOOT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_FREMENNIK_KILT("clue scroll (elite)", ItemID.FREMENNIK_KILT, 1f / 1250f, true),
	CLUE_SCROLL_ELITE_DARK_BOW_TIE("clue scroll (elite)", ItemID.DARK_BOW_TIE, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_DARK_TUXEDO_JACKET("clue scroll (elite)", ItemID.DARK_TUXEDO_JACKET, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_DARK_TUXEDO_CUFFS("clue scroll (elite)", ItemID.DARK_TUXEDO_CUFFS, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_DARK_TROUSERS("clue scroll (elite)", ItemID.DARK_TROUSERS, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_DARK_TUXEDO_SHOES("clue scroll (elite)", ItemID.DARK_TUXEDO_SHOES, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_LIGHT_BOW_TIE("clue scroll (elite)", ItemID.LIGHT_BOW_TIE, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_LIGHT_TUXEDO_JACKET("clue scroll (elite)", ItemID.LIGHT_TUXEDO_JACKET, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_LIGHT_TUXEDO_CUFFS("clue scroll (elite)", ItemID.LIGHT_TUXEDO_CUFFS, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_LIGHT_TROUSERS("clue scroll (elite)", ItemID.LIGHT_TROUSERS, 1f / 12500f, true),
	CLUE_SCROLL_ELITE_LIGHT_TUXEDO_SHOES("clue scroll (elite)", ItemID.LIGHT_TUXEDO_SHOES, 1f / 12500f, true),

	CLUE_SCROLL_ELITE_RING_OF_NATURE("clue scroll (elite)", ItemID.RING_OF_NATURE, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_CRYSTAL_KEY("clue scroll (elite)", ItemID.CRYSTAL_KEY, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_LAVA_DRAGON_MASK("clue scroll (elite)", ItemID.LAVA_DRAGON_MASK, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_BATTLESTAFF("clue scroll (elite)", ItemID.BATTLESTAFF, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_EXTENDED_ANTIFIRE4("clue scroll (elite)", ItemID.EXTENDED_ANTIFIRE4, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_SUPER_RESTORE4("clue scroll (elite)", ItemID.SUPER_RESTORE4, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_SARADOMIN_BREW4("clue scroll (elite)", ItemID.SARADOMIN_BREW4, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_RANGING_POTION4("clue scroll (elite)", ItemID.RANGING_POTION4, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_SCIMITAR("clue scroll (elite)", ItemID.GILDED_SCIMITAR, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_BOOTS("clue scroll (elite)", ItemID.GILDED_BOOTS, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_COIF("clue scroll (elite)", ItemID.GILDED_COIF, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_DHIDE_VAMBRACES("clue scroll (elite)", ItemID.GILDED_DHIDE_VAMBRACES, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_DHIDE_BODY("clue scroll (elite)", ItemID.GILDED_DHIDE_BODY, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_DHIDE_CHAPS("clue scroll (elite)", ItemID.GILDED_DHIDE_CHAPS, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_PICKAXE("clue scroll (elite)", ItemID.GILDED_PICKAXE, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_AXE("clue scroll (elite)", ItemID.GILDED_AXE, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_SPADE("clue scroll (elite)", ItemID.GILDED_SPADE, 1f / 28750f, true),
	CLUE_SCROLL_ELITE_GILDED_FULL_HELM("clue scroll (elite)", ItemID.GILDED_FULL_HELM, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_PLATEBODY("clue scroll (elite)", ItemID.GILDED_PLATEBODY, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_PLATELEGS("clue scroll (elite)", ItemID.GILDED_PLATELEGS, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_PLATESKIRT("clue scroll (elite)", ItemID.GILDED_PLATESKIRT, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_KITESHIELD("clue scroll (elite)", ItemID.GILDED_KITESHIELD, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_MED_HELM("clue scroll (elite)", ItemID.GILDED_MED_HELM, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_CHAINBODY("clue scroll (elite)", ItemID.GILDED_CHAINBODY, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_SQ_SHIELD("clue scroll (elite)", ItemID.GILDED_SQ_SHIELD, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_2H_SWORD("clue scroll (elite)", ItemID.GILDED_2H_SWORD, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_SPEAR("clue scroll (elite)", ItemID.GILDED_SPEAR, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_GILDED_HASTA("clue scroll (elite)", ItemID.GILDED_HASTA, 1f / 63250f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_FULL_HELMET("clue scroll (elite)", ItemID._3RD_AGE_FULL_HELMET, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_PLATEBODY("clue scroll (elite)", ItemID._3RD_AGE_PLATEBODY, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_PLATELEGS("clue scroll (elite)", ItemID._3RD_AGE_PLATELEGS, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_PLATESKIRT("clue scroll (elite)", ItemID._3RD_AGE_PLATESKIRT, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_KITESHIELD("clue scroll (elite)", ItemID._3RD_AGE_KITESHIELD, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_RANGE_COIF("clue scroll (elite)", ItemID._3RD_AGE_RANGE_COIF, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_RANGE_TOP("clue scroll (elite)", ItemID._3RD_AGE_RANGE_TOP, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_RANGE_LEGS("clue scroll (elite)", ItemID._3RD_AGE_RANGE_LEGS, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_VAMBRACES("clue scroll (elite)", ItemID._3RD_AGE_VAMBRACES, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_MAGE_HAT("clue scroll (elite)", ItemID._3RD_AGE_MAGE_HAT, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_ROBE_TOP("clue scroll (elite)", ItemID._3RD_AGE_ROBE_TOP, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_ROBE("clue scroll (elite)", ItemID._3RD_AGE_ROBE, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_AMULET("clue scroll (elite)", ItemID._3RD_AGE_AMULET, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_LONGSWORD("clue scroll (elite)", ItemID._3RD_AGE_LONGSWORD, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_WAND("clue scroll (elite)", ItemID._3RD_AGE_WAND, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_CLOAK("clue scroll (elite)", ItemID._3RD_AGE_CLOAK, 1f / 488750f, true),
	CLUE_SCROLL_ELITE_3RD_AGE_BOW("clue scroll (elite)", ItemID._3RD_AGE_BOW, 1f / 488750f, true),

	CLUE_SCROLL_ELITE_RING_OF_3RD_AGE("clue scroll (elite)", ItemID.RING_OF_3RD_AGE, 1f / 44f, true),
	CLUE_SCROLL_ELITE_TOOTH_HALF_OF_KEY("clue scroll (elite)", ItemID.TOOTH_HALF_OF_KEY, 1f / 64.6f, false),
	CLUE_SCROLL_ELITE_LOOP_HALF_OF_KEY("clue scroll (elite)", ItemID.LOOP_HALF_OF_KEY, 1f / 64.6f, false),
	CLUE_SCROLL_ELITE_PALM_TREE_SEED("clue scroll (elite)", ItemID.PALM_TREE_SEED, 1f / 96.9f, false),
	CLUE_SCROLL_ELITE_YEW_SEED("clue scroll (elite)", ItemID.YEW_SEED, 1f / 96.9f, false),
	CLUE_SCROLL_ELITE_MAGIC_SEED("clue scroll (elite)", ItemID.MAGIC_SEED, 1f / 96.9f, false),

	CLUE_SCROLL_MASTER_OCCULT_ORNAMENT_KIT("clue scroll (master)", ItemID.OCCULT_ORNAMENT_KIT, 1f / 851f, true),
	CLUE_SCROLL_MASTER_TORTURE_ORNAMENT_KIT("clue scroll (master)", ItemID.TORTURE_ORNAMENT_KIT, 1f / 851f, true),
	CLUE_SCROLL_MASTER_ANGUISH_ORNAMENT_KIT("clue scroll (master)", ItemID.ANGUISH_ORNAMENT_KIT, 1f / 851f, true),
	CLUE_SCROLL_MASTER_TORMENTED_ORNAMENT_KIT("clue scroll (master)", ItemID.TORMENTED_ORNAMENT_KIT, 1f / 851f, true),
	CLUE_SCROLL_MASTER_DRAGON_DEFENDER_ORNAMENT_KIT("clue scroll (master)", ItemID.DRAGON_DEFENDER_ORNAMENT_KIT, 1f / 851f, true),
	CLUE_SCROLL_MASTER_HOOD_OF_DARKNESS("clue scroll (master)", ItemID.HOOD_OF_DARKNESS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_ROBE_TOP_OF_DARKNESS("clue scroll (master)", ItemID.ROBE_TOP_OF_DARKNESS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_GLOVES_OF_DARKNESS("clue scroll (master)", ItemID.GLOVES_OF_DARKNESS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_ROBE_BOTTOM_OF_DARKNESS("clue scroll (master)", ItemID.ROBE_BOTTOM_OF_DARKNESS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_BOOTS_OF_DARKNESS("clue scroll (master)", ItemID.BOOTS_OF_DARKNESS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_SAMURAI_KASA("clue scroll (master)", ItemID.SAMURAI_KASA, 1f / 851f, true),
	CLUE_SCROLL_MASTER_SAMURAI_SHIRT("clue scroll (master)", ItemID.SAMURAI_SHIRT, 1f / 851f, true),
	CLUE_SCROLL_MASTER_SAMURAI_GLOVES("clue scroll (master)", ItemID.SAMURAI_GLOVES, 1f / 851f, true),
	CLUE_SCROLL_MASTER_SAMURAI_GREAVES("clue scroll (master)", ItemID.SAMURAI_GREAVES, 1f / 851f, true),
	CLUE_SCROLL_MASTER_SAMURAI_BOOTS("clue scroll (master)", ItemID.SAMURAI_BOOTS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_ARCEUUS_HOOD("clue scroll (master)", ItemID.ARCEUUS_HOOD, 1f / 851f, true),
	CLUE_SCROLL_MASTER_HOSIDIUS_HOOD("clue scroll (master)", ItemID.HOSIDIUS_HOOD, 1f / 851f, true),
	CLUE_SCROLL_MASTER_LOVAKENGJ_HOOD("clue scroll (master)", ItemID.LOVAKENGJ_HOOD, 1f / 851f, true),
	CLUE_SCROLL_MASTER_PISCARILIUS_HOOD("clue scroll (master)", ItemID.PISCARILIUS_HOOD, 1f / 851f, true),
	CLUE_SCROLL_MASTER_SHAYZIEN_HOOD("clue scroll (master)", ItemID.SHAYZIEN_HOOD, 1f / 851f, true),
	CLUE_SCROLL_MASTER_OLD_DEMON_MASK("clue scroll (master)", ItemID.OLD_DEMON_MASK, 1f / 851f, true),
	CLUE_SCROLL_MASTER_LESSER_DEMON_MASK("clue scroll (master)", ItemID.LESSER_DEMON_MASK, 1f / 851f, true),
	CLUE_SCROLL_MASTER_GREATER_DEMON_MASK("clue scroll (master)", ItemID.GREATER_DEMON_MASK, 1f / 851f, true),
	CLUE_SCROLL_MASTER_BLACK_DEMON_MASK("clue scroll (master)", ItemID.BLACK_DEMON_MASK, 1f / 851f, true),
	CLUE_SCROLL_MASTER_JUNGLE_DEMON_MASK("clue scroll (master)", ItemID.JUNGLE_DEMON_MASK, 1f / 851f, true),
	CLUE_SCROLL_MASTER_LEFT_EYE_PATCH("clue scroll (master)", ItemID.LEFT_EYE_PATCH, 1f / 851f, true),
	CLUE_SCROLL_MASTER_BOWL_WIG("clue scroll (master)", ItemID.BOWL_WIG, 1f / 851f, true),
	CLUE_SCROLL_MASTER_ALE_OF_THE_GODS("clue scroll (master)", ItemID.ALE_OF_THE_GODS, 1f / 851f, true),
	CLUE_SCROLL_MASTER_OBSIDIAN_CAPE_R("clue scroll (master)", ItemID.OBSIDIAN_CAPE_R, 1f / 851f, true),
	CLUE_SCROLL_MASTER_FANCY_TIARA("clue scroll (master)", ItemID.FANCY_TIARA, 1f / 851f, true),
	CLUE_SCROLL_MASTER_HALF_MOON_SPECTACLES("clue scroll (master)", ItemID.HALF_MOON_SPECTACLES, 1f / 851f, true),
	CLUE_SCROLL_MASTER_ARMADYL_GODSWORD_ORNAMENT_KIT("clue scroll (master)", ItemID.ARMADYL_GODSWORD_ORNAMENT_KIT, 1f / 340f, true),
	CLUE_SCROLL_MASTER_BANDOS_GODSWORD_ORNAMENT_KIT("clue scroll (master)", ItemID.BANDOS_GODSWORD_ORNAMENT_KIT, 1f / 340f, true),
	CLUE_SCROLL_MASTER_SARADOMIN_GODSWORD_ORNAMENT_KIT("clue scroll (master)", ItemID.SARADOMIN_GODSWORD_ORNAMENT_KIT, 1f / 340f, true),
	CLUE_SCROLL_MASTER_ZAMORAK_GODSWORD_ORNAMENT_KIT("clue scroll (master)", ItemID.ZAMORAK_GODSWORD_ORNAMENT_KIT, 1f / 340f, true),
	CLUE_SCROLL_MASTER_DRAGON_PLATEBODY_ORNAMENT_KIT("clue scroll (master)", ItemID.DRAGON_PLATEBODY_ORNAMENT_KIT, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_ANKOU_MASK("clue scroll (master)", ItemID.ANKOU_MASK, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_ANKOU_TOP("clue scroll (master)", ItemID.ANKOU_TOP, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_ANKOU_GLOVES("clue scroll (master)", ItemID.ANKOU_GLOVES, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_ANKOUS_LEGGINGS("clue scroll (master)", ItemID.ANKOUS_LEGGINGS, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_ANKOU_SOCKS("clue scroll (master)", ItemID.ANKOU_SOCKS, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_MUMMYS_HEAD("clue scroll (master)", ItemID.MUMMYS_HEAD, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_MUMMYS_BODY("clue scroll (master)", ItemID.MUMMYS_BODY, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_MUMMYS_HANDS("clue scroll (master)", ItemID.MUMMYS_HANDS, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_MUMMYS_LEGS("clue scroll (master)", ItemID.MUMMYS_LEGS, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_MUMMYS_FEET("clue scroll (master)", ItemID.MUMMYS_FEET, 1f / 12765f, true),
	CLUE_SCROLL_MASTER_DRAGON_KITESHIELD_ORNAMENT_KIT("clue scroll (master)", ItemID.DRAGON_KITESHIELD_ORNAMENT_KIT, 1f / 25530f, true),

	CLUE_SCROLL_MASTER_BUCKET_HELM_G("clue scroll (master)", ItemID.BUCKET_HELM_G, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_RING_OF_COINS("clue scroll (master)", ItemID.RING_OF_COINS, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_CABBAGE("clue scroll (master)", ItemID.CABBAGE, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_ANTIVENOM4("clue scroll (master)", ItemID.ANTIVENOM4, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_TORSTOL("clue scroll (master)", ItemID.TORSTOL, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_SCIMITAR("clue scroll (master)", ItemID.GILDED_SCIMITAR, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_BOOTS("clue scroll (master)", ItemID.GILDED_BOOTS, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_COIF("clue scroll (master)", ItemID.GILDED_COIF, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_DHIDE_VAMBRACES("clue scroll (master)", ItemID.GILDED_DHIDE_VAMBRACES, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_DHIDE_BODY("clue scroll (master)", ItemID.GILDED_DHIDE_BODY, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_DHIDE_CHAPS("clue scroll (master)", ItemID.GILDED_DHIDE_CHAPS, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_PICKAXE("clue scroll (master)", ItemID.GILDED_PICKAXE, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_AXE("clue scroll (master)", ItemID.GILDED_AXE, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_SPADE("clue scroll (master)", ItemID.GILDED_SPADE, 1f / 13616f, true),
	CLUE_SCROLL_MASTER_GILDED_FULL_HELM("clue scroll (master)", ItemID.GILDED_FULL_HELM, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_PLATEBODY("clue scroll (master)", ItemID.GILDED_PLATEBODY, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_PLATELEGS("clue scroll (master)", ItemID.GILDED_PLATELEGS, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_PLATESKIRT("clue scroll (master)", ItemID.GILDED_PLATESKIRT, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_KITESHIELD("clue scroll (master)", ItemID.GILDED_KITESHIELD, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_MED_HELM("clue scroll (master)", ItemID.GILDED_MED_HELM, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_CHAINBODY("clue scroll (master)", ItemID.GILDED_CHAINBODY, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_SQ_SHIELD("clue scroll (master)", ItemID.GILDED_SQ_SHIELD, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_2H_SWORD("clue scroll (master)", ItemID.GILDED_2H_SWORD, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_SPEAR("clue scroll (master)", ItemID.GILDED_SPEAR, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_GILDED_HASTA("clue scroll (master)", ItemID.GILDED_HASTA, 1f / 149776f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_FULL_HELMET("clue scroll (master)", ItemID._3RD_AGE_FULL_HELMET, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_PLATEBODY("clue scroll (master)", ItemID._3RD_AGE_PLATEBODY, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_PLATELEGS("clue scroll (master)", ItemID._3RD_AGE_PLATELEGS, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_PLATESKIRT("clue scroll (master)", ItemID._3RD_AGE_PLATESKIRT, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_KITESHIELD("clue scroll (master)", ItemID._3RD_AGE_KITESHIELD, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_RANGE_COIF("clue scroll (master)", ItemID._3RD_AGE_RANGE_COIF, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_RANGE_TOP("clue scroll (master)", ItemID._3RD_AGE_RANGE_TOP, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_RANGE_LEGS("clue scroll (master)", ItemID._3RD_AGE_RANGE_LEGS, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_VAMBRACES("clue scroll (master)", ItemID._3RD_AGE_VAMBRACES, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_MAGE_HAT("clue scroll (master)", ItemID._3RD_AGE_MAGE_HAT, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_ROBE_TOP("clue scroll (master)", ItemID._3RD_AGE_ROBE_TOP, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_ROBE("clue scroll (master)", ItemID._3RD_AGE_ROBE, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_AMULET("clue scroll (master)", ItemID._3RD_AGE_AMULET, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_DRUIDIC_ROBE_TOP("clue scroll (master)", ItemID._3RD_AGE_DRUIDIC_ROBE_TOP, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_DRUIDIC_ROBE_BOTTOMS("clue scroll (master)", ItemID._3RD_AGE_DRUIDIC_ROBE_BOTTOMS, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_DRUIDIC_CLOAK("clue scroll (master)", ItemID._3RD_AGE_DRUIDIC_CLOAK, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_LONGSWORD("clue scroll (master)", ItemID._3RD_AGE_LONGSWORD, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_BOW("clue scroll (master)", ItemID._3RD_AGE_BOW, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_WAND("clue scroll (master)", ItemID._3RD_AGE_WAND, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_DRUIDIC_STAFF("clue scroll (master)", ItemID._3RD_AGE_DRUIDIC_STAFF, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_CLOAK("clue scroll (master)", ItemID._3RD_AGE_CLOAK, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_PICKAXE("clue scroll (master)", ItemID._3RD_AGE_PICKAXE, 1f / 313168f, true),
	CLUE_SCROLL_MASTER_3RD_AGE_AXE("clue scroll (master)", ItemID._3RD_AGE_AXE, 1f / 313168f, true),

	CLUE_SCROLL_MASTER_RING_OF_3RD_AGE("clue scroll (master)", ItemID.RING_OF_3RD_AGE, 1f / 40f, true),
	CLUE_SCROLL_MASTER_TOOTH_HALF_OF_KEY("clue scroll (master)", ItemID.TOOTH_HALF_OF_KEY, 1f / 60.6f, false),
	CLUE_SCROLL_MASTER_LOOP_HALF_OF_KEY("clue scroll (master)", ItemID.LOOP_HALF_OF_KEY, 1f / 60.6f, false),
	CLUE_SCROLL_MASTER_PALM_TREE_SEED("clue scroll (master)", ItemID.PALM_TREE_SEED, 1f / 91f, false),
	CLUE_SCROLL_MASTER_YEW_SEED("clue scroll (master)", ItemID.YEW_SEED, 1f / 91f, false),
	CLUE_SCROLL_MASTER_MAGIC_SEED("clue scroll (master)", ItemID.MAGIC_SEED, 1f / 91f, false),

	CLUE_SCROLL_MASTER_RED_FIRELIGHTER("clue scroll (master)", ItemID.RED_FIRELIGHTER, 1f / 151.6f, false),
	CLUE_SCROLL_MASTER_GREEN_FIRELIGHTER("clue scroll (master)", ItemID.GREEN_FIRELIGHTER, 1f / 151.6f, false),
	CLUE_SCROLL_MASTER_BLUE_FIRELIGHTER("clue scroll (master)", ItemID.BLUE_FIRELIGHTER, 1f / 151.6f, false),
	CLUE_SCROLL_MASTER_PURPLE_FIRELIGHTER("clue scroll (master)", ItemID.PURPLE_FIRELIGHTER, 1f / 151.6f, false),
	CLUE_SCROLL_MASTER_WHITE_FIRELIGHTER("clue scroll (master)", ItemID.WHITE_FIRELIGHTER, 1f / 151.6f, false),
	CLUE_SCROLL_MASTER_CHARGE_DRAGONSTONE_JEWELLERY_SCROLL("clue scroll (master)", ItemID.CHARGE_DRAGONSTONE_JEWELLERY_SCROLL, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_NARDAH_TELEPORT("clue scroll (master)", ItemID.NARDAH_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_MOS_LEHARMLESS_TELEPORT("clue scroll (master)", ItemID.MOS_LEHARMLESS_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_MORTTON_TELEPORT("clue scroll (master)", ItemID.MORTTON_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_FELDIP_HILLS_TELEPORT("clue scroll (master)", ItemID.FELDIP_HILLS_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_LUNAR_ISLE_TELEPORT("clue scroll (master)", ItemID.LUNAR_ISLE_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_DIGSITE_TELEPORT("clue scroll (master)", ItemID.DIGSITE_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_PISCATORIS_TELEPORT("clue scroll (master)", ItemID.PISCATORIS_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_PEST_CONTROL_TELEPORT("clue scroll (master)", ItemID.PEST_CONTROL_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_TAI_BWO_WANNAI_TELEPORT("clue scroll (master)", ItemID.TAI_BWO_WANNAI_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_LUMBERYARD_TELEPORT("clue scroll (master)", ItemID.LUMBERYARD_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_IORWERTH_CAMP_TELEPORT("clue scroll (master)", ItemID.IORWERTH_CAMP_TELEPORT, 1f / 190.6f, false),
	CLUE_SCROLL_MASTER_MASTER_SCROLL_BOOK_EMPTY("clue scroll (master)", ItemID.MASTER_SCROLL_BOOK_EMPTY, 1f / 333.5f, false),
	CLUE_SCROLL_MASTER_HOLY_BLESSING("clue scroll (master)", ItemID.HOLY_BLESSING, 1f / 606.4f, false),
	CLUE_SCROLL_MASTER_UNHOLY_BLESSING("clue scroll (master)", ItemID.UNHOLY_BLESSING, 1f / 606.4f, false),
	CLUE_SCROLL_MASTER_PEACEFUL_BLESSING("clue scroll (master)", ItemID.PEACEFUL_BLESSING, 1f / 606.4f, false),
	CLUE_SCROLL_MASTER_WAR_BLESSING("clue scroll (master)", ItemID.WAR_BLESSING, 1f / 606.4f, false),
	CLUE_SCROLL_MASTER_HONOURABLE_BLESSING("clue scroll (master)", ItemID.HONOURABLE_BLESSING, 1f / 606.4f, false),
	CLUE_SCROLL_MASTER_ANCIENT_BLESSING("clue scroll (master)", ItemID.ANCIENT_BLESSING, 1f / 606.4f, false),
	CLUE_SCROLL_MASTER_SARADOMIN_PAGE_1("clue scroll (master)", ItemID.SARADOMIN_PAGE_1, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_SARADOMIN_PAGE_2("clue scroll (master)", ItemID.SARADOMIN_PAGE_2, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_SARADOMIN_PAGE_3("clue scroll (master)", ItemID.SARADOMIN_PAGE_3, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_SARADOMIN_PAGE_4("clue scroll (master)", ItemID.SARADOMIN_PAGE_4, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ZAMORAK_PAGE_1("clue scroll (master)", ItemID.ZAMORAK_PAGE_1, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ZAMORAK_PAGE_2("clue scroll (master)", ItemID.ZAMORAK_PAGE_2, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ZAMORAK_PAGE_3("clue scroll (master)", ItemID.ZAMORAK_PAGE_3, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ZAMORAK_PAGE_4("clue scroll (master)", ItemID.ZAMORAK_PAGE_4, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_GUTHIX_PAGE_1("clue scroll (master)", ItemID.GUTHIX_PAGE_1, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_GUTHIX_PAGE_2("clue scroll (master)", ItemID.GUTHIX_PAGE_2, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_GUTHIX_PAGE_3("clue scroll (master)", ItemID.GUTHIX_PAGE_3, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_GUTHIX_PAGE_4("clue scroll (master)", ItemID.GUTHIX_PAGE_4, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_BANDOS_PAGE_1("clue scroll (master)", ItemID.BANDOS_PAGE_1, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_BANDOS_PAGE_2("clue scroll (master)", ItemID.BANDOS_PAGE_2, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_BANDOS_PAGE_3("clue scroll (master)", ItemID.BANDOS_PAGE_3, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_BANDOS_PAGE_4("clue scroll (master)", ItemID.BANDOS_PAGE_4, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ARMADYL_PAGE_1("clue scroll (master)", ItemID.ARMADYL_PAGE_1, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ARMADYL_PAGE_2("clue scroll (master)", ItemID.ARMADYL_PAGE_2, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ARMADYL_PAGE_3("clue scroll (master)", ItemID.ARMADYL_PAGE_3, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ARMADYL_PAGE_4("clue scroll (master)", ItemID.ARMADYL_PAGE_4, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ANCIENT_PAGE_1("clue scroll (master)", ItemID.ANCIENT_PAGE_1, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ANCIENT_PAGE_2("clue scroll (master)", ItemID.ANCIENT_PAGE_2, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ANCIENT_PAGE_3("clue scroll (master)", ItemID.ANCIENT_PAGE_3, 1f / 702.6f, false),
	CLUE_SCROLL_MASTER_ANCIENT_PAGE_4("clue scroll (master)", ItemID.ANCIENT_PAGE_4, 1f / 702.6f, false),

	BRIMSTONE_CHEST_BROKEN_DRAGON_HASTA("brimstone chest", ItemID.BROKEN_DRAGON_HASTA, 1f / 200f, true),
	BRIMSTONE_CHEST_MYSTIC_HAT_DUSK("brimstone chest", ItemID.MYSTIC_HAT_DUSK, 1f / 1000f, true),
	BRIMSTONE_CHEST_MYSTIC_ROBE_TOP_DUSK("brimstone chest", ItemID.MYSTIC_ROBE_TOP_DUSK, 1f / 1000f, true),
	BRIMSTONE_CHEST_MYSTIC_ROBE_BOTTOM_DUSK("brimstone chest", ItemID.MYSTIC_ROBE_BOTTOM_DUSK, 1f / 1000f, true),
	BRIMSTONE_CHEST_MYSTIC_GLOVES_DUSK("brimstone chest", ItemID.MYSTIC_GLOVES_DUSK, 1f / 1000f, true),
	BRIMSTONE_CHEST_MYSTIC_BOOTS_DUSK("brimstone chest", ItemID.MYSTIC_BOOTS_DUSK, 1f / 1000f, true),

	LARRANS_BIG_CHEST_DAGONHAI_HAT("larran's big chest", ItemID.DAGONHAI_HAT, 1f / 256f, true),
	LARRANS_BIG_CHEST_DAGONHAI_ROBE_TOP("larran's big chest", ItemID.DAGONHAI_ROBE_TOP, 1f / 256f, true),
	LARRANS_BIG_CHEST_DAGONHAI_ROBE_BOTTOM("larran's big chest", ItemID.DAGONHAI_ROBE_BOTTOM, 1f / 256f, true),

	THE_GAUNTLET_CRYSTAL_WEAPON_SEED("the gauntlet", ItemID.CRYSTAL_WEAPON_SEED, 1f / 120f, true),
	THE_GAUNTLET_CRYSTAL_ARMOUR_SEED("the gauntlet", ItemID.CRYSTAL_ARMOUR_SEED, 1f / 120f, true),
	THE_GAUNTLET_BLADE_OF_SAELDOR_INACTIVE("the gauntlet", ItemID.BLADE_OF_SAELDOR_INACTIVE, 1f / 2000f, true),

	ELVEN_CRYSTAL_CHEST_UNCUT_ONYX("elven crystal chest", ItemID.UNCUT_ONYX, 1f / 10000f, false),
	ELVEN_CRYSTAL_CHEST_DRAGONSTONE_FULL_HELM("elven crystal chest", ItemID.DRAGONSTONE_FULL_HELM, 1f / 2500f, true),
	ELVEN_CRYSTAL_CHEST_DRAGONSTONE_PLATEBODY("elven crystal chest", ItemID.DRAGONSTONE_PLATEBODY, 1f / 2500f, true),
	ELVEN_CRYSTAL_CHEST_DRAGONSTONE_PLATELEGS("elven crystal chest", ItemID.DRAGONSTONE_PLATELEGS, 1f / 2500f, true),
	ELVEN_CRYSTAL_CHEST_DRAGONSTONE_GAUNTLETS("elven crystal chest", ItemID.DRAGONSTONE_GAUNTLETS, 1f / 2500f, true),
	ELVEN_CRYSTAL_CHEST_DRAGONSTONE_BOOTS("elven crystal chest", ItemID.DRAGONSTONE_BOOTS, 1f / 2500f, true),
	ELVEN_CRYSTAL_CHEST_DRAGON_PLATELEGS("elven crystal chest", ItemID.DRAGON_PLATELEGS, 1f / 2500f, false),
	ELVEN_CRYSTAL_CHEST_DRAGON_PLATESKIRT("elven crystal chest", ItemID.DRAGON_PLATESKIRT, 1f / 2500f, false),
	ELVEN_CRYSTAL_CHEST_SHIELD_LEFT_HALF("elven crystal chest", ItemID.SHIELD_LEFT_HALF, 1f / 2500f, false),

	CRYSTAL_CHEST_ADAMANT_SQ_SHIELD("crystal chest", ItemID.ADAMANT_SQ_SHIELD, 1f / 64f, false),
	CRYSTAL_CHEST_RUNE_PLATELEGS("crystal chest", ItemID.RUNE_PLATELEGS, 1f / 128f, false),
	CRYSTAL_CHEST_RUNE_PLATESKIRT("crystal chest", ItemID.RUNE_PLATESKIRT, 1f / 128f, false),

	HESPORI_BOTTOMLESS_COMPOST_BUCKET("hespori", ItemID.BOTTOMLESS_COMPOST_BUCKET, 1f / 35f, true),

	// NOTE: Skilling pet rarity is all over the place based on level, method etc. so they're excluded (but roughly in the 1 / 100000's and up)
	// should still be caught by the pet detection system, just not with any rarity info
	PET_ABYSSAL_ORPHAN("pet", ItemID.ABYSSAL_ORPHAN, 1f / 2560f, true),
	PET_BABY_MOLE("pet", ItemID.BABY_MOLE, 1f / 3000f, true),
	PET_CALLISTO_CUB("pet", ItemID.CALLISTO_CUB, 1f / 2000f, true),
	PET_HELLPUPPY("pet", ItemID.HELLPUPPY, 1f / 3000f, true),
	PET_IKKLE_HYDRA("pet", ItemID.IKKLE_HYDRA, 1f / 3000f, true),
	PET_JALNIBREK("pet", ItemID.JALNIBREK, 1f / 100f, true),
	PET_TZREKZUK("pet", ItemID.TZREKZUK, 1f / 100f, true),
	PET_KALPHITE_PRINCESS("pet", ItemID.KALPHITE_PRINCESS, 1f / 3000f, true),
	PET_LIL_ZIK("pet", ItemID.LIL_ZIK, 1f / 650f, true),
	PET_LITTLE_NIGHTMARE("pet", ItemID.LITTLE_NIGHTMARE, 1f / 4000f, true),
	PET_NOON("pet", ItemID.NOON, 1f / 3000f, true),
	PET_MIDNIGHT("pet", ItemID.MIDNIGHT, 1f / 3000f, true),
	PET_OLMLET("pet", ItemID.OLMLET, 1f / 2000f, true),
	PET_TUMEKENS_GUARDIAN("pet", ItemID.TUMEKENS_GUARDIAN, 1f / 2000f, true),
	PET_CHAOS_ELEMENTAL("pet", ItemID.PET_CHAOS_ELEMENTAL, 1f / 300f, true),
	PET_DAGANNOTH_PRIME("pet", ItemID.PET_DAGANNOTH_PRIME, 1f / 5000f, true),
	PET_DAGANNOTH_REX("pet", ItemID.PET_DAGANNOTH_REX, 1f / 5000f, true),
	PET_DAGANNOTH_SUPREME("pet", ItemID.PET_DAGANNOTH_SUPREME, 1f / 5000f, true),
	PET_DARK_CORE("pet", ItemID.PET_DARK_CORE, 1f / 5000f, true),
	PET_CORPOREAL_CRITTER("pet", ItemID.PET_CORPOREAL_CRITTER, 1f / 5000f, true),
	PET_GENERAL_GRAARDOR("pet", ItemID.PET_GENERAL_GRAARDOR, 1f / 5000f, true),
	PET_KRIL_TSUTSAROTH("pet", ItemID.PET_KRIL_TSUTSAROTH, 1f / 5000f, true),
	PET_KRAKEN("pet", ItemID.PET_KRAKEN, 1f / 3000f, true),
	PET_KREEARRA("pet", ItemID.PET_KREEARRA, 1f / 5000f, true),
	PET_SMOKE_DEVIL("pet", ItemID.PET_SMOKE_DEVIL, 1f / 3000f, true),
	PET_SNAKELING("pet", ItemID.PET_SNAKELING, 1f / 4000f, true),
	PET_ZILYANA("pet", ItemID.PET_ZILYANA, 1f / 5000f, true),
	PET_PRINCE_BLACK_DRAGON("pet", ItemID.PRINCE_BLACK_DRAGON, 1f / 3000f, true),
	PET_SCORPIAS_OFFSPRING("pet", ItemID.SCORPIAS_OFFSPRING, 1f / 2015.75f, true),
	PET_SKOTOS("pet", ItemID.SKOTOS, 1f / 65f, true),
	PET_SRARACHA("pet", ItemID.SRARACHA, 1f / 3000f, true),
	PET_TZREKJAD("pet", ItemID.TZREKJAD, 1f / 200f, true),
	PET_VENENATIS_SPIDERLING("pet", ItemID.VENENATIS_SPIDERLING, 1f / 2000f, true),
	PET_VETION_JR("pet", ItemID.VETION_JR, 1f / 2000f, true),
	PET_VORKI("pet", ItemID.VORKI, 1f / 3000f, true),
	PET_BLOODHOUND("pet", ItemID.BLOODHOUND, 1f / 1000f, true),
	PET_CHOMPY_CHICK("pet", ItemID.CHOMPY_CHICK, 1f / 500f, true),
	PET_HERBI("pet", ItemID.HERBI, 1f / 6500f, true),
	PET_PET_PENANCE_QUEEN("pet", ItemID.PET_PENANCE_QUEEN, 1f / 1000f, true),
	PET_PHOENIX("pet", ItemID.PHOENIX, 1f / 5000f, true),
	PET_YOUNGLLEF("pet", ItemID.YOUNGLLEF, 1f / 2000f, true),
	PET_SMOLCANO("pet", ItemID.SMOLCANO, 1f / 2250f, true);

	// @formatter:on
	private final String eventName;
	private final int itemId;
	private final float rarity;
	private final boolean unique;

	public static final ImmutableMap<String, ImmutableMap<Integer, RarityItemData>> EVENT_TABLE_MAPPING = initEventMapping();

	private static ImmutableMap<String, ImmutableMap<Integer, RarityItemData>> initEventMapping()
	{
		Map<String, ImmutableMap.Builder<Integer, RarityItemData>> temp = new HashMap<>();
		for (EventRarity r : values())
		{
			ImmutableMap.Builder<Integer, RarityItemData> eventMapBuilder = temp.getOrDefault(r.eventName,
				new ImmutableMap.Builder<>());
			RarityItemData rarityItemData = new RarityItemData();
			rarityItemData.Rarity = r.rarity;
			rarityItemData.Unique = r.unique;

			eventMapBuilder.put(r.itemId, rarityItemData);
			temp.putIfAbsent(r.eventName, eventMapBuilder);
		}

		ImmutableMap.Builder<String, ImmutableMap<Integer, RarityItemData>> builder = new ImmutableMap.Builder<>();
		for (String eventName : temp.keySet())
		{
			builder.put(eventName, temp.get(eventName).build());
		}

		return builder.build();
	}


}

package com.masterkenth;

public class ItemData
{
	public Integer ItemId;
	public Integer GePrice;
	public int HaPrice;

	public float Rarity = 1f;
	public boolean Unique = false;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth;

import com.google.common.collect.ImmutableList;
import com.google.inject.Provides;
import com.masterkenth.discord.Author;
import com.masterkenth.discord.Embed;
import com.masterkenth.discord.Field;
import com.masterkenth.discord.Image;
import com.masterkenth.discord.Webhook;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.NPC;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.client.ui.DrawManager;
import net.runelite.http.api.loottracker.LootRecordType;
import okhttp3.HttpUrl;
import org.json.JSONObject;

@Slf4j
@PluginDescriptor(
	name = "Discord Rare Drop Notificater",
	description = "Sends a detailed notification via Discord webhooks whenever you get a rare/unique drop.",
	tags = {"discord", "loot", "unique", "boss", "notification"}
)
public class DiscordRareDropNotificaterPlugin extends Plugin
{
	private static final String PET_MESSAGE_DUPLICATE = "You have a funny feeling like you would have been followed";
	private static final ImmutableList<String> PET_MESSAGES = ImmutableList.of(
		"You have a funny feeling like you're being followed", "You feel something weird sneaking into your backpack",
		"You have a funny feeling like you would have been followed", PET_MESSAGE_DUPLICATE);

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private DiscordRareDropNotificaterConfig config;

	@Inject
	private ItemManager itemManager;

	@Inject
	private DrawManager drawManager;

	@Inject
	private ApiTool apiTool;

	@Inject
	private RarityChecker rarityChecker;

	private CompletableFuture<java.awt.Image> queuedScreenshot = null;

	@Provides
	DiscordRareDropNotificaterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DiscordRareDropNotificaterConfig.class);
	}

	@SuppressWarnings("unchecked")
	@Subscribe
	public void onNpcLootReceived(NpcLootReceived npcLootReceived)
	{
		if(isPlayerIgnored()) return;

		NPC npc = npcLootReceived.getNpc();
		Collection<ItemStack> items = npcLootReceived.getItems();

		List<CompletableFuture<Boolean>> futures = new ArrayList<CompletableFuture<Boolean>>();
		for (ItemStack item : items)
		{
			// Use a wrapper to 'capture' the lambda value
			// this way we only need to call the api once.
			CompletableFuture<ItemData>[] wrapper = new CompletableFuture[1];

			Supplier<CompletableFuture<ItemData>> itemDataSupplier = () -> {
				wrapper[0] = getNPCLootReceivedItemData(npc.getName(), item.getId(), item.getQuantity());
				return wrapper[0];
			};

			canBeSent(item.getId(), item.getQuantity(), itemDataSupplier).thenAccept(canSent -> {
				if (canSent)
				{
					if(wrapper[0] == null){
						// sets the value
						log.debug("We're setting the wrapper value");
						itemDataSupplier.get();
					}

					wrapper[0].thenAccept(itemData -> {
						futures.add(processNpcNotification(npc, item.getId(), item.getQuantity(), itemData.Rarity));
					});
				}
			});
		}

		if (futures.size() > 0)
		{
			CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))
				.thenAccept(_v -> sendScreenshotIfSupposedTo());
		}

		CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))
			.thenAccept(_v -> sendScreenshotIfSupposedTo()).exceptionally(e ->
		{
			log.error(String.format("onNpcLootReceived error: %s", e.getMessage()), e);
			log.error(String.format("npc %d items %s", npcLootReceived.getNpc().getId(),
				npcLootReceived.getItems().stream().map(i -> "" + i.getId()).reduce("", (p, c) -> p + ", " + c)));
			return null;
		});
	}

	@Subscribe
	public void onLootReceived(LootReceived lootReceived)
	{
		if(isPlayerIgnored()) return;

		// Only process EVENTS such as Barrows, CoX etc. and PICKPOCKET
		// For NPCs onNpcLootReceived receives more information and is used instead.
		if (lootReceived.getType() == LootRecordType.NPC)
		{
			return;
		}

		Collection<ItemStack> items = lootReceived.getItems();
		List<CompletableFuture<Boolean>> futures = new ArrayList<>();

		for (ItemStack item : items)
		{
			canBeSent(item.getId(), item.getQuantity(), () -> getLootReceivedItemData(lootReceived.getName(), lootReceived.getType(), item.getId())).thenAccept(canSent -> {
				if(canSent){
					futures.add(processEventNotification(lootReceived.getType(), lootReceived.getName(), item.getId(), item.getQuantity()));
				}
			});
		}

		CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))
			.thenAccept(_v -> sendScreenshotIfSupposedTo()).exceptionally(e ->
		{
			log.error(String.format("onLootReceived error: %s", e.getMessage()), e);
			log.error(String.format("event %s items %s", lootReceived.getName(),
				lootReceived.getItems().stream().map(i -> "" + i.getId()).reduce("", (p, c) -> p + ", " + c)));
			return null;
		});

		if (futures.size() > 0)
		{
			CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))
				.thenAccept(_v -> sendScreenshotIfSupposedTo());
		}
	}

	private CompletableFuture<ItemData> getLootReceivedItemData(String eventName, LootRecordType lootRecordType, int itemId){
		CompletableFuture<ItemData> result = new CompletableFuture<>();

		ItemData itemData = lootRecordType == LootRecordType.PICKPOCKET ?
			rarityChecker.CheckRarityPickpocket(eventName, EnrichItem(itemId), itemManager) :
			rarityChecker.CheckRarityEvent(eventName, EnrichItem(itemId), itemManager);

		result.complete(itemData);
		return result;
	}

	private CompletableFuture<ItemData> getNPCLootReceivedItemData(String npcName, int itemId, int quantity)
	{
		ItemData incomplete = EnrichItem(itemId);
		return rarityChecker.CheckRarityNPC(npcName, incomplete, itemManager, quantity);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if(isPlayerIgnored()) return;

		String chatMessage = event.getMessage();

		if (event.getType() != ChatMessageType.GAMEMESSAGE
			&& event.getType() != ChatMessageType.SPAM
			&& event.getType() != ChatMessageType.TRADE
			&& event.getType() != ChatMessageType.FRIENDSCHATNOTIFICATION)
		{
			return;
		}

		if (PET_MESSAGES.stream().anyMatch(chatMessage::contains))
		{
			boolean isDuplicate = chatMessage.contains(PET_MESSAGE_DUPLICATE);
			log.info(String.format("Possible pet: duplicate=%b (%s, %s) %s", isDuplicate, event.getSender(), event.getName(),
				event.getMessage()));

			CompletableFuture<java.awt.Image> screenshotFuture = config.sendScreenshot() ? getScreenshot()
				: CompletableFuture.completedFuture(null);

			screenshotFuture
				// Waiting for screenshot before checking pet allows us to wait one frame, in
				// case pet data is not available yet
				// TODO: Figure out how to get pet info
				.thenApply(screenshot -> queuePetNotification(getPlayerName(), getPlayerIconUrl(), null, -1, isDuplicate)
					.thenCompose(_v -> screenshot != null ? sendScreenshot(getWebhookUrls(), screenshot)
						: CompletableFuture.completedFuture(null)))
				.exceptionally(e ->
				{
					log.error(String.format("onChatMessage (pet) error: %s", e.getMessage()), e);
					log.error(event.toString());
					return null;
				});
		}
	}

	private boolean isPlayerIgnored()
	{
		if(config.whiteListedRSNs().trim().length() > 0) {
			String playerName = getPlayerName().toLowerCase();
			List<String> whiteListedRSNs = Arrays.asList(config.whiteListedRSNs().split(","));

			return whiteListedRSNs.stream().noneMatch(rsn -> rsn.length() > 0 && playerName.equals(rsn.toLowerCase()));
		}

		return false;
	}

	private CompletableFuture<Boolean> canBeSent(int itemId, int quantity, Supplier<CompletableFuture<ItemData>> itemDataSupplier)
	{
		CompletableFuture<Boolean> result = new CompletableFuture<>();
		ItemComposition comp = itemManager.getItemComposition(itemId);
		String lowerName = comp.getName().toLowerCase();

		List<String> whitelist = Arrays.stream(config.whiteListedItems()
			.split(",")).filter(itemName -> itemName.length() > 0)
			.map(String::toLowerCase).collect(Collectors.toList());

		List<String> blacklist = Arrays.stream(config.ignoredKeywords()
			.split(",")).filter(itemName -> itemName.length() > 0)
			.map(String::toLowerCase).collect(Collectors.toList());

		if(log.isDebugEnabled())
		{
			log.debug(String.format("Checking if %s can be sent", lowerName));
		}

		if(whitelist.stream().anyMatch(lowerName::equals)){
			// It's an exact match with whitelist
			// This must be sent

			if(log.isDebugEnabled())
			{
				log.debug("We're whitelisted. We can be sent");
			}

			result.complete(true);
			return result;
		}

		if(blacklist.stream().anyMatch(lowerName::equals)){
			// Exact match with blacklist
			// must be ignored

			if(log.isDebugEnabled())
			{
				log.debug("We're blacklisted. We cannot be sent");
			}

			result.complete(false);
			return result;
		}

		if(whitelist.stream().anyMatch(lowerName::contains)){
			// Fuzzy whitelist
			// is accepted

			if(log.isDebugEnabled())
			{
				log.debug("We're fuzzy whitelisted. We can be sent");
			}

			result.complete(true);
			return result;
		}

		if(blacklist.stream().anyMatch(lowerName::contains)){
			// Fuzzy blacklist
			// is ignored
			if(log.isDebugEnabled())
			{
				log.debug("We're fuzzy blacklisted. We cannot be sent");
			}

			result.complete(false);
			return result;
		}

		if(log.isDebugEnabled())
		{
			log.debug("We're not in any item list. We need to continue our check.");
		}


		return itemDataSupplier.get().thenCompose(itemData -> {
			result.complete(meetsRequirements(itemData, quantity));
			return result;
		});
	}

	private CompletableFuture<Boolean> processEventNotification(LootRecordType lootRecordType, String eventName, int itemId, int quantity)
	{
		ItemData itemData = lootRecordType == LootRecordType.PICKPOCKET ? rarityChecker.CheckRarityPickpocket(eventName, EnrichItem(itemId), itemManager) : rarityChecker.CheckRarityEvent(eventName, EnrichItem(itemId), itemManager);

		queueScreenshot();
		clientThread.invokeLater(() -> {
			queueLootNotification(getPlayerName(), getPlayerIconUrl(), itemId, quantity, itemData.Rarity, -1, -1, null,
				eventName, config.webhookUrl()).thenApply(_v -> true);
		});

		return CompletableFuture.completedFuture(false);
	}

	private boolean meetsRequirements(ItemData item, int quantity)
	{
		if (item == null)
		{
			return false;
		}

		if (config.sendUniques() && item.Unique)
		{
			return true;
		}

		int totalGeValue = item.GePrice * quantity;
		int totalHaValue = item.HaPrice * quantity;

		boolean valueMet = totalGeValue >= config.minValue() || totalHaValue >= config.minValue();
		boolean rarityMet = item.Rarity <= (1f / config.minRarity());

		return config.andInsteadOfOr() ? (valueMet && rarityMet) : (valueMet || rarityMet);
	}

	private ItemData EnrichItem(int itemId)
	{
		ItemData r = new ItemData();
		r.ItemId = itemId;
		r.GePrice = itemManager.getItemPrice(itemId);
		r.HaPrice = itemManager.getItemComposition(itemId).getHaPrice();

		if(log.isDebugEnabled()){
			log.debug(MessageFormat.format("Item {0} prices HA{1}, GE{2}", itemId, r.HaPrice, r.GePrice));
		}

		return r;
	}

	private CompletableFuture<Boolean> processNpcNotification(NPC npc, int itemId, int quantity, float rarity)
	{
		int npcId = npc.getId();
		int npcCombatLevel = npc.getCombatLevel();
		String npcName = npc.getName();

		CompletableFuture<Boolean> f = new CompletableFuture<>();
		queueScreenshot();
		clientThread.invokeLater(() -> {
			queueLootNotification(getPlayerName(), getPlayerIconUrl(), itemId, quantity, rarity, npcId, npcCombatLevel,
				npcName, null, config.webhookUrl()).handle((_v, e) ->
			{
				if (e != null)
				{
					f.completeExceptionally(e);
				}
				else
				{
					f.complete(true);
				}
				return null;
			});
		});

		return f;
	}

	private void queueScreenshot()
	{
		if (queuedScreenshot == null && config.sendScreenshot())
		{
			queuedScreenshot = getScreenshot();
		}
	}

	private void sendScreenshotIfSupposedTo()
	{
		if (queuedScreenshot != null && config.sendScreenshot())
		{
			CompletableFuture<java.awt.Image> copy = queuedScreenshot;
			queuedScreenshot = null;
			copy.thenAccept(screenshot -> sendScreenshot(getWebhookUrls(), screenshot)).handle((v, e) ->
			{
				if (e != null)
				{
					log.error(String.format("sendScreenshotIfSupposedTo error: %s", e.getMessage()), e);
				}
				queuedScreenshot = null;
				return null;
			});
		}
	}

	private CompletableFuture<Void> queueLootNotification(String playerName, String playerIconUrl, int itemId,
														  int quantity, float rarity, int npcId, int npcCombatLevel, String npcName, String eventName, String webhookUrl)
	{
		Webhook webhookData = new Webhook();

		Author author = new Author();
		author.setName(playerName);

		if (playerIconUrl != null)
		{
			author.setIcon_url(playerIconUrl);
		}

		Embed embed = new Embed();
		embed.setAuthor(author);

		if(config.sendRarityAndValue()) {
			Field rarityField = new Field();
			rarityField.setName("Rarity");
			rarityField.setValue(getRarityString(rarity));
			rarityField.setInline(true);

			Field haValueField = new Field();
			haValueField.setName("HA Value");
			haValueField.setValue(getGPValueString(itemManager.getItemComposition(itemId).getHaPrice() * quantity));
			haValueField.setInline(true);

			Field geValueField = new Field();
			geValueField.setName("GE Value");
			geValueField.setValue(getGPValueString(itemManager.getItemPrice(itemId) * quantity));
			geValueField.setInline(true);

			embed.setFields(new Field[]{rarityField, haValueField, geValueField});
		}

		Image thumbnail = new Image();
		String iconUrl = ApiTool.getIconUrl(itemId);
		thumbnail.setUrl(iconUrl);
		embed.setThumbnail(thumbnail);

		CompletableFuture<Void> descFuture = getLootNotificationDescription(itemId, quantity, npcId, npcCombatLevel,
			npcName, eventName, !config.sendEmbeddedMessage()).handle((notifDesc, e) ->
		{
			if (e != null)
			{
				log.error(String.format("queueLootNotification (desc %d) error: %s", itemId, e.getMessage()), e);
			}
			embed.setDescription(notifDesc);
			if(!config.sendEmbeddedMessage()) webhookData.setContent("**" + playerName + "** - " + notifDesc);

			return null;
		});

		return CompletableFuture.allOf(descFuture).thenCompose(_v ->
		{
			if(config.sendEmbeddedMessage()) {
				webhookData.setEmbeds(new Embed[]{embed});
			}
			return sendWebhookData(getWebhookUrls(), webhookData);
		});
	}

	private CompletableFuture<Void> queuePetNotification(String playerName, String playerIconUrl, String petName,
														 int rarity, boolean isDuplicate)
	{
		Author author = new Author();
		author.setName(playerName);

		if (playerIconUrl != null)
		{
			author.setIcon_url(playerIconUrl);
		}

		/*
		 * Field rarityField = new Field(); rarityField.setName("Rarity");
		 * rarityField.setValue(getRarityString(rarity)); rarityField.setInline(true);
		 */

		Embed embed = new Embed();
		embed.setAuthor(author);
		embed.setFields(new Field[]{ /* rarityField */});
		embed.setDescription(getPetNotificationDescription(isDuplicate));

		/*
		 * Image thumbnail = new Image(); CompletableFuture<Void> iconFuture =
		 * ApiTool.getInstance().getIconUrl("pet", -1, petName).thenAccept(iconUrl -> {
		 * thumbnail.setUrl(iconUrl); embed.setThumbnail(thumbnail); });
		 */

		return CompletableFuture.allOf().thenCompose(_v ->
		{
			Webhook webhookData = new Webhook();
			webhookData.setEmbeds(new Embed[]{embed});
			return sendWebhookData(getWebhookUrls(), webhookData);
		});
	}

	private CompletableFuture<java.awt.Image> getScreenshot()
	{
		CompletableFuture<java.awt.Image> f = new CompletableFuture<>();
		drawManager.requestNextFrameListener(screenshotImage ->
		{
			f.complete(screenshotImage);
		});
		return f;
	}

	private CompletableFuture<Void> sendWebhookData(List<String> webhookUrls, Webhook webhookData)
	{
		JSONObject json = new JSONObject(webhookData);
		String jsonStr = json.toString();

		List<Throwable> exceptions = new ArrayList<>();
		List<CompletableFuture<Void>> sends = webhookUrls.stream()
			.map(url -> apiTool.postRaw(url, jsonStr, "application/json").handle((_v, e) ->
			{
				if (e != null)
				{
					exceptions.add(e);
				}
				return null;
			}).thenAccept(_v ->
			{
			})).collect(Collectors.toList());

		return CompletableFuture.allOf(sends.toArray(new CompletableFuture[sends.size()])).thenCompose(_v ->
		{
			if (exceptions.size() > 0)
			{
				log.error(String.format("sendWebhookData got %d error(s)", exceptions.size()));
				exceptions.forEach(t -> log.error(t.getMessage()));
				CompletableFuture<Void> f = new CompletableFuture<>();
				f.completeExceptionally(exceptions.get(0));
				return f;
			}
			return CompletableFuture.completedFuture(null);
		});
	}

	private CompletableFuture<Void> sendScreenshot(List<String> webhookUrls, java.awt.Image screenshot)
	{
		try
		{
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write((BufferedImage) screenshot, "png", baos);
			byte[] imageBytes = baos.toByteArray();

			List<Throwable> exceptions = new ArrayList<>();
			List<CompletableFuture<Void>> sends = webhookUrls.stream()
				.map(url -> apiTool.postFormImage(url, imageBytes, "image/png").handle((_v, e) ->
				{
					if (e != null)
					{
						exceptions.add(e);
					}
					return null;
				}).thenAccept(_v ->
				{
				})).collect(Collectors.toList());

			return CompletableFuture.allOf(sends.toArray(new CompletableFuture[sends.size()])).thenCompose(_v ->
			{
				if (exceptions.size() > 0)
				{
					log.error(String.format("sendScreenshot got %d error(s)", exceptions.size()));
					exceptions.forEach(t -> log.error(t.getMessage()));
					CompletableFuture<Void> f = new CompletableFuture<>();
					f.completeExceptionally(exceptions.get(0));
					return f;
				}
				return CompletableFuture.completedFuture(null);
			});
		}
		catch (Exception e)
		{
			log.error("Unable to send screenshot", e);
			return CompletableFuture.completedFuture(null);
		}
	}

	// TODO: Add Pet notification
	private CompletableFuture<String> getLootNotificationDescription(int itemId, int quantity, int npcId,
																	 int npcCombatLevel, String npcName, String eventName, boolean plainText)
	{
		ItemComposition itemComp = itemManager.getItemComposition(itemId);
		String itemUrl = getWikiUrl(itemComp.getName());
		String baseMsg = (plainText) ?
			"Just got **" + (quantity > 1 ? quantity + "x " : "") + itemComp.getName() + "**" :
			"Just got " + (quantity > 1 ? quantity + "x " : "") + "[" + itemComp.getName() + "](" + itemUrl + ")";

		if (npcId >= 0)
		{
			String npcUrl = getWikiUrl(npcName);
			String fullMsg = (plainText) ?
				baseMsg + " from lvl " + npcCombatLevel + " **" + npcName + "**" :
				baseMsg + " from lvl " + npcCombatLevel + " [" + npcName + "](" + npcUrl + ")";

			return CompletableFuture.completedFuture(fullMsg);
		}
		else if (eventName != null)
		{
			String eventUrl = getWikiUrl(eventName);
			String fullMsg = (plainText) ?
				baseMsg + " from **" + eventName + "**" :
				baseMsg + " from [" + eventName + "](" + eventUrl + ")";
			return CompletableFuture.completedFuture(fullMsg);
		}
		else
		{
			return CompletableFuture.completedFuture(baseMsg + " from something");
		}
	}

	private String getWikiUrl(String search){
		return HttpUrl.parse("https://oldschool.runescape.wiki/").newBuilder()
			.addPathSegments("w/Special:Search").addQueryParameter("search", search).build().toString();
	}

	private String getPetNotificationDescription(boolean isDuplicate)
	{
		if (isDuplicate)
		{
			return "Would've gotten a pet, but already has it.";
		}
		else
		{
			return "Just got a pet.";
		}
	}

	private String getGPValueString(int value)
	{
		return "```fix\n" + NumberFormat.getNumberInstance(Locale.US).format(value) + " GP\n```";
	}

	private String getRarityString(float rarity)
	{
		return "```glsl\n# 1/" + (1 / rarity) + " (" + (rarity * 100f) + "%)\n```";
	}

	private String getPlayerIconUrl()
	{
		switch (client.getVarbitValue(Varbits.ACCOUNT_TYPE))
		{
			case 1:
				return "https://oldschool.runescape.wiki/images/0/09/Ironman_chat_badge.png";
			case 3:
				return "https://oldschool.runescape.wiki/images/b/b8/Hardcore_ironman_chat_badge.png";
			case 2:
				return "https://oldschool.runescape.wiki/images/0/02/Ultimate_ironman_chat_badge.png";
			case 4:
			case 6:
				return "https://oldschool.runescape.wiki/images/Group_ironman_chat_badge.png";
			case 5:
				return "https://oldschool.runescape.wiki/images/Hardcore_group_ironman_chat_badge.png";
			default:
				return null;
		}
	}
	
	private String getPlayerName()
	{
		return client.getLocalPlayer().getName();
	}

	private List<String> getWebhookUrls()
	{
		return Arrays.asList(config.webhookUrl().split("[\\n,]")).stream().filter(u -> u.length() > 0).map(u -> u.trim())
			.collect(Collectors.toList());
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

import javax.inject.Inject;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;

public class ApiTool
{
	@Inject
	private OkHttpClient httpClient;

	public static String getIconUrl(int id)
	{
		return String.format("https://static.runelite.net/cache/item/icon/%d.png", id);
	}

	public CompletableFuture<ResponseBody> postRaw(String url, String data, String type)
	{
		Request request = new Request.Builder().url(url).post(RequestBody.create(MediaType.parse(type), data)).build();

		return callRequest(request);
	}

	public CompletableFuture<Void> postFormImage(String url, byte[] imageBytes, String type)
	{
		MultipartBody.Builder requestBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM)
			.addFormDataPart("file", "image.png", RequestBody.create(MediaType.parse(type), imageBytes));

		Request request = new Request.Builder().url(url).post(requestBuilder.build()).build();

		return callRequest(request).thenAccept(rb ->
		{
		});
	}

	private CompletableFuture<ResponseBody> callRequest(Request request)
	{
		CompletableFuture<ResponseBody> future = new CompletableFuture<>();

		httpClient.newCall(request).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				future.completeExceptionally(e);
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				try (ResponseBody responseBody = response.body())
				{
					if (!response.isSuccessful())
					{
						future.completeExceptionally(new IOException("Unexpected code " + response));
					}
					else
					{
						future.complete(responseBody);
					}
				}
				response.close();
			}
		});

		return future;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, MasterKenth, thefungus
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.masterkenth;

import com.google.common.collect.ImmutableMap;
import lombok.AllArgsConstructor;
import net.runelite.api.ItemID;

// All rarity data have been manually scraped from osrs wiki
// Data set only contain (subjectively) rare drops so that if a drop matches against a pickpocket it is always posted to Discord
@AllArgsConstructor
public enum PickpocketRarity
{
	// @formatter:off
	VYRE_BLOOD_SHARD(ItemID.BLOOD_SHARD, 1f / 5000f),
	ELF_TELEPORT_CRYSTAL(ItemID.ENHANCED_CRYSTAL_TELEPORT_SEED, 1f / 1024f);

	// @formatter:on
	private final int itemId;
	private final float rarity;

	public static final ImmutableMap<Integer, RarityItemData> PICKPOCKET_TABLE_MAPPING = initPickpocketMapping();

	private static ImmutableMap<Integer, RarityItemData> initPickpocketMapping()
	{
		ImmutableMap.Builder<Integer, RarityItemData> builder = new ImmutableMap.Builder<>();
		for (PickpocketRarity r : values())
		{
			RarityItemData data = new RarityItemData();
			data.Unique = true;
			data.Rarity = r.rarity;
			builder.put(r.itemId, data);
		}

		return builder.build();
	}
}

package com.masterkenth;

public class RarityItemData
{
	public float Rarity;
	public boolean Unique;
}

package com.masterkenth.models;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

public class NpcItem {
    @SerializedName("id")
    @Expose
    private Integer ItemID;

    @SerializedName("q")
    @Expose
    private String Quantity;

    @SerializedName("r")
    @Expose
    private Float Rarity;

    public Integer getItemID() {
        return ItemID;
    }

    public void setItemID(Integer itemID) {
        this.ItemID = itemID;
    }

    public String getQuantity() {
        return Quantity;
    }

    public void setQuantity(String quantity) {
        this.Quantity = quantity;
    }

    public Float getRarity() {
        return Rarity;
    }

    public void setRarity(Float rarity) {
        this.Rarity = rarity;
    }
}

package com.masterkenth.models;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

import java.util.List;

public class Npc {
    @SerializedName("n")
    @Expose
    private String npcName;

    @SerializedName("i")
    @Expose
    private List<NpcItem> npcItems = null;

    public String getNpcName() {
        return npcName;
    }

    public void setNpcName(String name) {
        this.npcName = name;
    }

    public List<NpcItem> getItems() {
        return npcItems;
    }

    public void setItems(List<NpcItem> items) {
        this.npcItems = items;
    }
}
