package com.raidspeedruntracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RaidSpeedRunTrackerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RaidSpeedRunTrackerPlugin.class);
		RuneLite.main(args);
	}
}
package com.raidspeedruntracker;

import java.awt.Color;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import lombok.Data;

@Data
public class Split
{
	Duration pbDuration;
	transient Duration timeDifference;
	transient Duration originalPbDuration = this.pbDuration;
	transient Duration newPbDuration;

	transient String pbString;
	transient String splitString;

	RaidRoom raidRoom;
	transient Color splitColor = Color.WHITE;

	public Split(RaidRoom raidRoom)
	{
		this.raidRoom = raidRoom;
	}

	public String getPbString()
	{
		if (this.pbString == null && this.pbDuration != null)
		{
			this.pbString = getFormattedTimeString(pbDuration);
		}

		if (this.pbDuration == null)
		{
			return "-";
		}

		return this.pbString;
	}

	public String getSplitString()
	{
		if (this.splitString == null && this.timeDifference != null)
		{
			//Show either - or + time
			this.splitString = this.timeDifference.isNegative() ? "-" : "+";
			this.splitString += getFormattedTimeString(this.timeDifference.abs());
		}

		return this.splitString;
	}

	private String getFormattedTimeString(Duration duration)
	{
		LocalTime time = LocalTime.ofSecondOfDay(duration.getSeconds());
		String formattedTime = time.format(time.getHour() > 0
			? DateTimeFormatter.ofPattern("HH:mm:ss")
			: DateTimeFormatter.ofPattern("mm:ss"));

		return formattedTime;
	}
}

package com.raidspeedruntracker;


import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Getter
public enum RaidRoom
{
	TEKTON("Tekton", 0),
	CRABS("Crabs", 1),
	ICE_DEMON("Ice Demon", 2),
	SHAMANS("Shamans", 3),
	VANGUARDS("Vanguards", 4),
	THIEVING("Thieving", 5),
	VESPULA("Vespula", 6),
	TIGHTROPE("Tightrope", 7),
	GUARDIANS("Guardians", 8),
	VASA("Vasa", 9),
	MYSTICS("Mystics", 10),
	MUTTADILES("Muttadiles", 11),
	OLM("Olm", 12);

	private final String name;
	private final int position;

	//Get the next raid room in order
	public RaidRoom getNext(){
		return this.ordinal() < RaidRoom.values().length - 1
			? RaidRoom.values()[this.ordinal() + 1]
			: null;
	}
}


package com.raidspeedruntracker;

import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import lombok.Data;

@Data
public class SpeedRunTracker
{
	transient boolean raidComplete = false;
	transient boolean raidInProgress = false;
	transient boolean raidStarted = false;

	transient Instant startTime = Instant.now();

	transient RaidRoom currentRoom = RaidRoom.TEKTON;

	int teamSize = -1;

	List<SpeedRun> speedRuns = new ArrayList<>();
	SpeedRun currentSpeedRun = new SpeedRun();
}





package com.raidspeedruntracker;

import com.google.inject.Provides;
import static com.raidspeedruntracker.CoxUtil.getroom_type;
import java.awt.Color;
import java.lang.reflect.Array;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.raids.Raid;
import net.runelite.client.plugins.raids.solver.LayoutSolver;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Raid Speed Run Tracker"
)
public class RaidSpeedRunTrackerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private RaidSpeedRunTrackerConfig config;

	@Inject
	private SpeedRunTracker speedRunTracker;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private RaidSpeedRunTrackerOverlay overlay;

	@Setter
	private RaidSpeedRunFileReadWrite fw = new RaidSpeedRunFileReadWrite();

	private int cryp[] = new int[16], cryx[] = new int[16], cryy[] = new int[16];

	private static final String RAID_COMPLETE_MESSAGE = "Congratulations - your raid is complete!";
	private static final String RAID_START_MESSAGE = "The raid has begun!";
	private static final int CM_FLAG_VARBIT = 6385;

	@Override
	protected void startUp() throws Exception
	{
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			fw.updateUsername(client.getUsername());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION
			|| event.getType() == ChatMessageType.GAMEMESSAGE)
		{
			String message = Text.removeTags(event.getMessage());

			if (message.startsWith(RAID_COMPLETE_MESSAGE))
			{
				split();
			}

			if (message.startsWith(RAID_START_MESSAGE))
			{
				speedRunTracker.setRaidStarted(true);
			}
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		boolean raidStarted = client.getVar(Varbits.RAID_STATE) > 0;
		boolean inRaid = client.getVar(Varbits.IN_RAID) == 1;
		boolean isCm = client.getVarbitValue(CM_FLAG_VARBIT) == 1;
		int teamSize = client.getVar(Varbits.RAID_PARTY_SIZE);

		if (speedRunTracker.isRaidStarted()
			&& inRaid
			&& !speedRunTracker.isRaidInProgress()
			&& isCm
		)
		{
			speedRunTracker.setTeamSize(teamSize);
			speedRunTracker.setRaidInProgress(true);
			speedRunTracker.setStartTime(Instant.now());

			loadSplits(teamSize);
			overlayManager.add(overlay);

		}
		else if (speedRunTracker.raidInProgress && !inRaid)
		{
			ResetSpeedRunTracker();
		}
		//Sometimes when the raid starts, the raid size isn't correct. If the team gets larger, set the new size and re-load the splits
		else if (speedRunTracker.isRaidInProgress() && inRaid && teamSize > speedRunTracker.getTeamSize())
		{
			speedRunTracker.setTeamSize(teamSize);
			loadSplits(teamSize);
		}
	}

	//Credit to dey0 for this: https://github.com/dey0/pluginhub-plugins
	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned e)
	{
		GameObject go = e.getGameObject();
		switch (go.getId())
		{
			case 26209: // shamans/thieving/guardians
			case 29741: // mystics
			case 29749: // tightrope
			case 29753: // crabs
			case 29754:
			case 29755:
			case 29756:
			case 29757:
			case 29876: // ice
			case 30016: // vasa
			case 30017: // tekton/vanguards
			case 30018: // mutt
			case 30070: // vespula
				Point pt = go.getSceneMinLocation();
				int p = go.getPlane();
				int x = pt.getX();
				int y = pt.getY();
				int template = client.getInstanceTemplateChunks()[p][x / 8][y / 8];
				int roomtype = getroom_type(template);
				if (roomtype < 16)
				{
					// add obstacle to list
					cryp[roomtype] = p;
					cryx[roomtype] = x + client.getBaseX();
					cryy[roomtype] = y + client.getBaseY();
				}
				break;
		}
	}

	//Credit to dey0 for this: https://github.com/dey0/pluginhub-plugins
	@Subscribe
	public void onClientTick(ClientTick e)
	{
		for (int i = 0; i < 16; i++)
		{
			if (this.cryp[i] == -1)
			{
				continue;
			}
			int p = cryp[i];
			int x = cryx[i] - client.getBaseX();
			int y = cryy[i] - client.getBaseY();
			if (p != client.getPlane()
				|| x < 0 || x >= 104
				|| y < 0 || y >= 104)
			{
				this.cryp[i] = -1;
				continue;
			}
			int flags = client.getCollisionMaps()[p].getFlags()[x][y];
			if ((flags & 0x100) == 0)
			{
				split();
				this.cryp[i] = -1;
			}
		}
	}

	@Provides
	RaidSpeedRunTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RaidSpeedRunTrackerConfig.class);
	}

	public Split getSplit(RaidRoom raidRoom)
	{
		SpeedRun speedRun = speedRunTracker.getCurrentSpeedRun();
		for (Split split : speedRun.getSplits())
		{
			if (split.raidRoom == raidRoom)
			{
				return split;
			}

		}
		return null;
	}

	public Split[] getSplits()
	{
		return speedRunTracker.getCurrentSpeedRun().getSplits();
	}


	public RaidRoom getCurrentRoom()
	{
		return speedRunTracker.getCurrentRoom();
	}

	public Instant GetStartTime()
	{
		return speedRunTracker.getStartTime();
	}

	public boolean IsRaidComplete()
	{
		return speedRunTracker.raidComplete;
	}

	private void loadSplits(int teamSize)
	{
		//When the raid starts, begin to load the split data
		List<SpeedRun> speedRuns = fw.LoadData();

		if (speedRuns != null)
		{
			for (SpeedRun speedRun : speedRuns)
			{
				if (speedRun.getTeamSize() == teamSize)
				{
					for (Split split : speedRun.getSplits())
					{
						split.setOriginalPbDuration(split.getOriginalPbDuration());
					}
					speedRunTracker.setCurrentSpeedRun(speedRun);
				}
			}

			speedRunTracker.setSpeedRuns(speedRuns);
		}

		speedRunTracker.getCurrentSpeedRun().setTeamSize(teamSize);
	}

	private void split()
	{
		RaidRoom currentRoom = speedRunTracker.getCurrentRoom();
		Split split = getSplit(currentRoom);
		Instant startTime = speedRunTracker.getStartTime();

		Duration timeDifference = Duration.between(startTime, Instant.now());
		if (split.pbDuration != null)
		{
			//In the event that this run is a pb, set the pb before calculating time difference
			split.setNewPbDuration(timeDifference);

			//Calculate the time difference between the current split vs pb
			timeDifference = timeDifference.minus(split.pbDuration);
			split.setTimeDifference(timeDifference);
			if (timeDifference.isNegative())
			{
				split.setSplitColor(Color.GREEN);
			}
			else
			{
				split.setSplitColor(Color.RED);
			}
		}
		else
		{
			//If there have been no pbs, set the pb to be the current split and time difference to be -
			split.setPbDuration(timeDifference);
			split.setNewPbDuration(timeDifference);
			split.setTimeDifference(timeDifference);
			split.setSplitString("-");
		}

		//If the current room is olm, end the raid and check if a new pb has been accomplished
		if (currentRoom == RaidRoom.OLM)
		{
			Duration raidTotalTime = Duration.between(startTime, Instant.now());
			Split pbTime = getSplit(RaidRoom.OLM);
			//If original pb time doesn't exist or if the new time beats the old pb, save the splits
			if (pbTime.originalPbDuration == null
				|| raidTotalTime.compareTo(pbTime.originalPbDuration) < 0)
			{
				SpeedRun currentRun = speedRunTracker.getCurrentSpeedRun();
				//Set the current speedrun's splits to be the new pb
				Split[] newPbSplits = buildNewPb(currentRun.getSplits());
				//Replace the old speedrun with matching team size to the one with the new pb
				List<SpeedRun> speedRuns = speedRunTracker.getSpeedRuns();

				boolean added = false;

				for (SpeedRun speedRun : speedRuns)
				{
					if (speedRunTracker.getCurrentSpeedRun() == speedRun)
					{
						speedRun.setSplits(newPbSplits);
						added = true;
					}
				}

				if (!added)
				{
					speedRuns = new ArrayList<>(speedRuns);
					speedRuns.add(currentRun);
					speedRunTracker.setSpeedRuns(speedRuns);
				}

				fw.SaveData(speedRuns);
			}

			speedRunTracker.setRaidComplete(true);
		}
		else
		{
			speedRunTracker.setCurrentRoom(currentRoom.getNext());
		}
	}

	private Split[] buildNewPb(Split[] splits)
	{
		for (int i = 0; i < splits.length; i++)
		{
			if (splits[i].newPbDuration != null)
			{
				splits[i].pbDuration = splits[i].newPbDuration;
			}
		}

		return splits;
	}

	private void ResetSpeedRunTracker()
	{
		speedRunTracker = new SpeedRunTracker();
		overlayManager.remove(overlay);
	}
}

package com.raidspeedruntracker;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import lombok.Getter;
import static net.runelite.client.RuneLite.RUNELITE_DIR;

public class RaidSpeedRunFileReadWrite
{
	@Getter
	private String username;
	private String dir;

	public void SaveData(List<SpeedRun> speedRuns)
	{
		try
		{
			Gson gson = new GsonBuilder().create();
			String fileName = dir;

			FileWriter fw = new FileWriter(fileName, false);

			gson.toJson(speedRuns, fw);

			fw.append("\n");

			fw.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public List<SpeedRun> LoadData()
	{
		try
		{
			Gson gson = new GsonBuilder().create();
			String fileName = dir;

			FileReader fr = new FileReader(fileName);
			SpeedRun[] speedRuns = gson.fromJson(fr, SpeedRun[].class);
			if (speedRuns != null && speedRuns.length >= 0)
			{
				//This is the old format json that didn't handle multiple players, convert it into new class
				if (speedRuns.length == 13 && speedRuns[0].getTeamSize() == -1)
				{
					fr.close();
					//Reset file reader, otherwise json can't be read
					fr = new FileReader(fileName);
					//Empty out the speedruns array
					speedRuns = new SpeedRun[1];
					//Create the new speedrun based off the old splits
					SpeedRun tempSpeedRun = new SpeedRun();
					tempSpeedRun.setTeamSize(1);
					Split[] splits = gson.fromJson(fr, Split[].class);
					tempSpeedRun.setSplits(splits);

					speedRuns[0] = tempSpeedRun;
				}
				return Arrays.asList(speedRuns);
			}

			return null;
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}

		return null;
	}

	public void createFolder()
	{
		File dir = new File(RUNELITE_DIR, "speed-run tracker");
		dir.mkdir();
		dir = new File(dir, username);
		dir.mkdir();
		File newSpeedRunTrackerFile = new File(dir + "\\speed_run_tracker.log");

		try
		{
			newSpeedRunTrackerFile.createNewFile();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}

		this.dir = newSpeedRunTrackerFile.getAbsolutePath();
	}

	public void updateUsername(final String username)
	{
		this.username = username;
		createFolder();
	}
}

package com.raidspeedruntracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("raidspeedruntracker")
public interface RaidSpeedRunTrackerConfig extends Config
{
	//TODO: Add millisecond tracking
//	@ConfigItem(
//		keyName = "trackMilliseconds",
//		name = "Track Milliseconds",
//		description = "Track splits with millisecond accuracy"
//	)
//	default boolean trackMilliseconds(){
//		return true;
//	}

	@ConfigItem(
		keyName = "numLines",
		name = "Number of lines",
		description = "Number of lines to show in the split tracker overlay"
	)
	default int numLines(){
		return 3;
	}
}

package com.raidspeedruntracker;

import lombok.Data;

@Data
public class SpeedRun
{
	int teamSize = -1;
	Split[] splits = new Split[13];

	public SpeedRun()
	{
		RaidRoom r = RaidRoom.TEKTON;
		for (int i = 0; i < splits.length; i++)
		{
			splits[i] = new Split(r);
			r = r.getNext();
		}
	}

	@Override
	public boolean equals(Object obj)
	{
		if(obj == null){
			return false;
		}

		SpeedRun s = (SpeedRun) obj;

		return this.teamSize == s.teamSize;
	}
}

package com.raidspeedruntracker;

//Credit to dey0 for this: https://github.com/dey0/pluginhub-plugins
public class CoxUtil {

	// p=plane, y=y_8, x=x_8, r=rot pp_xxxxxxxxxx_yyyyyyyyyy_rr0
	private static final int COX_ROOM_MASK = 0b11_1111111100_11111111100_00_0;

	private static final int FL_END1 = 0 << 24 | 102 << 16 | 160 << 5;

	private static final int FL_END2 = 0 << 24 | 102 << 16 | 161 << 5;
	private static final int FL_END3 = 0 << 24 | 103 << 16 | 161 << 5;

	private static final int LOBBY_CCW = 0 << 24 | 102 << 16 | 162 << 5;
	private static final int LOBBY_THRU = 0 << 24 | 103 << 16 | 162 << 5;
	private static final int LOBBY_CW = 0 << 24 | 104 << 16 | 162 << 5;

	private static final int SCAVS_SM_CCW = 0 << 24 | 102 << 16 | 163 << 5;
	private static final int SCAVS_SM_THRU = 0 << 24 | 103 << 16 | 163 << 5;
	private static final int SCAVS_SM_CW = 0 << 24 | 104 << 16 | 163 << 5;

	private static final int SHAMANS_CCW = 0 << 24 | 102 << 16 | 164 << 5;
	private static final int SHAMANS_THRU = 0 << 24 | 103 << 16 | 164 << 5;
	private static final int SHAMANS_CW = 0 << 24 | 104 << 16 | 164 << 5;

	private static final int VASA_CCW = 0 << 24 | 102 << 16 | 165 << 5;
	private static final int VASA_THRU = 0 << 24 | 103 << 16 | 165 << 5;
	private static final int VASA_CW = 0 << 24 | 104 << 16 | 165 << 5;

	private static final int VANGUARDS_CCW = 0 << 24 | 102 << 16 | 166 << 5;
	private static final int VANGUARDS_THRU = 0 << 24 | 103 << 16 | 166 << 5;
	private static final int VANGUARDS_CW = 0 << 24 | 104 << 16 | 166 << 5;

	private static final int ICE_DEMON_CCW = 0 << 24 | 102 << 16 | 167 << 5;
	private static final int ICE_DEMON_THRU = 0 << 24 | 103 << 16 | 167 << 5;
	private static final int ICE_DEMON_CW = 0 << 24 | 104 << 16 | 167 << 5;

	private static final int THIEVING_CCW = 0 << 24 | 102 << 16 | 168 << 5;
	private static final int THIEVING_THRU = 0 << 24 | 103 << 16 | 168 << 5;
	private static final int THIEVING_CW = 0 << 24 | 104 << 16 | 168 << 5;

	private static final int FARM_FISH_CCW = 0 << 24 | 102 << 16 | 170 << 5;
	private static final int FARM_FISH_THRU = 0 << 24 | 103 << 16 | 170 << 5;
	private static final int FARM_FISH_CW = 0 << 24 | 104 << 16 | 170 << 5;

	private static final int FL_START1_CCW = 0 << 24 | 102 << 16 | 178 << 5;
	private static final int FL_START1_THRU = 0 << 24 | 103 << 16 | 178 << 5;
	private static final int FL_START1_CW = 0 << 24 | 104 << 16 | 178 << 5;

	private static final int FL_START2_CCW = 0 << 24 | 102 << 16 | 179 << 5;
	private static final int FL_START2_THRU = 0 << 24 | 103 << 16 | 179 << 5;
	private static final int FL_START2_CW = 0 << 24 | 104 << 16 | 179 << 5;

	private static final int SCAVS_LG_CCW = 1 << 24 | 102 << 16 | 163 << 5;
	private static final int SCAVS_LG_THRU = 1 << 24 | 103 << 16 | 163 << 5;
	private static final int SCAVS_LG_CW = 1 << 24 | 104 << 16 | 163 << 5;

	private static final int MYSTICS_CCW = 1 << 24 | 102 << 16 | 164 << 5;
	private static final int MYSTICS_THRU = 1 << 24 | 103 << 16 | 164 << 5;
	private static final int MYSTICS_CW = 1 << 24 | 104 << 16 | 164 << 5;

	private static final int TEKTON_CCW = 1 << 24 | 102 << 16 | 165 << 5;
	private static final int TEKTON_THRU = 1 << 24 | 103 << 16 | 165 << 5;
	private static final int TEKTON_CW = 1 << 24 | 104 << 16 | 165 << 5;

	private static final int MUTTADILES_CCW = 1 << 24 | 102 << 16 | 166 << 5;
	private static final int MUTTADILES_THRU = 1 << 24 | 103 << 16 | 166 << 5;
	private static final int MUTTADILES_CW = 1 << 24 | 104 << 16 | 166 << 5;

	private static final int TIGHTROPE_CCW = 1 << 24 | 102 << 16 | 167 << 5;
	private static final int TIGHTROPE_THRU = 1 << 24 | 103 << 16 | 167 << 5;
	private static final int TIGHTROPE_CW = 1 << 24 | 104 << 16 | 167 << 5;

	private static final int FARM_BATS_CCW = 1 << 24 | 102 << 16 | 170 << 5;
	private static final int FARM_BATS_THRU = 1 << 24 | 103 << 16 | 170 << 5;
	private static final int FARM_BATS_CW = 1 << 24 | 104 << 16 | 170 << 5;

	private static final int GUARDIANS_CCW = 2 << 24 | 102 << 16 | 164 << 5;
	private static final int GUARDIANS_THRU = 2 << 24 | 103 << 16 | 164 << 5;
	private static final int GUARDIANS_CW = 2 << 24 | 104 << 16 | 164 << 5;

	private static final int VESPULA_CCW = 2 << 24 | 102 << 16 | 165 << 5;
	private static final int VESPULA_THRU = 2 << 24 | 103 << 16 | 165 << 5;
	private static final int VESPULA_CW = 2 << 24 | 104 << 16 | 165 << 5;

	private static final int CRABS_CCW = 2 << 24 | 102 << 16 | 167 << 5;
	private static final int CRABS_THRU = 2 << 24 | 103 << 16 | 167 << 5;
	private static final int CRABS_CW = 2 << 24 | 104 << 16 | 167 << 5;

	private static final int OLM_ROOM_MASK = 0b11_1111111000_11111111000_00_0;

	private static final int OLM_ = 0 << 24 | 50 << 17 | 89 << 6;

	public static final int FL_START = 0;
	public static final int FL_END = 1;
	public static final int SCAVENGERS = 2;
	public static final int FARMING = 3;

	public static final int SHAMANS = 4;
	public static final int VASA = 5;
	public static final int VANGUARDS = 6;
	public static final int MYSTICS = 7;
	public static final int TEKTON = 8;
	public static final int MUTTADILES = 9;
	public static final int GUARDIANS = 10;
	public static final int VESPULA = 11;

	public static final int ICE_DEMON = 12;
	public static final int THIEVING = 13;
	public static final int TIGHTROPE = 14;
	public static final int CRABS = 15;
	public static final int OLM = 16;

	public static final int UNKNOWN = 17;

	public static int getroom_type(int zonecode) {
		switch (zonecode & COX_ROOM_MASK) {
			case LOBBY_CCW:
			case LOBBY_THRU:
			case LOBBY_CW:
			case FL_START1_CCW:
			case FL_START1_THRU:
			case FL_START1_CW:
			case FL_START2_CCW:
			case FL_START2_THRU:
			case FL_START2_CW:
				return FL_START;
			case FL_END1:
			case FL_END2:
			case FL_END3:
				return FL_END;
			case SCAVS_SM_CCW:
			case SCAVS_SM_THRU:
			case SCAVS_SM_CW:
			case SCAVS_LG_CCW:
			case SCAVS_LG_THRU:
			case SCAVS_LG_CW:
				return SCAVENGERS;
			case FARM_FISH_CCW:
			case FARM_FISH_THRU:
			case FARM_FISH_CW:
			case FARM_BATS_CCW:
			case FARM_BATS_THRU:
			case FARM_BATS_CW:
				return FARMING;
			case SHAMANS_CCW:
			case SHAMANS_THRU:
			case SHAMANS_CW:
				return SHAMANS;
			case VASA_CCW:
			case VASA_THRU:
			case VASA_CW:
				return VASA;
			case VANGUARDS_CCW:
			case VANGUARDS_THRU:
			case VANGUARDS_CW:
				return VANGUARDS;
			case MYSTICS_CCW:
			case MYSTICS_THRU:
			case MYSTICS_CW:
				return MYSTICS;
			case TEKTON_CCW:
			case TEKTON_THRU:
			case TEKTON_CW:
				return TEKTON;
			case MUTTADILES_CCW:
			case MUTTADILES_THRU:
			case MUTTADILES_CW:
				return MUTTADILES;
			case GUARDIANS_CCW:
			case GUARDIANS_THRU:
			case GUARDIANS_CW:
				return GUARDIANS;
			case VESPULA_CCW:
			case VESPULA_THRU:
			case VESPULA_CW:
				return VESPULA;
			case ICE_DEMON_CCW:
			case ICE_DEMON_THRU:
			case ICE_DEMON_CW:
				return ICE_DEMON;
			case THIEVING_CCW:
			case THIEVING_THRU:
			case THIEVING_CW:
				return THIEVING;
			case TIGHTROPE_CCW:
			case TIGHTROPE_THRU:
			case TIGHTROPE_CW:
				return TIGHTROPE;
			case CRABS_CCW:
			case CRABS_THRU:
			case CRABS_CW:
				return CRABS;
		}

		if ((zonecode & OLM_ROOM_MASK) == OLM_)
			return OLM;

		return UNKNOWN;
	}
}

package com.raidspeedruntracker;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class RaidSpeedRunTrackerOverlay extends Overlay
{
	private final Client client;
	private final RaidSpeedRunTrackerConfig config;
	private final PanelComponent panelComponent = new PanelComponent();
	private final RaidSpeedRunTrackerPlugin raidSpeedRunTrackerPlugin;
	private final static String HOUR_FORMAT = "HH:mm:ss";
	private final static String MINUTE_FORMAT = "mm:ss";
	private final static String MILLISECOND_FORMAT = "ss.ss";

	@Inject
	public RaidSpeedRunTrackerOverlay(Client client, RaidSpeedRunTrackerConfig config, RaidSpeedRunTrackerPlugin raidSpeedRunTrackerPlugin)
	{
		setPosition(OverlayPosition.TOP_LEFT);
		this.client = client;
		this.config = config;
		this.raidSpeedRunTrackerPlugin = raidSpeedRunTrackerPlugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		panelComponent.getChildren().clear();

		String overlayTitle = "CoX Splits";

		panelComponent.getChildren().add(TitleComponent.builder()
			.text(overlayTitle)
			.color(Color.white)
			.build());

		Instant startTime = raidSpeedRunTrackerPlugin.GetStartTime();
		RaidRoom currentRoom = raidSpeedRunTrackerPlugin.getCurrentRoom();
		boolean isRaidComplete = raidSpeedRunTrackerPlugin.IsRaidComplete();

		LocalTime time;
		Duration elapsed;

		Color timeColor = Color.WHITE;

		Split[] splits = raidSpeedRunTrackerPlugin.getSplits();

		//Figure out how many splits to show at a time
		int offset = config.numLines() / 2;
		int startRoomIndex = currentRoom.getPosition();

		if (startRoomIndex + config.numLines() > splits.length + 1)
		{
			startRoomIndex = splits.length - config.numLines();
		}
		else if (startRoomIndex - offset < 0)
		{
			startRoomIndex = 0;
		}
		else
		{
			startRoomIndex = startRoomIndex - offset;
		}

		//Display splits
		for (int i = startRoomIndex; i < config.numLines() + startRoomIndex; i++)
		{
			Split split = splits[i];

			String splitString = "";
			Color splitColor = Color.WHITE;
			//If the raid is complete, dont use current row
			boolean currentRow = i == currentRoom.getPosition() && !isRaidComplete;

			//If it's the current row, show the time difference between now and the pb split
			//Also, determine the color based on the time difference
			if (currentRow)
			{
				if (split.timeDifference == null
					&& split.pbDuration != null)
				{
					Duration splitDuration = Duration.between(startTime, Instant.now());
					splitDuration = splitDuration.minus(split.pbDuration);

					LocalTime splitTime = LocalTime.ofSecondOfDay(splitDuration.abs().getSeconds());

					if (splitDuration.isNegative())
					{
						splitColor = Color.GREEN;
						splitString += "-";
						if (!isRaidComplete)
						{
							timeColor = Color.GREEN;
						}
					}
					else
					{
						splitColor = Color.RED;
						splitString += "+";
						if (!isRaidComplete)
						{
							timeColor = Color.RED;
						}
					}

					DateTimeFormatter splitTimeFormat = getTimeFormat(splitTime);
					splitString += splitTime.format(splitTimeFormat);
				}
			}
			else
			{
				//If the split has already been calculated, display it
				if (split.getSplitString() != null)
				{
					splitString = split.getSplitString();
					splitColor = split.getSplitColor();
				}
			}

			//Denote current split with arrow
			panelComponent.getChildren().add(LineComponent.builder()
				.left(split.raidRoom.getName() + (currentRow ? " <-" : ""))
				.right(splitString + " " + split.getPbString())
				.rightColor(splitColor)
				.build());
		}

		//Keep track of elapsed time
		//If raid is complete, stop the timer and don't keep updating it
		if (raidSpeedRunTrackerPlugin.IsRaidComplete())
		{
			Split endSplit = raidSpeedRunTrackerPlugin.getSplit(RaidRoom.OLM);
			elapsed = endSplit.getNewPbDuration();
			Duration originalPbDuration = endSplit.originalPbDuration;

			if (originalPbDuration != null)
			{
				if (elapsed.compareTo(originalPbDuration) < 0)
				{
					timeColor = Color.GREEN;
				}
				else
				{
					timeColor = Color.RED;
				}
			}
		}
		else
		{
			elapsed = Duration.between(startTime, Instant.now());
		}

		time = LocalTime.ofSecondOfDay(elapsed.getSeconds());
		DateTimeFormatter timeFormat = getTimeFormat(time);
		String formattedTime = time.format(timeFormat);

		panelComponent.getChildren().add(LineComponent.builder()
			.left("Time:")
			.right(formattedTime)
			.rightColor(timeColor)
			.build());

		panelComponent.setPreferredSize(new Dimension(185, 0));

		return panelComponent.render(graphics);
	}

	private DateTimeFormatter getTimeFormat(LocalTime time)
	{
		return DateTimeFormatter.ofPattern(time.getHour() > 0 ? HOUR_FORMAT : MINUTE_FORMAT);
	}
}

