package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import static com.github.ldavid432.cleanchat.CleanChatUtil.CLAN_INSTRUCTION_MESSAGE;
import java.util.List;
import java.util.function.Function;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;

@AllArgsConstructor
public enum ChatBlock implements ChatTypeModifier
{
	CLAN_INSTRUCTION(
		CleanChatChannelsConfig::removeClanInstruction,
		ChatMessageType.CLAN_MESSAGE,
		CLAN_INSTRUCTION_MESSAGE
	),
	GUEST_CLAN_INSTRUCTION(
		CleanChatChannelsConfig::removeGuestClanInstruction,
		ChatMessageType.CLAN_GUEST_MESSAGE,
		// "You are now a guest of x" is also included in this message, they are separated by a <br>
		"To talk, start each line of chat with /// or /gc"
	),
	GROUP_IRON_INSTRUCTION(
		CleanChatChannelsConfig::removeGroupIronInstruction,
		ChatMessageType.CLAN_GIM_MESSAGE,
		"To talk in your Ironman Group's channel"
	),
	FRIENDS_CHAT_INSTRUCTION(
		CleanChatChannelsConfig::removeFriendsChatStartup,
		ChatMessageType.FRIENDSCHATNOTIFICATION,
		"To talk, start each line of chat with the / symbol."
	),
	FRIENDS_CHAT_ATTEMPTING(
		CleanChatChannelsConfig::removeFriendsAttempting,
		ChatMessageType.FRIENDSCHATNOTIFICATION,
		"Attempting to join chat-channel..."
	),
	FRIENDS_CHAT_NOW_TALKING(
		CleanChatChannelsConfig::removeFriendsNowTalking,
		ChatMessageType.FRIENDSCHATNOTIFICATION,
		"Now talking in chat-channel"
	),
	WELCOME(
		CleanChatChannelsConfig::removeWelcome,
		ChatMessageType.WELCOME,
		"Welcome to Old School RuneScape."
	),
	;

	public boolean isEnabled(CleanChatChannelsConfig config)
	{
		return isEnabled.apply(config);
	}

	@Override
	public boolean appliesTo(CleanChatChannelsConfig config, ChatMessage event)
	{
		return ChatTypeModifier.super.appliesTo(config, event) && event.getMessage().contains(this.message);
	}

	private final Function<CleanChatChannelsConfig, Boolean> isEnabled;
	@Getter
	private final ChatMessageType chatMessageType;
	@Getter
	private final String message;

	@Override
	public List<ChatMessageType> getFromChatMessageTypes()
	{
		return List.of(chatMessageType);
	}
}

package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.ChannelNameManager;
import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum ChannelNameRemoval
{
	CLAN(CleanChatChannelsConfig::removeClanName, ChannelNameManager::getClanNames),
	GUEST_CLAN(CleanChatChannelsConfig::removeGuestClanName, ChannelNameManager::getGuestClanNames),
	FRIENDS_CHAT(CleanChatChannelsConfig::removeFriendsChatName, ChannelNameManager::getFriendsChatNames),
	GROUP_IRON(CleanChatChannelsConfig::removeGroupIronName, ChannelNameManager::getGroupIronNames);

	public List<String> getNames(ChannelNameManager channelNameManager)
	{
		return getNames.apply(channelNameManager);
	}

	public boolean isEnabled(CleanChatChannelsConfig config)
	{
		return isEnabled.apply(config);
	}

	private final Function<CleanChatChannelsConfig, Boolean> isEnabled;
	private final Function<ChannelNameManager, List<String>> getNames;

	public static boolean anyEnabled(CleanChatChannelsConfig config)
	{
		return Arrays.stream(values()).anyMatch(channel -> channel.isEnabled(config));
	}
}

package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import java.util.List;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;

public interface ChatTypeModifier
{
	List<ChatMessageType> getFromChatMessageTypes();

	boolean isEnabled(CleanChatChannelsConfig config);

	default boolean appliesTo(CleanChatChannelsConfig config, ChatMessage event) {
		return isEnabled(config) && getFromChatMessageTypes().contains(event.getType());
	}
}

package com.github.ldavid432.cleanchat.data;

import java.util.Arrays;
import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
public enum ChatTab
{
	ALL(0),
	GAME(1),
	PUBLIC(2),
	PRIVATE(3),
	CHANNEL(4),
	CLAN(5),
	TRADE(6),
	CLOSED(1337);

	@Getter
	private final int value;

	public static ChatTab of(int value)
	{
		return Arrays.stream(values())
			.filter(channel -> channel.getValue() == value)
			.findFirst()
			.orElse(ChatTab.ALL);
	}
}

package com.github.ldavid432.cleanchat;

import java.util.Map;
import javax.annotation.Nullable;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatLineBuffer;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.util.Text;

@Slf4j
public class CleanChatUtil
{
	public static final String CLAN_INSTRUCTION_MESSAGE = "To talk in your clan's channel, start each line of chat with // or /c.";
	public static final int GUEST_CLAN = -1;
	public static final int SCRIPT_REBUILD_CHATBOX = 84;
	public static final int VARC_INT_CHAT_TAB = 41;
	public static final int MAX_CHANNEL_LIST_SIZE = 128;

	public static String sanitizeName(String string)
	{
		return Text.removeTags(string).replace('\u00A0', ' ');
	}

	public static ChatMessageType sanitizeMessageType(ChatMessageType chatMessageType)
	{
		// GIM chats are actually just clan chats - only matters when getting the chat line buffers
		switch (chatMessageType)
		{
			case CLAN_GIM_CHAT:
				return ChatMessageType.CLAN_CHAT;
			case CLAN_GIM_MESSAGE:
				return ChatMessageType.CLAN_MESSAGE;
			default:
				return chatMessageType;
		}
	}

	@Nullable
	public static ChatLineBuffer getChatLineBuffer(Client client, ChatMessageType chatMessageType)
	{
		return client.getChatLineMap().get(sanitizeMessageType(chatMessageType).getType());
	}

	// Sizes sourced from: https://github.com/JamesShelton140/aqp-finder
	private static final Map<Character, Integer> CHAR_SIZE_MAP = Map.<Character, Integer>ofEntries(
		// Upper case
		Map.entry('A', 6), Map.entry('B', 5), Map.entry('C', 5), Map.entry('D', 5), Map.entry('E', 4), Map.entry('F', 4), Map.entry('G', 6), Map.entry('H', 5), Map.entry('I', 1), Map.entry('J', 5), Map.entry('K', 5), Map.entry('L', 4), Map.entry('M', 7), Map.entry('N', 6), Map.entry('O', 6), Map.entry('P', 5), Map.entry('Q', 6), Map.entry('R', 5), Map.entry('S', 5), Map.entry('T', 3), Map.entry('U', 6), Map.entry('V', 5), Map.entry('W', 7), Map.entry('X', 5), Map.entry('Y', 5), Map.entry('Z', 5),
		// Lower case
		Map.entry('a', 5), Map.entry('b', 5), Map.entry('c', 4), Map.entry('d', 5), Map.entry('e', 5), Map.entry('f', 4), Map.entry('g', 5), Map.entry('h', 5), Map.entry('i', 1), Map.entry('j', 4), Map.entry('k', 4), Map.entry('l', 1), Map.entry('m', 7), Map.entry('n', 5), Map.entry('o', 5), Map.entry('p', 5), Map.entry('q', 5), Map.entry('r', 3), Map.entry('s', 5), Map.entry('t', 3), Map.entry('u', 5), Map.entry('v', 5), Map.entry('w', 5), Map.entry('x', 5), Map.entry('y', 5), Map.entry('z', 5),
		// Numbers
		Map.entry('0', 6), Map.entry('1', 4), Map.entry('2', 6), Map.entry('3', 5), Map.entry('4', 5), Map.entry('5', 5), Map.entry('6', 6), Map.entry('7', 5), Map.entry('8', 6), Map.entry('9', 6),
		// Symbols
		Map.entry(' ', 1), Map.entry(':', 1), Map.entry(';', 2), Map.entry('"', 3), Map.entry('@', 11), Map.entry('!', 1), Map.entry('.', 1), Map.entry('\'', 2), Map.entry(',', 2), Map.entry('(', 2), Map.entry(')', 2), Map.entry('+', 5), Map.entry('-', 4), Map.entry('=', 6), Map.entry('?', 6), Map.entry('*', 7), Map.entry('/', 4), Map.entry('$', 6), Map.entry('£', 8), Map.entry('^', 6), Map.entry('{', 3), Map.entry('}', 3), Map.entry('[', 3), Map.entry(']', 3), Map.entry('&', 9), Map.entry('#', 11), Map.entry('°', 4),
		// NBSP
		Map.entry('\u00A0', 1));

	public static int getTextLength(String text)
	{
		return text.chars()
			.mapToObj(ch -> (char) ch)
			.map(key -> {
				if (!CHAR_SIZE_MAP.containsKey(key))
				{
					log.debug("Couldn't get length of {}", key);
				}
				return CHAR_SIZE_MAP.getOrDefault(key, 5) + 2;
			})
			.reduce(0, Integer::sum);
	}

}

package com.github.ldavid432.cleanchat;

import static com.github.ldavid432.cleanchat.CleanChatUtil.CLAN_INSTRUCTION_MESSAGE;
import static com.github.ldavid432.cleanchat.CleanChatUtil.SCRIPT_REBUILD_CHATBOX;
import static com.github.ldavid432.cleanchat.CleanChatUtil.VARC_INT_CHAT_TAB;
import static com.github.ldavid432.cleanchat.CleanChatUtil.getTextLength;
import static com.github.ldavid432.cleanchat.CleanChatUtil.sanitizeName;
import com.github.ldavid432.cleanchat.data.ChannelNameRemoval;
import com.github.ldavid432.cleanchat.data.ChatTab;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.inject.Inject;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.util.Text;

/**
 * Removes channel name from chat widgets
 */
@Slf4j
public class ChannelNameReplacer
{
	@Inject
	private CleanChatChannelsConfig config;

	@Inject
	private ChannelNameManager channelNameManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private Client client;

	@Data
	private static class ChatWidgetGroup
	{
		private final Widget channel;
		private final Widget rank;
		private final Widget name;
		private final Widget message;

		private int removedWidth = 0;

		public void onAllWidgets(Consumer<Widget> action)
		{
			Stream.of(channel, rank, name, message).forEach(action);
		}

		public void onNonChannelWidgets(Consumer<Widget> action)
		{
			Stream.of(rank, name, message).forEach(action);
		}
	}

	/*
	Most chats appear in this format as dynamic children on the chatbox scroll area:
		// bottom chat line
		[0] = username
		[1] = chat message
		[2] = timestamp + channel name (timestamp only if that plugin is on, but is pretty common so should definitely account for it)
		[3] = rank icon
		// Next chat line
		[4] = next username
		etc...

	However, some are special:

	Friends chats:
		[0] = channel + username
		[1] = chat message
		[2] = nothing
		[3] = rank icon

	Friends game messages:
		[0] = timestamp + message
		[1] = nothing (except for the 'now talking...' message specifically which has the CLAN chat join message here...)
		[2] = nothing
		[3] = nothing

	GIM broadcasts:
		[0] = channel
		[1] = chat message
		[2] = nothing
		[3] = nothing

	Console message:
		[0] = timestamp + message
		[1] = nothing
		[2] = nothing
		[3] = nothing

	These appear in the children array in this order even if the individual items aren't rendered
	 ex: Username is hidden for broadcasts, rank icon is hidden for public chat */
	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() != SCRIPT_REBUILD_CHATBOX)
		{
			return;
		}

		if (!ChannelNameRemoval.anyEnabled(config) && !config.removeGroupIronFromClan())
		{
			return;
		}

		checkReplacements();
	}

	public void checkReplacements() {
		// FriendsChatManager is null at the first FriendsChatChanged after login so we have to add this check later
		channelNameManager.updateFriendsChatName();

		Widget chatbox = client.getWidget(InterfaceID.Chatbox.SCROLLAREA);
		ChatTab selectedChatTab = ChatTab.of(client.getVarcIntValue(VARC_INT_CHAT_TAB));

		if (chatbox != null && selectedChatTab != ChatTab.CLOSED)
		{
			Widget[] chatWidgets = chatbox.getDynamicChildren().clone();

			List<ChatWidgetGroup> removedChats = new ArrayList<>();

			// for (int i = 2; i < chats.length; i += 4)
			List<ChatWidgetGroup> displayedChats = Stream.iterate(
					2,
					// If [0] and [2] are empty we've reached the end of the populated chats
					i -> i < chatWidgets.length && !(chatWidgets[i].getText().isEmpty() && chatWidgets[i - 2].getText().isEmpty()),
					i -> i + 4
				)
				.map(i -> {
					int rankWidgetIndex = i + 1; //    [3]
					int messageWidgetIndex = i - 1; // [1]
					int nameWidgetIndex = i - 2; //    [0]

					Widget channelWidget = chatWidgets[i];
					if (channelWidget.getText().isEmpty())
					{
						// Channel is not at [2]. This is either a message with channel at [0] or a message without a channel

						if (!chatWidgets[i - 2].getText().isEmpty())
						{
							// Channel is at [0], this is a special message, adjust indices accordingly

							Widget messageWidget = chatWidgets[i - 1];
							// For some reason the fc now talking message specifically, has the CLAN chat join message here...
							if (messageWidget.getText().isEmpty() || Text.removeTags(messageWidget.getText()).equals(CLAN_INSTRUCTION_MESSAGE))
							{
								// Friends chat message

								messageWidgetIndex = i - 2; // [0]
								// Empty widget in this case, but still good to handle it
								nameWidgetIndex = i - 1; //    [1]
							}
							else
							{
								// Other special message

								channelWidget = chatWidgets[i - 2]; // [0]
								// Empty widget in this case, but still good to handle it
								nameWidgetIndex = i; //                [2]
							}
						}
						else
						{
							// Shouldn't see this unless it's an empty line, which we aren't looking at
						}
					}

					return new ChatWidgetGroup(channelWidget, chatWidgets[rankWidgetIndex], chatWidgets[nameWidgetIndex], chatWidgets[messageWidgetIndex]);
				})
				.filter(group -> {
					// This method can be used to block other kinds of messages, but it causes the chat and scrollbar to
					//  jump around when the chatbox is reloaded so for now we just use it to block group iron broadcasts in the clan chat
					//  and use an alternate method in onChatMessage for the channel startup message blocking

					boolean blockChat = false;

					if (!group.getChannel().getText().isEmpty())
					{
						// If the text is not blank we *should* be guaranteed a match
						for (ChannelNameRemoval channelRemoval : ChannelNameRemoval.values())
						{
							String widgetChannelName = sanitizeName(group.getChannel().getText());
							String matchedChannelName = channelRemoval.getNames(channelNameManager).stream()
								.filter(channel -> widgetChannelName.contains("[" + channel + "]"))
								.findFirst()
								.orElse(null);

							if (matchedChannelName != null)
							{
								blockChat = checkGroupIronInClan(selectedChatTab, channelRemoval);

								if (!blockChat && channelRemoval.isEnabled(config))
								{
									// Update widget text and removedWidth
									group.setRemovedWidth(getTextLength("[" + matchedChannelName + "]") + updateChannelText(matchedChannelName, group.getChannel()));
									break;
								}
							}
						}
					}

					if (blockChat)
					{
						removedChats.add(group);
					}

					return !blockChat;
				})
				.collect(Collectors.toList());

			log.debug("Processed {} chat messages", displayedChats.size());

			if (!removedChats.isEmpty()) {
				log.debug("Hid {} chat messages", removedChats.size());
			}

			Collections.reverse(displayedChats);

			int totalHeight = displayedChats.stream()
				.map(group -> group.getMessage().getHeight())
				.reduce(0, Integer::sum);

			// If we only have a few messages we want to place them at the bottom (chatbox.getHeight()) instead of the top (0).
			//  If placing from the bottom, add padding first
			int y = totalHeight >= chatbox.getHeight() ? 0 : chatbox.getHeight() - totalHeight - 2;

			for (ChatWidgetGroup group : displayedChats)
			{
				int widgetY = y;
				group.onNonChannelWidgets(widget -> updateWidget(widget, group.getRemovedWidth(), widgetY));

				group.getChannel().setOriginalY(widgetY);
				group.getChannel().setOriginalWidth(group.getChannel().getOriginalWidth() - group.getRemovedWidth());
				group.getChannel().revalidate();

				y += group.getMessage().getHeight();
			}

			// If placing at the top, add padding last
			if (totalHeight >= chatbox.getHeight())
			{
				y += 2;
			}

			for (ChatWidgetGroup group : removedChats)
			{
				group.onAllWidgets(widget -> {
					widget.setHidden(true);
					widget.setOriginalY(0);
				});
			}

			if (!removedChats.isEmpty())
			{
				chatbox.setScrollHeight(y);
				chatbox.revalidateScroll();

				clientThread.invokeLater(() -> client.runScript(ScriptID.UPDATE_SCROLLBAR, InterfaceID.Chatbox.CHATSCROLLBAR, InterfaceID.Chatbox.SCROLLAREA, chatbox.getScrollY()));
			}
		}
	}

	private void updateWidget(Widget widget, int removedWidth, int y)
	{
		widget.setOriginalX(widget.getOriginalX() - removedWidth); // Shift left
		widget.setOriginalY(y);
		widget.revalidate();
	}

	private boolean checkGroupIronInClan(ChatTab chatTab, ChannelNameRemoval channelRemoval)
	{
		return config.removeGroupIronFromClan() && chatTab == ChatTab.CLAN && channelRemoval == ChannelNameRemoval.GROUP_IRON;
	}

	/**
	 * @return Any extra space removed
	 */
	private int updateChannelText(String channelName, Widget channelWidget)
	{
		int removedWidth = 0;

		String newText = channelWidget.getText()
			.replace('\u00A0', ' ')
			// Account for color tags when removing name
			.replaceFirst("\\[.*" + channelName + ".*]", "");

		// Remove trailing spaces - probably only happens with timestamps turned on
		if (newText.endsWith(" "))
		{
			newText = newText.substring(0, newText.length() - 1);
			removedWidth += getTextLength(" ");
		}

		// Remove double spaces - mainly found in friends chat since it has sender + username
		if (newText.contains("  "))
		{
			newText = newText.replaceFirst(" {2}", " ");
			removedWidth += getTextLength(" ");
		}

		channelWidget.setText(newText);

		return removedWidth;
	}
}

package com.github.ldavid432.cleanchat;

import static com.github.ldavid432.cleanchat.CleanChatChannelsConfig.CURRENT_VERSION;
import static com.github.ldavid432.cleanchat.CleanChatUtil.getChatLineBuffer;
import com.github.ldavid432.cleanchat.data.ChatBlock;
import com.google.inject.Provides;
import java.awt.Color;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatLineBuffer;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MessageNode;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;
import org.apache.commons.lang3.tuple.Pair;

@Slf4j
@PluginDescriptor(
	name = "Clean Chat",
	description = "Hide clan name and more to clean your chat channels, includes GIM, friends, and clan chats",
	tags = {"clean", "chat", "clan", "friends", "gim", "group", "iron", "ironman", "channel"}
)
public class CleanChatChannelsPlugin extends Plugin
{

	@Inject
	private Client client;

	@Inject
	private CleanChatChannelsConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ChannelNameManager channelNameManager;

	@Inject
	private ChannelNameReplacer channelNameReplacer;

	@Inject
	private EventBus eventBus;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Provides
	CleanChatChannelsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CleanChatChannelsConfig.class);
	}

	// TODO: Make this dynamic and only check types that are also enabled
	private static final List<ChatMessageType> CHAT_MESSAGE_TYPES_TO_PROCESS;

	static
	{
		CHAT_MESSAGE_TYPES_TO_PROCESS = Arrays.stream(ChatBlock.values())
			.map(ChatBlock::getChatMessageType)
			.distinct()
			.collect(Collectors.toList());
	}

	@Override
	protected void startUp() throws Exception
	{
		eventBus.register(channelNameReplacer);
		eventBus.register(channelNameManager);
		channelNameManager.startup();

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			log.debug("Plugin enabled. Refreshing chat.");
			processAllChatHistory();
			client.refreshChat();
		} else if (client.getGameState() != GameState.LOGGED_IN && config.getLastSeenVersion() < CURRENT_VERSION) {
			config.setLstSeenVersion(CURRENT_VERSION);
			// Since last seen version wasn't in 1.0 checking for only it will trigger for everyone who installs the plugin.
			//  By only triggering this during startup and while not logged in we can "better" attempt to determine if this is a previous install or not.
			//  Still not totally accurate but better than nothing.
			chatMessageManager.queue(QueuedMessage.builder()
					.type(ChatMessageType.CONSOLE)
					.runeLiteFormattedMessage(
						ColorUtil.wrapWithColorTag(
							"Clean Chat has been updated to 2.0! This update is mainly a major rework to the plugin internals. " +
								"If you run into any issues please report them on the GitHub.",
							Color.RED
						)
					)
				.build());
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		eventBus.unregister(channelNameReplacer);
		eventBus.unregister(channelNameManager);
		channelNameManager.shutdown();

		// Remove all our shenanigans
		log.debug("Plugin disabled. Refreshing chat.");
		client.refreshChat();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (Objects.equals(event.getGroup(), CleanChatChannelsConfig.GROUP))
		{
			log.debug("Config changed. Refreshing chat.");
			processAllChatHistory();
		}
	}

	// Subscribe later since we transform the message type, we want to interfere with other chat plugins as little as possible
	@Subscribe(priority = -1)
	public void onChatMessage(ChatMessage event)
	{
		if (!CHAT_MESSAGE_TYPES_TO_PROCESS.contains(event.getType()))
		{
			return;
		}

		// This is when chat history sends old chats, so we wait a bit for it to populate and then run our stuff
		if (event.getMessage().equals(ChatBlock.WELCOME.getMessage()))
		{
			log.debug("World hopped or logged in. Refreshing chat.");
			// Only process blocks because we want to wait for the individual chats to connect before replacing
			//  This makes startup much less jarring
			clientThread.invokeLater(this::processAllChatHistory);
		}

		processBlocks(event);
	}

	// TODO: Move blocking into a separate class
	private void processBlocks(ChatMessage event)
	{
		boolean blockMessage = shouldBlockMessage(event);
		if (blockMessage)
		{
			log.debug("Blocking message: {}", event.getMessage());
			removeChatMessage(event.getType(), event.getMessageNode());
			client.refreshChat();
		}
	}

	private boolean shouldBlockMessage(ChatMessage event)
	{
		return Stream.of(ChatBlock.values()).anyMatch(it -> it.appliesTo(config, event));
	}

	private void removeChatMessage(ChatMessageType chatMessageType, MessageNode messageNode)
	{
		ChatLineBuffer buffer = getChatLineBuffer(client, chatMessageType);
		if (buffer != null)
		{
			buffer.removeMessageNode(messageNode);
		}
	}

	private void processAllChatHistory()
	{
		CHAT_MESSAGE_TYPES_TO_PROCESS.stream()
			.flatMap(type -> {
				ChatLineBuffer buffer = getChatLineBuffer(client, type);
				if (buffer == null)
				{
					return Stream.empty();
				}
				return Arrays.stream(buffer.getLines().clone()).filter(Objects::nonNull).map(node -> Pair.of(type, node));
			})
			.sorted(Comparator.comparingInt(pair -> pair.getValue().getTimestamp()))
			.forEach(pair -> {
				MessageNode messageNode = pair.getValue();
				ChatMessageType type = pair.getKey();
				// Ignore message types that don't match (this will only happen with gim chat vs clan chat)
				if (messageNode == null || type != messageNode.getType())
				{
					return;
				}
				ChatMessage event = new ChatMessage(messageNode, type, messageNode.getName(), messageNode.getValue(), messageNode.getSender(), messageNode.getTimestamp());
				clientThread.invoke(() -> processBlocks(event));
			});
	}
}

package com.github.ldavid432.cleanchat;

import static com.github.ldavid432.cleanchat.CleanChatChannelsConfig.GROUP;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(GROUP)
public interface CleanChatChannelsConfig extends Config
{
	String GROUP = "cleanchat";
	int CURRENT_VERSION = 1;

	@ConfigItem(
		keyName = "lastSeenVersion",
		name = "lastSeenVersion",
		description = "",
		hidden = false
	)
	default int getLastSeenVersion()
	{
		return -1;
	}

	@ConfigItem(
		keyName = "lastSeenVersion",
		name = "",
		description = ""
	)
	void setLstSeenVersion(int lastSeenVersion);

	@ConfigItem(
		keyName = "removeWelcome",
		name = "Remove welcome message",
		description = "Remove 'Welcome to RuneScape' message",
		position = 0
	)
	default boolean removeWelcome()
	{
		return true;
	}

	@ConfigSection(
		name = "Clan Chat",
		description = "Configure clan chat",
		position = 1
	)
	String clanSection = "clanSection";

	@ConfigItem(
		keyName = "removeClanInstruction",
		name = "Remove startup message",
		description = "Remove message telling you how to chat in your clan channel",
		section = clanSection,
		position = 0
	)
	default boolean removeClanInstruction()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeClanName",
		name = "Remove clan name",
		description = "Remove clan name from clan chat messages",
		section = clanSection,
		position = 1
	)
	default boolean removeClanName()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeGuestClanInstruction",
		name = "Remove guest startup message",
		description = "Remove message telling you how to chat in your guest clan channel",
		section = clanSection,
		position = 2
	)
	default boolean removeGuestClanInstruction()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeGuestClanName",
		name = "Remove guest clan name",
		description = "Remove guest clan name from guest clan chat messages",
		section = clanSection,
		position = 3
	)
	default boolean removeGuestClanName()
	{
		return false;
	}

	@ConfigSection(
		name = "Group Iron Chat",
		description = "Configure group iron chat",
		position = 2
	)
	String ironSection = "ironSection";

	@ConfigItem(
		keyName = "removeGroupIronInstruction",
		name = "Remove startup message",
		description = "Remove message telling you how to chat in your GIM channel",
		section = ironSection,
		position = 0
	)
	default boolean removeGroupIronInstruction()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeGroupIronName",
		name = "Remove GIM name",
		description = "Remove GIM name from GIM chat messages.<br>" +
			"Enabling this also enables 'Move GIM broadcasts', which removes GIM broadcasts from the clan tab.",
		section = ironSection,
		position = 1
	)
	default boolean removeGroupIronName()
	{
		return false;
	}

	@ConfigItem(
		keyName = "moveGroupIronBroadcasts",
		name = "Move GIM broadcasts",
		description = "Remove GIM broadcasts from the clan chat tab, only display them in the group tab.<br>" +
			"This is always enabled if 'Remove GIM name' is enabled.",
		section = ironSection,
		position = 2
	)
	default boolean removeGroupIronFromClan()
	{
		return true;
	}

	@ConfigSection(
		name = "Friends Chat",
		description = "Configure friends chat",
		position = 3
	)
	String friendsSection = "friendsSection";

	@ConfigItem(
		keyName = "removeFriendsChatInstruction",
		name = "Remove startup message",
		description = "Remove message telling you how to chat in your friends channel",
		section = friendsSection,
		position = 0
	)
	default boolean removeFriendsChatStartup()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeFriendsChatName",
		name = "Remove friends chat name",
		description = "Remove friends chat name from friends chat channel messages",
		section = friendsSection,
		position = 1
	)
	default boolean removeFriendsChatName()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeFriendsAttempting",
		name = "Remove 'attempting to join'",
		description = "Remove 'Attempting to join...' message from friends chat channel",
		section = friendsSection,
		position = 2
	)
	default boolean removeFriendsAttempting()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeFriendsNowTalking",
		name = "Remove 'now talking in'",
		description = "Remove 'Now talking in chat-channel...' message from friends chat channel",
		section = friendsSection,
		position = 3
	)
	default boolean removeFriendsNowTalking()
	{
		return false;
	}

	@ConfigSection(
		name = "Debug",
		description = "Optional debug settings. You probably won't need to change these",
		position = 4,
		closedByDefault = true
	)
	String debugSection = "debugSection";

	@ConfigItem(
		keyName = "chatCommandTimeout",
		name = "Chat command timeout",
		description = "Time in seconds to stop waiting for a chat command to update.<br>" +
			"If you have a slow connection and chat commands don't work you can try increasing this.",
		section = debugSection,
		position = 0
	)
	@Range(min = 2, max = 30)
	default int chatCommandTimeout()
	{
		return 10;
	}
}

package com.github.ldavid432.cleanchat;

import static com.github.ldavid432.cleanchat.CleanChatUtil.MAX_CHANNEL_LIST_SIZE;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.FriendsChatManager;
import net.runelite.api.GameState;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanID;
import net.runelite.api.events.ClanChannelChanged;
import net.runelite.api.events.FriendsChatChanged;
import net.runelite.client.eventbus.Subscribe;

/**
 * Tracks current and previous chat channel names for use in the ChatChannelReplacer
 */
@Slf4j
@Singleton
public class ChannelNameManager
{

	@Inject
	private Client client;

	// Store these as a collection so that even if you leave a channel the chats will still be "cleaned"
	@Getter
	private final List<String> clanNames = new ArrayList<>();
	@Getter
	private final List<String> guestClanNames = new ArrayList<>();
	@Getter
	private final List<String> friendsChatNames = new ArrayList<>();
	@Getter
	private final List<String> groupIronNames = new ArrayList<>();

	public void startup()
	{
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			updateFriendsChatName();

			ClanChannel clanChannel = client.getClanChannel(ClanID.CLAN);
			if (clanChannel != null)
			{
				addName(clanNames, clanChannel.getName());
			}

			ClanChannel groupIronChannel = client.getClanChannel(ClanID.GROUP_IRONMAN);
			if (groupIronChannel != null)
			{
				addName(groupIronNames, groupIronChannel.getName());
			}

			ClanChannel guestClanChannel = client.getGuestClanChannel();
			if (guestClanChannel != null)
			{
				addName(guestClanNames, guestClanChannel.getName());
			}
		}
	}

	public void shutdown() {
		clanNames.clear();
		groupIronNames.clear();
		guestClanNames.clear();
		friendsChatNames.clear();
	}

	@Subscribe
	public void onClanChannelChanged(ClanChannelChanged event)
	{
		String channelName = event.getClanChannel() != null ? event.getClanChannel().getName() : null;

		if (channelName == null)
		{
			return;
		}

		switch (event.getClanId())
		{
			case CleanChatUtil.GUEST_CLAN:
				addName(guestClanNames, channelName);
				break;
			case ClanID.CLAN:
				addName(clanNames, channelName);
				break;
			case ClanID.GROUP_IRONMAN:
				addName(groupIronNames, channelName);
				break;
		}
	}

	@Subscribe
	public void onFriendsChatChanged(FriendsChatChanged event)
	{
		if (event.isJoined())
		{
			updateFriendsChatName();
		}
	}

	public void updateFriendsChatName()
	{
		FriendsChatManager friendsChatManager = client.getFriendsChatManager();
		// This is null at the first FriendsChatChanged after login
		if (friendsChatManager != null)
		{
			addName(friendsChatNames, friendsChatManager.getName());
		}
	}

	private void addName(List<String> nameList, String name)
	{
		if (nameList.contains(name))
		{
			return;
		}

		if (nameList.size() == MAX_CHANNEL_LIST_SIZE)
		{
			nameList.remove(0);
		}

		nameList.add(name);
	}
}

package com.github.ldavid432;

import com.github.ldavid432.cleanchat.CleanChatChannelsPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CleanChatTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CleanChatChannelsPlugin.class);
		RuneLite.main(args);
	}
}

