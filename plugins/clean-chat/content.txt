package com.github.ldavid432.cleanchat;

import java.awt.Color;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.AllArgsConstructor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.config.ChatColorConfig;
import net.runelite.client.ui.JagexColors;

@Singleton
@AllArgsConstructor(onConstructor_ = {@Inject})
public class ColorManager
{
	private final static Color OPAQUE_CLAN_GUEST_CHAT_DEFAULT = new Color(5, 124, 5);
	private final static Color OPAQUE_CHAT_DEFAULT = new Color(129, 5, 5);
	private final static Color OPAQUE_BROADCAST_DEFAULT = new Color(5, 5, 5);
	private final static Color TRANSPARENT_BROADCAST_DEFAULT = new Color(254, 254, 254);
	private final static Color TRANSPARENT_FRIEND_CHAT_DEFAULT = new Color(238, 83, 83);
	private final static Color TRANSPARENT_CLAN_GUEST_CHAT_DEFAULT = new Color(5, 211, 5);
	private final static Color OPAQUE_USERNAME_DEFAULT = Color.BLACK;
	private final static Color TRANSPARENT_USERNAME_DEFAULT = Color.WHITE;

	@Inject
	private ChatColorConfig chatColorConfig;

	@Inject
	private Client client;

	private boolean isChatboxTransparent()
	{
		return client.isResized() && client.getVarbitValue(VarbitID.CHATBOX_TRANSPARENCY) == 1;
	}

	@Nonnull
	public Color getGimNameColor()
	{
		Color color = isChatboxTransparent() ? chatColorConfig.transparentClanChannelName() : chatColorConfig.opaqueClanChannelName();
		if (color == null)
		{
			color = isChatboxTransparent() ? JagexColors.CHAT_FC_NAME_TRANSPARENT_BACKGROUND : JagexColors.CHAT_FC_NAME_OPAQUE_BACKGROUND;
		}
		return color;
	}

	@Nonnull
	public Color getUsernameColor(ChatMessageType chatMessageType)
	{
		Color color = getRuneLiteUsernameColor(chatMessageType);
		if (color == null)
		{
			color = isChatboxTransparent() ? TRANSPARENT_USERNAME_DEFAULT : OPAQUE_USERNAME_DEFAULT;
		}
		return color;
	}

	private Color getRuneLiteUsernameColor(ChatMessageType chatMessageType)
	{
		switch (chatMessageType)
		{
			case FRIENDSCHAT:
				return isChatboxTransparent() ? chatColorConfig.transparentFriendsChatUsernames() : chatColorConfig.opaqueFriendsChatUsernames();
			case CLAN_CHAT:
			case CLAN_GIM_CHAT:
				return isChatboxTransparent() ? chatColorConfig.transparentClanChatUsernames() : chatColorConfig.opaqueClanChatUsernames();
			case CLAN_GUEST_CHAT:
				return isChatboxTransparent() ? chatColorConfig.transparentClanChatGuestUsernames() : chatColorConfig.opaqueClanChatGuestUsernames();
			default:
				return null;
		}
	}

	@Nonnull
	public Color getMessageColor(ChatMessageType chatMessageType)
	{
		Color color;

		color = getRuneLiteMessageColor(chatMessageType);

		if (color == null)
		{
			int varP = getSettingsColorVarPlayerID(chatMessageType);
			if (varP != -1)
			{
				int value = client.getVarpValue(varP);
				// 0 is returned if the client hasn't set a value - As a color 0 should only correspond to transparent black so we should be ok
				if (value != 0)
				{
					value -= 1; // Not sure why but core does this
					color = new Color(value);
				}
			}
		}

		if (color == null)
		{
			color = getJagexDefaultMessageColor(chatMessageType);
		}

		if (color == null)
		{
			color = isChatboxTransparent() ? JagexColors.CHAT_PUBLIC_TEXT_TRANSPARENT_BACKGROUND : JagexColors.CHAT_PUBLIC_TEXT_OPAQUE_BACKGROUND;
		}

		return color;
	}

	private Color getRuneLiteMessageColor(ChatMessageType chatMessageType)
	{
		switch (chatMessageType)
		{
			case FRIENDSCHAT:
				return isChatboxTransparent() ? chatColorConfig.transparentFriendsChatMessage() : chatColorConfig.opaqueFriendsChatMessage();
			case CLAN_CHAT:
			case CLAN_GIM_CHAT:
				return isChatboxTransparent() ? chatColorConfig.transparentClanChatMessage() : chatColorConfig.opaqueClanChatMessage();
			case CLAN_MESSAGE:
			case CLAN_GIM_MESSAGE:
				return isChatboxTransparent() ? chatColorConfig.transparentClanChatInfo() : chatColorConfig.opaqueClanChatInfo();
			case CLAN_GUEST_CHAT:
				return isChatboxTransparent() ? chatColorConfig.transparentClanChatGuestMessage() : chatColorConfig.opaqueClanChatGuestMessage();
			case CLAN_GUEST_MESSAGE:
				return isChatboxTransparent() ? chatColorConfig.transparentClanChatGuestInfo() : chatColorConfig.opaqueClanChatGuestInfo();
			default:
				return null;
		}
	}

	// These end up being used when the user hasn't configured a color yet (even though the settings show a default color)
	private Color getJagexDefaultMessageColor(ChatMessageType type)
	{
		switch (type)
		{
			case CLAN_GUEST_CHAT:
				return isChatboxTransparent() ? TRANSPARENT_CLAN_GUEST_CHAT_DEFAULT : OPAQUE_CLAN_GUEST_CHAT_DEFAULT;
			case FRIENDSCHAT:
				return isChatboxTransparent() ? TRANSPARENT_FRIEND_CHAT_DEFAULT : OPAQUE_CHAT_DEFAULT;
			case CLAN_CHAT:
			case CLAN_GIM_CHAT:
				return OPAQUE_CHAT_DEFAULT;
			case CLAN_MESSAGE:
			case CLAN_GUEST_MESSAGE:
			case CLAN_GIM_MESSAGE:
				return isChatboxTransparent() ? TRANSPARENT_BROADCAST_DEFAULT : OPAQUE_BROADCAST_DEFAULT;
			default:
				return null;
		}
	}

	private int getSettingsColorVarPlayerID(ChatMessageType type)
	{
		switch (type)
		{
			case FRIENDSCHAT:
				return isChatboxTransparent() ? VarPlayerID.OPTION_CHAT_COLOUR_FRIENDSCHAT_TRANSPARENT : VarPlayerID.OPTION_CHAT_COLOUR_FRIENDSCHAT_OPAQUE;
			case CLAN_CHAT:
				return isChatboxTransparent() ? VarPlayerID.OPTION_CHAT_COLOUR_CLANCHAT_TRANSPARENT : VarPlayerID.OPTION_CHAT_COLOUR_CLANCHAT_OPAQUE;
			case CLAN_GUEST_CHAT:
				return isChatboxTransparent() ? VarPlayerID.OPTION_CHAT_COLOUR_GUESTCLAN_TRANSPARENT : VarPlayerID.OPTION_CHAT_COLOUR_GUESTCLAN_OPAQUE;
			case CLAN_GIM_CHAT:
				return isChatboxTransparent() ? VarPlayerID.OPTION_CHAT_COLOUR_GIMCHAT_TRANSPARENT : VarPlayerID.OPTION_CHAT_COLOUR_GIMCHAT_OPAQUE;
			case CLAN_MESSAGE:
				return isChatboxTransparent() ? VarPlayerID.OPTION_CHAT_COLOUR_CLANBROADCAST_TRANSPARENT : VarPlayerID.OPTION_CHAT_COLOUR_CLANBROADCAST_OPAQUE;
			case CLAN_GIM_MESSAGE:
				return isChatboxTransparent() ? VarPlayerID.OPTION_CHAT_COLOUR_GIMBROADCAST_TRANSPARENT : VarPlayerID.OPTION_CHAT_COLOUR_GIMBROADCAST_OPAQUE;
			default:
				return -1;
		}
	}
}

package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import java.util.List;
import java.util.function.Function;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;

@AllArgsConstructor
public enum ChatBlock implements ChatTypeModifier
{
	CLAN_INSTRUCTION(
		CleanChatChannelsConfig::removeClanInstruction,
		ChatMessageType.CLAN_MESSAGE,
		"To talk in your clan's channel"
	),
	GUEST_CLAN_INSTRUCTION(
		CleanChatChannelsConfig::removeGuestClanInstruction,
		ChatMessageType.CLAN_MESSAGE,
		"To talk, start each line of chat with /// or /gc"
	),
	GROUP_IRON_INSTRUCTION(
		CleanChatChannelsConfig::removeGroupIronInstruction,
		ChatMessageType.CLAN_GIM_MESSAGE,
		"To talk in your Ironman Group's channel"
	),
	FRIENDS_CHAT_INSTRUCTION(
		CleanChatChannelsConfig::removeFriendsChatStartup,
		ChatMessageType.FRIENDSCHATNOTIFICATION,
		"To talk, start each line of chat with the / symbol."
	),
	FRIENDS_CHAT_ATTEMPTING(
		CleanChatChannelsConfig::removeFriendsAttempting,
		ChatMessageType.FRIENDSCHATNOTIFICATION,
		"Attempting to join chat-channel..."
	),
	FRIENDS_CHAT_NOW_TALKING(
		CleanChatChannelsConfig::removeFriendsNowTalking,
		ChatMessageType.FRIENDSCHATNOTIFICATION,
		"Now talking in chat-channel"
	),
	WELCOME(
		CleanChatChannelsConfig::removeWelcome,
		ChatMessageType.WELCOME,
		"Welcome to Old School RuneScape."
	),
	;

	public boolean isEnabled(CleanChatChannelsConfig config)
	{
		return isEnabled.apply(config);
	}

	@Override
	public boolean appliesTo(CleanChatChannelsConfig config, ChatMessage event)
	{
		return ChatTypeModifier.super.appliesTo(config, event) && event.getMessage().contains(this.message);
	}

	private final Function<CleanChatChannelsConfig, Boolean> isEnabled;
	@Getter
	private final ChatMessageType chatMessageType;
	@Getter
	private final String message;

	@Override
	public List<ChatMessageType> getFromChatMessageTypes()
	{
		return List.of(chatMessageType);
	}
}

package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import java.util.List;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;

public interface ChatTypeModifier
{
	List<ChatMessageType> getFromChatMessageTypes();

	boolean isEnabled(CleanChatChannelsConfig config);

	default boolean appliesTo(CleanChatChannelsConfig config, ChatMessage event) {
		return isEnabled(config) && getFromChatMessageTypes().contains(event.getType());
	}
}

package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import com.github.ldavid432.cleanchat.CleanChatUtil;
import java.util.List;
import lombok.AllArgsConstructor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;

@AllArgsConstructor
public enum ChatStartupTrigger
{
	CLAN(ChatBlock.CLAN_INSTRUCTION, ChatNameReplacement.CLAN),
	GUEST_CLAN(ChatBlock.GUEST_CLAN_INSTRUCTION, ChatNameReplacement.GUEST_CLAN),
	FRIENDS(ChatBlock.FRIENDS_CHAT_INSTRUCTION, ChatNameReplacement.FRIENDS_CHAT_NAME),
	GROUP_IRON(ChatBlock.GROUP_IRON_INSTRUCTION, ChatNameReplacement.IRON_GROUP_NAME, ChatNameReplacement.IRON_GROUP_MESSAGE_NAME),
	;

	ChatStartupTrigger(ChatTypeModifier trigger, ChatTypeModifier... output)
	{
		this(trigger, CleanChatUtil.getChatMessageTypes(output));
	}

	private final ChatTypeModifier trigger;
	private final List<ChatMessageType> outputTypes;

	public List<ChatMessageType> getOutputTypesFor(CleanChatChannelsConfig config, ChatMessage event)
	{
		if (trigger.appliesTo(config, event))
		{
			return outputTypes;
		}
		else
		{
			return List.of();
		}
	}
}

package com.github.ldavid432.cleanchat.data;

import com.github.ldavid432.cleanchat.CleanChatChannelsConfig;
import java.util.List;
import java.util.function.Function;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ChatMessageType;

@AllArgsConstructor
public enum ChatNameReplacement implements ChatTypeModifier
{
	CLAN(
		CleanChatChannelsConfig::removeClanName,
		List.of(
			ChatMessageType.CLAN_CHAT,
			ChatMessageType.CLAN_MESSAGE
		),
		ChatMessageType.CHALREQ_CLANCHAT
	),
	GUEST_CLAN(
		CleanChatChannelsConfig::removeGuestClanName,
		List.of(
			ChatMessageType.CLAN_GUEST_CHAT,
			ChatMessageType.CLAN_GUEST_MESSAGE
		),
		ChatMessageType.CHALREQ_CLANCHAT
	),

	FRIENDS_CHAT_NAME(
		CleanChatChannelsConfig::removeFriendsChatName,
		ChatMessageType.FRIENDSCHAT,
		ChatMessageType.CHALREQ_FRIENDSCHAT
	),

	IRON_GROUP_NAME(
		CleanChatChannelsConfig::removeGroupIronName, // regular GIM messages already don't go into clan chat so this is not enabled for removeGroupIronFromClan
		ChatMessageType.CLAN_GIM_CHAT,
		ChatMessageType.TRADE
	),
	IRON_GROUP_MESSAGE_NAME(
		(config) -> config.removeGroupIronName() || config.removeGroupIronFromClan(),
		ChatMessageType.CLAN_GIM_MESSAGE,
		ChatMessageType.TRADE
	),
	;

	ChatNameReplacement(
		Function<CleanChatChannelsConfig, Boolean> isEnabled,
		ChatMessageType fromChatMessageType,
		ChatMessageType toChatMessageType
	)
	{
		this.isEnabled = isEnabled;
		this.fromChatMessageTypes = List.of(fromChatMessageType);
		this.toChatMessageType = toChatMessageType;
	}

	public boolean isEnabled(CleanChatChannelsConfig config)
	{
		return isEnabled.apply(config);
	}

	private final Function<CleanChatChannelsConfig, Boolean> isEnabled;
	@Getter
	private final List<ChatMessageType> fromChatMessageTypes;
	@Getter
	private final ChatMessageType toChatMessageType;

}

package com.github.ldavid432.cleanchat;

import java.util.concurrent.CancellationException;
import java.util.function.Consumer;
import lombok.extern.slf4j.Slf4j;

@Slf4j
class FixedCountRunnable implements Runnable
{

	private final Consumer<Runnable> command;
	private final int totalExecutionCount;
	private final Runnable onFailure;

	private int executionCount = 0;

	FixedCountRunnable(Consumer<Runnable> command, int totalExecutionCount, Runnable onFailure)
	{
		this.command = command;
		this.totalExecutionCount = totalExecutionCount;
		this.onFailure = onFailure;
	}

	@Override
	public void run()
	{
		command.accept(this::cancel);

		executionCount++;

		if (executionCount >= totalExecutionCount)
		{
			onFailure.run();
			cancel();
		}
	}

	private void cancel() {
		throw new CancellationException();
	}
}

package com.github.ldavid432.cleanchat;

import com.github.ldavid432.cleanchat.data.ChatTypeModifier;
import java.awt.Color;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import net.runelite.api.ChatLineBuffer;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.ScriptEvent;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

public class CleanChatUtil
{
	public static String sanitizeUsername(String string)
	{
		return Text.removeTags(string).replace(' ', ' ');
	}

	public static String imageTag(int imageNumber)
	{
		return new ChatMessageBuilder().img(imageNumber).build();
	}

	public static String caTag(String caId)
	{
		return "<" + CA_ID_PREFIX + "=" + caId + ">";
	}

	public static ChatMessageType sanitizeMessageType(ChatMessageType chatMessageType)
	{
		// GIM chats are actually just clan chats - only matters when getting the chat line buffers
		switch (chatMessageType)
		{
			case CLAN_GIM_CHAT:
				return ChatMessageType.CLAN_CHAT;
			case CLAN_GIM_MESSAGE:
				return ChatMessageType.CLAN_MESSAGE;
			default:
				return chatMessageType;
		}
	}

	@Nullable
	public static ChatLineBuffer getChatLineBuffer(Client client, ChatMessageType chatMessageType)
	{
		return client.getChatLineMap().get(sanitizeMessageType(chatMessageType).getType());
	}

	public static List<ChatMessageType> getChatMessageTypes(ChatTypeModifier... modifiers)
	{
		return Arrays.stream(modifiers).flatMap(modifier -> modifier.getFromChatMessageTypes().stream()).distinct().collect(Collectors.toList());
	}

	public static MenuEntry createCaMenuEntry(Client client, int index, String option, int caId)
	{
		return client.getMenu().createMenuEntry(-1)
			.setOption(option)
			.setTarget(ColorUtil.wrapWithColorTag("Task", Color.WHITE))
			.setType(MenuAction.CC_OP_LOW_PRIORITY)
			.setIdentifier(index)
			.onClick(entry -> client.runScript(7821, index, ScriptEvent.NAME, ChatMessageType.CLAN_MESSAGE.getType(), caId));
	}

	public static MenuEntry[] getCancelEntry(Client client)
	{
		return Arrays.stream(client.getMenu().getMenuEntries()).filter(e -> e.getType() == MenuAction.CANCEL).toArray(MenuEntry[]::new);
	}

	static final String CA_ID_PREFIX = "CA_ID";
	static final Pattern FULL_CA_PATTERN = Pattern.compile(".*" + CA_ID_PREFIX + ":(\\d*)\\|.*");
	static final String PREFIX_CA_PATTERN = CA_ID_PREFIX + ":\\d*\\|";
	static final Pattern TARGET_CA_PATTERN = Pattern.compile(".*<" + CA_ID_PREFIX + "=(\\d*)>.*");

}

package com.github.ldavid432.cleanchat;

import static com.github.ldavid432.cleanchat.CleanChatUtil.CA_ID_PREFIX;
import static com.github.ldavid432.cleanchat.CleanChatUtil.FULL_CA_PATTERN;
import static com.github.ldavid432.cleanchat.CleanChatUtil.PREFIX_CA_PATTERN;
import static com.github.ldavid432.cleanchat.CleanChatUtil.TARGET_CA_PATTERN;
import static com.github.ldavid432.cleanchat.CleanChatUtil.caTag;
import static com.github.ldavid432.cleanchat.CleanChatUtil.createCaMenuEntry;
import static com.github.ldavid432.cleanchat.CleanChatUtil.getCancelEntry;
import static com.github.ldavid432.cleanchat.CleanChatUtil.getChatLineBuffer;
import static com.github.ldavid432.cleanchat.CleanChatUtil.imageTag;
import static com.github.ldavid432.cleanchat.CleanChatUtil.sanitizeUsername;
import com.github.ldavid432.cleanchat.data.ChatBlock;
import com.github.ldavid432.cleanchat.data.ChatNameReplacement;
import com.github.ldavid432.cleanchat.data.ChatStartupTrigger;
import com.google.inject.Provides;
import java.awt.Color;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatLineBuffer;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.FriendsChatManager;
import net.runelite.api.FriendsChatMember;
import net.runelite.api.FriendsChatRank;
import net.runelite.api.GameState;
import net.runelite.api.MenuEntry;
import net.runelite.api.MessageNode;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.clan.ClanID;
import net.runelite.api.clan.ClanSettings;
import net.runelite.api.clan.ClanTitle;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ClientTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ChatIconManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.tuple.Pair;

@Slf4j
@PluginDescriptor(
	name = "Clean Chat",
	description = "Hide clan name and more to clean your chat channels, includes GIM, friends, and clan chats",
	tags = {"clean", "chat", "clan", "friends", "gim", "group", "iron", "ironman", "channel"}
)
public class CleanChatChannelsPlugin extends Plugin
{
	// Random ID used to identify our specific challenge entry
	private static final String CLAN_CHALLENGE_ENTRY_HIDER = "<col=1337000007331>";
	// Random ID used to identify our specific entries
	private static final String CLAN_MESSAGE_ENTRY_HIDER = "<col=2337000007332>";

	private static final String CLEAN_CHAT_SENDER = "clean-chat-plugin";

	@Inject
	private Client client;

	@Inject
	private CleanChatChannelsConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ColorManager colorManager;

	@Inject
	private ChatIconManager chatIconManager;

	private ScheduledExecutorService executor;

	@Provides
	CleanChatChannelsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CleanChatChannelsConfig.class);
	}

	private static final List<ChatMessageType> CHAT_MESSAGE_TYPES_TO_PROCESS;

	static
	{
		CHAT_MESSAGE_TYPES_TO_PROCESS = Stream.concat(
			Arrays.stream(ChatBlock.values()).map(ChatBlock::getChatMessageType),
			Arrays.stream(ChatNameReplacement.values()).flatMap(it -> it.getFromChatMessageTypes().stream())
		).distinct().collect(Collectors.toList());
	}

	@Override
	protected void startUp() throws Exception
	{
		if (executor == null || executor.isShutdown())
		{
			executor = Executors.newSingleThreadScheduledExecutor();
		}

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			log.debug("Plugin enabled. Refreshing chat.");
			processAllChatHistory();
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		executor.shutdown();
		executor = null;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (Objects.equals(event.getGroup(), CleanChatChannelsConfig.GROUP))
		{
			log.debug("Config changed. Refreshing chat.");
			processAllChatHistory();
		}
	}

	// Subscribe later since we transform the message type, we want to interfere with other chat plugins as little as possible
	@Subscribe(priority = -1)
	public void onChatMessage(ChatMessage event)
	{
		// Avoid stack overflow, ignore other types
		if ((event.getSender() != null && event.getSender().startsWith(CLEAN_CHAT_SENDER)) || !CHAT_MESSAGE_TYPES_TO_PROCESS.contains(event.getType()))
		{
			return;
		}

		// This is when chat history sends old chats, so we wait a bit for it to populate and then run our stuff
		if (event.getMessage().equals(ChatBlock.WELCOME.getMessage()))
		{
			log.debug("World hopped or logged in. Refreshing chat.");
			// Only process blocks because we want to wait for the individual chats to connect before replacing
			//  This makes startup much less jarring
			clientThread.invokeLater(() -> processChatHistory(CHAT_MESSAGE_TYPES_TO_PROCESS, this::processBlocks));
		}

		// TODO: Possibly insert a placeholder <col> in replacements for icons so the messages can be sent immediately
		//  and the icons can potentially be "lazy loaded"

		// Wait for each of the channels to load before running replacements - otherwise we won't get icon info
		for (ChatStartupTrigger trigger : ChatStartupTrigger.values())
		{
			List<ChatMessageType> messageTypes = trigger.getOutputTypesFor(config, event);
			if (!messageTypes.isEmpty())
			{
				log.debug("{} chat connected, refreshing.", trigger.name().toLowerCase());
				processChatHistory(messageTypes);
				break;
			}
		}

		processMessage(event);
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		if (client.getGameState() != GameState.LOGGED_IN || client.isMenuOpen())
		{
			return;
		}

		MenuEntry[] menuEntries = client.getMenu().getMenuEntries();

		MenuEntry[] newEntries = menuEntries;

		// Hide all entries for clan broadcasts, except cancel
		if (Arrays.stream(menuEntries).anyMatch(e -> e.getTarget().contains(CLAN_MESSAGE_ENTRY_HIDER)))
		{
			newEntries = getCancelEntry(client);
		}
		// Add back Open and View Task to CA broadcasts
		else if (Arrays.stream(menuEntries).anyMatch(e -> e.getTarget().contains(CA_ID_PREFIX)))
		{
			MenuEntry caEntry = Arrays.stream(menuEntries).filter(e -> e.getTarget().contains(CA_ID_PREFIX)).findFirst().orElse(null);
			if (caEntry != null)
			{
				Matcher matcher = TARGET_CA_PATTERN.matcher(caEntry.getTarget());

				if (matcher.matches() && matcher.group(1) != null)
				{
					try
					{
						int caId = Integer.parseInt(matcher.group(1));

						newEntries = ArrayUtils.addAll(
							getCancelEntry(client),
							// Disabled since it "sends additional actions to the server" whereas View is handled client side
							// createCaMenuEntry(client, 7, "Open", caId),
							createCaMenuEntry(client, 6, "View", caId));
					}
					catch (NumberFormatException ignored)
					{
					}
				}
			}
		}
		// Since clan chat type gets mapped to the clan challenge type we want to block the challenge entry so it seems like a normal message
		else if (Arrays.stream(menuEntries).anyMatch(e -> e.getTarget().contains(CLAN_CHALLENGE_ENTRY_HIDER)))
		{
			newEntries = Arrays.stream(menuEntries)
				.filter(e -> !(Objects.equals(e.getOption(), "Accept challenge") && e.getTarget().contains(CLAN_CHALLENGE_ENTRY_HIDER)))
				.toArray(MenuEntry[]::new);
		}

		client.getMenu().setMenuEntries(newEntries);
	}

	// Block, replace or do nothing
	private void processMessage(ChatMessage event)
	{
		boolean blockApplied = processBlocks(event);
		if (blockApplied)
		{
			return;
		}

		processReplacements(event);
	}

	private boolean processBlocks(ChatMessage event)
	{
		boolean blockMessage = shouldBlockMessage(event);
		if (blockMessage)
		{
			log.debug("Blocking message: {}", event.getMessage());
			removeChatMessage(event.getType(), event.getMessageNode());
			client.refreshChat();
		}
		return blockMessage;
	}

	public void processReplacements(ChatMessage event)
	{
		ChatNameReplacement replacement = getNameReplacement(event);
		if (replacement != null)
		{
			MessageNode oldMessageNode = event.getMessageNode();
			ChatMessageType newType = replacement.getToChatMessageType();
			log.debug("Got replaceable message, replacing {} to {} for {}", event.getType(), newType, event.getMessage());
			Color messageColor = colorManager.getMessageColor(event.getType());
			Color usernameColor = colorManager.getUsernameColor(event.getType());
			boolean nameIsUsername = true;

			// TODO: Use message builders for name + message

			String name = event.getName();

			// If we just put the name straight into the message it will end up being highlighted and/or underlined
			//  so we wrap everything but the first letter in a color type to throw off the highlighting
			if (!name.isEmpty())
			{
				int imgIndex = name.indexOf('>');
				if (imgIndex == -1)
				{
					if (name.length() > 1)
					{
						name = name.charAt(0) + "<col=normal>" + name.substring(1) + "</col>";
					}
					// Not sure how to handle 1 character names ¯\_(ツ)_/¯
				}
				else
				{
					// Account for ironman icons
					// Add 2 because substring is not inclusive, and we want to go 1 character into the real name
					name = name.substring(0, imgIndex + 2) + "<col=normal>" + name.substring(imgIndex + 2) + "</col>";
				}
			}

			switch (event.getType())
			{
				case FRIENDSCHAT:
					// Add friends chat rank
					FriendsChatManager friendsChatManager = client.getFriendsChatManager();
					if (friendsChatManager != null)
					{
						String sanitizedName = sanitizeUsername(name);

						FriendsChatMember member = Arrays.stream(friendsChatManager.getMembers())
							.filter(it -> sanitizeUsername(it.getName()).equals(sanitizedName))
							.findFirst()
							.orElse(null);

						if (member != null && member.getRank() != FriendsChatRank.UNRANKED)
						{
							name = imageTag(chatIconManager.getIconNumber(member.getRank())) + name;
						}
					}
					break;
				case CLAN_CHAT:
					// Add clan rank
					ClanChannel clanChannel = client.getClanChannel(ClanID.CLAN);
					ClanSettings clanSettings = client.getClanSettings(ClanID.CLAN);
					if (clanChannel != null && clanSettings != null)
					{
						String sanitizedName = sanitizeUsername(name);

						ClanChannelMember member = clanChannel.getMembers().stream()
							.filter(it -> sanitizeUsername(it.getName()).equals(sanitizedName))
							.findFirst()
							.orElse(null);

						if (member != null)
						{
							ClanTitle title = clanSettings.titleForRank(member.getRank());
							if (title != null)
							{
								name = imageTag(chatIconManager.getIconNumber(title)) + name;
							}
						}
					}
					break;
				case CLAN_GIM_MESSAGE:
					// Have to add the group name back in this scenario
					if (!config.removeGroupIronName() && config.removeGroupIronFromClan())
					{
						ClanChannel groupIronChannel = client.getClanChannel(ClanID.GROUP_IRONMAN);
						if (groupIronChannel != null)
						{
							String groupIronName = groupIronChannel.getName();
							if (groupIronName != null)
							{
								name = "[" + ColorUtil.wrapWithColorTag(groupIronName, colorManager.getGimNameColor()) + "] " + name;
								nameIsUsername = false;
							}
						}
					}
					break;
				case CLAN_MESSAGE:
					if (event.getMessage().startsWith(CA_ID_PREFIX))
					{
						Matcher matcher = FULL_CA_PATTERN.matcher(event.getMessage());
						if (matcher.matches() && matcher.groupCount() == 1)
						{
							name += caTag(matcher.group(1));

						}

						oldMessageNode.setValue(oldMessageNode.getValue().replaceFirst(PREFIX_CA_PATTERN, ""));

						if (oldMessageNode.getRuneLiteFormatMessage() != null)
						{
							oldMessageNode.setRuneLiteFormatMessage(oldMessageNode.getRuneLiteFormatMessage().replaceFirst(PREFIX_CA_PATTERN, ""));
						}
					}
					else
					{
						name += CLAN_MESSAGE_ENTRY_HIDER;
					}

					break;
			}

			removeChatMessage(event.getType(), oldMessageNode);

			String menuName = name + CLAN_CHALLENGE_ENTRY_HIDER;

			if (!sanitizeUsername(name).isBlank() && nameIsUsername)
			{
				name = ColorUtil.wrapWithColorTag(name, usernameColor);
				name += ": ";
			}

			String message = oldMessageNode.getValue();
			String rlFormatMessage = oldMessageNode.getRuneLiteFormatMessage();

			MessageNode newNode = client.addChatMessage(
				newType,
				menuName,
				name + ColorUtil.colorTag(messageColor) + (rlFormatMessage != null ? rlFormatMessage : message),
				CLEAN_CHAT_SENDER,
				false
			);

			newNode.setTimestamp(oldMessageNode.getTimestamp());

			if (event.getMessage().startsWith("!"))
			{
				processChatCommand(oldMessageNode, newNode, name, messageColor, message, rlFormatMessage);
			}
		}
	}

	private boolean shouldBlockMessage(ChatMessage event)
	{
		return Stream.of(ChatBlock.values()).anyMatch(it -> it.appliesTo(config, event));
	}

	private ChatNameReplacement getNameReplacement(ChatMessage event)
	{
		return Stream.of(ChatNameReplacement.values())
			.filter(it -> it.appliesTo(config, event))
			.findFirst()
			.orElse(null);
	}

	private void removeChatMessage(ChatMessageType chatMessageType, MessageNode messageNode)
	{
		ChatLineBuffer buffer = getChatLineBuffer(client, chatMessageType);
		if (buffer != null)
		{
			buffer.removeMessageNode(messageNode);
		}
	}

	private void processAllChatHistory()
	{
		processChatHistory(CHAT_MESSAGE_TYPES_TO_PROCESS);
	}

	private void processChatHistory(List<ChatMessageType> types)
	{
		processChatHistory(types, this::processMessage);
	}

	private void processChatHistory(List<ChatMessageType> types, Consumer<ChatMessage> processor)
	{
		types.stream()
			.flatMap(type -> {
				ChatLineBuffer buffer = getChatLineBuffer(client, type);
				if (buffer == null)
				{
					return Stream.empty();
				}
				return Arrays.stream(buffer.getLines().clone()).filter(Objects::nonNull).map(node -> Pair.of(type, node));
			})
			.sorted(Comparator.comparingInt(pair -> pair.getValue().getTimestamp()))
			.forEach(pair -> {
				MessageNode messageNode = pair.getValue();
				ChatMessageType type = pair.getKey();
				// Ignore message types that don't match (this will only happen with gim chat vs clan chat)
				if (messageNode == null || type != messageNode.getType())
				{
					return;
				}
				ChatMessage event = new ChatMessage(messageNode, type, messageNode.getName(), messageNode.getValue(), messageNode.getSender(), messageNode.getTimestamp());
				clientThread.invoke(() -> processor.accept(event));
			});
	}

	// Pass the old message contents in from where we use them so the comparison is accurate to what is displayed
	//  Probably not totally necessary but, just in case
	private void processChatCommand(final MessageNode oldNode, final MessageNode newNode, final String name, final Color messageColor,
									final String oldNodeOriginalMessage, final String oldNodeOriginalRLFormatMessage)
	{
		final int timeout = config.chatCommandTimeout();

		log.debug("Replaceable chat command found, waiting up to {}.25s for it to update.", timeout);

		if (executor == null || executor.isShutdown())
		{
			return;
		}

		Runnable task = new FixedCountRunnable(
			(cancel) -> {
				if (!Objects.equals(oldNode.getRuneLiteFormatMessage(), oldNodeOriginalRLFormatMessage) && oldNode.getRuneLiteFormatMessage() != null)
				{
					newNode.setRuneLiteFormatMessage(name + ColorUtil.colorTag(messageColor) + oldNode.getRuneLiteFormatMessage());
					client.refreshChat();
					cancel.run();
					return;
				}

				if (!Objects.equals(oldNode.getValue(), oldNodeOriginalMessage) && oldNode.getValue() != null)
				{
					newNode.setRuneLiteFormatMessage(name + ColorUtil.colorTag(messageColor) + oldNode.getValue());
					client.refreshChat();
					cancel.run();
					return;
				}
			},
			timeout * 2,
			() -> log.debug("No chat command update found after waiting {}.25s", timeout)
		);

		executor.scheduleAtFixedRate(task, 250, 500, TimeUnit.MILLISECONDS);
	}
}

package com.github.ldavid432.cleanchat;

import static com.github.ldavid432.cleanchat.CleanChatChannelsConfig.GROUP;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(GROUP)
public interface CleanChatChannelsConfig extends Config
{
	String GROUP = "cleanchat";

	@ConfigItem(
		keyName = "removeWelcome",
		name = "Remove welcome message",
		description = "Remove 'Welcome to RuneScape' message",
		position = 0
	)
	default boolean removeWelcome()
	{
		return true;
	}

	@ConfigSection(
		name = "Clan Chat",
		description = "Configure clan chat",
		position = 1
	)
	String clanSection = "clanSection";

	@ConfigItem(
		keyName = "removeClanInstruction",
		name = "Remove startup message",
		description = "Remove message telling you how to chat in your clan channel",
		section = clanSection,
		position = 0
	)
	default boolean removeClanInstruction()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeClanName",
		name = "Remove clan name",
		description = "Remove clan name from clan chat messages",
		section = clanSection,
		position = 1
	)
	default boolean removeClanName()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeGuestClanInstruction",
		name = "Remove guest startup message",
		description = "Remove message telling you how to chat in your guest clan channel",
		section = clanSection,
		position = 2
	)
	default boolean removeGuestClanInstruction()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeGuestClanName",
		name = "Remove guest clan name",
		description = "Remove guest clan name from guest clan chat messages",
		section = clanSection,
		position = 3
	)
	default boolean removeGuestClanName()
	{
		return false;
	}

	@ConfigSection(
		name = "Group Iron Chat",
		description = "Configure group iron chat",
		position = 2
	)
	String ironSection = "ironSection";

	@ConfigItem(
		keyName = "removeGroupIronInstruction",
		name = "Remove startup message",
		description = "Remove message telling you how to chat in your GIM channel",
		section = ironSection,
		position = 0
	)
	default boolean removeGroupIronInstruction()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeGroupIronName",
		name = "Remove GIM name",
		description = "Remove GIM name from GIM chat messages.<br>" +
			"Enabling this also enables 'Move GIM broadcasts', which removes GIM broadcasts from the clan tab.",
		section = ironSection,
		position = 1
	)
	default boolean removeGroupIronName()
	{
		return false;
	}

	@ConfigItem(
		keyName = "moveGroupIronBroadcasts",
		name = "Move GIM broadcasts",
		description = "Remove GIM broadcasts from the clan chat tab, only display them in the group tab.<br>" +
			"This is always enabled if 'Remove GIM name' is enabled.",
		section = ironSection,
		position = 2
	)
	default boolean removeGroupIronFromClan()
	{
		return true;
	}

	@ConfigSection(
		name = "Friends Chat",
		description = "Configure friends chat",
		position = 3
	)
	String friendsSection = "friendsSection";

	@ConfigItem(
		keyName = "removeFriendsChatInstruction",
		name = "Remove startup message",
		description = "Remove message telling you how to chat in your friends channel",
		section = friendsSection,
		position = 0
	)
	default boolean removeFriendsChatStartup()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeFriendsChatName",
		name = "Remove friends chat name",
		description = "Remove friends chat name from friends chat channel messages",
		section = friendsSection,
		position = 1
	)
	default boolean removeFriendsChatName()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeFriendsAttempting",
		name = "Remove 'attempting to join'",
		description = "Remove 'Attempting to join...' message from friends chat channel",
		section = friendsSection,
		position = 2
	)
	default boolean removeFriendsAttempting()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeFriendsNowTalking",
		name = "Remove 'now talking in'",
		description = "Remove 'Now talking in chat-channel...' message from friends chat channel",
		section = friendsSection,
		position = 3
	)
	default boolean removeFriendsNowTalking()
	{
		return false;
	}

	@ConfigSection(
		name = "Debug",
		description = "Optional debug settings. You probably won't need to change these",
		position = 4,
		closedByDefault = true
	)
	String debugSection = "debugSection";

	@ConfigItem(
		keyName = "chatCommandTimeout",
		name = "Chat command timeout",
		description = "Time in seconds to stop waiting for a chat command to update.<br>" +
			"If you have a slow connection and chat commands don't work you can try increasing this.",
		section = debugSection,
		position = 0
	)
	@Range(min = 2, max = 30)
	default int chatCommandTimeout()
	{
		return 10;
	}
}

package com.github.ldavid432;

import com.github.ldavid432.cleanchat.CleanChatChannelsPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CleanChatTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CleanChatChannelsPlugin.class);
		RuneLite.main(args);
	}
}

