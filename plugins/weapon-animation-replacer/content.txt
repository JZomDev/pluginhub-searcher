package com.weaponanimationreplacer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import lombok.Getter;
import lombok.Setter;

public class TransmogSet
{
	@Getter
	@Setter
	private String name = "";
	@Getter
	@Setter
	private boolean enabled = true;
	@Getter
	@Setter
	private boolean minimized = false;

	@Getter
	private final List<Swap> swaps = new ArrayList<>();

	// needed for gson to not skip my defaults.
	public TransmogSet() {

	}

	public TransmogSet(List<Swap> swaps) {
		this.swaps.addAll(swaps);
	}

	public static TransmogSet createTemplate()
	{
		return new TransmogSet(Collections.singletonList(new Swap()));
	}

	public void addNewSwap()
	{
		swaps.add(new Swap());
	}

	public void removeSwap(Swap swap)
	{
		swaps.remove(swap);
	}

	public void moveSwap(Swap swap, int i)
	{
		int swapIndex = swaps.indexOf(swap);
		if (swapIndex == -1) throw new IllegalArgumentException();
		if (swapIndex + i < 0 || swapIndex + i >= swaps.size()) return;

		swaps.remove(swap);
		swaps.add(swapIndex + i, swap);
	}

	@Override
	public String toString()
	{
		return "TransmogSet{" +
			"name='" + name + '\'' +
			", enabled=" + enabled +
			", minimized=" + minimized +
			", swaps=" + swaps +
			'}';
	}

	@Override
	public boolean equals(Object o)
	{
		if (this == o)
		{
			return true;
		}
		if (o == null || getClass() != o.getClass())
		{
			return false;
		}
		TransmogSet that = (TransmogSet) o;
		return enabled == that.enabled && minimized == that.minimized && name.equals(that.name) && swaps.equals(that.swaps);
	}

	@Override
	public int hashCode()
	{
		return Objects.hash(name, enabled, minimized, swaps);
	}
}

package com.weaponanimationreplacer;

import java.awt.Color;

public class GraphicEffect
{
	enum Type {
		SCYTHE_SWING
	}

	public Type type;
	public Color color;

	public GraphicEffect(Type type, Color color) {
		this.type = type;
		this.color = color;
	}

	public static GraphicEffect createTemplate() {
		return new GraphicEffect(null, Color.CYAN);
	}
}

package com.weaponanimationreplacer;

import lombok.Data;

@Data
public class ProjectileSwap
{
	int toReplace = -1;
	int toReplaceWith = -1;
	ProjectileCast toReplaceCustom = null;
	ProjectileCast toReplaceWithCustom = null;

	public ProjectileCast getToReplace() {
		if (toReplace == -1) return null;
		return Constants.projectilesById[toReplace];
	}

	public ProjectileCast getToReplaceWith() {
		if (toReplaceWithCustom != null) return toReplaceWithCustom;
		if (toReplaceWith == -1) return null;
		return Constants.projectilesById[toReplaceWith];
	}

	public static ProjectileSwap createTemplate()
	{
		return new ProjectileSwap();
	}

	public void createCustomIfNull()
	{
		if (toReplaceWithCustom != null) return;

		if (toReplaceWith == -1) {
			toReplaceWithCustom = ProjectileCast.p().build();
		} else {
			toReplaceWithCustom = Constants.projectilesById[toReplaceWith].toBuilder().build();
		}
	}
}

package com.weaponanimationreplacer;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import net.runelite.client.game.ItemManager;

@AllArgsConstructor
@Data
@Builder(toBuilder = true)
public final class ProjectileCast
{
	int id;

	String name;
	int itemIdIcon;
	int spriteIdIcon;

	int castAnimation;
	int castGfx;
	int castGfxHeight;
	int projectileId;
	int hitGfx;
	int hitGfxHeight;

	int startMovement;
	int startPos;
	int startHeight;
	int endHeight;
	int slope;

	boolean artificial;

	public String getName(ItemManager itemManager) {
		return name != null ? name : itemManager.getItemComposition(itemIdIcon).getName() + itemIdIcon;
	}

	public static class ProjectileCastBuilder {

		// These need to be -1 by default because -1 means not present and 0 will result in a projectile/icon/etc.
		int spriteIdIcon = -1;
		int itemIdIcon = -1;
		int castGfx = -1;
		int hitGfx = -1;
		int projectileId = -1;

		boolean artificial = false;

		public ProjectileCastBuilder cast(int castAnimation, int castGfx, int castGfxHeight) {
			this.castAnimation = castAnimation;
			this.castGfx = castGfx;
			this.castGfxHeight = castGfxHeight;
			return this;
		}

		public ProjectileCastBuilder projectile(int projectileId, int startMovement, int startPos, int startHeight, int endHeight, int slope) {
			this.projectileId = projectileId;
			this.hitGfxHeight = endHeight; // Good enough for most spells, only a few have a different value here.
			this.startMovement = startMovement;
			this.startPos = startPos;
			this.startHeight = startHeight;
			this.endHeight = endHeight;
			this.slope = slope;
			return this;
		}

		// TODO ideally remove this once you have the right values.
		// reasonable default.
		@Deprecated
		public ProjectileCastBuilder ids(int castAnimation, int castGfx, int projectileId, int hitGfx, int startMovement, int startPos, int endHeight, int slope) {
			return ids(castAnimation, castGfx, 92, projectileId, hitGfx, startMovement, startPos, 172, endHeight, slope);
		}

		@Deprecated
		public ProjectileCastBuilder ids(int castAnimation, int castGfx, int castGfxHeight, int projectileId, int hitGfx, int startMovement, int startPos, int startHeight, int endHeight, int slope) {
			this.castAnimation = castAnimation;
			this.castGfx = castGfx;
			this.castGfxHeight = castGfxHeight;
			this.hitGfx = hitGfx;
			this.hitGfxHeight = endHeight; // Good enough for most spells, only a few have a different value here.

			this.projectileId = projectileId;
			this.startMovement = startMovement;
			this.startPos = startPos;
			this.startHeight = startHeight;
			this.endHeight = endHeight;
			this.slope = slope;

			return this;
		}

		public ProjectileCastBuilder hit(int hitGfx, int hitGfxHeight) {
			this.hitGfx = hitGfx;
			this.hitGfxHeight = hitGfxHeight;
			return this;
		}

		public ProjectileCastBuilder simpleSpell(int castAnimation, int hitGfx) {
			this.castAnimation = castAnimation;
			this.hitGfx = hitGfx;
			this.hitGfxHeight = 0;
			return this;
		}

		public ProjectileCastBuilder sprite(int spriteId) {
			this.spriteIdIcon = spriteId;
			return this;
		}

		public ProjectileCastBuilder itemId(int itemId) { //
			this.itemIdIcon = itemId;
			return this;
		}

		public ProjectileCastBuilder artificial(boolean artificial) {
			this.artificial = artificial;
			return this;
		}

		public ProjectileCastBuilder artificial() { // more convenient syntax
			this.artificial = true;
			return this;
		}
	}

	public static ProjectileCastBuilder p() {
		return new ProjectileCastBuilder();
	}
}

/*
 * Copyright (c) 2018, Kamiel, <https://github.com/Kamielvf>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.weaponanimationreplacer;

import com.google.common.primitives.Ints;
import com.weaponanimationreplacer.ChatBoxFilterableSearch.SelectionResult;
import com.weaponanimationreplacer.Constants.IdIconNameAndSlot;
import static com.weaponanimationreplacer.Constants.TriggerItemIds;
import static com.weaponanimationreplacer.Swap.AnimationReplacement;
import com.weaponanimationreplacer.Swap.AnimationType;
import static com.weaponanimationreplacer.Swap.AnimationType.ATTACK;
import com.weaponanimationreplacer.Swap.SoundSwap;
import com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.MODEL_SWAP;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.SPELL_L;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.SPELL_R;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.TRIGGER_ITEM;
import java.awt.AlphaComposite;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeListener;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.Projectile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ClientTick;
import net.runelite.api.kit.KitType;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.ColorJButton;
import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.ui.components.colorpicker.RuneliteColorPicker;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

@Slf4j
class TransmogSetPanel extends JPanel
{
	private static final int DEFAULT_FILL_OPACITY = 75;

	private static final Border NAME_BOTTOM_BORDER = new CompoundBorder(
		BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARK_GRAY_COLOR),
		BorderFactory.createLineBorder(ColorScheme.DARKER_GRAY_COLOR));

	private static final ImageIcon MOVE_RULE_UP_ICON;
	private static final ImageIcon MOVE_RULE_UP_ICON_HOVER;
	private static final ImageIcon MOVE_RULE_DOWN_ICON;
	private static final ImageIcon MOVE_RULE_DOWN_ICON_HOVER;

	private static final ImageIcon DELETE_RULE_ICON;
	private static final ImageIcon DELETE_RULE_ICON_HOVER;

	private static final ImageIcon EDIT_ICON;
	private static final ImageIcon EDIT_ICON_HOVER;

	private static final ImageIcon ADD_ICON;
	private static final ImageIcon ADD_HOVER_ICON;

	private static final ImageIcon GEAR_ICON;
	private static final ImageIcon GEAR_HOVER_ICON;

	private static final ImageIcon VISIBLE_ICON;
	private static final ImageIcon INVISIBLE_ICON;

	private final WeaponAnimationReplacerPlugin plugin;
	private final int index;
	private final TransmogSet transmogSet;

	private final FlatTextField nameInput = new FlatTextField();

	private WeaponAnimationReplacerPluginPanel pluginPanel;

	static
	{
		final BufferedImage upImg = ImageUtil.loadImageResource(TransmogSetPanel.class, "up_small.png");
		MOVE_RULE_UP_ICON = new ImageIcon(upImg);
		MOVE_RULE_UP_ICON_HOVER = new ImageIcon(ImageUtil.luminanceOffset(upImg, -150));

		final BufferedImage downImg = ImageUtil.loadImageResource(TransmogSetPanel.class, "down_small.png");
		MOVE_RULE_DOWN_ICON = new ImageIcon(downImg);
		MOVE_RULE_DOWN_ICON_HOVER = new ImageIcon(ImageUtil.luminanceOffset(downImg, -150));

		final BufferedImage deleteImg = ImageUtil.loadImageResource(TransmogSetPanel.class, "delete.png");
		DELETE_RULE_ICON = new ImageIcon(deleteImg);
		DELETE_RULE_ICON_HOVER = new ImageIcon(ImageUtil.luminanceOffset(deleteImg, -50));

		final BufferedImage editImg = ImageUtil.loadImageResource(TransmogSetPanel.class, "edit.png");
		EDIT_ICON = new ImageIcon(editImg);
		EDIT_ICON_HOVER = new ImageIcon(ImageUtil.luminanceOffset(editImg, -150));

		final BufferedImage addIcon = ImageUtil.loadImageResource(TransmogSetPanel.class, "add_icon.png");
		ADD_ICON = new ImageIcon(addIcon);
		ADD_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(addIcon, 0.53f));

		final BufferedImage gearIcon = ImageUtil.loadImageResource(TransmogSetPanel.class, "gear_icon.png");
		GEAR_ICON = new ImageIcon(gearIcon);
		GEAR_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(gearIcon, 0.53f));

		final BufferedImage visibleIcon = ImageUtil.loadImageResource(TransmogSetPanel.class, "visible_icon.png");
		VISIBLE_ICON = new ImageIcon(visibleIcon);

		final BufferedImage invisibleIcon = ImageUtil.loadImageResource(TransmogSetPanel.class, "invisible_icon.png");
		INVISIBLE_ICON = new ImageIcon(invisibleIcon);
	}

	TransmogSetPanel(WeaponAnimationReplacerPlugin plugin, TransmogSet transmogSet, WeaponAnimationReplacerPluginPanel pluginPanel, int index)
	{
		this.plugin = plugin;
		this.transmogSet = transmogSet;
		this.pluginPanel = pluginPanel;
		this.index = index;

		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		add(createNamePanel(), BorderLayout.NORTH);
		if (!transmogSet.isMinimized()) add(createBottomPanel(), BorderLayout.CENTER);
	}

	private JPanel createBottomPanel() {
		JPanel bottomContainer = new JPanel();
		bottomContainer.setLayout(new BoxLayout(bottomContainer, BoxLayout.Y_AXIS));
		bottomContainer.setBorder(new EmptyBorder(8, 0, 8, 0));
		bottomContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		for (int i = 0; i < transmogSet.getSwaps().size(); i++)
		{
			bottomContainer.add(createSwapPanel(transmogSet.getSwaps().get(i), i, transmogSet.getSwaps().size()));
		}
		JButton addSwapButton = new JButton("add swap");
		addSwapButton.addActionListener(e -> addNewSwap(transmogSet));

		JPanel p = new JPanel();
		p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
		p.add(addSwapButton);
		bottomContainer.add(p);

		bottomPanel = bottomContainer;
		return bottomContainer;
	}

	private Component createSwapPanel(Swap swap, int index, int total)
	{
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());

		JPanel restrictionAndModelSwapPanel = getRestrictionAndModelSwapPanel();
		restrictionAndModelSwapPanel.add(createSwapOptionsPanel(transmogSet, swap, index != 0, index != total - 1));

		List<Integer> itemRestrictions = swap.getItemRestrictions();
		if (itemRestrictions.isEmpty()) {
			itemRestrictions = Collections.singletonList(-1); // "Any" button.
		}
		for (Integer itemRestriction : itemRestrictions)
		{
			restrictionAndModelSwapPanel.add(createItemRestrictionButton(swap, itemRestriction));
		}

		restrictionAndModelSwapPanel.add(new JLabel("->"));

		List<Integer> modelSwaps = swap.getModelSwaps();
		if (modelSwaps.isEmpty()) {
			modelSwaps = Collections.singletonList(-1); // "None" button.
		}
		for (Integer modelSwap : modelSwaps)
		{
			restrictionAndModelSwapPanel.add(createModelSwapButton(swap, modelSwap));
		}

		panel.add(restrictionAndModelSwapPanel, BorderLayout.NORTH);

		JPanel animationSwapsPanel = new JPanel();
		animationSwapsPanel.setLayout(new BoxLayout(animationSwapsPanel, BoxLayout.Y_AXIS));
		if (!swap.animationReplacements.isEmpty()) {
			for (int i = 0; i < swap.animationReplacements.size(); i++)
			{
				animationSwapsPanel.add(createAnimationReplacementPanel(swap, i, swap.animationReplacements.size()));
			}
		}
		if (!swap.getProjectileSwaps().isEmpty()) {
			for (int i = 0; i < swap.getProjectileSwaps().size(); i++)
			{
				animationSwapsPanel.add(createProjectileSwapPanel(swap, i, swap.getProjectileSwaps().size()));
			}
		}
		if (!swap.getGraphicEffects().isEmpty()) {
			for (int i = 0; i < swap.getGraphicEffects().size(); i++)
			{
				animationSwapsPanel.add(createGraphicsEffectPanel(swap, i, swap.getGraphicEffects().size()));
			}
		}
		if (!swap.getSoundSwaps().isEmpty()) {
			for (int i = 0; i < swap.getSoundSwaps().size(); i++)
			{
				animationSwapsPanel.add(createSoundSwapPanel(swap, i, swap.getSoundSwaps().size()));
			}
		}
		panel.add(animationSwapsPanel, BorderLayout.CENTER);

		return panel;
	}

	// What in the absolute fuck. FlowLayout claims to use multiple rows but apparently it give not a single shit that more than the first row is visible. What the fuck. What a fucking waste of my fucking time. Gaslightning documentation, fuck you.
	/* :MonkaChrist: */
	private JPanel getRestrictionAndModelSwapPanel()
	{
		JPanel restrictionAndModelSwapPanel = new JPanel(new FlowLayout(FlowLayout.LEFT) {
			@Override
			public Dimension minimumLayoutSize(Container target)
			{
				int parentWidth = target.getParent().getWidth();//target.getParent().getWidth();
				if (parentWidth == 0) parentWidth = 215;

				int nmembers = target.getComponentCount();
				int y = 0;
				int x = getInsets().left + getInsets().right + getHgap() * 2;
				for (int i = 0; i < nmembers; i++)
				{
					Component component = target.getComponent(i);
					int newX = (int) (x + component.getPreferredSize().getWidth());
					if (newX > parentWidth) {
						y += 40;
						newX = (int) (component.getPreferredSize().getWidth() + getHgap());
					}
					x = newX + getHgap();
				}
				return new Dimension(super.minimumLayoutSize(target).width, y + 40);
			}

			@Override
			public Dimension preferredLayoutSize(Container target)
			{
				return minimumLayoutSize(target);
			}
		}) {
//			@Override
//			public Dimension getMaximumSize()
//			{
//				return getPreferredSize();
//			}
		};
		return restrictionAndModelSwapPanel;
	}

	private Component createItemRestrictionButton(Swap swap, int initialItemId)
	{
		ItemSelectionButton button = new ItemSelectionButton();

		button.nameWhenEmpty = "Any";
		IdIconNameAndSlot hiddenSlot = TriggerItemIds.getHiddenSlot(initialItemId);
		int displayIconId = initialItemId;
		if (hiddenSlot != null) {
			displayIconId = hiddenSlot.getIconId();
			button.showNotSign = true;
			button.setItem(displayIconId, hiddenSlot.getName());
		} else {
			button.setItem(displayIconId, initialItemId);
		}

		button.addListeners(() -> swap.removeTriggerItem(initialItemId), (result, plugin) -> swap.addTriggerItem(result.itemId, result.slot, plugin), TRIGGER_ITEM, swap);
		return button;
	}

	private Component createModelSwapButton(Swap swap, int initialItemId)
	{
		ItemSelectionButton button = new ItemSelectionButton();
		button.nameWhenEmpty = "None";
		int slotOverride = swap.getSlotOverride(initialItemId);
		if (slotOverride != -1) button.overlayString = KitType.values()[slotOverride].name().toLowerCase();
		if (initialItemId < 0) {
			IdIconNameAndSlot idIconNameAndSlot = Constants.getModelSwap(initialItemId);
			button.showNotSign = idIconNameAndSlot.isShowNotSign();
			button.setItem(idIconNameAndSlot.getIconId(), idIconNameAndSlot.getName());
		} else {
			button.setItem(initialItemId);
		}
		button.addListeners(() -> swap.removeModelSwap(initialItemId), (result, plugin) -> swap.addModelSwap(result.itemId, plugin, result.slot), MODEL_SWAP, swap);
		return button;
	}

	private Component createSpellSwapLButton(ProjectileSwap swap)
	{
		ItemSelectionButton button = new ItemSelectionButton();
		button.nameWhenEmpty = "None";
		button.setSpell(swap.toReplace);
		button.addListeners(() -> swap.toReplace = -1, (result, plugin) -> swap.toReplace = result.itemId, SPELL_L, null);
		return button;
	}

	private Component createSpellSwapRButton(ProjectileSwap swap)
	{
		ItemSelectionButton button = new ItemSelectionButton();
		button.nameWhenEmpty = "None";
		button.overlayString = swap.toReplaceWithCustom != null ? "Custom" : null;
		button.setSpell(swap.toReplaceWith);
		button.addListeners(() -> swap.toReplaceWith = -1, (result, plugin) -> {swap.toReplaceWith = result.itemId; swap.toReplaceWithCustom = null;}, SPELL_R, null);
		return button;
	}

	private Component createSwapOptionsPanel(TransmogSet transmogSet, Swap swap, boolean moveUp, boolean moveDown)
	{
		JLabel label = new IconLabelButton(GEAR_ICON, GEAR_HOVER_ICON, () -> {}, "Options");
//		JLabel label = new JLabel(GEAR_ICON);
		final JPopupMenu menu = new JPopupMenu();
		final Color labelForeground = label.getForeground();
		menu.setBorder(new EmptyBorder(5, 5, 5, 5));

		addMenuItem(menu, "Add trigger item", e -> addTriggerItem(swap));
		addMenuItem(menu, "Add model swap", e -> addModelSwap(swap));
		addMenuItem(menu, "Add animation swap", e -> addAnimationReplacement(swap));
		addMenuItem(menu, "Add projectile swap", e -> addProjectileSwap(swap));
		addMenuItem(menu, "Add graphic effect", e -> addGraphicEffect(swap));
		addMenuItem(menu, "Add sound swap", e -> addSoundSwap(swap));

		if (moveUp) addMenuItem(menu, "Move up", e -> moveSwap(transmogSet, swap, -1));
		if (moveDown) addMenuItem(menu, "Move down", e -> moveSwap(transmogSet, swap, +1));

		addMenuItem(menu, "Remove swap", e -> removeSwap(transmogSet, swap));

		label.addMouseListener(new MouseAdapter()
		{
			private Color lastForeground;

			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				Component source = (Component) mouseEvent.getSource();
				Point location = MouseInfo.getPointerInfo().getLocation();
				SwingUtilities.convertPointFromScreen(location, source);
				menu.show(source, location.x, location.y);
			}

			@Override
			public void mouseEntered(MouseEvent mouseEvent)
			{
				lastForeground = label.getForeground();
				label.setForeground(ColorScheme.BRAND_ORANGE);
			}

			@Override
			public void mouseExited(MouseEvent mouseEvent)
			{
				label.setForeground(lastForeground);
			}
		});

		return label;
	}

	private void addNewSwap(TransmogSet transmogSet)
	{
		transmogSet.addNewSwap();
		SwingUtilities.invokeLater(this::rebuild);
	}

	private void removeSwap(TransmogSet transmogSet, Swap swap)
	{
		transmogSet.removeSwap(swap);
		plugin.clientThread.invokeLater(plugin::handleTransmogSetChange);
		SwingUtilities.invokeLater(this::rebuild);
	}

	private void moveSwap(TransmogSet transmogSet, Swap swap, int i)
	{
		transmogSet.moveSwap(swap, i);
		plugin.clientThread.invokeLater(plugin::handleTransmogSetChange);
		SwingUtilities.invokeLater(this::rebuild);
	}

	private void addAnimationReplacement(Swap swap)
	{
		plugin.clientThread.invokeLater(() -> {
			swap.addNewAnimationReplacement();
			plugin.handleTransmogSetChange();
			SwingUtilities.invokeLater(this::rebuild);
		});
	}

	private void addProjectileSwap(Swap swap)
	{
		swap.addNewProjectileSwap();
		plugin.clientThread.invokeLater(plugin::handleTransmogSetChange);
		SwingUtilities.invokeLater(this::rebuild);
	}

	private void addGraphicEffect(Swap swap)
	{
		swap.addNewGraphicEffect();
		plugin.clientThread.invokeLater(plugin::handleTransmogSetChange);
		SwingUtilities.invokeLater(this::rebuild);
	}

	private void addSoundSwap(Swap swap)
	{
		swap.addNewSoundSwap();
		plugin.clientThread.invokeLater(plugin::handleTransmogSetChange);
		SwingUtilities.invokeLater(this::rebuild);
	}

	// TODO threading, memory consistency? on which threads am I doing what. I want swaps to be modified on the client thread only, I think.
	private void addModelSwap(Swap swap)
	{
		plugin.doItemSearch(
			result -> {
				swap.addModelSwap(result.itemId, plugin, result.slot);
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			},
			() -> {},
			MODEL_SWAP,
			swap
		);
	}

	private void addTriggerItem(Swap swap)
	{
		plugin.doItemSearch(
			result -> {
				swap.addTriggerItem(result.itemId, plugin);
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			},
			TRIGGER_ITEM
		);
	}

	private void addMenuItem(JPopupMenu menu, String name, ActionListener actionListener)
	{
		JMenuItem menuItem = new JMenuItem(name);
		menuItem.addActionListener(actionListener);
		menu.add(menuItem);
	}

	public static class IconLabelButton extends JLabel {
		private final Icon icon;
		private final Icon iconMouseovered;
		private Runnable onClick;
		public IconLabelButton(Icon icon, Icon iconMouseovered, Runnable onClick, String tooltip) {
			this.icon = icon;
			this.iconMouseovered = iconMouseovered;
			this.onClick = onClick;
			setIcon(icon);
			setToolTipText(tooltip);

			addMouseListener(new MouseAdapter()
			{
				@Override
				public void mousePressed(MouseEvent mouseEvent)
				{
					IconLabelButton.this.onClick.run();
				}

				@Override
				public void mouseEntered(MouseEvent mouseEvent)
				{
					setIcon(iconMouseovered);
				}

				@Override
				public void mouseExited(MouseEvent mouseEvent)
				{
					setIcon(icon);
				}
			});
		}
	}

	private Component bottomPanel;

	private void rebuild() {
		if (bottomPanel != null)
		{
			remove(bottomPanel);
			bottomPanel = null;
		}
		if (!transmogSet.isMinimized()) add(createBottomPanel(), BorderLayout.CENTER);
		pluginPanel.revalidate();
	}

	public class EntryPanel extends JPanel {
		public EntryPanel(boolean checkbox, boolean enabled, boolean x, boolean plus, JPanel panel, Runnable onDelete, Runnable onAdd, Consumer<Boolean> onEnable) {
			this(checkbox, enabled, false, false, false, false, false, x, plus, panel, onDelete, onAdd, onEnable);
		}

		public EntryPanel(boolean checkbox, boolean enabled, boolean minimize, boolean minimized, boolean updown, boolean up, boolean down, boolean x, boolean plus, JPanel panel, Runnable onDelete, Runnable onAdd, Consumer<Boolean> onEnable) {
			setLayout(new BorderLayout());
			setBackground(ColorScheme.DARKER_GRAY_COLOR);
			if (checkbox) {
				JCheckBox enabledCheckbox = new JCheckBox();
//				enabledCheckbox.setToolTipText("Enabled");
				enabledCheckbox.setSelected(enabled);
				enabledCheckbox.setIcon(enabled ? VISIBLE_ICON : INVISIBLE_ICON);
				enabledCheckbox.addActionListener((e) -> {
					plugin.clientThread.invokeLater(() -> {
						onEnable.accept(enabledCheckbox.isSelected());
					});
					enabledCheckbox.setIcon(enabledCheckbox.isSelected() ? VISIBLE_ICON : INVISIBLE_ICON);
				});
				add(enabledCheckbox, BorderLayout.WEST);
			}
			JPanel rightSide = new JPanel();
			rightSide.setLayout(new BoxLayout(rightSide, BoxLayout.X_AXIS));
			rightSide.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			if (minimize) {
				JLabel xButton = makeButton(minimized ? " + " : " - ", () -> {
					plugin.clientThread.invokeLater(() -> {
						transmogSet.setMinimized(!minimized);;
						SwingUtilities.invokeLater(TransmogSetPanel.this::rebuild);
					});
				});
				rightSide.add(xButton);
			}
			if (updown) {
				rightSide.add(new IconLabelButton(MOVE_RULE_UP_ICON, MOVE_RULE_UP_ICON_HOVER, () -> {
					plugin.clientThread.invokeLater(() -> {
						plugin.moveTransmogSet(index, true);
					});
				}, "Move up in list and priority"));
				rightSide.add(new IconLabelButton(MOVE_RULE_DOWN_ICON, MOVE_RULE_DOWN_ICON_HOVER, () -> {
					plugin.clientThread.invokeLater(() -> {
						plugin.moveTransmogSet(index, false);
					});
				}, "Move down in list and priority"));
			}
			if (x) {
				rightSide.add(new IconLabelButton(DELETE_RULE_ICON, DELETE_RULE_ICON_HOVER, onDelete, "Delete"));
			}
			if (plus) {
				rightSide.add(new IconLabelButton(ADD_ICON, ADD_HOVER_ICON, onAdd, "Add another"));
			}
			add(rightSide, BorderLayout.EAST);

			add(panel, BorderLayout.CENTER);
		}

		private JLabel makeButton(String text, Runnable onClick) {
			JLabel label = new JLabel(text);
//			label.setToolTipText("Add a new animation replacement rule.");
			label.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mousePressed(MouseEvent mouseEvent)
				{
					onClick.run();
				}

//				@Override
//				public void mouseEntered(MouseEvent mouseEvent)
//				{
//					label.setIcon(ADD_HOVER_ICON);
//				}
//
//				@Override
//				public void mouseExited(MouseEvent mouseEvent)
//				{
//					label.setIcon(ADD_ICON);
//				}
			});
			return label;
		}
	}

	private Component createAnimationReplacementPanel(Swap swap, int i, int size) {
		AnimationReplacement animationReplacement = swap.animationReplacements.get(i);

		JPanel animationReplacementPanel = new JPanel();
		animationReplacementPanel.setBorder(new EmptyBorder(5, 0, 0, 0));
		animationReplacementPanel.setLayout(new BoxLayout(animationReplacementPanel, BoxLayout.Y_AXIS));
		animationReplacementPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		if (animationReplacement.auto != -1) {
			JPanel p = new JPanel();
			p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
			JLabel autoLabel = new JLabel("(auto-generated animation swap)");
			p.add(autoLabel);
			animationReplacementPanel.add(p);
		}

		JPanel row1 = new JPanel();
		row1.setLayout(new BoxLayout(row1, BoxLayout.X_AXIS));
		row1.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		row1.add(new JLabel("Replace "));

		JComboBox<AnimationType> animToReplace = new JComboBox<>(AnimationType.comboBoxOrder.toArray(new AnimationType[] {}));
		animToReplace.setRenderer(new DefaultListCellRenderer() {
			@Override
			public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
				Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
				setText(value == null ? "<choose>" : ((AnimationType) value).getComboBoxName());
				return rendererComponent;
			}
		});
		animToReplace.setSelectedItem(animationReplacement.animationtypeToReplace);
		animToReplace.setPrototypeDisplayValue(AnimationType.RUN);
		animToReplace.addActionListener((e) -> {
			plugin.clientThread.invokeLater(() -> {
				animationReplacement.animationtypeToReplace = (AnimationType) animToReplace.getSelectedItem();
				animationReplacement.auto = -1;
				if (!ATTACK.appliesTo(animationReplacement.animationtypeToReplace)) {
					animationReplacement.animationtypeReplacement = null;
				}
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		});
		row1.add(animToReplace);
		animationReplacementPanel.add(row1);

		JPanel row2 = new JPanel();
		row2.setLayout(new BoxLayout(row2, BoxLayout.X_AXIS));
		row2.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		row2.add(new JLabel("with"));
		JComboBox<AnimationSet> animationSetToUse = new JComboBox<>(Constants.animationSets.toArray(new AnimationSet[]{}));
		animationSetToUse.setRenderer(new DefaultListCellRenderer() {
			@Override
			public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
				Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
				setText(value == null ? "<choose>" : ((AnimationSet) value).getComboBoxName());
				return rendererComponent;
			}
		});
		animationSetToUse.setSelectedItem(animationReplacement.animationSet);
		animationSetToUse.addActionListener((e) -> {
			plugin.clientThread.invokeLater(() -> {
				animationReplacement.animationSet = (AnimationSet) animationSetToUse.getSelectedItem();
				animationReplacement.auto = -1;
				if (ATTACK.appliesTo(animationReplacement.animationtypeToReplace) && animationReplacement.animationSet != null)
				{
					List<AnimationType> actions = animationReplacement.animationSet.getAttackAnimations();
					Optional<AnimationType> match = actions.stream().filter(action -> action == animationReplacement.animationtypeReplacement).findAny();
					if (match.isPresent()) {
						animationReplacement.animationtypeReplacement = match.get();
					} else if (!actions.isEmpty()) {
						animationReplacement.animationtypeReplacement = actions.get(0);
					}
				}
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		});
		row2.add(animationSetToUse);
		animationReplacementPanel.add(row2);

		if (ATTACK.appliesTo(animationReplacement.animationtypeToReplace) && animationReplacement.animationSet != null) {
			JPanel row3 = new JPanel();
			row3.setLayout(new BoxLayout(row3, BoxLayout.X_AXIS));
			row3.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			row3.add(new JLabel("attack animation:"));
			List<AnimationType> actions = animationReplacement.animationSet.getAttackAnimations();
			log.debug("actions is : " + actions);
			JComboBox<AnimationType> attackToUse = new JComboBox<>(actions.toArray(new AnimationType[] {})); // TODO remove indenting?
			// TODO add "automatic" option.
			attackToUse.setRenderer(new DefaultListCellRenderer() {
				@Override
				public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
					Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
					if (value == null || !actions.contains(value)) {
						setText("<choose>");
					} else {
						setText(AnimationSet.getDescription(animationReplacement.animationSet, (AnimationType) value));
					}
					return rendererComponent;
				}
			});
			attackToUse.setSelectedItem(animationReplacement.animationtypeReplacement);
			// Update the rule to reflect the dropdown. This is relevant if the list of items in the dropdown does not contain the original replacement.
			animationReplacement.animationtypeReplacement = ((AnimationType) attackToUse.getSelectedItem());
			attackToUse.addActionListener((e) -> {
				plugin.clientThread.invokeLater(() -> {
					animationReplacement.animationtypeReplacement = ((AnimationType) attackToUse.getSelectedItem());
					animationReplacement.auto = -1;
					plugin.handleTransmogSetChange();

					plugin.demoAnimation(animationReplacement.animationSet.getAnimation(animationReplacement.animationtypeReplacement));
				});
			});
			row3.add(attackToUse);
//			animToReplace.setPrototypeDisplayValue("___");
			animationReplacementPanel.add(row3);
		}

		return new EntryPanel(false, true, true, i == size - 1, animationReplacementPanel, () -> {
			swap.animationReplacements.remove(i);
			plugin.clientThread.invoke(plugin::handleTransmogSetChange);
			SwingUtilities.invokeLater(this::rebuild);
		}, () -> {
			plugin.clientThread.invokeLater(() -> {
				swap.addNewAnimationReplacement();
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		}, (enabled) -> {
			plugin.clientThread.invoke(plugin::handleTransmogSetChange);
		});
	}

	private Component createProjectileSwapPanel(Swap swap, int i, int size)
	{
		ProjectileSwap projectileSwap = swap.getProjectileSwaps().get(i);

		JPanel animationReplacementPanel = new JPanel();
		animationReplacementPanel.setBorder(new EmptyBorder(5, 0, 0, 0));
		animationReplacementPanel.setLayout(new BoxLayout(animationReplacementPanel, BoxLayout.Y_AXIS));
		animationReplacementPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		JPanel row1 = new JPanel();
		row1.setLayout(new BoxLayout(row1, BoxLayout.X_AXIS));
		row1.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		JPanel projectileSwapPanel = getRestrictionAndModelSwapPanel();
		projectileSwapPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		projectileSwapPanel.add(createSpellSwapLButton(projectileSwap));
		projectileSwapPanel.add(new JLabel("->"));
		projectileSwapPanel.add(createSpellSwapRButton(projectileSwap));
		projectileSwapPanel.add(createSpellEditPanel(projectileSwap, swap, i));
		row1.add(projectileSwapPanel);
		animationReplacementPanel.add(row1);
		if (pluginPanel.currentlyEditingThisSwap == swap && pluginPanel.currentlyEditingThisProjectileSwapIndex == i) {
			JPanel row = createProjectileEditPanel(projectileSwap);
			animationReplacementPanel.add(row);
		}

		return new EntryPanel(false, true, true, i == size - 1, animationReplacementPanel, () -> {
			swap.getProjectileSwaps().remove(i);
			plugin.clientThread.invoke(plugin::handleTransmogSetChange);
			SwingUtilities.invokeLater(this::rebuild);
		}, () -> {
			plugin.clientThread.invokeLater(() -> {
				swap.addNewProjectileSwap();
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		}, (enabled) -> {
			plugin.clientThread.invoke(plugin::handleTransmogSetChange);
		});
	}

	private JPanel createProjectileEditPanel(ProjectileSwap projectileSwap)
	{
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		ProjectileCast defaultValue = projectileSwap.getToReplaceWith() != null ? projectileSwap.getToReplaceWith() : ProjectileCast.p().build();

		createProjectileEditPanelRow("anim id", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setCastAnimation((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.castAnimation, panel);
		createProjectileEditPanelRow("cast gfx", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setCastGfx((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.castGfx, panel);
		createProjectileEditPanelRow("cast gfx height", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setCastGfxHeight((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.castGfxHeight, panel);
		createProjectileEditPanelRow("hit gfx", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setHitGfx((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.client.getLocalPlayer().createSpotAnim("demo".hashCode(), projectileSwap.toReplaceWithCustom.hitGfx, 0, 0);
		}, defaultValue.hitGfx, panel);
		createProjectileEditPanelRow("hit gfx height", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setHitGfxHeight((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.client.getLocalPlayer().createSpotAnim("demo".hashCode(), projectileSwap.toReplaceWithCustom.hitGfxHeight, 0, 0);
		}, defaultValue.hitGfxHeight, panel);
		createProjectileEditPanelRow("projectile id", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setProjectileId((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.projectileId, panel);
		createProjectileEditPanelRow("arc", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setSlope((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.slope, panel, -64, 64);
		createProjectileEditPanelRow("delay", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setStartMovement((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.startMovement, panel);
		createProjectileEditPanelRow("start offset", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setStartPos((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.startPos, panel);
		createProjectileEditPanelRow("start height", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setStartHeight((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.startHeight, panel, Integer.MIN_VALUE, Integer.MAX_VALUE);
		createProjectileEditPanelRow("end height", ce -> {
			projectileSwap.createCustomIfNull();
			projectileSwap.toReplaceWithCustom.setEndHeight((int) ((JSpinner) ce.getSource()).getValue());
			plugin.saveTransmogSets();
			plugin.demoCast(projectileSwap.getToReplaceWith());
		}, defaultValue.endHeight, panel);
		JButton demo = new JButton("demo");
		demo.addActionListener(al -> plugin.demoCast(projectileSwap.getToReplaceWith()));
		panel.add(demo);
		JButton projectileIdsButton = new JButton("projectile ids");
		projectileIdsButton.addActionListener(al -> {
			new ProjectileIdsFrame().setVisible(true);
		});
		panel.add(projectileIdsButton);

		return panel;
	}

	class ProjectileIdsFrame extends JFrame {
		private JPanel panel;

		private Set<Projectile> lastTickProjectiles = new HashSet<>();

		private boolean debug = false;

		public ProjectileIdsFrame() {
			super("Projectile ids, most recently seen last");
			setSize(800, 500);
			setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			addWindowListener(new WindowAdapter()
			{
				@Override
				public void windowClosing(WindowEvent e)
				{
					plugin.eventBus.unregister(this);
				}
			});
			panel = new JPanel();
			panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
			plugin.eventBus.register(this);
			plugin.registerProjectileIdsFrame(this);
			JPanel squeezePanel = new JPanel(new BorderLayout());
			squeezePanel.add(panel, BorderLayout.NORTH);
			add(squeezePanel);
		}

		@Value
		private class PCwI {
			ProjectileCast pc;
			int i;
		}

		private final List<PCwI> liveProjectiles = new ArrayList<>();
		private final List<PCwI> finishedProjectiles = new ArrayList<>();

		private boolean paused = false;

		public void spell()
		{
			if (paused) return;
			Set<Projectile> thisTickProjectiles = new HashSet<>();
			Projectile projectile = null;
			Client client = plugin.client;
			Player player = client.getLocalPlayer();
			for (Projectile p : client.getProjectiles()) {
				if (!lastTickProjectiles.contains(p)) {
					if (client.getGameCycle() > p.getStartCycle()) continue; // skip already seen projectiles.

					// This is the player's actual location which is what projectiles use as their start position. Player#getX, #getSceneX, etc., do not work here.
					final WorldPoint playerPos = player.getWorldLocation();
					if (playerPos == null) continue;
					final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
					if (playerPosLocal == null) continue;

					if (p.getX1() != playerPosLocal.getX() || p.getY1() != playerPosLocal.getY()) continue;
					projectile = p;
					break;
				}
				thisTickProjectiles.add(p);
			}
			lastTickProjectiles = thisTickProjectiles;

			Actor interacting = player.getInteracting();
			ProjectileCast.ProjectileCastBuilder builder = new ProjectileCast.ProjectileCastBuilder();
			int castAnimation = player.getAnimation();
			int castGfx = player.getGraphic();
			int castGfxHeight = player.getGraphicHeight();
			builder.cast(castAnimation, castGfx, castGfxHeight);
			if (interacting != null) {
				int hitGfx = interacting.getGraphic();
				int hitGfxHeight = interacting.getGraphicHeight();
				builder.hit(hitGfx, hitGfxHeight);
			}
			if (projectile != null) {
				int startMovement = projectile.getStartCycle() - client.getGameCycle();
				int startPos = projectile.getStartPos();
				int startHeight = projectile.getStartHeight();
				int endHeight = projectile.getEndHeight();
				int slope = projectile.getSlope();
				builder.projectile(projectile.getId(), startMovement, startPos, startHeight, endHeight, slope);
			}
			builder.artificial();
			liveProjectiles.add(new PCwI(builder.build(), projectile != null ? projectile.getEndCycle() : client.getGameCycle() + 100));
		}

		@Subscribe
		public void onClientTick(ClientTick e) {
			boolean redraw = false;

			outer:
			for (int j = 0; j < liveProjectiles.size(); j++)
			{
				PCwI liveProjectile = liveProjectiles.get(j);
				if (liveProjectile.i > plugin.client.getGameCycle()) continue;
				liveProjectiles.remove(j);
				j--;
				finishedProjectiles.add(new PCwI(liveProjectile.pc, 0));
				for (int i = 0; i < finishedProjectiles.size(); i++)
				{
					PCwI finishedProjectile = finishedProjectiles.get(i);
					if (finishedProjectile.pc.equals(liveProjectile.pc)) {
						PCwI remove = finishedProjectiles.remove(i);
						finishedProjectiles.add(new PCwI(remove.pc, remove.i + 1));
						redraw = true;
						continue outer;
					}
				}
			}

			if (redraw)
			{
				redraw();
			}
		}

		private void redraw()
		{
			SwingUtilities.invokeLater(() -> {
				panel.removeAll();

				JPanel row = new JPanel();
				row.setLayout(new BoxLayout(row, BoxLayout.X_AXIS));
				JCheckBox pause = new JCheckBox("pause", paused);
				pause.addItemListener(ce -> {
					paused = ((JCheckBox) ce.getSource()).isSelected();
				});
				row.add(pause);
				JCheckBox debugCheckbox = new JCheckBox("author use", debug);
				debugCheckbox.addItemListener(ce -> {
					debug = ((JCheckBox) ce.getSource()).isSelected();
					redraw();
				});
				row.add(debugCheckbox);
				panel.add(row);

				for (PCwI projectile : finishedProjectiles)
				{
					JPanel panel1 = new JPanel();
					panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));
					JButton demo = new JButton("demo");
					ProjectileCast pc = projectile.pc;
					demo.addActionListener(al -> plugin.demoCast(pc));
					panel1.add(demo);
					JButton use = new JButton("use");
					use.addActionListener(al -> {
						if (pluginPanel.currentlyEditingThisSwap == null || pluginPanel.currentlyEditingThisProjectileSwapIndex == -1)
						{
							panel.add(new JLabel("not editing a projectile swap"));
							panel.revalidate();
							panel.repaint();
							return;
						}
						ProjectileSwap projectileSwap = pluginPanel.currentlyEditingThisSwap.getProjectileSwaps().get(pluginPanel.currentlyEditingThisProjectileSwapIndex);
						projectileSwap.createCustomIfNull();
						projectileSwap.toReplaceWithCustom.castAnimation = pc.castAnimation;
						projectileSwap.toReplaceWithCustom.castGfx = pc.castGfx;
						projectileSwap.toReplaceWithCustom.castGfxHeight = pc.castGfxHeight;
						projectileSwap.toReplaceWithCustom.hitGfx = pc.hitGfx;
						projectileSwap.toReplaceWithCustom.hitGfxHeight = pc.hitGfxHeight;
						projectileSwap.toReplaceWithCustom.projectileId = pc.projectileId;
						projectileSwap.toReplaceWithCustom.startMovement = pc.startMovement;
						projectileSwap.toReplaceWithCustom.startPos = pc.startPos;
						projectileSwap.toReplaceWithCustom.startHeight = pc.startHeight;
						projectileSwap.toReplaceWithCustom.endHeight = pc.endHeight;
						projectileSwap.toReplaceWithCustom.slope = pc.slope;
						pluginPanel.rebuild();
					});
					panel1.add(use);
					String s;
					if (debug) {
						s = //".name(\"" + lastSpellCastName + "\")" +
								".cast(" + pc.castAnimation + ", " + (pc.castGfx != -1 ? (pc.castGfx + ", " + pc.castGfxHeight) : "-1, -1") + ")" +
								(pc.hitGfx != -1 ?
									".hitGfx(" + pc.hitGfx + ", " + pc.hitGfxHeight + ")"
									: "") +
								(pc.projectileId != -1 ?
									".projectile(" + pc.projectileId + ", " + pc.startMovement + ", " + pc.startPos + ", " + pc.startHeight + ", " + pc.endHeight + ", " + pc.slope + ")"
									: "") +
								"";
					} else {
						s = "a" + pc.castAnimation + " cg" + pc.castGfx + " cgh" + pc.castGfxHeight +
							" hg" + pc.hitGfx + " hgh" + pc.hitGfxHeight +
							" pid" + pc.projectileId + " a" + pc.slope + " d" + pc.startMovement + " o" + pc.startPos + " sh" + pc.startHeight + " eh" + pc.endHeight
						;
					}
					JTextField label = new JTextField(s + " (seen " + projectile.i + " times)");
					label.setEditable(false);
					panel1.add(label);

					panel.add(panel1);
				}
				panel.revalidate();
				panel.repaint();
			});
		}
	}

	private void createProjectileEditPanelRow(String labelName, ChangeListener cl, int initialValue, JPanel panel)
	{
		createProjectileEditPanelRow(labelName, cl, initialValue, panel, -1, Integer.MAX_VALUE);
	}

	private void createProjectileEditPanelRow(String labelName, ChangeListener cl, int initialValue, JPanel panel, int min, int max)
	{
		JPanel row = new JPanel();
		row.setLayout(new BoxLayout(row, BoxLayout.X_AXIS));
		JLabel label = new JLabel(labelName);
		row.add(label);
		JSpinner input = createIntSpinner(initialValue, cl, min, max);
		row.add(input);
		panel.add(row);
	}

	// Copied from runelite's ConfigPanel class.
	private JSpinner createIntSpinner(int value, ChangeListener onChange, int min, int max)
	{
		// Config may previously have been out of range
		value = Ints.constrainToRange(value, min, max);

		SpinnerModel model = new SpinnerNumberModel(value, min, max, 1);
		JSpinner spinner = new JSpinner(model);
		Component editor = spinner.getEditor();
		JFormattedTextField spinnerTextField = ((JSpinner.DefaultEditor) editor).getTextField();
		int SPINNER_FIELD_WIDTH = 6;
		spinnerTextField.setColumns(SPINNER_FIELD_WIDTH);
		spinner.addChangeListener(onChange);

//		Units units = cid.getUnits();
//		if (units != null)
//		{
//			spinnerTextField.setFormatterFactory(new UnitFormatterFactory(units));
//		}
//
		return spinner;
	}

	private Component createSpellEditPanel(ProjectileSwap projectileSwap, Swap swap, int index)
	{
		JButton button = new JButton("", EDIT_ICON);
		button.addActionListener(e -> {
			if (pluginPanel.currentlyEditingThisSwap == swap && pluginPanel.currentlyEditingThisProjectileSwapIndex == index) {
				pluginPanel.currentlyEditingThisSwap = null;
				pluginPanel.currentlyEditingThisProjectileSwapIndex = -1;
			} else {
				pluginPanel.currentlyEditingThisSwap = swap;
				pluginPanel.currentlyEditingThisProjectileSwapIndex = index;
			}
			rebuild();
		});
		return button;
	}

	private Component createGraphicsEffectPanel(Swap swap, int i, int size)
	{
		GraphicEffect graphicEffect = swap.getGraphicEffects().get(i);

		JPanel animationReplacementPanel = new JPanel();
		animationReplacementPanel.setBorder(new EmptyBorder(5, 0, 0, 0));
		animationReplacementPanel.setLayout(new BoxLayout(animationReplacementPanel, BoxLayout.Y_AXIS));
		animationReplacementPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		JPanel row1 = new JPanel();
		row1.setLayout(new BoxLayout(row1, BoxLayout.X_AXIS));
		row1.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		row1.add(new JLabel("Effect: "));

		JComboBox<GraphicEffect.Type> graphicEffectTypeComboBox = new JComboBox<>(GraphicEffect.Type.values());
		graphicEffectTypeComboBox.setRenderer(new DefaultListCellRenderer() {
			@Override
			public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
				Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
				setText(value == null ? "<choose>" : ((GraphicEffect.Type) value).name());
				return rendererComponent;
			}
		});
		graphicEffectTypeComboBox.setSelectedItem(graphicEffect.type);
		graphicEffectTypeComboBox.setPrototypeDisplayValue(GraphicEffect.Type.SCYTHE_SWING);
		graphicEffectTypeComboBox.addActionListener((e) -> {
			plugin.clientThread.invokeLater(() -> {
				graphicEffect.type = (GraphicEffect.Type) graphicEffectTypeComboBox.getSelectedItem();
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		});
		row1.add(graphicEffectTypeComboBox);
		animationReplacementPanel.add(row1);

		if (graphicEffect.type == GraphicEffect.Type.SCYTHE_SWING) {
			JPanel row2 = new JPanel();
			row2.setLayout(new BoxLayout(row2, BoxLayout.X_AXIS));
			row2.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			row2.add(new JLabel("Color:"));

			Color existing = graphicEffect.color;

			ColorJButton colorPickerBtn;

			boolean alphaHidden = true;

			if (existing == null)
			{
				colorPickerBtn = new ColorJButton("Pick a color", Color.BLACK);
			}
			else
			{
				String colorHex = "#" + (alphaHidden ? ColorUtil.colorToHexCode(existing) : ColorUtil.colorToAlphaHexCode(existing)).toUpperCase();
				colorPickerBtn = new ColorJButton(colorHex, existing);
			}

			colorPickerBtn.setFocusable(false);
			colorPickerBtn.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent e)
				{
					RuneliteColorPicker colorPicker = plugin.colorPickerManager.create(
						SwingUtilities.windowForComponent(TransmogSetPanel.this),
						colorPickerBtn.getColor(),
						"scythe swing color",
						alphaHidden);
					colorPicker.setLocation(getLocationOnScreen());
					colorPicker.setOnColorChange(c ->
					{
						graphicEffect.color = c;
						colorPickerBtn.setColor(c);
						colorPickerBtn.setText("#" + (alphaHidden ? ColorUtil.colorToHexCode(c) : ColorUtil.colorToAlphaHexCode(c)).toUpperCase());
					});
					colorPicker.setOnClose(c -> plugin.clientThread.invokeLater(() -> {
						graphicEffect.color = c;
						plugin.handleTransmogSetChange();
						SwingUtilities.invokeLater(TransmogSetPanel.this::rebuild);
					}));
					colorPicker.setVisible(true);
				}
			});
			row2.add(colorPickerBtn);
			animationReplacementPanel.add(row2);
		}

		return new EntryPanel(false, false, true, i == size - 1, animationReplacementPanel, () -> {
			swap.getGraphicEffects().remove(i);
			plugin.clientThread.invoke(plugin::handleTransmogSetChange);
			SwingUtilities.invokeLater(this::rebuild);
		}, () -> {
			plugin.clientThread.invokeLater(() -> {
				swap.addNewGraphicEffect();
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		}, (enabled) -> {
		});
	}

	private Component createSoundSwapPanel(Swap swap, int i, int size)
	{
		SoundSwap soundSwap = swap.getSoundSwaps().get(i);
		JPanel animationReplacementPanel = new JPanel();
		animationReplacementPanel.setBorder(new EmptyBorder(5, 0, 0, 0));
		animationReplacementPanel.setLayout(new BoxLayout(animationReplacementPanel, BoxLayout.Y_AXIS));
		animationReplacementPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		createProjectileEditPanelRow("Replace sound", ce -> {
			int value = (int) ((JSpinner) ce.getSource()).getValue();
			soundSwap.setToReplace(value);
			plugin.saveTransmogSets();
			plugin.clientThread.invoke(() -> plugin.client.playSoundEffect(value));
		}, soundSwap.getToReplace(), animationReplacementPanel);

		createProjectileEditPanelRow("with", ce -> {
			int value = (int) ((JSpinner) ce.getSource()).getValue();
			soundSwap.setToReplaceWith(value);
			plugin.saveTransmogSets();
			plugin.clientThread.invoke(() -> plugin.client.playSoundEffect(value));
		}, soundSwap.getToReplaceWith(), animationReplacementPanel);

		return new EntryPanel(false, false, true, i == size - 1, animationReplacementPanel, () -> {
			swap.getSoundSwaps().remove(i);
			plugin.clientThread.invoke(plugin::handleTransmogSetChange);
			SwingUtilities.invokeLater(this::rebuild);
		}, () -> {
			plugin.clientThread.invokeLater(() -> {
				swap.addNewSoundSwap();
				plugin.handleTransmogSetChange();
				SwingUtilities.invokeLater(this::rebuild);
			});
		}, (enabled) -> {
		});

	}

	/** Should really use a builder. atm you have to call setitem/setspell and addListeners last, after other fields are set. */
	public class ItemSelectionButton extends JButton {
		String nameWhenEmpty = "None";
		String overlayString = null;
		boolean showNotSign = false;
		public ItemSelectionButton()
		{
			setBackground(ColorScheme.LIGHT_GRAY_COLOR);
			setPreferredSize(new Dimension(35, 35));
			setMaximumSize(new Dimension(35, 35));
			setMinimumSize(new Dimension( 30, 30));
		}
		public void setItem(int itemId, int tooltipId) {
			setItemInternal(itemId, tooltipId, null);
		}
		public void setItem(int itemId, String tooltip) {
			setItemInternal(itemId, -1, tooltip);
		}
		public void setItem(int itemId) {
			setItem(itemId, itemId);
		}
		private void setItemInternal(int itemId, int tooltipItemId, String tooltip) {
			if (itemId == -1)
			{
				setIcon(null);
				setText(nameWhenEmpty);
				setBorder(null);
			} else {
				setText(null);
				plugin.clientThread.invoke(() -> {
					AsyncBufferedImage itemImage = plugin.getItemImage(Constants.getIconId(itemId));
					BufferedImage bankFillerImage = showNotSign ? plugin.getItemImage(ItemID.BANK_FILLER) : null;
					String tooltipString = tooltip == null ? plugin.itemDisplayName(tooltipItemId) : tooltip;
					Runnable processImage = () -> {
						SwingUtilities.invokeLater(() -> {
							if (!showNotSign && overlayString == null) {
								setIcon(new ImageIcon(itemImage));
							} else {
								BufferedImage copy = new BufferedImage(itemImage.getWidth(), itemImage.getHeight(), itemImage.getType());
								Graphics2D graphics = (Graphics2D) copy.getGraphics();
								graphics.drawImage(itemImage, 0, 0, null);
								if (showNotSign)
								{
									AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
									graphics.setComposite(ac);
									graphics.drawImage(bankFillerImage, 0, 0/*, (int) (bankFillerImage.getHeight() * 1.5), (int) (bankFillerImage.getWidth() * 1.5)*/, null);
								}
								if (overlayString != null)
								{
									graphics.drawString(overlayString, 0, 32);
								}
								setIcon(new ImageIcon(copy));
							}

							if (tooltipString != null) {
								setToolTipText(tooltipString);
							}
						});
					};
					// Yes I might end up running it twice, this stupid asyncbufferedimage doesn't let you know if it's loaded and won't run listeners once it's already been loaded.
					itemImage.onLoaded(processImage);
					processImage.run();
				});
			}
		}

		public void addListeners(Runnable onRemove, BiConsumer<SelectionResult, WeaponAnimationReplacerPlugin> onAdd, SearchType type, Swap swap) {
			Runnable deleteItem = () ->
				plugin.clientThread.invoke(() -> {
						onRemove.run();
						plugin.handleTransmogSetChange();
						SwingUtilities.invokeLater(TransmogSetPanel.this::rebuild);
					}
				);
			Runnable addItem = () -> {
				plugin.doItemSearch(
					result -> {
						onAdd.accept(result, plugin);
						plugin.handleTransmogSetChange();
						SwingUtilities.invokeLater(TransmogSetPanel.this::rebuild);
					},
					deleteItem,
					type,
					swap
				);
			};
			this.addActionListener(e -> ((e.getModifiers() & InputEvent.CTRL_MASK) > 0 ? deleteItem : addItem).run());
			JPopupMenu rightClickMenu = new JPopupMenu();
			JMenuItem addItemsMenuItem = new JMenuItem("Add more items");
			addItemsMenuItem.addActionListener(e -> addItem.run());
			rightClickMenu.add(addItemsMenuItem);
			JMenuItem removeItemMenuItem = new JMenuItem("Remove (ctrl-click)");
			removeItemMenuItem.addActionListener(e -> deleteItem.run());
			rightClickMenu.add(removeItemMenuItem);
			this.setComponentPopupMenu(rightClickMenu);
		}

		public void setSpell(int spellId)
		{
			if (spellId == -1)
			{
				setIcon(null);
				setText(nameWhenEmpty);
				setBorder(null);
			} else {
				ProjectileCast projectileCast = Constants.projectilesById[spellId];
				setText(null);

				plugin.clientThread.invoke(() -> {
					BufferedImage spellImage = plugin.getSpellImage(projectileCast);
					setIcon(new ImageIcon(spellImage));
					String name = projectileCast.getName(plugin.itemManager);
					SwingUtilities.invokeLater(() ->
					{
						if (overlayString != null)
						{
							// fill entire button, they're about 32x32. This makes space for more text.
							BufferedImage copy = new BufferedImage(32, 32, spellImage.getType());
							Graphics2D graphics = (Graphics2D) copy.getGraphics();
							graphics.drawImage(spellImage, (32 - spellImage.getWidth()) / 2, (32 - spellImage.getHeight()) / 2, null);
							graphics.drawString(overlayString, 0, 32);
							setIcon(new ImageIcon(copy));
						} else {
							setIcon(new ImageIcon(spellImage));
						}
						setToolTipText(name);
					});
				});
			}
		}
	}

	private JPanel createNamePanel() {
		JPanel nameWrapper = new JPanel(new BorderLayout());
		nameWrapper.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		nameWrapper.setBorder(NAME_BOTTOM_BORDER);

		JPanel nameActions = new JPanel(new BorderLayout(2, 0));
		nameActions.setBorder(new EmptyBorder(-1, 0, 0, 8));
		nameActions.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		IconLabelButton rename;
		rename = new IconLabelButton(EDIT_ICON, EDIT_ICON_HOVER, () -> {}, "Edit name");
		rename.onClick = () -> {
			nameInput.setEditable(true);
			rename.setVisible(false);
			nameInput.getTextField().requestFocus();
			nameInput.getTextField().selectAll();
		};
		rename.setFont(FontManager.getRunescapeSmallFont());
		rename.setForeground(ColorScheme.LIGHT_GRAY_COLOR.darker());
		//nameActions.add(rename, BorderLayout.CENTER);

		nameInput.setText(transmogSet.getName());
		nameInput.setBorder(null);
		nameInput.setEditable(false);
		nameInput.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		nameInput.setPreferredSize(new Dimension(-1, 24));
		nameInput.getTextField().setForeground(Color.WHITE);
		nameInput.getTextField().setBorder(new EmptyBorder(-1, 8, 0, 0));
		nameInput.addKeyListener(new KeyAdapter()
		{
			@Override
			public void keyPressed(KeyEvent e)
			{
				// Get the new value of the field, so you don't miss the last letter.
				if (e.getKeyCode() == KeyEvent.VK_ENTER)
				{
					SwingUtilities.invokeLater(() -> {
						transmogSet.setName(nameInput.getText());
						plugin.saveTransmogSets();
					});
				}
				else if (e.getKeyCode() == KeyEvent.VK_ESCAPE)
				{
					nameInput.setText(transmogSet.getName());
				} else {
					return;
				}

				nameInput.setEditable(false);
				plugin.clientUI.requestFocus(); // Necessary to avoid dotted line outline on next thing in the interface.
				rename.setVisible(true);
			}
		});
		nameInput.getTextField().addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				SwingUtilities.invokeLater(() -> {
					transmogSet.setName(nameInput.getText());
					plugin.saveTransmogSets();
				});
				nameInput.setEditable(false);
				rename.setVisible(true);
			}
		});
		nameInput.getTextField().addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				if (!nameInput.getTextField().isEditable()) {
					plugin.clientThread.invokeLater(() -> {
						transmogSet.setMinimized(!transmogSet.isMinimized());
						SwingUtilities.invokeLater(TransmogSetPanel.this::rebuild);
					});
				}
			}

			@Override
			public void mouseEntered(MouseEvent mouseEvent)
			{
				rename.setForeground(ColorScheme.LIGHT_GRAY_COLOR.darker().darker());
			}

			@Override
			public void mouseExited(MouseEvent mouseEvent)
			{
				rename.setForeground(ColorScheme.LIGHT_GRAY_COLOR.darker());
			}
		});

		nameWrapper.add(nameInput, BorderLayout.CENTER);
		nameWrapper.add(rename, BorderLayout.EAST);
		return new EntryPanel(true, transmogSet.isEnabled(), false, transmogSet.isMinimized(), true, true, true, true, false, nameWrapper, () -> {
			int delete = JOptionPane.showConfirmDialog(pluginPanel,
				"Are you sure you want to delete that?",
				"Delete?", JOptionPane.OK_CANCEL_OPTION);
			if (delete != JOptionPane.YES_OPTION) return;

			plugin.clientThread.invokeLater(() -> {
				plugin.deleteTransmogSet(index);
			});
		}, () -> {
			plugin.clientThread.invokeLater(() -> {
				plugin.addNewTransmogSet(index + 1);
			});
		}, (b) -> {
			plugin.clientThread.invokeLater(() -> {
				transmogSet.setEnabled(b);
				plugin.handleTransmogSetChange();
			});
		});
	}

}
/*
 * Copyright (c) 2019, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.weaponanimationreplacer;

import com.google.common.collect.ImmutableMap;
import com.google.common.primitives.Ints;
import com.google.inject.Inject;
import static com.weaponanimationreplacer.Constants.ARMS_SLOT;
import static com.weaponanimationreplacer.Constants.HAIR_SLOT;
import static com.weaponanimationreplacer.Constants.HiddenSlot;
import com.weaponanimationreplacer.Constants.IdIconNameAndSlot;
import static com.weaponanimationreplacer.Constants.JAW_SLOT;
import static com.weaponanimationreplacer.Constants.NegativeId;
import static com.weaponanimationreplacer.Constants.NegativeIdsMap;
import static com.weaponanimationreplacer.Constants.ShownSlot;
import static com.weaponanimationreplacer.Constants.TriggerItemIds;
import static com.weaponanimationreplacer.Constants.mapNegativeId;
import com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.MODEL_SWAP;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.SPELL_L;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.SPELL_R;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.TRIGGER_ITEM;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.Value;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import static net.runelite.api.ItemID.*;
import net.runelite.api.MenuEntry;
import net.runelite.api.SpriteID;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.events.MenuShouldLeftClick;
import net.runelite.api.kit.KitType;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.ItemQuantityMode;
import net.runelite.api.widgets.JavaScriptCallback;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetPositionMode;
import net.runelite.api.widgets.WidgetSizeMode;
import net.runelite.api.widgets.WidgetTextAlignment;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStats;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.game.chatbox.ChatboxTextInput;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.util.ColorUtil;

@Singleton
public class ChatBoxFilterableSearch extends ChatboxTextInput
{
    private static final int ICON_HEIGHT = 32;
    private static final int ICON_WIDTH = 36;
    private static final int PADDING = 6;
    private static final int RESULTS_PER_PAGE = 24;
    private static final int FONT_SIZE = 16;
    private static final int HOVERED_OPACITY = 128;

    private final ChatboxPanelManager chatboxPanelManager;
    private final ItemManager itemManager;
    private final Client client;
    private final WeaponAnimationReplacerConfig config;
	private final WeaponAnimationReplacerPlugin plugin;

	private final List<Integer> results = new ArrayList<>();
	private final List<String> spells = new ArrayList<>();
	private String tooltipText;
    private int index = -1;

    @Getter
    private Consumer<SelectionResult> onItemSelected;

	private Consumer<Integer> onItemMouseOvered;
	private Runnable onItemDeleted;
	@Getter
	private SearchType searchType;

	public void setType(SearchType searchType)
	{
		this.searchType = searchType;
		mode = 0;
		slotToShow = null;
	}

    @Inject
    private ChatBoxFilterableSearch(ChatboxPanelManager chatboxPanelManager, ClientThread clientThread,
                                    ItemManager itemManager, Client client, WeaponAnimationReplacerConfig config,
									WeaponAnimationReplacerPlugin plugin)
    {
        super(chatboxPanelManager, clientThread);
        this.chatboxPanelManager = chatboxPanelManager;
        this.itemManager = itemManager;
        this.client = client;
        this.config = config;
        this.plugin = plugin;

        lines(1);
        prompt("Item Search");
        onChanged(searchString ->
                clientThread.invokeLater(() ->
                {
                    resetPage();
                    update();
                }));
    }

	@Override
	protected void open()
	{
		resetPage();
		super.open();
	}

	private void resetPage()
	{
		page = 0;
		lastPage = -1;
		filteredPageIndexes.clear();
		filterResults();
	}

	@Override
    protected void update()
    {
        Widget container = chatboxPanelManager.getContainerWidget();
        container.deleteAllChildren();

//		addPromptWidget(container);

		buildEdit(0, 5 + FONT_SIZE, container.getWidth(), FONT_SIZE);

		addSeparator(container);

		createCloseInterfaceWidget(container);
		createDeleteItemWidget(container);
		createPageButtons(container);
		if (searchType == MODEL_SWAP) {
			createHideSlotWidget(container, "Items:", 0, 10, 40);
			createHideSlotWidget(container, " (" + (slotToShow == null ? "all" : slotToShow.name().toLowerCase()) + ")", 0, 50, 70);
			createHideSlotWidget(container, "Hide/Show", 1, 110, 80);
		}

		int x = PADDING;
		int y = PADDING * 3;
		int idx = 0;
		if (searchType == TRIGGER_ITEM || searchType == MODEL_SWAP)
		{
			if (mode == 0) // items
			{
				if (results.size() == 0)
				{
					addText(container, getValue().isEmpty() ? "Type to search items." : "No results.", 0xff000000, 170, 50);
				}
				else
				{
					for (Integer itemId : results)
					{
						ItemComposition itemComposition = itemManager.getItemComposition(itemId);
						int iconId = Constants.getIconId(itemId);
						String name = Constants.getName(itemId, itemComposition.getName());
						if (searchType == TRIGGER_ITEM) {
							IdIconNameAndSlot hiddenSlot = TriggerItemIds.getHiddenSlot(itemId);
							if (hiddenSlot != null) {
								iconId = hiddenSlot.getIconId();
								name = hiddenSlot.getName();
							}
						}
						addItemWidgetItem(
							itemId,
							iconId,
							name,
							container,
							x,
							y,
							se -> {
								// Applies for worn items with no slot, e.g. new items that runelite's wiki scraper hasn't picked up yet.
								if (searchType == TRIGGER_ITEM) {
									Integer slot = triggerItemSlots.get(itemId);
									if (slot != null && slot != plugin.getWikiScrapeSlot(itemId)) {
										itemSelected(itemId, slot);
										return;
									}
								}
								itemSelected(itemId);
							}, idx
						);

						x += ICON_WIDTH + PADDING;
						if (x + ICON_WIDTH >= container.getWidth())
						{
							y += ICON_HEIGHT + PADDING;
							x = PADDING;
						}

						++idx;
					}
				}
			}
			else if (mode == 1)
			{ // hide slots.
				List<Integer> iconIds = new ArrayList<>();
				List<String> names = new ArrayList<>();
				List<Integer> hideSlotIds = new ArrayList<>();
				for (HiddenSlot hiddenSlot : HiddenSlot.values())
				{
					iconIds.add(hiddenSlot.iconIdToShow);
					names.add(hiddenSlot.actionName);
					hideSlotIds.add(mapNegativeId(new NegativeId(NegativeIdsMap.HIDE_SLOT, hiddenSlot.ordinal())));
				}

				iconIds.add(ShownSlot.ARMS.iconIdToShow);
				names.add("Show arms");
				hideSlotIds.add(mapNegativeId(new NegativeId(NegativeIdsMap.SHOW_SLOT, ARMS_SLOT)));
				iconIds.add(ShownSlot.HAIR.iconIdToShow);
				names.add("Show hair");
				hideSlotIds.add(mapNegativeId(new NegativeId(NegativeIdsMap.SHOW_SLOT, HAIR_SLOT)));
				iconIds.add(ShownSlot.JAW.iconIdToShow);
				names.add("Show jaw");
				hideSlotIds.add(mapNegativeId(new NegativeId(NegativeIdsMap.SHOW_SLOT, JAW_SLOT)));
				for (int i = 0; i < iconIds.size(); i++)
				{
					final int finalI = i;
					addItemWidgetItem(
						hideSlotIds.get(i),
						iconIds.get(i),
						names.get(i),
						container,
						x,
						y,
						se -> itemSelected(hideSlotIds.get(finalI)), idx
					);

					x += ICON_WIDTH + PADDING;
					if (x + ICON_WIDTH >= container.getWidth())
					{
						y += ICON_HEIGHT + PADDING;
						x = PADDING;
					}

					++idx;
				}
			}
		} else { // spell
			for (String spell : spells)
			{
				for (ProjectileCast projectile : Constants.projectiles)
				{
					if (!projectile.getName(itemManager).equals(spell)) continue;

					addItemWidget(projectile.getId(), projectile.getItemIdIcon(), projectile.getSpriteIdIcon(), projectile.getName(itemManager), container, x, y, se ->
					{
						itemSelected(projectile.getId());
						chatboxPanelManager.close();
					}, idx);

					x += ICON_WIDTH + PADDING;
					if (x + ICON_WIDTH >= container.getWidth())
					{
						y += ICON_HEIGHT + PADDING;
						x = PADDING;
					}

					++idx;
					break;
				}
			}
		}
	}

	private void createPageButtons(Widget container)
	{
		if (page != lastPage)
		{
			Widget rightArrow = container.createChild(-1, WidgetType.GRAPHIC);
			rightArrow.setSpriteId(SpriteID.FORWARD_ARROW_BUTTON_SMALL);
			rightArrow.setXPositionMode(WidgetPositionMode.ABSOLUTE_RIGHT);
			rightArrow.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
			rightArrow.setOriginalX(90);
			rightArrow.setOriginalY(5);
			rightArrow.setOriginalHeight(20);
			rightArrow.setOriginalWidth(20);
			rightArrow.setBorderType(1);
			rightArrow.setAction(0, tooltipText);
			rightArrow.setHasListener(true);
			rightArrow.setOnMouseOverListener((JavaScriptCallback) ev -> rightArrow.setOpacity(HOVERED_OPACITY));
			rightArrow.setOnMouseLeaveListener((JavaScriptCallback) ev -> rightArrow.setOpacity(0));
			rightArrow.setOnOpListener((JavaScriptCallback) ev -> {
				clientThread.invoke(() -> {
					page++;
					filterResults();
					update();
				});
			});
			rightArrow.revalidate();
		}

		if (lastPage != 0) {
			Widget leftArrow = container.createChild(-1, WidgetType.TEXT);
			leftArrow.setText("" + (page + 1));
			leftArrow.setTextColor(0x000000);
			leftArrow.setFontId(getFontID());
			leftArrow.setXPositionMode(WidgetPositionMode.ABSOLUTE_RIGHT);
			leftArrow.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
			leftArrow.setOriginalX(109 + ((page + 1 >= 10) ? 0 : -5));
			leftArrow.setOriginalY(5);
			leftArrow.setOriginalHeight(20);
			leftArrow.setOriginalWidth(20);
			leftArrow.setBorderType(1);
			leftArrow.setAction(0, tooltipText);
			leftArrow.revalidate();
		}

		if (page != 0)
		{
			Widget leftArrow = container.createChild(-1, WidgetType.GRAPHIC);
			leftArrow.setSpriteId(SpriteID.BACK_ARROW_BUTTON_SMALL);
			leftArrow.setXPositionMode(WidgetPositionMode.ABSOLUTE_RIGHT);
			leftArrow.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
			leftArrow.setOriginalX(130);
			leftArrow.setOriginalY(5);
			leftArrow.setOriginalHeight(20);
			leftArrow.setOriginalWidth(20);
			leftArrow.setBorderType(1);
			leftArrow.setAction(0, tooltipText);
			leftArrow.setHasListener(true);
			leftArrow.setOnMouseOverListener((JavaScriptCallback) ev -> leftArrow.setOpacity(HOVERED_OPACITY));
			leftArrow.setOnMouseLeaveListener((JavaScriptCallback) ev -> leftArrow.setOpacity(0));
			leftArrow.setOnOpListener((JavaScriptCallback) ev -> {
				clientThread.invoke(() -> {
					page--;
					filterResults();
					update();
				});
			});
			leftArrow.revalidate();
		}
	}

	private void addText(Widget container, String text, int textColor, int x, int y)
	{
		Widget item = container.createChild(-1, WidgetType.TEXT);
		item.setTextColor(textColor);
		item.setText(text);
		item.setFontId(getFontID());
		item.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
		item.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		item.setOriginalX(x);
		item.setOriginalY(y);
		item.setOriginalHeight(40);
		item.setOriginalWidth(1000);
		item.setBorderType(1);
		item.revalidate();
	}

	@Value
	public static final class SelectionResult {
		public final int itemId;
		public final int slot;
	}

	private void itemSelected(int itemId)
	{
		itemSelected(itemId, -1);
	}

	private void itemSelected(int itemId, int slot)
	{
		if (onItemSelected != null) onItemSelected.accept(new SelectionResult(itemId, slot));
	}

	private void addItemWidgetSprite(int id, int spriteId, String name, Widget container, int x, int y, JavaScriptCallback onOpListener, int idx)
	{
		addItemWidget(id, -1, spriteId, name, container, x, y, onOpListener, idx);
	}

	private void addItemWidgetItem(int id, int iconId, String name, Widget container, int x, int y, JavaScriptCallback onOpListener, int idx)
	{
		addItemWidget(id, iconId, -1, name, container, x, y, onOpListener, idx);
	}

	private void addItemWidget(int id, int iconId, int spriteId, String name, Widget container, int x, int y, JavaScriptCallback onOpListener, int idx)
	{
		Widget item = container.createChild(-1, WidgetType.GRAPHIC);
		item.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
		item.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		item.setOriginalX(x);
		item.setOriginalY(y + FONT_SIZE * 2);
		item.setOriginalHeight(ICON_HEIGHT);
		item.setOriginalWidth(ICON_WIDTH);
		item.setName(JagexColors.MENU_TARGET_TAG + name);
		if (iconId != -1) item.setItemId(iconId);
		else if (spriteId != -1) item.setSpriteId(spriteId);
		item.setItemQuantity(10000);
		item.setItemQuantityMode(ItemQuantityMode.NEVER);
		item.setBorderType(1);
		item.setAction(0, tooltipText);
		item.setHasListener(true);

		if (index == idx)
		{
			item.setOpacity(HOVERED_OPACITY);
		}
		else
		{
			item.setOnMouseOverListener((JavaScriptCallback) ev -> {
				item.setOpacity(HOVERED_OPACITY);
				if (onItemMouseOvered != null) onItemMouseOvered.accept(id);
			});
			item.setOnMouseLeaveListener((JavaScriptCallback) ev -> {
				item.setOpacity(0);
				if (onItemMouseOvered != null) onItemMouseOvered.accept(-1);
			});
		}

		item.setOnOpListener(onOpListener);
		item.revalidate();
	}

	private void addSeparator(Widget container)
	{
		Widget separator = container.createChild(-1, WidgetType.LINE);
		separator.setOriginalX(0);
		separator.setOriginalY(8 + (FONT_SIZE * 2));
		separator.setXPositionMode(WidgetPositionMode.ABSOLUTE_CENTER);
		separator.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		separator.setOriginalHeight(0);
		separator.setOriginalWidth(16);
		separator.setWidthMode(WidgetSizeMode.MINUS);
		separator.setTextColor(0x666666);
		separator.revalidate();
	}

	private void addPromptWidget(Widget container)
	{
		Widget promptWidget = container.createChild(-1, WidgetType.TEXT);
		promptWidget.setText(getPrompt());
		promptWidget.setTextColor(0x800000);
		promptWidget.setFontId(getFontID());
		promptWidget.setOriginalX(0);
		promptWidget.setOriginalY(5);
		promptWidget.setXPositionMode(WidgetPositionMode.ABSOLUTE_CENTER);
		promptWidget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		promptWidget.setOriginalHeight(FONT_SIZE);
		promptWidget.setXTextAlignment(WidgetTextAlignment.CENTER);
		promptWidget.setYTextAlignment(WidgetTextAlignment.CENTER);
		promptWidget.setWidthMode(WidgetSizeMode.MINUS);
		promptWidget.revalidate();
	}

	private Widget createDeleteItemWidget(Widget container)
	{
		Widget item = container.createChild(-1, WidgetType.GRAPHIC);
		item.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
		item.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		item.setOriginalX(430);
		item.setOriginalY(5);
		item.setOriginalHeight(ICON_HEIGHT);
		item.setOriginalWidth(ICON_WIDTH);
		ItemComposition itemComposition = itemManager.getItemComposition(ItemID.BANK_FILLER);
		item.setName("delete");
		item.setItemId(itemComposition.getId());
		item.setItemQuantity(10000);
		item.setItemQuantityMode(ItemQuantityMode.NEVER);
		item.setBorderType(1);
		item.setAction(0, tooltipText);
		item.setHasListener(true);

		item.setOnMouseOverListener((JavaScriptCallback) ev -> item.setOpacity(HOVERED_OPACITY));
		item.setOnMouseLeaveListener((JavaScriptCallback) ev -> item.setOpacity(0));

		item.setOnOpListener((JavaScriptCallback) ev -> {
			onItemDeleted.run();
			chatboxPanelManager.close();
		});

		item.revalidate();

		return item;
	}

	private Widget createCloseInterfaceWidget(Widget container)
	{
		Widget item = container.createChild(-1, WidgetType.TEXT);
		item.setTextColor(0xff000000);
		item.setFontId(getFontID());
		item.setText("X");
		item.setName("Close (Esc");
		item.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
		item.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		item.setOriginalX(470); // Further left than it should be to prevent scrolling up the chat.
		item.setOriginalY(2);
		item.setOriginalHeight(ICON_HEIGHT);
		item.setOriginalWidth(15);
		item.setBorderType(1);
		item.setAction(0, tooltipText);
		item.setHasListener(true);

		item.setOnMouseOverListener((JavaScriptCallback) ev -> item.setOpacity(HOVERED_OPACITY));
		item.setOnMouseLeaveListener((JavaScriptCallback) ev -> item.setOpacity(0));

		item.setOnOpListener((JavaScriptCallback) ev -> {
			chatboxPanelManager.close();
		});

		item.revalidate();

		return item;
	}

	@Getter
	private int mode = 0; // 0 items, 1 hide slots.
	/** Slot to filter when showing model swaps. Null indicates to show all items. */
	private KitType slotToShow = null;

	private Widget createHideSlotWidget(Widget container, String name, int modeToSwitchTo, int x, int width)
	{
		Widget item = container.createChild(-1, WidgetType.TEXT);
		item.setTextColor(mode == modeToSwitchTo ? 0xffaa0000 : 0xff000000);
		item.setText(name);
		item.setFontId(getFontID());
		item.setXPositionMode(WidgetPositionMode.ABSOLUTE_LEFT);
		item.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
		item.setOriginalX(x);
		item.setOriginalY(5);
		item.setOriginalHeight(ICON_HEIGHT);
		item.setOriginalWidth(width);
//		ItemComposition itemComposition = itemManager.getItemComposition(ItemID.BANK_FILLER);
		item.setName(name);
//		item.setItemId(itemComposition.getId());
//		item.setItemQuantity(10000);
//		item.setItemQuantityMode(ItemQuantityMode.NEVER);
		item.setBorderType(1);
		item.setAction(0, tooltipText);
		item.setHasListener(true);

		item.setOnMouseOverListener((JavaScriptCallback) ev -> item.setTextColor(mode == modeToSwitchTo ? 0xffaa0000 : 0xff666666));
		item.setOnMouseLeaveListener((JavaScriptCallback) ev -> item.setTextColor(mode == modeToSwitchTo ? 0xffaa0000 : 0xff000000));

		item.setOnOpListener((JavaScriptCallback) ev ->
		{
			mode = modeToSwitchTo;
			update();
		});

		item.revalidate();

		return item;
	}

	@Override
	public void keyPressed(KeyEvent ev)
	{
		if (!chatboxPanelManager.shouldTakeInput())
		{
			return;
		}

		switch (ev.getKeyCode())
		{
			case KeyEvent.VK_ENTER:
				ev.consume();
				if (index > -1)
				{
					itemSelected(results.get(index));
                }
                break;
            case KeyEvent.VK_TAB:
            case KeyEvent.VK_RIGHT:
                ev.consume();
                if (!results.isEmpty())
                {
                    index++;
                    if (index >= results.size())
                    {
                        index = 0;
                    }
                    clientThread.invokeLater(this::update);
                }
                break;
            case KeyEvent.VK_LEFT:
                ev.consume();
                if (!results.isEmpty())
                {
                    index--;
                    if (index < 0)
                    {
                        index = results.size() - 1;
                    }
                    clientThread.invokeLater(this::update);
                }
                break;
            case KeyEvent.VK_UP:
                ev.consume();
                if (results.size() >= (RESULTS_PER_PAGE / 2))
                {
                    index -= RESULTS_PER_PAGE / 2;
                    if (index < 0)
                    {
                        if (results.size() == RESULTS_PER_PAGE)
                        {
                            index += results.size();
                        }
                        else
                        {
                            index += RESULTS_PER_PAGE;
                        }
                        index = Ints.constrainToRange(index, 0, results.size() - 1);
                    }

                    clientThread.invokeLater(this::update);
                }
                break;
            case KeyEvent.VK_DOWN:
                ev.consume();
                if (results.size() >= (RESULTS_PER_PAGE / 2))
                {
                    index += RESULTS_PER_PAGE / 2;
                    if (index >= RESULTS_PER_PAGE)
                    {
                        if (results.size() == RESULTS_PER_PAGE)
                        {
                            index -= results.size();
                        }
                        else
                        {
                            index -= RESULTS_PER_PAGE;
                        }
                        index = Ints.constrainToRange(index, 0, results.size() - 1);
                    }

                    clientThread.invokeLater(this::update);
                }
                break;
            default:
                super.keyPressed(ev);
        }
    }

    @Override
    protected void close()
    {
    	if (onItemMouseOvered != null) onItemMouseOvered.accept(-1);

        // Clear search string when closed
        value("");
        results.clear();
        spells.clear();
        index = -1;
        mode = 0;
        searchType = null;
        super.close();
    }

    @Override
    @Deprecated
    public ChatboxTextInput onDone(Consumer<String> onDone)
    {
        throw new UnsupportedOperationException();
    }

    private int page = 0;
	private int lastPage = -1;
	/** For faster searches on pages past the first. */
	private Map<Integer, Integer> filteredPageIndexes = new HashMap<>();

	private Map<Integer, Integer> triggerItemSlots = new HashMap<>();

    private void filterResults()
    {
        results.clear();
        spells.clear();
        index = -1;

        String search = getValue().toLowerCase();
		if (search.isEmpty() && (!(mode == 0 && slotToShow != null)))
		{
        	if (searchType == TRIGGER_ITEM) {
        		// Add equipped items to the list for easy access.
				ItemContainer itemContainer = client.getItemContainer(InventoryID.EQUIPMENT);
				Item[] items = itemContainer == null ? new Item[0] : itemContainer.getItems();
				triggerItemSlots.clear();
				for (int i = 0; i < items.length; i++)
				{
					if (i == EquipmentInventorySlot.RING.getSlotIdx() || i == EquipmentInventorySlot.AMMO.getSlotIdx()) continue;

					int itemId = items[i].getId();
					if (itemId == -1) {
						itemId = -1_000_000 - KitType.values()[i].getIndex();
					} else {
						itemId = itemManager.canonicalize(items[i].getId());
					}

					ItemComposition itemComposition = itemManager.getItemComposition(itemId);
					triggerItemSlots.put(itemComposition.getId(), i);
					results.add(itemId);
				}
				lastPage = 0; // Do not show page change arrows.
				return;
			} else if (searchType == MODEL_SWAP) {
				lastPage = 0; // Do not show page change arrows.
				return;
			} else if (searchType == SPELL_L) {

			} else if (searchType == SPELL_R) {

			}
        }

        // For searching by item id.
		Integer integer = -1;
		try
		{
			integer = Integer.valueOf(search);
		} catch (NumberFormatException e) {
			// that's fine.
		}

		if (searchType == TRIGGER_ITEM || searchType == MODEL_SWAP)
		{
			int start = filteredPageIndexes.getOrDefault(page - 1, 0);
			boolean showUnequippableItems = searchType == MODEL_SWAP && config.showUnequippableItems();
			if (searchType == TRIGGER_ITEM) {
				for (IdIconNameAndSlot hiddenSlot : TriggerItemIds.EMPTY_SLOTS)
				{
					if (hiddenSlot.getName().contains(search)) {
						if (results.size() == RESULTS_PER_PAGE)
						{
							filteredPageIndexes.put(page, hiddenSlot.getIconId());
							return; // skip the lastPage setting, since there is at least 1 item on the next page.
						}
						results.add(hiddenSlot.getIconId());
					}
				}
			}
			for (int itemId = start; itemId < client.getItemCount(); itemId++)
			{
				ItemComposition itemComposition = getItemCompositionIfUsable(itemId, showUnequippableItems);
				if (itemComposition == null) continue;

				if (!matchesSlotFilter(itemId)) continue;

				String name = Constants.getName(itemId, itemComposition.getName()).toLowerCase();
				if (itemId == integer || name.contains(search))
				{
					if (results.size() == RESULTS_PER_PAGE)
					{
						filteredPageIndexes.put(page, itemId);
						return; // skip the lastPage setting, since there is at least 1 item on the next page.
					}
					results.add(itemComposition.getId());
				}
			}
			// We ran out of items to search.
			lastPage = page;
		} else { // is spell.
			int start = filteredPageIndexes.getOrDefault(page - 1, 0);
			for (int projectileIndex = start; projectileIndex < Constants.projectiles.size(); projectileIndex++)
			{
				ProjectileCast projectile = Constants.projectiles.get(projectileIndex);
				if (searchType == SPELL_L && projectile.isArtificial()) continue;
				String projectileName = projectile.getName(itemManager);
				if (projectileName.toLowerCase().contains(search) && !spells.contains(projectileName))
				{
					if (spells.size() == RESULTS_PER_PAGE)
					{
						filteredPageIndexes.put(page, projectileIndex);
						return; // skip the lastPage setting, since there is at least 1 item on the next page.
					}
					spells.add(projectileName);
				}
			}
			// We ran out of items to search.
			lastPage = page;
		}
    }

	private boolean matchesSlotFilter(int itemId)
	{
		boolean matchesSlotFilter = false;
		if (slotToShow == null) {
			matchesSlotFilter = true;
		} else {
			Integer slot = plugin.getSlotForNonNegativeModelId(itemId);
			if (slot != null && slot <= 11 && KitType.values()[slot] == slotToShow) {
				matchesSlotFilter = true;
			}
		}
		return matchesSlotFilter;
	}

	private ItemComposition getItemCompositionIfUsable(int i, boolean showUnequippableItems)
	{
		ItemComposition itemComposition = itemManager.getItemComposition(i);

		// skip notes, placeholders, and weight-reducing item equipped version.
		if (itemComposition.getNote() != -1 || itemComposition.getPlaceholderTemplateId() != -1 || WEIGHT_REDUCING_ITEMS.get(i) != null)
		{
			return null;
		}

		Integer slotOverride = Constants.SLOT_OVERRIDES.get(i);
		if (slotOverride != null)
		{
			return slotOverride == -1 ? null : itemComposition;
		}

		ItemStats itemStats = itemManager.getItemStats(itemComposition.getId());
		if (!showUnequippableItems)
		{
			if (itemStats == null || !itemStats.isEquipable())
			{
				return null;
			}
			int slot = itemStats.getEquipment().getSlot();
			if (slot == EquipmentInventorySlot.RING.getSlotIdx() || slot == EquipmentInventorySlot.AMMO.getSlotIdx())
			{
				return null;
			}
		}
		return itemComposition;
	}

	@Subscribe
	public void onMenuShouldLeftClick(MenuShouldLeftClick e) {
		for (MenuEntry menuEntry : client.getMenuEntries())
		{
			Widget widget = menuEntry.getWidget();
			if (widget == null || widget.getId() != ComponentID.CHATBOX_CONTAINER)
			{
				continue;
			}

			// items that do not have a default/known equip slot should require the user to select a slot, so force the
			// right-click menu open.
			if (getSearchType() == MODEL_SWAP && getMode() == 0 && widget.getItemId() != -1 && !menuEntry.getTarget().equals("delete") && plugin.getMySlot(widget.getItemId()) == null)
			{
				e.setForceRightClick(true);
				return;
			}
			if (widget.getText().startsWith(" ("))
			{
				e.setForceRightClick(true);
				return;
			}
		}
	}

	@Subscribe
	public void onMenuOpened(MenuOpened e) {
    	// there is a limit of 10 actions on a widget which is less than we need, so add menu entries here instead.
		for (MenuEntry menuEntry : e.getMenuEntries())
		{
			Widget widget = menuEntry.getWidget();
			if (widget == null || widget.getId() != ComponentID.CHATBOX_CONTAINER) continue;

			if (widget.getText().startsWith(" ("))
			{
				client.createMenuEntry(1).setOption("Show all").onClick(me -> {
					mode = 0;
					slotToShow = null;
					resetPage();
					update();
				});
				for (EquipmentInventorySlot slot : EquipmentInventorySlot.values())
				{
					if (slot == EquipmentInventorySlot.AMMO || slot == EquipmentInventorySlot.RING) continue;

					client.createMenuEntry(1).setOption("Show only").setTarget(ColorUtil.wrapWithColorTag(slot.name().toLowerCase(), new Color(0xff9040))).onClick(me -> {
						mode = 0;
						slotToShow = KitType.values()[slot.getSlotIdx()];
						resetPage();
						update();
					});
				}
				MenuEntry[] newMenuEntries = Arrays.stream(client.getMenuEntries()).filter(me -> !me.getOption().equals(tooltipText)).toArray(i -> new MenuEntry[i]);
				client.setMenuEntries(newMenuEntries);
				return;
			}
			else if (getSearchType() == MODEL_SWAP && getMode() == 0 && widget.getItemId() != -1)
			{
				// If the item has no default/known equip slot, remove the default option since there is no
				// default. I cannot just not add this option to the widget because then there would be no menu options and
				// neither menushouldleftclick nor this one will get called.
				if (!menuEntry.getTarget().equals("delete") && plugin.getMySlot(widget.getItemId()) == null)
				{
					MenuEntry[] newMenuEntries = Arrays.stream(client.getMenuEntries()).filter(me -> !me.getOption().equals(tooltipText)).toArray(i -> new MenuEntry[i]);
					client.setMenuEntries(newMenuEntries);
				}

				ItemComposition itemComposition = itemManager.getItemComposition(widget.getItemId());
				for (KitType value : KitType.values())
				{
					client.createMenuEntry(1)
						.setTarget(ColorUtil.wrapWithColorTag(itemComposition.getName(), new Color(0xff9040)))
						.setOption(value.name())
						.onClick(me -> {
							itemSelected(widget.getItemId(), value.ordinal());
						})
					;
				}
				return;
			}
		}
	}

	public ChatBoxFilterableSearch onItemSelected(Consumer<SelectionResult> onItemSelected)
    {
        this.onItemSelected = onItemSelected;
        return this;
    }

	public ChatBoxFilterableSearch onItemMouseOvered(Consumer<Integer> onItemMouseOvered)
	{
		this.onItemMouseOvered = onItemMouseOvered;
		return this;
	}

	public ChatBoxFilterableSearch onItemDeleted(Runnable onItemDeleted)
	{
		this.onItemDeleted = onItemDeleted;
		return this;
	}

	public ChatBoxFilterableSearch tooltipText(final String text)
    {
        tooltipText = text;
        return this;
    }

    // Copied from ItemManager.
	private static final ImmutableMap<Integer, Integer> WEIGHT_REDUCING_ITEMS = ImmutableMap.<Integer, Integer>builder().
		put(BOOTS_OF_LIGHTNESS_89, BOOTS_OF_LIGHTNESS).
		put(PENANCE_GLOVES_10554, PENANCE_GLOVES).

		put(GRACEFUL_HOOD_11851, GRACEFUL_HOOD).
		put(GRACEFUL_CAPE_11853, GRACEFUL_CAPE).
		put(GRACEFUL_TOP_11855, GRACEFUL_TOP).
		put(GRACEFUL_LEGS_11857, GRACEFUL_LEGS).
		put(GRACEFUL_GLOVES_11859, GRACEFUL_GLOVES).
		put(GRACEFUL_BOOTS_11861, GRACEFUL_BOOTS).
		put(GRACEFUL_HOOD_13580, GRACEFUL_HOOD_13579).
		put(GRACEFUL_CAPE_13582, GRACEFUL_CAPE_13581).
		put(GRACEFUL_TOP_13584, GRACEFUL_TOP_13583).
		put(GRACEFUL_LEGS_13586, GRACEFUL_LEGS_13585).
		put(GRACEFUL_GLOVES_13588, GRACEFUL_GLOVES_13587).
		put(GRACEFUL_BOOTS_13590, GRACEFUL_BOOTS_13589).
		put(GRACEFUL_HOOD_13592, GRACEFUL_HOOD_13591).
		put(GRACEFUL_CAPE_13594, GRACEFUL_CAPE_13593).
		put(GRACEFUL_TOP_13596, GRACEFUL_TOP_13595).
		put(GRACEFUL_LEGS_13598, GRACEFUL_LEGS_13597).
		put(GRACEFUL_GLOVES_13600, GRACEFUL_GLOVES_13599).
		put(GRACEFUL_BOOTS_13602, GRACEFUL_BOOTS_13601).
		put(GRACEFUL_HOOD_13604, GRACEFUL_HOOD_13603).
		put(GRACEFUL_CAPE_13606, GRACEFUL_CAPE_13605).
		put(GRACEFUL_TOP_13608, GRACEFUL_TOP_13607).
		put(GRACEFUL_LEGS_13610, GRACEFUL_LEGS_13609).
		put(GRACEFUL_GLOVES_13612, GRACEFUL_GLOVES_13611).
		put(GRACEFUL_BOOTS_13614, GRACEFUL_BOOTS_13613).
		put(GRACEFUL_HOOD_13616, GRACEFUL_HOOD_13615).
		put(GRACEFUL_CAPE_13618, GRACEFUL_CAPE_13617).
		put(GRACEFUL_TOP_13620, GRACEFUL_TOP_13619).
		put(GRACEFUL_LEGS_13622, GRACEFUL_LEGS_13621).
		put(GRACEFUL_GLOVES_13624, GRACEFUL_GLOVES_13623).
		put(GRACEFUL_BOOTS_13626, GRACEFUL_BOOTS_13625).
		put(GRACEFUL_HOOD_13628, GRACEFUL_HOOD_13627).
		put(GRACEFUL_CAPE_13630, GRACEFUL_CAPE_13629).
		put(GRACEFUL_TOP_13632, GRACEFUL_TOP_13631).
		put(GRACEFUL_LEGS_13634, GRACEFUL_LEGS_13633).
		put(GRACEFUL_GLOVES_13636, GRACEFUL_GLOVES_13635).
		put(GRACEFUL_BOOTS_13638, GRACEFUL_BOOTS_13637).
		put(GRACEFUL_HOOD_13668, GRACEFUL_HOOD_13667).
		put(GRACEFUL_CAPE_13670, GRACEFUL_CAPE_13669).
		put(GRACEFUL_TOP_13672, GRACEFUL_TOP_13671).
		put(GRACEFUL_LEGS_13674, GRACEFUL_LEGS_13673).
		put(GRACEFUL_GLOVES_13676, GRACEFUL_GLOVES_13675).
		put(GRACEFUL_BOOTS_13678, GRACEFUL_BOOTS_13677).
		put(GRACEFUL_HOOD_21063, GRACEFUL_HOOD_21061).
		put(GRACEFUL_CAPE_21066, GRACEFUL_CAPE_21064).
		put(GRACEFUL_TOP_21069, GRACEFUL_TOP_21067).
		put(GRACEFUL_LEGS_21072, GRACEFUL_LEGS_21070).
		put(GRACEFUL_GLOVES_21075, GRACEFUL_GLOVES_21073).
		put(GRACEFUL_BOOTS_21078, GRACEFUL_BOOTS_21076).
		put(GRACEFUL_HOOD_24745, GRACEFUL_HOOD_24743).
		put(GRACEFUL_CAPE_24748, GRACEFUL_CAPE_24746).
		put(GRACEFUL_TOP_24751, GRACEFUL_TOP_24749).
		put(GRACEFUL_LEGS_24754, GRACEFUL_LEGS_24752).
		put(GRACEFUL_GLOVES_24757, GRACEFUL_GLOVES_24755).
		put(GRACEFUL_BOOTS_24760, GRACEFUL_BOOTS_24758).
		put(GRACEFUL_HOOD_25071, GRACEFUL_HOOD_25069).
		put(GRACEFUL_CAPE_25074, GRACEFUL_CAPE_25072).
		put(GRACEFUL_TOP_25077, GRACEFUL_TOP_25075).
		put(GRACEFUL_LEGS_25080, GRACEFUL_LEGS_25078).
		put(GRACEFUL_GLOVES_25083, GRACEFUL_GLOVES_25081).
		put(GRACEFUL_BOOTS_25086, GRACEFUL_BOOTS_25084).
		put(GRACEFUL_HOOD_27446, GRACEFUL_HOOD_27444).
		put(GRACEFUL_CAPE_27449, GRACEFUL_CAPE_27447).
		put(GRACEFUL_TOP_27452, GRACEFUL_TOP_27450).
		put(GRACEFUL_LEGS_27455, GRACEFUL_LEGS_27453).
		put(GRACEFUL_GLOVES_27458, GRACEFUL_GLOVES_27456).
		put(GRACEFUL_BOOTS_27461, GRACEFUL_BOOTS_27459).

		put(MAX_CAPE_13342, MAX_CAPE).

		put(SPOTTED_CAPE_10073, SPOTTED_CAPE).
		put(SPOTTIER_CAPE_10074, SPOTTIER_CAPE).

		put(AGILITY_CAPET_13341, AGILITY_CAPET).
		put(AGILITY_CAPE_13340, AGILITY_CAPE).
		build();
}

/*
 * Copyright (c) 2020, Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.weaponanimationreplacer;

import static com.weaponanimationreplacer.Constants.ARMS_SLOT;
import static com.weaponanimationreplacer.Constants.HAIR_SLOT;
import static com.weaponanimationreplacer.Constants.HEAD_SLOT;
import static com.weaponanimationreplacer.Constants.HIDES_HAIR;
import static com.weaponanimationreplacer.Constants.HIDES_JAW;
import static com.weaponanimationreplacer.Constants.JAW_SLOT;
import static com.weaponanimationreplacer.Constants.SHOWS_ARMS;
import static com.weaponanimationreplacer.Constants.TORSO_SLOT;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.GROUP_NAME;
import java.util.Arrays;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.PlayerComposition;
import static net.runelite.api.PlayerComposition.ITEM_OFFSET;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.RuneScapeProfileChanged;

@Singleton
@Slf4j
public class TransmogrificationManager
{
	public static final int SHOW_SLOT = -1;

	@Inject private Client client;
	@Inject private ConfigManager configManager;
	@Inject private WeaponAnimationReplacerPlugin plugin;

    private int[] currentActualState;
    private int transmogHash = 0;

	private int baseArmsKit = -1;
	private int baseHairKit = -1;
	private int baseJawKit = -1;

	public void startUp()
	{
		onRuneScapeProfileChanged(null);
	}

    public void shutDown()
    {
        removeTransmog();
        currentActualState = null;
    }

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged e) {
		Integer baseArmsKit = configManager.getRSProfileConfiguration(GROUP_NAME, "baseArmsKit", Integer.class);
		this.baseArmsKit = baseArmsKit != null ? baseArmsKit : -1;
		Integer baseHairKit = configManager.getRSProfileConfiguration(GROUP_NAME, "baseHairKit", Integer.class);
		this.baseHairKit = baseHairKit != null ? baseHairKit : -1;
		Integer baseJawKit = configManager.getRSProfileConfiguration(GROUP_NAME, "baseJawKit", Integer.class);
		this.baseJawKit = baseJawKit != null ? baseJawKit : -1;
	}

	/**
     * To be called when the kits are force updated by Jagex code
     */
    public void reapplyTransmog()
    {
		final int currentHash = Arrays.hashCode(client.getLocalPlayer().getPlayerComposition().getEquipmentIds());
		if (currentHash == transmogHash)
		{
			return;
		}

		currentActualState = null;
		changeTransmog();
    }

	void changeTransmog()
    {
        if (client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null)
        {
            return;
        }

        Player player = client.getLocalPlayer();
        int[] kits = player.getPlayerComposition().getEquipmentIds();
		if (currentActualState != null)
		{
			// restore the player to their actual state.
			System.arraycopy(currentActualState, 0, kits, 0, kits.length);
		}
		else
		{
			storeState(kits);
		}

		Integer[] swaps = plugin.getApplicableModelSwaps();

		// show slots.
		Integer arms = swaps[ARMS_SLOT];
		if (arms != null && arms == SHOW_SLOT) {
        	swaps[ARMS_SLOT] = getBaseArms() - ITEM_OFFSET;
		}
		Integer hair = swaps[HAIR_SLOT];
		if (hair != null && hair == SHOW_SLOT) {
			swaps[HAIR_SLOT] = getBaseHair() - ITEM_OFFSET;
		}
		Integer jaw = swaps[JAW_SLOT];
		if (jaw != null && jaw == SHOW_SLOT) {
			swaps[JAW_SLOT] = getBaseJaw() - ITEM_OFFSET;
		}

		// auto-apply arms/hair/jaw.
		Integer torso = swaps[TORSO_SLOT];
		if (torso != null)
		{
			if (swaps[ARMS_SLOT] == null)
			{
				swaps[ARMS_SLOT] = SHOWS_ARMS.contains(torso) ? getBaseArms() - ITEM_OFFSET : 0;
			}
		}
		Integer head = swaps[HEAD_SLOT];
		if (head != null)
		{
			if (swaps[HAIR_SLOT] == null)
			{
				swaps[HAIR_SLOT] = !HIDES_HAIR.contains(head) ? getBaseHair() - ITEM_OFFSET : 0;
			}
			if (swaps[JAW_SLOT] == null && kits[JAW_SLOT] <= ITEM_OFFSET) // Do not replace people's blue icons.
			{
				swaps[JAW_SLOT] = !HIDES_JAW.contains(head) ? getBaseJaw() - ITEM_OFFSET : 0;
			}
		}

		for (int i = 0; i < swaps.length; i++)
		{
			if (swaps[i] != null) {
				kits[i] = swaps[i] + ITEM_OFFSET;
			}
		}

		player.getPlayerComposition().setHash();

		transmogHash = Arrays.hashCode(kits);
    }

	private void storeState(int[] kits)
	{
		int arms = kits[ARMS_SLOT];
		if (arms != 0 && arms != baseArmsKit) {
			baseArmsKit = arms;
			configManager.setRSProfileConfiguration(GROUP_NAME, "baseArmsKit", baseArmsKit);
		}
		int hair = kits[HAIR_SLOT];
		if (hair != 0 && hair != baseHairKit) {
			baseHairKit = hair;
			configManager.setRSProfileConfiguration(GROUP_NAME, "baseHairKit", baseHairKit);
		}
		int jaw = kits[JAW_SLOT];
		if (jaw != 0 && jaw != baseJawKit) {
			baseJawKit = jaw;
			configManager.setRSProfileConfiguration(GROUP_NAME, "baseJawKit", baseJawKit);
		}
		currentActualState = kits.clone();
	}

	void removeTransmog()
    {
        if (currentActualState == null)
        {
            return;
        }
        PlayerComposition comp = client.getLocalPlayer().getPlayerComposition();
        int[] kits = comp.getEquipmentIds();
        System.arraycopy(currentActualState, 0, kits, 0, kits.length);
        comp.setHash();
    }

	private static final int DEFAULT_MALE_ARMS = 256 + 28;
	private static final int DEFAULT_FEMALE_ARMS = 256 + 64;
	private static final int DEFAULT_MALE_HAIR = 256 + 0;
	private static final int DEFAULT_FEMALE_HAIR = 256 + 45;
	private static final int DEFAULT_MALE_JAW = 256 + 14;
	private static final int DEFAULT_FEMALE_JAW = 552;

	private int getBaseJaw()
	{
		return getBaseModel(baseJawKit, DEFAULT_FEMALE_JAW, DEFAULT_MALE_JAW);
	}

	private int getBaseHair()
	{
		return getBaseModel(baseHairKit, DEFAULT_FEMALE_HAIR, DEFAULT_MALE_HAIR);
	}

	private int getBaseArms()
	{
		return getBaseModel(baseArmsKit, DEFAULT_FEMALE_ARMS, DEFAULT_MALE_ARMS);
	}

	private int getBaseModel(int baseKit, int defaultFemaleModel, int defaultMaleModel)
	{
		return baseKit != -1 ?
			baseKit :
			(client.getLocalPlayer().getPlayerComposition().getGender() == 1 /* female */ ? defaultFemaleModel : defaultMaleModel);
	}
}

package com.weaponanimationreplacer;

import com.weaponanimationreplacer.Constants.IdIconNameAndSlot;
import static com.weaponanimationreplacer.Constants.TriggerItemIds.getHiddenSlot;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import lombok.Data;
import lombok.Getter;
import net.runelite.api.EquipmentInventorySlot;

/**
 * Represents a set of:
 *  Item ids which trigger this swap.
 *  List of items whose models ot use when one of the trigger items is worn.
 *  List of animation replacements, which each contain an animation type to replace, and animation set to use for replacement, and, optionally, an animation type to use as the replacement (if it is different from the one being replaced).
 *  List of sound replacements, which contain the sound to be replaced and the sound replacing
 */
public class Swap
{
	/*
	Slot data:
	this plugin has a lot of different concepts of what slot an item equips into:
	Real equip slot:
	- Actual item equip slot - the slot the item occupies when equipped. This information isn't available directly from the game unless you witness the item equipped on a player in-game, so the wiki scrape data has to be used most of the time.
	- Wiki scrape data - what's available from ItemManager#getEquipment. Sometimes does not include items, especially new items.
	Model swap equip slot - the slot that an item should be transmogged into, so that you can show multiple item models that normally equip into the same slot, at the same time:
	- My equip slot - This is the slot that I assign to items that are not considered equippable by the wiki scrape data, or cannot be equipped in-game, but have player models that I like. Manually generated. Can affect equippable items too, such as the skis, which I marked into the shield slot, even though they equip into the weapon slot, back in a plugin version before users could customize the equip slot of an item.
	- Custom equip slot - the slot the user wants an item to appear in.
	 */

    private final List<Integer> itemRestrictions;
    // Ideally this would be an array of size KitType.values().length where the index is the kit index. This would also
	// deal with any possible issues where an item changes from equippable to unequippable in the wiki data or in my
	// own slot data. But this change requires work and save format changes, so I'm not doing it for now.
	private final List<Integer> modelSwaps;
	public final List<AnimationReplacement> animationReplacements;
	@Getter
	private final List<ProjectileSwap> projectileSwaps;
	@Getter
	private final List<GraphicEffect> graphicEffects;
	@Getter
	public final List<SoundSwap> soundSwaps;
	/**
	 * Model swap overrides. For equipping items into the wrong slot, or for equipping items that have no known slot.
	 */
	private final Map<Integer, Integer> slotOverrides;
	/**
	 * This is used for items that do not have a wiki scraped slot. These items should still be usable by players who
	 * have them equipped at the time of the item being added, since we can grab the equip slot from the player's
	 * current equipment, but they will have to have their slot recorded.
	 */
	private final Map<Integer, Integer> triggerItemSlotOverrides;

	// This is necessary for the gson to not do its own dumb stuff where it ignores default values of fields that are
	// normally assigned in the constructor, and assigns them to null.
	public Swap() {
		this(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
	}

	public Swap(
		List<Integer> itemRestrictions,
		List<Integer> modelSwaps,
		List<AnimationReplacement> animationReplacements,
		List<ProjectileSwap> projectileSwaps,
		List<GraphicEffect> graphicEffects,
		List<SoundSwap> soundSwaps
	) {
		this(itemRestrictions, modelSwaps, animationReplacements, projectileSwaps, graphicEffects, soundSwaps, new HashMap<>(), new HashMap<>());
	}

	public Swap(
		List<Integer> itemRestrictions,
		List<Integer> modelSwaps,
		List<AnimationReplacement> animationReplacements,
		List<ProjectileSwap> projectileSwaps,
		List<GraphicEffect> graphicEffects,
		List<SoundSwap> soundsSwaps,
		Map<Integer, Integer> slotOverrides,
		Map<Integer, Integer> triggerItemSlotOverrides
	) {
		this.itemRestrictions = new ArrayList<>(itemRestrictions);
		this.modelSwaps = new ArrayList<>(modelSwaps);
		this.animationReplacements = new ArrayList<>(animationReplacements);
		this.projectileSwaps = new ArrayList<>(projectileSwaps);
		this.soundSwaps = new ArrayList<>(soundsSwaps);
		this.graphicEffects = new ArrayList<>(graphicEffects);
		this.slotOverrides = new HashMap<>(slotOverrides);
		this.triggerItemSlotOverrides = new HashMap<>(triggerItemSlotOverrides);
    }

    public List<Integer> getItemRestrictions() {
    	return Collections.unmodifiableList(itemRestrictions);
	}

	public List<Integer> getModelSwaps() {
		return Collections.unmodifiableList(modelSwaps);
	}

	/**
	 * Takes into account slotOverrides. Do not use for getting the slot of an item not used as a model swap, otherwise
	 * the result will not be useful.
	 */
	private int getModelSwapSlot(int itemId, WeaponAnimationReplacerPlugin plugin) {
		Integer integer = slotOverrides.get(itemId);
		if (integer != null) return integer;
		integer = plugin.getMySlot(itemId);
		if (integer != null) return integer;
		return -1;
	}

	private int getTriggerItemSlot(int itemId, WeaponAnimationReplacerPlugin plugin) {
		IdIconNameAndSlot hiddenSlot = getHiddenSlot(itemId);
		if (hiddenSlot != null) return hiddenSlot.getKitType().getIndex();
		Integer integer = triggerItemSlotOverrides.get(itemId);
		if (integer != null) return integer;
		integer = plugin.getWikiScrapeSlot(itemId);
		if (integer != null) return integer;
		return -1;
	}

	public int getSlotOverride(int itemId) {
		return slotOverrides.getOrDefault(itemId, -1);
	}

	/** Use default slot for the item. */
	public void addModelSwap(int itemId, WeaponAnimationReplacerPlugin plugin)
	{
		addModelSwap(itemId, plugin, -1);
	}

	/** for assigning item to a custom slot. */
	public void addModelSwap(int itemId, WeaponAnimationReplacerPlugin plugin, int customSlot)
	{
		if (itemId == -1) return;

		final int targetSlot;
		if (customSlot == -1)
		{
			Integer s = plugin.getMySlot(itemId);
			if (s == null || s == EquipmentInventorySlot.RING.getSlotIdx() || s == EquipmentInventorySlot.AMMO.getSlotIdx())
				return;
			targetSlot = s;
		} else {
			targetSlot = customSlot;
		}

		// remove the item if it exists, and any item in the target slot.
		modelSwaps.removeIf(id -> {
			boolean remove;
			if (id == itemId) {
				remove = true;
			} else {
				int slot = getModelSwapSlot(id, plugin);
				remove =
					slot == -1 || // ??? something must have changed in the wiki data or my own slot overrides.
					slot == targetSlot ||
					slot == EquipmentInventorySlot.RING.getSlotIdx() || // do some housekeeping I guess?
					slot == EquipmentInventorySlot.AMMO.getSlotIdx() // do some housekeeping I guess?
				;
			}
			if (remove) {
				slotOverrides.remove(id);
				removeAutoGeneratedAnimationReplacement(id);
			}
			return remove;
		});

		if (customSlot != -1) slotOverrides.put(itemId, targetSlot);
		int index = Collections.binarySearch(modelSwaps, itemId, itemComparator(i -> getModelSwapSlot(i, plugin)));
		modelSwaps.add(~index, itemId);

		if (this.animationReplacements.size() == 1 && this.animationReplacements.get(0).auto != -1 || this.animationReplacements.isEmpty())
		{
			AnimationSet animationSet = Constants.getAnimationSet(itemId);
			if (animationSet != null) {
				animationReplacements.clear();
				AnimationReplacement animationReplacement = new AnimationReplacement(animationSet, AnimationType.ALL);
				animationReplacement.auto = itemId;
				animationReplacements.add(animationReplacement);
			}
		}
	}

	public void removeModelSwap(int prevItemId)
	{
		modelSwaps.remove((Integer) prevItemId); // Cast is necessary to use the right overload of the method.
		slotOverrides.remove(prevItemId);

		removeAutoGeneratedAnimationReplacement(prevItemId);
	}

	private void removeAutoGeneratedAnimationReplacement(int itemId)
	{
		if (this.animationReplacements.size() == 1 && this.animationReplacements.get(0).auto == itemId) {
			animationReplacements.clear();
		}
	}

	public void replaceModelSwap(int prevItemId, int newItemId, WeaponAnimationReplacerPlugin plugin)
	{
		removeModelSwap(prevItemId);
		addModelSwap(newItemId, plugin);
	}

	public void addTriggerItem(int itemId, WeaponAnimationReplacerPlugin plugin)
	{
		addTriggerItem(itemId, -1, plugin);
	}

	/**
	 * Slot is necessary for items that do not have equip slots set from the runelite wiki scraper.
	 */
	public void addTriggerItem(int itemId, int slot, WeaponAnimationReplacerPlugin plugin)
	{
		removeTriggerItem(itemId);

		if (slot == -1)
		{
			Integer newItemSlot = getTriggerItemSlot(itemId, plugin);
			if (newItemSlot == null || newItemSlot == EquipmentInventorySlot.RING.getSlotIdx() || newItemSlot == EquipmentInventorySlot.AMMO.getSlotIdx())
				return;
		} else {
			triggerItemSlotOverrides.put(itemId, slot);
		}

		int index = Collections.binarySearch(itemRestrictions, itemId, itemComparator(i -> getTriggerItemSlot(i, plugin)));
		itemRestrictions.add(~index, itemId);
	}

	public void removeTriggerItem(int itemId)
	{
		itemRestrictions.remove((Integer) itemId); // Cast is necessary to use the right overload of the method.
		triggerItemSlotOverrides.remove(itemId);
	}

	private static final int[] MY_SLOT_ORDER = new int[]{2, 5, 6, 0, 7, 1, 8, 9, 3, 10, 11, 4, 12, 13};

	private Comparator<Integer> itemComparator(Function<Integer, Integer> getSlot)
	{
		return (id1, id2) -> {
			int slot1 = getSlot.apply(id1);
			int slot2 = getSlot.apply(id2);

			if (slot1 == slot2) {
				return Integer.compare(id1, id2);
			}

			// It shouldn't be possible for these to be -1, but just in case.
			if (slot1 == -1) {
				return -1;
			} else if (slot2 == -1) {
				return 1;
			}

			return Integer.compare(MY_SLOT_ORDER[slot1], MY_SLOT_ORDER[slot2]);
		};
	}

	public void addNewAnimationReplacement()
	{
		animationReplacements.add(AnimationReplacement.createTemplate());
	}

	public void addNewGraphicEffect()
	{
		graphicEffects.add(GraphicEffect.createTemplate());
	}

	public void addNewSoundSwap()
	{
		soundSwaps.add(new SoundSwap());
	}

	public boolean appliesToGear(List<Integer> equippedItemIds, WeaponAnimationReplacerPlugin plugin)
	{
		// -1 used to represent "Any", I think. idk if this can still happen.
		if (itemRestrictions.contains(-1) || itemRestrictions.isEmpty()) return true;
		return appliesSpecificallyToGear(equippedItemIds, plugin);
	}

	/**
	 * returns true if each slot of the equipped gear that has a corresponding trigger item matches at least one of the trigger items for that slot.
	 * In other words, all trigger items must match unless there are multiple for the same slot in which case only one much match.
	 */
	public boolean appliesSpecificallyToGear(List<Integer> equippedItemIds, WeaponAnimationReplacerPlugin plugin)
	{
		if (itemRestrictions.isEmpty()) return false;
		Set<Integer> slots = new HashSet<>();
		Set<Integer> slotsSatisfied = new HashSet<>();
		for (Integer itemRestriction : itemRestrictions)
		{
			// -1 used to represent "Any", I think. idk if this can still happen.
			if (itemRestriction == -1) {
				return false;
			}

			int slot = getTriggerItemSlot(itemRestriction, plugin);
			slots.add(slot);
			if (itemRestriction < 0 && equippedItemIds.get(slot) < 0 || equippedItemIds.contains(itemRestriction)) {
				slotsSatisfied.add(slot);
			}
		}
		for (Integer slot : slots)
		{
			if (!slotsSatisfied.contains(slot)) {
				return false;
			}
		}
		return true;
	}

	public void updateForSortOrderAndUniqueness(WeaponAnimationReplacerPlugin plugin)
	{
		List<Integer> modelSwapsCopy = new ArrayList<>(modelSwaps);
		Collections.reverse(modelSwapsCopy); // The first item in the list for a particular slot was the one that was used previously, so add that one last so it ends up being the one in the list.
		modelSwaps.clear();
		for (Integer itemId : modelSwapsCopy)
		{
			addModelSwap(itemId, plugin);
		}

		List<Integer> itemRestrictionsCopy = new ArrayList<>(itemRestrictions);
		itemRestrictions.clear();
		for (Integer itemId : itemRestrictionsCopy)
		{
			addTriggerItem(itemId, plugin);
		}
	}

	public void addNewProjectileSwap()
	{
		projectileSwaps.add(ProjectileSwap.createTemplate());
	}

	@Data
    public static class AnimationReplacement implements Comparable<AnimationReplacement> {
        public AnimationSet animationSet;
        public AnimationType animationtypeToReplace;
        public AnimationType animationtypeReplacement;
        public int auto = -1; // -1 indicates that this animationreplacement was autogenerated. other values indicate the itemId that was added as a model swap to generate this.

		public static AnimationReplacement createTemplate()
		{
			return new AnimationReplacement(null, null, null);
		}

		// For gson.
		public AnimationReplacement() {
			auto = -1;
		}

		public AnimationReplacement(AnimationSet animationSet, AnimationType animationtypeToReplace) {
			this(animationSet, animationtypeToReplace, null);
		}

		public AnimationReplacement(AnimationSet animationSet, AnimationType animationtypeToReplace, AnimationType animationtypeReplacement) {
            this.animationSet = animationSet;
            this.animationtypeToReplace = animationtypeToReplace;
			this.animationtypeReplacement = animationtypeReplacement;
        }

        @Override
        public int compareTo(AnimationReplacement o) {
			boolean isNull = animationtypeToReplace == null;
			boolean oIsNull = o.animationtypeToReplace == null;
			if (isNull && oIsNull) return 0;
			if (isNull) return -1;
			if (oIsNull) return 1;
            return animationtypeToReplace.compareTo(o.animationtypeToReplace);
        }

        @Override
        public String toString() {
            return (animationSet == null ? null : animationSet.name) + " " + animationtypeToReplace + " " + animationtypeReplacement;
        }
    }

    /**
     * Ordered by specificity.
     *
     * TODO this is kinda gross - combination categories at the same logical level as animations.
     */
    public enum AnimationType {
        // Order matters - it is used to determine specificity (more specific enums earlier in the list).
        STAND, WALK, RUN, WALK_BACKWARD, SHUFFLE_LEFT, SHUFFLE_RIGHT, ROTATE, ATTACK_STAB("Stab"),
        ATTACK_SLASH("Slash"), ATTACK_CRUSH("Crush"), ATTACK_SPEC("Special"), DEFEND,
        ATTACK_SLASH2("Slash2"), ATTACK_CRUSH2("Crush2"),
        ATTACK(ATTACK_STAB, ATTACK_SLASH, ATTACK_SLASH2, ATTACK_CRUSH, ATTACK_CRUSH2, ATTACK_SPEC),
		SHUFFLE(WALK_BACKWARD, SHUFFLE_LEFT, SHUFFLE_RIGHT, ROTATE),
        MOVEMENT(WALK, RUN, SHUFFLE),
        STAND_PLUS_MOVEMENT("Stand/Move", STAND, MOVEMENT),
        ALL(ATTACK, STAND_PLUS_MOVEMENT, DEFEND);

        public static final List<AnimationType> comboBoxOrder = new ArrayList<>();
        static {
            comboBoxOrder.add(ALL);
            comboBoxOrder.add(STAND_PLUS_MOVEMENT);
            comboBoxOrder.add(STAND);
            comboBoxOrder.add(MOVEMENT);
			comboBoxOrder.add(WALK);
			comboBoxOrder.add(RUN);
			comboBoxOrder.add(SHUFFLE);
            comboBoxOrder.add(ATTACK);
			ATTACK.children.forEach(comboBoxOrder::add);
		}

		public final List<AnimationType> children;
        public final String prettyName;

        AnimationType(AnimationType... children) {
            this(null, children);
        }

        AnimationType(String prettyName, AnimationType... children) {
            String s = toString().replaceAll("_", " ");
            this.prettyName = prettyName != null ? prettyName : s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase();
            this.children = Arrays.asList(children);
        }

        public boolean appliesTo(AnimationType type) {
            return this == type || children.stream().anyMatch(child -> child.appliesTo(type));
        }

		public boolean hasChildren() {
			return !children.isEmpty();
		}

		public boolean hasChild(AnimationType type) {
            return children.stream().anyMatch(child -> child.appliesTo(type));
        }

        public String getComboBoxName() {
            int depth = 0;
            if (ATTACK.hasChild(this)) {
                depth = 2;
            } else if (MOVEMENT.hasChild(this)) {
                depth = 4;
            } else if (STAND_PLUS_MOVEMENT.hasChild(this)) {
                depth = 3;
            } else if (ALL.hasChild(this)) {
                depth = 1;
            }
            String s = prettyName;
            for (int i = 0; i < depth; i++) {
                s = "  " + s;
            }
            return s;
        }
    }

    @Override
    public String toString() {
        return itemRestrictions + " " + modelSwaps + " " + animationReplacements;
    }

    @Data
    public static final class SoundSwap {
    	int toReplace = -1;
    	int toReplaceWith = -1;
	}
}

package com.weaponanimationreplacer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Provides;
import com.weaponanimationreplacer.ChatBoxFilterableSearch.SelectionResult;
import static com.weaponanimationreplacer.Constants.NegativeIdsMap.HIDE_SLOT;
import static com.weaponanimationreplacer.Constants.NegativeIdsMap.SHOW_SLOT;
import static com.weaponanimationreplacer.Constants.WEAPON_SLOT;
import static com.weaponanimationreplacer.Constants.mapNegativeId;
import com.weaponanimationreplacer.Swap.AnimationReplacement;
import com.weaponanimationreplacer.Swap.AnimationType;
import static com.weaponanimationreplacer.Swap.AnimationType.ALL;
import static com.weaponanimationreplacer.Swap.AnimationType.ATTACK;
import com.weaponanimationreplacer.Swap.SoundSwap;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.MODEL_SWAP;
import static com.weaponanimationreplacer.WeaponAnimationReplacerPlugin.SearchType.SPELL_R;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.inject.Inject;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import lombok.Getter;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.JagexColor;
import net.runelite.api.Model;
import net.runelite.api.NPC;
import net.runelite.api.Player;
import static net.runelite.api.PlayerComposition.ITEM_OFFSET;
import net.runelite.api.Projectile;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GraphicsObjectCreated;
import net.runelite.api.events.InteractingChanged;
import net.runelite.api.events.PlayerChanged;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.game.ItemEquipmentStats;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStats;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.components.colorpicker.ColorPickerManager;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ImageUtil;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Slf4j
@PluginDescriptor(
        name = "Weapon/Gear/Anim Replacer",
        description = "replace weapon animations (stand,walk,run,attack) with other ones. Config is in a plugin panel.",
        tags = {"transmog", "fashionscape"}
)
public class WeaponAnimationReplacerPlugin extends Plugin {

	public static final String GROUP_NAME = "WeaponAnimationReplacer";

	private static final String TRANSMOG_SET_KEY = "transmogSets";

	@Inject Client client;
	@Inject EventBus eventBus;
	@Inject private ChatBoxFilterableSearch itemSearch;
	@Inject private ClientToolbar clientToolbar;
	@Inject private ConfigManager configManager;
	@Inject private TransmogrificationManager transmogManager;
	@Inject Gson runeliteGson;
	@Inject ClientUI clientUI;
	@Inject ItemManager itemManager;
	@Inject private SpriteManager spriteManager;
	@Inject ClientThread clientThread;
	@Inject ColorPickerManager colorPickerManager;
	@Inject private ChatboxPanelManager chatboxPanelManager;
	@Inject private WeaponAnimationReplacerConfig config;
	@Inject private OkHttpClient okHttpClient;

	@Getter
	List<TransmogSet> transmogSets = null;

	WeaponAnimationReplacerPluginPanel pluginPanel;
	private NavigationButton navigationButton;

	/**
	 * This is updated earlier than the player's equipment inventory. It uses the kit data, so it will have some negative numbers in it if there is no gear in that slot, or it is a jaw/hair/arms or something like that.
	 */
	private List<Integer> equippedItemsFromKit = new ArrayList<>();
	private final List<Integer> naturalPlayerPoseAnimations = new ArrayList<>();
	private AnimationReplacements currentAnimations = new AnimationReplacements();
	private List<ProjectileSwap> projectileSwaps = Collections.emptyList();
	private List<SoundSwap> soundSwaps = new ArrayList<>();
	private GraphicEffect currentScytheGraphicEffect = null;
	int delayedGfxToApply = -1;
	int delayedGfxHeightToApply = -1;
	Actor actorToApplyDelayedGfxTo = null;
	int timeToApplyDelayedGfx = -1;

	int previewItem = -1;
	AnimationReplacements previewAnimationReplacements = null;

	private Gson customGson = null; // Lazy initialized due to timing of @Injected runeliteGson and not being able to use constructor injection.
	@Inject private ScheduledExecutorService executor;

	Gson getGson()
	{
		if (customGson != null) return customGson;

		GsonBuilder gsonBuilder = runeliteGson.newBuilder();

		// Do not serialize empty maps.
		// Map must not use generics or the serializer will not be called.
		gsonBuilder.registerTypeAdapter(new TypeToken<Map>() {}.getType(), new JsonSerializer<Map<?, ?>>() {
			@Override
			public JsonElement serialize(Map<?, ?> map, Type typeOfSrc, JsonSerializationContext context) {
				if (map.isEmpty()) return null;

				JsonObject object = new JsonObject();
				for (Map.Entry<?, ?> entry : map.entrySet())
				{
					JsonElement element = context.serialize(entry.getValue());
					object.add(String.valueOf(entry.getKey()), element);
				}
				return object;
			}
		});
		// Do not serialize empty lists.
		// List must not use generics or the serializer will not be called.
		gsonBuilder.registerTypeAdapter(new TypeToken<List>() {}.getType(), new JsonSerializer<List<?>>() {
			@Override
			public JsonElement serialize(List<?> list, Type typeOfSrc, JsonSerializationContext context) {
				if (list.isEmpty()) return null;

				JsonArray array = new JsonArray();
				for (Object child : list) {
					JsonElement element = context.serialize(child);
					array.add(element);
				}
				return array;
			}
		});
		Type animationSetTypeToken = new TypeToken<AnimationSet>() {}.getType();
		JsonSerializer<AnimationSet> serializer = new JsonSerializer<AnimationSet>() {
			@Override
			public JsonElement serialize(AnimationSet set, Type typeOfSrc, JsonSerializationContext context) {
				return new JsonPrimitive(set.name);
			}
		};
		gsonBuilder.registerTypeAdapter(animationSetTypeToken, serializer);
		JsonDeserializer<AnimationSet> deserializer = new JsonDeserializer<AnimationSet>() {
			@Override
			public AnimationSet deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
				if (jsonElement instanceof JsonPrimitive && ((JsonPrimitive) jsonElement).isString()) {
					String s = jsonElement.getAsString();
					String newS = renames.get(s);
					if (newS != null) {
						log.debug("updating \"" + s + "\" to \"" + newS + "\"");
						s = newS;
					}
					AnimationSet animationSet = AnimationSet.getAnimationSet(s);
					return animationSet;
				} else {
					throw new JsonParseException("animationset is supposed to be a string.");
				}
			}
		};
		gsonBuilder.registerTypeAdapter(animationSetTypeToken, deserializer);
		gsonBuilder.registerTypeAdapter(new TypeToken<AnimationType>(){}.getType(), (JsonDeserializer<AnimationType>) (jsonElement, type, jsonDeserializationContext) -> {
			// there used to be an object here instead of just the enum.
			if (jsonElement instanceof JsonObject) {
				jsonElement = ((JsonObject) jsonElement).get("type");
			}
			return AnimationType.valueOf(jsonElement.getAsString());
		});

		customGson = gsonBuilder.create();
		return customGson;
	}

	@Override
    protected void startUp()
    {
		clientThread.invokeLater(() -> {
			transmogManager.startUp();
			eventBus.register(transmogManager);

			loadAndUpdateData();
			reloadTransmogSetsFromConfig();

			// record player's untransmogged state.
			if (client.getGameState() == GameState.LOGGED_IN) {
				onPlayerChanged(new PlayerChanged(client.getLocalPlayer()));
			}
			else
			{
				equippedItemsFromKit.clear();
				naturalPlayerPoseAnimations.clear();
				currentAnimations = new AnimationReplacements();
			}

			currentScytheGraphicEffect = null;
			scytheSwingCountdown = -1;
			previewItem = -1;

			if (client.getGameState().getState() >= GameState.LOGIN_SCREEN.getState())
			{
				showSidePanel(!config.hideSidePanel());
			}
		});
	}

	private void loadAndUpdateData()
	{
		boolean updateLocalData = false;
		boolean loadingFailure = false;

		Constants.Data bundledData = Constants.getBundledData(runeliteGson);
//		Constants.loadData(bundledData);

		// check filesystem.
		Constants.Data localData = null;
		try {
			byte[] bytes = Files.readAllBytes(Paths.get(System.getProperty("user.home"), ".runelite", "weaponanimationreplacerdata.json"));
			localData = runeliteGson.fromJson(new String(bytes), Constants.Data.class);
		}
		catch (FileNotFoundException | NoSuchFileException e) {
			updateLocalData = true; // This'll make it easy for people to edit if they want to.
		}
		catch (IOException | JsonSyntaxException e) {
			loadingFailure = true;
			clientThread.invoke(() -> client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Weapon/Gear/Anim Replacer: Couldn't load local data, see logs for more info.", ""));
			log.error("Couldn't load local data", e);
		}

		if (updateLocalData || bundledData.version > localData.version) {
			try {
				Files.write(Paths.get(System.getProperty("user.home"), ".runelite", "weaponanimationreplacerdata.json"), runeliteGson.toJson(bundledData).getBytes());
			}
			catch (IOException e) {
				e.printStackTrace();
			}
			localData = bundledData;
			log.info("updated local data.");
		}

		Constants.loadData(loadingFailure ? bundledData : localData);

		if (loadingFailure) return; // don't bother updating from online if we already have a broken thing.

		int localVersion = localData.version;
		executor.submit(() -> {
			try (Response res = okHttpClient.newCall(new Request.Builder().url("https://raw.githubusercontent.com/geheur/weapon-animation-replacer/master/src/main/resources/com/weaponanimationreplacer/dataversion.json").build()).execute()) {
				if (res.code() != 200) {
					log.error("Response code " + res.code());
					return;
				}

				String requestBody = res.body().string();
				int onlineVersion = Integer.parseInt(requestBody.trim());
				log.info("online version is " + onlineVersion + ", local version is " + localVersion);
				if (onlineVersion <= localVersion) return;

				try (Response res2 = okHttpClient.newCall(new Request.Builder().url("https://raw.githubusercontent.com/geheur/weapon-animation-replacer/master/src/main/resources/com/weaponanimationreplacer/data.json").build()).execute()) {
					String response = res2.body().string();
					Constants.Data onlineData = runeliteGson.fromJson(response, Constants.Data.class);
					if (onlineData.version != onlineVersion) {
						log.warn("online versions do not match.");
						return;
					}

					try {
						Files.write(Paths.get(System.getProperty("user.home"), ".runelite", "weaponanimationreplacerdata.json"), runeliteGson.toJson(onlineData).getBytes());
					} catch (IOException e) {
						e.printStackTrace();
					}
					clientThread.invokeLater(() -> {
						Constants.loadData(onlineData);
						reloadTransmogSetsFromConfig();
						SwingUtilities.invokeLater(() -> {
							if (pluginPanel != null) pluginPanel.rebuild();
						});
					});
				}
			} catch (IOException | JsonSyntaxException e) {
				log.error("error loading online data", e);
			}
		});
	}

	private void migrate()
	{
		String serialVersionString = configManager.getConfiguration(GROUP_NAME, "serialVersion");
		int serialVersion = serialVersionString != null ? Integer.parseInt(serialVersionString) : -1;

		if (serialVersion == -1) {
			// I did a big format change at some point, this handles that.
			if (configManager.getConfiguration("WeaponAnimationReplacer", TRANSMOG_SET_KEY) == null)
			{
				String configuration = configManager.getConfiguration("WeaponAnimationReplacer", "rules");
				if (configuration == null) return; // do nothing. No existing rules, nothing to convert to new format.

				List<TransmogSet> transmogSets = migrate(configuration);

				this.transmogSets = transmogSets;
				saveTransmogSets();
				configManager.setConfiguration(GROUP_NAME, "rulesbackup", configuration); // just in case!
				configManager.unsetConfiguration(GROUP_NAME, "rules");
			}

			// update old stuff for the new sort order and model swap one item per slot.
			updateForSortOrder();
		}

		if (serialVersion <= 1) {
			// I accidentally put the replacement animation as ALL in the auto animation swaps, when it should be null.
			fixBadAutoAnimationReplacements();
		}

		configManager.setConfiguration(GROUP_NAME, "serialVersion", 2);
	}

	private void fixBadAutoAnimationReplacements()
	{
		List<TransmogSet> transmogSets;
		try {
			transmogSets = getTransmogSetsFromConfig();
		} catch (JsonParseException | IllegalStateException e) {
			log.error("issue parsing json: " + configManager.getConfiguration(GROUP_NAME, TRANSMOG_SET_KEY), e);
			return;
		}
		for (TransmogSet transmogSet : transmogSets) {
			for (Swap swap : transmogSet.getSwaps()) {
				for (AnimationReplacement animationReplacement : swap.animationReplacements) {
					if (animationReplacement.animationtypeReplacement != null && !ATTACK.appliesTo(animationReplacement.animationtypeReplacement)) {
						animationReplacement.animationtypeReplacement = null;
					}
				}
			}
		}
		this.transmogSets = transmogSets;
		saveTransmogSets();
	}

	private void updateForSortOrder()
	{
		List<TransmogSet> transmogSets;
		try {
			transmogSets = getTransmogSetsFromConfig();
		} catch (JsonParseException | IllegalStateException e) {
			log.error("issue parsing json: " + configManager.getConfiguration(GROUP_NAME, TRANSMOG_SET_KEY), e);
			return;
		}
		for (TransmogSet transmogSet : transmogSets)
		{
			for (Swap swap : transmogSet.getSwaps())
			{
				swap.updateForSortOrderAndUniqueness(this);
			}
		}
		this.transmogSets = transmogSets;
		saveTransmogSets();
	}

	List<TransmogSet> migrate(String config)
	{
		List<AnimationReplacementRule_OLD> rules = getGson().fromJson(config, new TypeToken<ArrayList<AnimationReplacementRule_OLD>>() {}.getType());
		List<TransmogSet> transmogSets = new ArrayList<>();
		for (AnimationReplacementRule_OLD rule : rules)
		{
			TransmogSet transmogSet = new TransmogSet(
				Collections.singletonList(
					new Swap(
						rule.itemRestrictions.stream().map(r -> r.itemId).collect(Collectors.toList()),
						Collections.singletonList(rule.modelSwap),
						rule.animationReplacements,
						Collections.emptyList(),
						Collections.emptyList(),
						Collections.emptyList())));
			transmogSet.setName(rule.name);
			transmogSets.add(transmogSet);
		}
		return transmogSets;
	}

	@Override
	protected void shutDown() {
		showSidePanel(false);

		clientThread.invokeLater(() -> {
			eventBus.unregister(transmogManager);
			transmogManager.shutDown();

			if (!naturalPlayerPoseAnimations.isEmpty())
			{
				for (Constants.ActorAnimation animation : Constants.ActorAnimation.values())
				{
					animation.setAnimation(client.getLocalPlayer(), naturalPlayerPoseAnimations.get(animation.ordinal()));
				}
			}
		});

		transmogSets = null;
    }

    @Subscribe
	public void onProfileChanged(ProfileChanged e) {
		chatboxPanelManager.close();
		clientThread.invokeLater(() -> {
			reloadTransmogSetsFromConfig();
			handleTransmogSetChange();
			if (pluginPanel != null) SwingUtilities.invokeLater(pluginPanel::rebuild);
		});
	}

	private void reloadTransmogSetsFromConfig()
	{
		migrate();

		try
		{
			transmogSets = getTransmogSetsFromConfig();
		}
		catch (JsonParseException | IllegalStateException ex)
		{
			log.error("issue parsing json: " + configManager.getConfiguration(GROUP_NAME, TRANSMOG_SET_KEY), ex);
			transmogSets = new ArrayList<>();
		}
	}

    @Provides
	public WeaponAnimationReplacerConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(WeaponAnimationReplacerConfig.class);
	}

    static final Map<String, String> renames = new HashMap<>();
	static {
		renames.put("Godsword", "Godsword (Armadyl)");
		renames.put("unarmed", "Unarmed");
		renames.put("shortsword/scim/saeldor", "Dragon longsword/Saeldor");
		renames.put("staff2/wand", "Staff2/Wand");
		renames.put("Knife", "Knife (non-dragon)");
	}

	public List<TransmogSet> getTransmogSetsFromConfig() {
        String configuration = configManager.getConfiguration(GROUP_NAME, TRANSMOG_SET_KEY);
        if (configuration == null) return getDefaultTransmogSets();
		if (configuration.startsWith("NOT_JSON")) {
			configuration = configuration.substring("NOT_JSON".length());
		}
		List<TransmogSet> transmogSets = getGson().fromJson(configuration, new TypeToken<ArrayList<TransmogSet>>() {}.getType());
		if (transmogSets == null) transmogSets = new ArrayList<>();
		return transmogSets;
    }

    public void saveTransmogSets() {
		if (transmogSets == null) return; // not sure how this could happen, but I've had people report it and I don't want to write null into the config.

    	// Runelite won't store config values that are valid json with a nested depth of 8 or higher. Adding "NOT_JSON"
		// makes the string not be valid json, circumventing this.
		// This might not be necessary anymore but I don't feel like updating it; it works fine as is.
        String s = "NOT_JSON" + getGson().toJson(transmogSets);
        configManager.setConfiguration(GROUP_NAME, TRANSMOG_SET_KEY, s);
    }

	/**
	 * Saves transmog sets to config, reapplies transmog and pose animations.
	 */
	public void handleTransmogSetChange() {
		saveTransmogSets();

		if (client.getLocalPlayer() != null)
		{
			transmogManager.changeTransmog();
			updateAnimations();
			updateSoundSwaps();
		}
    }

    public void deleteTransmogSet(int index) {
		transmogSets.remove(index);
		handleTransmogSetChange();
		SwingUtilities.invokeLater(pluginPanel::rebuild);
	}

    public void addNewTransmogSet(int index) {
        transmogSets.add(index, TransmogSet.createTemplate());
        saveTransmogSets();
		SwingUtilities.invokeLater(pluginPanel::rebuild);
	}

    public void moveTransmogSet(int index, boolean up) {
        if ((!up && index == transmogSets.size() - 1) || (up && index == 0)) return;
        TransmogSet swap = transmogSets.remove(index);
        transmogSets.add(index + (up ? -1 : 1), swap);
        handleTransmogSetChange();
        SwingUtilities.invokeLater(pluginPanel::rebuild);
    }

    private List<TransmogSet> getDefaultTransmogSets() {
        String configuration = "[{\"name\":\"Monkey run\",\"enabled\":false,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Cursed banana\",\"animationtypeToReplace\":\"ALL\"}],\"graphicEffects\":[]}]},{\"name\":\"Elder Maul Scythe\",\"enabled\":false,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[22324,4151,12006,4587,24551],\"modelSwaps\":[22325],\"animationReplacements\":[{\"animationSet\":\"Elder maul\",\"animationtypeToReplace\":\"ALL\"},{\"animationSet\":\"Scythe of Vitur\",\"animationtypeToReplace\":\"ATTACK\",\"animationtypeReplacement\":{\"type\":\"ATTACK_SLASH\",\"id\":8056}}],\"graphicEffects\":[{\"type\":\"SCYTHE_SWING\",\"color\":{\"value\":-4030079,\"falpha\":0.0}}]}]},{\"name\":\"Shoulder Halberd\",\"enabled\":false,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[3204,23987],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Dharok's greataxe\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}],\"graphicEffects\":[]}]},{\"name\":\"Saeldor Slash\",\"enabled\":false,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[24551,23995,23997],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Inquisitor's mace\",\"animationtypeToReplace\":\"ATTACK_SLASH\",\"animationtypeReplacement\":{\"type\":\"ATTACK_CRUSH\",\"id\":4503}}],\"graphicEffects\":[]}]},{\"name\":\"Rich voider\",\"enabled\":false,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[8839,8840,8842,11664,13072,13073],\"modelSwaps\":[11826,11828,11830,7462,13237,22249,21898],\"animationReplacements\":[],\"graphicEffects\":[]}]}]";
        return getGson().fromJson(configuration, new TypeToken<ArrayList<TransmogSet>>() {}.getType());
    }

	private void swapPlayerAnimation()
	{
		Player player = client.getLocalPlayer();
		int playerAnimation = player.getAnimation();
		if (playerAnimation == -1) return;

		Optional<AnimationType> type = Constants.animationSets.stream()
			.map(set -> set.getType(playerAnimation))
			.filter(t -> t != null)
			.findFirst();
		if (!type.isPresent()) return;

		Integer replacementAnim = currentAnimations.getAnimation(type.get());
		if (replacementAnim != null)
		{
			log.debug("replacing animation {} with {}", playerAnimation, replacementAnim);
			player.setAnimation(replacementAnim);
		}

		if (currentScytheGraphicEffect != null && AnimationType.ATTACK.appliesTo(type.get())) {
			doScytheSwing();
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed soundEffectPlayed)
	{
		int sound = soundEffectPlayed.getSoundId();
		for (SoundSwap soundSwap : soundSwaps)
		{
			if (soundSwap.toReplace == sound)
			{
				log.debug("Found sound to place, replacing with: "+soundSwap.toReplaceWith);
				clientThread.invokeLater(() -> {
					client.playSoundEffect(soundSwap.toReplaceWith);
				});
				soundEffectPlayed.consume();
				return;
			}
		}
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		if (client.getGameCycle() == timeToApplyDelayedGfx) {
//			System.out.println("it is " + client.getGameCycle() + ", applying delayed gfx.");
			actorToApplyDelayedGfxTo.setGraphic(delayedGfxToApply);
			actorToApplyDelayedGfxTo.setSpotAnimFrame(0);
			actorToApplyDelayedGfxTo.setGraphicHeight(delayedGfxHeightToApply);
		}

		if (scytheSwingCountdown == 0) {
			createScytheSwing();
		} else {
			scytheSwingCountdown--;
		}
    }

	private void replaceNoProjectileSpell()
	{
		Player player = client.getLocalPlayer();
		final WorldPoint playerPos = player.getWorldLocation();
		if (playerPos == null) return;
		final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
		if (playerPosLocal == null) return;
		if (player.getInteracting() == null) return;

		for (ProjectileSwap projectileSwap : projectileSwaps)
		{
			ProjectileCast toReplace = projectileSwap.getToReplace();
			if (toReplace.getCastAnimation() != lastRealAnimation || toReplace.getProjectileId() != -1) {
				continue;
			}

			if (toReplace.getCastGfx() != -1) {
				if (toReplace.getCastGfx() != player.getGraphic()) continue;
			} else {
				// TODO check autocast and last cast spell.
			}

			boolean isBarrage = false;
			int chebyshevDistance = chebyshevDistance(player, player.getInteracting(), isBarrage);
//			System.out.println("distance is " + chebyshevDistance);
			// TODO splash detection.
			int projectileTravelTime;
			int graphicDelay;
			ProjectileCast toReplaceWith = projectileSwap.getToReplaceWith();
			switch (toReplace.getCastAnimation()) {
				// magic spells.
				case 811:
					projectileTravelTime = 120 - toReplaceWith.getStartMovement();
					graphicDelay = 48 + 10 * chebyshevDistance;
					break;
				case 1978:
				case 1979:
					projectileTravelTime = -5 + 10 * chebyshevDistance;
					graphicDelay = 48 + 10 * chebyshevDistance;
					break;
				// arceuus spells.
				case 8972:
				case 8974:
				case 8977:
					// TODO check these values in-game.
					projectileTravelTime = 60; // 2 ticks, according to hit delay article.
					graphicDelay = 60;
					break;
				default:
					return; // shouldn't happen.
			}
			int endCycle = client.getGameCycle() + toReplaceWith.getStartMovement() + projectileTravelTime;

			replaceSpell(projectileSwap, player, playerPos, player.getInteracting(), player.getInteracting().getWorldLocation(), endCycle);
			break;
		}
	}

	int chebyshevDistance(Player player, Actor target, boolean isBarrage)
	{
		if (target == null) return -1;
		/*
		 * see https://oldschool.runescape.wiki/w/Hit_delay
		 * "The distance is typically measured edge-to-edge in game squares, using the same edge for both entities. I.e. distance will be calculated using an NPC's closest edge to the player, and the player's furthest edge from the NPC. However, barrage spells are a notable exception in that they calculate distance from the player to an NPC's south-west tile, which causes abnormally long hit delay when attacking a large NPC from the north or east."
		 */

		LocalPoint playerLocation = player.getLocalLocation();
		LocalPoint targetLocation = target.getLocalLocation();
		int px = playerLocation.getSceneX();
		int py = playerLocation.getSceneY();
		int tx = targetLocation.getSceneX();
		int ty = targetLocation.getSceneY();

		// Special case for >1 tile sized npc with non-barrage attack.
		if (target instanceof NPC && !isBarrage) {
			NPC npc = (NPC) target;
			int targetSize = npc.getTransformedComposition().getSize();
			if (targetSize > 1) {
				// measure distance from all 4 edges.
				int nDiff = py - (ty + targetSize - 1);
				int sDiff = ty - py;
				int wDiff = tx - px;
				int eDiff = px - (tx + targetSize - 1);
				return Math.max(Math.max(nDiff, sDiff), Math.max(wDiff, eDiff));
			}
		}

		return Math.max(Math.abs(tx - px), Math.abs(ty - py));
	}

	private Set<Projectile> lastTickProjectiles = new HashSet<>();

	@Subscribe
	public void onGameTick(GameTick e) {
		if (!projectileSwaps.isEmpty()) {
			boolean replaced = false;

			Set<Projectile> thisTickProjectiles = new HashSet<>();
			for (Projectile p : client.getProjectiles()) {
				if (!lastTickProjectiles.contains(p)) {
					replaced = handleNewProjectile(p);
				}
				thisTickProjectiles.add(p);
			}
			lastTickProjectiles = thisTickProjectiles;

			if (animationChangedThisTick && !replaced) {
				replaceNoProjectileSpell();
			}
		}

		if (animationChangedThisTick && frame != null) {
			frame.spell();
		}

		animationChangedThisTick = false;
	}

	private boolean handleNewProjectile(Projectile projectile) {
		if (client.getGameCycle() > projectile.getStartCycle()) return false; // skip already seen projectiles.

		// This is the player's actual location which is what projectiles use as their start position. Player#getX, #getSceneX, etc., do not work here.
		Player player = client.getLocalPlayer();
		final WorldPoint playerPos = player.getWorldLocation();
		if (playerPos == null) return false;
		final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
		if (playerPosLocal == null) return false;

		if (projectile.getX1() != playerPosLocal.getX() || projectile.getY1() != playerPosLocal.getY()) return false;

		int castAnimation = // Some standard spellbook spells use a different animation depending on the equipped weapon (or lack thereof).
			(lastRealAnimation < 710 || lastRealAnimation > 729) ? lastRealAnimation :
			lastRealAnimation == 710 ? 1161 :
			lastRealAnimation == 711 ? 1162 :
			lastRealAnimation == 716 ? 1163 :
			lastRealAnimation == 717 ? 1164 :
			lastRealAnimation == 718 ? 1165 :
			lastRealAnimation == 724 ? 1166 :
			lastRealAnimation == 727 ? 1167 :
			lastRealAnimation == 728 ? 1168 :
			lastRealAnimation == 729 ? 1169 :
			lastRealAnimation
		;
		for (ProjectileSwap projectileSwap : projectileSwaps)
		{
			ProjectileCast toReplace = projectileSwap.getToReplace();
			if (
				toReplace.getCastAnimation() == castAnimation && castAnimation != -1 &&
				toReplace.getProjectileId() == projectile.getId() &&
				(toReplace.getCastGfx() == -1 || toReplace.getCastGfx() == player.getGraphic())
			) {
				int endCycle = projectile.getEndCycle();

				replaceSpell(projectileSwap, player, projectile.getSourcePoint(), projectile.getTargetActor(), projectile.getTargetPoint(), endCycle);
				projectile.setEndCycle(0);

				return true;
			}
		}
		return false;
	}

	private void replaceSpell(
		ProjectileSwap projectileSwap,
		Player player,
		WorldPoint source,
		Actor interacting,
		WorldPoint target,
		int endCycle
	) {
		ProjectileCast toReplace = projectileSwap.getToReplace();
		ProjectileCast toReplaceWith = projectileSwap.getToReplaceWith();

		if (toReplaceWith.getProjectileId() != -1)
		{
			int startCycle = client.getGameCycle() + toReplaceWith.getStartMovement();
			Projectile p = client.createProjectile(toReplaceWith.getProjectileId(),
				source, toReplaceWith.getStartHeight(), null,
				target, toReplaceWith.getEndHeight(), interacting,
				startCycle, endCycle,
				toReplaceWith.getSlope(),
				toReplaceWith.getStartPos());
			lastTickProjectiles.add(p); // avoid recursive replacement on the next tick.
		}

		player.setAnimation(toReplaceWith.getCastAnimation());
		player.setGraphic(toReplaceWith.getCastGfx());
		player.setGraphicHeight(toReplaceWith.getCastGfxHeight());
		player.setSpotAnimFrame(0);

		if (player.getInteracting() != null)
		{
			if (toReplace.getHitGfx() != -1)
			{
				// TODO remove this section, timing it yourself probably works better.
				// the spell's hit gfx is on the enemy when the spell is cast, it just has a delay on it.
				int graphic = player.getInteracting().getGraphic();
				if (graphic == toReplace.getHitGfx() || (graphic == 85 && true)) // TODO remove second part.
				{
					player.getInteracting().setGraphic(toReplaceWith.getHitGfx());
					player.getInteracting().setGraphicHeight(toReplaceWith.getHitGfxHeight());
				}
			}
			else
			{
				delayedGfxToApply = toReplaceWith.getHitGfx();
				delayedGfxHeightToApply = toReplaceWith.getHitGfxHeight();
				actorToApplyDelayedGfxTo = player.getInteracting();
				timeToApplyDelayedGfx = endCycle;
			}
		}
	}

	private LocalPoint scytheGraphicPoint;
	private int scytheModel;
	private int scytheSwingCountdown = -1;
	private int scytheGraphicTick = -1;
	private int scytheGraphic;

	private void doScytheSwing() {
		scytheSwingCountdown = 20;
		setScytheData();
		scytheGraphicTick = client.getTickCount();
		msg(client.getTickCount() + " " + client.getGameCycle() + " sc: " + scytheGraphic + " " + scytheGraphicPoint);
	}

	private void setScytheData() {
		WorldPoint point = client.getLocalPlayer().getWorldLocation();
		Actor interacting = client.getLocalPlayer().getInteracting();

		int direction = getScytheDirection(point, interacting);
		if (direction == 0) point = point.dy(1);
		if (direction == 1) point = point.dx(1);
		if (direction == 2) point = point.dy(-1);
		if (direction == 3) point = point.dx(-1);
		scytheGraphicPoint = LocalPoint.fromWorld(client.getTopLevelWorldView(), point);

		scytheModel = new int[]{4004, 4003, 4005, 4006}[direction];

//		chally: 1232 1233 1234 1235
		Integer weaponId = equippedItemsFromKit.get(KitType.WEAPON.getIndex());
		if (weaponId == ItemID.SCYTHE_OF_VITUR || weaponId == ItemID.SCYTHE_OF_VITUR_UNCHARGED) {
			scytheGraphic = new int[]{506, 1172, 478, 1231}[direction];
		} else if (weaponId == ItemID.SCYTHE_OF_VITUR_BL || weaponId == ItemID.SCYTHE_OF_VITUR_UNCHARGED_BL) {
			scytheGraphic = new int[]{1892, 1893, 1891, 1894}[direction];
		} else if (weaponId == ItemID.SCYTHE_OF_VITUR_OR || weaponId == ItemID.SCYTHE_OF_VITUR_UNCHARGED_OR) {
			scytheGraphic = new int[]{1896, 1897, 1895, 1898}[direction];
		} else {
			scytheGraphic = -1;
		}
	}

	/** 0 1 2 3 is n e s w
	 east and west swings only apply on 2 tiles per enemy.
	 for odd size enemies, this is the middle tile on the west/east
	 for even, this is the lower of the 2 middle tiles.
	 for all other positions, the game just uses a north or south swing.
	 */
	private int getScytheDirection(WorldPoint playerLocation, Actor target) {
		if (target != null) {
			int playerx = playerLocation.getX(), playery = playerLocation.getY();
			int npcw = target.getWorldLocation().getX();
			int npcs = target.getWorldLocation().getY();
			int targetSize = target instanceof NPC ? ((NPC) target).getTransformedComposition().getSize() : 1;
			int npcMiddle = npcs + (targetSize - 1) / 2;
			if (playery == npcMiddle) {
				return playerx == npcw - 1 ? 1 : 3;
			}
			return playery > npcMiddle ? 2 : 0;
		} else {
			// I know this can happen if you're attacking a target dummy in varrock, probably also in the poh.
			int orientation = client.getLocalPlayer().getOrientation();
			// 70 is just a number I felt might work nice here.
			if (orientation > 512 - 70 && orientation < 512 + 70) {
				return 3;
			} else if (orientation > 1536 - 70 && orientation < 1536 + 70) {
				return 1;
			} else if (orientation > 512 && orientation < 1536) {
				return 0;
			} else {
				return 2;
			}
		}
	}

	private void createScytheSwing()
	{
		scytheSwingCountdown = -1;

		RuneLiteObject runeLiteObject = client.createRuneLiteObject();
		Color scytheSwingColor = currentScytheGraphicEffect != null ? currentScytheGraphicEffect.color : null;
		if (scytheSwingColor != null)
		{
			Model model = client.loadModelData(scytheModel)
				.cloneVertices()
				.cloneColors()
				.recolor((short) 960, JagexColor.rgbToHSL(scytheSwingColor.getRGB(), 1.0d))
				.translate(0, -85, 0)
				.light()
				;
			runeLiteObject.setModel(model);
		} else {
			runeLiteObject.setModel(client.loadModel(scytheModel));
		}

		runeLiteObject.setAnimation(client.loadAnimation(1204));
		runeLiteObject.setLocation(scytheGraphicPoint, client.getPlane());
		runeLiteObject.getAnimationController().setOnFinished(ac -> runeLiteObject.setActive(false));
		runeLiteObject.setActive(true);
	}

	@Subscribe
	public void onGraphicsObjectCreated(GraphicsObjectCreated e) {
		msg(client.getTickCount() + " " + client.getGameCycle() + " go: " + e.getGraphicsObject().getId() + ":" + scytheGraphic + " " + e.getGraphicsObject().getLocation() + ":" + scytheGraphicPoint);
		if (
			scytheGraphic != -1 &&
				e.getGraphicsObject().getId() == scytheGraphic &&
				client.getTickCount() == scytheGraphicTick &&
				e.getGraphicsObject().getLocation().equals(scytheGraphicPoint)
		) {
			e.getGraphicsObject().setFinished(true);
			scytheGraphic = -1;
		}
	}

	public void demoCast(ProjectileCast pc)
	{
		clientThread.invoke(() -> {
			Player p = client.getLocalPlayer();
			if (p == null) return;
			if (pc.projectileId != -1)
			{
				WorldPoint wl = p.getWorldLocation();
				LocalPoint ll = p.getLocalLocation();
				int targetx = ll.getX() + (int) (700 * Math.cos((-512 - p.getOrientation()) / 2048d * 2 * Math.PI));
				int targety = ll.getY() + (int) (700 * Math.sin((-512 - p.getOrientation()) / 2048d * 2 * Math.PI));
				client.createProjectile(pc.projectileId, wl, pc.startHeight, p, WorldPoint.fromLocal(client, targetx, targety, wl.getPlane()), pc.endHeight, null, client.getGameCycle() + pc.startMovement, client.getGameCycle() + pc.startMovement + 100, pc.slope, pc.startPos);
			}
			if (pc.castAnimation != -1) {
				p.setAnimation(pc.castAnimation);
				p.setAnimationFrame(0);
			}
			if (pc.castGfx != -1) {
				p.createSpotAnim("demo".hashCode(), pc.castGfx, 92, 0);
				p.setGraphic(pc.getCastGfx());
				p.setGraphicHeight(pc.getCastGfxHeight());
				p.setSpotAnimFrame(0);
			}
		});
	}

	private static final class AnimationReplacements {
		private final Map<AnimationType, Integer> replacements = new HashMap<>();

		public AnimationReplacements() {
			this(Collections.emptyList());
		}

		public AnimationReplacements(List<AnimationReplacement> replacements) {
			for (int i = replacements.size() - 1; i >= 0; i--)
			{
				applyReplacement(replacements.get(i));
			}
		}

		public void applyReplacement(Swap.AnimationReplacement replacement) {
			replaceAnimations(
				replacement.animationSet,
				replacement.animationtypeToReplace,
				replacement.animationtypeReplacement
			);
		}

		private void replaceAnimations(AnimationSet animationSet, AnimationType toReplace, AnimationType replacement) {
			if (toReplace == ATTACK) {
				int defaultAttack = -1;
				for (AnimationType attackAnimation : animationSet.getAttackAnimations())
				{
					defaultAttack = animationSet.getAnimation(attackAnimation);
					if (defaultAttack != -1) break;
				}
				List<AnimationType> children = new ArrayList<>(ATTACK.children);
				children.add(ATTACK);
				for (AnimationType child : children)
				{
					int id = animationSet.getAnimation(replacement == null ? child : replacement);
					if (id == -1) {
						id = defaultAttack;
					}
					if (id != -1) {
						replacements.put(child, id);
					}
				}
			} else if (!toReplace.hasChildren()) {
				int id = animationSet.getAnimation(replacement == null ? toReplace : replacement);
				if (id != -1) {
					replacements.put(toReplace, id);
				}
			} else {
				for (AnimationType child : toReplace.children) {
					replaceAnimations(animationSet, child, replacement);
				}
			}
		}

		public Integer getAnimation(AnimationType type) {
			return replacements.get(type);
		}
	}

    private void updateAnimations() { // TODO cache maybe based on the current gear.
		List<Swap> matchingSwaps = getApplicableSwaps();

		List<AnimationReplacement> replacements = matchingSwaps.stream()
			.flatMap(swap -> swap.animationReplacements.stream()
				.filter(replacement -> replacement.animationSet != null && replacement.animationtypeToReplace != null)
				.sorted()
			)
			.collect(Collectors.toList());
		currentAnimations = previewAnimationReplacements != null ? previewAnimationReplacements : new AnimationReplacements(replacements);
		setPlayerPoseAnimations();

		projectileSwaps = matchingSwaps.stream().flatMap(swap -> swap.getProjectileSwaps().stream()).filter(swap -> swap.getToReplace() != null && swap.getToReplaceWith() != null).collect(Collectors.toList());
		currentScytheGraphicEffect = matchingSwaps.stream()
			.filter(swap -> swap.getGraphicEffects().stream().anyMatch(e -> e.type == GraphicEffect.Type.SCYTHE_SWING))
			.flatMap(swap -> swap.getGraphicEffects().stream())
			.findAny().orElse(null);
    }

    private void updateSoundSwaps() {
		soundSwaps = getApplicableSwaps().stream().flatMap(swap -> swap.getSoundSwaps().stream()).filter(swap -> swap.getToReplace() != -1 && swap.getToReplaceWith() != -1).collect(Collectors.toList());
	}

    public String itemDisplayName(int itemId) {
		return Constants.getName(itemId, itemManager.getItemComposition(itemId).getMembersName());
	}

	public String itemName(Integer itemId)
	{
		if (itemId == null) return "\"null\"";
		String s = (itemId == null) ? "\"null\"" : "\"" + itemManager.getItemComposition(itemId).getName() + "\"";
		if (s.equals("\"null\"")) {
			s = Integer.toString(itemId);
		}
		return s;
	}

	/**
	 * Sets the player's pose animations (idle/walk/run/etc.).
	 */
	private void setPlayerPoseAnimations()
	{
		Player player = client.getLocalPlayer();
		if (player == null || naturalPlayerPoseAnimations.isEmpty()) return;

		if (Constants.doNotReplaceIdles.contains(naturalPlayerPoseAnimations.get(Constants.ActorAnimation.IDLE.ordinal()))) return;

		for (Constants.ActorAnimation animation : Constants.ActorAnimation.values())
		{
			Integer animationId = currentAnimations.getAnimation(animation.getType());
			if (animationId == null) animationId = naturalPlayerPoseAnimations.get(animation.ordinal());
			animation.setAnimation(player, animationId);
		}
	}

	/** Keep note of the last animationchanged in case some plugin changes it (maybe even us). */
	private int lastRealAnimation = -1;
	private boolean animationChangedThisTick = false;
	@Subscribe(priority = -1000.0f) // I want to run late, so that plugins that need animation changes don't see my changed animation ids, since mine are cosmetic and don't give information on what the player is actually doing.
	public void onAnimationChanged(AnimationChanged e)
	{
		Player player = client.getLocalPlayer();
		if (!e.getActor().equals(player)) return;
//		System.out.println("onanimationchanged");

		lastRealAnimation = player.getAnimation();

		if (lastRealAnimation != -1) animationChangedThisTick = true;

		swapPlayerAnimation();
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged e) {
		if (e.getSource() != client.getLocalPlayer()) return;

//		System.out.println("interactingchanged " + e.getTarget());
	}

	@Subscribe(priority = 1) // I need kit data to determine what the player is wearing (equipment inventory does not update fast enough to avoid flickering), so I need this information before other plugins might change it.
	public void onPlayerChanged(PlayerChanged playerChanged) {
		if (playerChanged.getPlayer() != client.getLocalPlayer()) return;

		equippedItemsFromKit = IntStream.of(client.getLocalPlayer().getPlayerComposition().getEquipmentIds()).map(i -> itemManager.canonicalize(i - ITEM_OFFSET)).boxed().collect(Collectors.toList());
		recordNaturalPlayerPoseAnimations();

		transmogManager.reapplyTransmog();
		updateAnimations();
		updateSoundSwaps();
	}

	private void recordNaturalPlayerPoseAnimations()
	{
		naturalPlayerPoseAnimations.clear();
		Player player = client.getLocalPlayer();
		for (Constants.ActorAnimation animation : Constants.ActorAnimation.values())
		{
			naturalPlayerPoseAnimations.add(animation.getAnimation(player));
		}
	}

	public enum SearchType {
		TRIGGER_ITEM,
		MODEL_SWAP,
		SPELL_L,
		SPELL_R,
	}

	public void doItemSearch(Consumer<SelectionResult> onItemChosen, SearchType searchType) {
		doItemSearch(onItemChosen, () -> {}, searchType);
	}

	/**
	 * Listeners should always be called on the client thread.
	 * @param onItemChosen
	 * @param onItemDeleted
	 */
	public void doItemSearch(Consumer<SelectionResult> onItemChosen, Runnable onItemDeleted, SearchType searchType) {
		doItemSearch(onItemChosen, onItemDeleted, searchType, null);
	}

	public void doItemSearch(Consumer<SelectionResult> onItemChosen, Runnable onItemDeleted, SearchType searchType, Swap swap) {
        if (client.getGameState() != GameState.LOGGED_IN)
        {
            JOptionPane.showMessageDialog(pluginPanel,
                    "This plugin uses the in-game item search panel; you must be logged in to use this.",
                    "Log in to choose items",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        chatboxPanelManager.close();
        // invokelater is necessary because the close call above calls invokelater internally, and we want to run after that.
        clientThread.invokeLater(() -> {
			itemSearch.tooltipText("select");
			itemSearch.onItemSelected(onItemChosen);
			itemSearch.onItemDeleted(onItemDeleted);
			itemSearch.setType(searchType);
			itemSearch.onItemMouseOvered(
				searchType == MODEL_SWAP ?
					itemId -> setPreviewItem(itemId, swap != null && (swap.animationReplacements.isEmpty() || swap.animationReplacements.size() == 1 && swap.animationReplacements.get(0).auto != -1)) :
				searchType == SPELL_R ?
					spellId -> {if (spellId != -1) demoCast(Constants.projectilesById[spellId]);} :
					null
			);
			itemSearch.build();
			clientUI.requestFocus();
		});
	}

	private void setPreviewItem(Integer itemId, boolean previewAnimations)
	{
		previewItem = itemId;
		transmogManager.changeTransmog();

		AnimationSet animationSet = Constants.getAnimationSet(itemId);
		previewAnimationReplacements = animationSet == null || !previewAnimations ? null : new AnimationReplacements(Collections.singletonList(new AnimationReplacement(animationSet, ALL)));
		updateAnimations();
	}

	public AsyncBufferedImage getItemImage(int itemId) {
        return itemManager.getImage(itemId);
    }

	public BufferedImage getSpellImage(ProjectileCast projectileCast)
	{
		return projectileCast.getSpriteIdIcon() != -1 ?
			spriteManager.getSprite(projectileCast.getSpriteIdIcon(), 0) :
			itemManager.getImage(projectileCast.getItemIdIcon(), 1000, false)
			;
	}

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOGIN_SCREEN) {
			if (transmogSets != null) { // Can be null during plugin startup.
				showSidePanel(!config.hideSidePanel());
			}
			lastTickProjectiles.clear(); // avoid potential memory leak.
        } else if (event.getGameState() == GameState.LOGGED_IN) {
        	// This is necessary for transmog to show up on teleports.
			if (client.getLocalPlayer() == null) return; // happens during dcs?
        	if (client.getLocalPlayer().getPlayerComposition() != null) transmogManager.reapplyTransmog();
		}
	}

	public void demoAnimation(Integer animation) {
		Player player = client.getLocalPlayer();
		if (player != null)
		{
			player.setAnimation(animation);
			player.setAnimationFrame(0);
			if (currentScytheGraphicEffect != null) doScytheSwing();
		}
    }

	public Integer getWikiScrapeSlot(int itemId) {
		ItemStats itemStats = itemManager.getItemStats(itemId);
		if (itemStats == null) return null;
		ItemEquipmentStats equipment = itemStats.getEquipment();
		if (equipment == null) return null;
		return equipment.getSlot();
	}

	public Integer[] getApplicableModelSwaps()
	{
		Integer[] genericTransmog = new Integer[KitType.values().length];
		Integer[] specificTransmog = new Integer[KitType.values().length];

		for (Swap swap : getApplicableSwaps())
		{
			Integer[] transmogMap = swap.appliesSpecificallyToGear(equippedItemsFromKit, this) ? specificTransmog : genericTransmog;
			for (Integer modelSwap : swap.getModelSwaps())
			{
				SlotAndKitId slotForItem = getSlotAndKitForItem(modelSwap, swap);
				if (slotForItem != null && transmogMap[slotForItem.slot] == null) {
					transmogMap[slotForItem.slot] = slotForItem.kitId;
				}
			}
		}

		for (int i = 0; i < specificTransmog.length; i++)
		{
			if (specificTransmog[i] != null)
			{
				genericTransmog[i] = specificTransmog[i];
			}
		}

		if (previewItem != -1) {
			SlotAndKitId slotForItem = getSlotAndKitForItem(previewItem, null);
			if (slotForItem != null) {
				genericTransmog[slotForItem.slot] = slotForItem.kitId;
			}
		}

		return genericTransmog;
	}

	private List<Swap> getApplicableSwaps()
	{
		return transmogSets.stream()
			.filter(TransmogSet::isEnabled)
			.flatMap(set -> set.getSwaps().stream())
			.filter(swap -> swap.appliesToGear(equippedItemsFromKit, this))
			.collect(Collectors.toList());
	}

	@Value
	public static class SlotAndKitId {
		int slot;
		int kitId;
	}

	public Integer getMySlot(int modelSwap)
	{
		if (modelSwap < 0) {
			Constants.NegativeId negativeId = mapNegativeId(modelSwap);
			if (negativeId.type == HIDE_SLOT || negativeId.type == SHOW_SLOT) {
				return negativeId.id;
			}
			else
			{
				return null;
			}
		}
		else
		{
			return getSlotForNonNegativeModelId(modelSwap);
		}
	}

	public Integer getSlotForNonNegativeModelId(int modelSwap)
	{
		Integer slot = Constants.SLOT_OVERRIDES.get(modelSwap);
		// if the slot is -1, use the wiki slot to prevent messing up people's transmogs if they added the item prior to me making it -1.
		if (slot != null && slot != -1) {
			return slot;
		}

		ItemStats itemStats = itemManager.getItemStats(modelSwap);
		if (itemStats == null || itemStats.getEquipment() == null) return null;
		return itemStats.getEquipment().getSlot();
	}

	public SlotAndKitId getSlotAndKitForItem(int modelSwap, Swap swap)
	{
		if (modelSwap < 0) {
			Constants.NegativeId negativeId = mapNegativeId(modelSwap);
			if (negativeId.type == HIDE_SLOT) {
				return new SlotAndKitId(negativeId.id, 0);
			} else if (negativeId.type == SHOW_SLOT) {
				return new SlotAndKitId(negativeId.id, TransmogrificationManager.SHOW_SLOT);
			} else {
				return null;
			}
		}

		int slotOverride = swap != null ? swap.getSlotOverride(modelSwap) : -1;
		if (slotOverride == -1) {
			Integer slot = getSlotForNonNegativeModelId(modelSwap);
			slotOverride = slot != null ? slot : WEAPON_SLOT;
		}
		return new SlotAndKitId(slotOverride, modelSwap);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e) {
		if (e.getGroup().equals(GROUP_NAME)) {
			if (e.getKey().equals("hideSidePanel")) {
				showSidePanel(!config.hideSidePanel());
			}
		}
	}

	private void showSidePanel(boolean showSidePanel)
	{
		SwingUtilities.invokeLater(() -> {
			if (showSidePanel) {
				if (navigationButton != null) return;

				pluginPanel = new WeaponAnimationReplacerPluginPanel(this);
				pluginPanel.rebuild();

				final BufferedImage icon = ImageUtil.loadImageResource(WeaponAnimationReplacerPlugin.class, "panel_icon.png");

				navigationButton = NavigationButton.builder()
					.tooltip("Weapon Animation Replacer")
					.icon(icon)
					.priority(5)
					.panel(pluginPanel)
					.build();

				clientToolbar.addNavigation(navigationButton);
			} else {
				if (navigationButton == null) return;

				clientToolbar.removeNavigation(navigationButton);
				navigationButton = null;
				pluginPanel = null;
			}
		});
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted e) {
		if (e.getCommand().equals("warpmsg")) {
			msg = !msg;
			client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "weapon animation replacer messages " + (msg ? "on" : "off"), "");
		}
	}

	boolean msg = false;
	private void msg(String s) {
		if (msg) client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", s, "");
	}

	private TransmogSetPanel.ProjectileIdsFrame frame;
	public void registerProjectileIdsFrame(TransmogSetPanel.ProjectileIdsFrame projectileIdsFrame)
	{
		frame = projectileIdsFrame;
	}
}

package com.weaponanimationreplacer;

import com.weaponanimationreplacer.Swap.AnimationType;
import static com.weaponanimationreplacer.Swap.AnimationType.ATTACK;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class AnimationSet implements Comparable<AnimationSet> {
	public final String name;
	public final int[] animations;
	public final boolean doNotReplace;

	AnimationSet() {
		this("", false, new int[AnimationType.values().length]);
	}

	AnimationSet(String name, boolean doNotReplace, int[] animations) {
		this.name = name;
		this.doNotReplace = doNotReplace;
		assert animations.length == AnimationType.values().length;
		this.animations = animations;
	}

	@Override
	public int compareTo(AnimationSet o) {
		return name.compareTo(o.name);
	}

	public List<AnimationType> getAttackAnimations()
	{
		List<AnimationType> result = new ArrayList<>();
		if (animations[ATTACK.ordinal()] != -1) {
			result.add(AnimationType.values()[ATTACK.ordinal()]);
		}
		for (AnimationType child : ATTACK.children)
		{
			if (animations[child.ordinal()] != -1) {
				result.add(AnimationType.values()[child.ordinal()]);
			}
		}
		return result;
	}

	public static String getDescription(AnimationSet animationSet, AnimationType animation)
	{
		int animationId = animationSet.getAnimation(animation);
		if (animationId != -1) {
			String s = Constants.descriptions.get(animationId);
			if (s != null) return s;
		}
		return animation.getComboBoxName();
	}

	public static AnimationSet getAnimationSet(String name) {
		return Constants.animationSets.stream().filter(a -> name.equals(a.name)).findAny().orElse(null);
	}

	public int getAnimation(AnimationType type) {
		return animations[type.ordinal()];
	}

	public AnimationType getType(int animationId) {
		for (int i = 0; i < animations.length; i++)
		{
			int animation = animations[i];
			if (animation > 0 && animation == animationId) {
				return AnimationType.values()[i];
			}
		}
		return null;
	}

	@Override
	public String toString() {
		return name + " " + Arrays.stream(animations).boxed().collect(Collectors.toList());
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		AnimationSet that = (AnimationSet) o;
		return Objects.equals(name, that.name) && Arrays.equals(animations, that.animations);
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, animations);
	}

	public String getComboBoxName() {
		return name;
	}
}

package com.weaponanimationreplacer;

import com.google.gson.Gson;
import static com.weaponanimationreplacer.Swap.AnimationType.ROTATE;
import static com.weaponanimationreplacer.Swap.AnimationType.SHUFFLE_LEFT;
import static com.weaponanimationreplacer.Swap.AnimationType.SHUFFLE_RIGHT;
import static com.weaponanimationreplacer.Swap.AnimationType.STAND;
import static com.weaponanimationreplacer.Swap.AnimationType.WALK_BACKWARD;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.OptionalInt;
import java.util.Set;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import net.runelite.api.Actor;
import net.runelite.api.ItemID;
import net.runelite.api.kit.KitType;
import static net.runelite.api.kit.KitType.SHIELD;
import net.runelite.client.game.ItemVariationMapping;

public class Constants
{
	public static final int HEAD_SLOT = KitType.HEAD.getIndex();
	public static final int CAPE_SLOT = KitType.CAPE.getIndex();
	public static final int AMULET_SLOT = KitType.AMULET.getIndex();
	public static final int WEAPON_SLOT = KitType.WEAPON.getIndex();
	public static final int TORSO_SLOT = KitType.TORSO.getIndex();
	public static final int SHIELD_SLOT = KitType.SHIELD.getIndex();
	public static final int ARMS_SLOT = KitType.ARMS.getIndex();
	public static final int LEGS_SLOT = KitType.LEGS.getIndex();
	public static final int HAIR_SLOT = KitType.HAIR.getIndex();
	public static final int HANDS_SLOT = KitType.HANDS.getIndex();
	public static final int BOOTS_SLOT = KitType.BOOTS.getIndex();
	public static final int JAW_SLOT = KitType.JAW.getIndex();

	public static Set<Integer> SHOWS_ARMS;
	public static Set<Integer> HIDES_HAIR;
	public static Set<Integer> HIDES_JAW;
	public static Map<String, int[]> poseanims;
	public static List<ProjectileCast> projectiles = new ArrayList<>();
	public static ProjectileCast[] projectilesById = new ProjectileCast[0];

	// key is item id, value is the slot id it should go in. A slot id of -1 means the item should be considered unequippable.
	public static Map<Integer, Integer> SLOT_OVERRIDES = new HashMap<>();
	public static Map<Integer, NameAndIconId> NAME_ICON_OVERRIDES = new HashMap<>();

	public static final List<AnimationSet> animationSets = new ArrayList<>();
	public static final List<Integer> doNotReplaceIdles = new ArrayList<>();
	public static final Map<Integer, String> descriptions = new HashMap<>();

	public static AnimationSet getAnimationSet(int itemId)
	{
		Collection<Integer> variations = ItemVariationMapping.getVariations(ItemVariationMapping.map(itemId));
		for (Map.Entry<String, int[]> entry : poseanims.entrySet())
		{
			for (int itemId2 : entry.getValue())
			{
				if (variations.contains(itemId2)) {
					return AnimationSet.getAnimationSet(entry.getKey());
				}
			}
		}
		return null;
	}

	public static Data getBundledData(Gson gson) {
		InputStream resourceAsStream = Constants.class.getResourceAsStream("data.json");
		Data data = gson.fromJson(new InputStreamReader(resourceAsStream), Data.class);
		return data;
	}

	public static void loadData(Gson gson)
	{
		if (SLOT_OVERRIDES.size() > 0) return; // Already loaded.

		InputStream resourceAsStream = Constants.class.getResourceAsStream("data.json");
		Data data = gson.fromJson(new InputStreamReader(resourceAsStream), Data.class);

		loadData(data);
	}

	public static void loadData(Data data)
	{
		// Load slot overrides.
		for (Map.Entry<Integer, List<Integer>> entry : data.slotOverrides.entrySet())
		{
			int kitIndex = entry.getKey();
			for (Integer itemId : entry.getValue())
			{
				SLOT_OVERRIDES.put(itemId, kitIndex);
			}
		}

		// skis (I want them in the shield slot not the weapon slot. They are marked as equippable though). This is in
		// here as a grandfathered in thing from before you could choose custom slots for items, and it remains here to
		// avoid messing up existing transmog sets.
		addUnequippable(ItemID.SKIS, SHIELD);

		SHOWS_ARMS = data.showArms;
		HIDES_HAIR = data.hideHair;
		HIDES_JAW = data.hideJaw;
		poseanims = data.poseanims;
		NAME_ICON_OVERRIDES = data.nameIconOverrides;
		projectiles = data.projectiles;
		projectilesById = createProjectilesById(projectiles);

		animationSets.clear();
		animationSets.addAll(data.animationSets);
		Collections.sort(animationSets);

		doNotReplaceIdles.clear();
		for (AnimationSet animationSet : animationSets)
		{
			if (animationSet.doNotReplace) {
				doNotReplaceIdles.add(animationSet.getAnimation(STAND));
			}
		}

		descriptions.clear();
		descriptions.putAll(data.descriptions);
	}

	private static ProjectileCast[] createProjectilesById(List<ProjectileCast> projectiles)
	{
		OptionalInt max = projectiles.stream().mapToInt(p -> p.id).max();
		if (!max.isPresent()) {
			return new ProjectileCast[0];
		}
		int highestId = max.getAsInt();
		ProjectileCast[] projectilesById = new ProjectileCast[highestId + 1];
		for (ProjectileCast projectile : projectiles)
		{
			projectilesById[projectile.id] = projectile;
		}
		return projectilesById;
	}

	static final class Data
	{
		int version;
		Set<Integer> showArms;
		Set<Integer> hideHair;
		Set<Integer> hideJaw;
		Map<Integer, List<Integer>> slotOverrides;
		Map<Integer, NameAndIconId> nameIconOverrides;
		Map<String, int[]> poseanims;
		List<ProjectileCast> projectiles;
		public Map<Integer, String> descriptions;
		public List<AnimationSet> animationSets;
	}

	private static void addUnequippable(int itemId, KitType kitType) {
		addUnequippable(itemId, kitType, null);
	}

	private static void addUnequippable(int itemId, KitType kitType, String name) {
		addUnequippable(itemId, kitType, name, -1);
	}

	private static void addUnequippable(int itemId, KitType kitType, String name, int iconId) {
		SLOT_OVERRIDES.put(itemId, kitType.getIndex());
		if (name != null || iconId != -1) {
			NAME_ICON_OVERRIDES.put(itemId, new NameAndIconId(name, iconId));
		}
	}

	public static int getIconId(int itemId)
	{
		NameAndIconId nameAndIconId = NAME_ICON_OVERRIDES.get(itemId);
		return nameAndIconId == null ? itemId : nameAndIconId.iconId(itemId);
	}

	public static String getName(int itemId, String name)
	{
		NameAndIconId nameAndIconId = NAME_ICON_OVERRIDES.get(itemId);
		return nameAndIconId == null ? name : nameAndIconId.name(name);
	}

	@Value
	public static class NameAndIconId {
		String name;
		int iconId;

		public String name(String actualName) {
			return name == null ? actualName : name;
		}

		public int iconId(int actualIconId) {
			return iconId == -1 ? actualIconId : iconId;
		}
	}

	public static Constants.NegativeId mapNegativeId(int id) {
		if (id == -1) return new Constants.NegativeId(Constants.NegativeIdsMap.NULL, -1);
		else if (id <= -2 && id > -2 - KitType.values().length) {
			return new Constants.NegativeId(Constants.NegativeIdsMap.HIDE_SLOT, id * -1 - 2);
		}
		else if (id == -14) {
			return new Constants.NegativeId(Constants.NegativeIdsMap.SHOW_SLOT, ARMS_SLOT);
		}
		else if (id == -15) {
			return new Constants.NegativeId(Constants.NegativeIdsMap.SHOW_SLOT, HAIR_SLOT);
		}
		else if (id == -16) {
			return new Constants.NegativeId(Constants.NegativeIdsMap.SHOW_SLOT, JAW_SLOT);
		}
		throw new IllegalArgumentException();
	}

	public static int mapNegativeId(Constants.NegativeId id) {
		return mapNegativeId(id.type, id.id);
	}

	public static int mapNegativeId(Constants.NegativeIdsMap type, int id) {
		if (type == Constants.NegativeIdsMap.NULL) return -1;
		else if (type == Constants.NegativeIdsMap.HIDE_SLOT) {
			return -2 - id;
		}
		else if (type == Constants.NegativeIdsMap.SHOW_SLOT) {
			if (id == ARMS_SLOT) {
				return -14;
			}
			else if (id == HAIR_SLOT) {
				return -15;
			}
			else if (id == JAW_SLOT) {
				return -16;
			}
		}
		throw new IllegalArgumentException();
	}

	public static IdIconNameAndSlot getModelSwap(int modelSwap) {
		if (modelSwap < 0) {
			NegativeId negativeId = mapNegativeId(modelSwap);
			if (negativeId.type == NegativeIdsMap.HIDE_SLOT)
			{
				HiddenSlot hiddenSlot = HiddenSlot.values()[negativeId.id];
				return new IdIconNameAndSlot(modelSwap, hiddenSlot.iconIdToShow, hiddenSlot.actionName, hiddenSlot.kitType, true);
			}
			else if (negativeId.type == NegativeIdsMap.SHOW_SLOT)
			{
				ShownSlot shownSlot = ShownSlot.values()[negativeId.id];
				return new IdIconNameAndSlot(modelSwap, shownSlot.iconIdToShow, "Show " + shownSlot.kitType.name().toLowerCase(), shownSlot.kitType, false);
			}
			else
			{
				return new IdIconNameAndSlot(-1, -1, null, null, false);
			}
		}
		return null;
	}

	@RequiredArgsConstructor
	public enum HiddenSlot {
		HEAD(KitType.HEAD, ItemID.IRON_MED_HELM, "Hide helm"),
		CAPE(KitType.CAPE, 3779, "Hide cape"),
		AMULET(KitType.AMULET, 1796, "Hide amulet"),
		WEAPON(KitType.WEAPON, ItemID.SHADOW_SWORD, "Hide weapon"),
		TORSO(KitType.TORSO, ItemID.GHOSTLY_ROBE, "Hide torso"),
		SHIELD(KitType.SHIELD, ItemID.IRON_SQ_SHIELD, "Hide off hand"),
		ARMS(KitType.ARMS, ItemID.EXPEDITIOUS_BRACELET, "Hide sleeves"),
		LEGS(KitType.LEGS, ItemID.GHOSTLY_ROBE_6108, "Hide legs"),
		HAIR(KitType.HAIR, 2421, "Hide hair"),
		HANDS(KitType.HANDS, 21736, "Hide hands"),
		BOOTS(KitType.BOOTS, ItemID.IRON_BOOTS, "Hide boots"),
		JAW(KitType.JAW, 4593, "Hide jaw"),
		;

		final KitType kitType;
		final int iconIdToShow;
		public final String actionName;
	}

	@RequiredArgsConstructor
	public enum ShownSlot {
		HEAD(KitType.HEAD, ItemID.IRON_MED_HELM),
		CAPE(KitType.CAPE, 3779),
		AMULET(KitType.AMULET, 1796),
		WEAPON(KitType.WEAPON, ItemID.SHADOW_SWORD),
		TORSO(KitType.TORSO, ItemID.GHOSTLY_ROBE),
		SHIELD(KitType.SHIELD, ItemID.IRON_SQ_SHIELD),
		ARMS(KitType.ARMS, ItemID.GOLD_BRACELET),
		LEGS(KitType.LEGS, ItemID.GHOSTLY_ROBE_6108),
		HAIR(KitType.HAIR, 2419),
		HANDS(KitType.HANDS, 21736),
		BOOTS(KitType.BOOTS, ItemID.IRON_BOOTS),
		JAW(KitType.JAW, ItemID.BASILISK_JAW),
		;

		final KitType kitType;
		final int iconIdToShow;
	}

	public enum ActorAnimation
	{
		IDLE(Actor::getIdlePoseAnimation, Actor::setIdlePoseAnimation, STAND),
		IDLE_ROTATE_LEFT(Actor::getIdleRotateLeft, Actor::setIdleRotateLeft, ROTATE),
		IDLE_ROTATE_RIGHT(Actor::getIdleRotateRight, Actor::setIdleRotateRight, ROTATE),
		WALK(Actor::getWalkAnimation, Actor::setWalkAnimation, Swap.AnimationType.WALK),
		WALK_ROTATE_180(Actor::getWalkRotate180, Actor::setWalkRotate180, WALK_BACKWARD),
		WALK_ROTATE_LEFT(Actor::getWalkRotateLeft, Actor::setWalkRotateLeft, SHUFFLE_LEFT),
		WALK_ROTATE_RIGHT(Actor::getWalkRotateRight, Actor::setWalkRotateRight, SHUFFLE_RIGHT),
		RUN(Actor::getRunAnimation, Actor::setRunAnimation, Swap.AnimationType.RUN),
		;

		interface AnimationGetter
		{
			int getAnimation(Actor a);
		}

		interface AnimationSetter
		{
			void setAnimation(Actor a, int animationId);
		}

		@Getter
		private final Swap.AnimationType type;
		private final AnimationGetter animationGetter;
		private final AnimationSetter animationSetter;

		ActorAnimation(AnimationGetter animationGetter, AnimationSetter animationSetter, Swap.AnimationType type)
		{
			this.type = type;
			this.animationGetter = animationGetter;
			this.animationSetter = animationSetter;
		}

		public int getAnimation(Actor actor)
		{
			return animationGetter.getAnimation(actor);
		}

		public void setAnimation(Actor actor, int animationId)
		{
			animationSetter.setAnimation(actor, animationId);
		}
	}

	public enum NegativeIdsMap {
		NULL,
		HIDE_SLOT,
		SHOW_SLOT,
//		SLEEVES,
//		HAIR,
//		JAW,
		;
	}

	@RequiredArgsConstructor
		public static final class NegativeId {
		public final NegativeIdsMap type;
		public final int id;
	}

	@Value
	public static class IdIconNameAndSlot
	{
		int id;
		int iconId;
		String name;
		KitType kitType;
		boolean showNotSign;
	}

	public static final class TriggerItemIds {
		public static final List<IdIconNameAndSlot> EMPTY_SLOTS = new ArrayList<>();
		static {
			for (int i = 0; i < KitType.values().length; i++)
			{
				EMPTY_SLOTS.add(new IdIconNameAndSlot(-i - 1_000_000, HiddenSlot.values()[i].iconIdToShow, "empty " + KitType.values()[i].name().toLowerCase() + " slot", KitType.values()[i], true));
			}
		}

		public static IdIconNameAndSlot getHiddenSlot(int itemId) {
			if (itemId > -1_000_000) {
				return null;
			}
			return EMPTY_SLOTS.get(-itemId - 1_000_000);
		}
	}
}

package com.weaponanimationreplacer;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import net.runelite.client.plugins.screenmarkers.ScreenMarkerPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.ImageUtil;

public class WeaponAnimationReplacerPluginPanel extends PluginPanel {
    private static final ImageIcon ADD_ICON;
    private static final ImageIcon ADD_HOVER_ICON;

    private static final Color DEFAULT_BORDER_COLOR = Color.GREEN;
    private static final Color DEFAULT_FILL_COLOR = new Color(0, 255, 0, 0);

    private static final int DEFAULT_BORDER_THICKNESS = 3;

    private final JLabel addMarker = new JLabel(ADD_ICON);
    private final JLabel title = new JLabel();
    private final PluginErrorPanel noMarkersPanel = new PluginErrorPanel();
    private final JPanel markerView = new JPanel(new GridBagLayout());

    private final WeaponAnimationReplacerPlugin plugin;

    @Getter
    private Color selectedColor = DEFAULT_BORDER_COLOR;

    @Getter
    private Color selectedFillColor = DEFAULT_FILL_COLOR;

    @Getter
    private int selectedBorderThickness = DEFAULT_BORDER_THICKNESS;

	Swap currentlyEditingThisSwap = null;
	int currentlyEditingThisProjectileSwapIndex = -1;

	static
    {
        final BufferedImage addIcon = ImageUtil.loadImageResource(ScreenMarkerPlugin.class, "add_icon.png");
        ADD_ICON = new ImageIcon(addIcon);
        ADD_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(addIcon, 0.53f));
    }

    public WeaponAnimationReplacerPluginPanel(WeaponAnimationReplacerPlugin weaponAnimationReplacerPlugin)
    {
        this.plugin = weaponAnimationReplacerPlugin;

        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(10, 10, 10, 10));

        JPanel northPanel = new JPanel(new BorderLayout());
        northPanel.setBorder(new EmptyBorder(1, 0, 10, 0));

        title.setText("Transmog sets");
        title.setBackground(ColorScheme.DARK_GRAY_COLOR);
        title.setForeground(Color.WHITE);

        northPanel.add(title, BorderLayout.WEST);
        northPanel.add(addMarker, BorderLayout.EAST);

        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        markerView.setBackground(ColorScheme.DARK_GRAY_COLOR);

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 1;
        constraints.gridx = 0;
        constraints.gridy = 0;

        noMarkersPanel.setContent("There's nothing interesting here.", "Click the green \"+\" button.");
        noMarkersPanel.setVisible(false);

        markerView.add(noMarkersPanel, constraints);
        constraints.gridy++;

        addMarker.setToolTipText("Add a new transmog set.");
        addMarker.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent mouseEvent)
            {
                plugin.addNewTransmogSet(0);
            }

            @Override
            public void mouseEntered(MouseEvent mouseEvent)
            {
                addMarker.setIcon(ADD_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent mouseEvent)
            {
                addMarker.setIcon(ADD_ICON);
            }
        });

        centerPanel.add(markerView, BorderLayout.CENTER);

        add(northPanel, BorderLayout.NORTH);
        add(centerPanel, BorderLayout.CENTER);
    }

    public void rebuild()
    {
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 1;
        constraints.gridx = 0;
        constraints.gridy = 0;

        markerView.removeAll();

        int index = 0;
        for (TransmogSet transmogSet : plugin.getTransmogSets())
        {
            markerView.add(new TransmogSetPanel(plugin, transmogSet, this, index++), constraints);
            constraints.gridy++;

            markerView.add(Box.createRigidArea(new Dimension(0, 10)), constraints);
            constraints.gridy++;
        }

        boolean empty = constraints.gridy == 0;
        noMarkersPanel.setVisible(empty);
        title.setVisible(!empty);

        markerView.add(noMarkersPanel, constraints);
        constraints.gridy++;

//        markerView.add(creationPanel, constraints);
//        constraints.gridy++;
//
        repaint();
        revalidate();
    }

    public void deleteNewRule(int index) {

    }

    public void addNewRule(int index) {
    }
}

package com.weaponanimationreplacer;

import static com.weaponanimationreplacer.Swap.AnimationReplacement;
import java.util.ArrayList;
import java.util.List;
import lombok.Data;

/**
 * Represents a set of:
 *  Configurable name to describe what this does.
 *  List of weapon slot items that this should be used with. If there are none, it applies always.
 *  List of animation replacements, which each contain an animation type to replace, and animation set to use for replacement, and, optionally, an animation type to use as the replacement (if it is different from the one being replaced).
 */
public class AnimationReplacementRule_OLD {
	String name = "";
	public int modelSwap = -1;
	public List<ItemRestriction> itemRestrictions;
	public List<AnimationReplacement> animationReplacements;

	public AnimationReplacementRule_OLD(List<ItemRestriction> itemRestrictions, List<AnimationReplacement> animationReplacements) {
		this.itemRestrictions = itemRestrictions;
		this.animationReplacements = animationReplacements;
	}

	public static AnimationReplacementRule_OLD createTemplate(AnimationSet animationSet) {
		List<ItemRestriction> itemRestrictions = new ArrayList<>();
		List<AnimationReplacement> animationReplacements = new ArrayList<>();
		AnimationReplacementRule_OLD animationReplacementRule = new AnimationReplacementRule_OLD(itemRestrictions, animationReplacements);
		animationReplacementRule.name = "New Replacement";
		return animationReplacementRule;
	}

	@Data
	public static class ItemRestriction {
		boolean enabled;
		int itemId;

		public ItemRestriction(int itemId) {
			this(itemId, true);
		}

		public ItemRestriction(int itemId, boolean enabled) {
			this.itemId = itemId;
			this.enabled = enabled;
		}

		public boolean appliesToItem(int itemId) {
			return enabled && itemId == this.itemId;
		}
	}
}

package com.weaponanimationreplacer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(WeaponAnimationReplacerPlugin.GROUP_NAME)
public interface WeaponAnimationReplacerConfig extends Config
{
	@ConfigItem(
		keyName = "showUnequippableItems",
		name = "Search all items",
		description = "Include all items when searching for model swaps, which may include new items that runelite does not yet know are equippable,<br/>" +
			"as well as items that are not equippable but do have player models.<br/>" +
			"These items do not have equip slot information, so you will have to right-click the item in the search interface and choose an equip slot.<br/>" +
			"This also includes items with no player model."
	)
	default boolean showUnequippableItems()
	{
		return false;
	}

	@ConfigItem(
		keyName = "hideSidePanel",
		name = "Hide side panel",
		description = "",
		position = 1
	)
	default boolean hideSidePanel()
	{
		return false;
	}
}

package com.weaponanimationreplacer;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multimap;
import com.google.gson.reflect.TypeToken;
import static com.weaponanimationreplacer.Constants.ARMS_SLOT;
import static com.weaponanimationreplacer.Constants.ActorAnimation.IDLE;
import static com.weaponanimationreplacer.Constants.ActorAnimation.IDLE_ROTATE_LEFT;
import static com.weaponanimationreplacer.Constants.ActorAnimation.IDLE_ROTATE_RIGHT;
import static com.weaponanimationreplacer.Constants.ActorAnimation.RUN;
import static com.weaponanimationreplacer.Constants.ActorAnimation.WALK;
import static com.weaponanimationreplacer.Constants.ActorAnimation.WALK_ROTATE_180;
import static com.weaponanimationreplacer.Constants.ActorAnimation.WALK_ROTATE_LEFT;
import static com.weaponanimationreplacer.Constants.ActorAnimation.WALK_ROTATE_RIGHT;
import static com.weaponanimationreplacer.Constants.ActorAnimation.values;
import static com.weaponanimationreplacer.Constants.HAIR_SLOT;
import static com.weaponanimationreplacer.Constants.HEAD_SLOT;
import static com.weaponanimationreplacer.Constants.JAW_SLOT;
import static com.weaponanimationreplacer.Constants.SLOT_OVERRIDES;
import static com.weaponanimationreplacer.Constants.TORSO_SLOT;
import static com.weaponanimationreplacer.Constants.WEAPON_SLOT;
import static com.weaponanimationreplacer.Constants.mapNegativeId;
import static com.weaponanimationreplacer.ProjectileCast.p;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.PlayerComposition;
import static net.runelite.api.PlayerComposition.ITEM_OFFSET;
import net.runelite.api.Projectile;
import net.runelite.api.SpriteID;
import net.runelite.api.WorldType;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.PlayerChanged;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.api.events.ProjectileMoved;
import net.runelite.api.kit.KitType;
import static net.runelite.api.kit.KitType.AMULET;
import static net.runelite.api.kit.KitType.CAPE;
import static net.runelite.api.kit.KitType.HANDS;
import static net.runelite.api.kit.KitType.HEAD;
import static net.runelite.api.kit.KitType.LEGS;
import static net.runelite.api.kit.KitType.SHIELD;
import static net.runelite.api.kit.KitType.TORSO;
import static net.runelite.api.kit.KitType.WEAPON;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ClientShutdown;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemVariationMapping;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;
import net.runelite.http.api.item.ItemEquipmentStats;
import net.runelite.http.api.item.ItemStats;

@Slf4j
@PluginDescriptor(
	name = "[Tools] Weapon/Gear/Anim Replacer",
	description = "",
	tags = {"transmog", "fashionscape"}
)
@PluginDependency(WeaponAnimationReplacerPlugin.class)
public class WeaponAnimationReplacerToolsPlugin extends Plugin
{
	@Inject private WeaponAnimationReplacerPlugin plugin;
	@Inject private ItemManager itemManager;
	@Inject private ClientThread clientThread;
	@Inject private Client client;

	@Inject
	private EventBus eventBus;

	int demoanim = -1;
	int demogfx = -1;

	private final Set<Integer> hidesArms = new HashSet<>();
	private final Set<Integer> hidesHair = new HashSet<>();
	private final Set<Integer> hidesJaw = new HashSet<>();
	private final Set<Integer> showsArms = new HashSet<>();
	private final Set<Integer> showsHair = new HashSet<>();
	private final Set<Integer> showsJaw = new HashSet<>();
	private final Set<Integer> uhohList = new HashSet<>();
	private Set<Integer>[] sets = new Set[]{hidesArms, hidesHair, hidesJaw, showsArms, showsHair, showsJaw, uhohList};
	private String[] fileNames = new String[]{"hidesArms.json", "hidesHair.json", "hidesJaw.json", "showsArms.json", "showsHair.json", "showsJaw.json", "uhoh.json"};
	private final Map<Integer, Set<List<Integer>>> poseanims = new HashMap<>();

	@Override
	public void startUp()
	{
		SpellDataCollector sdc = new SpellDataCollector(plugin);
		this.getInjector().injectMembers(sdc);
		eventBus.register(sdc);

		for (int i = 0; i < fileNames.length; i++)
		{
			String fileName = fileNames[i];
			System.out.println("reading " + fileName);
			Set<Integer> set = sets[i];
			set.clear();
			try
			{
				FileReader reader = new FileReader(RuneLite.RUNELITE_DIR.toPath().resolve(fileName).toFile());
				set.addAll(plugin.getGson().fromJson(reader, new TypeToken<Set<Integer>>() {}.getType()));
				System.out.println(set);
				reader.close();
			} catch (Exception e) {
				// is ok, set is cleared.
			}
		}
		poseanims.clear();
		try
		{
			FileReader reader = new FileReader(RuneLite.RUNELITE_DIR.toPath().resolve("poseanims.json").toFile());
			poseanims.putAll(plugin.getGson().fromJson(reader, new TypeToken<Map<Integer, Set<List<Integer>>>>() {}.getType()));
			System.out.println(poseanims);
			reader.close();
		} catch (Exception e) {
			// is ok, set is cleared.
		}
	}

	@Override
	public void shutDown() {
		for (int i = 0; i < fileNames.length; i++)
		{
			String fileName = fileNames[i];
			Set<Integer> set = sets[i];
			System.out.println("writing " + fileName + " " + set);
			try
			{
				FileWriter writer = new FileWriter(RuneLite.RUNELITE_DIR.toPath().resolve(fileName).toFile());
				plugin.getGson().toJson(set, writer);
				writer.close();
			} catch (Exception e) {
				e.printStackTrace(System.out);
				System.out.println("exception");
				// is ok, set is cleared.
			}
		}
		try
		{
			FileWriter writer = new FileWriter(RuneLite.RUNELITE_DIR.toPath().resolve("poseanims.json").toFile());
			plugin.getGson().toJson(poseanims, writer);
			writer.close();
		} catch (Exception e) {
			System.out.println("exception");
			// is ok, set is cleared.
		}
	}

	@Subscribe
	public void onClientShutdown(ClientShutdown e) {
		shutDown();
	}

	private ProjectileCast manualSpellCastNoCastGfx = null;

	@Subscribe(priority = 100)
	public void onPlayerSpawned(PlayerSpawned e) {
		if (e.getPlayer() == client.getLocalPlayer()) return; // Sometimes I get wrong data from transmog I have applied to myself.
//		System.out.println("playerSpawned " + e.getPlayer().getName());
		getPlayerData(e.getPlayer());
	}

	@Subscribe(priority = 100)
	public void onPlayerChanged(PlayerChanged e) {
//		System.out.println("playerchanged " + e.getPlayer().getName());
		Player player = e.getPlayer();
		getPlayerData(player);
	}

	private void getPlayerData(Player player)
	{
//		System.out.println(player.getName());
		PlayerComposition comp = player.getPlayerComposition();
		int[] kits = comp.getEquipmentIds();
		int body = kits[TORSO_SLOT] - ITEM_OFFSET;
		int arms = kits[ARMS_SLOT];
		int head = kits[HEAD_SLOT] - ITEM_OFFSET;
		int hair = kits[HAIR_SLOT];
		int jaw = kits[JAW_SLOT];
		boolean female = comp.getGender() == 1;
//		System.out.println(plugin.itemName(body) + " " + arms + " " + plugin.itemName(head) + " " + hair + (female ? "" : (" " + jaw)));
		boolean uhoh = false;
		if (body >= 0) {
			boolean b = updateLists(body, arms, hidesArms, showsArms, "arms", female);
			if (b) uhohList.add(body);
			uhoh |= b;
		}
		if (head >= 0) {
			boolean b = updateLists(head, hair, hidesHair, showsHair, "hair", female);
			if (b) uhohList.add(body);
			uhoh |= b;
			if (!female)
			{
				if (jaw < 1000) { // do not record stuff for blue icon smuggle.
					boolean c = updateLists(head, jaw, hidesJaw, showsJaw, "jaw", female);
					if (c) uhohList.add(body);
					uhoh |= c;
				}
			}
		}
		if (uhoh) System.out.println("\tuhoh " + player.getName() + " " + Arrays.stream(kits).boxed().collect(Collectors.toList()) + " " + female);

		int weapon = kits[WEAPON_SLOT] - ITEM_OFFSET;
		if (weapon >= 0) {
			if (plugin.itemManager.getItemComposition(weapon).isMembers() && !client.getWorldType().contains(WorldType.MEMBERS))
				return;

			int idlePoseAnimation = player.getIdlePoseAnimation();
			if (
				idlePoseAnimation == 8070 ||
					idlePoseAnimation == 763 ||
					idlePoseAnimation == 745 ||
					idlePoseAnimation == 773 ||
					idlePoseAnimation == 765 ||
					idlePoseAnimation == 3418 ||
					idlePoseAnimation == 6998 ||
					idlePoseAnimation == 845
			) {
				return;
			}

			Set<List<Integer>> lists = poseanims.getOrDefault(weapon, new HashSet<>());
//			int stand, int rotate, int walk, int walkBackwards, int shuffleLeft, int shuffleRight, int run) {
			List<Integer> currentPoseanims = Arrays.asList(
				player.getIdlePoseAnimation(),
				player.getIdleRotateRight(),
				player.getWalkAnimation(),
				player.getWalkRotate180(),
				player.getWalkRotateLeft(),
				player.getWalkRotateRight(),
				player.getRunAnimation(),
				player.getIdleRotateLeft()
			);
			if (!lists.contains(currentPoseanims)) {
				System.out.println("not duplicate: " + plugin.itemManager.getItemComposition(weapon).getName() + " " + currentPoseanims);
			}
//			System.out.println("not duplicate: " + plugin.itemManager.getItemComposition(weapon).getName() + " " + currentPoseanims);
			lists.add(currentPoseanims);
			poseanims.put(weapon, lists);
		}
	}

	private boolean updateLists(int body, int arms, Set<Integer> hiddenSet, Set<Integer> shownSet, String name, boolean female)
	{
		boolean hidden = arms == 0;
		boolean uhoh = false;
		Set<Integer> wrongList = !hidden ? hiddenSet : shownSet;
		Set<Integer> rightList = hidden ? hiddenSet : shownSet;
		if (wrongList.contains(body)) {
			System.out.println("(uh oh) " + name + " " + (hidden ? "hidden" : "shown") + " for " + plugin.itemName(body) + " " + body);
			uhoh = true;
			System.out.println(female);
			new Exception().printStackTrace(System.out);
			wrongList.remove(body);
		} else {
			if (!rightList.contains(body)) {
				System.out.println(name + " " + (hidden ? "hidden" : "shown") + " for " + plugin.itemName(body) + " " + body);
			} else {
//				System.out.println(name + " " + (hidden ? "hidden" : "shown") + " for " + plugin.itemName(body));
			}
		}
		rightList.add(body);
		return uhoh;
	}

	public static final Map<Integer, Integer> OVERRIDE_EQUIPPABILITY_OR_SLOT = new HashMap<>();

	private static void addUnequippable(int itemId, KitType kitType) {
		addUnequippable(itemId, kitType, null);
	}

	@Subscribe
	public void onProjectileMoved(ProjectileMoved projectileMoved) {
		Projectile projectile = projectileMoved.getProjectile();

		// skip already seen projectiles.
		if (client.getGameCycle() > projectile.getStartCycle()) {
			return;
		}

		LocalPoint point = client.getLocalPlayer().getLocalLocation();
		int plane = client.getLocalPlayer().getWorldLocation().getPlane();
		int sceneX = point.getSceneX();
		int sceneY = point.getSceneY();
		if (sceneX >= 0 && sceneY >= 0 && sceneX < 104 && sceneY < 104) {
			byte[][][] tileSettings = client.getTileSettings();
			int[][][] tileHeights = client.getTileHeights();
			int z1 = plane;
			if (plane < 3 && (tileSettings[1][sceneX][sceneY] & 2) == 2) {
				z1 = plane + 1;
			}

			int x = point.getX() & 127;
			int y = point.getY() & 127;
			int var8 = x * tileHeights[z1][sceneX + 1][sceneY] + (128 - x) * tileHeights[z1][sceneX][sceneY] >> 7;
			int var9 = tileHeights[z1][sceneX][sceneY + 1] * (128 - x) + x * tileHeights[z1][sceneX + 1][sceneY + 1] >> 7;
			int height = projectile.getHeight();
			int tileHeight = Perspective.getTileHeight(client, client.getLocalPlayer().getLocalLocation(), client.getLocalPlayer().getWorldLocation().getPlane());
			System.out.println(height + " " + tileHeight + " " + var8 + " " + var9);
			System.out.println(height + " " + (height - tileHeight) + " " + (height - var8) + " " + (height - var9));
//			return (128 - y) * var8 + y * var9 >> 7;
//		} else {
//			return 0;
		}

		System.out.println(Perspective.getTileHeight(client, client.getLocalPlayer().getLocalLocation(), client.getLocalPlayer().getWorldLocation().getPlane()));
		System.out.println(
				projectile.getId() + ", " +
				(projectile.getStartCycle() - client.getGameCycle()) + ", " +
				projectile.getStartHeight() + ", " +
				projectile.getEndHeight() + ", " +
					projectile.getHeight() + " " + projectile.getZ() + " " +
				projectile.getSlope() + ", "
		);

		for (Player clientPlayer : client.getPlayers())
		{
			final WorldPoint playerPos = clientPlayer.getWorldLocation();
			if (playerPos == null)
			{
				return;
			}

			final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
			if (playerPosLocal == null)
			{
				return;
			}

			if (projectile.getX1() == playerPosLocal.getX() && projectile.getY1() == playerPosLocal.getY())
			{
				System.out.println(
					clientPlayer.getAnimation() + ", " +
						clientPlayer.getGraphic() + ", " +
						projectile.getId() + ", " +
						(clientPlayer.getInteracting() != null ? clientPlayer.getInteracting().getGraphic() : "-1") + ", " +
						(projectile.getStartCycle() - client.getGameCycle()) + ", " +
						projectile.getStartHeight() + ", " +
						projectile.getEndHeight() + ", " +
						projectile.getSlope() + ", " +
						(clientPlayer.getInteracting() != null ? clientPlayer.getInteracting().getGraphicHeight() : "-1")
				);
			}
		}
	}
	public static final Map<Integer, Constants.NameAndIconId> EQUIPPABLE_ITEMS_NOT_MARKED_AS_EQUIPMENT_NAMES = new HashMap<>();

	private void listUnseen(Set<Integer> shows, Set<Integer> hides, KitType kitType)
	{
		System.out.println("shows " + shows);
		System.out.println("hides " + hides);
		for (Integer showsArm : shows)
		{
			if (hides.contains(showsArm)) {

				System.out.println("dupe id " + showsArm);
			}
		}
		Set<Integer> s = new HashSet<>();
		s.addAll(shows);
		s.addAll(hides);
		System.out.println(s.size() + " " + s);
		int count = 0;
		int countf2p = 0;
		for (int i = 0; i < client.getItemCount(); i++)
		{
			if (s.contains(i)) continue;
			ItemStats itemStats = itemManager.getItemStats(i, false);
			if (
				itemStats != null
				&& itemStats.isEquipable()
				&& itemStats.getEquipment().getSlot() == kitType.getIndex()
				&& itemManager.getItemComposition(i).getPlaceholderTemplateId() == -1
				&& itemManager.getItemComposition(i).getNote() == -1
			) {
				System.out.println(itemManager.getItemComposition(i).getName() + " " + i);
				count++;
			}
		}
		System.out.println(count);
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted commandExecuted) {
		System.out.println(commandExecuted.getCommand());
		String[] arguments = commandExecuted.getArguments();
		List<String> argumentsList = Arrays.asList(commandExecuted.getArguments());
		String command = commandExecuted.getCommand();

		if (command.equals("sfx")) {
			int i = Integer.parseInt(arguments[0]);
			client.playSoundEffect(i);
		}

		if (command.equals("listunseen"))
		{
			System.out.println("arms");
			listUnseen(showsArms, hidesArms, TORSO);

			System.out.println("hair");
			listUnseen(showsHair, hidesHair, HEAD);

			System.out.println("jaw");
			listUnseen(showsJaw, hidesJaw, HEAD);

			for (Map.Entry<Integer, Set<List<Integer>>> entry : poseanims.entrySet())
			{
				int itemId = entry.getKey();
				String name = itemManager.getItemComposition(itemId).getName();
				Set<List<Integer>> poseanims = entry.getValue();
				if (poseanims.size() > 1) {
					System.out.println("more than 1: " + name + " " + itemId + " " + poseanims);
				} else {
					List<Integer> next = poseanims.iterator().next();
					boolean foundMatch = false;
					if (!Objects.equals(next.get(1), next.get(7))) {
						System.out.println("different rotate animations! " + name + " " + itemId + " " + next.get(1) + " " + next.get(7));
					}
					for (AnimationSet animationSet : Constants.animationSets)
					{
						if (
							Objects.equals(animationSet.getAnimation(Swap.AnimationType.STAND), next.get(0))
							&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.ROTATE), next.get(1))
							&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.WALK), next.get(2))
							&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.WALK_BACKWARD), next.get(3))
							&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.SHUFFLE_LEFT), next.get(4))
							&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.SHUFFLE_RIGHT), next.get(5))
							&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.RUN), next.get(6))
						) {
							foundMatch = true;
							break;
						}
					}
					if (!foundMatch) {
						System.out.println("no match: " + name + " " + itemId + " " + next);
					}
				}
			}
		}

		if (command.equals("weapondata")) {
			System.out.println("weapondata");
			Set<Integer> seen = new HashSet<>();
			for (int i = 0; i < client.getItemCount(); i++)
			{
				ItemComposition comp = itemManager.getItemComposition(i);
				if (comp.getPlaceholderTemplateId() != -1 || comp.getNote() != -1) continue;

				Integer mySlot = SLOT_OVERRIDES.get(i);
				ItemStats itemStats = itemManager.getItemStats(i, false);
				Integer wikiSlot = itemStats != null && itemStats.isEquipable() ? itemStats.getEquipment().getSlot() : null;
				if (mySlot == null) mySlot = wikiSlot;
				if (mySlot == null) continue;
				if (mySlot == -1) continue;
				if (mySlot != WEAPON_SLOT) continue;

				int baseId = ItemVariationMapping.map(i);
				if (seen.contains(baseId)) continue;
				seen.add(baseId);

				List<AnimationSet> matchingSets = findMatchingAnimationSets(i);
				List<String> matchingSetNames = matchingSets.stream().map(set -> set.name).collect(Collectors.toList());
				System.out.println("weapon " + i + " " + comp.getMembersName() + " " + (!matchingSetNames.isEmpty() ? matchingSetNames : "no match")/* + " " + (hasPoseAnims ? poseanims : "not seen") + " " + (uhoh ? "uhoh" : "")*/);
			}
			for (Map.Entry<Integer, Set<List<Integer>>> entry : poseanims.entrySet())
			{
				int itemId = entry.getKey();
				ItemComposition comp = itemManager.getItemComposition(itemId);
				ItemStats stats = itemManager.getItemStats(itemId, false);
			}
		}

		if (command.equals("slotdata")) {
			int i = Integer.parseInt(arguments[0]);
			ItemStats itemStats = itemManager.getItemStats(i, false);
			if (itemStats == null) {
				System.out.println("itemStats was null");
			} else {
				ItemEquipmentStats equipment = itemStats.getEquipment();
				if (equipment != null) {
					System.out.println(equipment.getSlot());
				} else {
					System.out.println("equipmentstats was null");
				}
			}
		}
		if (command.equals("json")) {
			boolean skipItemDefs = !argumentsList.contains("full");
			json(skipItemDefs);
		}

		if (command.equals("iccache")) {
			client.addChatMessage(ChatMessageType.GAMEMESSAGE, "bla", ColorUtil.wrapWithColorTag("iccache", Color.RED), "bla");
			client.getItemCompositionCache().reset();
		}

		if (command.equals("checkunequippables"))
		{
			System.out.println("checking unequippables");
			for (Map.Entry<Integer, Integer> integerIntegerEntry : Constants.SLOT_OVERRIDES.entrySet())
			{
				ItemStats itemStats = itemManager.getItemStats(integerIntegerEntry.getKey(), false);
				if (itemStats == null || !itemStats.isEquipable())
					continue;
				if (itemStats.getEquipment().getSlot() != integerIntegerEntry.getValue()) {
					System.out.println("item " + integerIntegerEntry.getKey() + " " + itemManager.getItemComposition(integerIntegerEntry.getKey()).getName() + " is in the wrong slot");
				} else {
					System.out.println("item " + integerIntegerEntry.getKey() + " " + itemManager.getItemComposition(integerIntegerEntry.getKey()).getName() + " should be removed from constants.");
				}
			}
		}

		if (command.equals("bla")) {
			for (TransmogSet transmogSet : plugin.transmogSets)
			{
				for (Swap swap : transmogSet.getSwaps())
				{
					for (Swap.AnimationReplacement animationReplacement : swap.animationReplacements)
					{
						System.out.println(animationReplacement.auto);
						animationReplacement.auto = -1;
					}
				}
			}
			if (true) return;
			long accountHash = -1;//client.getAccountHash();
			byte[] key = {
				(byte) accountHash,
				(byte) (accountHash >> 8),
				(byte) (accountHash >> 16),
				(byte) (accountHash >> 24),
				(byte) (accountHash >> 32),
				(byte) (accountHash >> 40),
			};
			key[0] += 0;
			String keyStr = Base64.getUrlEncoder().encodeToString(key);
			System.out.println(Base64.getUrlEncoder().encodeToString(key));
			if (true) return;
			for (TransmogSet transmogSet : plugin.transmogSets)
			{
				if (transmogSet.getName().equals("test")) {
					Swap swap = transmogSet.getSwaps().get(0);
//					swap.getModelSwaps().add(26700);
//					swap.getModelSwaps().add(ItemID.SCYTHE_OF_VITUR);
					System.out.println("here " + swap.getModelSwaps());
				}
			}
			System.out.println(showsArms);
			System.out.println(hidesArms);
			System.out.println(uhohList);
			showsArms.remove(21021);
			hidesArms.add(21021);
			uhohList.clear();
			if (true) return;
			List<Integer> unequippableWithModel = new ArrayList<>();
			List<Integer> hashes = new ArrayList<>();
			Multimap<Integer, Integer> hashToItemIds = ArrayListMultimap.create();
			System.out.println("testing all items for having models:");
			ArrayList<TransmogSet> transmogSetsBackup = new ArrayList<>(plugin.transmogSets);
			for (int i = 0; i < client.getItemCount(); i++)
			{
				ItemComposition itemComposition = itemManager.getItemComposition(i);
				// skip notes and placeholders.
				if (itemComposition.getNote() != -1 || itemComposition.getPlaceholderTemplateId() != -1/* || ChatBoxFilterableSearch.WEIGHT_REDUCING_ITEMS.get(i) != null*/)
					continue;

				Swap swap = new Swap();
				for (Constants.HiddenSlot hiddenSlot : Constants.HiddenSlot.values())
				{
					int itemId = mapNegativeId(new Constants.NegativeId(Constants.NegativeIdsMap.HIDE_SLOT, hiddenSlot.ordinal()));
					swap.addModelSwap(itemId, plugin);
				}
				swap.addModelSwap(i, plugin, WEAPON.ordinal());
				TransmogSet transmogSet = new TransmogSet(Collections.singletonList(swap));
				plugin.transmogSets.clear();
				plugin.transmogSets.add(transmogSet);
				plugin.handleTransmogSetChange();

				int length = client.getLocalPlayer().getModel().getFaceColors1().length;
				if (length > 0)
				{
					int h =
						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceColors1()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceColors2()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceColors3()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceTransparencies()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceTextures()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getTextureFaces()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getTexIndices1()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getTexIndices2()) +
						Arrays.hashCode(client.getLocalPlayer().getModel().getTexIndices3()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getVerticesX()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getVerticesY()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getVerticesZ()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceIndices1()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceIndices2()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceIndices3()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getFaceRenderPriorities()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getVertexNormalsX()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getVertexNormalsY()) +
//						Arrays.hashCode(client.getLocalPlayer().getModel().getVertexNormalsZ()) +
							0
						;
					hashToItemIds.put(h, i);
					ItemStats itemStats = itemManager.getItemStats(i, false);
					if (itemStats != null && itemStats.isEquipable()) continue;
					unequippableWithModel.add(i);
//					System.out.println(i + " " + itemManager.getItemComposition(i).getName());
					hashes.add(h);
				}
			}
			System.out.println("results:");
			int count = 0;
			for (int i = 0; i < unequippableWithModel.size(); i++)
			{
				int itemId = unequippableWithModel.get(i);
				int hash = hashes.get(i);
				Collection<Integer> itemIds = hashToItemIds.get(hash);
				boolean dupe = false;
				boolean hasEquippableCounterpart = false;
				if (itemIds.size() > 1) {
					if (itemIds.stream().sorted(Integer::compare).findFirst().get() != itemId) dupe = true;
					for (Integer id : itemIds)
					{
						ItemStats itemStats = itemManager.getItemStats(id, false);
						if (itemStats != null && itemStats.isEquipable()) {
							hasEquippableCounterpart = true;
							break;
						}
					}
				}
				if (!hasEquippableCounterpart && !dupe)
				{
					System.out.println(itemId + " " + itemManager.getItemComposition(itemId).getName());
					if (itemIds.size() > 1) {
						for (Integer integer1 : itemIds)
						{
							if (integer1 == itemId) continue;
							boolean equippable = false;
							ItemStats itemStats = itemManager.getItemStats(integer1, false);
							if (itemStats != null && itemStats.isEquipable()) {
								equippable = true;
							}
							System.out.println("\t" + (equippable ? "e" : " ") + " " + integer1 + " " + plugin.itemManager.getItemComposition(integer1).getName());
						}
					}
					count++;
				}
			}
			System.out.println(count);
//			for (Integer integer : hashToItemIds.keySet())
//			{
//				Collection<Integer> integers = hashToItemIds.get(integer);
//				if (integers.size() > 1) {
//
//					System.out.println("matching for id " + integer + " ");
//					for (Integer integer1 : integers)
//					{
//						boolean equippable = false;
//						ItemStats itemStats = itemManager.getItemStats(integer1, false);
//						if (itemStats != null && itemStats.isEquipable()) {
//							equippable = true;
//						}
//						System.out.println("\t" + (equippable ? "e" : " ") + " " + integer1 + " " + plugin.itemManager.getItemComposition(integer1).getName());
//					}
//				}
//			}
			plugin.transmogSets = transmogSetsBackup;
			plugin.handleTransmogSetChange();
		}

		if (command.equals("testsortupdate")) {
			System.out.println("doing test.");
			Swap swap;

			swap = new Swap(Arrays.asList(-1), Arrays.asList(-1), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
			swap.updateForSortOrderAndUniqueness(plugin);
			if (swap.getModelSwaps().size() != 0 || swap.getItemRestrictions().size() != 0) {
				System.out.println("test 1 failed.");
			}

			swap = new Swap(Arrays.asList(-1), Arrays.asList(-14, -15, -16), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
			swap.updateForSortOrderAndUniqueness(plugin);

			swap = new Swap(
				Arrays.asList(ItemID.SLAYER_HELMET_I, ItemID.ABYSSAL_TENTACLE, ItemID.GHRAZI_RAPIER, ItemID.DRAGON_SCIMITAR, ItemID.CHEFS_HAT),
				Arrays.asList(ItemID.SLAYER_HELMET_I, ItemID.ABYSSAL_TENTACLE, ItemID.GHRAZI_RAPIER, ItemID.DRAGON_SCIMITAR, ItemID.CHEFS_HAT, ItemID.SKIS),
				Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
			swap.updateForSortOrderAndUniqueness(plugin);
			if (
				swap.getItemRestrictions().get(0) != ItemID.DRAGON_SCIMITAR || swap.getItemRestrictions().get(1) != ItemID.ABYSSAL_TENTACLE || swap.getItemRestrictions().get(2) != ItemID.GHRAZI_RAPIER || swap.getItemRestrictions().get(3) != ItemID.CHEFS_HAT || swap.getItemRestrictions().get(4) != ItemID.SLAYER_HELMET_I || swap.getItemRestrictions().size() != 5 ||
				swap.getModelSwaps().get(0) != ItemID.ABYSSAL_TENTACLE || swap.getModelSwaps().get(1) != ItemID.SKIS || swap.getModelSwaps().get(2) != ItemID.SLAYER_HELMET_I || swap.getModelSwaps().size() != 3
			) {
				System.out.println("test 2 failed");
			}
			System.out.println("test done.");
		}

		if (command.equals("reload")) {
			Constants.loadData(plugin.runeliteGson);
			SwingUtilities.invokeLater(plugin.pluginPanel::rebuild);
			System.out.println("reloaded animations sets, projectiles, and equippable.");
		}

		if (command.equals("listanimsets")) {
			System.out.println("transmog sets: " + plugin.getTransmogSets());
			System.out.println("applicable: " + plugin.getApplicableModelSwaps());
		}

		if (command.equals("listweapons")) {
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < client.getItemCount(); i++)
			{
				ItemStats itemStats = itemManager.getItemStats(i, false);
				if (itemStats == null) continue;
				ItemEquipmentStats equipment = itemStats.getEquipment();
				if (equipment == null) continue;
				int slot = equipment.getSlot();
				map.put(slot, map.getOrDefault(slot, 0) + 1);
			}
			for (Map.Entry<Integer, Integer> integerIntegerEntry : map.entrySet())
			{

				System.out.println(integerIntegerEntry.getKey() + " " + integerIntegerEntry.getValue());
			}
			System.out.println("reloading animations sets");
		}

		if (command.equals("demo")) {
			int demoanim = Integer.parseInt(arguments[0]);
			for (Constants.ActorAnimation value : values())
			{
				value.setAnimation(client.getLocalPlayer(), demoanim);
			}
		}

		if (command.equals("stand")) {
			int demoanim = Integer.parseInt(arguments[0]);
			for (Constants.ActorAnimation value : Arrays.asList(IDLE, IDLE_ROTATE_LEFT, IDLE_ROTATE_RIGHT))
			{
				value.setAnimation(client.getLocalPlayer(), demoanim);
			}
		}

		if (command.equals("move")) {
			int demoanim = Integer.parseInt(arguments[0]);
			for (Constants.ActorAnimation value : Arrays.asList(WALK, WALK_ROTATE_180, WALK_ROTATE_LEFT, WALK_ROTATE_RIGHT, RUN))
			{
				value.setAnimation(client.getLocalPlayer(), demoanim);
			}
		}

		if (command.equals("demoanim")) {
			demoanim = Integer.parseInt(arguments[0]);
			for (Constants.ActorAnimation value : values())
			{
				value.setAnimation(client.getLocalPlayer(), demoanim);
			}
		}

		if (command.equals("demogfx")) {
			demogfx = Integer.parseInt(arguments[0]);
			client.getLocalPlayer().setSpotAnimFrame(0);
		}

		if (command.equals("testthing")) {
			client.getLocalPlayer().setAnimation(713);
			client.getLocalPlayer().setAnimationFrame(Integer.parseInt(arguments[0]));
		}

		if (command.equals("pose")) {

		}

		if (command.equals("poseanims")) {
			String name = arguments.length == 0 ? client.getLocalPlayer().getName() : String.join(" ", arguments);
			System.out.println("pose anims for player " + name);
			for (Player player : client.getPlayers())
			{
				if (player.getName().toLowerCase().equals(name))
				{
					for (Constants.ActorAnimation value : values())
					{
						System.out.println(value.getType() + ", " + value.getAnimation(player) + ",");
					}
				}
			}
		}

		if (command.equals("itemicons")) {
			for (Integer integer : Constants.SLOT_OVERRIDES.keySet())
			{
				System.out.println("here " + integer);
				BufferedImage image = itemManager.getImage(integer);
				int transparent = 0;
				for (int y = 0; y < image.getHeight(); y++) {
					for (int x = 0; x < image.getWidth(); x++) {
						int  clr   = image.getRGB(x, y);
						int  red   = (clr & 0x00ff0000) >> 16;
						int  green = (clr & 0x0000ff00) >> 8;
						int  blue  =  clr & 0x000000ff;
						int  alpha  =  (clr & 0xff000000) >> 24;
//						System.out.println("\t" + alpha + " " + red + " " + green + " " + blue);
						if (alpha == 0) {

							transparent++;
						}
						image.setRGB(x, y, clr);
					}
				}
				if (transparent > 15 * image.getHeight() * image.getWidth() / 16) {

					System.out.println("alpha high on item " + integer);
				}
			}
		}
	}

	private static void addUnequippable(int itemId, KitType kitType, String name) {
		addUnequippable(itemId, kitType, name, -1);
	}

	private static void addUnequippable(int itemId, KitType kitType, String name, int iconId) {
		OVERRIDE_EQUIPPABILITY_OR_SLOT.put(itemId, kitType.getIndex());
		if (name != null || iconId != -1) {
			EQUIPPABLE_ITEMS_NOT_MARKED_AS_EQUIPMENT_NAMES.put(itemId, new Constants.NameAndIconId(name, iconId));
		}
	}

	private Map<Integer, List<Integer>> getSlotAndNameData(List<ItemDef> itemDefs)
	{
		EQUIPPABLE_ITEMS_NOT_MARKED_AS_EQUIPMENT_NAMES.clear();
		OVERRIDE_EQUIPPABILITY_OR_SLOT.clear();
		AddCustomSlotAndNames();

		// There are 2 tasks: pick which id we will mark equippable when there are lookalikes. Priority goes to wiki over cache.
		// Second, decide the equip slot. For this we will prefer cache.
		Set<Integer> modelIds = new HashSet<>();
		for (Map.Entry<Integer, Integer> integerIntegerEntry : OVERRIDE_EQUIPPABILITY_OR_SLOT.entrySet())
		{
			ItemDef itemDef = itemDefs.get(integerIntegerEntry.getKey());
			modelIds.add(itemDef.getModelHash());
		}
		for (int i = 0; i < client.getItemCount(); i++)
		{
			ItemStats itemStats = itemManager.getItemStats(i, false);
			if (itemStats != null && itemStats.getEquipment() != null) {
				ItemDef itemDef = itemDefs.get(i);
				if (itemDef != null) {
					modelIds.add(itemDef.getModelHash());
					break;
				}
			}
		}
		int count = 0;
		for (ItemDef itemDef : itemDefs) {
			if (itemDef == null) break;
			int id = itemDef.id;

			int wikiSlot = -1;
			ItemStats itemStats = itemManager.getItemStats(id, false);
			if (itemStats != null && itemStats.getEquipment() != null) {
				wikiSlot = itemStats.getEquipment().getSlot();
			}

			Integer cacheSlot = itemDef.getEquipSlot();
			Integer cacheModelSlot = itemDef.getModelEquipSlot();
			if (id == 8856) {

				System.out.println(8856);
				System.out.println(cacheSlot);
				System.out.println(cacheModelSlot);
				System.out.println(wikiSlot);
			}
			Integer myOverrideSlot = OVERRIDE_EQUIPPABILITY_OR_SLOT.get(id);
			if (myOverrideSlot == null) {
				if (wikiSlot != -1) {
					if (wikiSlot != cacheModelSlot) {
						OVERRIDE_EQUIPPABILITY_OR_SLOT.put(id, cacheModelSlot);
					}
				} else {
					if (cacheModelSlot != -1 && !modelIds.contains(itemDef.getModelHash())) {
						OVERRIDE_EQUIPPABILITY_OR_SLOT.put(id, cacheModelSlot);
//						modelIds.add(itemDef.getModelHash());
					}
				}
			}
//			if ((myOverrideSlot == null && wikiSlot == -1) && cacheModelSlot != -1 && !modelIds.contains(itemDef.getModelHash())) {
//				modelIds.add(itemDef.getModelHash());
//				OVERRIDE_EQUIPPABILITY_OR_SLOT.put(id, cacheModelSlot);
//			}
			if (cacheModelSlot != -1) {
				count++;
				if (myOverrideSlot == cacheModelSlot && itemDef.name != null) {
					System.out.println("not needed " + itemDef.name + " " + itemDef.id);
				}
				if (plugin.getSlotForNonNegativeModelId(id) == null && !modelIds.contains(itemDef.getModelHash())) {
					modelIds.add(itemDef.getModelHash());
					System.out.println("wiki mismatch " + itemDef.name + " " + itemDef.id + " " + wikiSlot + " " + cacheModelSlot);
				}
//					if (wikiSlot != -1 && wikiSlot != cacheModelSlot) {
//						System.out.println("wiki mismatch " + itemDef.name + " " + itemDef.id + " " + wikiSlot + " " + cacheModelSlot);
//					}
//					if (myOverrideSlot != null && myOverrideSlot != cacheModelSlot) {
//						System.out.println("cache model " + itemDef.name + " " + itemDef.id + " " + KitType.values()[myOverrideSlot] + " " + KitType.values()[cacheModelSlot]);
//					}
			} else {
				if (myOverrideSlot != null) {

					System.out.println("extra item with no model? " + itemDef.name + " " + itemDef.id);
				}
			}
			// check for null name.
		}
		System.out.println("count " + count);

		Map<Integer, List<Integer>> kitIndexToItemIds = new HashMap<>();
		for (Integer itemId : OVERRIDE_EQUIPPABILITY_OR_SLOT.keySet())
		{
			Integer slot = OVERRIDE_EQUIPPABILITY_OR_SLOT.get(itemId);
			if (slot == -1) continue;
			List<Integer> itemIds = kitIndexToItemIds.getOrDefault(slot, new ArrayList<>());
			itemIds.add(itemId);
			kitIndexToItemIds.put(slot, itemIds);
		}
		return kitIndexToItemIds;
	}

	private Map<Integer, AnimationSet> getWeaponToAnimationSet()
	{
		Map<Integer, AnimationSet> itemIdToAnimationSet = new HashMap<>();
		String mace = "Dragon mace";
		String warhammer = "Dragon warhammer";
		String battleaxe = "Dragon battleaxe";
		String dagger = "Dragon sword";
		String shortsword = "Dragon sword";
		String longsword = "Dragon longsword/Saeldor";
		String machete = shortsword;
		String blackjack = mace;
		String crozier = "Staff2/Wand";
		String keris = "Spear";
		// keris is actually a different crush animation than the spear, but it looks the same (419 vs 382)
		// with shield it also uses 419.
		String sarasword = "Saradomin sword";
		String axe = "Dragon axe";
		String pickaxe = axe;
		String cane = mace;
		String poweredstaff = "Trident of the swamp";
		String harpoon = shortsword;
		String rod = "Unarmed";
		putWeapon(itemIdToAnimationSet, 35, shortsword); // Excalibur [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 278, dagger); // Cattleprod [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 667, longsword); // Blurite sword [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		/* TODO test */
		putWeapon(itemIdToAnimationSet, 732, "Dart"); // Holy water [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 746, dagger); // Dark dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 747, dagger); // Glowing dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 751, "Unarmed"); // Gnomeball [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Unarmed
		putWeapon(itemIdToAnimationSet, 767, "Crossbow"); // Phoenix crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823] follow Crossbow
		putWeapon(itemIdToAnimationSet, 772, "Staff"); // Dramen staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 805, "Thrownaxe"); // Rune thrownaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Thrownaxe
		putWeapon(itemIdToAnimationSet, 806, "Dart"); // Bronze dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dart
		putWeapon(itemIdToAnimationSet, 807, "Dart"); // Iron dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dart
		putWeapon(itemIdToAnimationSet, 808, "Dart"); // Steel dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dart
		putWeapon(itemIdToAnimationSet, 809, "Dart"); // Mithril dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dart
		putWeapon(itemIdToAnimationSet, 810, "Dart"); // Adamant dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dart
		putWeapon(itemIdToAnimationSet, 811, "Dart"); // Rune dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dart
		putWeapon(itemIdToAnimationSet, 837, "Crossbow"); // Crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823] follow Crossbow
		putWeapon(itemIdToAnimationSet, 863, "Knife (non-dragon)"); // Iron knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 864, "Knife (non-dragon)"); // Bronze knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 865, "Knife (non-dragon)"); // Steel knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 866, "Knife (non-dragon)"); // Mithril knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 867, "Knife (non-dragon)"); // Adamant knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 868, "Knife (non-dragon)"); // Rune knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 869, "Knife (non-dragon)"); // Black knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Knife (non-dragon)
		putWeapon(itemIdToAnimationSet, 975, machete); // Machete [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1203, dagger); // Iron dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1205, dagger); // Bronze dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1207, dagger); // Steel dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1209, dagger); // Mithril dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1211, dagger); // Adamant dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1213, dagger); // Rune dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1215, "Dragon dagger"); // Dragon dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon dagger
		putWeapon(itemIdToAnimationSet, 1217, dagger); // Black dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1237, "Spear"); // Bronze spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1239, "Spear"); // Iron spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1241, "Spear"); // Steel spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1243, "Spear"); // Mithril spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1245, "Spear"); // Adamant spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1247, "Spear"); // Rune spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1249, "Spear"); // Dragon spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Spear
		putWeapon(itemIdToAnimationSet, 1265, pickaxe); // Bronze pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1267, pickaxe); // Iron pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1269, pickaxe); // Steel pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1271, pickaxe); // Adamant pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1273, pickaxe); // Mithril pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1275, pickaxe); // Rune pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1277, shortsword); // Bronze sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1279, shortsword); // Iron sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1281, shortsword); // Steel sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1283, shortsword); // Black sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1285, shortsword); // Mithril sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1287, shortsword); // Adamant sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1289, shortsword); // Rune sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1291, shortsword); // Bronze longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1293, shortsword); // Iron longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1295, shortsword); // Steel longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1297, shortsword); // Black longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1299, shortsword); // Mithril longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1301, shortsword); // Adamant longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1303, shortsword); // Rune longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1305, "Dragon longsword/Saeldor"); // Dragon longsword [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1307, "2h sword"); // Bronze 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1309, "2h sword"); // Iron 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1311, "2h sword"); // Steel 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1313, "2h sword"); // Black 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1315, "2h sword"); // Mithril 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1317, "2h sword"); // Adamant 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1319, "2h sword"); // Rune 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823] follow 2h sword
		putWeapon(itemIdToAnimationSet, 1321, shortsword); // Bronze scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1323, shortsword); // Iron scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1325, shortsword); // Steel scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1327, shortsword); // Black scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1329, shortsword); // Mithril scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1331, shortsword); // Adamant scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1333, shortsword); // Rune scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon scimitar
		putWeapon(itemIdToAnimationSet, 1335, warhammer); // Iron warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1337, warhammer); // Bronze warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1339, warhammer); // Steel warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1341, warhammer); // Black warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1343, warhammer); // Mithril warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1345, warhammer); // Adamant warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1347, warhammer); // Rune warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon warhammer
		putWeapon(itemIdToAnimationSet, 1349, axe); // Iron axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1351, axe); // Bronze axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1353, axe); // Steel axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1355, axe); // Mithril axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1357, axe); // Adamant axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1359, axe); // Rune axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1361, axe); // Black axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon axe
		putWeapon(itemIdToAnimationSet, 1363, battleaxe); // Iron battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1365, battleaxe); // Steel battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1367, battleaxe); // Black battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1369, battleaxe); // Mithril battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1371, battleaxe); // Adamant battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1373, battleaxe); // Rune battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1375, battleaxe); // Bronze battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1377, "Dragon battleaxe"); // Dragon battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon battleaxe
		putWeapon(itemIdToAnimationSet, 1379, "Staff"); // Staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1381, "Staff"); // Staff of air [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1383, "Staff"); // Staff of water [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1385, "Staff"); // Staff of earth [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1387, "Staff"); // Staff of fire [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1389, "Staff"); // Magic staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1391, "Staff"); // Battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1393, "Staff"); // Fire battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1395, "Staff"); // Water battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1397, "Staff"); // Air battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1399, "Staff"); // Earth battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1401, "Staff"); // Mystic fire staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1403, "Staff"); // Mystic water staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1405, "Staff"); // Mystic air staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1407, "Staff"); // Mystic earth staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1409, "Staff"); // Iban's staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 1419, "Scythe (holiday item)"); // Scythe [Scythe (holiday item)] [847, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 1420, mace); // Iron mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 1422, mace); // Bronze mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 1424, mace); // Steel mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 1428, mace); // Mithril mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 1430, mace); // Adamant mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 1432, mace); // Rune mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 1434, "Dragon mace"); // Dragon mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2402, shortsword); // Silverlight [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 2415, "Ancient mace"); // Saradomin staff [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 2416, "Ancient mace"); // Guthix staff [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 2417, "Ancient mace"); // Zamorak staff [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 2460, mace); // Assorted flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2462, mace); // Red flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2464, mace); // Blue flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2466, mace); // Yellow flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2468, mace); // Purple flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2470, mace); // Orange flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2472, mace); // Mixed flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2474, mace); // White flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2476, mace); // Black flowers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Dragon mace
		putWeapon(itemIdToAnimationSet, 2883, "Bow"); // Ogre bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] follow Bow
		putWeapon(itemIdToAnimationSet, 2952, dagger); // Wolfbane [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 2961, shortsword); // Silver sickle [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3053, "Staff"); // Lava battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 3054, "Staff"); // Mystic lava staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209] follow Staff
		putWeapon(itemIdToAnimationSet, 3095, "Claws"); // Bronze claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3096, "Claws"); // Iron claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3097, "Claws"); // Steel claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3098, "Claws"); // Black claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3099, "Claws"); // Mithril claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3100, "Claws"); // Adamant claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3101, "Claws"); // Rune claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3192, "Halberd"); // Iron halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3194, "Halberd"); // Steel halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3196, "Halberd"); // Black halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3198, "Halberd"); // Mithril halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3200, "Halberd"); // Adamant halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3202, "Halberd"); // Rune halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3204, "Halberd"); // Dragon halberd [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 3689, "Unarmed"); // Lyre [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3690, "Unarmed"); // Enchanted lyre [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3695, "Pet rock"); // Pet rock [Pet rock] [6657, 6661, 6658, 6659, 6662, 6663, 6660, 6661]
		putWeapon(itemIdToAnimationSet, 3757, shortsword); // Fremennik blade [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 3899, shortsword); // Iron sickle [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4023, mace); // Monkey talisman [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4037, "Banner"); // Saradomin banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 4039, "Banner"); // Zamorak banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 4068, shortsword); // Decorative sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4086, mace); // Trollweiss [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4151, "Abyssal whip"); // Abyssal whip [Abyssal whip] [808, 823, 1660, 1660, 1660, 1660, 1661, 823]
		putWeapon(itemIdToAnimationSet, 4153, "Granite maul"); // Granite maul [Granite maul] [1662, 823, 1663, 1663, 1663, 1663, 1664, 823]
		putWeapon(itemIdToAnimationSet, 4158, "Spear"); // Leaf-bladed spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 4170, "Staff"); // Slayer's staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 4565, "Easter basket"); // Easter basket [Easter basket] [1837, 823, 1836, 1836, 1836, 1836, 1836, 823]
		putWeapon(itemIdToAnimationSet, 4566, "Rubber chicken"); // Rubber chicken [Rubber chicken] [1832, 823, 1830, 1830, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4580, "Spear"); // Black spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 4587, "Dragon scimitar"); // Dragon scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4599, mace); // Oak blackjack [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4600, mace); // Willow blackjack [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4675, "Staff"); // Ancient staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 4710, "Staff"); // Ahrim's staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 4718, "Dharok's greataxe"); // Dharok's greataxe [Dharok's greataxe] [2065, 823, 2064, 2064, 2064, 2064, 824, 823]
		putWeapon(itemIdToAnimationSet, 4726, "Guthan's warspear"); // Guthan's warspear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 4734, "Karil's crossbow"); // Karil's crossbow [Karil's crossbow] [2074, 823, 2076, 2076, 2076, 2076, 2077, 823]
		putWeapon(itemIdToAnimationSet, 4747, "Torag's hammers"); // Torag's hammers [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 4755, "Verac's flail"); // Verac's flail [Verac's flail] [2061, 823, 2060, 2060, 2060, 2060, 824, 823]
		putWeapon(itemIdToAnimationSet, 4827, "Bow"); // Comp ogre bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 5016, "Spear"); // Bone spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 5018, mace); // Bone club [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6082, "Fixed device"); // Fixed device [Fixed device] [2316, 2321, 2317, 2318, 2319, 2320, 2322, 2321]
		putWeapon(itemIdToAnimationSet, 6313, machete); // Opal machete [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6315, machete); // Jade machete [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6317, machete); // Red topaz machete [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6416, blackjack); // Maple blackjack [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6522, "Toktz-xil-ul (obsidian ring)"); // Toktz-xil-ul [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6523, shortsword); // Toktz-xil-ak [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6525, shortsword); // Toktz-xil-ek [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6526, "Staff"); // Toktz-mej-tal [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6527, mace); // Tzhaar-ket-em [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6528, "Tzhaar-ket-om"); // Tzhaar-ket-om [Dharok's greataxe] [2065, 823, 2064, 2064, 2064, 2064, 824, 823]
		putWeapon(itemIdToAnimationSet, 6541, "Abyssal whip"); // Mouse toy [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6562, "Staff"); // Mud battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6563, "Staff"); // Mystic mud staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6587, "Claws"); // White claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6603, "Staff"); // White magic staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6605, shortsword); // White sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6607, shortsword); // White longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6609, "2h sword"); // White 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823]
		putWeapon(itemIdToAnimationSet, 6611, shortsword); // White scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6722, "Unarmed"); // Zombie head [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6724, "Bow"); // Seercull [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6739, "Dragon axe"); // Dragon axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6746, shortsword); // Darklight [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 6760, "Spear"); // Guthix mjolnir [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6762, "Spear"); // Saradomin mjolnir [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6773, "Banner"); // Rat pole [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 6908, "Staff2/Wand"); // Beginner wand [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6910, "Staff2/Wand"); // Apprentice wand [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6912, "Staff2/Wand"); // Teacher wand [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 6914, "Staff2/Wand"); // Master wand [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 7141, shortsword); // Harry's cutlass [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7142, shortsword); // Rapier [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7158, "2h sword"); // Dragon 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823]
		putWeapon(itemIdToAnimationSet, 7170, "Chinchompa"); // Mud pie [Chinchompa] [3175, 3177, 3177, 3177, 3177, 3177, 3178, 3177]
		putWeapon(itemIdToAnimationSet, 7409, shortsword); // Magic secateurs [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7433, shortsword); // Wooden spoon [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7435, shortsword); // Egg whisk [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7439, "2h sword"); // Spatula [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823]
		putWeapon(itemIdToAnimationSet, 7441, mace); // Frying pan [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7443, shortsword); // Skewer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7445, mace); // Rolling pin [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7447, shortsword); // Kitchen knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7449, "Dharok's greataxe"); // Meat tenderiser [Dharok's greataxe] [2065, 823, 2064, 2064, 2064, 2064, 824, 823]
		putWeapon(itemIdToAnimationSet, 7451, shortsword); // Cleaver [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 7639, "Staff"); // Rod of ivandis (10) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 7668, "Granite maul"); // Gadderhammer [Granite maul] [1662, 823, 1663, 1663, 1663, 1663, 1664, 823]
		putWeapon(itemIdToAnimationSet, 7671, "Boxing gloves"); // Boxing gloves [Boxing gloves] [3677, 823, 3680, 3680, 3680, 3680, 824, 823]
		putWeapon(itemIdToAnimationSet, 8650, "Banner"); // Banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 8841, mace); // Void knight mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 8872, dagger); // Bone dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 8880, "Crossbow"); // Dorgeshuun crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 8971, "Banner"); // Phasmatys flag [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 9013, "Staff"); // Skull sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 9084, "Staff"); // Lunar staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 9174, "Crossbow"); // Bronze crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9176, "Crossbow"); // Blurite crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9177, "Crossbow"); // Iron crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9179, "Crossbow"); // Steel crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9181, "Crossbow"); // Mithril crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9183, "Crossbow"); // Adamant crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9185, "Crossbow"); // Rune crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 9703, shortsword); // Training sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 9705, "Bow"); // Training bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10010, longsword); // Butterfly net [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10033, "Chinchompa"); // Chinchompa [Chinchompa] [3175, 3177, 3177, 3177, 3177, 3177, 3178, 3177]
		putWeapon(itemIdToAnimationSet, 10034, "Chinchompa"); // Red chinchompa [Chinchompa] [3175, 3177, 3177, 3177, 3177, 3177, 3178, 3177]
		putWeapon(itemIdToAnimationSet, 10129, shortsword); // Barb-tail harpoon [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10146, "Red salamander"); // Orange salamander [Red salamander] [5246, 823, 5245, 5245, 5245, 5245, 824, 823]
		putWeapon(itemIdToAnimationSet, 10147, "Red salamander"); // Red salamander [Red salamander] [5246, 823, 5245, 5245, 5245, 5245, 824, 823]
		putWeapon(itemIdToAnimationSet, 10148, "Red salamander"); // Black salamander [Red salamander] [5246, 823, 5245, 5245, 5245, 5245, 824, 823]
		putWeapon(itemIdToAnimationSet, 10149, "Red salamander"); // Swamp lizard [Red salamander] [5246, 823, 5245, 5245, 5245, 5245, 824, 823]
		putWeapon(itemIdToAnimationSet, 10150, "Noose wand"); // Noose wand [Noose wand] [5254, 5252, 5250, 5251, 1207, 1208, 5253, 5252]
		putWeapon(itemIdToAnimationSet, 10156, "Crossbow"); // Hunters' crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 10280, "Comp bow"); // Willow comp bow [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10282, "Comp bow"); // Yew comp bow [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10284, "Comp bow"); // Magic comp bow [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10440, crozier); // Saradomin crozier [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10442, crozier); // Guthix crozier [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10444, crozier); // Zamorak crozier [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 10487, "Undead chicken"); // Undead chicken [Undead chicken] [5363, 823, 5364, 5438, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10491, axe); // Blessed axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10501, "Snowball"); // Snowball [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10581, keris); // Keris [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10857, mace); // Severed leg [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 10858, "2h sword"); // Shadow sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823]
		putWeapon(itemIdToAnimationSet, 10887, "Barrelchest anchor"); // Barrelchest anchor [Barrelchest anchor] [5869, 823, 5867, 5867, 5867, 5867, 5868, 823]
		putWeapon(itemIdToAnimationSet, 11037, shortsword); // Brine sabre [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11061, "Ancient mace"); // Ancient mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11230, "Dart"); // Dragon dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11235, "Bow"); // Dark bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11259, "Magic butterfly net"); // Magic butterfly net [Magic butterfly net] [6604, 6611, 6607, 6608, 6610, 6609, 6603, 6611]
		putWeapon(itemIdToAnimationSet, 11371, "Spear"); // Steel hasta [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11705, "Boxing gloves"); // Beach boxing gloves [Boxing gloves] [3677, 823, 3680, 3680, 3680, 3680, 824, 823]
		putWeapon(itemIdToAnimationSet, 11707, mace); // Cursed goblin hammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11708, "Bow"); // Cursed goblin bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11709, "Staff"); // Cursed goblin staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11785, "Crossbow"); // Armadyl crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 11787, "Staff"); // Steam battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11789, "Staff"); // Mystic steam staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11791, "Staff"); // Staff of the dead [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11802, "Godsword (Armadyl)"); // Armadyl godsword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044] uhoh
		putWeapon(itemIdToAnimationSet, 11804, "Godsword (Bandos)"); // Bandos godsword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 11806, "Godsword (Saradomin)"); // Saradomin godsword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 11808, "Godsword (Zamorak)"); // Zamorak godsword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 11824, "Zamorakian spear"); // Zamorakian spear [Zamorakian spear] [1713, 1702, 1703, 1704, 1706, 1705, 1707, 1702]
		putWeapon(itemIdToAnimationSet, 11838, sarasword); // Saradomin sword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 11889, "Zamorakian hasta"); // Zamorakian hasta [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11902, shortsword); // Leaf-bladed sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11905, poweredstaff); // Trident of the seas (full) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 11920, pickaxe); // Dragon pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 11959, "Chinchompa"); // Black chinchompa [Chinchompa] [3175, 3177, 3177, 3177, 3177, 3177, 3178, 3177]
		putWeapon(itemIdToAnimationSet, 11998, "Staff"); // Smoke battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12000, "Staff"); // Mystic smoke staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12006, "Abyssal whip"); // Abyssal tentacle [Abyssal whip] [808, 823, 1660, 1660, 1660, 1660, 1661, 823]
		putWeapon(itemIdToAnimationSet, 12199, crozier); // Ancient crozier [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12263, crozier); // Armadyl crozier [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12275, crozier); // Bandos crozier [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12297, pickaxe); // Black pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12357, shortsword); // Katana [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12373, cane); // Dragon cane [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12375, cane); // Black cane [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12377, cane); // Adamant cane [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12379, cane); // Rune cane [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12389, shortsword); // Gilded scimitar [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12422, "Staff2/Wand"); // 3rd age wand [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12424, "Bow"); // 3rd age bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12426, shortsword); // 3rd age longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 12439, cane); // Royal sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12727, "Fixed device"); // Goblin paint cannon [Fixed device] [2316, 2321, 2317, 2318, 2319, 2320, 2322, 2321]
		putWeapon(itemIdToAnimationSet, 12808, sarasword); // Sara's blessed sword (full) [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 12809, sarasword); // Saradomin's blessed sword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 12899, poweredstaff); // Trident of the swamp [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12902, "Staff"); // Toxic staff (uncharged) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 12924, "Toxic blowpipe"); // Toxic blowpipe (empty) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 13108, shortsword); // Wilderness sword 1 [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 13141, "Banner"); // Western banner 1 [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 13241, axe); // Infernal axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 13243, pickaxe); // Infernal pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 13263, ""); // Abyssal bludgeon [Abyssal bludgeon] [1652, 823, 3293, 3293, 3293, 3293, 2847, 823]
		putWeapon(itemIdToAnimationSet, 13265, "Abyssal dagger"); // Abyssal dagger [Abyssal dagger] [3296, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 13328, "Banner"); // Green banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 13576, "Dragon warhammer"); // Dragon warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 13652, "Claws"); // Dragon claws [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 19478, "Ballista"); // Light ballista [Ballista] [7220, 823, 7223, 7223, 7223, 7223, 7221, 823]
		putWeapon(itemIdToAnimationSet, 19481, "Ballista"); // Heavy ballista [Ballista] [7220, 823, 7223, 7223, 7223, 7223, 7221, 823]
		putWeapon(itemIdToAnimationSet, 19675, shortsword); // Arclight [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 19918, mace); // Nunchaku [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 19941, "Giant boulder"); // Heavy casket [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 20011, axe); // 3rd age axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20014, pickaxe); // 3rd age pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20056, "Crystal grail"); // Ale of the gods [Crystal grail] [3040, 823, 3039, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20155, "2h sword"); // Gilded 2h sword [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823]
		putWeapon(itemIdToAnimationSet, 20158, "Spear"); // Gilded spear [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 20161, "Spear"); // Gilded hasta [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 20164, "Godsword (Armadyl)"); // Large spade [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 20243, mace); // Crier bell [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20249, "Clueless Scroll"); // Clueless scroll [Clueless Scroll] [7271, 823, 7272, 820, 821, 822, 7273, 823]
		putWeapon(itemIdToAnimationSet, 20251, "Banner"); // Arceuus banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 20254, "Banner"); // Hosidius banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 20257, "Banner"); // Lovakengj banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 20260, "Banner"); // Piscarilius banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 20263, "Banner"); // Shayzien banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 20590, "Rubber chicken"); // Stale baguette [Rubber chicken] [1832, 823, 1830, 1830, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20720, mace); // Bruma torch [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20727, "Leaf-bladed battleaxe"); // Leaf-bladed battleaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20730, "Staff"); // Mist battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 20733, "Staff"); // Mystic mist staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 20736, "Staff"); // Dust battlestaff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 20739, "Staff"); // Mystic dust staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 20756, ""); // Hill giant club [Dharok's greataxe] [2065, 823, 2064, 2064, 2064, 2064, 824, 823]
		putWeapon(itemIdToAnimationSet, 20779, "Hunting knife"); // Hunting knife [Hunting knife] [2911, 823, 7327, 7327, 821, 822, 2322, 823]
		putWeapon(itemIdToAnimationSet, 20836, "Giant boulder"); // Giant present [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 20849, "Thrownaxe"); // Dragon thrownaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 20997, "Bow"); // Twisted bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 21003, "Elder maul"); // Elder maul [Elder maul] [7518, 823, 7520, 7520, 7520, 7520, 7519, 823]
		putWeapon(itemIdToAnimationSet, 21006, "Staff2/Wand"); // Kodai wand [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 21009, shortsword); // Dragon sword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 21012, "Crossbow"); // Dragon hunter crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823] uhoh
		putWeapon(itemIdToAnimationSet, 21015, "Dinh's bulwhark"); // Dinh's bulwark [Dinh's bulwhark] [7508, 823, 7510, 7510, 7510, 7510, 7509, 823]
		putWeapon(itemIdToAnimationSet, 21028, harpoon); // Dragon harpoon [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 21031, harpoon); // Infernal harpoon [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 21209, "Birthday balloons"); // Birthday balloons [Birthday balloons] [7538, 823, 7539, 7539, 821, 822, 7540, 823]
		putWeapon(itemIdToAnimationSet, 21354, "Hand fan"); // Hand fan [Hand fan] [6297, 6297, 7629, 7630, 7631, 7632, 7633, 6297]
		putWeapon(itemIdToAnimationSet, 21646, shortsword); // Granite longsword [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 21649, "Spear"); // Merfolk trident [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 21742, mace); // Granite hammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 21902, "Crossbow"); // Dragon crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 22296, "Staff"); // Staff of light [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 22316, "Prop sword/candy cane"); // Prop sword [Prop sword/candy cane] [2911, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22323, poweredstaff); // Sanguinesti staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 22324, "Ghrazi rapier"); // Ghrazi rapier [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22325, "Scythe of Vitur"); // Scythe of vitur [Scythe of Vitur] [8057, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22355, "Unarmed"); // Holy handegg [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22358, "Unarmed"); // Peaceful handegg [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22361, "Unarmed"); // Chaotic handegg [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823] uhoh
		putWeapon(itemIdToAnimationSet, 22368, "Staff"); // Bryophyta's staff (uncharged) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 22398, "Ivandis flail"); // Ivandis flail [Ivandis flail] [8009, 8015, 8011, 8012, 8013, 8014, 8016, 8015]
		putWeapon(itemIdToAnimationSet, 22435, shortsword); // Enchanted emerald sickle (b) [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22542, "Viggora's chainmace"); // Viggora's chainmace (u) [Viggora's chainmace] [244, 823, 247, 247, 247, 247, 248, 823]
		putWeapon(itemIdToAnimationSet, 22547, "Bow"); // Craw's bow (u) [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22552, ""); // Thammaron's sceptre (u) no match [813, 1205, 1205, 1206, 1207, 1208, 1210, 1205]
		putWeapon(itemIdToAnimationSet, 22610, "Spear"); // Vesta's spear [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22613, longsword); // Vesta's longsword [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22622, mace); // Statius's warhammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22634, "Thrownaxe"); // Morrigan's throwing axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22636, ""); // Morrigan's javelin [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22647, "Staff"); // Zuriel's staff [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22684, ""); // Eek [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22719, "Prop sword/candy cane"); // Candy cane [Prop sword/candy cane] [2911, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22731, "Spear"); // Dragon hasta [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 22804, "Dragon knife"); // Dragon knife [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22840, "Golden tench"); // Golden tench [Golden tench] [8208, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22842, rod); // Pearl barbarian rod [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22844, rod); // Pearl fly fishing rod [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22846, rod); // Pearl fishing rod [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 22978, "Dragon hunter lance"); // Dragon hunter lance [Dragon hunter lance] [813, 1209, 1205, 1206, 1207, 1208, 2563, 1209]
		putWeapon(itemIdToAnimationSet, 23108, "Giant boulder"); // Birthday cake [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 23122, rod); // Oily pearl fishing rod [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23206, ""); // Dual sai [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23276, pickaxe); // Gilded pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23279, axe); // Gilded axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23282, "2h sword"); // Gilded spade [2h sword] [2561, 823, 2562, 2562, 2562, 2562, 2563, 823]
		putWeapon(itemIdToAnimationSet, 23342, "Staff"); // 3rd age druidic staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 23357, "Bow"); // Rain bow [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23360, mace); // Ham joint [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23363, "Staff"); // Staff of bob the cat [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 23446, "Giant boulder"); // Giant easter egg [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 23528, "Sarachnis cudgel"); // Sarachnis cudgel [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23673, axe); // Crystal axe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23680, pickaxe); // Crystal pickaxe [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23762, harpoon); // Crystal harpoon [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23895, "Halberd"); // Crystal halberd (basic) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 23901, "Bow"); // Crystal bow (basic) [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 23995, longsword); // Blade of saeldor [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24000, "Crystal grail"); // Crystal grail [Crystal grail] [3040, 823, 3039, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24144, "Staff"); // Staff of balance [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 24219, dagger); // Swift blade [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24327, "Skeleton lantern"); // Skeleton lantern [Skeleton lantern] [8521, 8492, 8492, 8492, 8492, 8492, 8492, 8492]
		putWeapon(itemIdToAnimationSet, 24395, cane); // Twisted cane [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24413, "Banner"); // Twisted banner [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 24417, "Inquisitor's mace"); // Inquisitor's mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24422, "Nightmare Staff"); // Nightmare staff [Nightmare Staff] [4504, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 24423, "Nightmare Staff"); // Harmonised nightmare staff [Nightmare Staff] [4504, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 24424, "Nightmare Staff"); // Volatile nightmare staff [Nightmare Staff] [4504, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 24425, "Nightmare Staff"); // Eldritch nightmare staff [Nightmare Staff] [4504, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 24537, longsword); // Carrot sword [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24539, longsword); // '24-carat' sword [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24617, longsword); // Vesta's blighted longsword [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24699, "Ivandis flail"); // Blisterwood flail [Ivandis flail] [8009, 8015, 8011, 8012, 8013, 8014, 8016, 8015]
		putWeapon(itemIdToAnimationSet, 24727, mace); // Hallowed hammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 24880, ""); // Amy's saw [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25013, cane); // Trailblazer cane [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25042, ""); // Trailblazer dragon trophy [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 25046, ""); // Trailblazer adamant trophy [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 25314, ""); // Giant boulder [Giant boulder] [4193, 4194, 4194, 4194, 4194, 4194, 7274, 4194]
		putWeapon(itemIdToAnimationSet, 25484, ""); // Soulreaper axe [Dharok's greataxe] [2065, 823, 2064, 2064, 2064, 2064, 824, 823]
		putWeapon(itemIdToAnimationSet, 25489, ""); // Blood ancient sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 25490, ""); // Ice ancient sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 25491, ""); // Smoke ancient sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 25492, ""); // Shadow ancient sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 25500, ""); // Cursed banana [Cursed banana] [4646, 823, 4682, 6276, 6268, 6275, 6277, 823]
		putWeapon(itemIdToAnimationSet, 25604, ""); // Gregg's eastdoor [Dinh's bulwhark] [7508, 823, 7510, 7510, 7510, 7510, 7509, 823]
		putWeapon(itemIdToAnimationSet, 25641, mace); // Barronite mace [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25644, mace); // Imcando hammer [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25721, ""); // Clan vexillum [Clan vexillum] [9018, 7044, 9017, 9017, 9021, 9020, 9019, 7044]
		putWeapon(itemIdToAnimationSet, 25731, poweredstaff); // Holy sanguinesti staff [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 25734, "Ghrazi rapier"); // Holy ghrazi rapier [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25736, "Scythe of Vitur"); // Holy scythe of vitur [Nightmare Staff] [4504, 1209, 1205, 1206, 1207, 1208, 1210, 1209] uhoh
		putWeapon(itemIdToAnimationSet, 25739, "Scythe of Vitur"); // Sanguine scythe of vitur [Scythe of Vitur] [8057, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25822, ""); // Protest banner [Clan vexillum] [9018, 7044, 9017, 9017, 9021, 9020, 9019, 7044]
		putWeapon(itemIdToAnimationSet, 25849, "Dart"); // Amethyst dart [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25862, "Bow"); // Bow of faerdhinen (inactive) [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 25979, keris); // Keris partisan [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 25981, keris); // Keris partisan of breaching [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 26219, "Osmumten's Fang"); // Osmumten's fang [Dragon longsword/Saeldor, Ghrazi rapier, Osmumten's Fang] [809, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 26233, "Godsword (Ancient)"); // Ancient godsword [Godsword (Ancient), Godsword (Ancient, alternative spec), Godsword (Armadyl), Godsword (Bandos), Godsword (Saradomin), Godsword (Zamorak)] [7053, 7044, 7052, 7052, 7048, 7047, 7043, 7044]
		putWeapon(itemIdToAnimationSet, 26260, mace); // Haunted wine bottle [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 26374, "Zaryte crossbow"); // Zaryte crossbow [Crossbow, Zaryte crossbow] [4591, 823, 4226, 4227, 821, 822, 4228, 823]
		putWeapon(itemIdToAnimationSet, 26424, ""); // Shattered banner no match [9263, 9268, 9264, 9265, 9266, 9267, 9269, 9268]
		putWeapon(itemIdToAnimationSet, 26515, ""); // Shattered relics dragon trophy no match [9272, 9273, 9273, 9273, 9273, 9273, 9261, 9273]
		putWeapon(itemIdToAnimationSet, 26517, ""); // Shattered cane no match [813, 823, 1146, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 26945, ""); // Pharaoh's sceptre (uncharged) [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 27021, ""); // Colossal blade [Colossal Blade] [9460, 10055, 9461, 9461, 10055, 10054, 9459, 10055]
		putWeapon(itemIdToAnimationSet, 27275, ""); // Tumeken's shadow [Tumeken's Shadow] [9494, 1702, 1703, 1704, 1706, 1705, 1707, 1702]
		putWeapon(itemIdToAnimationSet, 27287, keris); // Keris partisan of corruption [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 27291, keris); // Keris partisan of the sun [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 27414, ""); // Giant stopwatch no match [9814, 9813, 9813, 9813, 9813, 9813, 9815, 9813]
		putWeapon(itemIdToAnimationSet, 27580, ""); // Festive nutcracker staff [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 27586, ""); // Sweet nutcracker staff [Banner] [1421, 1426, 1422, 1423, 1424, 1425, 1427, 1426]
		putWeapon(itemIdToAnimationSet, 27610, ""); // Venator bow [Venator Bow] [9857, 9863, 9859, 9859, 9861, 9862, 9860, 9863]
		putWeapon(itemIdToAnimationSet, 27624, ""); // Ancient sceptre [Comp bow, Guthan's warspear, Halberd, Spear, Staff, Staff2/Wand, Toxic blowpipe, Trident of the swamp, Zamorakian hasta] [813, 1209, 1205, 1206, 1207, 1208, 1210, 1209]
		putWeapon(itemIdToAnimationSet, 27645, ""); // Mystic cards [Mystic cards] [9847, 823, 9849, 820, 9851, 9852, 9850, 823]
		putWeapon(itemIdToAnimationSet, 27652, "Bow"); // Webweaver bow (u) [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 27657, ""); // Ursine chainmace (u) [Viggora's chainmace] [244, 823, 247, 247, 247, 247, 248, 823]
		putWeapon(itemIdToAnimationSet, 27662, ""); // Accursed sceptre (u) no match [813, 1205, 1205, 1206, 1207, 1208, 1210, 1205]
		putWeapon(itemIdToAnimationSet, 27690, shortsword); // Voidwaker [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 27810, "Dragon dagger"); // Dragon candle dagger [Ancient mace, Arclight, Bow, Claws, Dart, Dragon axe, Dragon battleaxe, Dragon dagger, Dragon knife, Dragon knife (poisoned), Dragon mace, Dragon scimitar, Dragon sword, Dragon warhammer, Inquisitor's mace, Knife (non-dragon), Leaf-bladed battleaxe, Snowball, Thrownaxe, Torag's hammers, Unarmed] [808, 823, 819, 820, 821, 822, 824, 823]
		putWeapon(itemIdToAnimationSet, 27820, ""); // 10th birthday balloons no match [10032, 823, 10033, 10033, 821, 822, 10034, 823]
		putWeapon(itemIdToAnimationSet, 27871, ""); // Giant bronze dagger [Colossal Blade] [9460, 10055, 9461, 9461, 10055, 10054, 9459, 10055]
		putWeapon(itemIdToAnimationSet, 28585 /* ItemID.WARPED_SCEPTRE */, "Warped sceptre");
		putWeapon(itemIdToAnimationSet, 28688 /* ItemID.BLAZING_BLOWPIPE */, "Toxic blowpipe");
		putWeapon(itemIdToAnimationSet, 28682 /* ItemID.DINHS_BLAZING_BULWARK */, "Dinh's bulwhark");
		return itemIdToAnimationSet;
	}

	private List<ItemDef> getItemDefs()
	{
		List<ItemDef> itemDefs = new ArrayList<>();
		Path path = Paths.get("C:\\Users\\samue\\Downloads\\dump\\item_defs");
		for (int i = 0; i < client.getItemCount(); i++) {
			try {
				ItemDef itemDef = plugin.runeliteGson.fromJson(Files.readString(path.resolve(i + ".json")), ItemDef.class);
				itemDefs.add(itemDef);
			} catch (IOException e) {
				System.out.println("null item def " + i + ". Try updating cache?");
				itemDefs.add(null);
				e.printStackTrace();
			}
		}
		return itemDefs;
	}

	private void addHidesArmsHairAndJaw(Constants.Data data, List<ItemDef> itemDefs)
	{
		HashSet<Integer> showsArmsFromCache = new HashSet<>();
		HashSet<Integer> hidesHairFromCache = new HashSet<>();
		HashSet<Integer> hidesJawFromCache = new HashSet<>();
		for (ItemDef itemDef : itemDefs) {
			if (itemDef == null) break;
			if (itemDef.wearPos1 == EquipmentInventorySlot.HEAD.getSlotIdx()) {
				if (itemDef.wearPos2 == KitType.HAIR.getIndex() || itemDef.wearPos3 == KitType.HAIR.getIndex()) {
					hidesHairFromCache.add(itemDef.id);
				}
				if (itemDef.wearPos2 == KitType.JAW.getIndex() || itemDef.wearPos3 == KitType.JAW.getIndex()) {
					hidesJawFromCache.add(itemDef.id);
				}
			} else if (itemDef.wearPos1 == EquipmentInventorySlot.BODY.getSlotIdx()) {
				if (!(itemDef.wearPos2 == KitType.ARMS.getIndex() || itemDef.wearPos3 == KitType.ARMS.getIndex())) {
					showsArmsFromCache.add(itemDef.id);
				}
			}
		}

		data.showArms = showsArmsFromCache;
		data.hideHair = hidesHairFromCache;
		data.hideJaw = hidesJawFromCache;
	}

	private void AddCustomSlotAndNames()
	{
		addUnequippable(48, WEAPON); // Longbow (u)
		addUnequippable(50, WEAPON); // Shortbow (u)
		addUnequippable(54, WEAPON); // Oak shortbow (u)
		addUnequippable(56, WEAPON); // Oak longbow (u)
		addUnequippable(58, WEAPON); // Willow longbow (u)
		addUnequippable(60, WEAPON); // Willow shortbow (u)
		addUnequippable(62, WEAPON); // Maple longbow (u)
		addUnequippable(64, WEAPON); // Maple shortbow (u)
		addUnequippable(66, WEAPON); // Yew longbow (u)
		addUnequippable(68, WEAPON); // Yew shortbow (u)
		addUnequippable(70, WEAPON); // Magic longbow (u)
		addUnequippable(72, WEAPON); // Magic shortbow (u)
		addUnequippable(229, WEAPON); // Vial
		addUnequippable(6664, WEAPON); // Fishing explosive
		addUnequippable(301, WEAPON); // Lobster pot
		addUnequippable(303, WEAPON); // Small fishing net
		addUnequippable(305, WEAPON); // Big fishing net
		addUnequippable(21652, WEAPON); // Drift net
		addUnequippable(307, WEAPON); // Fishing rod
		addUnequippable(309, WEAPON); // Fly fishing rod
		addUnequippable(311, WEAPON); // Harpoon
		addUnequippable(314, WEAPON); // Feather
		addUnequippable(583, WEAPON); // Bailing bucket (icon empty, appears empty)
		addUnequippable(1925, WEAPON); // Bucket
		addUnequippable(590, WEAPON); // Tinderbox
		addUnequippable(677, WEAPON); // Panning tray
		addUnequippable(717, SHIELD); // Scrawled note
		addUnequippable(718, SHIELD); // A scribbled note
		addUnequippable(719, SHIELD); // Scrumpled note
//		addUnequippable(727, WEAPON); // Hollow reed (dupe of 1785)
//		addUnequippable(728, WEAPON); // Hollow reed (dupe of 1785)
		addUnequippable(796, WEAPON, "Exploding vial"); // null
		addUnequippable(797, SHIELD, "Mortar (Pestle and mortar)"); // null
		addUnequippable(798, WEAPON, "Pestle (Pestle and mortar)"); // null (item icon is invisible)
		addUnequippable(946, WEAPON); // Knife
		addUnequippable(952, WEAPON); // Spade
		addUnequippable(954, WEAPON); // Rope
		addUnequippable(970, SHIELD); // Papyrus
		addUnequippable(973, WEAPON); // Charcoal
		addUnequippable(1511, SHIELD); // Logs
		addUnequippable(1601, WEAPON); // Diamond
		addUnequippable(1603, WEAPON); // Ruby
		addUnequippable(1605, WEAPON); // Emerald
		addUnequippable(1607, WEAPON); // Sapphire
		addUnequippable(1609, WEAPON); // Opal
		addUnequippable(1611, WEAPON); // Jade
		addUnequippable(1613, WEAPON); // Red topaz
		addUnequippable(1615, WEAPON); // Dragonstone
		addUnequippable(1733, WEAPON); // Needle
		addUnequippable(1735, WEAPON); // Shears
		addUnequippable(1741, SHIELD); // Leather
		addUnequippable(1761, SHIELD); // Soft clay
		addUnequippable(1785, WEAPON); // Glassblowing pipe
		addUnequippable(1919, WEAPON); // Beer glass. This one is the same model as one the wiki considers
		// equippable, but this one has the better icon so I choose to include this one.
		addUnequippable(1931, WEAPON); // Pot
		addUnequippable(1963, WEAPON); // banana (right-handed)
		addUnequippable(1973, SHIELD); // Chocolate bar
		addUnequippable(2347, WEAPON); // Hammer
		addUnequippable(2520, WEAPON); // Brown toy horsey
		addUnequippable(2522, WEAPON); // White toy horsey
		addUnequippable(2524, WEAPON); // Black toy horsey
		addUnequippable(2526, WEAPON); // Grey toy horsey
		addUnequippable(2946, WEAPON); // Golden tinderbox
		addUnequippable(2949, WEAPON); // Golden hammer
		addUnequippable(2968, SHIELD); // Druidic spell
		addUnequippable(3080, WEAPON, "Infernal pickaxe (yellow)"); // null
		addUnequippable(3164, SHIELD); // Karamjan rum
		addUnequippable(3711, WEAPON); // Keg of beer
		addUnequippable(3803, WEAPON); // Beer tankard
		addUnequippable(3850, WEAPON, "Open book (green)"); // null
		addUnequippable(3935, WEAPON, "Bench"); // null
		addUnequippable(3937, WEAPON, "Bench"); // null
		addUnequippable(3939, WEAPON, "Bench"); // null
		addUnequippable(3941, WEAPON, "Bench"); // null
		addUnequippable(3943, WEAPON, "Bench"); // null
		addUnequippable(3945, WEAPON, "Bench"); // null
		addUnequippable(3947, WEAPON, "Bench"); // null
		addUnequippable(3949, WEAPON, "Bench"); // null
//		addUnequippable(3953, WEAPON); // null (lyre but held in a weird way)
//		addUnequippable(3969, WEAPON); // null (dragon harpoon but floating)
//		addUnequippable(3971, WEAPON); // null (infernal harpoon but floating)
		addUnequippable(4032, WEAPON, "Mod ash's mug"); // null
		addUnequippable(4080, WEAPON, "Yoyo"); // null
		addUnequippable(4155, WEAPON); // Enchanted gem
		addUnequippable(4161, WEAPON); // Bag of salt
		addUnequippable(4251, WEAPON); // Ectophial
		addUnequippable(4435, SHIELD); // Weather report
		addUnequippable(4498, WEAPON); // Rope
		addUnequippable(4500, WEAPON); // Pole
		addUnequippable(4605, WEAPON); // Snake charm
		addUnequippable(4613, WEAPON); // Spinning plate
		addUnequippable(4614, WEAPON); // Broken plate
		addUnequippable(4692, SHIELD); // Gold leaf
		addUnequippable(4704, WEAPON); // Stone bowl
		addUnequippable(4705, WEAPON, "Open book (red/yellow)"); // null
		addUnequippable(4809, SHIELD); // Torn page
		addUnequippable(4814, SHIELD); // Sithik portrait
		addUnequippable(4817, SHIELD); // Book of portraiture
		addUnequippable(4829, SHIELD); // Book of 'h.a.m'
		addUnequippable(4837, SHIELD); // Necromancy book
		addUnequippable(5060, WEAPON); // Dwarven battleaxe
		addUnequippable(5061, WEAPON); // Dwarven battleaxe
		addUnequippable(5081, WEAPON, "Dragon pickaxe (yellow)"); // null
		addUnequippable(5083, WEAPON, "Dragon pickaxe (or) (yellow)"); // null
		addUnequippable(5325, WEAPON); // Gardening trowel
		addUnequippable(5329, WEAPON); // Secateurs
		addUnequippable(5331, WEAPON); // Watering can
		addUnequippable(5341, WEAPON); // Rake
		addUnequippable(5343, WEAPON); // Seed dibber
		addUnequippable(5350, WEAPON); // Empty plant pot
		addUnequippable(5560, WEAPON); // Stethoscope
		addUnequippable(5614, WEAPON); // Magic carpet
		addUnequippable(5732, WEAPON); // Stool
		addUnequippable(5769, SHIELD); // Calquat keg
		addUnequippable(5982, SHIELD); // Watermelon
		addUnequippable(6036, WEAPON); // Plant cure
		addUnequippable(6281, SHIELD); // Thatch spar light
		addUnequippable(6448, WEAPON); // Spadeful of coke
		addUnequippable(6449, WEAPON); // null
		addUnequippable(6451, WEAPON); // null
		addUnequippable(6468, WEAPON); // Plant cure
		addUnequippable(6470, WEAPON); // Compost potion(4)
		addUnequippable(6565, WEAPON, "Bob the cat", ItemID.PET_CAT_1564); // null (item icon is invisible)
		addUnequippable(6573, WEAPON); // Onyx
		addUnequippable(6635, WEAPON); // Commorb
		addUnequippable(6657, TORSO); // Camo top (sleeveless)
		addUnequippable(6658, LEGS); // Camo bottoms (with shoes)
//		addUnequippable(6659, WEAPON); // Camo helmet (looks identical to the regular one)
		addUnequippable(6670, WEAPON); // Fishbowl
		addUnequippable(6671, WEAPON); // Fishbowl
		addUnequippable(6672, WEAPON); // Fishbowl
		addUnequippable(6673, WEAPON); // Fishbowl and net
		addUnequippable(6713, WEAPON); // Wrench
		addUnequippable(6714, WEAPON); // Holy wrench
		addUnequippable(6721, WEAPON); // Rusty scimitar
		addUnequippable(6722, WEAPON); // Zombie head
		addUnequippable(6748, WEAPON); // Demonic sigil
		addUnequippable(6772, SHIELD); // Smouldering pot
		addUnequippable(6788, SHIELD); // Torn robe
		addUnequippable(6789, SHIELD); // Torn robe
		addUnequippable(6817, WEAPON); // Slender blade
		addUnequippable(6818, WEAPON); // Bow-sword
		addUnequippable(6864, WEAPON); // Marionette handle
		addUnequippable(7004, WEAPON, "Chisel"); // null
		addUnequippable(7118, SHIELD); // Canister
		addUnequippable(7119, SHIELD); // Cannon ball
		addUnequippable(7120, SHIELD); // Ramrod
		addUnequippable(7121, SHIELD); // Repair plank
		addUnequippable(7410, WEAPON); // Queen's secateurs
		addUnequippable(7412, WEAPON, "Bench"); // null
		addUnequippable(7421, WEAPON); // Fungicide spray 10
		addUnequippable(7475, WEAPON); // Brulee
		addUnequippable(7509, WEAPON); // Dwarven rock cake
		addUnequippable(7572, SHIELD); // Red banana
		addUnequippable(7637, WEAPON); // Silvthrill rod
		addUnequippable(7682, WEAPON); // Hoop
		addUnequippable(7684, WEAPON); // Dart
		addUnequippable(7686, WEAPON); // Bow and arrow
		addUnequippable(7688, WEAPON); // Kettle
		addUnequippable(7728, WEAPON); // Empty cup
		addUnequippable(7732, WEAPON); // Porcelain cup
		addUnequippable(7735, WEAPON); // Porcelain cup
		addUnequippable(7744, WEAPON); // Asgarnian ale
		addUnequippable(7746, WEAPON); // Greenman's ale
		addUnequippable(7748, WEAPON); // Dragon bitter
		addUnequippable(7750, WEAPON); // Moonlight mead
		addUnequippable(7752, WEAPON); // Cider
		addUnequippable(7754, WEAPON); // Chef's delight
		addUnequippable(7756, WEAPON); // Paintbrush
		addUnequippable(7758, WEAPON, "Rusty sword (looks weird)"); // null
		addUnequippable(7773, WEAPON); // Branch
		addUnequippable(7778, WEAPON); // Short vine
		addUnequippable(7804, WEAPON); // Ancient mjolnir
		addUnequippable(8794, WEAPON); // Saw
		addUnequippable(8798, WEAPON, "Chair/bench"); // null
		addUnequippable(8799, WEAPON, "Chair/bench"); // null
		addUnequippable(8800, WEAPON, "Chair/bench"); // null
		addUnequippable(8801, WEAPON, "Chair/bench"); // null
		addUnequippable(8802, WEAPON, "Chair/bench"); // null
		addUnequippable(8803, WEAPON, "Chair/bench"); // null
		addUnequippable(8804, WEAPON, "Chair/bench"); // null
		addUnequippable(8805, WEAPON, "Chair/bench"); // null
		addUnequippable(8806, WEAPON, "Chair/bench"); // null
		addUnequippable(8807, WEAPON, "Chair/bench"); // null
		addUnequippable(8808, WEAPON, "Chair/bench"); // null
		addUnequippable(8809, WEAPON, "Chair/bench"); // null
		addUnequippable(8810, WEAPON, "Chair/bench"); // null
		addUnequippable(8811, WEAPON, "Chair/bench"); // null
		addUnequippable(8812, WEAPON, "Chair/bench"); // null
		addUnequippable(8813, WEAPON, "Chair/bench"); // null
		addUnequippable(8814, WEAPON, "Chair/bench"); // null
		addUnequippable(8815, WEAPON, "Chair/bench"); // null
		addUnequippable(8816, WEAPON, "Chair/bench"); // null
		addUnequippable(8817, WEAPON, "Chair/bench"); // null
		addUnequippable(8818, WEAPON, "Chair/bench"); // null
		addUnequippable(8819, WEAPON, "Chair/bench"); // null
		addUnequippable(8820, WEAPON, "Chair/bench"); // null
		addUnequippable(8821, WEAPON, "Chair/bench"); // null
		addUnequippable(8822, WEAPON, "Chair/bench"); // null
		addUnequippable(8823, WEAPON, "Chair/bench"); // null
		addUnequippable(8824, WEAPON, "Chair/bench"); // null
		addUnequippable(8825, WEAPON, "Chair/bench"); // null
		addUnequippable(8826, WEAPON, "Chair/bench"); // null
		addUnequippable(8827, WEAPON, "Chair/bench"); // null
		addUnequippable(8829, WEAPON, "Chair/bench"); // null
		addUnequippable(8830, WEAPON, "Chair/bench"); // null
		addUnequippable(8831, WEAPON, "Chair/bench"); // null
		addUnequippable(8832, WEAPON, "Chair/bench"); // null
		addUnequippable(8833, WEAPON, "Chair/bench"); // null
		addUnequippable(8834, WEAPON, "Chair/bench"); // null
		addUnequippable(8835, WEAPON, "Chair/bench"); // null
		addUnequippable(8857, WEAPON); // Shot
		addUnequippable(8940, SHIELD); // Rum
		addUnequippable(8941, SHIELD); // Rum
		addUnequippable(8986, WEAPON); // Bucket
		addUnequippable(8987, WEAPON); // Torch
		addUnequippable(9060, SHIELD, "Red bottle (offhand)"); // null
		addUnequippable(9061, SHIELD, "Blue bottle (offhand)"); // null
		addUnequippable(9062, WEAPON, "Blue bottle"); // null
		addUnequippable(9063, WEAPON, "Yellow bottle"); // null
		addUnequippable(9065, SHIELD); // Emerald lantern
		addUnequippable(9085, SHIELD); // Empty vial
		addUnequippable(9087, SHIELD); // Waking sleep vial
		addUnequippable(9103, HEAD); // A special tiara
		addUnequippable(9106, HEAD); // Astral tiara
		addUnequippable(9138, SHIELD, "Logs"); // null (logs)
		addUnequippable(9420, SHIELD); // Bronze limbs
		addUnequippable(9422, SHIELD); // Blurite limbs
		addUnequippable(9423, SHIELD); // Iron limbs
		addUnequippable(9425, SHIELD); // Steel limbs
		addUnequippable(9427, SHIELD); // Mithril limbs
		addUnequippable(9429, SHIELD); // Adamantite limbs
		addUnequippable(9431, SHIELD); // Runite limbs
		addUnequippable(9440, WEAPON); // Wooden stock
		addUnequippable(9442, WEAPON); // Oak stock
		addUnequippable(9444, WEAPON); // Willow stock
		addUnequippable(9446, WEAPON); // Teak stock
		addUnequippable(9448, WEAPON); // Maple stock
		addUnequippable(9450, WEAPON); // Mahogany stock
		addUnequippable(9452, WEAPON); // Yew stock
		addUnequippable(9454, WEAPON); // Bronze crossbow (u)
		addUnequippable(9456, WEAPON); // Blurite crossbow (u)
		addUnequippable(9457, WEAPON); // Iron crossbow (u)
		addUnequippable(9459, WEAPON); // Steel crossbow (u)
		addUnequippable(9461, WEAPON); // Mithril crossbow (u)
		addUnequippable(9463, WEAPON); // Adamant crossbow (u)
		addUnequippable(9465, WEAPON); // Runite crossbow (u)
		addUnequippable(9590, WEAPON); // Dossier
		addUnequippable(9631, SHIELD, "Bucket"); // null
		addUnequippable(9660, WEAPON); // Bucket
		addUnequippable(9665, WEAPON); // Torch
		addUnequippable(9893, WEAPON, "Mortar (Pestle and mortar)"); // null
		addUnequippable(9894, WEAPON, "Hammer"); // null
		addUnequippable(9895, SHIELD, "Chisel (offhand)"); // null
		addUnequippable(9896, WEAPON, "Frying pan"); // null
		addUnequippable(9897, WEAPON, "Axe"); // null
		addUnequippable(9898, SHIELD, "Red shield"); // null
		addUnequippable(9899, WEAPON, "Small red shield"); // null
		addUnequippable(9905, WEAPON, "Barrel"); // null
		addUnequippable(9906, WEAPON); // Ghost buster 500
		addUnequippable(9907, WEAPON); // Ghost buster 500
		addUnequippable(9908, WEAPON); // Ghost buster 500
		addUnequippable(9909, WEAPON); // Ghost buster 500
		addUnequippable(9910, WEAPON); // Ghost buster 500
		addUnequippable(9911, WEAPON); // Ghost buster 500
		addUnequippable(9912, WEAPON); // Ghost buster 500
		addUnequippable(9913, SHIELD); // White destabiliser
		addUnequippable(9914, SHIELD); // Red destabiliser
		addUnequippable(9915, SHIELD); // Blue destabiliser
		addUnequippable(9916, SHIELD); // Green destabiliser
		addUnequippable(9917, SHIELD); // Yellow destabiliser
		addUnequippable(9918, SHIELD); // Black destabiliser
		addUnequippable(9943, WEAPON); // Sandbag
		addUnequippable(10022, SHIELD); // null
		addUnequippable(10029, WEAPON); // Teasing stick
		addUnequippable(10131, WEAPON, "Barb-tail harpoon (held backwards)"); // null
		addUnequippable(10152, WEAPON, "Brown barb-tail kebbit in noose"); // null
		addUnequippable(10153, WEAPON, "White barb-tail kebbit in noose"); // null
		addUnequippable(10154, WEAPON, "Beige barb-tail kebbit in noose"); // null
		addUnequippable(10155, WEAPON, "Dark brown barb-tail kebbit in noose"); // null
		addUnequippable(10484, WEAPON, "Brown spiky kebbit in noose"); // null
		addUnequippable(10485, WEAPON); // Scroll
		addUnequippable(10488, SHIELD); // Selected iron
		addUnequippable(10544, WEAPON); // Healing vial(2)
		addUnequippable(10566, CAPE, "Fire cape (untextured)"); // Fire cape
		addUnequippable(10568, WEAPON, "3rd age pickaxe (light)"); // null
		addUnequippable(10810, SHIELD); // Arctic pine logs
		addUnequippable(10841, WEAPON); // Apricot cream pie
		addUnequippable(10842, WEAPON); // Decapitated head
		addUnequippable(10857, WEAPON); // Severed leg
		addUnequippable(10860, WEAPON, "Tea flask"); // null
		addUnequippable(10861, SHIELD, "Tiny tea cup"); // null
		addUnequippable(10886, WEAPON); // Prayer book
		addUnequippable(10952, WEAPON); // Slayer bell
		addUnequippable(11012, WEAPON); // Wand
		addUnequippable(11013, WEAPON); // Infused wand
		addUnequippable(11027, WEAPON); // Easter egg
		addUnequippable(11028, WEAPON); // Easter egg
		addUnequippable(11029, WEAPON); // Easter egg
		addUnequippable(11030, WEAPON); // Easter egg
		addUnequippable(11046, WEAPON); // Rope
		addUnequippable(11063, WEAPON, "Paintbrush (I think)"); // null
		addUnequippable(11132, HANDS); // Onyx bracelet
		addUnequippable(11154, WEAPON); // Dream potion
		addUnequippable(11167, WEAPON); // Phoenix crossbow
		addUnequippable(11204, WEAPON); // Shrink-me-quick
		addUnequippable(11279, WEAPON); // Elvarg's head
		addUnequippable(11288, SHIELD, "Yellow vial (offhand)"); // null
		addUnequippable(11289, WEAPON, "Yellow vial"); // null
		addUnequippable(11290, WEAPON, "Cyan vial"); // null
		addUnequippable(11291, WEAPON, "Red vial"); // null
		addUnequippable(11292, WEAPON, "Lime green vial"); // null
		addUnequippable(11293, WEAPON, "Light turquoise vial"); // null
		addUnequippable(11294, WEAPON, "Blue vial"); // null
		addUnequippable(11295, WEAPON, "Dark gray vial"); // null
		addUnequippable(11296, WEAPON, "White vial"); // null
		addUnequippable(11297, WEAPON, "Orange vial"); // null
		addUnequippable(11298, WEAPON, "Light lime green vial"); // null
		addUnequippable(11299, WEAPON, "Pink vial"); // null
		addUnequippable(11300, WEAPON, "Light blue vial"); // null
		addUnequippable(11301, WEAPON, "Light green vial"); // null
		addUnequippable(11302, WEAPON, "Purple vial"); // null
		addUnequippable(11303, WEAPON, "Light orange vial"); // null
		addUnequippable(11304, WEAPON, "Turquoise vial"); // null
		addUnequippable(11305, WEAPON, "Black vial"); // null
		addUnequippable(11306, WEAPON, "Training bow (held incorrectly)"); // null
		addUnequippable(11307, WEAPON, "Shortbow (held incorrectly)"); // null
		addUnequippable(11308, WEAPON, "Oak Shortbow (held incorrectly)"); // null
		addUnequippable(11309, WEAPON, "Willow Shortbow (held incorrectly)"); // null
		addUnequippable(11310, WEAPON, "Maple Shortbow (held incorrectly)"); // null
		addUnequippable(11311, WEAPON, "Yew Shortbow (held incorrectly)"); // null
		addUnequippable(11312, WEAPON, "Magic Shortbow (held incorrectly)"); // null
		addUnequippable(11313, WEAPON, "Longbow (held incorrectly)"); // null
		addUnequippable(11314, WEAPON, "Oak Longbow (held incorrectly)"); // null
		addUnequippable(11315, WEAPON, "Willow Longbow (held incorrectly)"); // null
		addUnequippable(11316, WEAPON, "Maple Longbow (held incorrectly)"); // null
		addUnequippable(11317, WEAPON, "Yew Longbow (held incorrectly)"); // null
		addUnequippable(11318, WEAPON, "Magic Longbow (held incorrectly)"); // null
		addUnequippable(11319, WEAPON, "Seercull (held incorrectly)"); // null
		addUnequippable(11320, WEAPON, "Shark"); // null
		addUnequippable(11321, WEAPON, "Swordfish"); // null
		addUnequippable(11322, WEAPON, "Tuna"); // null
		addUnequippable(11323, WEAPON); // Barbarian rod
		addUnequippable(11542, WEAPON, "Stool"); // null
		addUnequippable(11543, WEAPON, "Bench"); // null
		addUnequippable(12401, WEAPON, "Map (buggy graphic)"); // null
		// 12660 through 12690 are just jaw slot items? They are called "Clan wars cape" but idk what they do.
		addUnequippable(13215, WEAPON); // Tiger toy
		addUnequippable(13216, WEAPON); // Lion toy
		addUnequippable(13217, WEAPON); // Snow leopard toy
		addUnequippable(13218, WEAPON); // Amur leopard toy
		addUnequippable(13233, SHIELD); // Smouldering stone
		addUnequippable(13353, WEAPON); // Gricoller's can
		addUnequippable(13446, WEAPON); // Dark essence block
		addUnequippable(13570, WEAPON); // Juniper charcoal
		addUnequippable(13682, WEAPON, "Cabbage"); // null
		addUnequippable(13683, WEAPON, "Cabbage"); // null
		addUnequippable(13685, WEAPON, "Red cabbage"); // null
		addUnequippable(19492, HANDS); // Zenyte bracelet
		addUnequippable(19493, WEAPON); // Zenyte
		addUnequippable(20275, WEAPON); // Gnomish firelighter
		addUnequippable(20397, WEAPON); // Spear
		addUnequippable(21186, CAPE, "Fire max cape (untextured)"); // Fire max cape
		addUnequippable(21253, HEAD); // Farmer's strawhat
		addUnequippable(21284, CAPE, "Infernal max cape (untextured)"); // Infernal max cape
		addUnequippable(21297, CAPE, "Infernal cape (untextured)"); // Infernal cape
		addUnequippable(21347, WEAPON); // Amethyst
		addUnequippable(21655, WEAPON); // Pufferfish
		addUnequippable(21918, SHIELD); // Dragon limbs
		addUnequippable(21921, WEAPON); // Dragon crossbow (u)
		addUnequippable(22997, WEAPON); // Bottomless compost bucket
		addUnequippable(23679, WEAPON, "Dragon pickaxe (zalcano) (yellow)"); // null
		addUnequippable(23684, WEAPON, "Crystal pickaxe (glowing)"); // null
//		addUnequippable(23766, WEAPON); // null // TODO this looks identical to the crystal harpoon.
		addUnequippable(23767, WEAPON, "Crystal harpoon (corrupted)"); // null
		addUnequippable(23819, WEAPON, "Orb of light"); // null
		addUnequippable(24077, SHIELD, "Bolt tip"); // null
		addUnequippable(24080, SHIELD, "Bolt tip"); // null
		addUnequippable(24081, SHIELD, "Bolt tip"); // null
		addUnequippable(24082, SHIELD, "Bolt tip"); // null
		addUnequippable(24083, SHIELD, "Bolt tip"); // null
		addUnequippable(24084, SHIELD, "Bolt tip"); // null
		addUnequippable(24085, SHIELD, "Bolt tip"); // null
		addUnequippable(24086, SHIELD, "Bolt tip"); // null
		addUnequippable(24087, SHIELD, "Bolt tip"); // null
		addUnequippable(24088, SHIELD, "Bolt tip"); // null
		addUnequippable(24089, WEAPON, "Bolt"); // null
		addUnequippable(24090, WEAPON, "Bolt"); // null
		addUnequippable(24091, WEAPON, "Bolt"); // null
		addUnequippable(24093, WEAPON, "Bolt"); // null
		addUnequippable(24094, WEAPON, "Bolt"); // null
		addUnequippable(24095, WEAPON, "Bolt"); // null
		addUnequippable(24096, WEAPON, "Bolt"); // null
		addUnequippable(24097, WEAPON, "Bolt"); // null
		addUnequippable(24098, WEAPON, "Bolt"); // null
		addUnequippable(24099, WEAPON, "Bolt"); // null
		addUnequippable(24100, WEAPON, "Bolt"); // null
		addUnequippable(24101, WEAPON, "Bolt"); // null
		addUnequippable(24102, WEAPON, "Bolt"); // null
		addUnequippable(24103, WEAPON, "Bolt"); // null
		addUnequippable(24104, WEAPON, "Bolt"); // null
		addUnequippable(24105, WEAPON, "Bolt"); // null
		addUnequippable(24106, WEAPON, "Headless arrow"); // null
		addUnequippable(24107, WEAPON, "Arrow shaft"); // null
		addUnequippable(24108, WEAPON, "Arrowhead"); // null
		addUnequippable(24109, WEAPON, "Arrowhead"); // null
		addUnequippable(24110, WEAPON, "Arrowhead"); // null
		addUnequippable(24111, WEAPON, "Arrowhead"); // null
		addUnequippable(24112, WEAPON, "Arrowhead"); // null
		addUnequippable(24113, WEAPON, "Arrowhead"); // null
		addUnequippable(24114, WEAPON, "Arrowhead"); // null
		addUnequippable(24115, WEAPON, "Arrowhead"); // null
		addUnequippable(24116, WEAPON, "Dart tip"); // null
		addUnequippable(24117, WEAPON, "Dart tip"); // null
		addUnequippable(24118, WEAPON, "Dart tip"); // null
		addUnequippable(24119, WEAPON, "Dart tip"); // null
		addUnequippable(24120, WEAPON, "Dart tip"); // null
		addUnequippable(24121, WEAPON, "Dart tip"); // null
		addUnequippable(24122, WEAPON, "Dart tip"); // null
		addUnequippable(24273, WEAPON, "Basilisk stone prison"); // null
		addUnequippable(24274, WEAPON, "Basilisk stone prison"); // null
		addUnequippable(24275, WEAPON, "Basilisk stone prison"); // null
		addUnequippable(24386, WEAPON, "Green and brown stick"); // null
		addUnequippable(24435, WEAPON); // Festive pot
		addUnequippable(24437, SHIELD); // Gingerbread shield
		addUnequippable(24460, WEAPON); // Twisted teleport scroll
		addUnequippable(24487, SHIELD, "Sextant"); // null
		addUnequippable(24998, SHIELD, "Black crystal"); // null (item icon is invisible)
		addUnequippable(24999, SHIELD, "Stick"); // null (item icon is invisible)
		addUnequippable(25000, WEAPON, "Paper"); // null (item icon is invisible)
		addUnequippable(25087, WEAPON); // Trailblazer teleport scroll
		addUnequippable(25102, SHIELD); // Fairy mushroom
		addUnequippable(25106, CAPE); // Extradimensional bag
		addUnequippable(25484, WEAPON); // Webweaver bow (u)
		addUnequippable(25485, WEAPON); // Webweaver bow
		addUnequippable(25486, WEAPON); // Ursine chainmace (u)
		addUnequippable(25487, WEAPON); // Ursine chainmace
		addUnequippable(25488, WEAPON); // Accursed sceptre (u)
		addUnequippable(25489, WEAPON); // Accursed sceptre
		addUnequippable(25490, WEAPON); // Voidwaker
		addUnequippable(25491, WEAPON); // Accursed sceptre (au)
		addUnequippable(25492, WEAPON); // Accursed sceptre (a)
		addUnequippable(25710, WEAPON); // Stool
		addUnequippable(25848, WEAPON, "Amethyst dart tip"); // null
		addUnequippable(25938, WEAPON, "Ghommal's hilt 1 (mainhand)", 25926); // Anim offhand
		addUnequippable(25941, WEAPON, "Ghommal's hilt 2 (mainhand)", 25928); // Anim offhand
		addUnequippable(25944, WEAPON, "Ghommal's hilt 3 (mainhand)", 25930); // Anim offhand
		addUnequippable(25947, WEAPON, "Ghommal's hilt 4 (mainhand)", 25932); // Anim offhand
		addUnequippable(25950, WEAPON, "Ghommal's hilt 5 (mainhand)", 25934); // Anim offhand
		addUnequippable(25953, WEAPON, "Ghommal's hilt 6 (mainhand)", 25936); // Anim offhand
		addUnequippable(26549, AMULET); // Portable waystone
		addUnequippable(26551, SHIELD); // Arcane grimoire
		addUnequippable(26581, SHIELD); // Goblin potion(4)
		addUnequippable(26880, WEAPON); // Catalytic guardian stone
		addUnequippable(27416, WEAPON); // Speedy teleport scroll
		addUnequippable(27546, WEAPON, "Ghommal's avernic defender 5 (mainhand)", 27550); // Anim offhand
		addUnequippable(27548, WEAPON, "Ghommal's avernic defender 6 (mainhand)", 27552); // Anim offhand
		addUnequippable(27873, WEAPON); // Eastfloor spade
		addUnequippable(7414, WEAPON); // Paddle
		addUnequippable(6123, WEAPON); // Beer glass
		addUnequippable(9702, WEAPON); // Stick
		addUnequippable(10840, WEAPON); // A jester stick
		int[] shouldNotBeEquippable = {22664, 22665, 22666, 22812, 22814, 26686, 26686, 26687, 26687, 26688, 26688, 26698, 26698, 26699, 26699, 26700, 26700, 26701, 26701, 26702, 26702, 26703, 26703, 4284, 4285};
		for (int i : shouldNotBeEquippable)
		{
			OVERRIDE_EQUIPPABILITY_OR_SLOT.put(i, -1);
		}

		Set<Integer> jawSlotItems = ImmutableSet.of(10556, 10557, 10558, 10559, 10567, 20802, 22308, 22309, 22310, 22311, 22312, 22313, 22314, 22315, 22337, 22338, 22339, 22340, 22341, 22342, 22343, 22344, 22345, 22346, 22347, 22348, 22349, 22721, 22722, 22723, 22724, 22725, 22726, 22727, 22728, 22729, 22730, 23460, 23461, 23462, 23463, 23464, 23465, 23466, 23467, 23468, 23469, 23470, 23471, 23472, 23473, 23474, 23475, 23476, 23477, 23478, 23479, 23480, 23481, 23482, 23483, 23484, 23485, 23486, 25228, 25229, 25230, 25231, 25232, 25233, 25234, 25235, 25236, 25237, 25238, 25239, 25240, 25241, 25242, 25243, 25212, 25213, 25214, 25215, 25216, 25217, 25218, 25219, 25220, 25221, 25222, 25223, 25224, 25225, 25226, 25227);
		for (Integer itemId : jawSlotItems)
		{
			OVERRIDE_EQUIPPABILITY_OR_SLOT.put(itemId, Constants.JAW_SLOT);
		}
	}

	private List<AnimationSet> findMatchingAnimationSets(int itemId)
	{
		Set<List<Integer>> list = this.poseanims.get(itemId);
		int variationId = itemId;
		if (list == null)
		{
			Collection<Integer> variations = ItemVariationMapping.getVariations(ItemVariationMapping.map(itemId));
			for (Integer variation : variations)
			{
				if (this.poseanims.containsKey(variation))
				{
					list = poseanims.get(variation);
					variationId = variation;
					break;
				}
			}
		}

		boolean hasPoseAnims = list != null;
		List<AnimationSet> matchingSets = new ArrayList<>();
		boolean uhoh = false;
		List<Integer> poseanims = null;
		if (hasPoseAnims)
		{
			uhoh = list.size() > 1;
			if (uhoh) System.out.println("more than 1 set of pose animations: " + itemId + " " + variationId);
			poseanims = list.iterator().next();
			for (AnimationSet animationSet : Constants.animationSets)
			{
				if (
					Objects.equals(animationSet.getAnimation(Swap.AnimationType.STAND), poseanims.get(0))
						&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.ROTATE), poseanims.get(1))
						&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.WALK), poseanims.get(2))
						&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.WALK_BACKWARD), poseanims.get(3))
						&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.SHUFFLE_LEFT), poseanims.get(4))
						&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.SHUFFLE_RIGHT), poseanims.get(5))
						&& Objects.equals(animationSet.getAnimation(Swap.AnimationType.RUN), poseanims.get(6))
				)
				{
					matchingSets.add(animationSet);
				}
			}
		}
		return matchingSets;
	}

	private void putWeapon(Map<Integer, AnimationSet> itemIdToAnimationSet, int itemId, String animationSetName)
	{
		int baseId = ItemVariationMapping.map(itemId);
		AnimationSet animationSet;
		if ("".equals(animationSetName)) {
			List<AnimationSet> matchingAnimationSets = findMatchingAnimationSets(baseId);
			if (matchingAnimationSets.size() > 1) {
				System.out.println("multiple matching sets for item " + itemId + " " + matchingAnimationSets);
				return;
			} else if (matchingAnimationSets.isEmpty()) {
				System.out.println("no matching sets for item " + itemId + " " + matchingAnimationSets);
				return;
			}
			animationSet = matchingAnimationSets.iterator().next();
		} else {
			animationSet = AnimationSet.getAnimationSet(animationSetName);
		}

		if (animationSet == null) {
			System.out.println("null animationset " + animationSetName);
			return;
		}

		itemIdToAnimationSet.put(baseId, animationSet);
	}

	private void json(boolean skipItemDefs)
	{
		Constants.Data data = new Constants.Data();
		data.version = 8;

		Constants.Data bundledData = Constants.getBundledData(plugin.runeliteGson);
		if (!skipItemDefs) {
			List<ItemDef> itemDefs = getItemDefs();

			Map<Integer, List<Integer>> kitIndexToItemIds = getSlotAndNameData(itemDefs);
			data.slotOverrides = kitIndexToItemIds;
			data.nameIconOverrides = EQUIPPABLE_ITEMS_NOT_MARKED_AS_EQUIPMENT_NAMES;

			addHidesArmsHairAndJaw(data, itemDefs);
		} else {
			data.slotOverrides = bundledData.slotOverrides;
			data.nameIconOverrides = bundledData.nameIconOverrides;
			data.showArms = bundledData.showArms;
			data.hideHair = bundledData.hideHair;
			data.hideJaw = bundledData.hideJaw;
		}

		Map<Integer, AnimationSet> itemIdToAnimationSet = getWeaponToAnimationSet();
		Map<String, List<Integer>> poseanims = new HashMap<>();
		for (Map.Entry<Integer, AnimationSet> entry : itemIdToAnimationSet.entrySet())
		{
			List<Integer> itemIds = poseanims.getOrDefault(entry.getValue().name, new ArrayList<>());
			itemIds.add(entry.getKey());
			poseanims.put(entry.getValue().name, itemIds);
		}
		data.poseanims = new HashMap<>();
		for (Map.Entry<String, List<Integer>> entry : poseanims.entrySet())
		{
			data.poseanims.put(entry.getKey(), entry.getValue().stream().mapToInt(i -> i).sorted().toArray());
		}

		data.projectiles = getProjectileCasts();
		data.animationSets = AnimationSets.getAnimationSets();
		data.descriptions = AnimationSets.descriptions;

		String s = plugin.runeliteGson.toJson(data);
		System.out.println("your uhohlist is " + uhohList);

		System.out.println("     ##### Json diffs: #####");
		System.out.println(bundledData.version + " " + data.version);
		showDiffs(bundledData.showArms, data.showArms, "show arms");
		showDiffs(bundledData.hideHair, data.hideHair, "hide hair");
		showDiffs(bundledData.hideJaw, data.hideJaw, "hide jaw");
		for (KitType value : KitType.values())
		{
			List<Integer> ids1 = bundledData.slotOverrides.get(value.ordinal());
			List<Integer> ids2 = data.slotOverrides.get(value.ordinal());
			ids1 = ids1 == null ? new ArrayList<>() : ids1;
			ids2 = ids2 == null ? new ArrayList<>() : ids2;
			showDiffs(ids1, ids2, "kittype " + value);
		}
		System.out.println("poseanims: " + bundledData.poseanims.equals(data.poseanims) + " " + bundledData.poseanims.size() + " " + data.poseanims.size());
		System.out.println("animationsets: " + bundledData.animationSets.equals(data.animationSets) + " " + bundledData.animationSets.size() + " " + data.animationSets.size());
		System.out.println("descriptions: " + bundledData.descriptions.equals(data.descriptions));
		System.out.println("nameiconoverrides: " + bundledData.nameIconOverrides.equals(data.nameIconOverrides));
		System.out.println("projectiles: " + bundledData.projectiles.equals(data.projectiles));
//		showDiffs(bundledData.slotOverrides, data.slotOverrides, "slot overrides");

		System.out.println("json is \n" + s);
		Constants.loadData(plugin.runeliteGson.fromJson(s, Constants.Data.class));
		if (plugin.pluginPanel != null) plugin.pluginPanel.rebuild();
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick) {
//		for (int i = 0; i < Math.min(100, client.getLocalPlayer().getModel().getFaceColors1().length); i++)
//		for (int i = 0; i < client.getLocalPlayer().getModel().getFaceColors1().length; i++)
//		{
//			client.getLocalPlayer().getModel().getFaceColors1()[i] = 0;
//		}
		if (demoanim != -1) {
//			client.getLocalPlayer().setAnimation(demoanim);
//			client.getLocalPlayer().setAnimationFrame(0);
		}
		if (demogfx != -1 && client.getLocalPlayer().getGraphic() != demogfx) {
			client.getLocalPlayer().setGraphic(demogfx);
			client.getLocalPlayer().setSpotAnimFrame(0);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked)
	{
		if (menuOptionClicked.getMenuOption().equals("Use") && menuOptionClicked.getItemId() == 563) {
			if (demoanim != -1) {
				demoanim--;
				for (Constants.ActorAnimation value : values())
				{
					value.setAnimation(client.getLocalPlayer(), demoanim);
				}
				System.out.println("demo anim " + demoanim);
				client.playSoundEffect(demoanim);
			}
			if (demogfx != -1) {
				demogfx--;
				client.getLocalPlayer().setGraphic(demogfx);
				client.getLocalPlayer().setSpotAnimFrame(0);
				client.getLocalPlayer().setGraphicHeight(0);
				System.out.println("demo gfx " + demogfx);
			}
		} else if (menuOptionClicked.getMenuOption().equals("Use") && menuOptionClicked.getItemId() == 995){
			if (demoanim != -1) {
				demoanim++;
				client.playSoundEffect(demoanim);
				for (Constants.ActorAnimation value : values())
				{
					value.setAnimation(client.getLocalPlayer(), demoanim);
				}
				System.out.println("demo anim " + demoanim);
			}
			if (demogfx != -1) {
				demogfx++;
				System.out.println("demo gfx " + demogfx);
			}
		}
//		System.out.println(menuOptionClicked.getMenuOption() + " " + Text.removeTags(menuOptionClicked.getMenuTarget()));
	}

	private void showDiffs(Collection<Integer> before, Collection<Integer> after, String name)
	{
		Set<Integer> extraFromCache = new HashSet<>();
		extraFromCache.addAll(before);
		extraFromCache.removeAll(after);
		Set<Integer> extraFromManual = new HashSet<>();
		extraFromManual.addAll(after);
		extraFromManual.removeAll(before);
		if (!extraFromCache.isEmpty() || !extraFromManual.isEmpty()) {
			System.out.print(name + " removed " + extraFromCache);
			System.out.println(" added " + extraFromManual);
		}
	}

	private List<ProjectileCast> getProjectileCasts()
	{
    /*
	Types of projectiles:
	hit gfx (most spells).
		the hit gfx is applied when the spell casts, but has a timer before it actually shows.
			This means if you're at a very long range it is possible for the hit gfx to never occur because it is replaced by the next spell cast before it goes off.
		many of these can splash animation instead.
	no hit gfx (ranged attacks mostly).
	no cast gfx or projectile - requires additional information to identify what spell was cast.
	no projectile spells (such as ice barrage) - when replacing, requires hit delay to be calculated.
	TODO multiple projectile spells (such as dark bow).
		Dark bow spec is actually 4 projectiles (with 2 different versions, one with dragon arrows one without).
	enchanted bolts.
	 */
		// TODO any arrow, any spell.

		List<ProjectileCast> projectiles = new ArrayList<>();
		projectiles.add(p().id(0).name("Wind Strike").sprite(SpriteID.SPELL_WIND_STRIKE).cast(1162, 90, 92).projectile(91, 51, 64, 172, 124, 16).hit(92, 124).build());
		projectiles.add(p().id(1).name("Confuse").sprite(SpriteID.SPELL_CONFUSE).cast(1163, 102, 92).projectile(103, 61, 64, 172, 124, 16).hit(104, 124).build());
		projectiles.add(p().id(2).name("Water Strike").sprite(SpriteID.SPELL_WATER_STRIKE).cast(1162, 93, 92).projectile(94, 51, 64, 172, 124, 16).hit(95, 124).build());
		projectiles.add(p().id(3).name("Earth Strike").sprite(SpriteID.SPELL_EARTH_STRIKE).cast(1162, 96, 92).projectile(97, 51, 64, 172, 124, 16).hit(98, 124).build());
		projectiles.add(p().id(4).name("Weaken").sprite(SpriteID.SPELL_WEAKEN).cast(1164, 105, 92).projectile(106, 44, 64, 172, 124, 16).hit(107, 124).build());
		projectiles.add(p().id(5).name("Fire Strike").sprite(SpriteID.SPELL_FIRE_STRIKE).cast(1162, 99, 92).projectile(100, 51, 64, 172, 124, 16).hit(101, 124).build());
		projectiles.add(p().id(6).name("Wind Bolt").sprite(SpriteID.SPELL_WIND_BOLT).cast(1162, 117, 92).projectile(118, 51, 64, 172, 124, 16).hit(119, 124).build());
		projectiles.add(p().id(7).name("Curse").sprite(SpriteID.SPELL_CURSE).cast(1165, 108, 92).projectile(109, 51, 64, 172, 124, 16).hit(110, 124).build());
		projectiles.add(p().id(8).name("Bind").sprite(SpriteID.SPELL_BIND).cast(1161, 177, 92).projectile(178, 75, 64, 172, 0, 16).hit(181, 0).hit(181, 124).build());
		projectiles.add(p().id(9).name("Water Bolt").sprite(SpriteID.SPELL_WATER_BOLT).cast(1162, 120, 92).projectile(121, 51, 64, 172, 124, 16).hit(122, 124).build());
		projectiles.add(p().id(10).name("Earth Bolt").sprite(SpriteID.SPELL_EARTH_BOLT).cast(1162, 123, 92).projectile(124, 51, 64, 172, 124, 16).hit(125, 124).build());
		projectiles.add(p().id(11).name("Telegrab").sprite(SpriteID.SPELL_TELEKINETIC_GRAB).cast(723, 142, 92).projectile(143, 48, 64, 172, 0, 16).hit(144, 0).build());
		projectiles.add(p().id(12).name("Fire Bolt").sprite(SpriteID.SPELL_FIRE_BOLT).cast(1162, 126, 92).projectile(127, 51, 64, 172, 124, 16).hit(128, 124).build());
		projectiles.add(p().id(13).name("Crumble Undead").sprite(SpriteID.SPELL_CRUMBLE_UNDEAD).cast(1166, 145, 92).projectile(146, 46, 64, 172, 124, 16).hit(147, 124).build());
		projectiles.add(p().id(14).name("Wind Blast").sprite(SpriteID.SPELL_WIND_BLAST).cast(1162, 132, 92).projectile(133, 51, 64, 172, 124, 16).hit(134, 124).build());
		projectiles.add(p().id(15).name("Water Blast").sprite(SpriteID.SPELL_WATER_BLAST).cast(1162, 135, 92).projectile(136, 51, 64, 172, 124, 16).hit(137, 124).build());
		projectiles.add(p().id(16).name("Iban Blast").sprite(SpriteID.SPELL_IBAN_BLAST).cast(708, 87, 92).projectile(88, 60, 64, 172, 124, 16).hit(89, 124).build());
		projectiles.add(p().id(17).name("Snare").sprite(SpriteID.SPELL_SNARE).cast(1161, 177, 92).projectile(178, 75, 64, 172, 0, 16).hit(180, 0).hit(180, 124).build());
		projectiles.add(p().id(18).name("Magic Dart").sprite(SpriteID.SPELL_MAGIC_DART).cast(1576, -1, 92).projectile(328, 51, 64, 172, 124, 16).hit(329, 124).build());
		projectiles.add(p().id(19).name("Earth Blast").sprite(SpriteID.SPELL_EARTH_BLAST).cast(1162, 138, 92).projectile(139, 51, 64, 172, 124, 16).hit(140, 124).build());
		projectiles.add(p().id(20).name("Fire Blast").sprite(SpriteID.SPELL_FIRE_BLAST).cast(1162, 129, 92).projectile(130, 51, 64, 172, 124, 16).hit(131, 124).build());
		projectiles.add(p().id(21).name("Saradomin Strike").sprite(SpriteID.SPELL_SARADOMIN_STRIKE).simpleSpell(811, 76).build());
		projectiles.add(p().id(22).name("Claws of Guthix").sprite(SpriteID.SPELL_CLAWS_OF_GUTHIX).simpleSpell(811, 77).build());
		projectiles.add(p().id(23).name("Flames of Zamorak").sprite(SpriteID.SPELL_FLAMES_OF_ZAMORAK).simpleSpell(811, 78).build());
		projectiles.add(p().id(24).name("Wind Wave").sprite(SpriteID.SPELL_WIND_WAVE).cast(1167, 158, 92).projectile(159, 51, 64, 172, 124, 16).hit(160, 124).build());
		projectiles.add(p().id(25).name("Water Wave").sprite(SpriteID.SPELL_WATER_WAVE).cast(1167, 161, 92).projectile(162, 51, 64, 172, 124, 16).hit(163, 124).build());
		projectiles.add(p().id(26).name("Vulnerability").sprite(SpriteID.SPELL_VULNERABILITY).cast(1165, 167, 92).projectile(168, 34, 64, 172, 124, 16).hit(169, 124).build());
		projectiles.add(p().id(27).name("Earth Wave").sprite(SpriteID.SPELL_EARTH_WAVE).cast(1167, 164, 92).projectile(165, 51, 64, 172, 124, 16).hit(166, 124).build());
		projectiles.add(p().id(28).name("Enfeeble").sprite(SpriteID.SPELL_ENFEEBLE).cast(1168, 170, 92).projectile(171, 48, 64, 172, 124, 16).hit(172, 124).build());
		projectiles.add(p().id(29).name("Fire Wave").sprite(SpriteID.SPELL_FIRE_WAVE).cast(1167, 155, 92).projectile(156, 51, 64, 172, 124, 16).hit(157, 124).build());
		projectiles.add(p().id(30).name("Entangle").sprite(SpriteID.SPELL_ENTANGLE).cast(1161, 177, 92).projectile(178, 75, 64, 172, 0, 16).hit(179, 0).hit(179, 124).build());
		projectiles.add(p().id(31).name("Stun").sprite(SpriteID.SPELL_STUN).cast(1169, 173, 92).projectile(174, 52, 64, 172, 124, 16).hit(80, 124).build());
		projectiles.add(p().id(32).name("Wind Surge").sprite(SpriteID.SPELL_WIND_SURGE).cast(7855, 1455, 92).projectile(1456, 51, 64, 172, 124, 16).hit(1457, 124).build());
		projectiles.add(p().id(33).name("Water Surge").sprite(SpriteID.SPELL_WATER_SURGE).cast(7855, 1458, 92).projectile(1459, 51, 64, 172, 124, 16).hit(1460, 124).build());
		projectiles.add(p().id(34).name("Earth Surge").sprite(SpriteID.SPELL_EARTH_SURGE).cast(7855, 1461, 92).projectile(1462, 51, 64, 172, 124, 16).hit(1463, 124).build());
		projectiles.add(p().id(35).name("Fire Surge").sprite(SpriteID.SPELL_FIRE_SURGE).cast(7855, 1464, 92).projectile(1465, 51, 64, 172, 124, 16).hit(1466, 124).build());

		// Ancient spellbook.
		projectiles.add(p().id(36).name("Smoke Rush").sprite(SpriteID.SPELL_SMOKE_RUSH).ids(1978, -1, 384, 385, 51, 64, 124, 16).build());
		projectiles.add(p().id(37).name("Shadow Rush").sprite(SpriteID.SPELL_SHADOW_RUSH).ids(1978, -1, 378, 379, 51, 64, 0, 16).build());
		projectiles.add(p().id(38).name("Blood Rush").sprite(SpriteID.SPELL_BLOOD_RUSH).simpleSpell(1978, 373).build());
		projectiles.add(p().id(39).name("Ice Rush").sprite(SpriteID.SPELL_ICE_RUSH).ids(1978, -1, 360, 361, 51, 64, 0, 16).build());
		projectiles.add(p().id(40).name("Smoke Burst").sprite(SpriteID.SPELL_SMOKE_BURST).simpleSpell(1979, 389).build());
		projectiles.add(p().id(41).name("Shadow Burst").sprite(SpriteID.SPELL_SHADOW_BURST).simpleSpell(1979, 382).build());
		projectiles.add(p().id(42).name("Blood Burst").sprite(SpriteID.SPELL_BLOOD_BURST).simpleSpell(1979, 376).build());
		projectiles.add(p().id(43).name("Ice Burst").sprite(SpriteID.SPELL_ICE_BURST).simpleSpell(1979, 363).build());
		projectiles.add(p().id(44).name("Smoke Blitz").sprite(SpriteID.SPELL_SMOKE_BLITZ).ids(1978, -1, 386, 387, 51, 64, 124, 16).build());
		projectiles.add(p().id(45).name("Shadow Blitz").sprite(SpriteID.SPELL_SHADOW_BLITZ).ids(1978, -1, 380, 381, 51, 64, 0, 16).build());
		projectiles.add(p().id(46).name("Blood Blitz").sprite(SpriteID.SPELL_BLOOD_BLITZ).ids(1978, -1, 374, 375, 51, 64, 0, 16).build());
		projectiles.add(p().id(47).name("Ice Blitz").sprite(SpriteID.SPELL_ICE_BLITZ).cast(1978, 366, 124).hit(367, 0).build());
		projectiles.add(p().id(48).name("Smoke Barrage").sprite(SpriteID.SPELL_SMOKE_BARRAGE).simpleSpell(1979, 391).build());
		projectiles.add(p().id(49).name("Shadow Barrage").sprite(SpriteID.SPELL_SHADOW_BARRAGE).simpleSpell(1979, 383).build());
		projectiles.add(p().id(50).name("Blood Barrage").sprite(SpriteID.SPELL_BLOOD_BARRAGE).simpleSpell(1979, 377).build());
		projectiles.add(p().id(51).name("Ice Barrage").sprite(SpriteID.SPELL_ICE_BARRAGE).simpleSpell(1979, 369).build());

		// Arceuus spellbook.
		projectiles.add(p().id(52).name("Ghostly Grasp").sprite(SpriteID.SPELL_GHOSTLY_GRASP).cast(8972, 1856, 0).hit(1858, 0).build());
		projectiles.add(p().id(53).name("Skeletal Grasp").sprite(SpriteID.SPELL_SKELETAL_GRASP).cast(8972, 1859, 0).hit(1861, 0).build());
		projectiles.add(p().id(54).name("Undead Grasp").sprite(SpriteID.SPELL_UNDEAD_GRASP).cast(8972, 1862, 0).hit(1863, 0).build());
		projectiles.add(p().id(55).name("Inferior Demonbane").sprite(SpriteID.SPELL_INFERIOR_DEMONBANE).cast(8977, 1865, 0).hit(1866, 0).build());
		projectiles.add(p().id(56).name("Superior Demonbane").sprite(SpriteID.SPELL_SUPERIOR_DEMONBANE).cast(8977, 1867, 0).hit(1868, 0).build());
		projectiles.add(p().id(57).name("Dark Demonbane").sprite(SpriteID.SPELL_DARK_DEMONBANE).cast(8977, 1869, 0).hit(1870, 0).build());
		projectiles.add(p().id(58).name("Dark Lure").sprite(SpriteID.SPELL_DARK_LURE).cast(8974, 1882, 1884).build());

		// Powered staves.
		// TODO black trident. I forget the ID.
		projectiles.add(p().id(59).itemId(ItemID.TRIDENT_OF_THE_SEAS).ids(1167, 1251, 92, 1252, 1253, 51, 64, 92, 60, 16).build());
		projectiles.add(p().id(60).itemId(ItemID.TRIDENT_OF_THE_SWAMP).ids(1167, 665, 92, 1040, 1042, 51, 64, 92, 60, 16).build());
		projectiles.add(p().id(61).name("trident (purple and gold)").itemId(ItemID.GOLDEN_SCARAB).ids(1167, 1543, 92, 1544, 1545, 51, 64, 92, 60, 16).artificial().build());
		projectiles.add(p().id(62).name("trident (purple and silver)").itemId(ItemID.STONE_SCARAB).ids(1167, 1546, 92, 1547, 1548, 51, 64, 92, 60, 16).artificial().build());
		projectiles.add(p().id(63).name("Sanguinesti staff (regular, 92)").itemId(ItemID.SANGUINESTI_STAFF).ids(1167, 1540, 92, 1539, 1541, 51, 64, 92, 60, 16).build());
		projectiles.add(p().id(64).name("Sanguinesti staff (health restore)").itemId(ItemID.SANGUINESTI_STAFF).ids(1167, 1540, 92, 1539, 1542, 51, 64, 92, 60, 16).build());
		projectiles.add(p().id(65).name("Holy sanguinesti staff (regular)").itemId(ItemID.HOLY_SANGUINESTI_STAFF).ids(1167, 1900, 92, 1899, 1901, 51, 64, 92, 60, 16).build());
		projectiles.add(p().id(66).name("Holy sanguinesti staff (health restore)").itemId(ItemID.HOLY_SANGUINESTI_STAFF).ids(1167, 1900, 92, 1899, 1902, 51, 64, 92, 60, 16).build());
		projectiles.add(p().id(157).itemId(ItemID.TUMEKENS_SHADOW).cast(9493, 2125, 92 /*TODO*/).projectile(2126, 56, 40, 400, 124, 32).hit(2127, 124).build());

		// Arrows. Many values guessed based off of iron arrow, so stuff like height/slope could be off for some arrows.
		ProjectileCast bronzeArrow = p().id(67).itemId(ItemID.BRONZE_ARROW).cast(426, 19, 96).projectile(10, 41, 11, 163, 146, 15).build();
		projectiles.add(bronzeArrow);
		projectiles.add(bronzeArrow.toBuilder().id(68).itemId(ItemID.IRON_ARROW).castGfx(18).projectileId(9).build());
		projectiles.add(bronzeArrow.toBuilder().id(69).itemId(ItemID.STEEL_ARROW).castGfx(20).projectileId(11).build());
		projectiles.add(bronzeArrow.toBuilder().id(70).name("Black arrow").itemId(ItemID.HEADLESS_ARROW).castGfx(23).projectileId(14).build());
		projectiles.add(bronzeArrow.toBuilder().id(71).itemId(ItemID.MITHRIL_ARROW).castGfx(21).projectileId(12).build());
		projectiles.add(bronzeArrow.toBuilder().id(72).itemId(ItemID.ADAMANT_ARROW).castGfx(22).projectileId(13).build());
		projectiles.add(bronzeArrow.toBuilder().id(73).itemId(ItemID.RUNE_ARROW).castGfx(24).projectileId(15).build());
		projectiles.add(bronzeArrow.toBuilder().id(74).itemId(ItemID.AMETHYST_ARROW).castGfx(1385).projectileId(1384).build());
		projectiles.add(bronzeArrow.toBuilder().id(75).itemId(ItemID.DRAGON_ARROW).castGfx(1116).projectileId(1120).build());
		projectiles.add(bronzeArrow.toBuilder().id(76).itemId(ItemID.ICE_ARROWS).castGfx(25).projectileId(16).build());
		projectiles.add(bronzeArrow.toBuilder().id(77).name("Fire arrow").itemId(ItemID.BRONZE_FIRE_ARROW_LIT).castGfx(26).projectileId(17).build());
		projectiles.add(bronzeArrow.toBuilder().id(78).itemId(ItemID.TRAINING_ARROWS).castGfx(806).projectileId(805).build());
		projectiles.add(bronzeArrow.toBuilder().id(79).itemId(ItemID.CRYSTAL_BOW).castGfx(250).projectileId(249).build());
		projectiles.add(bronzeArrow.toBuilder().id(80).itemId(ItemID.OGRE_ARROW).castGfx(243).projectileId(242).build());
		projectiles.add(p().id(142).name("Dark bow spec (non-dragon arrows)").itemId(ItemID.DARK_BOW).ids(426, 1105, 1101, 1103, 41, 11, 144, 5).build());
		projectiles.add(p().id(143).name("Dark bow spec (dragon arrows)").itemId(ItemID.DARK_BOW).ids(426, 1111, 1099, 1100, 41, 11, 144, 5).build());
		projectiles.add(p().id(144).name("Seercull").itemId(ItemID.SEERCULL).ids(426, 472, 473, 474, 41, 11, 144, 15).hit(474, 0).build());
		// TODO ba arrows, brutal arrow, broad arrow.
		// TODO specs (seercull, msb, magic longbow), dark bow.

		// bow of faerdhinen bofa
		ProjectileCast bofa = p().id(81).itemId(ItemID.BOW_OF_FAERDHINEN).ids(426, 1888, 1887, -1, 41, 11, 144, 15).build();
		projectiles.add(bofa);
		projectiles.add(bofa.toBuilder().id(82).name("Bow of faerdhinen (red)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25884).castGfx(1923).projectileId(1922).build());
		projectiles.add(bofa.toBuilder().id(83).name("Bow of faerdhinen (white)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25886).castGfx(1925).projectileId(1924).build());
		projectiles.add(bofa.toBuilder().id(84).name("Bow of faerdhinen (black)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25888).castGfx(1927).projectileId(1926).build());
		projectiles.add(bofa.toBuilder().id(85).name("Bow of faerdhinen (purple)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25890).castGfx(1929).projectileId(1928).build());
		projectiles.add(bofa.toBuilder().id(86).name("Bow of faerdhinen (green)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25892).castGfx(1931).projectileId(1930).build());
		projectiles.add(bofa.toBuilder().id(87).name("Bow of faerdhinen (yellow)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25894).castGfx(1933).projectileId(1932).build());
		projectiles.add(bofa.toBuilder().id(88).name("Bow of faerdhinen (blue)").itemId(ItemID.BOW_OF_FAERDHINEN_C_25896).castGfx(1935).projectileId(1934).build());

		// Bolts.
		projectiles.add(p().id(89).name("Bolts").itemId(ItemID.RUNITE_BOLTS).ids(7552, -1, 27, -1, 41, 11, 144, 5).build());
		projectiles.add(p().id(158).name("Dragon bolts").itemId(ItemID.DRAGON_BOLTS).ids(7552, -1, 1468, -1, 41, 11, 144, 5).build());
		projectiles.add(p().id(159).name("Bolts (zcb)").itemId(ItemID.ZARYTE_CROSSBOW).ids(9168, -1, 27, -1, 41, 11, 144, 5).build());
		projectiles.add(p().id(160).name("Dragon bolts (zcb)").itemId(ItemID.ZARYTE_CROSSBOW).ids(9168, -1, 1468, -1, 41, 11, 144, 5).build());
		projectiles.add(p().id(141).name("Dragon crossbow spec").itemId(ItemID.DRAGON_CROSSBOW).ids(4230, -1, 698, 157, 41, 11, 144, 5).build());
		// TODO bolt effects.
		// diamond (e) 9168, -1, 27, 758, 41, 11, 144, 5, 0
		// ruby (e) 9168, -1, 27, 754, 41, 11, 144, 5, 0
		// TODO it would be neat if different bolt types could have different projectiles.

		// Knives.
		// TODO cast gfx height and start height.
		ProjectileCast baseKnife = p().cast(7617, -1, 96).projectile(212, 32, 11, 172, 144, 15).build();
		projectiles.add(baseKnife.toBuilder().id(90).itemId(ItemID.BRONZE_KNIFE).castGfx(219).projectileId(212).build());
		projectiles.add(baseKnife.toBuilder().id(91).itemId(ItemID.IRON_KNIFE).castGfx(220).projectileId(213).build());
		projectiles.add(baseKnife.toBuilder().id(92).itemId(ItemID.STEEL_KNIFE).castGfx(221).projectileId(214).build());
		projectiles.add(baseKnife.toBuilder().id(93).itemId(ItemID.BLACK_KNIFE).castGfx(222).projectileId(215).build());
		projectiles.add(baseKnife.toBuilder().id(94).itemId(ItemID.MITHRIL_KNIFE).castGfx(223).projectileId(216).build());
		projectiles.add(baseKnife.toBuilder().id(95).itemId(ItemID.ADAMANT_KNIFE).castGfx(224).projectileId(217).build());
		projectiles.add(baseKnife.toBuilder().id(96).itemId(ItemID.RUNE_KNIFE).castGfx(225).projectileId(218).build());
		projectiles.add(baseKnife.toBuilder().id(97).itemId(ItemID.DRAGON_KNIFE).cast(8194, -1, -1).projectileId(28).build());
		projectiles.add(p().id(98).name("Dragon knife (spec)").itemId(ItemID.DRAGON_KNIFE).ids(8291, -1, 699, -1, 25, 11, 144, 15).build());
		projectiles.add(p().id(99).itemId(ItemID.DRAGON_KNIFEP_22808).ids(8195, -1, 697, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(100).name("Dragon knife (p++) (spec)").itemId(ItemID.DRAGON_KNIFEP_22808).ids(8292, -1, 1629, -1, 25, 11, 144, 15).build());

		// Darts.
		projectiles.add(p().id(101).itemId(ItemID.BRONZE_DART).ids(7554, -1, 226, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(102).itemId(ItemID.IRON_DART).ids(7554, -1, 227, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(103).itemId(ItemID.STEEL_DART).ids(7554, -1, 228, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(104).itemId(ItemID.BLACK_DART).ids(7554, -1, 32, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(105).itemId(ItemID.MITHRIL_DART).ids(7554, -1, 229, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(106).itemId(ItemID.ADAMANT_DART).ids(7554, -1, 230, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(107).itemId(ItemID.RUNE_DART).ids(7554, -1, 231, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(108).itemId(ItemID.AMETHYST_DART).ids(7554, -1, 1936, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(109).itemId(ItemID.DRAGON_DART).ids(7554, -1, 1122, -1, 32, 11, 144, 15).build());

		// Blowpipe.
		projectiles.add(p().id(110).name("Bronze Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 226, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(111).name("Iron Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 227, -1,  32, 105, 144, 15).build());
		projectiles.add(p().id(112).name("Steel Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 228, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(113).name("Black Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 32, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(114).name("Mithril Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 229, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(115).name("Adamant Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 230, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(116).name("Rune Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 231, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(117).name("Amethyst Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 1936, -1, 32, 105, 144, 15).build());
		projectiles.add(p().id(118).name("Dragon Dart").itemId(ItemID.TOXIC_BLOWPIPE).ids(5061, -1, 1122, -1, 32, 105, 144, 15).build());

		// Thrownaxes.
		projectiles.add(p().id(119).itemId(ItemID.BRONZE_THROWNAXE).ids(7617, 43, 36, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(120).itemId(ItemID.IRON_THROWNAXE).ids(7617, 42, 35, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(121).itemId(ItemID.STEEL_THROWNAXE).ids(7617, 44, 37, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(122).itemId(ItemID.MITHRIL_THROWNAXE).ids(7617, 45, 38, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(123).itemId(ItemID.ADAMANT_THROWNAXE).ids(7617, 46, 39, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(124).itemId(ItemID.RUNE_THROWNAXE).ids(7617, 48, 41, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(125).name("Rune thrownaxe (spec)").itemId(ItemID.RUNE_THROWNAXE).ids(1068, 257, 258, -1, 41, 11, 144, 0).build());
		projectiles.add(p().id(126).itemId(ItemID.DRAGON_THROWNAXE).ids(7617, 1320, 1319, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(127).name("Dragon thrownaxe (spec)").itemId(ItemID.DRAGON_THROWNAXE).ids(7521, 1317, 1318, -1, 25, 11, 144, 15).build());

		// javelins.
		projectiles.add(p().id(128).itemId(ItemID.BRONZE_JAVELIN).ids(7555, -1, 200, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(129).itemId(ItemID.IRON_JAVELIN).ids(7555, -1, 201, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(130).itemId(ItemID.STEEL_JAVELIN).ids(7555, -1, 202, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(131).itemId(ItemID.MITHRIL_JAVELIN).ids(7555, -1, 203, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(132).itemId(ItemID.ADAMANT_JAVELIN).ids(7555, -1, 204, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(133).itemId(ItemID.RUNE_JAVELIN).ids(7555, -1, 205, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(134).itemId(ItemID.AMETHYST_JAVELIN).ids(7555, -1, 1386, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(135).itemId(ItemID.DRAGON_JAVELIN).ids(7555, -1, 1301, -1, 32, 11, 144, 15).build());

		projectiles.add(p().id(136).itemId(ItemID.BLACK_CHINCHOMPA).ids(7618, -1, 1272, 157, 21, 11, 144, 15).build()); // only has hit gfx when in multicombat area.
		projectiles.add(p().id(137).itemId(ItemID.RED_CHINCHOMPA).ids(7618, -1, 909, 157, 21, 11, 144, 15).hit(157, 0).build()); // only has hit gfx when in multicombat area.
		projectiles.add(p().id(138).itemId(ItemID.CHINCHOMPA).ids(7618, -1, 908, 157, 21, 11, 144, 15).hit(157, 0).build()); // only has hit gfx when in multicombat area.

		projectiles.add(p().id(139).itemId(ItemID.TOKTZXILUL).ids(7558, -1, 442, -1, 32, 11, 144, 15).build());

		projectiles.add(p().id(140).name("Snowball").itemId(ItemID.SNOWBALL).ids(5063, 860, 861, 862, 62, 11, 44, 15).build());
		projectiles.add(p().id(148).name("Rotten tomato").itemId(ItemID.ROTTEN_TOMATO).ids(5063, 30, 29, 31, 62, 11, 44, 15).build());
		projectiles.add(p().id(149).name("Rock").itemId(ItemID.PET_ROCK).ids(5063, 33, 32, -1, 62, 11, 44, 15).build());
		projectiles.add(p().id(150).itemId(ItemID.VIAL).ids(7617, 50, 49, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(151).itemId(ItemID.ENCHANTED_VIAL).ids(7617, 52, 51, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(152).itemId(ItemID.HOLY_WATER).ids(7617, 193, 192, -1, 32, 11, 144, 15).build());
		projectiles.add(p().id(153).itemId(ItemID.NINJA_IMPLING_JAR).ids(7617, 210, 211, 209, 32, 11, 144, 15).hit(209, 0).build());

		projectiles.add(p().id(145).name("Corp sperm 1").sprite(SpriteID.SPELL_WIND_STRIKE).ids(1162, 90, 314, 92, 51, 64, 124, 16).artificial().build());
		projectiles.add(p().id(146).name("Corp sperm 2").sprite(SpriteID.SPELL_WIND_STRIKE).ids(1162, 90, 315, 92, 51, 64, 124, 16).artificial().build());
		projectiles.add(p().id(147).name("Corp sperm 3").sprite(SpriteID.SPELL_WIND_STRIKE).ids(1162, 90, 316, 92, 51, 64, 124, 16).artificial().build());
		projectiles.add(p().id(154).name("Dragon breath (large)").sprite(SpriteID.SPELL_FIRE_SURGE).ids(7855, 1464, 54, 1466, 51, 64, 124, 16).build());
		projectiles.add(p().id(155).name("Dark Strike").sprite(SpriteID.SPELL_WIND_STRIKE_DISABLED).ids(1162, 194, 195, 196, 51, 64, 124, 16).build());
		projectiles.add(p().id(156).name("Tempoross harpoonfish").itemId(ItemID.HARPOONFISH).ids(426, 18, 1837, 3, 41, 11, 144, 15).hit(3, 0).build());
		int highestId = -1;
		int duplicateProjectileId = -1;
		Set<Integer> idDuplicateChecker = new HashSet<>();
		for (ProjectileCast projectile : projectiles)
		{
			if (highestId < projectile.id) {
				highestId = projectile.id;
			}
			boolean added = idDuplicateChecker.add(projectile.id);
			if (!added) duplicateProjectileId = projectile.id;
		}
		System.out.println("highest projectile id: " + highestId);
		if (duplicateProjectileId != -1) throw new RuntimeException("Duplicate projectile id " + duplicateProjectileId);
		return projectiles;
	}

//	private void showDiffs(Map<Integer, List<Integer>> slotOverrides, Map<Integer, List<Integer>> slotOverrides1, String slot_overrides)
//	{
//		Set<Integer> extraFromCache = new HashSet<>();
//		extraFromCache.addAll(fromCache);
//		extraFromCache.removeAll(fromInGame);
//		System.out.println(name + " extra from cache " + extraFromCache);
//		Set<Integer> extraFromManual = new HashSet<>();
//		extraFromManual.addAll(fromInGame);
//		extraFromManual.removeAll(fromCache);
//		System.out.println(name + " extra from manual " + extraFromManual);
//	}
//
	private final class ItemDef {
		int id;
		String name;
		int wearPos1;
		int wearPos2;
		int wearPos3;

		int maleModel0;
		int maleModel1;
		int maleModel2;
		int maleHeadModel;
		int maleHeadModel2;
		int femaleModel0;
		int femaleModel1;
		int femaleModel2;
		int femaleHeadModel;
		int femaleHeadModel2;

		List<String> interfaceOptions;

		public boolean isEquippable() {
			return isModelEquippable() && (interfaceOptions.contains("Wear") || interfaceOptions.contains("Equip"));
		}

		public boolean isModelEquippable() {
			return maleModel0 != -1 || maleModel1 != -1 || maleModel2 != -1 || maleHeadModel != -1 || maleHeadModel2 != -1 || femaleModel0 != -1 || femaleModel1 != -1 || femaleModel2 != -1 || femaleHeadModel != -1 || femaleHeadModel2 != -1;
		}

		public int getEquipSlot() {
			if (!isEquippable()) return -1;
			return wearPos1;
		}

		public int getModelEquipSlot() {
			if (!isModelEquippable()) return -1;
			return wearPos1;
		}

		public int getModelHash() {
			return Objects.hash(maleModel0, maleModel1, maleModel2, maleHeadModel, maleHeadModel2, femaleModel0, femaleModel1, femaleModel2, femaleHeadModel, femaleHeadModel2);
		}
	}

	//	@Subscribe
	public void not_onMenuOptionClicked(MenuOptionClicked e) {
		// Cannot use hit gfx because of splashing, plus I don't know what happens if someone else casts on the same target at the same time.

		if (e.getMenuOption().equals("Attack")) {
			manualSpellCastNoCastGfx = null;
		}
		if (e.getMenuOption().equals("Cast")) {
			String spellName = Text.removeTags(e.getMenuTarget());
			for (ProjectileCast projectileCast : Constants.projectiles) { // TODO smaller lookup table maybe? That's a lot of list items to go through, many of which don't matter because they have cast gfx!
				if (projectileCast.getName(itemManager).equals(spellName)) {
					manualSpellCastNoCastGfx = projectileCast;
					break;
				}
			}
		}
	}
	/*
	private void createScytheSwingOld()
	{
		WorldPoint point = client.getLocalPlayer().getWorldLocation();
		Actor interacting = client.getLocalPlayer().getInteracting();

		int x = 0, y = 0;
		int id;

		// I know this can happen if you're attacking a target dummy in varrock, probably also in the poh.
		if (interacting == null || !(interacting instanceof NPC)) {
			int orientation = client.getLocalPlayer().getOrientation();
			// 70 is just a number I felt might work nice here.
			if (orientation > 512 - 70 && orientation < 512 + 70) {
				x = -1;
				id = 4006;
			} else if (orientation > 1536 - 70 && orientation < 1536 + 70) {
				x = 1;
				id = 4003;
			} else if (orientation > 512 && orientation < 1536) {
				y = 1;
				id = 4004;
			} else {
				y = -1;
				id = 4005;
			}
		}
		else
		{
			WorldPoint targetPoint = interacting.getWorldLocation();
			int targetSize = ((NPC) interacting).getTransformedComposition().getSize();

			int halfTargetSizeRoundedDown = (targetSize - 1) / 2;
			int playerx = point.getX(), playery = point.getY();
			int npcw = targetPoint.getX(), npcn = targetPoint.getY() + targetSize - 1, npce = targetPoint.getX() + targetSize - 1, npcs = targetPoint.getY();
			boolean directwest = playerx == npcw - 1 && playery == npcs + halfTargetSizeRoundedDown;
			boolean directeast = playerx == npce + 1 && playery == npcs + halfTargetSizeRoundedDown;
			if (directwest) {
				x = 1;
				id = 4003;
			} else if (directeast) {
				x = -1;
				id = 4006;
			} else if (playery >= npcs + halfTargetSizeRoundedDown) {
				y = -1;
				id = 4005;
			} else {
				y = 1;
				id = 4004;
			}
		}

		point = new WorldPoint(point.getX() + x, point.getY() + y, point.getPlane());

		RuneLiteObject runeLiteObject = client.createRuneLiteObject();
		Color scytheSwingColor = currentScytheGraphicEffect != null ? currentScytheGraphicEffect.color : null;
		if (scytheSwingColor != null)
		{
			Model model = client.loadModelData(id)
				.cloneVertices()
				.cloneColors()
				.recolor((short) 960, JagexColor.rgbToHSL(Color.RED.getRGB(), 1.0d))
				.translate(0, -41, 0)
				.light()
				;
			runeLiteObject.setModel(model);
		} else {
			runeLiteObject.setModel(client.loadModel(id));
		}

		runeLiteObject.setAnimation(client.loadAnimation(1204));
		LocalPoint localPoint = LocalPoint.fromWorld(client, point);
		runeLiteObject.setLocation(localPoint, client.getPlane());
		runeLiteObject.getAnimationController().setOnFinished(ac -> runeLiteObject.setActive(false));
		// TODO should I set these to inactive at some point?
		runeLiteObject.setActive(true);
	}

	 */

	private void printProjectile(Projectile p) {
		System.out.println("projectile " + p.getId());
		System.out.println("   source: " + p.getSourcePoint().getX() + " " + p.getSourcePoint().getY());
		System.out.println("   height: " + p.getHeight() + " startHeight: " + p.getStartHeight() + " endHeight: " + p.getEndHeight());
		System.out.println("   target: " + p.getTargetPoint().getX() + " " + p.getTargetPoint().getY());
		System.out.println("   cycle: start " + p.getStartCycle() + " end " + p.getEndCycle());
	}

}

package com.weaponanimationreplacer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.Data;
import lombok.EqualsAndHashCode;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Player;
import net.runelite.api.Projectile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GraphicChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.ProjectileMoved;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.util.Text;

public class SpellDataCollector
{

	/*
	 * Data to collect:
	 * projectile id
	 * slope
	 * endheight
	 * startheight
	 * cast animation
	 * chebyshev distance (both non-barrage and barrage).
	 * cast gfx
	 * cast gfx height
	 * cast gfx start time?
	 * hit gfx
	 * hit gfx delay
	 * hit gfx height
	 * hitsplat time
	 * projectile travel time
	 * projectile start movement
	 *
	 * Spells with projectiles "start" when onProjectileMoved happens for the first time. Spells without projectiles
	 * "start" when the player does their animation.
	 */

	private WeaponAnimationReplacerPlugin plugin;

	@Inject
	private Client client;

	int spellStart = -1;

	public SpellDataCollector(WeaponAnimationReplacerPlugin plugin) {
		this.plugin = plugin;
	}

	boolean checkSpell = false;

	@Subscribe(priority=-2000)
	public void onAnimationChanged(AnimationChanged e) {
		Player player = client.getLocalPlayer();
		if (!e.getActor().equals(player)) return;

		int animation = player.getAnimation();
		System.out.println("animationchanged " + client.getTickCount() + " " + client.getGameCycle() + " " + e.getActor().getAnimation());

//		if (
//				animation == 811 || // god spells
//				animation == 1978 || // ancient spells.
//				animation == 1979 || // ancient spells.
//				animation == 8972 || // arceuus spells.
//				animation == 8974 || // arceuus spells.
//				animation == 8977 // arceuus spells.
//		) {
		if (animation != -1) {
			System.out.println(client.getGameCycle() + " !!! spell start (animation) !!!");
			checkSpell = true;
		}
	}

	@Subscribe
	public void onGameTick(GameTick e) {
		if (checkSpell) {
			checkSpell = false;
			spellStart(null, client.getLocalPlayer());
		}
	}

	private void spellStart(Projectile projectile, Player player)
	{
		System.out.println(client.getGameCycle() + " !!! spell start from animation !!!");

		if (projectile == null) {
			final WorldPoint playerPos = player.getWorldLocation();
			if (playerPos == null) return;
			final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
			if (playerPosLocal == null) return;
			for (Projectile p : client.getProjectiles()) {
				if (client.getGameCycle() > p.getStartCycle()) continue; // skip already seen projectiles.
				if (p.getX1() != playerPosLocal.getX() || p.getY1() != playerPosLocal.getY()) continue;
				projectile = p;
			}
		}

		spellStart = client.getGameCycle();
		currentSpellChebyshevDistance = player.getInteracting() != null ? plugin.chebyshevDistance(player, player.getInteracting(), false) : -1;

		int castAnimation = player.getAnimation();
		int castGfx = player.getGraphic();
		int castGfxHeight = player.getGraphicHeight();
		int hitGfx = player.getInteracting() != null ? player.getInteracting().getGraphic() : -1;
		int hitGfxHeight = player.getInteracting() != null ? player.getInteracting().getGraphicHeight() : -1;

		/*
		int projectileId, int startMovement, int startPos, int startHeight, int endHeight, int slope) {
		 */
		int projectileId = projectile != null ? projectile.getId() : -1;
		int startMovement = projectile != null ? (projectile.getStartCycle() - client.getGameCycle()) : -1;
		int startPos = projectile != null ? projectile.getStartPos() : -1;
		int startHeight = projectile != null ? projectile.getStartHeight() : -1;
		int endHeight = projectile != null ? projectile.getEndHeight() : -1;
		int slope = projectile != null ? projectile.getSlope() : -1;

		currentProjectile = new ProjectileData();
		currentProjectile.name = lastSpellCastName;
		lastSpellCastName = null;
		currentProjectile.castAnimation = castAnimation;
		currentProjectile.castGfx = castGfx;
		if (player.getSpotAnimFrame() != 1) {
			System.out.println("!!!!!!!!!!!!!!!! graphic did not start at step 1, started at " + player.getSpotAnimFrame());
		}
		if (projectile != null)
		{
			currentProjectile.projectileId = projectile.getId();
			currentProjectile.startCycleOffset = (projectile.getStartCycle() - client.getGameCycle());
			currentProjectile.endCycleOffset.put(currentSpellChebyshevDistance, projectile.getEndCycle() - client.getGameCycle());
			currentProjectile.slope = projectile.getSlope();
			currentProjectile.startHeight = projectile.getStartHeight();
			currentProjectile.endHeight = projectile.getEndHeight();
			currentProjectile.height = projectile.getHeight();
		}
		/*
		projectiles.add(p().id(36).name("Smoke Rush").sprite(SpriteID.SPELL_SMOKE_RUSH).ids(1978, -1, 384, 385, 51, 64, 124, 16).build());
		 */
		System.out.println(
			".name(\"" + lastSpellCastName + "\")" +
			".cast(" + castAnimation + ", " + (castGfx != -1 ? (castGfx + ", " + castGfxHeight) : "-1, -1") + ")" +
			(hitGfx != -1 ?
			".hitGfx(" + hitGfx + ", " + hitGfxHeight + ")"
			: "") +
			(projectile != null ?
			".projectile(" + projectileId + ", " + startMovement + ", " + startPos + ", " + startHeight + ", " + endHeight + ", " + slope + ")"
			: "") +
			""
		);
		if (projectile != null) System.out.println("\tprojectile: " +
			"castAnimation: " + castAnimation + " " +
			"id: " + projectile.getId() + " " +
			"startCycle: " + (projectile.getStartCycle() - client.getGameCycle()) + "(" + projectile.getStartCycle() + ") " +
			"endCycle: " + (projectile.getEndCycle() - client.getGameCycle()) + "(" + projectile.getEndCycle() + ") " +
			"slope: " + projectile.getSlope() + " " +
			"startHeight: " + projectile.getStartHeight() + " " +
			"endHeight: " + projectile.getEndHeight() + " " +
			"height?: " + projectile.getHeight() + " " +
			"remainingcycles?: " + projectile.getRemainingCycles() + " " +
			"");

		System.out.println("\tspelldata: " +
			"chebyshev: " + plugin.chebyshevDistance(player, player.getInteracting(), false) + " (" + plugin.chebyshevDistance(player, player.getInteracting(), true) + ") " +
			(castGfx == -1 ? "cast: (-----) " : ("cast: " + castGfx + " (h: " + castGfxHeight + " f: " + player.getSpotAnimFrame() + ") ")) +
			(player.getInteracting().getGraphic() == -1 ? "hit (-----)" : ("hit: " + player.getInteracting().getGraphic() + " (h: " + player.getInteracting().getGraphicHeight() + " f: " + player.getInteracting().getSpotAnimFrame() + ") ")) +
		"");
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		for (NPC npc : client.getNpcs())
		{
			if (npc.getGraphic() != -1) {
//				System.out.println(client.getGameCycle() + " " + npc.getGraphic() + " " + npc.getSpotAnimFrame() + " " + npc.getGraphicHeight() + " " + npc.getName());
			}
		}
		for (Player player : client.getPlayers())
		{
			if (player.getGraphic() != -1) {
//				System.out.println(client.getGameCycle() + " " + player.getGraphic() + " " + player.getSpotAnimFrame() + " " + player.getGraphicHeight() + " " + player.getName());
			}
		}
		if (plugin.client.getLocalPlayer().getInteracting() != null)
		{
			int spotAnimFrame = plugin.client.getLocalPlayer().getInteracting().getSpotAnimFrame();
			if (spotAnimFrame == 1 && lasttargetspotanimframe == 0)
			{
				System.out.println("\tspot anim started " + client.getTickCount() + " " + client.getGameCycle());

				currentProjectile.hitGfxStart.put(currentSpellChebyshevDistance, client.getGameCycle() - spellStart);
				currentProjectile.hitGfx = plugin.client.getLocalPlayer().getInteracting().getGraphic();
				currentProjectile.hitGfxHeight = plugin.client.getLocalPlayer().getInteracting().getGraphicHeight();

				System.out.println("spell data recording complete: " + currentProjectile);
				List<ProjectileData> matches = projectiles.stream().filter(p -> p.getProjectileId() == currentProjectile.projectileId && (p.getCastAnimation() == currentProjectile.getCastAnimation() && p.getHitGfx() == currentProjectile.getHitGfx())).collect(Collectors.toList());
				if (matches.size() > 0) {
					System.out.println("matches: " + matches.size());
				}

				projectiles.add(currentProjectile);
			}
		}

		if (spellStart + 15 < client.getGameCycle() && currentProjectile != null) {
//			System.out.println("stopping spell data collection for reason: 15 client ticks elapsed");

		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked e) {
		if (e.getMenuOption().equals("Cast")) {
			lastSpellCastName = Text.removeTags(e.getMenuTarget());
			System.out.println("spell cast selected " + lastSpellCastName);
		}
	}

	private List<ProjectileData> projectiles = new ArrayList<>();

	private ProjectileData currentProjectile;
	int currentSpellChebyshevDistance = -1;
	String lastSpellCastName = null;

	@Data
	@EqualsAndHashCode(exclude = {"hitGfxStart", "endCycleOffset"})
	private static class ProjectileData {
		private String name;
		private int castAnimation;
		private int projectileId;
		private int startCycleOffset;
		private Map<Integer, Integer> endCycleOffset = new HashMap<>();
		private int slope;
		private int startHeight;
		private int endHeight;
		private int height; // TODO do I want this?
		private int remainingcycles; // TODO do I want this?
		private int castGfx;
		private int castGfxHeight;
		private int castGfxStart; // TODO do I want this
		private int hitGfx;
		private int hitGfxHeight;
		private Map<Integer, Integer> hitGfxStart = new HashMap<>();

		public boolean isSimilarTo(ProjectileData other) {
			if (!this.equals(other)) return false;

			for (Map.Entry<Integer, Integer> integerIntegerEntry : endCycleOffset.entrySet())
			{
				if (other.endCycleOffset.get(integerIntegerEntry.getKey()) != integerIntegerEntry.getValue()) {
					System.out.println("!!!!!!!!!!!!!!!!!!!!!!! WARN mismatch (" + integerIntegerEntry.getKey() + " " + integerIntegerEntry.getValue() + ") (" + other.endCycleOffset.get(integerIntegerEntry.getKey()) + ")");
				}
			}

			for (Map.Entry<Integer, Integer> integerIntegerEntry : hitGfxStart.entrySet())
			{
				if (other.hitGfxStart.get(integerIntegerEntry.getKey()) != integerIntegerEntry.getValue()) {
					System.out.println("!!!!!!!!!!!!!!!!!!!!!!! WARN mismatch (" + integerIntegerEntry.getKey() + " " + integerIntegerEntry.getValue() + ") (" + other.hitGfxStart.get(integerIntegerEntry.getKey()) + ")");
				}
			}

			return true;
		}

		@Override
		public String toString()
		{
			return "ProjectileData{" +
				"castAnimation=" + castAnimation +
				", projectileId=" + projectileId +
				", startCycleOffset=" + startCycleOffset +
				", endCycleOffset=" + endCycleOffset +
				", slope=" + slope +
				", startHeight=" + startHeight +
				", endHeight=" + endHeight +
				", height=" + height +
				", remainingcycles=" + remainingcycles +
				", castGfx=" + castGfx +
				", castGfxHeight=" + castGfxHeight +
				", hitGfx=" + hitGfx +
				", hitGfxHeight=" + hitGfxHeight +
				", hitGfxStart=" + hitGfxStart +
				'}';
		}
	}

	@Subscribe(priority=-2000)
	public void onProjectileMoved(ProjectileMoved projectileMoved) {
		Projectile projectile = projectileMoved.getProjectile();

		// skip already seen projectiles.
		if (client.getGameCycle() >= projectile.getStartCycle()) {
			return;
		}

		Player player = null;
		for (Player p : client.getPlayers())
		{
			// This is the player's actual location which is what projectiles use as their start position. Player#getX, #getSceneX, etc., do not work here.
			final WorldPoint playerPos = p.getWorldLocation();
			if (playerPos == null)
			{
				return;
			}

			final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
			if (playerPosLocal.equals(p.getLocalLocation())) {

//			System.out.println("equal");
			} else {

//			System.out.println("not equal");
			}
			if (playerPosLocal == null)
			{
				return;
			}

			if (projectile.getX1() == playerPosLocal.getX() && projectile.getY1() == playerPosLocal.getY()) {
				player = p;
				break;
			}
		}

		spellStart(projectile, player);

//		// This is the player's actual location which is what projectiles use as their start position. Player#getX, #getSceneX, etc., do not work here.
//		Player player = client.getLocalPlayer();
//		final WorldPoint playerPos = player.getWorldLocation();
//		if (playerPos == null)
//		{
//			return;
//		}
//
//		final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
//		if (playerPosLocal.equals(player.getLocalLocation())) {
//
////			System.out.println("equal");
//		} else {
//
////			System.out.println("not equal");
//		}
//		if (playerPosLocal == null)
//		{
//			return;
//		}
//
//		if (projectile.getX1() == playerPosLocal.getX() && projectile.getY1() == playerPosLocal.getY()) {
//			spellStart(projectile, p);
//		}
	}

	private int lastplayerspotanimframe = -1;
	private int lasttargetspotanimframe = -1;

	@Subscribe
	public void onGraphicChanged(GraphicChanged graphicChanged) {
//		System.out.println("ongraphicchanged " + client.getGameCycle() + " " + graphicChanged.getActor().getGraphicHeight() + " " + graphicChanged.getActor().getGraphic() + " " + graphicChanged.getActor().getName());
		Player player = client.getLocalPlayer();
		if (graphicChanged.getActor().equals(player)) {
			if (player.getSpotAnimFrame() == 1 && lastplayerspotanimframe != 1) {
//				currentProjectile.castGfxStart = client.getGameCycle() - currentProjectile.spellStart;
			}
			lastplayerspotanimframe = player.getSpotAnimFrame();
		} else if (plugin.client.getLocalPlayer() != null && plugin.client.getLocalPlayer().getInteracting() != null && graphicChanged.getActor().equals(plugin.client.getLocalPlayer().getInteracting())) {
			if (plugin.client.getLocalPlayer().getInteracting().getSpotAnimFrame() == 1 && lasttargetspotanimframe != 1) {
//				currentProjectile.hitGfxStart.put() = client.getGameCycle() - currentProjectile.spellStart;
			}
			lasttargetspotanimframe = plugin.client.getLocalPlayer().getInteracting().getSpotAnimFrame();
		}
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted commandExecuted)
	{
		String[] arguments = commandExecuted.getArguments();
		String command = commandExecuted.getCommand();
	}
}


package com.weaponanimationreplacer;

import com.google.gson.reflect.TypeToken;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

public class MigrationTest
{

	@Inject WeaponAnimationReplacerPlugin plugin;

	@Test
	public void testMigration() {
		String config = "[{\"name\":\"Monkey run\",\"modelSwapEnabled\":false,\"enabled\":false,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Cursed banana\",\"animationtypeToReplace\":\"ALL\"}]},{\"name\":\"Drunk stagger\",\"modelSwapEnabled\":false,\"enabled\":false,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Crystal grail\",\"animationtypeToReplace\":\"ALL\"}]},{\"name\":\"Elder scythe\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":22325,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":22324},{\"enabled\":true,\"itemId\":4151},{\"enabled\":true,\"itemId\":12006},{\"enabled\":true,\"itemId\":4587},{\"enabled\":true,\"itemId\":24551}],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Elder maul\",\"animationtypeToReplace\":\"ALL\"},{\"enabled\":true,\"animationSet\":\"Scythe of Vitur\",\"animationtypeToReplace\":\"ATTACK\",\"animationtypeReplacement\":{\"type\":\"ATTACK_SLASH\",\"id\":8056}}]},{\"name\":\"Scythe\",\"modelSwapEnabled\":false,\"enabled\":false,\"minimized\":false,\"modelSwap\":22325,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":12006},{\"enabled\":true,\"itemId\":4587},{\"enabled\":true,\"itemId\":4151},{\"enabled\":true,\"itemId\":22324},{\"enabled\":true,\"itemId\":24551}],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Scythe of Vitur\",\"animationtypeToReplace\":\"ALL\"}]},{\"name\":\"Shoulder halberd\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":3204},{\"enabled\":true,\"itemId\":23987}],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Dharok\\\\u0027s greataxe\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}]},{\"name\":\"Saeldor Slash\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":24551},{\"enabled\":true,\"itemId\":23995},{\"enabled\":true,\"itemId\":23997}],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Inquisitor\\\\u0027s mace\",\"animationtypeToReplace\":\"ATTACK_SLASH\",\"animationtypeReplacement\":{\"type\":\"ATTACK_CRUSH\",\"id\":4503}}]},{\"name\":\"Magic secateurs\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":22370,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":7409}],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Staff\",\"animationtypeToReplace\":\"ALL\"}]},{\"name\":\"Master staff\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":24424,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":6914}],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Nightmare Staff\",\"animationtypeToReplace\":\"ALL\"}]},{\"name\":\"Trident Sanguinesti\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":22323,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":12899}],\"animationReplacements\":[]}]";
		List<TransmogSet> migratedTransmogSets = plugin.migrate(config);
		System.out.println("migrated transmog sets: " + migratedTransmogSets);
		String expectedConfigString = "[{\"name\":\"Monkey run\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Cursed banana\",\"animationtypeToReplace\":\"ALL\"}],\"graphicEffects\":[]}]},{\"name\":\"Drunk stagger\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Crystal grail\",\"animationtypeToReplace\":\"ALL\"}],\"graphicEffects\":[]}]},{\"name\":\"Elder scythe\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[22324,4151,12006,4587,24551],\"modelSwaps\":[22325],\"animationReplacements\":[{\"animationSet\":\"Elder maul\",\"animationtypeToReplace\":\"ALL\"},{\"animationSet\":\"Scythe of Vitur\",\"animationtypeToReplace\":\"ATTACK\",\"animationtypeReplacement\":{\"type\":\"ATTACK_SLASH\",\"id\":8056}}],\"graphicEffects\":[]}]},{\"name\":\"Scythe\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[12006,4587,4151,22324,24551],\"modelSwaps\":[22325],\"animationReplacements\":[{\"animationSet\":\"Scythe of Vitur\",\"animationtypeToReplace\":\"ALL\"}],\"graphicEffects\":[]}]},{\"name\":\"Shoulder halberd\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[3204,23987],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"2h sword\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}],\"graphicEffects\":[]}]},{\"name\":\"Saeldor Slash\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[24551,23995,23997],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"2h sword\",\"animationtypeToReplace\":\"ATTACK_SLASH\",\"animationtypeReplacement\":{\"type\":\"ATTACK_CRUSH\",\"id\":4503}}],\"graphicEffects\":[]}]},{\"name\":\"Magic secateurs\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[7409],\"modelSwaps\":[22370],\"animationReplacements\":[{\"animationSet\":\"Staff\",\"animationtypeToReplace\":\"ALL\"}],\"graphicEffects\":[]}]},{\"name\":\"Master staff\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[6914],\"modelSwaps\":[24424],\"animationReplacements\":[{\"animationSet\":\"Nightmare Staff\",\"animationtypeToReplace\":\"ALL\"}],\"graphicEffects\":[]}]},{\"name\":\"Trident Sanguinesti\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[12899],\"modelSwaps\":[22323],\"animationReplacements\":[],\"graphicEffects\":[]}]}]";
		List<TransmogSet> expectedTransmogSets = plugin.getGson().fromJson(expectedConfigString, new TypeToken<ArrayList<TransmogSet>>() {}.getType());

		assertEquals(migratedTransmogSets, expectedTransmogSets);
	}

	@Test
	public void testMigrationEdgeCases() {
		String config = "[{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[],\"animationReplacements\":[]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":-1}],\"animationReplacements\":[]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Dragon dagger\",\"animationtypeToReplace\":\"ATTACK\",\"animationtypeReplacement\":{\"type\":\"ATTACK_SPEC\",\"id\":1062}},{\"enabled\":true,\"animationSet\":\"2h sword\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[],\"animationReplacements\":[{\"enabled\":true,\"animationSet\":\"Abyssal whip\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[],\"animationReplacements\":[{\"enabled\":true,\"animationtypeReplacement\":{\"id\":-1}}]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":12389},{\"enabled\":true,\"itemId\":23332}],\"animationReplacements\":[]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":23334,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":-1}],\"animationReplacements\":[]},{\"name\":\"New Replacement\",\"modelSwapEnabled\":false,\"enabled\":true,\"minimized\":false,\"modelSwap\":-1,\"itemRestrictions\":[{\"enabled\":true,\"itemId\":1333}],\"animationReplacements\":[]}]";
		List<TransmogSet> migratedTransmogSets = plugin.migrate(config);
		System.out.println("migrated transmog sets: " + migratedTransmogSets);
		String expectedConfigString = "[{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Dragon dagger\",\"animationtypeToReplace\":\"ATTACK\",\"animationtypeReplacement\":{\"type\":\"ATTACK_SPEC\",\"id\":1062}},{\"animationSet\":\"2h sword\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationSet\":\"Abyssal whip\",\"animationtypeToReplace\":\"STAND_PLUS_MOVEMENT\"}],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[-1],\"animationReplacements\":[{\"animationtypeReplacement\":{\"id\":-1}}],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[12389,23332],\"modelSwaps\":[-1],\"animationReplacements\":[],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[-1],\"modelSwaps\":[23334],\"animationReplacements\":[],\"graphicEffects\":[]}]},{\"name\":\"New Replacement\",\"enabled\":true,\"minimized\":false,\"swaps\":[{\"itemRestrictions\":[1333],\"modelSwaps\":[-1],\"animationReplacements\":[],\"graphicEffects\":[]}]}]";
		List<TransmogSet> expectedTransmogSets = plugin.getGson().fromJson(expectedConfigString, new TypeToken<ArrayList<TransmogSet>>() {}.getType());

		assertEquals(migratedTransmogSets, expectedTransmogSets);
	}

	@Test
	public void testRenameAnimationSet() {
		for (Map.Entry<String, String> stringStringEntry : WeaponAnimationReplacerPlugin.renames.entrySet())
		{
			boolean found = false;
			for (AnimationSet animationSet : Constants.animationSets) {
				if (animationSet.name.equals(stringStringEntry.getValue())) {
					found = true;
					break;
				}
			}
			assertTrue("couldn't find " + stringStringEntry.getValue(), found);
		}
		String config = plugin.getGson().toJson(Collections.singletonList(new TransmogSet(Collections.singletonList(new Swap(Collections.emptyList(), Collections.emptyList(), Collections.singletonList(new Swap.AnimationReplacement(new AnimationSet("Godsword", false, new int[Swap.AnimationType.values().length]), Swap.AnimationType.ALL, null)), Collections.emptyList(), Collections.emptyList(), Collections.emptyList())))));
		System.out.println(config);
		List<TransmogSet> transmogSets = plugin.getGson().fromJson(config, new TypeToken<ArrayList<TransmogSet>>() {}.getType());
		assertEquals("Godsword (Armadyl)", transmogSets.get(0).getSwaps().get(0).animationReplacements.get(0).animationSet.name);
	}

}

package com.weaponanimationreplacer;

import static com.weaponanimationreplacer.Swap.AnimationType.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnimationSets
{
	static final Map<Integer, String> descriptions = new HashMap<>();
	private static final List<AnimationSet> animationSets = new ArrayList<>();

	static List<AnimationSet> getAnimationSets()
	{
		animationSets.clear();

		new AnimationSetBuilder("Scythe of Vitur")
			.poseAnims(8057, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 8056)
			.put(ATTACK_CRUSH, 8056)
			.build();
		new AnimationSetBuilder("Nightmare Staff")
			.poseAnims(4504, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK_CRUSH, 4505)
			.put(DEFEND, 420)
			.build();
		new AnimationSetBuilder("Inquisitor's mace")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 4503)
			.put(DEFEND, 403)
			.build();
		new AnimationSetBuilder("Dinh's bulwhark")
			.poseAnims(7508, 823, 7510, 7510, 7510, 7510, 7509)
			.put(ATTACK_CRUSH, 7511)
			.put(ATTACK_SPEC, 7512)
			.put(DEFEND, 7517)
			.build();
		new AnimationSetBuilder("Dragon hunter lance")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 2563)
			.put(ATTACK_SLASH, 8289)
			.put(ATTACK_CRUSH, 8290)
			.put(ATTACK_STAB, 8288)
			.build();
		new AnimationSetBuilder("Flying Carpet")
			.poseAnims(6936, 6936, 6936, 6936, 6936, 6936, 6936)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Levitate")
			.poseAnims(8070, 8070, 8070, 8070, 8070, 8070, 8070)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Clueless Scroll")
			.poseAnims(7271, 823, 7272, 820, 821, 822, 7273)
			.put(ATTACK_CRUSH, 406)
			.build();
		new AnimationSetBuilder("Godsword (Saradomin)")
			.poseAnims(7053, 7044, 7052, 7052, 7048, 7047, 7043)
			.put(ATTACK_SLASH, 7045)
			.put(ATTACK_CRUSH, 7054)
			.put(ATTACK_SLASH2, 7055)
			.put(ATTACK_SPEC, 7640)
			.put(DEFEND, 7056)
			.build();
		new AnimationSetBuilder("Godsword (Bandos)")
			.copy("Godsword (Saradomin)")
			.put(ATTACK_SPEC, 7642)
			.build();
		new AnimationSetBuilder("Godsword (Armadyl)")
			.copy("Godsword (Saradomin)")
			.put(ATTACK_SPEC, 7644)
			.build();
		new AnimationSetBuilder("Godsword (Zamorak)")
			.copy("Godsword (Saradomin)")
			.put(ATTACK_SPEC, 7638)
			.build();
		new AnimationSetBuilder("Godsword (Ancient)")
			.copy("Godsword (Saradomin)")
			.put(ATTACK_SPEC, 9171)
			.build();
		new AnimationSetBuilder("Godsword (Ancient, alternative spec)")
			.copy("Godsword (Saradomin)")
			.put(ATTACK_SPEC, 9173)
			.build();
		new AnimationSetBuilder("Saradomin sword") // all guesses
			.copy("Godsword (Saradomin)")
			.put(ATTACK_SPEC, 1132)
			.build();
		new AnimationSetBuilder("Boxing gloves")
			.poseAnims(3677, 823, 3680, 3680, 3680, 3680, 824)
			.put(ATTACK_SLASH, 3678)
			.put(ATTACK_STAB, 3678)
			.put(DEFEND, 3679)
			.build();
		new AnimationSetBuilder("Hand fan")
			.poseAnims(6297, 6297, 7629, 7630, 7631, 7632, 7633)
			.put(ATTACK_CRUSH, 401)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Prop sword/candy cane")
			.poseAnims(2911, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 7328)
			.put(DEFEND, 378)
			.build();
		new AnimationSetBuilder("Staff")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK_CRUSH, 419) // without shield. 393 is with shield.
			.put(DEFEND, 420)
			.build();
		new AnimationSetBuilder("Staff2/Wand")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK_CRUSH, 414) // without shield. 393 is with shield.
			.put(DEFEND, 415)
			.build();
		new AnimationSetBuilder("Zamorakian hasta")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(DEFEND, 420)
			.put(ATTACK_SPEC, 1064)
			.put(ATTACK_SLASH, 440)
			.put(ATTACK_CRUSH, 393)
			.put(ATTACK_CRUSH2, 419, "crush2 (no offhand)")
			.put(ATTACK_STAB, 381)
			.build();
		new AnimationSetBuilder("Falconer's glove")
			.poseAnims(5160, 5161, 5164, 5165, 5166, 5167, 5168)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Halberd")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK_SLASH, 440)
			.put(ATTACK_STAB, 428)
			.put(ATTACK_SPEC, 1203)
			.put(DEFEND, 430)
			.build();
		new AnimationSetBuilder("Cursed banana")
			.poseAnims(4646, 823, 4682, 6276, 6268, 6275, 6277)
			.put(ATTACK_CRUSH, 6278)
			.put(DEFEND, 6279)
			.build();
		new AnimationSetBuilder("Crab")
			.copy("Cursed banana")
			.put(STAND, 10051)
			.build();
		new AnimationSetBuilder("Elder maul")
			.poseAnims(7518, 823, 7520, 7520, 7520, 7520, 7519)
			.put(ATTACK_CRUSH, 7516)
			.put(DEFEND, 7517)
			.build();
		new AnimationSetBuilder("Scythe (holiday item)")
			.poseAnims(847, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 440)
			.put(ATTACK_CRUSH, 438)
			.put(DEFEND, 435)
			.build();
		new AnimationSetBuilder("2h sword")
			.poseAnims(2561, 823, 2562, 2562, 2562, 2562, 2563)
			.put(ATTACK_SLASH, 407)
			.put(ATTACK_CRUSH, 406)
			.put(DEFEND, 410)
			.put(ATTACK_SPEC, 3157)
			.build();
		new AnimationSetBuilder("Birthday balloons")
			.poseAnims(7538, 823, 7539, 7539, 821, 822, 7540)
			.put(ATTACK_CRUSH, 7541)
			.put(DEFEND, 1834)
			.build();
		new AnimationSetBuilder("Banner")
			.poseAnims(1421, 1426, 1422, 1423, 1424, 1425, 1427)
			.put(ATTACK_CRUSH, 1428)
			.put(DEFEND, 1429)
			.build();
		new AnimationSetBuilder("Dharok's greataxe")
			.poseAnims(2065, 823, 2064, 2064, 2064, 2064, 11466)
			.put(ATTACK_SLASH, 2067)
			.put(ATTACK_CRUSH, 2066)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Dharok's greataxe (old run)")
			.copy("Dharok's greataxe")
			.put(RUN, 824)
			.build();
		new AnimationSetBuilder("Hunting knife")
			.poseAnims(2911, 823, 7327, 7327, 821, 822, 2322)
			.put(ATTACK_CRUSH, 7328)
			.put(DEFEND, 378)
			.build();
		new AnimationSetBuilder("Giant boulder")
			.poseAnims(4193, 4194, 4194, 4194, 4194, 4194, 7274)
			.put(ATTACK_CRUSH, 7275)
			.put(DEFEND, 7276)
			.build();
		new AnimationSetBuilder("Golden tench")
			.poseAnims(8208, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 8209)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Unarmed")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 422, "punch")
			.put(ATTACK_CRUSH2, 423, "crush2 (kick)")
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Dragon scimitar")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 390)
			.put(ATTACK_STAB, 386)
			.put(DEFEND, 388)
			.put(ATTACK_SPEC, 1872)
			.build();
		new AnimationSetBuilder("Dragon longsword/Saeldor")
			.poseAnims(809, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 390)
			.put(ATTACK_STAB, 386)
			.put(DEFEND, 388)
			.put(ATTACK_SPEC, 1058)
			.build();
		new AnimationSetBuilder("Ghrazi rapier")
			.poseAnims(809, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 390)
			.put(ATTACK_STAB, 8145)
			.put(DEFEND, 388)
			.build();
		new AnimationSetBuilder("Noose wand")
			.poseAnims(5254, 5252, 5250, 5251, 1207, 1208, 5253)
			.put(ATTACK_SLASH, 440)
			.put(ATTACK_CRUSH, 429)
			.put(ATTACK_STAB, 428)
			.put(DEFEND, 430)
			.build();
		new AnimationSetBuilder("Magic butterfly net")
			.poseAnims(6604, 6611, 6607, 6608, 6610, 6609, 6603)
			.put(ATTACK_SLASH, 440)
			.put(ATTACK_CRUSH, 429)
			.put(ATTACK_STAB, 428)
			.put(DEFEND, 430)
			.build();
		new AnimationSetBuilder("Trident of the swamp")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK, 1167)
			.put(DEFEND, 420)
			.build();
		new AnimationSetBuilder("Granite maul")
			.poseAnims(1662, 823, 1663, 1663, 1663, 1663, 1664)
			.put(ATTACK_CRUSH, 1665)
			.put(ATTACK_SPEC, 1667)
			.put(DEFEND, 1666)
			.build();
		new AnimationSetBuilder("Red salamander")
			.poseAnims(5246, 823, 5245, 5245, 5245, 5245, 824)
			.put(DEFEND, 388)
			.build();
		new AnimationSetBuilder("Undead chicken")
			.poseAnims(5363, 823, 5364, 5438, 821, 822, 824)
			.put(ATTACK_CRUSH, 5439)
			.put(DEFEND, 5441)
			.build();
		new AnimationSetBuilder("Rubber chicken")
			.poseAnims(1832, 823, 1830, 1830, 821, 822, 824)
			.put(ATTACK_CRUSH, 1833)
			.put(DEFEND, 1834)
			.build();
		new AnimationSetBuilder("Easter basket")
			.poseAnims(1837, 823, 1836, 1836, 1836, 1836, 1836)
			.put(ATTACK_CRUSH, 422)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Fixed device")
			.poseAnims(2316, 2321, 2317, 2318, 2319, 2320, 2322)
			.put(ATTACK_CRUSH, 2323)
			.put(DEFEND, 2324)
			.build();
		new AnimationSetBuilder("Crystal grail")
			.poseAnims(3040, 823, 3039, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 422, "punch")
			.put(ATTACK_CRUSH2, 423, "crush2 (kick)")
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Drunk")
			.poseAnims(2770, 823, 2769, 820, 821, 822, 824)
			.build();
		new AnimationSetBuilder("Stealing")
			.poseAnims(10684, 10683, 10682, 10683, 10683, 10683, 824)
			.build();
		new AnimationSetBuilder("Chinchompa")
			.poseAnims(3175, 3177, 3177, 3177, 3177, 3177, 3178)
			.put(ATTACK, 7618)
			.put(DEFEND, 3176)
			.build();
		new AnimationSetBuilder("Barrelchest anchor")
			.poseAnims(5869, 823, 5867, 5867, 5867, 5867, 5868)
			.put(ATTACK_CRUSH, 5865)
			.put(DEFEND, 5866)
			.put(ATTACK_SPEC, 5870)
			.build();
		new AnimationSetBuilder("Pet rock")
			.poseAnims(6657, 6661, 6658, 6659, 6662, 6663, 6660)
			.put(ATTACK_CRUSH, 422, "punch")
			.put(ATTACK_CRUSH2, 423, "crush2 (kick)")
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Ballista")
			.poseAnims(7220, 823, 7223, 7223, 7223, 7223, 7221)
			.put(ATTACK, 7555)
			.put(DEFEND, 7219)
			.put(ATTACK_SPEC, 7556)
			.build();
		new AnimationSetBuilder("Ivandis flail")
			.poseAnims(8009, 8015, 8011, 8012, 8013, 8014, 8016)
			.put(ATTACK_CRUSH, 8010)
			.put(DEFEND, 8017)
			.build();
		new AnimationSetBuilder("Viggora's chainmace")
			.poseAnims(244, 823, 247, 247, 247, 247, 248)
			.put(ATTACK_CRUSH, 245)
			.put(DEFEND, 4177)
			.build();
		new AnimationSetBuilder("Skeleton lantern")
			.poseAnims(8521, 8492, 8492, 8492, 8492, 8492, 8492)
			.put(ATTACK_CRUSH, 422, "punch")
			.put(ATTACK_CRUSH2, 423, "crush2 (kick)")
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Bow")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 426)
			.put(DEFEND, 424)
			.put(ATTACK_SPEC, 1074, "spec (msb)")
			.build();
		new AnimationSetBuilder("Comp bow")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK, 426)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Crossbow")
			.poseAnims(4591, 823, 4226, 4227, 821, 822, 4228)
			.put(ATTACK, 7552)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Zaryte crossbow")
			.poseAnims(4591, 823, 4226, 4227, 821, 822, 4228)
			.put(ATTACK, 9168)
			.put(DEFEND, 424)
			.put(ATTACK_SPEC, 9168)
			// 9166 looks identical but isn't used as either the regular attack or the spec.
			.build();
		new AnimationSetBuilder("Unknown (arms out)")
			.poseAnims(9050, 9050, 9051, 9054, 9052, 9053, 9051)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Dart")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 7554)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Toxic blowpipe")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK, 5061)
			.put(DEFEND, 430)
			.build();
		new AnimationSetBuilder("Blazing blowpipe")
			.copy("Toxic blowpipe")
			.put(ATTACK, 10656)
			.build();
		new AnimationSetBuilder("Thrownaxe")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 7617)
			.put(ATTACK_SPEC, 7521)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Knife (non-dragon)")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 7617)
			.put(ATTACK_SPEC, 8291)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Dragon knife")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 8194)
			.put(ATTACK_SPEC, 8291)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Dragon knife (poisoned)")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 8195)
			.put(ATTACK_SPEC, 8292)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Guthan's warspear")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK_SLASH, 2081)
			.put(ATTACK_CRUSH, 2082)
			.put(ATTACK_STAB, 2080)
			.put(DEFEND, 430)
			.build();
		new AnimationSetBuilder("Abyssal whip")
			.poseAnims(808, 823, 1660, 1660, 1660, 1660, 1661)
			.put(ATTACK_SLASH, 1658)
			.put(DEFEND, 1659)
			.build();
		new AnimationSetBuilder("Sarachnis cudgel")
			.poseAnims(809, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 401)
			.put(ATTACK_STAB, 400)
			.put(DEFEND, 403)
			.build();
		new AnimationSetBuilder("Dragon mace")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 401)
			.put(ATTACK_STAB, 400)
			.put(DEFEND, 403)
			.put(ATTACK_SPEC, 1060)
			.build();
		new AnimationSetBuilder("Ancient mace")
			.copy("Dragon mace")
			.put(ATTACK_SPEC, 6147)
			.build();
		new AnimationSetBuilder("Dragon warhammer")
			.copy("Dragon mace")
			.put(ATTACK_SPEC, 1378)
			.build();
		new AnimationSetBuilder("Dragon axe")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 395)
			.put(ATTACK_CRUSH, 401)
			.put(ATTACK_STAB, 400)
			.put(DEFEND, 397)
			.put(ATTACK_SPEC, 2876)
			.build();
		new AnimationSetBuilder("Dragon battleaxe")
			.copy("Dragon axe")
			.put(ATTACK_SPEC, 1056)
			.build();
		new AnimationSetBuilder("Spear")
			.poseAnims(813, 1209, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK_SLASH, 380)
			.put(ATTACK_CRUSH, 382)
			.put(ATTACK_STAB, 381)
			.put(ATTACK_SPEC, 1064)
			.put(DEFEND, 383)
			.build();
		new AnimationSetBuilder("Snowball")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 5063)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Sled")
			.poseAnims(1461, 1468, 8854, 1468, 1468, 1468, 8853)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Claws")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 393)
			.put(ATTACK_STAB, 1067)
			.put(DEFEND, 424)
			.put(ATTACK_SPEC, 7514)
			.build();
		new AnimationSetBuilder("Verac's flail")
			.poseAnims(2061, 823, 2060, 2060, 2060, 2060, 824)
			.put(ATTACK_CRUSH, 2062)
			.put(DEFEND, 2063)
			.build();
		new AnimationSetBuilder("Abyssal bludgeon")
			.poseAnims(1652, 823, 3293, 3293, 3293, 3293, 2847)
			.put(ATTACK_CRUSH, 3298)
			.put(DEFEND, 1666)
			.put(ATTACK_SPEC, 3299)
			.build();
		new AnimationSetBuilder("Karil's crossbow")
			.poseAnims(2074, 823, 2076, 2076, 2076, 2076, 2077)
			.put(ATTACK, 2075)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Abyssal dagger")
			.poseAnims(3296, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 3294)
			.put(ATTACK_STAB, 3297)
			.put(DEFEND, 3295)
			.put(ATTACK_SPEC, 3300)
			.build();
		new AnimationSetBuilder("Torag's hammers")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_CRUSH, 2068)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Dual Macauhuitl")
			.copy("Torag's hammers")
			.put(ATTACK_CRUSH, 10989)
			.put(ATTACK_SPEC, 10990)
			.build();
		new AnimationSetBuilder("Zamorakian spear")
			.poseAnims(1713, 1702, 1703, 1704, 1706, 1705, 1707)
			.put(ATTACK_SLASH, 1712)
			.put(ATTACK_CRUSH, 1710)
			.put(ATTACK_STAB, 1711)
			.put(DEFEND, 1709)
			.put(ATTACK_SPEC, 1064)
			.build();
		new AnimationSetBuilder("Leaf-bladed battleaxe")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 7004)
			.put(ATTACK_CRUSH, 3852)
			.put(DEFEND, 397)
			.build();
		new AnimationSetBuilder("Dragon sword")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 390)
			.put(ATTACK_STAB, 386)
			.put(DEFEND, 388)
			.put(ATTACK_SPEC, 7515)
			.build();
		new AnimationSetBuilder("Arclight")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 390)
			.put(ATTACK_STAB, 386)
			.put(DEFEND, 388)
			.put(ATTACK_SPEC, 2890)
			.build();
		new AnimationSetBuilder("Dragon dagger")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK_SLASH, 377)
			.put(ATTACK_STAB, 376)
			.put(ATTACK_SPEC, 1062)
			.put(DEFEND, 378)
			.build();
		new AnimationSetBuilder("Clan vexillum")
			.poseAnims(9018, 7044, 9017, 9017, 9021, 9020, 9019)
			.put(ATTACK_SLASH, 7045)
			.put(ATTACK_CRUSH, 7054)
			.put(ATTACK_STAB, 7046)
			.put(DEFEND, 7056)
			.build();
		new AnimationSetBuilder("Tightrope")
			.poseAnims(763, 762, 762, 762, 762, 762, 762)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Monkey bars")
			.poseAnims(745, 745, 744, 745, 745, 745, 744)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Swimming")
			.poseAnims(773, 773, 772, 772, 772, 772, 772)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Swimming (drowning)")
			.poseAnims(765, 765, 772, 772, 772, 772, 772)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Swimming (underwater)")
			.poseAnims(3418, 3415, 3415, 3415, 3415, 3415, 7703)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Swimming (trident)")
			.poseAnims(6998, 6998, 6996, 6996, 6996, 6996, 6995)
			.put(ATTACK, 6997)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Transparent")
			.poseAnims(15, 15, 13, 13, 13, 13, 13)
			.put(ATTACK_SLASH, 391)
			.put(DEFEND, 389)
			.build();
		new AnimationSetBuilder("Crawling")
			.poseAnims(845, 845, 844, 844, 844, 844, 1440)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Leaping")
			.movement(1603)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Skipping")
			.movement(3854)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Zombie")
			.standMovement(6113, 6112)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Hands on hips")
			.standMovement(6393, 6395)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Hands behind back")
			.standMovement(6389, 6388)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Sandstorm")
			.standMovement(6379, 6378)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Hunched over")
			.standMovement(6469, 6468)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Posh walk")
			.standMovement(6487, 6486)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Posh walk 2")
			.standMovement(6927, 6928)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Looking at hands")
			.standMovement(6075, 6076)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Chicken")
			.standMovement(6397, -1)
			.doNotReplace()
			.build();
		new AnimationSetBuilder("Skis")
			.poseAnims(9341, 9343, 9342, 9345, 9343, 9344, 9346)
			.put(ATTACK_CRUSH, 9347)
			.put(DEFEND, 9348)
			.build();
		new AnimationSetBuilder("Colossal Blade")
			.poseAnims(9460, 10055, 9461, 9461, 10055, 10054, 9459)
			.put(ATTACK_CRUSH, 7516)
			.put(ATTACK_SLASH, 7516)
			.put(DEFEND, 7517)
			.build();
		new AnimationSetBuilder("Tumeken's Shadow")
			.poseAnims(9494, 1702, 1703, 1704, 1706, 1705, 1707)
			.put(ATTACK, 9493)
			.put(DEFEND, 1709) // Not sure, haven't seen this one in-game.
			.build();
		new AnimationSetBuilder("Osmumten's Fang")
			.poseAnims(809, 823, 819, 820, 821, 822, 824) // not sure
			.put(ATTACK_STAB, 9471)
			.put(ATTACK_SLASH, 390)
			.put(ATTACK_SPEC, 11222)
			.put(DEFEND, 4177)
			.build();
		new AnimationSetBuilder("Osmumten's Fang (old spec)")
			.copy("Osmumten's Fang")
			.put(ATTACK_SPEC, 6118) // Used to be 9544 but for some reason jagex changed it. gfx 2124
			.build();
		new AnimationSetBuilder("Voidwaker")
			.copy("Dragon sword")
			.put(ATTACK_SPEC, 11275)
			.build();
		new AnimationSetBuilder("Voidwaker (old spec)")
			.copy("Voidwaker")
			.put(ATTACK_SPEC, 1378)
			.build();
		new AnimationSetBuilder("Venator Bow")
			.poseAnims(9857, 9863, 9859, 9859, 9861, 9862, 9860) // unconfirmed
			.put(ATTACK, 9858) // unconfirmed
			.put(DEFEND, 424) // unconfirmed
			.build();
		new AnimationSetBuilder("Mystic cards")
			.poseAnims(9847, 823, 9849, 820, 9851, 9852, 9850)
			.put(ATTACK, 9848)
			.put(DEFEND, 9853)
			.build();
		new AnimationSetBuilder("Tzhaar-ket-om")
			.poseAnims(2065, 823, 2064, 2064, 2064, 2064, 824)
			.put(ATTACK, 2661)
			.put(DEFEND, 1661)
			.build();
		new AnimationSetBuilder("Toktz-xil-ul (obsidian ring)")
			.poseAnims(808, 823, 819, 820, 821, 822, 824)
			.put(ATTACK, 7558)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Thammaron's sceptre")
			.poseAnims(813, 1205, 1205, 1206, 1207, 1208, 1210)
			.put(ATTACK, 419) // not sure
			.put(DEFEND, 420) // not sure
			.build();
		new AnimationSetBuilder("2h axe")
			.poseAnims(10075, 1205, 10076, 10076, 10076, 10076, 10077)
			.put(ATTACK, 10079)
			.put(ATTACK_SPEC, 10078)
			.put(DEFEND, 10080)
			.build();
		new AnimationSetBuilder("2h axe (old)")
			.standMovement(10598, 10599)
			.put(Swap.AnimationType.RUN, 10600)
			.put(ATTACK, 10602)
			.put(ATTACK_SPEC, 10601)
			.put(DEFEND, 10603)
			.build();
		new AnimationSetBuilder("Soulreaper axe")
			.poseAnims(10169, 823, 10170, 10170, 10170, 10170, 824)
			.put(ATTACK_SLASH, 10172)
			.put(ATTACK_CRUSH, 10171)
			.put(ATTACK_SPEC, 10173)
			.put(DEFEND, 424)
			.build();
		new AnimationSetBuilder("Warped sceptre")
			.copy("Staff")
			.put(ATTACK, 10501)
			.build();

		return animationSets;
	}

	public static AnimationSet getAnimationSet(String name) {
		return animationSets.stream().filter(a -> name.equals(a.name)).findAny().orElse(null);
	}

	private static class AnimationSetBuilder {
		public int[] animations = new int[Swap.AnimationType.values().length];
		private String name;
		// This flag should be true for animations that are not the result of equipped weapons, such as the animations when the player crosses a tightrope. This animation is implemented as a pose animation but it should not be replaced by the player's current animation override.
		private boolean doNotReplace = false;

		{
			Arrays.fill(animations, -1);
		}

		public AnimationSetBuilder(String name) {
			this.name = name;
		}

		public AnimationSetBuilder doNotReplace() {
			doNotReplace = true;
			return this;
		}

		public AnimationSetBuilder put(Swap.AnimationType type, int id) {
			return put(type, id, null);
		}

		public AnimationSetBuilder put(Swap.AnimationType type, int id, String description) {
			if (description != null) {
				descriptions.put(id, description);
			}
			if (id != -1) animations[type.ordinal()] = id;
			return this;
		}

		public AnimationSetBuilder poseAnims(int stand, int rotate, int walk, int walkBackwards, int shuffleLeft, int shuffleRight, int run) {
			put(STAND, stand);
			put(ROTATE, rotate);
			movement(walk, walkBackwards, shuffleLeft, shuffleRight, run);
			return this;
		}

		public AnimationSetBuilder movement(int walk, int walkBackwards, int shuffleLeft, int shuffleRight, int run) {
			put(Swap.AnimationType.WALK, walk);
			put(WALK_BACKWARD, walkBackwards);
			put(SHUFFLE_LEFT, shuffleLeft);
			put(SHUFFLE_RIGHT, shuffleRight);
			put(Swap.AnimationType.RUN, run);
			return this;
		}

		public AnimationSetBuilder movement(int all) {
			return this.movement(all, all, all, all, all);
		}

		public void build() {
			if (doNotReplace) {
				int animation = animations[STAND.ordinal()];
//				if (animation > 0) doNotReplaceIdles.add(animation);
			}
			animationSets.add(new AnimationSet(name, doNotReplace, animations));
		}

		public AnimationSetBuilder standMovement(int stand, int movement)
		{
			put(STAND, stand);
			put(ROTATE, stand);
			movement(movement);
			return this;
		}

		public AnimationSetBuilder copy(String setToCopy)
		{
			AnimationSet animationSet = getAnimationSet(setToCopy);
			this.animations = Arrays.copyOf(animationSet.animations, animationSet.animations.length);
			return this;
		}
	}

}

package com.weaponanimationreplacer;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.util.Properties;
import net.runelite.client.RuneLite;
import net.runelite.client.RuneLiteProperties;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		setWindowTitle("weapon-animation-replacer (" + getCurrentGitBranch() + ") RL-" + RuneLiteProperties.getVersion());

//		System.setProperty("runelite.pluginhub.version", "0");
		ExternalPluginManager.loadBuiltin(WeaponAnimationReplacerPlugin.class, WeaponAnimationReplacerToolsPlugin.class);
		RuneLite.main(args);
	}

	private static void setWindowTitle(String title) throws NoSuchFieldException, IllegalAccessException
	{
		Field propertiesField = RuneLiteProperties.class.getDeclaredField("properties");
		propertiesField.setAccessible(true);
		Properties properties = (Properties) propertiesField.get(null);
		properties.setProperty("runelite.title", title);
	}

	public static String getCurrentGitBranch() {
		try
		{
			Process process = Runtime.getRuntime().exec("git rev-parse --abbrev-ref HEAD");
			process.waitFor();

			BufferedReader reader = new BufferedReader(
				new InputStreamReader(process.getInputStream()));

			return reader.readLine();
		}catch (Exception e) {
			return "threw exception";
		}
	}

}
