package com.github.therealguru;

import lombok.Getter;
import net.runelite.api.NPC;

import static com.github.therealguru.Inferno2dMapPlugin.NPC_ID_TO_COLOUR;

@Getter
public class InfernoNpc {

    private final NPC npc;
    private final ColourRegion colourRegion;

    public InfernoNpc(NPC npc) {
        this.npc = npc;
        Coordinate southWest = new Coordinate(npc);
        Coordinate northEast = southWest.transform(npc.getComposition().getSize() - 1, npc.getComposition().getSize() - 1);
        this.colourRegion = new ColourRegion(southWest, northEast, NPC_ID_TO_COLOUR.get(npc.getId()));
    }
}

package com.github.therealguru;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import net.runelite.api.GameObject;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

import static com.github.therealguru.Inferno2dMapPlugin.GRID_HEIGHT;

@RequiredArgsConstructor
@Data
public class Coordinate {

    private final int x,y;

    public Coordinate(NPC npc) {
        this.x = npc.getWorldLocation().getRegionX() - 17;
        this.y = npc.getWorldLocation().getRegionY() - 17;
    }

    public Coordinate(GameObject gameObject) {
        this.x = gameObject.getWorldLocation().getRegionX() - 18;
        this.y = gameObject.getWorldLocation().getRegionY() - 18;
    }

    public Coordinate toScoutToolPoint() {
        return new Coordinate(x, (GRID_HEIGHT - 1) - y);
    }

    public Coordinate toCleanPoint() {
        return new Coordinate(x - 17, y - 17);
    }

    public Coordinate transform(int x, int y) {
        return new Coordinate(this.x + x, this.y + y);
    }
}

package com.github.therealguru;

import lombok.Data;
import lombok.RequiredArgsConstructor;

import java.awt.*;

@RequiredArgsConstructor
@Data
public class ColourRegion {

    private final Coordinate from;
    private final Coordinate to;
    private final Color color;
}

package com.github.therealguru;

import com.google.inject.Inject;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.LinkBrowser;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Clipboard;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.net.URI;

import static com.github.therealguru.Inferno2dMapPlugin.GRID_HEIGHT;
import static com.github.therealguru.Inferno2dMapPlugin.GRID_WIDTH;

public class InfernoMapPluginPanel extends PluginPanel {

    private Color[][] colorGrid = new Color[GRID_WIDTH][GRID_HEIGHT];
    private JLabel waveLabel;
    private MapCanvas mapCanvas;
    private InfernoMapConfig config;
    private Inferno2dMapPlugin plugin;

    public InfernoMapPluginPanel(Inferno2dMapPlugin plugin, InfernoMapConfig config) {
        super();
        this.plugin = plugin;
        this.config = config;
        setLayout(new BorderLayout());
        initializeComponents();
    }

    private void initializeComponents() {
        // Header with wave info
        JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        waveLabel = new JLabel("Current Wave: Unknown");
        waveLabel.setFont(waveLabel.getFont().deriveFont(Font.BOLD, 14f));
        headerPanel.add(waveLabel);

        // Key/Legend panel
        JPanel keyPanel = createKeyPanel();

        // Map and buttons container
        JPanel mapContainer = new JPanel(new BorderLayout());

        // Map canvas
        mapCanvas = new MapCanvas();
        mapCanvas.setPreferredSize(new Dimension(348, 360));

        // Button panel
        JPanel buttonPanel = createButtonPanel();

        mapContainer.add(mapCanvas, BorderLayout.CENTER);
        mapContainer.add(buttonPanel, BorderLayout.SOUTH);

        // Layout
        add(headerPanel, BorderLayout.NORTH);
        add(keyPanel, BorderLayout.CENTER);
        add(mapContainer, BorderLayout.SOUTH);
    }

    private JPanel createButtonPanel() {
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));

        JButton copyButton = new JButton("Copy Scout Tool URL");
        copyButton.addActionListener(e -> copyUrlToClipboard());
        copyButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton openButton = new JButton("Open Scout Tool URL");
        openButton.addActionListener(e -> openUrl());
        openButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        buttonPanel.add(Box.createVerticalStrut(5));
        buttonPanel.add(copyButton);
        buttonPanel.add(Box.createVerticalStrut(5));
        buttonPanel.add(openButton);
        buttonPanel.add(Box.createVerticalStrut(5));

        return buttonPanel;
    }

    private void copyUrlToClipboard() {
        try {
            String url = plugin.generateScoutUrl();
            StringSelection selection = new StringSelection(url);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, null);

            JOptionPane.showMessageDialog(this, "URL copied to clipboard!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Failed to copy URL: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void openUrl() {
        String url = plugin.generateScoutUrl();
        LinkBrowser.browse(url);
    }

    private JPanel createKeyPanel() {
        JPanel keyPanel = new JPanel();
        keyPanel.setLayout(new BoxLayout(keyPanel, BoxLayout.Y_AXIS));
        keyPanel.setBorder(BorderFactory.createTitledBorder("Key:"));

        // Create key entries
        keyPanel.add(createKeyEntry(config.batColour(), "Bat"));
        keyPanel.add(createKeyEntry(config.blobColour(), "Blob"));
        keyPanel.add(createKeyEntry(config.meleeColour(), "Meleer"));
        keyPanel.add(createKeyEntry(config.rangeColour(), "Ranger"));
        keyPanel.add(createKeyEntry(config.mageColour(), "Mager"));
        keyPanel.add(createKeyEntry(config.pillarColour(), "Pillar"));

        return keyPanel;
    }

    private JPanel createKeyEntry(Color color, String label) {
        JPanel entry = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 2));

        // Colored box
        JPanel colorBox = new JPanel();
        colorBox.setBackground(color);
        colorBox.setPreferredSize(new Dimension(15, 15));
        colorBox.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));

        // Label
        JLabel textLabel = new JLabel(label);

        entry.add(colorBox);
        entry.add(textLabel);

        return entry;
    }

    public void updateWave(int wave) {
        waveLabel.setText("Current Wave: " + wave);
    }

    public void updateGrid(Color[][] grid) {
        this.colorGrid = grid;
        mapCanvas.repaint();
    }

    private class MapCanvas extends JPanel {

        public MapCanvas() {
            super();
            addMouseMotionListener(new MouseMotionListener() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    // Not needed for tooltips
                }

                @Override
                public void mouseMoved(MouseEvent e) {
                    updateTooltip(e.getX(), e.getY());
                }
            });
        }

        private void updateTooltip(int mouseX, int mouseY) {
            // Calculate tile size and grid positioning (same logic as paintComponent)
            int panelWidth = getWidth();
            int panelHeight = getHeight();
            int tileWidth = panelWidth / GRID_WIDTH;
            int tileHeight = panelHeight / GRID_HEIGHT;
            int tileSize = Math.min(tileWidth, tileHeight);

            // Center the grid
            int startX = (panelWidth - (GRID_WIDTH * tileSize)) / 2;
            int startY = (panelHeight - (GRID_HEIGHT * tileSize)) / 2;

            // Check if mouse is within the grid bounds
            int gridEndX = startX + (GRID_WIDTH * tileSize);
            int gridEndY = startY + (GRID_HEIGHT * tileSize);

            if (mouseX >= startX && mouseX < gridEndX && mouseY >= startY && mouseY < gridEndY) {
                // Calculate which grid cell the mouse is over
                int gridX = (mouseX - startX) / tileSize;
                int gridY = (mouseY - startY) / tileSize;

                // Ensure we're within bounds (safety check)
                if (gridX >= 0 && gridX < GRID_WIDTH && gridY >= 0 && gridY < GRID_HEIGHT) {
                    // Note: gridY is already in display coordinates, but our colorGrid uses flipped Y
                    // The actual grid coordinates for tooltip should match the visual representation
                    int actualGridY = GRID_HEIGHT - 1 - gridY;
                    setToolTipText(String.format("X: %d, Y: %d", gridX, actualGridY));
                } else {
                    setToolTipText(null);
                }
            } else {
                // Mouse is outside the grid
                setToolTipText(null);
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            if (colorGrid == null) return;

            Graphics2D g2d = (Graphics2D) g.create();

            // Calculate tile size based on panel size
            int panelWidth = getWidth();
            int panelHeight = getHeight();
            int tileWidth = panelWidth / GRID_WIDTH;
            int tileHeight = panelHeight / GRID_HEIGHT;
            int tileSize = Math.min(tileWidth, tileHeight);

            // Center the grid
            int startX = (panelWidth - (GRID_WIDTH * tileSize)) / 2;
            int startY = (panelHeight - (GRID_HEIGHT * tileSize)) / 2;

            // Draw grid
            for (int x = 0; x < GRID_WIDTH; x++) {
                for (int y = 0; y < GRID_HEIGHT; y++) {
                    int gridY = GRID_HEIGHT - 1 - y;

                    Color tileColor = colorGrid[x][gridY];
                    if (tileColor != null) {
                        g2d.setColor(tileColor);
                    } else {
                        g2d.setColor(config.emptyColour());
                    }

                    int pixelX = startX + (x * tileSize);
                    int pixelY = startY + (y * tileSize);

                    g2d.fillRect(pixelX, pixelY, tileSize, tileSize);

                    // Draw grid lines
                    g2d.setColor(Color.GRAY);
                    g2d.drawRect(pixelX, pixelY, tileSize, tileSize);
                }
            }

            g2d.dispose();
        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(280, 290);
        }
    }
}
package com.github.therealguru;

import com.google.inject.Binder;
import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.gameval.NpcID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
        name = "Inferno 2d Map"
)
public class Inferno2dMapPlugin extends Plugin {

	private static final int INFERNO_REGION = 9043;
	private static final List<Integer> INFERNO_NPC_LIST = List.of(
			NpcID.INFERNO_CREATURE_HARPIE,
			NpcID.INFERNO_CREATURE_SPLITTER,
			NpcID.INFERNO_CREATURE_MELEE,
			NpcID.INFERNO_CREATURE_RANGER,
			NpcID.INFERNO_CREATURE_MAGER
    );
    public static final Map<Integer, Color> NPC_ID_TO_COLOUR = Map.of(
      NpcID.INFERNO_CREATURE_HARPIE, Color.PINK,
      NpcID.INFERNO_CREATURE_SPLITTER, Color.YELLOW,
      NpcID.INFERNO_CREATURE_MELEE, Color.RED,
      NpcID.INFERNO_CREATURE_RANGER, Color.GREEN,
      NpcID.INFERNO_CREATURE_MAGER, Color.BLUE
    );
    private static final List<Integer> PILLAR_IDS = List.of(30353, 30354, 30355);
    public static final int GRID_WIDTH = 29;
    public static final int GRID_HEIGHT = 30;

    private Integer currentWaveNumber;
	private final List<InfernoNpc> infernoNpcs = new ArrayList<>();
    private final List<GameObject> infernoPillars = new ArrayList<>();
    private Color[][] infernoMap;

    @Inject
    private Client client;
    @Inject
    private ClientToolbar clientToolbar;
    private NavigationButton navigationButton;
    private InfernoMapPluginPanel panel;

    @Inject
    private InfernoMapConfig config;

    @Override
    protected void startUp() {
        panel = new InfernoMapPluginPanel(this, config);
        BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/devil.png");
        navigationButton = NavigationButton.builder()
                .tooltip("Inferno 2d Map")
                .priority(10000)
                .panel(panel)
                .icon(icon)
                .build();

        clientToolbar.addNavigation(navigationButton);
        infernoMap = generateBlankMap();
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(navigationButton);
        infernoMap = generateBlankMap();
        infernoNpcs.clear();
        infernoPillars.clear();
        currentWaveNumber = null;
    }

    @Subscribe
    private void onChatMessage(ChatMessage event) {
        if (!isInInferno() || event.getType() != ChatMessageType.GAMEMESSAGE) {
            return;
        }

        String message = event.getMessage();

        if (event.getMessage().contains("Wave:")) {
            message = message.substring(message.indexOf(": ") + 2);
            currentWaveNumber = Integer.parseInt(message.substring(0, message.indexOf('<')));
            infernoNpcs.clear();
            panel.updateWave(currentWaveNumber);
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() != GameState.LOGGED_IN) {
            return;
        }

        infernoNpcs.clear();
        infernoPillars.clear();
        recalculate();
    }


	@Subscribe
	private void onNpcSpawned(NpcSpawned event) {
		if(!isInInferno()) return;

        if(!INFERNO_NPC_LIST.contains(event.getNpc().getId())) return;

		infernoNpcs.add(new InfernoNpc(event.getNpc()));
        Coordinate clean = new Coordinate(event.getNpc());
        Coordinate scout = clean.toScoutToolPoint();
        log.debug("Npc has spawned at {} scout coordinate: {}", clean, scout);
        recalculate();
	}

    void recalculate() {
        List<ColourRegion> npcLocations = infernoNpcs.stream()
                .map(InfernoNpc::getColourRegion)
                .collect(Collectors.toList());

		List<ColourRegion> pillars = infernoPillars.stream()
                .map(this::createGameObjectRegion)
                .collect(Collectors.toList());

        infernoMap = generateBlankMap();

        for (ColourRegion npcColourRegion : npcLocations) {
            fillRegion(infernoMap, npcColourRegion);
        }

        for (ColourRegion pillarColourRegion : pillars) {
            fillRegion(infernoMap, pillarColourRegion);
        }

        panel.updateGrid(infernoMap);
    }

    private Color[][] generateBlankMap() {
        int width = GRID_WIDTH;
        int height = GRID_HEIGHT;
        Color[][] map = new Color[width][height];

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                map[x][y] = config.emptyColour();
            }
        }
        return map;
    }

    private void fillRegion(Color[][] colorArray, ColourRegion colourRegion) {
        for (int x = colourRegion.getFrom().getX(); x <= colourRegion.getTo().getX(); x++) {
            for (int y = colourRegion.getFrom().getY(); y <= colourRegion.getTo().getY(); y++) {
                colorArray[x][y] = colourRegion.getColor();
            }
        }
    }

    @Subscribe
    private void onGameObjectSpawned(GameObjectSpawned event) {
        if(!isInInferno()) return;

        if(!PILLAR_IDS.contains(event.getGameObject().getId())) return;

        Coordinate clean = new Coordinate(event.getGameObject());
        Coordinate scout = clean.toScoutToolPoint();
        log.debug("Pillar has spawned at {} scout coordinate: {}", clean, scout);
        infernoPillars.add(event.getGameObject());
        recalculate();
    }

    @Subscribe
    private void onGameObjectDespawned(GameObjectDespawned event) {
        if(!isInInferno()) return;

        infernoPillars.remove(event.getGameObject());
        recalculate();
    }

    private boolean isInInferno() {
        return WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == INFERNO_REGION;
    }

    @Provides
    InfernoMapConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(InfernoMapConfig.class);
    }

    private ColourRegion createGameObjectRegion(GameObject gameObject) {
        Coordinate southWest = new Coordinate(gameObject.getWorldLocation().getRegionX() - 1, gameObject.getWorldLocation().getRegionY() - 1).toCleanPoint();
        Coordinate northEast = southWest.transform(gameObject.sizeX() - 1, gameObject.sizeY() - 1);
        return new ColourRegion(southWest, northEast, Color.BLACK);
    }

    public String generateScoutUrl() {
        StringBuilder url = new StringBuilder("https://ifreedive-osrs.github.io/?");

        appendNpcData(url);
        appendPillarFlags(url);
        appendDegenFlag(url);

        return url.toString();
    }

    private void appendNpcData(StringBuilder url) {
        Map<Integer, Integer> npcIdToMobType = createNpcIdToMobTypeMap();
        int blobCount = 0;

        for (InfernoNpc npc : infernoNpcs) {
            if (!npcIdToMobType.containsKey(npc.getNpc().getId())) {
                continue;
            }

            // Convert to scout tool coordinates (north-west origin)
            Coordinate scoutCoord = getScoutCoordinate(npc.getColourRegion());

            // Get mob type, handling blob differentiation
            int baseMobType = npcIdToMobType.get(npc.getNpc().getId());
            int mobType = baseMobType;

            if (baseMobType == 2) { // This is a blob/splitter
                blobCount++;
                if (blobCount == 2) {
                    mobType = 3; // Second blob gets type 3
                }
            }

            // Ensure coordinates are in valid range
            if (!isValidScoutCoordinate(scoutCoord)) {
                log.warn("Invalid coordinates for NPC {}: x={}, y={}", npc.getNpc().getId(), scoutCoord.getX(), scoutCoord.getY());
                continue;
            }

            // Format as XXYYT. (XX = 2-digit x, YY = 2-digit y, T = mob type)
            String npcData = String.format("%02d%02d%d.", scoutCoord.getX(), scoutCoord.getY(), mobType);
            url.append(npcData);

            log.debug("Added NPC {} at ({},{}) as type {} -> {}", npc.getNpc().getId(), scoutCoord.getX(), scoutCoord.getY(), mobType, npcData);
        }
    }

    private Coordinate getScoutCoordinate(ColourRegion region) {
        return region.getFrom().toScoutToolPoint();
    }

    private Coordinate getScoutCoordinate(GameObject gameObject) {
        return new Coordinate(gameObject).toScoutToolPoint();
    }

    private boolean isValidScoutCoordinate(Coordinate coord) {
        return coord.getX() >= 0 && coord.getX() < GRID_WIDTH && coord.getY() >= 0 && coord.getY() < GRID_HEIGHT;
    }

    private Map<Integer, Integer> createNpcIdToMobTypeMap() {
        return Map.of(
                NpcID.INFERNO_CREATURE_HARPIE, 1,      // Bat
                NpcID.INFERNO_CREATURE_SPLITTER, 2,    // Blob
                NpcID.INFERNO_CREATURE_MELEE, 5,       // Melee
                NpcID.INFERNO_CREATURE_RANGER, 6,      // Range
                NpcID.INFERNO_CREATURE_MAGER, 7        // Mager
        );
    }

    private void appendPillarFlags(StringBuilder url) {
        Map<String, int[]> expectedPillars = getExpectedPillarPositions();

        for (Map.Entry<String, int[]> entry : expectedPillars.entrySet()) {
            String pillarName = entry.getKey();
            int[] expectedPos = entry.getValue();

            if (!pillarExistsAt(expectedPos[0], expectedPos[1])) {
                url.append(getPillarFlag(pillarName));
            }
        }
    }

    private Map<String, int[]> getExpectedPillarPositions() {
        // Positions in north-west coordinate system
        return Map.of(
                "west", new int[]{0, 9},    // West pillar
                "north", new int[]{17, 7},  // North pillar
                "south", new int[]{10, 23}  // South pillar
        );
    }

    private boolean pillarExistsAt(int expectedX, int expectedY) {
        return infernoPillars.stream().anyMatch(pillar -> {
            Coordinate scoutCoord = getScoutCoordinate(pillar);
            return scoutCoord.getX() == expectedX && scoutCoord.getY() == expectedY;
        });
    }

    private String getPillarFlag(String pillarName) {
        switch (pillarName) {
            case "west":
                return ".noWe";
            case "north":
                return ".noN";
            case "south":
                return ".noS";
            default:
                return "";
        }
    }

    private void appendDegenFlag(StringBuilder url) {
        url.append(".degeN");
    }
}

package com.github.therealguru;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("inferno-map-config")
public interface InfernoMapConfig extends Config
{
	@ConfigItem(
		keyName = "batColour",
		name = "Bat Colour",
		description = "The colour for bats in the renderer"
	)
	default Color batColour()
	{
		return Color.PINK;
	}

	@ConfigItem(
			keyName = "blobColour",
			name = "Blob Colour",
			description = "The colour for blobs in the renderer"
	)
	default Color blobColour()
	{
		return Color.ORANGE;
	}

	@ConfigItem(
			keyName = "meleeColour",
			name = "Melee Colour",
			description = "The colour for meleers in the renderer"
	)
	default Color meleeColour()
	{
		return Color.RED;
	}

	@ConfigItem(
			keyName = "rangeColour",
			name = "Range Colour",
			description = "The colour for rangers in the renderer"
	)
	default Color rangeColour()
	{
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "mageColour",
			name = "Mage Colour",
			description = "The colour for magers in the renderer"
	)
	default Color mageColour()
	{
		return Color.BLUE;
	}

	@ConfigItem(
			keyName = "pillarColour",
			name = "Pillar Colour",
			description = "The colour for pillars in the renderer"
	)
	default Color pillarColour()
	{
		return Color.BLACK;
	}

	@ConfigItem(
			keyName = "emptyColour",
			name = "Empty Colour",
			description = "The colour for a blank space"
	)
	default Color emptyColour()
	{
		return Color.WHITE;
	}
}

package com.github.therealguru;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class Inferno2dMapPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(Inferno2dMapPlugin.class);
		RuneLite.main(args);
	}
}
