package dev.wannaknow.raidplayernames;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RaidPlayerNamesPluginTest {
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(RaidPlayerNamesPlugin.class);
        RuneLite.main(args);
    }
}

package dev.wannaknow.raidplayernames;

import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import org.apache.commons.lang3.StringUtils;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

@PluginDescriptor(
		name = "Raid Player Names",
		description = "A plugin which automaticlly saves all the names with the people you raid with",
		tags = {"combat", "raid", "pve", "pvm", "bosses", "cox", "tob", "names", "log"}
)
public class RaidPlayerNamesPlugin extends Plugin {

	private static final String PLUGIN_NAME = "Raid name logger";
	private static final String ICON_FILE = "cox.png";

	@Inject
	private ClientThread clientThread;

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	private static final String RAID_START_MESSAGE = "The raid has begun!";

	private static final String TOB_START = "You enter the Theatre of Blood";

	private boolean inRaidChambers;

	private RaidPlayerNamesPanel panel;
	private NavigationButton navigationButton;
	private static final int PARTY_LIST_ID_TOB = 1835020;

	@Override
	protected void startUp() throws Exception {
		panel = new RaidPlayerNamesPanel(this);
		final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), ICON_FILE);
		navigationButton = NavigationButton.builder()
				.tooltip(PLUGIN_NAME)
				.icon(icon)
				.priority(5)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navigationButton);

		clientThread.invokeLater(() -> checkRaidPresence());
	}

	@Override
	protected void shutDown() throws Exception {
		inRaidChambers = false;

		clientToolbar.removeNavigation(navigationButton);
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		checkRaidPresence();
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		String m = Text.removeTags(event.getMessage());
		if (inRaidChambers && event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION) {

			if (m.startsWith(RAID_START_MESSAGE)) {
				List<Player> players = client.getPlayers();
				List<String> people = new ArrayList<>();
				for (Player player : players) {
					people.add(player.getName());
				}
				SwingUtilities.invokeLater(() -> panel.addRaid("CoX", people));
			}
		} else if (event.getType() == ChatMessageType.GAMEMESSAGE && m.startsWith(TOB_START)) {
			Widget raidingPartyWidget = client.getWidget(PARTY_LIST_ID_TOB);
			if (raidingPartyWidget == null) {
				return;
			}

			String[] playerNames = raidingPartyWidget.getText().split("<br>");
			List<String> people = new ArrayList<>();
			for (int i = 0; i < playerNames.length; i++) {
				String name = playerNames[i];
				if(!StringUtils.isEmpty(name) && !name.equals("-")) {
					people.add(name);
				}
			}
			SwingUtilities.invokeLater(() -> panel.addRaid("ToB", people));
		}
	}

	private void checkRaidPresence() {
		if (client.getGameState() != GameState.LOGGED_IN) {
			return;
		}

		boolean setting = client.getVarbitValue(Varbits.IN_RAID) == 1;

		if (inRaidChambers != setting) {
			inRaidChambers = setting;
		}
	}
}
package dev.wannaknow.raidplayernames;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.List;

public class RaidPlayerNamesBox extends JPanel {

    private RaidPlayerNamesPanel panel;

    private final JLabel deleteLabel = new JLabel();


    private static final ImageIcon DELETE_ICON;
    private static final ImageIcon DELETE_HOVER_ICON;

    static {
        final BufferedImage deleteImg = ImageUtil.getResourceStreamFromClass(RaidPlayerNamesPlugin.class, "delete.png");
        DELETE_ICON = new ImageIcon(deleteImg);
        DELETE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(deleteImg, -100));
    }

    RaidPlayerNamesBox(RaidPlayerNamesPanel panel, String type, List<String> players) {

        this.panel = panel;
        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(0, 0, 10, 0));


        JPanel actions = new JPanel();
        actions.setLayout(new BoxLayout(actions, BoxLayout.X_AXIS));
        actions.setBorder(new EmptyBorder(7, 7, 7, 7));
        actions.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());

        deleteLabel.setIcon(DELETE_ICON);
        deleteLabel.setToolTipText("Delete this raid");
        deleteLabel.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent mouseEvent)
            {
                int confirm = JOptionPane.showConfirmDialog(RaidPlayerNamesBox.this,
                        "Are you sure you want to permanently delete this raid?",
                        "Warning", JOptionPane.OK_CANCEL_OPTION);

                if (confirm == 0)
                {
                    deleteRaid();
                }
            }

            @Override
            public void mouseEntered(MouseEvent mouseEvent)
            {
                deleteLabel.setIcon(DELETE_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent mouseEvent)
            {
                deleteLabel.setIcon(DELETE_ICON);
            }
        });
        actions.add(new JLabel(type + " (" + players.size() + " players)"), BorderLayout.WEST);
        actions.add(Box.createHorizontalGlue());
        actions.add(Box.createRigidArea(new Dimension(5, 0)));
        actions.add(deleteLabel, BorderLayout.EAST);

        add(actions, BorderLayout.NORTH);

        JPanel topContainer = new JPanel();
        topContainer.setLayout(new BorderLayout());
        topContainer.setBorder(new EmptyBorder(7, 7, 7, 7));
        topContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JTextArea textArea = new JTextArea();
        textArea.setText(String.join("\n", players));
        topContainer.add(textArea, BorderLayout.NORTH);
        add(topContainer);
    }

    public void deleteRaid() {
        panel.deleteRaid(this);
    }
}

package dev.wannaknow.raidplayernames;

import net.runelite.client.ui.PluginPanel;

import java.awt.*;
import java.util.Arrays;
import java.util.List;

public class RaidPlayerNamesPanel extends PluginPanel {

    RaidPlayerNamesPanel(RaidPlayerNamesPlugin plugin) {
        getParent().setLayout(new BorderLayout());
        getParent().add(this, BorderLayout.NORTH);
    }

    public void addRaid(String type, List<String> people) {
        if(people.size() > 1) {
            add(new RaidPlayerNamesBox(this, type, people));
            validate();
            repaint();
        }
    }

    public void deleteRaid(RaidPlayerNamesBox box) {
        remove(box);
        validate();
        repaint();
    }
}

