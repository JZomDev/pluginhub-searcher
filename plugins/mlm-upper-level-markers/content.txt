/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MLMUpperLevelMarkersPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MLMUpperLevelMarkersPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup(MLMUpperLevelMarkersConfig.CONFIG_GROUP_NAME)
public interface MLMUpperLevelMarkersConfig extends Config
{
	String CONFIG_GROUP_NAME = "mlmupperlevelmarkers";
	String HIGHER_RENDER_PRIORITY_KEY_NAME = "higherRenderPriority";

	@Alpha
	@ConfigItem(
		keyName = "selfMarkerColor",
		name = "Self Marker Color",
		description = "Color of markers on veins you've mined.",
		position = 1
	)
	default Color getSelfMarkerColor()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
		keyName = "otherMarkerColor",
		name = "Other Marker Color",
		description = "Color of markers on veins other players have mined.",
		position = 2
	)
	default Color getOtherMarkerColor()
	{
		return Color.YELLOW;
	}

	@ConfigItem(
		keyName = "tileMarkerType",
		name = "Tile Marker Type",
		description = "Choose a Tile Marker type.<br>" +
			"Hidden: Hides the tile markers, useful to reduce clutter if using marker timers.<br>" +
			"Normal: Shows regular tile markers.<br>" +
			"Contour Timer: Makes the contour of the tile markers behave as a pie-chart of sorts with the timeouts.",
		position = 3
	)
	default TileMarkerType tileMarkerType()
	{
		return TileMarkerType.NORMAL;
	}

	@ConfigItem(
		keyName = "showOtherMarkers",
		name = "Show Other Players' Markers",
		description = "Add markers to veins other players have mined.",
		position = 4
	)
	default boolean showOtherMarkers()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showOnlyOnSameLevel",
		name = "Show Only When On Same Level",
		description = "Only show markers on the same level as you.",
		position = 5
	)
	default boolean showOnlyOnSameLevel()
	{
		return true;
	}

	@ConfigItem(
		keyName = "markersToShow",
		name = "Markers to Show",
		description = "Select which levels the markers should show on.",
		position = 6
	)
	default ShowMarkerType getMarkersToShow()
	{
		return ShowMarkerType.BOTH;
	}

	// 23-27 and 36-40 are values from https://secure.runescape.com/m=news/project-rebalance-skilling--poll-81-mta-changes?oldschool=1
	@ConfigItem(
		keyName = "firstTimeoutUL",
		name = "(Upper) First Timeout",
		description = "(Upper level) Darkens the marker after a vein has been first mined for this long (-1 to disable).",
		position = 7
	)
	@Units(Units.SECONDS)
	@Range(min = -1)
	default int getFirstTimeoutUL()
	{
		return 36;
	}

	@ConfigItem(
		keyName = "secondTimeoutUL",
		name = "(Upper) Second Timeout",
		description = "(Upper level) Darkens the marker again after a vein has been first mined for this long (-1 to disable).",
		position = 8
	)
	@Units(Units.SECONDS)
	@Range(min = -1)
	default int getSecondTimeoutUL()
	{
		return 40;
	}
	@ConfigItem(
		keyName = "firstTimeoutLL",
		name = "(Lower) First Timeout",
		description = "(Lower level) Darkens the marker after a vein has been first mined for this long (-1 to disable).",
		position = 9
	)
	@Units(Units.SECONDS)
	@Range(min = -1)
	default int getFirstTimeoutLL()
	{
		return 23;
	}

	@ConfigItem(
		keyName = "secondTimeoutLL",
		name = "(Lower) Second Timeout",
		description = "(Lower level) Darkens the marker again after a vein has been first mined for this long (-1 to disable).",
		position = 10
	)
	@Units(Units.SECONDS)
	@Range(min = -1)
	default int getSecondTimeoutLL()
	{
		return 27;
	}

	@ConfigItem(
		keyName = "respawnTimeout",
		name = "Respawn Timeout",
		description = "Deletes the marker for a vein when it's been this long after first being mined (-1 to disable).",
		position = 11
	)
	@Units(Units.SECONDS)
	@Range(min = -1)
	default int getRespawnTimeout()
	{
		return 120;
	}

	@ConfigItem(
		keyName = "markerTimerMode",
		name = "Marker Timer Mode",
		description = "Shows a timer on the marked tiles.<br>" +
			"Hidden: No timer is shown.<br>" +
			"Timeout: Counts down from the max of the two timeout values.<br>" +
			"Timeout (p): Same as Timeout, but persists when it reaches 0.<br>" +
			"Counter: Counts up from when a vein is first mined.",
		position = 12
	)
	default MarkerTimerMode getMarkerTimerMode()
	{
		return MarkerTimerMode.Off;
	}

	@ConfigItem(
		keyName = "showMarkerTimerDecimal",
		name = "Show Marker Timer Decimal",
		description = "Shows the tenth of seconds decimal on the marker timers.",
		position = 13
	)
	default boolean showMarkerTimerDecimal()
	{
		return true;
	}

	@ConfigItem(
		keyName = "markerTimerOutline",
		name = "Show Marker Timer Outline",
		description = "Show an outline around the text of the marker timers.",
		position = 14
	)
	default boolean showMarkerTimerOutline()
	{
		return true;
	}

	@ConfigItem(
		keyName = "markerTimerOffset",
		name = "Marker Timer Offset",
		description = "Adjust the height offset of the marker timers.",
		position = 15
	)
	@Range(min = -500, max = 500)
	default int getMarkerTimerOffset()
	{
		return 0;
	}

	@ConfigItem(
		keyName = HIGHER_RENDER_PRIORITY_KEY_NAME,
		name = "Render Above Motherlode Icons",
		description = "Gives a higher rendering priority to the markers and timers,<br>" +
			"allowing them to appear above the Motherlode plugin mining icons.",
		position = 16
	)
	default boolean higherRenderPriority()
	{
		return false;
	}
}

/*
 * Copyright (c) 2021, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

public enum TileMarkerType
{
	HIDDEN("Hidden"),
	NORMAL("Normal"),
	CONTOUR_TIMER("Contour Timer");

	private final String name;

	TileMarkerType(String name)
	{
		this.name = name;
	}

	public String getName()
	{
		return name;
	}

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import static net.runelite.api.AnimationID.*;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import static net.runelite.api.ObjectID.DEPLETED_VEIN_26665;
import static net.runelite.api.ObjectID.DEPLETED_VEIN_26666;
import static net.runelite.api.ObjectID.DEPLETED_VEIN_26667;
import static net.runelite.api.ObjectID.DEPLETED_VEIN_26668;
import static net.runelite.api.ObjectID.ORE_VEIN;
import static net.runelite.api.ObjectID.ORE_VEIN_26662;
import static net.runelite.api.ObjectID.ORE_VEIN_26663;
import static net.runelite.api.ObjectID.ORE_VEIN_26664;
import net.runelite.api.Perspective;
import net.runelite.api.WallObject;
import net.runelite.api.coords.Angle;
import net.runelite.api.coords.Direction;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.PlayerDespawned;
import net.runelite.api.events.WallObjectSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "MLM Mining Markers",
	description = "Adds markers to veins that have been mined in MLM",
	tags = {"motherlode", "mine", "marker", "mlm", "mining"}
)
public class MLMUpperLevelMarkersPlugin extends Plugin
{
	// From official Motherlode plugin
	private static final int UPPER_FLOOR_HEIGHT = -490;
	private static final Set<Integer> MOTHERLODE_MAP_REGIONS = ImmutableSet.of(14679, 14680, 14681, 14935, 14936, 14937, 15191, 15192, 15193);
	private static final Set<Integer> MINE_SPOTS = ImmutableSet.of(ORE_VEIN, ORE_VEIN_26662, ORE_VEIN_26663, ORE_VEIN_26664);
	private static final Set<Integer> DEPLETED_SPOTS = ImmutableSet.of(DEPLETED_VEIN_26665, DEPLETED_VEIN_26666, DEPLETED_VEIN_26667, DEPLETED_VEIN_26668);
	private static final Set<Integer> MINING_ANIMATION_IDS = ImmutableSet.of(
		MINING_MOTHERLODE_BRONZE, MINING_MOTHERLODE_IRON, MINING_MOTHERLODE_STEEL,
		MINING_MOTHERLODE_BLACK, MINING_MOTHERLODE_MITHRIL, MINING_MOTHERLODE_ADAMANT,
		MINING_MOTHERLODE_RUNE, MINING_MOTHERLODE_GILDED, MINING_MOTHERLODE_DRAGON,
		MINING_MOTHERLODE_DRAGON_UPGRADED, MINING_MOTHERLODE_DRAGON_OR, MINING_MOTHERLODE_DRAGON_OR_TRAILBLAZER,
		MINING_MOTHERLODE_INFERNAL, MINING_MOTHERLODE_3A, MINING_MOTHERLODE_CRYSTAL,
		MINING_MOTHERLODE_TRAILBLAZER
	);

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MLMUpperLevelMarkersConfig config;

	@Inject
	private MLMUpperLevelMarkersOverlay overlay;

	@Getter(AccessLevel.PACKAGE)
	private boolean inMLM;

	@Getter(AccessLevel.PACKAGE)
	private final Map<WorldPoint, StateTimePair> oreVeinStateMap = new ConcurrentHashMap<>();

	private final Map<Actor, Integer> actorAnimCountMap = new HashMap<>();
	private final Map<Actor, WorldPoint> actorLastAnimWPMap = new HashMap<>();

	@Provides
	MLMUpperLevelMarkersConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MLMUpperLevelMarkersConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		inMLM = checkInMLM();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		oreVeinStateMap.clear();
		actorAnimCountMap.clear();
		actorLastAnimWPMap.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch (event.getGameState())
		{
			case LOADING:
				oreVeinStateMap.clear();
				actorAnimCountMap.clear();
				actorLastAnimWPMap.clear();
				inMLM = checkInMLM();
				break;
			case LOGIN_SCREEN:
				inMLM = false;
				break;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(MLMUpperLevelMarkersConfig.CONFIG_GROUP_NAME)
			&& event.getKey().equals(MLMUpperLevelMarkersConfig.HIGHER_RENDER_PRIORITY_KEY_NAME))
		{
			if (overlay != null)
			{
				overlayManager.remove(overlay);
				overlay.setPriority(config.higherRenderPriority());
				overlayManager.add(overlay);
			}
		}
	}

	@Subscribe
	public void onPlayerDespawned(PlayerDespawned event)
	{
		Actor actor = event.getActor();
		actorAnimCountMap.remove(actor);
		actorLastAnimWPMap.remove(actor);
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged animationChanged)
	{
		if (!inMLM)
		{
			return;
		}

		Actor actor = animationChanged.getActor();
		if (!MINING_ANIMATION_IDS.contains(actor.getAnimation()))
		{
			return;
		}

		WorldPoint actorWP = actor.getWorldLocation();
		int animCount = actorAnimCountMap.getOrDefault(actor, 0) + 1;
		if (actorLastAnimWPMap.containsKey(actor))
		{
			if (!actorLastAnimWPMap.get(actor).equals(actorWP))
			{
				animCount = 1;
			}
		}

		actorAnimCountMap.put(actor, animCount);
		actorLastAnimWPMap.put(actor, actorWP);

		if (animCount < 2)
		{
			return;
		}

		final WorldPoint target = getWorldLocationInFront(actor);
		final LocalPoint localTarget = LocalPoint.fromWorld(client, target);

		if (localTarget != null)
		{
			final WallObject obj = client.getScene().getTiles()[0][localTarget.getSceneX()][localTarget.getSceneY()].getWallObject();
			if (obj != null && MINE_SPOTS.contains(obj.getId()))
			{
				final StateTimePair prevValue;
				final Instant now = Instant.now();

				if (oreVeinStateMap.containsKey(target))
				{
					prevValue = oreVeinStateMap.get(target);
					// If "respawned", reset the state of the rock
					final int respawnSeconds = config.getRespawnTimeout();
					if (respawnSeconds >= 0 && Duration.between(prevValue.getTime(), now).compareTo(Duration.ofSeconds(respawnSeconds)) >= 0)
					{
						prevValue.setState(OreVeinState.Untouched);
						prevValue.setTime(now);
					}
				}
				else
				{
					prevValue = StateTimePair.builder()
						.state(OreVeinState.Untouched)
						.time(now).build();
				}

				if (prevValue.getState() != OreVeinState.MinedBySelf)
				{
					final OreVeinState newState = actor == client.getLocalPlayer() ?
						OreVeinState.MinedBySelf : OreVeinState.MinedByOther;

					if (newState != prevValue.getState())
					{
						prevValue.setState(newState);
						oreVeinStateMap.putIfAbsent(target, prevValue);
					}
				}
			}
		}
	}

	@Subscribe
	public void onWallObjectSpawned(WallObjectSpawned event)
	{
		if (!inMLM)
		{
			return;
		}

		WallObject obj = event.getWallObject();
		if (DEPLETED_SPOTS.contains(obj.getId()))
		{
			oreVeinStateMap.remove(obj.getWorldLocation());
		}
	}

	// From official Motherlode plugin
	private boolean checkInMLM()
	{
		GameState gameState = client.getGameState();
		if (gameState != GameState.LOGGED_IN
			&& gameState != GameState.LOADING)
		{
			return false;
		}

		// Verify that all regions exist in MOTHERLODE_MAP_REGIONS
		for (int region : client.getMapRegions())
		{
			if (!MOTHERLODE_MAP_REGIONS.contains(region))
			{
				return false;
			}
		}

		return true;
	}

	// From official Motherlode plugin
	boolean isUpstairs(LocalPoint localPoint)
	{
		return Perspective.getTileHeight(client, localPoint, 0) < UPPER_FLOOR_HEIGHT;
	}

	private static WorldPoint getWorldLocationInFront(Actor actor)
	{
		final Direction orientation = new Angle(actor.getOrientation()).getNearestDirection();
		int dx = 0, dy = 0;

		switch (orientation)
		{
			case SOUTH:
				dy = -1;
				break;
			case WEST:
				dx = -1;
				break;
			case NORTH:
				dy = 1;
				break;
			case EAST:
				dx = 1;
				break;
		}

		final WorldPoint currWP = actor.getWorldLocation();
		return new WorldPoint(currWP.getX() + dx, currWP.getY() + dy, currWP.getPlane());
	}
}

/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

public enum MarkerTimerMode
{
	Off("Hidden"),
	Timeout("Timeout"),
	PersistentTimeout("Timeout (p)"),
	Counter("Counter"),
	;

	private final String name;

	MarkerTimerMode(String name)
	{
		this.name = name;
	}

	public String getName()
	{
		return name;
	}

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

import java.time.Instant;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class StateTimePair
{
	private OreVeinState state;
	private Instant time;
}

/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.geom.Path2D;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.Map;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.components.TextComponent;

class MLMUpperLevelMarkersOverlay extends Overlay
{
	private static final int MAX_DISTANCE = 2350;

	private final Client client;
	private final MLMUpperLevelMarkersPlugin plugin;
	private final MLMUpperLevelMarkersConfig config;

	private final TextComponent textComponent = new TextComponent();

	@Inject
	MLMUpperLevelMarkersOverlay(Client client, MLMUpperLevelMarkersPlugin plugin, MLMUpperLevelMarkersConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		setPriority(config.higherRenderPriority());
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	public void setPriority(boolean higher)
	{
		setPriority(higher ? PRIORITY_MED : PRIORITY_LOW);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isInMLM())
		{
			return null;
		}

		final Player localPlayer = client.getLocalPlayer();
		if (localPlayer == null)
		{
			return null;
		}

		final LocalPoint playerLocalPoint = localPlayer.getLocalLocation();
		final boolean playerUpstairs = plugin.isUpstairs(playerLocalPoint);
		final boolean checkSameLevel = config.showOnlyOnSameLevel();
		final ShowMarkerType markersToShow = config.getMarkersToShow();

		final Duration firstTimeoutUL = Duration.ofSeconds(config.getFirstTimeoutUL());
		final Duration secondTimeoutUL = Duration.ofSeconds(config.getSecondTimeoutUL());
		final Duration firstTimeoutLL = Duration.ofSeconds(config.getFirstTimeoutLL());
		final Duration secondTimeoutLL = Duration.ofSeconds(config.getSecondTimeoutLL());
		final Duration respawnTimeout = Duration.ofSeconds(config.getRespawnTimeout());

		final MarkerTimerMode timerMode = config.getMarkerTimerMode();
		final int offset = config.getMarkerTimerOffset();

		final TileMarkerType markerType = config.tileMarkerType();

		final Instant now = Instant.now();

		final DecimalFormat timerDecimalFormat = new DecimalFormat(config.showMarkerTimerDecimal() ? "0.0" : "0");
		timerDecimalFormat.setRoundingMode(RoundingMode.CEILING);

		for (Map.Entry<WorldPoint, StateTimePair> entry : plugin.getOreVeinStateMap().entrySet())
		{
			final OreVeinState state = entry.getValue().getState();
			final Instant time = entry.getValue().getTime();
			final Duration sinceTime = Duration.between(time, now);
			final LocalPoint localPoint = LocalPoint.fromWorld(client, entry.getKey());

			if (localPoint == null)
			{
				continue;
			}

			final boolean pointUpstairs = plugin.isUpstairs(localPoint);

			if (markersToShow == ShowMarkerType.UPPER && !pointUpstairs
				|| markersToShow == ShowMarkerType.LOWER && pointUpstairs
				|| checkSameLevel && playerUpstairs != pointUpstairs)
			{
				continue;
			}
			
			// Do not display anymore if "respawned"
			if (respawnTimeout.getSeconds() >= 0 && sinceTime.compareTo(respawnTimeout) >= 0)
			{
				continue;
			}

			Color color;
			switch (state)
			{
				case MinedBySelf:
					color = config.getSelfMarkerColor();
					break;
				case MinedByOther:
					color = config.showOtherMarkers() ? config.getOtherMarkerColor() : null;
					break;
				default:
					color = null;
					break;
			}

			final Duration ft = pointUpstairs ? firstTimeoutUL : firstTimeoutLL;
			final Duration st = pointUpstairs ? secondTimeoutUL : secondTimeoutLL;

			if (color != null && playerLocalPoint.distanceTo(localPoint) <= MAX_DISTANCE)
			{
				Polygon poly = Perspective.getCanvasTilePoly(client, localPoint);
				if (poly != null)
				{
					long t1 = ft.getSeconds();
					long t2 = st.getSeconds();
					if (t1 >= 0 && sinceTime.compareTo(ft) >= 0)
					{
						color = color.darker();
					}
					if (t2 >= 0 && sinceTime.compareTo(st) >= 0)
					{
						color = color.darker();
					}

					// Adjust to treat disable (-1) as a value of 0
					t1 = Math.max(t1, 0);
					t2 = Math.max(t2, 0);

					final long maxt = Math.max(t1, t2);
					final double timeLeftMax = Duration.between(now, time.plusSeconds(maxt)).toMillis() / 1000f;

					switch (markerType)
					{
						case CONTOUR_TIMER:
							if (timeLeftMax <= 0)
							{
								OverlayUtil.renderPolygon(graphics, poly, color);
							}
							else
							{
								final long mint = Math.min(t1, t2);
								final double timeLeftMin = Duration.between(now, time.plusSeconds(mint)).toMillis() / 1000f;

								double timeLeft;
								long target;
								if (timeLeftMin > 0)
								{
									timeLeft = timeLeftMin;
									target = mint;
								}
								else
								{
									timeLeft = timeLeftMax;
									target = maxt - mint;
								}
								renderTileWithMovingColor(graphics, poly, color, color.darker(), timeLeft / target);
							}
							break;
						case NORMAL:
							OverlayUtil.renderPolygon(graphics, poly, color);
					}

					Double secs = null;

					switch (timerMode)
					{
						case Timeout:
							if (timeLeftMax > 0)
							{
								secs = timeLeftMax;
							}
							break;
						case PersistentTimeout:
							secs = Math.max(0, timeLeftMax);
							break;
						case Counter:
							secs = sinceTime.toMillis() / 1000d;
							break;
					}

					if (secs != null)
					{
						String label = timerDecimalFormat.format(secs);
						Point canvasTextLocation = Perspective.getCanvasTextLocation(
							client, graphics, localPoint, label, offset);
						if (canvasTextLocation != null)
						{
							textComponent.setText(label);
							textComponent.setColor(color);
							textComponent.setOutline(config.showMarkerTimerOutline());
							textComponent.setPosition(
								new java.awt.Point(canvasTextLocation.getX(), canvasTextLocation.getY()));
							textComponent.render(graphics);
						}
					}
				}
			}
		}

		return null;
	}

	public static void renderTileWithMovingColor(Graphics2D graphics, Polygon poly, Color color, Color color2, double interpolate)
	{
		if (interpolate <= 0)
		{
			OverlayUtil.renderPolygon(graphics, poly, color2);
			return;
		}
		else if (interpolate >= 1)
		{
			OverlayUtil.renderPolygon(graphics, poly, color);
			return;
		}

		final int numPoints = poly.npoints;
		final int interpolatedLine = (int) (numPoints * interpolate);
		final double actualInterpolate = (numPoints * interpolate) - interpolatedLine;

		Path2D p1 = new Path2D.Double();
		Path2D p2 = new Path2D.Double();

		p1.moveTo(poly.xpoints[0], poly.ypoints[0]);

		Path2D curP = p1;

		for (int i = 0; i < numPoints; i++)
		{
			final int j = (i + 1) % numPoints;
			final int x2 = poly.xpoints[j];
			final int y2 = poly.ypoints[j];

			if (i == interpolatedLine)
			{
				final int x1 = poly.xpoints[i];
				final int y1 = poly.ypoints[i];
				final double interX = lerp(x1, x2, actualInterpolate);
				final double interY = lerp(y1, y2, actualInterpolate);
				curP.lineTo(interX, interY);
				curP = p2;
				curP.moveTo(interX, interY);
			}

			curP.lineTo(x2, y2);
		}

		// So the lines don't jiggle around as they get interpolated
		final Object prevStrokeControl = graphics.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
		graphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);

		final Stroke originalStroke = graphics.getStroke();
		graphics.setStroke(new BasicStroke(2, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));

		graphics.setColor(color);
		graphics.draw(p1);
		graphics.setColor(color2);
		graphics.draw(p2);

		graphics.setColor(new Color(0, 0, 0, 50));
		graphics.fill(poly);
		graphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, prevStrokeControl);
		graphics.setStroke(originalStroke);
	}

	private static double lerp(double a, double b, double f)
	{
		return a + f * (b - a);
	}
}

/*
 * Copyright (c) 2020, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

public enum OreVeinState
{
	Untouched,
	MinedBySelf,
	MinedByOther
}

/*
 * Copyright (c) 2024, Cyborger1
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.mlmupperlevelmarkers;

public enum ShowMarkerType
{
	BOTH("Both Levels"),
	UPPER("Upper Level"),
	LOWER("Lower Level");

	private final String name;

	ShowMarkerType(String name)
	{
		this.name = name;
	}

	public String getName()
	{
		return name;
	}

	@Override
	public String toString()
	{
		return name;
	}
}

