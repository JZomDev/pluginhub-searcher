package com.clicktominimize;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClickToMinimizeTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClickToMinimizePlugin.class);
		RuneLite.main(args);
	}
}
package com.clicktominimize;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.swing.JFrame;
import java.awt.Frame;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static net.runelite.client.util.Text.removeTags;

@Slf4j
@PluginDescriptor(
		name = "Click To Minimize"
)
public class ClickToMinimizePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClickToMinimizeConfig config;

	@Inject
	private KeyManager keyManager;

	@Inject
	private ClickToMinimizeKeyListener keyListener;

	@Inject
	private ChatMessageManager chatMessageManager;

	private long lastMessageTime = 0;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Click To Minimize started!");
		keyManager.registerKeyListener(keyListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(keyListener);
		log.info("Click To Minimize stopped!");
	}

	@Provides
	ClickToMinimizeConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClickToMinimizeConfig.class);
	}

	public Map<String, List<String>> parseActions(String actionConfig, boolean ignoreCase) {
		Map<String, List<String>> actionsMap = new HashMap<>();
		String[] actions = actionConfig.split(",");
		for (String action : actions) {
			String[] parts = action.trim().split(":");
			if (parts.length == 2) {
				String key = ignoreCase ? parts[0].trim().toLowerCase() : parts[0].trim();
				String value = ignoreCase ? parts[1].trim().toLowerCase() : parts[1].trim();
				actionsMap.computeIfAbsent(key, k -> new ArrayList<>()).add(value);
			}
		}
		return actionsMap;
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (keyListener.isPreventMinimizeHeld())
		{
			return; // Exit early if the key is held
		}

		boolean ignoreCase = config.ignoreCase();
		boolean checkNoTargets = config.checkNoTargets();
		Map<String, List<String>> actionsMap = parseActions(config.actions(), ignoreCase);
		String action = ignoreCase ? event.getMenuOption().toLowerCase() : event.getMenuOption();
		String target = ignoreCase ? removeTags(event.getMenuTarget()).toLowerCase() : removeTags(event.getMenuTarget());

		// Log the player's action if the option is enabled
		if (config.logPlayerActions()) {
			chatMessageManager.queue(QueuedMessage.builder()
					.type(ChatMessageType.GAMEMESSAGE)
					.runeLiteFormattedMessage("Click To Minimize, logging action on target: \"" + event.getMenuOption() + ": " + event.getMenuTarget() + "\"")
					.build());
		}

		for (Map.Entry<String, List<String>> entry : actionsMap.entrySet()) {
			String configAction = entry.getKey();
			List<String> configTargets = entry.getValue();

			if (action.equals(configAction)) {
				for (String configTarget : configTargets) {
					if (target.contains(configTarget) || (checkNoTargets && target.isEmpty())) {
						minimizeWindow();
						return;
					}
				}
			}
		}
	}

	public boolean isInventoryFull() {
		int itemCount = client.getItemContainer(InventoryID.INVENTORY).count();
		return itemCount >= 28;
	}

	public void minimizeWindow() {
		if (config.ignoreFullInventory() && isInventoryFull()) {
			log.info("Inventory is full. Skipping window minimize.");
			return;
		}

		JFrame frame = (JFrame) javax.swing.SwingUtilities.getWindowAncestor(client.getCanvas());
		if (frame != null) {
			frame.setState(Frame.ICONIFIED);

			long currentTime = System.nanoTime();
			// Check if enough time has passed since the last message (5 seconds)
			if (config.sendChatMessage() && (currentTime - lastMessageTime) >= 5_000_000_000L) {
				chatMessageManager.queue(QueuedMessage.builder()
						.type(ChatMessageType.GAMEMESSAGE)
						.runeLiteFormattedMessage("Window has been minimized by the Click To Minimize plugin.")
						.build());

				// Update the last message time
				lastMessageTime = currentTime;
			}
		} else {
			log.warn("No frame found to minimize!");
		}
	}
}

package com.clicktominimize;

import net.runelite.api.KeyCode;
import net.runelite.client.input.KeyListener;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

public class ClickToMinimizeKeyListener implements KeyListener
{
    @Inject
    private ClickToMinimizePlugin plugin;

    @Inject
    private ClickToMinimizeConfig config;

    private boolean preventMinimize = false; // Add this field

    @Override
    public void keyTyped(KeyEvent e)
    {
        // No action needed for keyTyped event in this case
    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        if (config.minimizeKeybind().matches(e))
        {
            plugin.minimizeWindow();
        }

        if (config.holdToPreventMinimizeKeybind().matches(e))
        {
            preventMinimize = true; // Set to true when the key is pressed
        }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {
        if (config.holdToPreventMinimizeKeybind().matches(e))
        {
            preventMinimize = false; // Reset when the key is released
        }
    }

    public boolean isPreventMinimizeHeld()
    {
        return preventMinimize;
    }
}
package com.clicktominimize;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

@ConfigGroup("ClickToMinimize")
public interface ClickToMinimizeConfig extends Config
{
	@ConfigItem(
		keyName = "Actions",
		name = "List of Actions to Minimize",
		description = "Enter actions in the format 'Action: Target, Action: Target." +
			", E.g. <br>'Pick-Fruit: Sq'irk tree, <br>Mine: Crashed Star'"
	)
	default String actions()
	{
		return "--- Examples: ---, \n" +
				"#Pick-Fruit: Sq'irk tree, \n" +
				"#Mine: Crashed Star, \n" +
				"#Bait: Rod Fishing spot,\n" +
				"#Use: Hammer -> Infernal eel,\n" +
				"#Make: yew longbow,\n" +
				"#Make: Super defence(3),\n" +
				"#Attack: Guard,\n";
	}

	@ConfigItem(
		keyName = "ignoreCase",
		name = "Ignore Case",
		description = "Ignore text capitalization when matching actions and targets",
		position = 2
	)
	default boolean ignoreCase()
	{
		return true;
	}

	@ConfigItem(
		keyName = "ignoreFullInventory",
		name = "Don't Minimize on Full Inventory",
		description = "If enabled, will not minimize window whenever the inventory is completely full.",
		position = 3
	)
	default boolean ignoreFullInventory()
	{
		return true;
	}

	@ConfigItem(
		keyName = "checkNoTargets",
		name = "Check for No Targets",
		description = "Mainly used for menu options, e.g. at the grand exchange. Using 'Confirm: x' will make it so that when you press the confirm after inputting a trade, it will minimize.",
		position = 4
	)
	default boolean checkNoTargets()
	{
		return true;
	}

	@ConfigItem(
		keyName = "minimizeKeybind",
		name = "Minimize Keybind",
		description = "Keybind to minimize the screen",
		position = 5
	)
	default Keybind minimizeKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			keyName = "holdToPreventMinimizeKeybind",
			name = "Hold to Prevent Minimize Keybind",
			description = "WARNING: Changing this to shift will prevent 'shift drop' items Hold this key to prevent the window from minimizing when clicking.",
			position = 6
	)
	default Keybind holdToPreventMinimizeKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			keyName = "sendChatMessage",
			name = "Send Chat Message on Minimize",
			description = "If enabled, a message will be sent to the in-game chat when the window is minimized.",
			position = 7
	)
	default boolean sendChatMessage() { return true; }

	@ConfigItem(
			keyName = "logPlayerActions",
			name = "Log Player Actions",
			description = "If enabled, logs every action taken by the player to the game window. This helps to figure out how to enable some actions, as they're not always clear.",
			position = 8
	)
	default boolean logPlayerActions() { return false; }
}

