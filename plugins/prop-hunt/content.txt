package com.idyl.prophunt;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PropHuntPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PropHuntPlugin.class);
		RuneLite.main(args);
	}
}
package com.idyl.prophunt;

import com.google.gson.*;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.IOException;
import java.util.HashMap;

@Slf4j
@Singleton
public class PropHuntDataManager {
    private final String baseUrl = "http://props.idyl.live:8080";
    private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");

    @Inject
    private PropHuntPlugin plugin;

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private Gson gson;

    protected void updatePropHuntApi(PropHuntPlayerData data)
    {
        String username = urlifyString(data.username);
        String url = baseUrl.concat("/prop-hunters/"+username);

        try
        {
            Request r = new Request.Builder()
                    .url(url)
                    .post(RequestBody.create(JSON, gson.toJson(data)))
                    .build();

            okHttpClient.newCall(r).enqueue(new Callback()
            {
                @Override
                public void onFailure(Call call, IOException e)
                {
                    log.debug("Error sending post data", e);
                }

                @Override
                public void onResponse(Call call, Response response)
                {
                    if (response.isSuccessful())
                    {
                        log.debug("Successfully sent prop hunt data");
                        response.close();
                    }
                    else
                    {
                        log.debug("Post request unsuccessful");
                        response.close();
                    }
                }
            });
        }
        catch (IllegalArgumentException e)
        {
            log.error("Bad URL given: " + e.getLocalizedMessage());
        }
    }

    public void getPropHuntersByUsernames(String[] players) {
        String playersString = urlifyString(String.join(",", players));

        try {
            Request r = new Request.Builder()
                    .url(baseUrl.concat("/prop-hunters/".concat(playersString)))
                    .get()
                    .build();

            okHttpClient.newCall(r).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    log.info("Error getting prop hunt data by username", e);
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    if(response.isSuccessful()) {
                        try
                        {
                            JsonArray j = gson.fromJson(response.body().string(), JsonArray.class);
                            HashMap<String, PropHuntPlayerData> playerData = parsePropHuntData(j);
                            plugin.updatePlayerData(playerData);
                        }
                        catch (IOException | JsonSyntaxException e)
                        {
                            log.error(e.getMessage());
                        }
                    }

                    response.close();
                }
            });
        }
        catch(IllegalArgumentException e) {
            log.error("Bad URL given: " + e.getLocalizedMessage());
        }
    }

    private HashMap<String, PropHuntPlayerData> parsePropHuntData(JsonArray j) {
        HashMap<String, PropHuntPlayerData> l = new HashMap<>();
        for (JsonElement jsonElement : j)
        {
            JsonObject jObj = jsonElement.getAsJsonObject();
            String username = jObj.get("username").getAsString();
            PropHuntPlayerData d = new PropHuntPlayerData(jObj.get("username").getAsString(),
                    jObj.get("hiding").getAsBoolean(), jObj.get("modelID").getAsInt(), jObj.get("orientation").getAsInt());
            l.put(username, d);
        }
        return l;
    }

    private String urlifyString(String str) {
        return str.trim().replaceAll("\\s", "%20");
    }
}

package com.idyl.prophunt;

import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PropHuntPanel extends PluginPanel implements ActionListener {
    private PropHuntPlugin plugin;

    private JButton myButton;
    private JComboBox<String> comboBox;
    private JLabel title;

    public PropHuntPanel(PropHuntPlugin plugin) {
        this.plugin = plugin;

        // Set layout to GridBagLayout
        setLayout(new GridBagLayout());

        // Create GridBagConstraints object to set component constraints
        GridBagConstraints gbc = new GridBagConstraints();

        // Set title constraints
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 0, 10, 0); // add padding
        title = new JLabel("Prop Hunt");
        title.setFont(FontManager.getRunescapeBoldFont());
        title.setHorizontalAlignment(SwingConstants.CENTER);
        add(title, gbc);

        // Set label and button constraints for third row
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 0, 5, 0); // add padding
        JLabel label2 = new JLabel("Custom Model List:");
        add(label2, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.insets = new Insets(5, 0, 5, 0); // add padding
        comboBox = new JComboBox<>();
        comboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedOption = (String) comboBox.getSelectedItem();
                if(PropHuntModelId.map.get(selectedOption) == null) return;

                plugin.setModelID(PropHuntModelId.valueOf(selectedOption));
            }
        });
        updateComboBox();
        add(comboBox, gbc);

        // Set label and button constraints for second row
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(5, 0, 5, 3); // add padding
        myButton = new JButton("Randomize Model");
        myButton.addActionListener(this);
        add(myButton, gbc);

        // Set label and button constraints for second row
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 0, 5, 3); // add padding
        JButton rotateClockwiseButton = new JButton("↻");
        rotateClockwiseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                plugin.rotateModel(1);
            }
        });
        add(rotateClockwiseButton, gbc);

        // Set label and button constraints for second row
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 3, 5, 0); // add padding
        JButton rotateCounterButton = new JButton("↺");
        rotateCounterButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                plugin.rotateModel(-1);
            }
        });
        add(rotateCounterButton, gbc);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        plugin.setRandomModelID();
    }

    public void updateComboBox() {
        comboBox.removeAllItems();
        PropHuntModelId.map.keySet().forEach(item -> comboBox.addItem(item));
    }

}
package com.idyl.prophunt;

import lombok.Getter;

import java.util.LinkedHashMap;

public class PropHuntModelId {
    public static LinkedHashMap<String, PropHuntModelId> map = new LinkedHashMap<>();

    @Getter
    private int id;
    @Getter
    private String name;

    public PropHuntModelId(String name, int id) {
        this.id = id;
        this.name = name;
    }

    public static PropHuntModelId valueOf(String name) {
        PropHuntModelId model = map.get(name);
        if (model == null) {
            throw new IllegalArgumentException("No model by the name " + name + " found");
        }
        return model;
    }

    public static void add(String name, int modelID) {
        map.put(name, new PropHuntModelId(name, modelID));
    }
}

package com.idyl.prophunt;

public class PropHuntPlayerData {
    public int modelID;
    public String username;
    public boolean hiding;
    public int orientation;

    public PropHuntPlayerData(String username, boolean hiding, int modelID, int orientation) {
        this.username = username;
        this.hiding = hiding;
        this.modelID = modelID;
        this.orientation = orientation;
    }

    @Override
    public String toString() {
        return "username: "+username+", hiding: "+hiding+", modelID: "+ modelID + ", orientation: "+orientation;
    }
}

package com.idyl.prophunt;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;

public class PropHuntOverlay extends OverlayPanel {
    public static OverlayMenuEntry RESET_ENTRY = new OverlayMenuEntry(RUNELITE_OVERLAY, "Reset", "Counter");

    private PropHuntPlugin plugin;
    private PropHuntConfig config;
    private final LineComponent rightClicksRemainingComponent;

    @Inject
    private PropHuntOverlay(PropHuntPlugin plugin, PropHuntConfig config) {
        this.plugin = plugin;
        this.config = config;
        getMenuEntries().add(RESET_ENTRY);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGH);
        setPosition(OverlayPosition.BOTTOM_LEFT);

        rightClicksRemainingComponent = LineComponent.builder().left("Right Clicks Remaining:").right("").build();
        panelComponent.getChildren().add(rightClicksRemainingComponent);

        setClearChildren(false);
    }
    
    @Override
    public Dimension render(Graphics2D graphics) {
        if(!config.limitRightClicks()) return null;

        graphics.setFont(FontManager.getRunescapeFont());
        rightClicksRemainingComponent.setRightColor(getColor());
        rightClicksRemainingComponent.setRight(getClicksRemaining()+"");
        return super.render(graphics);
    }

    private Color getColor() {
        return getClicksRemaining() > 3 ? Color.GREEN : getClicksRemaining() > 0 ? Color.YELLOW : Color.RED;
    }

    private int getClicksRemaining() {
        return config.maxRightClicks() - plugin.getRightClickCounter();
    }
}

package com.idyl.prophunt;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("prophunt")
public interface PropHuntConfig extends Config
{
	@ConfigSection(
			name = "Setup",
			description = "Setup settings for the plugin",
			position = 0
	)
	String setupSettings = "setupSettings";

	@ConfigSection(
			name = "Transmog",
			description = "Settings relating to transmog",
			position = 1
	)
	String transmogSettings = "transmogSettings";


	@ConfigItem(
			keyName = "players",
			name = "Player Names",
			description = "Names of the players you are playing with (comma separated)",
			position = 1,
			section = setupSettings
	)
	default String players() { return ""; }

	@ConfigItem(
			keyName = "models",
			name = "Custom Model List",
			description = "Models that you want to play with (formatted: name: id, ...)",
			position = 2,
			section = setupSettings
	)
	default String models() { return "Bush: 1565, Crate: 12125, Rock Pile: 1391"; }

	@ConfigItem(
			keyName = "hideMode",
			name = "Hide Mode",
			description = "Toggle whether you are currently hiding or not",
			position = 1,
			section = transmogSettings
	)
	default boolean hideMode()
	{
		return false;
	}

	@ConfigItem(
			keyName = "limitRightClicks",
			name = "Limit Right Clicks",
			description = "Limit the number of right clicks a non-hider can do",
			position = 5,
			section = setupSettings
	)
	default boolean limitRightClicks() { return false; }

	@ConfigItem(
			keyName = "maxRightClicks",
			name = "Maximum Right Clicks",
			description = "The number of right clicks a non-hider can do",
			position = 6,
			section = setupSettings
	)
	default int maxRightClicks() { return 10; }

	@ConfigItem(
			keyName = "depriorizteMenuOptions",
			name = "Deprioritize Menu Options",
			description = "Forces 'Walk Here' to the top of every menu to better hide props",
			position = 6,
			section = setupSettings
	)
	default boolean depriorizteMenuOptions() { return true; }

	@ConfigItem(
			keyName = "hideMinimapDots",
			name = "Hide Minimap Dots",
			description = "Toggle whether minimap dots are hidden",
			position = 5,
			section = setupSettings
	)
	default boolean hideMinimapDots()
	{
		return false;
	}

	@ConfigItem(
			keyName = "modelID",
			name = "Model ID",
			description = "The ID of the model you'd like to become",
			position = 8,
			section = transmogSettings
	)
	default int modelID() { return 1565; }

	@ConfigItem(
		keyName = "randMinID",
		name = "Min Random Model ID",
		description = "The minimum randomised ID of the model you'd like to become",
		position = 9,
		section = setupSettings
	)
	default int randMinID() { return 1; }

	@ConfigItem(
		keyName = "randMaxID",
		name = "Max Random Model ID",
		description = "The maximum randomised ID of the model you'd like to become",
		position = 10,
		section = setupSettings
	)
	default int randMaxID() { return 47604; }

	@ConfigItem(
			keyName = "orientation",
			name = "Orientation",
			description = "orientation",
			hidden = true
	)
	default int orientation() { return 0; }
}

package com.idyl.prophunt;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;

import java.awt.image.BufferedImage;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import javax.inject.Inject;

import joptsimple.util.RegexMatcher;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.callback.Hooks;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;

import java.awt.*;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
	name = "Prop Hunt"
)
public class PropHuntPlugin extends Plugin
{
	public final String CONFIG_KEY = "prophunt";
	public final Pattern modelEntry = Pattern.compile("[a-zA-Z]+:[ ]?[0-9]+");

	@Inject
	private Client client;

	@Inject
	private PropHuntConfig config;

	@Inject
	private Hooks hooks;

	@Inject
	private ClientThread clientThread;

	@Inject
	private PropHuntDataManager propHuntDataManager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PropHuntOverlay propHuntOverlay;

	@Inject
	private ClientToolbar clientToolbar;

	private PropHuntPanel panel;
	private NavigationButton navButton;

	private RuneLiteObject localDisguise;

	private HashMap<String, RuneLiteObject> playerDisguises = new HashMap<>();

	private String[] players;
	private HashMap<String, PropHuntPlayerData> playersData;

	private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;

	private final long SECONDS_BETWEEN_GET = 5;
	private static final int DOT_PLAYER = 2;
	private static final int DOT_FRIEND = 3;
	private static final int DOT_TEAM = 4;
	private static final int DOT_FRIENDSCHAT = 5;
	private static final int DOT_CLAN = 6;

	private SpritePixels[] originalDotSprites;

	@Getter
	private int rightClickCounter = 0;

	@Override
	protected void startUp() throws Exception
	{
		playersData = new HashMap<>();
		hooks.registerRenderableDrawListener(drawListener);
		clientThread.invokeLater(() -> transmogPlayer(client.getLocalPlayer()));
		setPlayersFromString(config.players());
		getPlayerConfigs();
		storeOriginalDots();
		hideMinimapDots();

		panel = new PropHuntPanel(this);
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "panel_icon.png");
		navButton = NavigationButton.builder()
				.tooltip("Prop Hunt")
				.priority(5)
				.icon(icon)
				.panel(panel)
				.build();
		clientToolbar.addNavigation(navButton);
		updateDropdown();
		overlayManager.add(propHuntOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientThread.invokeLater(this::removeAllTransmogs);
		overlayManager.remove(propHuntOverlay);
		hooks.unregisterRenderableDrawListener(drawListener);
		clientToolbar.removeNavigation(navButton);
		restoreOriginalDots();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (GameState.LOGGED_IN.equals(event.getGameState()))
		{
			if(config.hideMode()) clientThread.invokeLater(() -> transmogPlayer(client.getLocalPlayer()));

			if(client.getLocalPlayer().getName() != null)
				propHuntDataManager.updatePropHuntApi(new PropHuntPlayerData(client.getLocalPlayer().getName(),
					config.hideMode(), getModelID(), config.orientation()));
		}

		if (event.getGameState() == GameState.LOGIN_SCREEN && originalDotSprites == null)
		{
			storeOriginalDots();
			if(config.hideMinimapDots()) hideMinimapDots();
		}
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event) {
		clientThread.invokeLater(this::removeAllTransmogs);
		if(config.hideMode()) {
			clientThread.invokeLater(() -> transmogPlayer(client.getLocalPlayer()));
		}

		if(event.getKey().equals("players")) {
			setPlayersFromString(config.players());
			clientThread.invokeLater(() -> removeTransmogs());
			getPlayerConfigs();
		}

		if(event.getKey().equals("hideMinimapDots")) {
			if (config.hideMinimapDots()) {
				hideMinimapDots();
			} else {
				restoreOriginalDots();
			}
		}

		if(event.getKey().equals("models")) {
			updateDropdown();
		}

		if(client.getLocalPlayer() != null) {
			propHuntDataManager.updatePropHuntApi(new PropHuntPlayerData(client.getLocalPlayer().getName(),
					config.hideMode(), getModelID(), config.orientation()));
			clientThread.invokeLater(() -> transmogOtherPlayers());
		}
	}

	@Subscribe
	public void onClientTick(final ClientTick event) {
		if(config.hideMode() && localDisguise != null) {
			LocalPoint playerPoint = client.getLocalPlayer().getLocalLocation();
			localDisguise.setLocation(playerPoint, client.getPlane());

		}

		client.getPlayers().forEach(player -> updateDisguiseLocation(player));
	}

	@Subscribe
	public void onMenuOpened(MenuOpened event) {
		if(config.limitRightClicks() && !config.hideMode()) {
			if(rightClickCounter >= config.maxRightClicks()) {
				sendHighlightedChatMessage("You have used all of your right clicks!");
				return;
			}
			rightClickCounter++;
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event) {
		if(playerDisguises == null || playerDisguises.size() == 0) return;

		if(!event.getOption().startsWith("Walk here")) {
			if(config.depriorizteMenuOptions()) event.getMenuEntry().setDeprioritized(true);
			return;
		}
	}

	@Subscribe
	public void onOverlayMenuClicked(OverlayMenuClicked event)
	{
		if (event.getEntry() == PropHuntOverlay.RESET_ENTRY) {
			rightClickCounter = 0;
		}
	}

	private void findPlayer(String player) {
		sendNormalChatMessage("You found "+player+"!");
	}

	private void sendNormalChatMessage(String message) {
		ChatMessageBuilder msg = new ChatMessageBuilder()
				.append(ChatColorType.NORMAL)
				.append(message);

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.ITEM_EXAMINE)
				.runeLiteFormattedMessage(msg.build())
				.build());
	}

	private void sendHighlightedChatMessage(String message) {
		ChatMessageBuilder msg = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append(message);

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(msg.build())
				.build());
	}

	// Hide players who are participating in prop hunt
	@VisibleForTesting
	boolean shouldDraw(Renderable renderable, boolean drawingUI)
	{
		if (renderable instanceof Player)
		{
			Player player = (Player) renderable;
			Player local = client.getLocalPlayer();

			if (player == local)
			{
				return !config.hideMode();
			}

			if(players == null) return true;

			ArrayList<String> playerList = new ArrayList<>(Arrays.asList(players));

			if(playerList.contains(player.getName())) {
				PropHuntPlayerData data = playersData.get(player.getName());

				if(data == null) return true;

				if(data.hiding) {
					return !data.hiding;
				}
			}
		}

		return true;
	}

	private void transmogPlayer(Player player) {
		transmogPlayer(player, getModelID(), config.orientation(), true);
	}

	private void transmogPlayer(Player player, int modelId, int orientation, boolean local) {
		int modelID;
		if(client.getLocalPlayer() == null) return;

		else
		{
			modelID = modelId;
		}
		RuneLiteObject disguise = client.createRuneLiteObject();

		LocalPoint loc = LocalPoint.fromWorld(client, player.getWorldLocation());
		if (loc == null)
		{
			return;
		}

		Model model = client.loadModel(modelID);

		if (model == null)
		{
			final Instant loadTimeOutInstant = Instant.now().plus(Duration.ofSeconds(5));

			clientThread.invoke(() ->
			{
				if (Instant.now().isAfter(loadTimeOutInstant))
				{
					return true;
				}

				Model reloadedModel = client.loadModel(modelID);

				if (reloadedModel == null)
				{
					return false;
				}

				localDisguise.setModel(reloadedModel);

				return true;
			});
		}
		else {
			disguise.setModel(model);
		}

		disguise.setLocation(player.getLocalLocation(), player.getWorldLocation().getPlane());
		disguise.setActive(true);
		disguise.setOrientation(orientation);
		if(local) {
			localDisguise = disguise;
		}
		else {
			playerDisguises.put(player.getName(), disguise);
		}
	}

	private void transmogOtherPlayers() {
		if(players == null || client.getLocalPlayer() == null) return;

		client.getPlayers().forEach(player -> {
			if(client.getLocalPlayer() == player) return;

			PropHuntPlayerData data = playersData.get(player.getName());

			if(data == null || !data.hiding) return;

			transmogPlayer(player, data.modelID, data.orientation, false);
		});
	}

	private void removeLocalTransmog() {
		if (localDisguise != null)
		{
			localDisguise.setActive(false);
		}
		localDisguise = null;
	}

	private void removeTransmogs()
	{
		playerDisguises.forEach((p, disguise) -> {
			if(disguise == null) return;
			disguise.setActive(false);
		});
	}

	private void removeAllTransmogs() {
		removeTransmogs();
		removeLocalTransmog();
	}

	private void updateDisguiseLocation(Player p) {
		RuneLiteObject obj = playerDisguises.get(p.getName());
		if(obj == null) return;

		obj.setLocation(p.getLocalLocation(), p.getWorldLocation().getPlane());
	}

	private void setPlayersFromString(String playersString) {
		String[] p = playersString.split(",");

		for(int i=0;i<p.length;i++) {
			p[i] = p[i].trim();
		}

		players = p;
	}

	@Schedule(
			period = SECONDS_BETWEEN_GET,
			unit = ChronoUnit.SECONDS,
			asynchronous = true
	)
	public void getPlayerConfigs() {
		if(players.length < 1 || config.players().isEmpty()) return;

		propHuntDataManager.getPropHuntersByUsernames(players);
	}

	// Called from PropHuntDataManager
	public void updatePlayerData(HashMap<String, PropHuntPlayerData> data) {
		clientThread.invokeLater(() -> {
			removeTransmogs();
			playersData.clear();
			playerDisguises.clear();
			playersData.putAll(data);
			playersData.values().forEach(player -> playerDisguises.put(player.username, null));
			transmogOtherPlayers();
		});
	}

	private void hideMinimapDots() {
		SpritePixels[] mapDots = client.getMapDots();

		if(mapDots == null) return;

		mapDots[DOT_PLAYER] = client.createSpritePixels(new int[0], 0, 0);
		mapDots[DOT_CLAN] = client.createSpritePixels(new int[0], 0, 0);
		mapDots[DOT_FRIEND] = client.createSpritePixels(new int[0], 0, 0);
		mapDots[DOT_FRIENDSCHAT] = client.createSpritePixels(new int[0], 0, 0);
		mapDots[DOT_TEAM] = client.createSpritePixels(new int[0], 0, 0);
	}

	private void storeOriginalDots()
	{
		SpritePixels[] originalDots = client.getMapDots();

		if (originalDots == null)
		{
			return;
		}

		originalDotSprites = Arrays.copyOf(originalDots, originalDots.length);
	}

	private void restoreOriginalDots()
	{
		SpritePixels[] mapDots = client.getMapDots();

		if (originalDotSprites == null || mapDots == null)
		{
			return;
		}

		System.arraycopy(originalDotSprites, 0, mapDots, 0, mapDots.length);
	}

	private int getModelID() {
		return config.modelID();
	}

	public void setRandomModelID(){
		configManager.setConfiguration(CONFIG_KEY, "modelID", ThreadLocalRandom.current().nextInt(config.randMinID(), config.randMaxID() + 1));
	}

	private void updateDropdown() {
		String[] modelList = config.models().split(",");
		PropHuntModelId.map.clear();

		for(String model : modelList) {
			model = model.trim();

			if(!modelEntry.matcher(model).matches()) continue;

			String modelName = model.split(":")[0].trim();
			String modelId = model.split(":")[1].trim();

			PropHuntModelId.add(modelName, Integer.parseInt(modelId));
		}

		panel.updateComboBox();
	}

	public void setModelID(PropHuntModelId modelData) {
		configManager.setConfiguration(CONFIG_KEY, "modelID", modelData.getId());
	}

	public void rotateModel(int dir) {
		if(localDisguise != null) {
			 int orientation = config.orientation() + 500*dir;
			 orientation = (((orientation % 2000) + 2000) % 2000);
			localDisguise.setOrientation(orientation);
			configManager.setConfiguration(CONFIG_KEY, "orientation", orientation);
		}
	}

	@Provides
	PropHuntConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PropHuntConfig.class);
	}
}

