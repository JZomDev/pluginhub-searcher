/*
 * Copyright (c) 2020, Hannah Ryan <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.emojiscape;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("EmojiScape")
public interface emojiscapeConfig extends Config
{
	@ConfigItem(
		keyName = "swapIconMode",
		name = "Icon Mode",
		description = "Choose whether the skill icon should replace the text, or appear after it",
		position = 1
	)
	default IconMode swapIconMode()
	{
		return IconMode.APPEND;
	}

	@ConfigItem(
		keyName = "afterTextStyle",
		name = "After Text Style",
		description = "If \"After Text\" is selected for Icon Mode, which style to apply to the icons.",
		position = 2
	)
	default AfterTextStyle afterTextStyle()
	{
		return AfterTextStyle.ROUND;
	}

	@ConfigItem(
		keyName = "skillIcons",
		name = "Skill Icons",
		description = "Enable icons for skills, with long and/or short triggers",
		position = 3
	)
	default TriggerMode skillIcons()
	{
		return TriggerMode.BOTH;
	}

	@ConfigItem(
		keyName = "prayerIcons",
		name = "Prayer Icons",
		description = "Enables icons for high level prayers (from Retribution to Augury)",
		position = 4
	)
	default boolean prayerIcons()
	{
		return true;
	}

	@ConfigItem(
		keyName = "miscIcons",
		name = "Misc Icons",
		description = "A mix of common map icons (bank, altar, shortcut) and other misc icons (listed on support repo)",
		position = 5
	)
	default TriggerMode miscIcons()
	{
		return TriggerMode.BOTH;
	}
}
/*
 * Copyright (c) 2020, Hannah Ryan <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.emojiscape;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum IconMode
{
	REPLACE("Replace text"),
	APPEND("After text");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2020, Hannah Ryan <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.emojiscape;

import com.google.common.collect.ImmutableMap;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Properties;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import net.runelite.client.util.ImageUtil;

@Slf4j
enum RSEmoji
{
	AGILITY, ATTACK, COMBAT, MELEE, CONSTRUCTION, COOKING, CRAFTING, DEFENCE, FARMING, FIREMAKING, FISHING, FLETCHING, HERBLORE,
	HITPOINTS, HUNTER, MAGIC, MINING, PRAYER, RANGED, RUNECRAFT, SLAYER, SMITHING, STRENGTH, THIEVING, WOODCUTTING,

	RETRIBUTION, REDEMPTION, SMITE, PRESERVE, CHIVALRY, PIETY, RIGOUR, AUGURY,

	BANK, ALTAR, SHORTCUT, QUEST, DIARY, MINIGAME, FAVOUR, ARCEUUS, HOSIDIUS, LOVAKENGJ, PISCARILIUS, SHAYZIEN, COINS, EXCHANGE,
	IRONMAN, HARDCORE, ULTIMATE, JMOD, PMOD,
	;

	public String getProperty(String LongorShort) throws IOException
	{
		int failCount = 0;
		int maxFails = 3;
		Properties prop = new Properties();
		while (true)
		{
			Path path = Paths.get(RuneLite.RUNELITE_DIR + "/emojiscape.properties");
			try
			{
				prop.load(Files.newInputStream(path));
				break;
			}
			catch (Exception e)
			{
				InputStream inputStream = getClass().getResourceAsStream("/emojiscape.properties");
				log.error("Could not find emojiscape.properties so creating it at: " + path.toAbsolutePath());

				Files.copy(inputStream, path);
				if (++failCount == maxFails) throw e;
			}
		}
		return prop.getProperty(this.name() + "." + LongorShort);
	}

	public String[] longTrigger() throws IOException
	{
		return getProperty("LongTrigger").split("\\s*,\\s*");

	}

	public String[] shortTrigger() throws IOException
	{
		return getProperty("ShortTrigger").split("\\s*,\\s*");
	}

	private static final Map<String, RSEmoji> skillLongEmojiMap;
	private static final Map<String, RSEmoji> skillShortEmojiMap;

	static
	{
		ImmutableMap.Builder<String, RSEmoji> builder = new ImmutableMap.Builder<>();

		for (final RSEmoji RSEmoji : values())
		{
			try
			{
				for (int i = 0; i < RSEmoji.longTrigger().length; i++)
				{
					builder.put(RSEmoji.longTrigger()[i], RSEmoji);
				}

			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}

		skillLongEmojiMap = builder.build();
	}

	static
	{
		ImmutableMap.Builder<String, RSEmoji> builder = new ImmutableMap.Builder<>();

		for (final RSEmoji RSEmoji : values())
		{
			try
			{
				for (int i = 0; i < RSEmoji.shortTrigger().length; i++)
				{
					builder.put(RSEmoji.shortTrigger()[i], RSEmoji);
				}
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}

		skillShortEmojiMap = builder.build();
	}


	BufferedImage loadImage(RSEmoji rsEmoji)
	{
		switch (rsEmoji)
		{
			case AGILITY: case ATTACK: case COMBAT: case CONSTRUCTION: case COOKING: case CRAFTING: case DEFENCE: case FARMING:
			case FIREMAKING: case FISHING: case FLETCHING: case HERBLORE: case HITPOINTS: case HUNTER: case MAGIC: case MELEE:
			case MINING: case PRAYER: case RANGED: case RUNECRAFT: case SLAYER: case SMITHING: case STRENGTH: case THIEVING: case WOODCUTTING:
				return ImageUtil.loadImageResource(getClass(), "/Skills/" + this.name().toLowerCase() + ".png");

			case AUGURY: case CHIVALRY: case PIETY: case PRESERVE: case REDEMPTION: case RETRIBUTION: case RIGOUR: case SMITE:
				return ImageUtil.loadImageResource(getClass(), "/Prayers/" + this.name().toLowerCase() + ".png");

			default: return ImageUtil.loadImageResource(getClass(), "/Misc/" + this.name().toLowerCase() + ".png");
		}
	}

	public static RSEmoji getRSEmoji(String longTrigger)
	{
		return skillLongEmojiMap.get(longTrigger);
	}

	public static RSEmoji getShortRSEmoji(String shortTrigger)
	{
		return skillShortEmojiMap.get(shortTrigger);
	}

}

/*
 * Copyright (c) 2020, Hannah Ryan <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.emojiscape;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum TriggerMode
{
	OFF("Off"),
	LONG("Long Triggers"),
	SHORT("Short Triggers"),
	BOTH("Both");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2020, Hannah Ryan <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.emojiscape;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum AfterTextStyle
{
	NONE("No style"),
	ROUND("(Round)"),
	SQUARE("[Square]");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2020, Hannah Ryan <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.emojiscape;

import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import javax.inject.Inject;
import com.google.inject.Provides;
import joptsimple.internal.Strings;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.IndexedSprite;
import net.runelite.api.MessageNode;
import net.runelite.api.Player;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.config.ConfigManager;

@PluginDescriptor(
	name = "EmojiScape",
	description = "Adds Runescape icons to chat"
)
@Slf4j
public class emojiscapePlugin extends Plugin
{
	private static final Pattern TAG_REGEXP = Pattern.compile("<[^>]*>");
	private static final Pattern WHITESPACE_REGEXP = Pattern.compile("[\\s\\u00A0]");
	private static final Pattern SLASH_REGEXP = Pattern.compile("[\\/]");
	private static final Pattern PUNCTUATION_REGEXP = Pattern.compile("[\\W\\_\\d]");

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ConfigManager configManager;

	@Inject
	private emojiscapeConfig config;


	private int modIconsStart = -1;

	@Override
	protected void startUp()
	{
		clientThread.invokeLater(this::loadRSEmojiIcons);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			loadRSEmojiIcons();
		}
	}

	private void loadRSEmojiIcons()
	{
		final IndexedSprite[] modIcons = client.getModIcons();
		if (modIconsStart != -1 || modIcons == null)
		{
			return;
		}

		final RSEmoji[] RSEmojis = RSEmoji.values();
		final IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + RSEmojis.length);
		modIconsStart = modIcons.length;

		for (int i = 0; i < RSEmojis.length; i++)
		{
			final RSEmoji RSEmoji = RSEmojis[i];

			try
			{
				final BufferedImage image = RSEmoji.loadImage(RSEmoji);
				final IndexedSprite sprite = ImageUtil.getImageIndexedSprite(image, client);
				newModIcons[modIconsStart + i] = sprite;
			}
			catch (Exception ex)
			{
				log.warn("Failed to load the sprite for RSEmoji " + RSEmoji, ex);
			}
		}

		log.debug("Adding RSEmoji icons");
		client.setModIcons(newModIcons);
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if (client.getGameState() != GameState.LOGGED_IN || modIconsStart == -1)
		{
			return;
		}

		switch (chatMessage.getType())
		{
			case PUBLICCHAT:
			case MODCHAT:
			case FRIENDSCHAT:
			case CLAN_CHAT:
			case CLAN_MESSAGE:
			case CLAN_GUEST_CHAT:
			case CLAN_GUEST_MESSAGE:
			case PRIVATECHAT:
			case PRIVATECHATOUT:
			case MODPRIVATECHAT:
				break;
			default:
				return;
		}

		final MessageNode messageNode = chatMessage.getMessageNode();
		final String message = messageNode.getValue();
		final String updatedMessage = updateMessage(message);

		if (updatedMessage == null)
		{
			return;
		}

		messageNode.setRuneLiteFormatMessage(updatedMessage);
		client.refreshChat();
	}

	@Subscribe
	public void onOverheadTextChanged(final OverheadTextChanged event)
	{
		if (!(event.getActor() instanceof Player))
		{
			return;
		}

		final String message = event.getOverheadText();
		final String updatedMessage = updateMessage(message);

		if (updatedMessage == null)
		{
			return;
		}

		event.getActor().setOverheadText(updatedMessage);
	}

	@Nullable
	String updateMessage(final String message)
	{
		String surroundLeft;
		String surroundRight;
		switch (config.afterTextStyle())
		{
			case ROUND:
				surroundLeft = "(";
				surroundRight = ")";
				break;
			case SQUARE:
				surroundLeft = "[";
				surroundRight = "]";
				break;
			default:
				surroundLeft = "";
				surroundRight = "";
		}
		final String[] slashWords = SLASH_REGEXP.split(message);
		boolean editedMessage = false;
		for (int s = 0; s < slashWords.length; s++)
		{
			final String[] messageWords = WHITESPACE_REGEXP.split(slashWords[s]);

			for (int i = 0; i < messageWords.length; i++)
			{
				boolean longTriggerUsed = false;
				boolean editWord = false;
				//Remove tags except for <lt> and <gt>
				final String pretrigger = removeTags(messageWords[i]);
				final Matcher matcherTrigger = PUNCTUATION_REGEXP.matcher(pretrigger);
				final String trigger = matcherTrigger.replaceAll("");
				if (trigger.equals(""))
				{
					continue;
				}
				final RSEmoji rsEmoji = RSEmoji.getRSEmoji(trigger.toLowerCase());
				final RSEmoji rsShortEmoji = RSEmoji.getShortRSEmoji(trigger.toLowerCase());

				if (rsEmoji == null && rsShortEmoji == null)
				{
					continue;
				}

				boolean skillLong = false;
				boolean skillShort = false;
				boolean miscLong = false;
				boolean miscShort = false;

				switch (config.skillIcons())
				{
					case LONG:
						skillLong = true;
						break;
					case SHORT:
						skillShort = true;
						break;
					case BOTH:
						skillLong = true;
						skillShort = true;
						break;
				}

				switch (config.miscIcons())
				{
					case LONG:
						miscLong = true;
						break;
					case SHORT:
						miscShort = true;
						break;
					case BOTH:
						miscLong = true;
						miscShort = true;
						break;
				}

				int rsEmojiId = 0;

				if (rsEmoji != null)
				{
					rsEmojiId = modIconsStart + rsEmoji.ordinal();
					if ((skillLong && rsEmoji.ordinal() <= 24)
					|| (config.prayerIcons() && 25 <= rsEmoji.ordinal() && rsEmoji.ordinal() <= 32)
					|| (miscLong && 33 <= rsEmoji.ordinal() && rsEmoji.ordinal() <= 51))
					{
						editWord = true;
					}
					longTriggerUsed = true;
				}

				if (rsShortEmoji != null && !longTriggerUsed)
				{
					rsEmojiId = modIconsStart + rsShortEmoji.ordinal();
					if ((skillShort && rsShortEmoji.ordinal() <= 24)
					|| (config.prayerIcons() && 25 <= rsShortEmoji.ordinal() && rsShortEmoji.ordinal() <= 32)
					|| (miscShort && 33 <= rsShortEmoji.ordinal() && rsShortEmoji.ordinal() <= 51))
					{
						editWord = true;
					}
				}

				if (editWord && rsEmojiId != 0)
				{
					if (config.swapIconMode() == IconMode.REPLACE)
					{
						messageWords[i] = messageWords[i].replace(trigger, "<img=" + rsEmojiId + ">");
					}
					else if (config.swapIconMode() == IconMode.APPEND)
					{
						messageWords[i] = messageWords[i].replace(trigger, trigger + surroundLeft + "<img=" + rsEmojiId + ">" + surroundRight);
					}
				}
				editedMessage = true;
			}
			slashWords[s] = Strings.join(messageWords, " ");
		}

		if (!editedMessage)
		{
			return null;
		}

		return Strings.join(slashWords, "/");
	}

	/**
	 * Remove tags, except for &lt;lt&gt; and &lt;gt&gt;
	 *
	 * @return
	 */
	private static String removeTags(String str)
	{
		StringBuffer stringBuffer = new StringBuffer();
		Matcher matcher = TAG_REGEXP.matcher(str);
		while (matcher.find())
		{
			matcher.appendReplacement(stringBuffer, "");
			String match = matcher.group(0);
			switch (match)
			{
				case "<lt>":
				case "<gt>":
					stringBuffer.append(match);
					break;
			}
		}
		matcher.appendTail(stringBuffer);
		return stringBuffer.toString();
	}

	@Provides
	emojiscapeConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(emojiscapeConfig.class);
	}
}
package com.emojiscape;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class emojiscapePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(emojiscapePlugin.class);
		RuneLite.main(args);
	}
}
